/* $Id: Oracle.kmt,v 1.3 2008-10-13 20:05:47 fmunoz Exp $ 
 * Creation : August 19, 2008
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            freddy
 */
package decomposition;
require "http://www.eclipse.org/emf/compare/diff/1.1"
require "http://www.eclipse.org/emf/compare/match/1.1"
require "http://www.kermeta.org/decompose/compare"
require "platform:/resource/fr.irisa.triskell.decompose/src/kermeta/OracleSupport.kmt"
require kermeta


/*
 * the oracle must provide the veridict determining whether the models are well formed or not.
 */
 
using kermeta::standard
using kermeta::utils
using ocompare
using decomposition::oracle
using diff

class Oracle
{

	//attribute traceability:Traceability 
	/*
	*	there must be some traceability mechanism here to trace back errors in the compositin engine
	*/
	attribute modelComparison:Compare
	
	operation initialize(path:String):Void is do
		var support:OSupport init OSupport.new
		self.modelComparison?=support.doLoad(path)
		//stdio.writeln("loading "+path)
	//	stdio.writeln("test passing; test failing;")
	end
	
	operation veredict(): Void is do
		var support:OSupport init OSupport.new
		var counter:Integer init 0
		var passes:Integer init 0
		var fails:Integer init 0
		self.modelComparison.toCompare.each{element|
		//	stdio.writeln("analyzing corresponding to: "+element.resultURI)
			var diffModel:DiffModel 
			diffModel?=support.doLoad(element.diffURI)
			var haveMod:Boolean init false
			diffModel.ownedElements.each{diffe|
				if diffe.subDiffElements.size() > 0  then
					haveMod:=true
				end
			}
			counter:=counter+1
			if haveMod then
				fails:=fails+1
			//	stdio.writeln("test generating: "+element.resultURI+"  - FAILS")
			else
				passes:=passes+1
			//	stdio.writeln("test generating: "+element.resultURI+"  + PASSES")
			end
		}
		stdio.writeln("numeral;"+passes.toString+";"+fails.toString+";")
	end

}