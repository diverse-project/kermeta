/* $Id: OracleSupport.kmt,v 1.3 2008-10-13 20:05:47 fmunoz Exp $ 
 * Creation : August 20, 2008
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            freddy
 */

package decomposition::oracle;


require kermeta
require "http://www.kermeta.org/decompose/compare"

using kermeta::standard
using kermeta::utils
using kermeta::persistence
using ocompare

class OSupport
{
	attribute sourceMapper:Hashtable<String,String>
	attribute matchResultMapper:Hashtable<String,String>
	attribute diffResultMapper:Hashtable<String,String>
	attribute resultFile:String
	attribute model:Compare
	attribute isCreated:Boolean
	
	operation initialize():Void is do
		self.sourceMapper:=Hashtable<String,String>.new
		self.matchResultMapper:=Hashtable<String,String>.new
		self.diffResultMapper:=Hashtable<String,String>.new
		self.isCreated:=false
	end
	
	operation createModel():Void is do
		model:=Compare.new
		self.sourceMapper.keys().each{k|
			var compareElement:CompareElement init CompareElement.new
			compareElement.originalURI:=self.sourceMapper.getValue(k)
			compareElement.resultURI:=k
			compareElement.diffURI:=self.diffResultMapper.getValue(k)
			compareElement.matchURI:=self.matchResultMapper.getValue(k)
			model.toCompare.add(compareElement)
		}
		self.isCreated:=true
	end
	
	operation doSave():Void is do
		if not self.isCreated then
			self.createModel()
		end
		
	//	stdio.writeln("Saving Oracle compare input: "+self.resultFile)
   		var resource : kermeta::persistence::EMFResource             
   		var repository : EMFRepository init EMFRepository.new
   		resource ?= repository.createResource(self.resultFile, "http://www.kermeta.org/decompose/compare")
        resource.instances.add(model)
        resource.save
	end
	
	operation doLoad(path:String) : Object is do
	//	stdio.writeln("Load oracle compare from: "+path)
		var resource : kermeta::persistence::EMFResource             
		var repository : EMFRepository init EMFRepository.new             
		resource ?= repository.getResource(path)
		resource.load
		result := resource.instances.one
	end
	
}