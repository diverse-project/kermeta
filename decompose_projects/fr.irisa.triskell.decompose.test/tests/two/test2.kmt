/* $Id: test2.kmt,v 1.4 2008-08-26 08:06:37 fmunoz Exp $ 
 * Creation : August 14, 2008
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            freddy
 */
@mainClass "tests::two::Main"
@mainOperation "main"


package tests::two;

require kermeta
require "platform:/resource/fr.irisa.triskell.decompose.test/tests/Ecore.kmt"
require "platform:/resource/fr.irisa.triskell.decompose/src/kermeta/kompose_input.kmt"
require "platform:/resource/fr.irisa.triskell.decompose/src/kermeta/kompose_km_script.kmt"
require "platform:/resource/fr.irisa.triskell.decompose/src/kermeta/OracleSupport.kmt"
require "platform:/resource/fr.irisa.triskell.decompose/src/kermeta/kompose_km_all.kmt"
require "platform:/resource/fr.irisa.triskell.decompose/src/kermeta/oracle_runner.kmt"

using kermeta::standard
using kompose
using ecore
using decomposition
using kermeta::utils
using kermeta::io
using kermeta::persistence
using decomposition::oracle

/*
class Main
{
	operation main() : Void is do 
		var toLoad:String toLoad:="platform:/resource/fr.irisa.triskell.decompose.test/tests/two/BankBLP.ecore"
		var toSaveLeft:String toSaveLeft:="platform:/resource/fr.irisa.triskell.decompose.test/tests/two/left"
		var toSaveRight:String toSaveRight:="platform:/resource/fr.irisa.triskell.decompose.test/tests/two/right"
		var extentionToSave:String extentionToSave:=".ecore"
		var decomposer:EcoreDecomposer init EcoreDecomposer.new
		
		var oriModel:Mergeable oriModel?=decomposer.loadModel(toLoad)
		
		// load the dependences table
		
		
		// EReference -> EClass
		// EAttribute -> EDataType
		
		
		//set the model of origin
		decomposer.initialize(oriModel)
		//decomposer.dependants.add("EStructuralFeature")
		decomposer.dependants.add("EReference")
		decomposer.dependants.add("EAttribute")
		
		//start the random decomposition
		decomposer.start()
		//save the decomposition result
		var numeral:Integer init 0
		if decomposer.left !=void then
			decomposer.left.each{l|
				decomposer.saveModel(l,toSaveLeft+numeral.toString+extentionToSave)
				numeral:=numeral+1
			}
		end
		numeral:=0
		if decomposer.right !=void then
			decomposer.right.each{r|
				decomposer.saveModel(r,toSaveRight+numeral.toString+extentionToSave)
				numeral:=numeral+1
			}
		end
	end
	
}*/

class Main
{
	operation main() : Void is do 
		var toLoad:String toLoad:="platform:/resource/fr.irisa.triskell.decompose.test/tests/two/BankBLP.ecore"
		var toSaveLeft:String toSaveLeft:="platform:/resource/fr.irisa.triskell.decompose.test/tests/two/left"
		var toSaveRight:String toSaveRight:="platform:/resource/fr.irisa.triskell.decompose.test/tests/two/right"
		var toSaveComposition:String toSaveComposition:="platform:/resource/fr.irisa.triskell.decompose.test/tests/two/result"
		var extentionToSave:String extentionToSave:=".ecore"
		var decomposer:EcoreDecomposer init EcoreDecomposer.new
		
		var inputGenerator:KomposeEcoreFileBridge init KomposeEcoreFileBridge.new
		var scriptGenerator:KomposeScriptBridge init KomposeScriptBridge.new
		var oracleSupport:OSupport init OSupport.new
		var scriptAllGen:KomposeScriptAll init KomposeScriptAll.new
		var oracleGenerator:OracleRunnerScript init OracleRunnerScript.new
		
		var kompose_files:String kompose_files:="platform:/resource/fr.irisa.triskell.decompose.test/tests/two/komposeComp.kompose"
		var kompose_scripts:String kompose_scripts:="platform:/resource/fr.irisa.triskell.decompose.test/tests/two/scripts/komposelr_test"
		var kompose_scripts_ext:String kompose_scripts_ext:=".kmt"
		var kompose_oracle_script:String init "platform:/resource/fr.irisa.triskell.decompose.test/tests/two/scripts/oracleAll.kmt"
		
		var oriModel:Mergeable oriModel:=decomposer.loadModel(toLoad)
		
		// load the dependences table
		
		
		// EReference -> EClass
		// EAttribute -> EDataType
		
		 oracleSupport.initialize()
		//set the model of origin
		decomposer.initialize(oriModel)
		//decomposer.dependants.add("EStructuralFeature")
		decomposer.dependants.add("EReference")
		decomposer.dependants.add("EAttribute")
		
		//start the random decomposition
		decomposer.start()
		//save the decomposition result
		
		var lefts:OrderedSet<String> init OrderedSet<String>.new
		var rights:OrderedSet<String> init OrderedSet<String>.new
		
		var numeral:Integer init 0
		if decomposer.left !=void then
			decomposer.left.each{l|
				var file:String file:=toSaveLeft+numeral.toString+extentionToSave
				lefts.add(file)
				decomposer.saveModel(l,file)
				numeral:=numeral+1
			}
		end
		numeral:=0
		if decomposer.right !=void then
			decomposer.right.each{r|
				var file:String file:=toSaveRight+numeral.toString+extentionToSave
				rights.add(file)
				decomposer.saveModel(r,file)
				numeral:=numeral+1
			}
		end
		
		stdio.writeln("generating scripts")
		
		var allScripts:OrderedSet<String> init OrderedSet<String>.new
		var fileio:FileIO init FileIO.new
		numeral:=0
		lefts.each{l|
			
			var r:String init rights.at(numeral)
			var resultFile:String init 	toSaveComposition+numeral.toString+extentionToSave
			
			
			
			var thisFile:String init  kompose_files+numeral.toString
			var scriptFile:String init kompose_scripts+numeral.toString+kompose_scripts_ext
			var inputStr:String init inputGenerator.generate(l,r,resultFile)
			var scriptStr:String init scriptGenerator.generate(numeral,thisFile)
			allScripts.add(scriptFile)
			
			oracleSupport.sourceMapper.put(resultFile,toLoad)
			
			var matchFile:String init resultFile+".match"
			var diffFile:String init resultFile+".diff"
			
			oracleSupport.matchResultMapper.put(resultFile,matchFile)
			oracleSupport.diffResultMapper.put(resultFile,diffFile)
			
			
			fileio.writeTextFile(thisFile,inputStr)
			fileio.writeTextFile(scriptFile,scriptStr)
			
		
			
			numeral:=numeral+1
		}
		
		var allScriptScr:String init scriptAllGen.generate(allScripts,numeral)
		var allScrFile:String init kompose_scripts+"all"+kompose_scripts_ext
		fileio.writeTextFile(allScrFile,allScriptScr)
		
		oracleSupport.resultFile:=toLoad+".ocompare"
		oracleSupport.doSave()
		
		var oracleScript:String init oracleGenerator.generate(oracleSupport.resultFile)
		var oracleScriptFile:String init 
		fileio.writeTextFile(kompose_oracle_script,oracleScript)
	end
}