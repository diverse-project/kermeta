/* $Id: test1.kmt,v 1.2 2008-08-17 19:38:52 fmunoz Exp $ 
 * Creation : August 14, 2008
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            freddy
 */
@mainClass "tests::one::Main"
@mainOperation "main"


package tests::one;


require kermeta
require "platform:/resource/fr.irisa.triskell.decompose.test/tests/Ecore.kmt"


using kermeta::standard
using kompose
using ecore
using decomposition
using kermeta::utils
using kermeta::persistence

class Main
{
	operation main() : Void is do 
		var toLoad:String toLoad:="platform:/resource/fr.irisa.triskell.decompose.test/tests/one/initialA.ecore"
		var toSaveLeft:String toSaveLeft:="platform:/resource/fr.irisa.triskell.decompose.test/tests/one/left.ecore"
		var toSaveRight:String toSaveRight:="platform:/resource/fr.irisa.triskell.decompose.test/tests/one/right.ecore"
		var decomposer:EcoreDecomposer init EcoreDecomposer.new
		
		var oriModel:Mergeable oriModel?=decomposer.loadModel(toLoad)
		
		// load the dependences table
		
		
		// EReference -> EClass
		// EAttribute -> EDataType
		
		
		//set the model of origin
		decomposer.initialize(oriModel)
		//decomposer.dependants.add("EStructuralFeature")
		decomposer.dependants.add("EReference")
		decomposer.dependants.add("EAttribute")
		
		//start the random decomposition
		decomposer.start()
		//save the decomposition result
		if decomposer.left !=void then
			decomposer.saveModel(decomposer.left,toSaveLeft)
		end
		if decomposer.right !=void then
			decomposer.saveModel(decomposer.right,toSaveRight)
		end
	end
}