/* $Id: InstanciateTemplate.kmt,v 1.1 2008-07-04 10:04:37 bmorin Exp $
 * Creation date: August 27, 2007
 * License:
 * Copyright:
 * Authors:
 */
@mainClass "specialize::Main"
@mainOperation "main"


package specialize;

require kermeta
require "platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"
require "platform:/resource/SmartAdapters/program/fractal/fractal.kmt"

using kermeta::standard
using kermeta::persistence
using kermeta::io
using art
using fractal

class Main
{
	operation main() : Void is do
		var modelURI : String init "platform:/resource/SmartAdapters/examples/crisisManagement/model/base/baseModel.art"
		var file : String init "C:/work/dev/diva/src/org/diva/causalLink/smartadapters/fractal/"
		
	 	var content : String
	 	var system : System init loadModel(EMFRepository.new, modelURI, "http://art").one.asType(System)
		file := file + system.name.replace(" ","").replace(".","") + "Main.java"

	 	var generator : FractalTemplate init FractalTemplate.new
	 	content := generator.generate(system) 
		stdio.write("Generating base configuration...")
		var fileWriter : FileIO init FileIO.new
		fileWriter.writeTextFile(file,content)
		stdio.write("OK!")
	end

    operation loadModel(repository : EMFRepository, modelPath : String, metamodelPath : String) : Set<kermeta::standard::Object> is do                   
   		var resource : Resource init repository.createResource(modelPath, metamodelPath)
       	resource.load()
        result := resource.instances
    end	
	
    operation saveModel(obj : Set<Object>, uri : String, domainMM : String) is do
    	var repository:EMFRepository init EMFRepository.new
	    var resource : Resource init repository.createResource(uri , domainMM)
	    obj.each{o | resource.instances.add(o)}
	    resource.save
    end		
}