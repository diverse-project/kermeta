<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="ModellingUnit">
    <details key="require" value="platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdaptersBase.kmt|platform:/resource/SmartAdapters/program/weaving/converter.kmt|"/>
    <details key="using" value="kermeta::standard|kermeta::utils|kermeta::persistence|kermeta::exceptions|patternframework|org::smartadapters::core|org::smartadapters::extension|ecore|org::smartadapters::utils|org|org::smartadapters|"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="org" nsURI="platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.ecore#/" nsPrefix="org">
    <eSubpackages name="smartadapters" nsURI="platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.ecore#/org/smartadapters" nsPrefix="smartadapters">
      <eSubpackages name="core" nsURI="platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.ecore#/org/smartadapters/core" nsPrefix="core">
        <eClassifiers xsi:type="ecore:EClass" name="Adapter">
          <eAnnotations source="kermeta">
            <details key="aspect" value="true"/>
          </eAnnotations>
          <eSuperTypes href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.ecore#/1/language/structure/Object"/>
          <eOperations name="initConvert">
            <eAnnotations source="kermeta">
              <details key="isAbstract" value="true"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="apply" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;binding := b&#xA;&#x9;if clone.equals(void) then&#xA;&#x9;&#x9;initClone&#xA;&#xA;&#x9;end&#xA;&#x9;adapt.each{a | do&#xA;&#x9;&#x9;&#x9;stdio.writeln(&quot;#>&quot;.plus(a.getMetaClass.name).plus(&quot;...&quot;))&#xA;&#x9;&#x9;&#x9;a.execute&#xA;&#x9;&#x9;&#x9;stdio.writeln(&quot;#>done!&quot;)&#xA;&#x9;&#x9;end}&#xA;&#x9;updateClones&#xA;end"/>
            </eAnnotations>
            <eParameters name="b">
              <eType xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/hashtable.ecore#/1/utils/Hashtable"/>
            </eParameters>
          </eOperations>
          <eOperations name="initClone" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;initConvert&#xA;&#x9;clone := kermeta::utils::Hashtable&lt;kermeta::standard::Object, kermeta::standard::Object>.new&#xA;&#x9;cloned := kermeta::standard::Set&lt;kermeta::standard::Object>.new&#xA;&#x9;created := kermeta::utils::Hashtable&lt;kermeta::standard::Object, kermeta::standard::Object>.new&#xA;&#x9;if aspect.structure.isNotEqual(void) then&#xA;&#x9;&#x9;aspect.structure.content.each{elt | do&#xA;&#x9;&#x9;&#x9;&#x9;var newCloned : kermeta::standard::Object&#xA;&#x9;&#x9;&#x9;&#x9;newCloned := converter.getConverted(elt)&#xA;&#x9;&#x9;&#x9;&#x9;if newCloned.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;clone.put(elt, newCloned)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;   initClone must be called before the first binding&#xD;&#xA;   */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="updateClones" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if aspect.structure.isNotEqual(void) then&#xA;&#x9;&#x9;aspect.structure.content.each{o | do&#xA;&#x9;&#x9;&#x9;&#x9;if not (aspect.persistent.contains(o)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;updateClone(o, void)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;   updateClone must be called after every binding&#xD;&#xA;   */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="updateClone" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;clone.remove(pObj)&#xA;&#x9;converter.deleteConverted(pObj)&#xA;&#x9;var newCloned : kermeta::standard::Object&#xA;&#x9;if template.isNotEqual(void) then&#xA;&#x9;&#x9;cloned.remove(template)&#xA;&#x9;&#x9;newCloned := kermeta::standard::Object.clone(template)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;newCloned := converter.getConverted(pObj)&#xA;&#xA;&#x9;end&#xA;&#x9;if newCloned.isNotEqual(void) then&#xA;&#x9;&#x9;clone.put(pObj, newCloned)&#xA;&#x9;&#x9;if template.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;cloned.add(template)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="pObj" eType="/1/smartadapters/core/Object"/>
            <eParameters name="template" eType="/1/smartadapters/core/Object"/>
          </eOperations>
          <eOperations name="cloneAgain">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var toClone : kermeta::standard::Boolean init type.equals(org::smartadapters::core::uniqueType.non_unique)&#xA;&#x9;if (not (toClone)) and (type.equals(org::smartadapters::core::uniqueType.unique)) then&#xA;&#x9;&#x9;if template.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;toClone := not (cloned.contains(getRealObject(template, false)))&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;toClone := clone.getValue(o).equals(void)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;&#x9;if (not (toClone)) and (type.equals(org::smartadapters::core::uniqueType.onDemand)) then&#xA;&#x9;&#x9;var input : kermeta::standard::String init stdio.read(&quot;$>clone &quot;.plus(o.toString).plus(&quot; (true/false) :&quot;))&#xA;&#x9;&#x9;toClone := input.toBoolean&#xA;&#xA;&#x9;end&#xA;&#x9;if toClone then&#xA;&#x9;&#x9;if template.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;updateClone(o, getRealObject(template, false))&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;updateClone(o, void)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="o" eType="/1/smartadapters/core/Object"/>
            <eParameters name="template" eType="/1/smartadapters/core/Object"/>
            <eParameters name="type">
              <eType xsi:type="ecore:EEnum" href="genericSmartAdaptersBase.ecore#/1/smartadapters/core/uniqueType"/>
            </eParameters>
          </eOperations>
          <eOperations name="setMultipleProperty">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if o.isNotEqual(void) then&#xA;&#x9;&#x9;var coll : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;var collToSet : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;coll ?= o&#xA;&#x9;&#x9;collToSet ?= prty&#xA;&#x9;&#x9;if ((coll.isNotEqual(void)) and (collToSet.isNotEqual(void))) and ((coll.size) > (0)) then&#xA;&#x9;&#x9;&#x9;var realColl : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;&#x9;realColl ?= getRealObject(o, true)&#xA;&#x9;&#x9;&#x9;collToSet.addAll(realColl)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="prty" eType="/1/smartadapters/core/Object"/>
            <eParameters name="o" eType="/1/smartadapters/core/Object"/>
          </eOperations>
          <eOperations name="setSingleProperty" eType="/1/smartadapters/core/Object">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if o.isNotEqual(void) then&#xA;&#x9;&#x9;result := getRealObject(o, false)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result := old&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="o" eType="/1/smartadapters/core/Object"/>
            <eParameters name="old" eType="/1/smartadapters/core/Object"/>
          </eOperations>
          <eOperations name="unsetSingleProperty" eType="/1/smartadapters/core/Object">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if o.isNotEqual(void) then&#xA;&#x9;&#x9;stdio.writeln(&quot;?>unset: 1&quot;)&#xA;&#x9;&#x9;result := void&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;stdio.writeln(&quot;?>unset: 2 &quot;.plus(getRealObject(o, false).toString))&#xA;&#x9;&#x9;result := old&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="o" eType="/1/smartadapters/core/Object"/>
            <eParameters name="old" eType="/1/smartadapters/core/Object"/>
          </eOperations>
          <eOperations name="unsetMultipleProperty">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (prty.isNotEqual(void)) and (o.isNotEqual(void)) then&#xA;&#x9;&#x9;var coll : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;var collToSet : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;coll ?= o&#xA;&#x9;&#x9;collToSet ?= prty&#xA;&#x9;&#x9;if (coll.isNotEqual(void)) and (collToSet.isNotEqual(void)) then&#xA;&#x9;&#x9;&#x9;var realColl : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;&#x9;realColl ?= getRealObject(o, true)&#xA;&#x9;&#x9;&#x9;realColl.each{o | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;collToSet.remove(o)&#xA;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="prty" eType="/1/smartadapters/core/Object"/>
            <eParameters name="o" eType="/1/smartadapters/core/Object"/>
          </eOperations>
          <eOperations name="getRealObject" eType="/1/smartadapters/core/Object">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if isCollect then&#xA;&#x9;&#x9;var col : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;col ?= obj&#xA;&#x9;&#x9;var res : kermeta::standard::Set&lt;kermeta::standard::Object> init kermeta::standard::Set&lt;kermeta::standard::Object>.new&#xA;&#x9;&#x9;col.each{o | do&#xA;&#x9;&#x9;&#x9;&#x9;res.add(getRealObject(o, false))&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;result := res&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var realObj : kermeta::standard::Object&#xA;&#x9;&#x9;realObj := clone.getValue(obj)&#xA;&#x9;&#x9;if realObj.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;result := realObj&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;realObj := binding.getValue(obj)&#xA;&#x9;&#x9;&#x9;if realObj.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;result := realObj&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;realObj := created.getValue(obj)&#xA;&#x9;&#x9;&#x9;&#x9;if realObj.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result := realObj&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var pObj : patternframework::PObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pObj ?= obj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if pObj.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result := converter.getConverted(obj)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result := obj&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="obj" eType="/1/smartadapters/core/Object"/>
            <eParameters name="isCollect">
              <eType xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/primitive_types.ecore#/1/standard/Boolean"/>
            </eParameters>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="clone" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;   key : aspect element&#xD;&#xA;   value : associated clone&#xD;&#xA;   */"/>
            </eAnnotations>
            <eGenericType>
              <eTypeArguments/>
              <eTypeArguments/>
              <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/hashtable.ecore#/1/utils/Hashtable"/>
            </eGenericType>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cloned" containment="true">
            <eGenericType>
              <eTypeArguments/>
              <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/collections.ecore#/1/standard/Set"/>
            </eGenericType>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="binding" containment="true">
            <eGenericType>
              <eTypeArguments/>
              <eTypeArguments/>
              <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/hashtable.ecore#/1/utils/Hashtable"/>
            </eGenericType>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="convert" containment="true">
            <eGenericType>
              <eTypeArguments>
                <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/reflection/reflection.ecore#/1/reflection/Class"/>
              </eTypeArguments>
              <eTypeArguments>
                <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/reflection/reflection.ecore#/1/reflection/Class"/>
              </eTypeArguments>
              <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/hashtable.ecore#/1/utils/Hashtable"/>
            </eGenericType>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="enum" containment="true">
            <eGenericType>
              <eTypeArguments>
                <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/reflection/reflection.ecore#/1/reflection/Enumeration"/>
              </eTypeArguments>
              <eTypeArguments>
                <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/reflection/reflection.ecore#/1/reflection/Enumeration"/>
              </eTypeArguments>
              <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/hashtable.ecore#/1/utils/Hashtable"/>
            </eGenericType>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="created" containment="true">
            <eGenericType>
              <eTypeArguments/>
              <eTypeArguments/>
              <eClassifier xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/hashtable.ecore#/1/utils/Hashtable"/>
            </eGenericType>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="converter" containment="true">
            <eType xsi:type="ecore:EClass" href="../../program/weaving/converter.ecore#/1/smartadapters/utils/Converter"/>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Object" instanceClassName="java.lang.Object"/>
      </eSubpackages>
      <eSubpackages name="extension" nsURI="platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.ecore#/org/smartadapters/extension" nsPrefix="extension">
        <eClassifiers xsi:type="ecore:EClass" name="DerivableAdapter" eSuperTypes="/1/smartadapters/core/Adapter">
          <eAnnotations source="kermeta">
            <details key="aspect" value="true"/>
          </eAnnotations>
          <eOperations name="resolve" eType="/1/smartadapters/core/Adapter">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var adapter : org::smartadapters::extension::DerivableAdapter init org::smartadapters::extension::DerivableAdapter.new&#xA;&#x9;var isChecked : kermeta::standard::Boolean init true&#xA;&#x9;constraints.each{c | do&#xA;&#x9;&#x9;&#x9;isChecked := (isChecked) and (c.check(derivation))&#xA;&#x9;&#x9;end}&#xA;&#x9;if isChecked then&#xA;&#x9;&#x9;adapt.each{a | do&#xA;&#x9;&#x9;&#x9;&#x9;adapter.addAdaptation(derivation, a)&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;alternatives.each{a | do&#xA;&#x9;&#x9;&#x9;&#x9;adapter.addAlternative(derivation, a)&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;if adapter.isConcretizable then&#xA;&#x9;&#x9;&#x9;var concreteAdapter : org::smartadapters::core::Adapter init org::smartadapters::core::Adapter.new&#xA;&#x9;&#x9;&#x9;converter.addEntry(adapter.getMetaClass, concreteAdapter.getMetaClass)&#xA;&#x9;&#x9;&#x9;adapter.adapt.each{a | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;converter.addEntry(a.getMetaClass, a.getMetaClass)&#xA;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;&#x9;if converter.equals(void) then&#xA;&#x9;&#x9;&#x9;&#x9;converter := org::smartadapters::utils::Converter.new&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;concreteAdapter ?= converter.getConverted(adapter)&#xA;&#x9;&#x9;&#x9;result := concreteAdapter&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := adapter&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var e : org::smartadapters::extension::NonApplicableDerivation init org::smartadapters::extension::NonApplicableDerivation.new&#xA;&#x9;&#x9;e.display&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="derivation">
              <eType xsi:type="ecore:EClass" href="genericSmartAdaptersBase.ecore#/1/smartadapters/extension/Derivation"/>
            </eParameters>
          </eOperations>
          <eOperations name="addAdaptation" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (not (a.isOptional)) or (d.selectedOptions.contains(a)) then&#xA;&#x9;&#x9;adapt.add(a)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="d">
              <eType xsi:type="ecore:EClass" href="genericSmartAdaptersBase.ecore#/1/smartadapters/extension/Derivation"/>
            </eParameters>
            <eParameters name="a">
              <eType xsi:type="ecore:EClass" href="genericSmartAdaptersBase.ecore#/1/smartadapters/core/Adaptation"/>
            </eParameters>
          </eOperations>
          <eOperations name="addConjunction" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (not (c.isOptional)) or (d.selectedOptions.contains(c)) then&#xA;&#x9;&#x9;c.~and.each{e | do&#xA;&#x9;&#x9;&#x9;&#x9;var a : org::smartadapters::core::Adaptation&#xA;&#x9;&#x9;&#x9;&#x9;a ?= e&#xA;&#x9;&#x9;&#x9;&#x9;if a.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addAdaptation(d, a)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var alt : org::smartadapters::extension::EntityAlternative&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alt ?= e&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if alt.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addAlternative(d, alt)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var conj : org::smartadapters::extension::EntityConjunction&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;conj ?= e&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if conj.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addConjunction(d, conj)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="d">
              <eType xsi:type="ecore:EClass" href="genericSmartAdaptersBase.ecore#/1/smartadapters/extension/Derivation"/>
            </eParameters>
            <eParameters name="c">
              <eType xsi:type="ecore:EClass" href="genericSmartAdaptersBase.ecore#/1/smartadapters/extension/EntityConjunction"/>
            </eParameters>
          </eOperations>
          <eOperations name="addAlternative" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if d.elements.exists{e | do&#xA;&#x9;&#x9;&#x9;e.alternative.equals(alt)&#xA;&#x9;&#x9;end} then&#xA;&#x9;&#x9;var v : org::smartadapters::extension::AdapterElement&#xA;&#x9;&#x9;var elt : org::smartadapters::extension::DerivationElement&#xA;&#x9;&#x9;elt := d.elements.~select{e | do&#xA;&#x9;&#x9;&#x9;&#x9;e.alternative.equals(alt)&#xA;&#x9;&#x9;&#x9;end}.one&#xA;&#x9;&#x9;v := elt.selectedVariant&#xA;&#x9;&#x9;var a : org::smartadapters::core::Adaptation&#xA;&#x9;&#x9;a ?= v&#xA;&#x9;&#x9;if a.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;addAdaptation(d, a)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;var altern : org::smartadapters::extension::EntityAlternative&#xA;&#x9;&#x9;&#x9;altern ?= v&#xA;&#x9;&#x9;&#x9;if altern.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;addAlternative(d, altern)&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;var c : org::smartadapters::extension::EntityConjunction&#xA;&#x9;&#x9;&#x9;&#x9;c ?= v&#xA;&#x9;&#x9;&#x9;&#x9;if c.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addConjunction(d, c)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;if (not (alt.isOptional)) or (d.selectedOptions.contains(alt)) then&#xA;&#x9;&#x9;&#x9;self.alternatives.add(alt)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
            <eParameters name="d">
              <eType xsi:type="ecore:EClass" href="genericSmartAdaptersBase.ecore#/1/smartadapters/extension/Derivation"/>
            </eParameters>
            <eParameters name="alt">
              <eType xsi:type="ecore:EClass" href="genericSmartAdaptersBase.ecore#/1/smartadapters/extension/EntityAlternative"/>
            </eParameters>
          </eOperations>
          <eOperations name="isConcretizable">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := (alternatives.size) == (0)&#xA;end"/>
            </eAnnotations>
            <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
          </eOperations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="NonApplicableDerivation">
          <eSuperTypes href="../../../../plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.ecore#/1/exceptions/Exception"/>
          <eOperations name="display" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;message := &quot;Derivation is not applicable to DerivableAdapter. Maybe the derivation is not well formed.&#xA;&#xD;&#xA;    Please check that the derivation respects all the explicit and implicit constraints...&quot;&#xA;end"/>
            </eAnnotations>
          </eOperations>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EAnnotation source="dependentResource">
    <references href="genericSmartAdaptersBase.ecore#/0"/>
    <references href="genericSmartAdaptersBase.ecore#/1"/>
    <references href="../../../fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/metamodel/PatternFramework.ecore#/0"/>
    <references href="../../../fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/metamodel/PatternFramework.ecore#/1"/>
    <references href="../domain/runtime/runtimePattern.ecore#/"/>
    <references href="../domain/runtime/typePattern.ecore#/"/>
    <references href="../domain/FSMMMPattern.ecore#/0"/>
    <references href="../domain/FSMMMPattern.ecore#/1"/>
    <references href="../../program/weaving/converter.ecore#/0"/>
    <references href="../../program/weaving/converter.ecore#/1"/>
  </ecore:EAnnotation>
</xmi:XMI>
