/* $Id: dynamicAdaptation.kmt,v 1.4 2008-06-24 14:37:31 bmorin Exp $
 * Creation date: March 19, 2008
 * License:
 * Copyright: IRISA / INRIA Rennes Bretagne Atlantique
 * Authors: Brice Morin bmorin@irisa.fr
 */
@mainClass "test::ServiceDiscoveryMain"
@mainOperation "main"


package test;
require kermeta

//Loading the platform adapter (here, the service discovery example for the Fractal platform)
//just change this require to adapt another platform and/or another application
require "platform:/lookup/org.kermeta.smartadapters/program/adapter/ServiceDiscovery.kmt"

using kermeta::standard
using kermeta::persistence

using org::kermeta::runtime::adapter
using art
using art::instance
using art::display


class ServiceDiscoveryMain
{
	operation main() : Void is do 
		var model : String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/fromPlatform/referenceModel_base.art"
		var SAmodel: String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/woven/SAModel.art"
		var afterSA : String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/fromPlatform/referenceModel_SA.art"
		var DAmodel : String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/woven/DAModel.art"
		var afterDA : String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/fromPlatform/referenceModel_DA.art"
		
		var display : DisplayContext init DisplayContext.new
		display.~init
		var resource : Resource
		var root : CompositeInstance 
			
		
		stdio.writeln("K> Running the service discovery application (Base configuration)")
		var platformAdapter : PlatformAdapter init PlatformAdapter.new 
		platformAdapter.~init
		platformAdapter.run
		
		stdio.writeln("K> Saving the model corresponding to the current state of the running system (SA)")
		platformAdapter.saveModel(model)
		stdio.writeln("")
		
		resource := EMFRepository.new.createResource(model, "http://art")
		resource.load
		root := resource.instances.one.asType(System).root
		display.setRoot(root)
		display.enter(root)
		
/*		stdio.writeln("K> Submit a new configuration: SA")
		stdio.writeln("     -Model comparison")
		stdio.writeln("     -Analyze diff / match")
		stdio.writeln("     -Instanciate and order atomic reconfiguration commands")
		stdio.writeln("     -Execute the ordered set of commands")
		stdio.writeln("")
		platformAdapter.loadUpdateModel(SAmodel)
		
		stdio.writeln("K> Saving the model corresponding to the current state of the running system (SA)")
		platformAdapter.saveModel(afterSA)
		
		stdio.writeln("K> Submit a new configuration: DA")
		platformAdapter.loadUpdateModel(DAmodel)
		stdio.writeln("K> Saving the model corresponding to the current state of the running system (DA)")
		platformAdapter.saveModel(afterDA)
*/	end
}