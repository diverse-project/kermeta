
/* $Id:$ 
 * Creation : February 9, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            barais
 */
@mainClass "ecore::Main"
@mainOperation "main"


package patternframework;


require kermeta
require "platform:/resource/org.kermeta.art.model.pattern/model/metamodel@runtimePattern.ecore"
require "s0.kmt"

using kermeta::standard
using kermeta::persistence
using pattern

aspect class ModelPattern {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.ModelPattern" +" "+ na +  " = (patternframework.ModelPattern) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if ("+" "+ na + " " + "== null){
")
			ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createModelPattern();
")
			ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
")	
	else
		if self.ownedTags.exists{tag | "uniqueWithScope".equals(tag.name)} then
			var scopeName : String init "scope_"+ctx.getGenerateName
			ctx.res.append("Set<EObject> "+scopeName+" = new HashSet<EObject>();")
			self.ownedTags.detect{tag | "uniqueWithScope".equals(tag.name)}.~value.split(" ").each{elt |
				ctx.res.append(scopeName+".add("+elt+");")
			}
			
			ctx.res.append("if (uniqueObjectsWithScope.get("+scopeName+") == null){")
				ctx.res.append("	uniqueObjectsWithScope.put("+scopeName+", new Hashtable<String, EObject>());")
			ctx.res.append("}
")
			
			ctx.res.append("patternframework.ModelPattern" +" "+ na +  " = (patternframework.ModelPattern) uniqueObjectsWithScope.get("+scopeName+").get(\""+na+"\");
")
			ctx.res.append("if ("+" "+ na + " " + "== null){
")
				ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createModelPattern();
")
				ctx.res.append("	uniqueobjectsWithScope.get("+scopeName+").put(\""+na+"\","+ na+");
")
			ctx.res.append("}
")
		else
			ctx.res.append("patternframework.ModelPattern" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createModelPattern();
")
		end 
	end
	
if not self.pattern.isVoid then

	self.pattern.pass1create(ctx)
end

if not self.constraints.isVoid then

	self.constraints.pass1create(ctx)
end

if self.falsepositivepatterns.size >0 then

	self.falsepositivepatterns.each{c|c.pass1create(ctx)}
end
end 
operation  pass2set(ctx:Context):Void is do 
 	
	self.featureIdentifier.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"FeatureIdentifier"+"().add( \""+c.toString+" \");
")	
	}	


	if (not self.pattern.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Pattern"+"("+ctx.cache.getValue(self.pattern)+");
")	
	end
	if (not self.constraints.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Constraints"+"("+ctx.cache.getValue(self.constraints)+");
")	
	end

	self.falsepositivepatterns.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Falsepositivepatterns"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if not self.pattern.isVoid then

	self.pattern.pass2set(ctx)
end

if not self.constraints.isVoid then

	self.constraints.pass2set(ctx)
end

if self.falsepositivepatterns.size >0 then

	self.falsepositivepatterns.each{c|c.pass2set(ctx)}
end
end
operation  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName()
		ctx.cache.put(self,varName)
		ctx.res.append("$"+varName+"Decl: "+"patternframework.ModelPattern(")
			if (self.featureIdentifier.size > 0) then
		if i > 0 then
			ctx.res.append(", ")
		end
		
		var j : Integer init 0
		self.featureIdentifier.each{o |
			if j > 0 then
				ctx.res.append(", ")
			end
			ctx.res.append("featureIdentifier contains "+o.toString)
		}
		i := i+1	
	end
ctx.res.append(")\n")

if not self.pattern.isVoid then

	self.pattern.pointcut2droolsPass1(ctx)
end

if not self.constraints.isVoid then

	self.constraints.pointcut2droolsPass1(ctx)
end

if self.falsepositivepatterns.size >0 then

	self.falsepositivepatterns.each{c|c.pointcut2droolsPass1(ctx)}
end
end
operation  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append("$"+varName+": patternframework.ModelPattern(")
		ctx.res.append("this == $"+varName+"Decl")
			if (not self.pattern.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("pattern == $"+ctx.cache.getValue(self.pattern)+"Decl")
	end
	if (not self.constraints.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("constraints == $"+ctx.cache.getValue(self.constraints)+"Decl")
	end
	if (self.falsepositivepatterns.size > 0) then
		self.falsepositivepatterns.each{o |
			ctx.res.append(", ")
			ctx.res.append("falsepositivepatterns contains $"+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if not self.pattern.isVoid then

	self.pattern.pointcut2droolsPass2(ctx)
end

if not self.constraints.isVoid then

	self.constraints.pointcut2droolsPass2(ctx)
end

if self.falsepositivepatterns.size >0 then

	self.falsepositivepatterns.each{c|c.pointcut2droolsPass2(ctx)}
end
end

}aspect class PModel {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.PModel" +" "+ na +  " = (patternframework.PModel) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if ("+" "+ na + " " + "== null){
")
			ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPModel();
")
			ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
")	
	else
		if self.ownedTags.exists{tag | "uniqueWithScope".equals(tag.name)} then
			var scopeName : String init "scope_"+ctx.getGenerateName
			ctx.res.append("Set<EObject> "+scopeName+" = new HashSet<EObject>();")
			self.ownedTags.detect{tag | "uniqueWithScope".equals(tag.name)}.~value.split(" ").each{elt |
				ctx.res.append(scopeName+".add("+elt+");")
			}
			
			ctx.res.append("if (uniqueObjectsWithScope.get("+scopeName+") == null){")
				ctx.res.append("	uniqueObjectsWithScope.put("+scopeName+", new Hashtable<String, EObject>());")
			ctx.res.append("}
")
			
			ctx.res.append("patternframework.PModel" +" "+ na +  " = (patternframework.PModel) uniqueObjectsWithScope.get("+scopeName+").get(\""+na+"\");
")
			ctx.res.append("if ("+" "+ na + " " + "== null){
")
				ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPModel();
")
				ctx.res.append("	uniqueobjectsWithScope.get("+scopeName+").put(\""+na+"\","+ na+");
")
			ctx.res.append("}
")
		else
			ctx.res.append("patternframework.PModel" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPModel();
")
		end 
	end
	
if self.content.size >0 then

	self.content.each{c|c.pass1create(ctx)}
end

if self.roles.size >0 then

	self.roles.each{c|c.pass1create(ctx)}
end
end 
operation  pass2set(ctx:Context):Void is do 
 	
	self.content.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Content"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.roles.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Roles"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.content.size >0 then

	self.content.each{c|c.pass2set(ctx)}
end

if self.roles.size >0 then

	self.roles.each{c|c.pass2set(ctx)}
end
end
operation  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName()
		ctx.cache.put(self,varName)
		ctx.res.append("$"+varName+"Decl: "+"patternframework.PModel(")
		ctx.res.append(")\n")

if self.content.size >0 then

	self.content.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.roles.size >0 then

	self.roles.each{c|c.pointcut2droolsPass1(ctx)}
end
end
operation  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append("$"+varName+": patternframework.PModel(")
		ctx.res.append("this == $"+varName+"Decl")
			if (self.content.size > 0) then
		self.content.each{o |
			ctx.res.append(", ")
			ctx.res.append("content contains $"+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.roles.size > 0) then
		self.roles.each{o |
			ctx.res.append(", ")
			ctx.res.append("roles contains $"+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.content.size >0 then

	self.content.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.roles.size >0 then

	self.roles.each{c|c.pointcut2droolsPass2(ctx)}
end
end

}aspect class PObject {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.PObject" +" "+ na +  " = (patternframework.PObject) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if ("+" "+ na + " " + "== null){
")
			ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPObject();
")
			ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
")	
	else
		if self.ownedTags.exists{tag | "uniqueWithScope".equals(tag.name)} then
			var scopeName : String init "scope_"+ctx.getGenerateName
			ctx.res.append("Set<EObject> "+scopeName+" = new HashSet<EObject>();")
			self.ownedTags.detect{tag | "uniqueWithScope".equals(tag.name)}.~value.split(" ").each{elt |
				ctx.res.append(scopeName+".add("+elt+");")
			}
			
			ctx.res.append("if (uniqueObjectsWithScope.get("+scopeName+") == null){")
				ctx.res.append("	uniqueObjectsWithScope.put("+scopeName+", new Hashtable<String, EObject>());")
			ctx.res.append("}
")
			
			ctx.res.append("patternframework.PObject" +" "+ na +  " = (patternframework.PObject) uniqueObjectsWithScope.get("+scopeName+").get(\""+na+"\");
")
			ctx.res.append("if ("+" "+ na + " " + "== null){
")
				ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPObject();
")
				ctx.res.append("	uniqueobjectsWithScope.get("+scopeName+").put(\""+na+"\","+ na+");
")
			ctx.res.append("}
")
		else
			ctx.res.append("patternframework.PObject" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPObject();
")
		end 
	end
	end 
operation  pass2set(ctx:Context):Void is do 
 		if (not self.pid.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Pid"+"(\""+self.pid.toString+"\");
")	
	end
end
operation  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName()
		ctx.cache.put(self,varName)
		ctx.res.append("$"+varName+"Decl: "+"patternframework.PObject(")
		ctx.res.append(")\n")
end
operation  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append("$"+varName+": patternframework.PObject(")
		ctx.res.append("this == $"+varName+"Decl")
		ctx.res.append(")\n")
end

}aspect class PConstraint {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.PConstraint" +" "+ na +  " = (patternframework.PConstraint) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if ("+" "+ na + " " + "== null){
")
			ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPConstraint();
")
			ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
")	
	else
		if self.ownedTags.exists{tag | "uniqueWithScope".equals(tag.name)} then
			var scopeName : String init "scope_"+ctx.getGenerateName
			ctx.res.append("Set<EObject> "+scopeName+" = new HashSet<EObject>();")
			self.ownedTags.detect{tag | "uniqueWithScope".equals(tag.name)}.~value.split(" ").each{elt |
				ctx.res.append(scopeName+".add("+elt+");")
			}
			
			ctx.res.append("if (uniqueObjectsWithScope.get("+scopeName+") == null){")
				ctx.res.append("	uniqueObjectsWithScope.put("+scopeName+", new Hashtable<String, EObject>());")
			ctx.res.append("}
")
			
			ctx.res.append("patternframework.PConstraint" +" "+ na +  " = (patternframework.PConstraint) uniqueObjectsWithScope.get("+scopeName+").get(\""+na+"\");
")
			ctx.res.append("if ("+" "+ na + " " + "== null){
")
				ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPConstraint();
")
				ctx.res.append("	uniqueobjectsWithScope.get("+scopeName+").put(\""+na+"\","+ na+");
")
			ctx.res.append("}
")
		else
			ctx.res.append("patternframework.PConstraint" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPConstraint();
")
		end 
	end
	end 
operation  pass2set(ctx:Context):Void is do 
 		if (not self.expression.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Expression"+"(\""+self.expression.toString+"\");
")	
	end
	if (not self.language.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Language"+"("+self.language.toString+");
")	
	end
end
operation  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName()
		ctx.cache.put(self,varName)
		ctx.res.append("$"+varName+"Decl: "+"patternframework.PConstraint(")
			if (not self.expression.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("expression == \""+self.expression.toString+"\"")
		i := i+1	
	end
	if (not self.language.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("language == "+self.language.toString)
		i := i+1	
	end
ctx.res.append(")\n")
end
operation  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append("$"+varName+": patternframework.PConstraint(")
		ctx.res.append("this == $"+varName+"Decl")
		ctx.res.append(")\n")
end

}aspect class PRole {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.PRole" +" "+ na +  " = (patternframework.PRole) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if ("+" "+ na + " " + "== null){
")
			ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPRole();
")
			ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
")	
	else
		if self.ownedTags.exists{tag | "uniqueWithScope".equals(tag.name)} then
			var scopeName : String init "scope_"+ctx.getGenerateName
			ctx.res.append("Set<EObject> "+scopeName+" = new HashSet<EObject>();")
			self.ownedTags.detect{tag | "uniqueWithScope".equals(tag.name)}.~value.split(" ").each{elt |
				ctx.res.append(scopeName+".add("+elt+");")
			}
			
			ctx.res.append("if (uniqueObjectsWithScope.get("+scopeName+") == null){")
				ctx.res.append("	uniqueObjectsWithScope.put("+scopeName+", new Hashtable<String, EObject>());")
			ctx.res.append("}
")
			
			ctx.res.append("patternframework.PRole" +" "+ na +  " = (patternframework.PRole) uniqueObjectsWithScope.get("+scopeName+").get(\""+na+"\");
")
			ctx.res.append("if ("+" "+ na + " " + "== null){
")
				ctx.res.append("	"+na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPRole();
")
				ctx.res.append("	uniqueobjectsWithScope.get("+scopeName+").put(\""+na+"\","+ na+");
")
			ctx.res.append("}
")
		else
			ctx.res.append("patternframework.PRole" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPRole();
")
		end 
	end
	end 
operation  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.player.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Player"+"("+ctx.cache.getValue(self.player)+");
")	
	end
end
operation  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName()
		ctx.cache.put(self,varName)
		ctx.res.append("$"+varName+"Decl: "+"patternframework.PRole(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name == \""+self.name.toString+"\"")
		i := i+1	
	end
ctx.res.append(")\n")
end
operation  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append("$"+varName+": patternframework.PRole(")
		ctx.res.append("this == $"+varName+"Decl")
			if (not self.player.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("player == $"+ctx.cache.getValue(self.player)+"Decl")
	end
ctx.res.append(")\n")
end

}