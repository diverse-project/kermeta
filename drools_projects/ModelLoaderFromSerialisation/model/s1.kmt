
/* $Id:$ 
 * Creation : February 9, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            barais
 */


package patternframework;


require kermeta
require "platform:/resource/org.kermeta.art.model.pattern/model/metamodel@runtimePattern.ecore"
require "s0.kmt"

using kermeta::standard
using kermeta::persistence
using pattern

aspect class ModelPattern {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.ModelPattern" +" "+ na +  " = (patternframework.ModelPattern) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if (uniqueobjects.get(\""+na+"\")==null){
"  )
		ctx.res.append(na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createModelPattern();
")
		ctx.res.append("uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
"  )
		
	else
		ctx.res.append("patternframework.ModelPattern" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createModelPattern();
")
	end
	
if not self.pattern.isVoid then

	self.pattern.pass1create(ctx)
end

if not self.constraints.isVoid then

	self.constraints.pass1create(ctx)
end

if self.falsepositivepatterns.size >0 then

	self.falsepositivepatterns.each{c|c.pass1create(ctx)}
end
end 
operation  pass2set(ctx:Context):Void is do 
 	
	self.featureIdentifier.each{c|
	ctx.res.append("if (" + ctx.cache.getValue(self) + " != null){")
		ctx.res.append(ctx.cache.getValue(self) + ".get"+"FeatureIdentifier"+"().add( \""+c.toString+" \");
")	
	ctx.res.append("}" )
	
	}	


	if (not self.pattern.isVoid()) then
	ctx.res.append("if (" + ctx.cache.getValue(self) + " != null && " + ctx.cache.getValue(self.pattern) + "!=null){" )
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Pattern"+"("+ctx.cache.getValue(self.pattern)+");
")	
	ctx.res.append("}")
	end
	if (not self.constraints.isVoid()) then
	ctx.res.append("if (" + ctx.cache.getValue(self) + " != null && " + ctx.cache.getValue(self.constraints) + "!=null){" )
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Constraints"+"("+ctx.cache.getValue(self.constraints)+");
")	
	ctx.res.append("}")
	end

	self.falsepositivepatterns.each{c|
	ctx.res.append("if (" + ctx.cache.getValue(self) + " != null && " + ctx.cache.getValue(c) + "!=null){" )
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Falsepositivepatterns"+"().add("+ctx.cache.getValue(c)+");
")	
	ctx.res.append("}")
	}	



if not self.pattern.isVoid then

	self.pattern.pass2set(ctx)
end

if not self.constraints.isVoid then

	self.constraints.pass2set(ctx)
end

if self.falsepositivepatterns.size >0 then

	self.falsepositivepatterns.each{c|c.pass2set(ctx)}
end
end 
 }
aspect class PModel {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.PModel" +" "+ na +  " = (patternframework.PModel) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if (uniqueobjects.get(\""+na+"\")==null){
"  )
		ctx.res.append(na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPModel();
")
		ctx.res.append("uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
"  )
		
	else
		ctx.res.append("patternframework.PModel" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPModel();
")
	end
	
if self.roles.size >0 then

	self.roles.each{c|c.pass1create(ctx)}
end
end 
operation  pass2set(ctx:Context):Void is do 
 	
	self.content.each{c|
	ctx.res.append("if (" + ctx.cache.getValue(self) + " != null && " + ctx.cache.getValue(c) + "!=null){" )
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Content"+"().add("+ctx.cache.getValue(c)+");
")	
	ctx.res.append("}")
	}	



	self.roles.each{c|
	ctx.res.append("if (" + ctx.cache.getValue(self) + " != null && " + ctx.cache.getValue(c) + "!=null){" )
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Roles"+"().add("+ctx.cache.getValue(c)+");
")	
	ctx.res.append("}")
	}	



if self.roles.size >0 then

	self.roles.each{c|c.pass2set(ctx)}
end
end 
 }
aspect class PObject {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.PObject" +" "+ na +  " = (patternframework.PObject) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if (uniqueobjects.get(\""+na+"\")==null){
"  )
		ctx.res.append(na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPObject();
")
		ctx.res.append("uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
"  )
		
	else
		ctx.res.append("patternframework.PObject" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPObject();
")
	end
	end 
operation  pass2set(ctx:Context):Void is do 
 	end 
 }
aspect class PConstraint {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.PConstraint" +" "+ na +  " = (patternframework.PConstraint) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if (uniqueobjects.get(\""+na+"\")==null){
"  )
		ctx.res.append(na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPConstraint();
")
		ctx.res.append("uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
"  )
		
	else
		ctx.res.append("patternframework.PConstraint" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPConstraint();
")
	end
	end 
operation  pass2set(ctx:Context):Void is do 
 		if (not self.expression.isVoid()) then
		ctx.res.append("if (" + ctx.cache.getValue(self) + " != null){" )
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Expression"+"(\""+self.expression.toString+"\");
")	
		ctx.res.append("}")
	end
	if (not self.language.isVoid()) then
		ctx.res.append("if (" + ctx.cache.getValue(self) + " != null){" )
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Language"+"("+self.language.toString+");
")	
		ctx.res.append("}")
	end
end 
 }
aspect class PRole {
operation  pass1create(ctx:Context):Void is do 
 	
	var na : String init ctx.getGenerateName
 	ctx.cache.put(self,na)	
	if self.ownedTags.exists{tag | "unique".equals(tag.name)} then
		ctx.res.append("patternframework.PRole" +" "+ na +  " = (patternframework.PRole) uniqueobjects.get(\""+na+"\");
")
		ctx.res.append("if (uniqueobjects.get(\""+na+"\")==null){
"  )
		ctx.res.append(na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPRole();
")
		ctx.res.append("uniqueobjects.put(\""+na+"\","+ na+");
")
		ctx.res.append("}
"  )
		
	else
		ctx.res.append("patternframework.PRole" +" "+ na +  " = patternframework.PatternframeworkFactory.eINSTANCE.createPRole();
")
	end
	end 
operation  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append("if (" + ctx.cache.getValue(self) + " != null){" )
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
		ctx.res.append("}")
	end
	if (not self.player.isVoid()) then
	ctx.res.append("if (" + ctx.cache.getValue(self) + " != null && " + ctx.cache.getValue(self.player) + "!=null){" )
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Player"+"("+ctx.cache.getValue(self.player)+");
")	
	ctx.res.append("}")
	end
end 
 }
