global java.util.Map uniqueobjects;
global java.util.Map perRole;
global java.util.Map perElem;
Rule "Aspect"
when
$s0Decl: art.System()
$s1Decl: art.distrib.Node(uri matches "http://diva/.*", name matches "n.*")
$s2Decl: art.instance.PrimitiveInstance(name matches "i.*")
$s3Decl: art.type.FunctionalService(name matches ".*Log.*")
$s4Decl: art.type.PrimitiveType()
$s5Decl: art.type.Port(role == "client")

$s0: art.System(this == $s0Decl, nodes contains $s1Decl, services contains $s3Decl, types contains $s4Decl)
$s1: art.distrib.Node(this == $s1Decl, components contains $s2Decl)
$s2: art.instance.PrimitiveInstance(this == $s2Decl)
$s3: art.type.FunctionalService(this == $s3Decl)
$s4: art.type.PrimitiveType(this == $s4Decl, port contains $s5Decl)
$s5: art.type.Port(this == $s5Decl, service == $s3Decl)

then

art.instance.PrimitiveInstance s6 = null;
art.instance.PrimitiveInstance s7 = null;
art.instance.TransmissionBinding s8 = null;
art.type.PrimitiveType s9 = null;
art.type.Port s10 = null;
art.type.FunctionalService s11 = null;

java.util.Map<String, Object> scope_s6 = new java.util.HashMap<String, Object>();
scope_s6.put("$s1", $s1);
if (perRole.get(scope_s6) == null){
	perRole.put(scope_s6, new java.util.HashMap<String, Object>());
}
s6 = (art.instance.PrimitiveInstance) ((java.util.Map<String, Object>) perRole.get(scope_s6)).get("s6");
if ( s6 == null){
	s6 = art.instance.InstanceFactory.eINSTANCE.createPrimitiveInstance();
	((java.util.Map<String, Object>) perRole.get(scope_s6)).put("s6",s6);
}
s9 = (art.type.PrimitiveType) uniqueobjects.get("s9");
if ( s9 == null){
	s9 = art.type.TypeFactory.eINSTANCE.createPrimitiveType();
	uniqueobjects.put("s9",s9);
}
s11 = (art.type.FunctionalService) uniqueobjects.get("s11");
if ( s11 == null){
	s11 = art.type.TypeFactory.eINSTANCE.createFunctionalService();
	uniqueobjects.put("s11",s11);
}
s10 = (art.type.Port) uniqueobjects.get("s10");
if ( s10 == null){
	s10 = art.type.TypeFactory.eINSTANCE.createPort();
	uniqueobjects.put("s10",s10);
}

if (s6 == null)
	s6 = art.instance.InstanceFactory.eINSTANCE.createPrimitiveInstance();
if (s7 == null)
	s7 = art.instance.InstanceFactory.eINSTANCE.createPrimitiveInstance();
if (s8 == null)
	s8 = art.instance.InstanceFactory.eINSTANCE.createTransmissionBinding();
if (s9 == null)
	s9 = art.type.TypeFactory.eINSTANCE.createPrimitiveType();
if (s10 == null)
	s10 = art.type.TypeFactory.eINSTANCE.createPort();
if (s11 == null)
	s11 = art.type.TypeFactory.eINSTANCE.createFunctionalService();

s6.setName("Logger");
s7.getBinding().add(s8);
s8.setId("log");
s8.setServer(s10);
s8.setServerInstance(s6);
s9.setName("Logger");
s9.getPort().add(s10);
s10.setLower(0);
s10.setUpper(-1);
s10.setRole("server");
s10.setName("log");
s10.setService(s11);
s11.setName("log4j.Log");

$s0.getServices().add(s11);
$s0.getTypes().add(s9);
$s1.getComponents().add(s6);
s8.setClient($s5);
$s2.getBinding().add(s8);
end