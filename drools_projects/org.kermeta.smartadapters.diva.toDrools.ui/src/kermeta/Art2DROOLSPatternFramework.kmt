/* $Id:$ 
 * Creation : February 8, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            barais
 */ 
@mainClass "patternframework::Main"
@mainOperation "main"


package patternframework; 


require kermeta



require "platform:/lookup/org.kermeta.art.adapter/model/runtime_AOM_Framework1.ecore"
require "../model/s0.kmt"
require "./adaptationsGenerator.kmt"

using kermeta::standard
using kermeta::language::structure
using kermeta::persistence
using org::smartadapters::core

using pattern::art
class Main {
	
	operation main(file : String) : Void is do
		self.process(file,file.replace(".smART",".drl"))		
		//self.process("file:/C:/NOSAVE/workspaces/runtime-New_configuration/SmartAdaptersV2/v2/01_LoggingAdapter.smART","file:/C:/NOSAVE/workspaces/runtime-New_configuration/SmartAdaptersV2/v2/01_LoggingAdapter.drl")
	end
	
	
	operation process(smarturl:String,drl:String):Void is do
	
		var ctx : pattern::Context init pattern::Context.new
		ctx.res := kermeta::utils::StringBuffer.new
		ctx.cache := kermeta::utils::Hashtable<Object,String>.new		
		
		var rep : EMFRepository  init EMFRepository.new
		var res : EMFResource 
		
		
		res ?= rep.createResource(smarturl, "platform:/plugin/org.kermeta.art.adapter/model/runtime_AOM_Framework1.ecore")
		res.load
		var root : Adapter
		root ?= res.one()
		 
		root.~aspect.persistent.each{o| var t : Tag init Tag.new 
			t.name:="unique"
			t.~value:="true"	
			o.ownedTags.add(t)
		}
		 
		var name:String init "RuleName"
		
		ctx.res.append("global java.util.List list;\n")
		ctx.res.append("global java.util.Map uniqueobjects;\n")
		
		ctx.res.append("rule \""+ name + "\"\n")
						 
		 
		ctx.res.append("when\n")
		
		var systemPC : System 
		systemPC ?= root.~aspect.template.pattern.content.one
		systemPC.pointcut2droolsPass1(ctx)
		systemPC.pointcut2droolsPass2(ctx)
		
		ctx.res.append("then\n")
		
		var systemAD : System
		systemAD ?= root.~aspect.structure.content.one
		systemAD.pass1create(ctx)
		systemAD.pass2set(ctx)
		
		var ctxadaptation : org::smartadapters::core::adaptations::Context init org::smartadapters::core::adaptations::Context.new
		ctxadaptation.res := kermeta::utils::StringBuffer.new
		ctxadaptation.cache := kermeta::utils::Hashtable<Object,String>.new		
		
		ctx.cache.keys().each{key| ctxadaptation.cache.put(key,ctx.cache.getValue(key))}
		root.adapt.each{a| a.toDrools(ctxadaptation)} 
		
		ctx.res.append(ctxadaptation.res.toString)
		
		ctx.res.append("end")
		
		stdio.writeln(ctx.res.toString)
		
		var f : kermeta::io::FileIO init kermeta::io::FileIO.new
		stdio.writeln("saving to "+drl)
		f.writeTextFile(drl,ctx.res.toString)
		stdio.writeln(ctx.res.toString)	
	end
}