/**
 * License: EPL
 * Copyright: IRISA / INRIA / Universite de Rennes 1
 * 
 * Generating with Kermeta <http://www.kermeta.org>
 *
 * $Id$
 */
package sca;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>SCA</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see sca.ScaPackage#getSCA()
 * @model
 * @generated
 */
public interface SCA extends kermeta.language.structure.Object {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model dataType="kermeta.standard.JavaString"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='\njava.lang.String result = null;\n\n\tkermeta.utils.StringBuffer _res = ((kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStringBuffer()));\n\n\t_res.append(\"\\n<sca:composite xmlns:sca=\\\"http://www.osoa.org/xmlns/sca/1.0\\\" xmlns:sample=\\\"http://sample\\\" xmlns=\\\"http://www.osoa.org/xmlns/sca/1.0\\\" name=\\\"\");\n\n\t_res.append(system.getRoot().getName());\n\n\t_res.append(\"\\\" targetNamespace=\\\"http://sample\\\">\\n\");\n\n\t//BIft:each\n\n\t\n{\n\n\tkermeta.standard.Iterator<art.instance.ComponentInstance> it_ft112 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.<art.instance.ComponentInstance>convertAsOrderedSet(system.getRoot().getSubComponent()).iterator();\n\tjava.lang.Boolean idLoopCond_394 = false;\n\twhile( !idLoopCond_394 ) {\n\tidLoopCond_394 = it_ft112.isOff();\n\tif ( idLoopCond_394 ) {\n\t} else {\n\n\t//BIle:func\nart.instance.ComponentInstance sub_lbdExp112 = it_ft112.next();\n\n\t_res.append(\"\\t<sca:component name=\\\"\");\n\n\t_res.append(sub_lbdExp112.getName());\n\n\t_res.append(\"\\\">\\n\");\n\n\t//BIft:select\n\nkermeta.standard.Sequence<art.type.Port> result_ft114 = null;\n\n\tart.type.Port elem_ft114 = null;\n\n\tresult_ft114 = ((kermeta.standard.Sequence<art.type.Port>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSequence()));\n\n\t\n{\n\n\tkermeta.standard.Iterator<art.type.Port> it_ft114 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.<art.type.Port>convertAsOrderedSet(sub_lbdExp112.getType().getPort()).iterator();\n\tjava.lang.Boolean idLoopCond_396 = false;\n\twhile( !idLoopCond_396 ) {\n\tidLoopCond_396 = it_ft114.isOff();\n\tif ( idLoopCond_396 ) {\n\t} else {\n\n\telem_ft114 = it_ft114.next();\n\n\tjava.lang.Boolean idIfCond_397 = false;\n//BIle:selector\nart.type.Port p_lbdExp114 = elem_ft114;\n\n\tidIfCond_397 = kermeta.standard.helper.StringWrapper.equals(p_lbdExp114.getRole(), \"server\");\n//EIle:selector\n\n\n\tif( idIfCond_397 ) {\n\n\tresult_ft114.add(elem_ft114);\n}\n\n}\n\t}\n}\n\n//EIft:select\n//BIft:each\n\n\t\n{\n\n\tkermeta.standard.Iterator<art.type.Port> it_ft113 = result_ft114.iterator();\n\tjava.lang.Boolean idLoopCond_395 = false;\n\twhile( !idLoopCond_395 ) {\n\tidLoopCond_395 = it_ft113.isOff();\n\tif ( idLoopCond_395 ) {\n\t} else {\n\n\t//BIle:func\nart.type.Port p_lbdExp113 = it_ft113.next();\n\n\t_res.append(\"\\t\\t<sca:service name=\\\"\");\n\n\t_res.append(p_lbdExp113.getName());\n\n\t_res.append(\"\\\">\\n\\t\\t\\t<sca:interface.java interface=\\\"\");\n\n\t_res.append(p_lbdExp113.getService().getName());\n\n\t_res.append(\"\\\"/>\\n\\t\\t</sca:service>\\n\");\n//EIle:func\n\n}\n\t}\n}\n\n//EIft:each\n\n\n\t_res.append(\"\");\n\n\t//BIft:select\n\nkermeta.standard.Sequence<art.type.Port> result_ft116 = null;\n\n\tart.type.Port elem_ft116 = null;\n\n\tresult_ft116 = ((kermeta.standard.Sequence<art.type.Port>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSequence()));\n\n\t\n{\n\n\tkermeta.standard.Iterator<art.type.Port> it_ft116 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.<art.type.Port>convertAsOrderedSet(sub_lbdExp112.getType().getPort()).iterator();\n\tjava.lang.Boolean idLoopCond_399 = false;\n\twhile( !idLoopCond_399 ) {\n\tidLoopCond_399 = it_ft116.isOff();\n\tif ( idLoopCond_399 ) {\n\t} else {\n\n\telem_ft116 = it_ft116.next();\n\n\tjava.lang.Boolean idIfCond_400 = false;\n//BIle:selector\nart.type.Port p_lbdExp116 = elem_ft116;\n\n\tidIfCond_400 = kermeta.standard.helper.StringWrapper.equals(p_lbdExp116.getRole(), \"client\");\n//EIle:selector\n\n\n\tif( idIfCond_400 ) {\n\n\tresult_ft116.add(elem_ft116);\n}\n\n}\n\t}\n}\n\n//EIft:select\n//BIft:each\n\n\t\n{\n\n\tkermeta.standard.Iterator<art.type.Port> it_ft115 = result_ft116.iterator();\n\tjava.lang.Boolean idLoopCond_398 = false;\n\twhile( !idLoopCond_398 ) {\n\tidLoopCond_398 = it_ft115.isOff();\n\tif ( idLoopCond_398 ) {\n\t} else {\n\n\t//BIle:func\nart.type.Port p_lbdExp115 = it_ft115.next();\n\n\t_res.append(\"\\t\\t <sca:reference name=\\\"\");\n\n\t_res.append(p_lbdExp115.getName());\n\n\t_res.append(\"\\\"/>\\n\");\n//EIle:func\n\n}\n\t}\n}\n\n//EIft:each\n\n\n\t_res.append(\"\");\n\n\t//BIft:each\n\n\t\n{\n\n\tkermeta.standard.Iterator<art.instance.ValuedAttribute> it_ft117 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.<art.instance.ValuedAttribute>convertAsOrderedSet(sub_lbdExp112.getAttribute()).iterator();\n\tjava.lang.Boolean idLoopCond_401 = false;\n\twhile( !idLoopCond_401 ) {\n\tidLoopCond_401 = it_ft117.isOff();\n\tif ( idLoopCond_401 ) {\n\t} else {\n\n\t//BIle:func\nart.instance.ValuedAttribute a_lbdExp117 = it_ft117.next();\n\n\t_res.append(\"\\t\\t<sca:property name=\\\"\");\n\n\t_res.append(kermeta.standard.helper.StringWrapper.substring(kermeta.standard.helper.StringWrapper.split(a_lbdExp117.getValue(), \":\").elementAt(0), 3, kermeta.standard.helper.StringWrapper.size(kermeta.standard.helper.StringWrapper.split(a_lbdExp117.getValue(), \": \").elementAt(0))));\n\n\t_res.append(\"\\\">\");\n\n\t_res.append(kermeta.standard.helper.StringWrapper.split(a_lbdExp117.getValue(), \": \").elementAt(1));\n\n\t_res.append(\"</sca:property>\\n\");\n//EIle:func\n\n}\n\t}\n}\n\n//EIft:each\n\n\n\t_res.append(\"\\t</sca:component>\\n\");\n//EIle:func\n\n}\n\t}\n}\n\n//EIft:each\n\n\n\t_res.append(\"\");\n\n\t//BIft:each\n\n\t\n{\n\n\tkermeta.standard.Iterator<art.instance.TransmissionBinding> it_ft118 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.<art.instance.TransmissionBinding>convertAsOrderedSet(system.getRoot().getterGetAllBindings()).iterator();\n\tjava.lang.Boolean idLoopCond_402 = false;\n\twhile( !idLoopCond_402 ) {\n\tidLoopCond_402 = it_ft118.isOff();\n\tif ( idLoopCond_402 ) {\n\t} else {\n\n\t//BIle:func\nart.instance.TransmissionBinding b_lbdExp118 = it_ft118.next();\n\n\t_res.append(\"\\t<sca:wire source=\\\"\");\n\n\t_res.append(((art.instance.ComponentInstance) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.containerSwitcher(b_lbdExp118), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(\"art.instance.ComponentInstance\"))).getName());\n\n\t_res.append(\"/\");\n\n\t_res.append(b_lbdExp118.getClient().getName());\n\n\t_res.append(\"\\\" target=\\\"\");\n\n\t_res.append(b_lbdExp118.getServerInstance().getName());\n\n\t_res.append(\"/\");\n\n\t_res.append(b_lbdExp118.getServer().getName());\n\n\t_res.append(\"\\\"/>\\n\");\n//EIle:func\n\n}\n\t}\n}\n\n//EIft:each\n\n\n\t_res.append(\"\");\n\n\t//BIft:each\n\n\t\n{\n\n\tkermeta.standard.Iterator<art.instance.DelegationBinding> it_ft119 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.<art.instance.DelegationBinding>convertAsOrderedSet(system.getRoot().getDelegation()).iterator();\n\tjava.lang.Boolean idLoopCond_403 = false;\n\twhile( !idLoopCond_403 ) {\n\tidLoopCond_403 = it_ft119.isOff();\n\tif ( idLoopCond_403 ) {\n\t} else {\n\n\t//BIle:func\nart.instance.DelegationBinding d_lbdExp119 = it_ft119.next();\n\n\t_res.append(\"\\t<sca:service name=\\\"\");\n\n\t_res.append(d_lbdExp119.getSource().getName());\n\n\t_res.append(\"\\\" promote=\\\"\");\n\n\t_res.append(d_lbdExp119.getServerInstance().getName());\n\n\t_res.append(\"/\");\n\n\t_res.append(d_lbdExp119.getExported().getName());\n\n\t_res.append(\"\\\"/>\\n\");\n//EIle:func\n\n}\n\t}\n}\n\n//EIft:each\n\n\n\t_res.append(\"</sca:composite>\");\n\n\tresult = _res.toString();\n\nreturn result;\n'"
	 * @generated
	 */
	String generate(art.System system);

} // SCA
