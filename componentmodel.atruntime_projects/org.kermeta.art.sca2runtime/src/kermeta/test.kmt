/* $Id:$ 
 * Creation : June 25, 2009
 * Licence  : EPL 
 * Copyright: INRIA, Centre Rennes - Bretagne Atlantique
 * Authors  : Brice Morin 
 *      
 */
@mainClass "root_package::Main"
@mainOperation "main"


package root_package;


require kermeta
require "platform:/resource/org.kermeta.art.sca2runtime/metamodel/sca.kmt"

using kermeta::standard
using kermeta::persistence

using sca

using art

class Main
{
	operation main(scaModel : String, artModel : String) : Void is do
			
		//loading an SCA model	
		var composite : Composite init loadSCAModel(scaModel)
		//composite.component.each{c | stdio.errorln(c.toString)}
		
		var mapper : SCAtoART init SCAtoART.new
		mapper.scaComposite := composite 
		mapper.sca2art		
		
		var system : System init mapper.artSystem
		
		/*system.root.subComponent.each{c |
			stdio.writeln(c.name)
			c.binding.each{b | 
				stdio.writeln(b.toString)
			}
		}*/
		
		saveARTModel(system, artModel)
	end
	
	operation loadSCAModel(modelUri : String) : Composite is
	do
		stdio.writeln("Loading SCA model from "+modelUri)
		var repository : Repository init EMFRepository.new
		var resource : Resource
		var root : DocumentRoot
		var composite : Composite
				
		resource := repository.createResource(modelUri, "http://www.osoa.org/xmlns/sca/1.0")
		resource.load
		
		var elements : Set<Object> init resource.instances
		
		root := elements.select { e | DocumentRoot.isInstance(e) }.one.asType(DocumentRoot)
       	composite := root.composite.one
    	
    	result := composite
	end
	
	operation saveARTModel(system : System, modelUri : String) : Void is
	do
		stdio.writeln("Saving ART model to "+modelUri)
    	var repository:EMFRepository init EMFRepository.new
	    var resource : Resource init repository.createResource(modelUri , "platform:/plugin/org.kermeta.art.model/model/metamodel@runtime.ecore"/*"http://art"*/)
	    resource.instances.add(system)
	    resource.save
	end
}