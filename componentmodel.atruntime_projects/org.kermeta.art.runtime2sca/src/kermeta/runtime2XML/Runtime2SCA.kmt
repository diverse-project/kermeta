/* 
 * Creation : July 7, 2008
 * Licence  : EPL 
 * Copyright: IRISA / INRIA Rennes
 * Authors  : Brice Morin, Equipe-Projet INRIA Triskell
 *            bmorin[at]irisa.fr
 *
 */
@mainClass "runtime2SCA::Main"
@mainOperation "main"


package runtime2SCA;


require kermeta
require "./system2composite.kmt"


using kermeta::standard
using kermeta::persistence
using kermeta::io
using art
using art::implem
using sca

class Main
{
	@main ""
	operation main() : Void is do
		var modelURI : String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/woven/DAModel.art"
		var file : String init "C:/Documents and Settings/bmorin/workspace/SCA_example/src/test.composite"
		
	 	mainWithParameter(modelURI, file)
	end
	
	@main "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/woven/DAModel.art C:/Documents and Settings/bmorin/workspace/SCA_example/src/test.composite"
	operation mainWithParameter(modelURI : String, file : String) : Void is do
		
	 	var content : String
	 	var system : System init loadModel(EMFRepository.new, modelURI)
	
	 	var generator : SCA init SCA.new
	 	content := generator.generate(system) 
		stdio.write("Generating base configuration...")
		var fileWriter : FileIO init FileIO.new
		fileWriter.writeTextFile(file,content)
		stdio.write("OK!")
	end
	
	operation loadModel(repository : EMFRepository, model : String) : System is
	do
		var resource : Resource init repository.createResource(model, "http://art")
		resource.load
		result ?= resource.instances.one	
	end
}