package sca;
require kermeta
require "platform:/resource/org.kermeta.art.Runtime2SCA/src/kermeta/runtime2XML/metamodel@runtime.kmt"
using kermeta::standard
using kermeta::utils
using art
using art::instance
using art::type
class SCA{
operation generate(system:System):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("\n<sca:composite xmlns:sca=\"http://www.osoa.org/xmlns/sca/1.0\" name=\"")
_res.append(system.root.name)
_res.append("\" targetNamespace=\"http://sample\">\n")
system.root.subComponent.each{ sub |
_res.append("\t<sca:component constrainingType=\"eu.diva.")
_res.append(sub.name)
_res.append("\" name=\"")
_res.append(sub.name)
_res.append("\">\n\t<sca:implementation.java class=\"eu.diva.")
_res.append(sub.name)
_res.append(".")
_res.append(sub.name)
_res.append("Impl\"/>\n")
sub.type.port.select{p | p.role == "server"}.each{p |
_res.append("\t\t<sca:service name=\"")
_res.append(p.name)
_res.append("\">\n\t\t\t<sca:interface.java interface=\"")
_res.append(p.service.name)
_res.append("\"/>\n\t\t</sca:service>\n")
}
_res.append("")
sub.type.port.select{p | p.role == "client"}.each{p |
_res.append("\t\t <sca:reference name=\"")
_res.append(p.name)
_res.append("\"/>\n")
}
_res.append("")
sub.~attribute.each{a | 
_res.append("\t\t<sca:property name=\"")
_res.append(a.~value.split(":").elementAt(0).substring(3,a.~value.split(": ").elementAt(0).size))
_res.append("\">")
_res.append(a.~value.split(": ").elementAt(1))
_res.append("</sca:property>\n")
}
_res.append("\t</sca:component>\n")
}
_res.append("")
system.root.getAllBindings.each{b | 
_res.append("\t<sca:wire source=\"")
_res.append(b.container.asType(ComponentInstance).name)
_res.append("/")
_res.append(b.client.name)
_res.append("\" target=\"")
_res.append(b.serverInstance.name)
_res.append("/")
_res.append(b.server.name)
_res.append("\"/>\n")
}
_res.append("")
system.root.delegation.each{d | 
_res.append("\t<sca:service name=\"")
_res.append(d.source.name)
_res.append("\" promote=\"")
_res.append(d.serverInstance.name)
_res.append("/")
_res.append(d.exported.name)
_res.append("\"/>\n")
}
_res.append("</sca:composite>")
result := _res.toString
end
}
