<?xml version="1.0" encoding="ASCII"?>
<simk:SIMKModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:simk="http://www.kermeta.org/simk">
  <sMContexts sMMethods="//@sMMethods.0" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__size__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.1" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.2" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.3" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.4" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.5" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__one__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.6" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__sum__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.7" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.8" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__empty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.9" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__isEmpty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.10" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__any__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.11" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__isNotEmpty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.12" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__iterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.13" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Iterator__hasNext__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.14" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Iterator__next__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.15" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Iterator__isOff__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.16 //@sMMethods.17 //@sMMethods.18 //@sMMethods.19 //@sMMethods.20 //@sMMethods.21 //@sMMethods.22 //@sMMethods.23 //@sMMethods.24 //@sMMethods.25 //@sMMethods.26 //@sMMethods.27 //@sMMethods.28 //@sMMethods.29 //@sMMethods.30 //@sMMethods.31 //@sMMethods.32 //@sMMethods.33 //@sMMethods.34 //@sMMethods.35 //@sMMethods.36 //@sMMethods.37 //@sMMethods.38 //@sMMethods.39 //@sMMethods.40 //@sMMethods.41" finalPackageQName="kermeta.standard.helper">
    <sMClass name="BooleanWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.42 //@sMMethods.43 //@sMMethods.44 //@sMMethods.45 //@sMMethods.46 //@sMMethods.47 //@sMMethods.48 //@sMMethods.49 //@sMMethods.50 //@sMMethods.51 //@sMMethods.52 //@sMMethods.53 //@sMMethods.54 //@sMMethods.55 //@sMMethods.56 //@sMMethods.57 //@sMMethods.58 //@sMMethods.59 //@sMMethods.60 //@sMMethods.61 //@sMMethods.62 //@sMMethods.63 //@sMMethods.64 //@sMMethods.65 //@sMMethods.66 //@sMMethods.67 //@sMMethods.68 //@sMMethods.69 //@sMMethods.70 //@sMMethods.71 //@sMMethods.72 //@sMMethods.73" finalPackageQName="kermeta.standard.helper">
    <sMClass name="IntegerWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.74 //@sMMethods.75 //@sMMethods.76 //@sMMethods.77 //@sMMethods.78 //@sMMethods.79 //@sMMethods.80 //@sMMethods.81 //@sMMethods.82 //@sMMethods.83 //@sMMethods.84 //@sMMethods.85 //@sMMethods.86 //@sMMethods.87 //@sMMethods.88 //@sMMethods.89 //@sMMethods.90 //@sMMethods.91 //@sMMethods.92 //@sMMethods.93 //@sMMethods.94 //@sMMethods.95 //@sMMethods.96 //@sMMethods.97 //@sMMethods.98 //@sMMethods.99 //@sMMethods.100 //@sMMethods.101 //@sMMethods.102 //@sMMethods.103 //@sMMethods.104" finalPackageQName="kermeta.standard.helper">
    <sMClass name="RealWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.105 //@sMMethods.106 //@sMMethods.107 //@sMMethods.108 //@sMMethods.109 //@sMMethods.110 //@sMMethods.111 //@sMMethods.112 //@sMMethods.113 //@sMMethods.114 //@sMMethods.115 //@sMMethods.116 //@sMMethods.117 //@sMMethods.118 //@sMMethods.119 //@sMMethods.120 //@sMMethods.121 //@sMMethods.122 //@sMMethods.123 //@sMMethods.124 //@sMMethods.125 //@sMMethods.126 //@sMMethods.127 //@sMMethods.128 //@sMMethods.129" finalPackageQName="kermeta.standard.helper">
    <sMClass name="CharacterWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.130 //@sMMethods.131 //@sMMethods.132 //@sMMethods.133 //@sMMethods.134 //@sMMethods.135 //@sMMethods.136 //@sMMethods.137 //@sMMethods.138 //@sMMethods.139 //@sMMethods.140 //@sMMethods.141 //@sMMethods.142 //@sMMethods.143 //@sMMethods.144 //@sMMethods.145 //@sMMethods.146 //@sMMethods.147 //@sMMethods.148 //@sMMethods.149 //@sMMethods.150 //@sMMethods.151 //@sMMethods.152 //@sMMethods.153 //@sMMethods.154 //@sMMethods.155 //@sMMethods.156 //@sMMethods.157 //@sMMethods.158 //@sMMethods.159 //@sMMethods.160 //@sMMethods.161 //@sMMethods.162 //@sMMethods.163 //@sMMethods.164 //@sMMethods.165 //@sMMethods.166 //@sMMethods.167 //@sMMethods.168" finalPackageQName="kermeta.standard.helper">
    <sMClass name="StringWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.169" finalPackageQName="kermeta.standard.runner">
    <sMClass name="UnknownJavaObject__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.170" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Void__isVoid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.171" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Void__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.172" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.173" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__flatten__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.174" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.175" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.176" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.177" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.178" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.179" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__flatten__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.180" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.181" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.182" finalPackageQName="kermeta.standard.runner">
    <sMClass name="OrderedCollection__last__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.183" finalPackageQName="kermeta.standard.runner">
    <sMClass name="OrderedCollection__first__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.184" finalPackageQName="kermeta.utils.runner">
    <sMClass name="StringBuffer__append__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.185" finalPackageQName="kermeta.utils.runner">
    <sMClass name="StringBuffer__length__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.186" finalPackageQName="kermeta.utils.runner">
    <sMClass name="StringBuffer__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.187" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.188" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__keyIterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.189" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__keys__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.190" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__values__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.191" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__valueIterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.192" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__size__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.193" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Stack__peek__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.194" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Stack__pop__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.195" finalPackageQName="kermeta.language.runner">
    <sMClass name="ReflectiveCollection__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.196" finalPackageQName="kermeta.language.runner">
    <sMClass name="ReflectiveSequence__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.197" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__isVoid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.198" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__container__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.199" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__getMetaClass__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.200" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__oid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.201" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.202" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__isFrozen__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.203" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__checkInvariants__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.204" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__hashcode__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.205" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__freeze__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.206" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__containingResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.207" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__checkAllInvariants__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.208" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="NamedElement__qualifiedName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.209" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Class___new__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.210" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Class__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.211" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="ClassDefinition__allSuperTypes__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.212" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="ModelType___new__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.213" finalPackageQName="kermeta.language.structure.helper">
    <sMClass name="FunctionTypeInvariant" usages="Invariant"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.214" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__number__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.215" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__getLogKermeta__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.216" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__mustStop__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.217" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__fail__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.218" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__assertEqual__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.219" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Test__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.220" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Test__initLog__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.221" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Log__newAttempt__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.222" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Failure__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.223" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Error__makeTearDown__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.224" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Error__makeSetUp__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.225" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Error__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.226" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestSuite__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.227" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__setUp__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.228" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__raiseIfHasFailures__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.229" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__getLogEMF_renameAs__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.230" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__setTestMethodName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.231" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__getTestMethodName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.232" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.233" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__tearDown__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.234" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.235" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestRunner__printTestResult__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.236" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="AbstractFallible__distil__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.237" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="AbstractFallible__fail__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.238" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="AbstractFallible__assertEqual__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.239" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="AbstractFallible__assertSimilar__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.240" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Assert__fail__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.241" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Assert__assertEqual__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.242" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__writeln__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.243" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__errorln__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.244" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__error__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.245" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__write__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.246" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__read__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.247" finalPackageQName="kermeta.io.runner">
    <sMClass name="FileIO__writeTextFileWithEncoding__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.248" finalPackageQName="kermeta.io.runner">
    <sMClass name="FileIO__writeTextFile__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.249" finalPackageQName="kermeta.io.runner">
    <sMClass name="FileIO__readTextFile__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.250" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__load__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.251" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__normalizedUri__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.252" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__save__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.253" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__saveWithNewURI__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.254" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__findDanglingModelElements__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.255" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__instances__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.256" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFResource__save__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.257" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFResource__saveWithNewURI__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.258" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFResource__saveAndValidateWithEMF__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.259" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFResource__load__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.260" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Repository__createResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.261" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Repository__normalizeUri__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.262" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Repository__findDanglingModelElements__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.263" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Repository__getResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.264" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="DanglingDiagnostic__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.265" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFRepository__createResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.266" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFRepository__registerEcoreFile__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.267" finalPackageQName="kermeta.interpreter.runner">
    <sMClass name="DynamicExpression__initializeDefaults__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.268" finalPackageQName="kermeta.interpreter.runner">
    <sMClass name="DynamicExpression__parse__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.269" finalPackageQName="runtime2SCA.runner">
    <sMClass name="Main__mainWithParameter__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.270" finalPackageQName="runtime2SCA.runner">
    <sMClass name="Main__main__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.271" finalPackageQName="art.instance.runner">
    <sMClass name="ComponentInstance__getOperationEMF_renameAs__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.272" finalPackageQName="art.instance.helper">
    <sMClass name="ComponentInstanceInvariant" usages="Invariant"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.273" finalPackageQName="art.instance.runner">
    <sMClass name="PrimitiveInstance__getOperationEMF_renameAs__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.274" finalPackageQName="art.instance.runner">
    <sMClass name="CompositeInstance__getOperationEMF_renameAs__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.275" finalPackageQName="art.instance.helper">
    <sMClass name="CompositeInstanceInvariant" usages="Invariant"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.276" finalPackageQName="art.instance.helper">
    <sMClass name="BindingInvariant" usages="Invariant"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.277" finalPackageQName="art.instance.helper">
    <sMClass name="TransmissionBindingInvariant" usages="Invariant"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.278" finalPackageQName="art.instance.helper">
    <sMClass name="DelegationBindingInvariant" usages="Invariant"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.279" finalPackageQName="art.type.helper">
    <sMClass name="ServiceInvariant" usages="Invariant"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.280 //@sMMethods.281" finalPackageQName="kermeta.standard.helper">
    <sMClass name="OrderedCollectionSuper" usages="Super"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.282 //@sMMethods.283 //@sMMethods.284" finalPackageQName="kermeta.language.helper">
    <sMClass name="ReflectiveCollectionSuper" usages="Super"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.285 //@sMMethods.287" finalPackageQName="kermeta.standard.helper">
    <sMClass name="SetSuper" usages="Super"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.286" finalPackageQName="kermeta.standard.helper">
    <sMClass name="CollectionSuper" usages="Super"/>
  </sMContexts>
  <sMMethods name="main" sMContext="//@sMContexts.0" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.size();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.1" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.2" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.3" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.4" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.5" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.one();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.6" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.sum();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.7" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.8" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.empty();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.9" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.isEmpty();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.10" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.any();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.11" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.isNotEmpty();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.12" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.iterator();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.13" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getIterator());&#xA;anExec.hasNext();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.14" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getIterator());&#xA;anExec.next();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.15" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getIterator());&#xA;anExec.isOff();&#xA;" usages="Runner"/>
  <sMMethods name="not" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.not(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="and" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.and(self, other), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="or" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.or(self, other), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="xor" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.and(self, kermeta.standard.helper.BooleanWrapper.not(other)), kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(self), other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_18 = false;&#xA;&#x9;idIfCond_18 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Boolean&quot;));&#xA;&#xA;&#x9;if( idIfCond_18 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="nand" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="implies" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.not(self), other);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_19 = false;&#xA;&#x9;idIfCond_19 = self;&#xA;&#xA;&#x9;if( idIfCond_19 ) {&#xA;&#xA;&#x9;result = &quot;true&quot;;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = &quot;false&quot;;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_20 = false;&#xA;&#x9;idIfCond_20 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_20 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_21 = false;&#xA;&#x9;idIfCond_21 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_21 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_22 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft6 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_23 = false;&#xA;&#x9;idIfCond_23 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_23 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp6 = null;&#xA;&#xA;&#x9;result_ft6 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft6 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_22 = result_ft6;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_22 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_24 = false;&#xA;&#x9;idIfCond_24 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_24 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft7 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_25 = false;&#xA;&#x9;while( !idLoopCond_25 ) {&#xA;&#x9;idLoopCond_25 = it_ft7.isOff();&#xA;&#x9;if ( idLoopCond_25 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp7 = it_ft7.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft8 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft8 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft8 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp7.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_27 = false;&#xA;&#x9;while( !idLoopCond_27 ) {&#xA;&#x9;idLoopCond_27 = kermeta.standard.helper.BooleanWrapper.or(it_ft8.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft8, false));&#xA;&#x9;if ( idLoopCond_27 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft8 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp8 = it_ft8.next();&#xA;&#xA;&#x9;result_lambda_ft8 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp8.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft8 = kermeta.standard.helper.BooleanWrapper.or(test_ft8, result_lambda_ft8);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft8 = test_ft8;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_26 = false;&#xA;&#x9;idIfCond_26 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft8), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp7.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_26 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp7);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_28 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft9 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_29 = false;&#xA;&#x9;idIfCond_29 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_29 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp9 = null;&#xA;&#xA;&#x9;result_ft9 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft9 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_28 = result_ft9;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_28 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_30 = false;&#xA;&#x9;idIfCond_30 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp7.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp7.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_30 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp7.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_31 = false;&#xA;&#x9;idIfCond_31 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp7.getLower());&#xA;&#xA;&#x9;if( idIfCond_31 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp7.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_32 = false;&#xA;&#x9;idIfCond_32 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp7.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_32 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp7.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.16" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_33 = false;&#xA;&#x9;idIfCond_33 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_33 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft10 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_34 = false;&#xA;&#x9;while( !idLoopCond_34 ) {&#xA;&#x9;idLoopCond_34 = it_ft10.isOff();&#xA;&#x9;if ( idLoopCond_34 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp10 = it_ft10.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_35 = false;&#xA;&#x9;idIfCond_35 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp10.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp10.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_35 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_36 = false;&#xA;&#x9;idIfCond_36 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp10)));&#xA;&#xA;&#x9;if( idIfCond_36 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_37 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft11 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft11 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft11 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp10)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_38 = false;&#xA;&#x9;while( !idLoopCond_38 ) {&#xA;&#x9;idLoopCond_38 = kermeta.standard.helper.BooleanWrapper.or(it_ft11.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft11, false));&#xA;&#x9;if ( idLoopCond_38 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft11 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp11 = it_ft11.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_39 = false;&#xA;&#x9;idIfCond_39 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp11, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_39 ) {&#xA;&#xA;&#x9;result_lambda_ft11 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp11, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft11 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft11 = kermeta.standard.helper.BooleanWrapper.or(test_ft11, result_lambda_ft11);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft11 = test_ft11;&#xA;&#xA;//CEC&#xA;idIfCond_37 = result_ft11;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_37 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp10), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft12 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_40 = false;&#xA;&#x9;while( !idLoopCond_40 ) {&#xA;&#x9;idLoopCond_40 = it_ft12.isOff();&#xA;&#x9;if ( idLoopCond_40 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp12 = it_ft12.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp12);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp10));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="toReal" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toReal(self), &quot;java.lang.Double&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="isLowerOrEqual" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_41 = false;&#xA;&#x9;idIfCond_41 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_41 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_42 = false;&#xA;&#x9;idIfCond_42 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_42 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLowerOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLowerOrEqual(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLower" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_43 = false;&#xA;&#x9;idIfCond_43 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_43 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_44 = false;&#xA;&#x9;idIfCond_44 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_44 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLower(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLower(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_45 = false;&#xA;&#x9;idIfCond_45 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_45 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_46 = false;&#xA;&#x9;idIfCond_46 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_46 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreater" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_47 = false;&#xA;&#x9;idIfCond_47 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_47 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_48 = false;&#xA;&#x9;idIfCond_48 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_48 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreater(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreater(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="minus" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_49 = false;&#xA;&#x9;idIfCond_49 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_49 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.minus(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="uminus" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.minus(0, self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isGreaterOrEqual" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_50 = false;&#xA;&#x9;idIfCond_50 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_50 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_51 = false;&#xA;&#x9;idIfCond_51 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_51 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreaterOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreaterOrEqual(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="plus" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_52 = false;&#xA;&#x9;idIfCond_52 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_52 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.plus(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="mult" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_53 = false;&#xA;&#x9;idIfCond_53 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_53 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.times(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="mod" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_54 = false;&#xA;&#x9;idIfCond_54 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_54 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getDivisionByZero())) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_55 = false;&#xA;&#x9;idIfCond_55 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_55 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.mod(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="div" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_56 = false;&#xA;&#x9;idIfCond_56 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_56 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getDivisionByZero())) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_57 = false;&#xA;&#x9;idIfCond_57 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_57 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.div(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="compareTo" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_58 = false;&#xA;&#x9;idIfCond_58 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_58 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_59 = false;&#xA;&#x9;idIfCond_59 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_59 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getNotComparableException())) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.compareTo(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toString(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_60 = false;&#xA;&#x9;idIfCond_60 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_60 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_61 = false;&#xA;&#x9;idIfCond_61 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_61 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_62 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft13 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_63 = false;&#xA;&#x9;idIfCond_63 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_63 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp13 = null;&#xA;&#xA;&#x9;result_ft13 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft13 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_62 = result_ft13;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_62 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_64 = false;&#xA;&#x9;idIfCond_64 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_64 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft14 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_65 = false;&#xA;&#x9;while( !idLoopCond_65 ) {&#xA;&#x9;idLoopCond_65 = it_ft14.isOff();&#xA;&#x9;if ( idLoopCond_65 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp14 = it_ft14.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft15 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft15 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft15 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp14.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_67 = false;&#xA;&#x9;while( !idLoopCond_67 ) {&#xA;&#x9;idLoopCond_67 = kermeta.standard.helper.BooleanWrapper.or(it_ft15.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft15, false));&#xA;&#x9;if ( idLoopCond_67 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft15 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp15 = it_ft15.next();&#xA;&#xA;&#x9;result_lambda_ft15 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp15.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft15 = kermeta.standard.helper.BooleanWrapper.or(test_ft15, result_lambda_ft15);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft15 = test_ft15;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_66 = false;&#xA;&#x9;idIfCond_66 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft15), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp14.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_66 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp14);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_68 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft16 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_69 = false;&#xA;&#x9;idIfCond_69 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_69 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp16 = null;&#xA;&#xA;&#x9;result_ft16 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft16 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_68 = result_ft16;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_68 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_70 = false;&#xA;&#x9;idIfCond_70 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp14.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp14.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_70 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp14.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_71 = false;&#xA;&#x9;idIfCond_71 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp14.getLower());&#xA;&#xA;&#x9;if( idIfCond_71 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp14.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_72 = false;&#xA;&#x9;idIfCond_72 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp14.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_72 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp14.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.17" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_73 = false;&#xA;&#x9;idIfCond_73 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_73 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft17 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_74 = false;&#xA;&#x9;while( !idLoopCond_74 ) {&#xA;&#x9;idLoopCond_74 = it_ft17.isOff();&#xA;&#x9;if ( idLoopCond_74 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp17 = it_ft17.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_75 = false;&#xA;&#x9;idIfCond_75 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp17.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp17.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_75 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_76 = false;&#xA;&#x9;idIfCond_76 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp17)));&#xA;&#xA;&#x9;if( idIfCond_76 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_77 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft18 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft18 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft18 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp17)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_78 = false;&#xA;&#x9;while( !idLoopCond_78 ) {&#xA;&#x9;idLoopCond_78 = kermeta.standard.helper.BooleanWrapper.or(it_ft18.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft18, false));&#xA;&#x9;if ( idLoopCond_78 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft18 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp18 = it_ft18.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_79 = false;&#xA;&#x9;idIfCond_79 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp18, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_79 ) {&#xA;&#xA;&#x9;result_lambda_ft18 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp18, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft18 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft18 = kermeta.standard.helper.BooleanWrapper.or(test_ft18, result_lambda_ft18);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft18 = test_ft18;&#xA;&#xA;//CEC&#xA;idIfCond_77 = result_ft18;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_77 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp17), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft19 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_80 = false;&#xA;&#x9;while( !idLoopCond_80 ) {&#xA;&#x9;idLoopCond_80 = it_ft19.isOff();&#xA;&#x9;if ( idLoopCond_80 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp19 = it_ft19.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp19);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp17));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="plus" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_81 = false;&#xA;&#x9;idIfCond_81 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_81 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.plus(self, other), &quot;java.lang.Double&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="mult" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_82 = false;&#xA;&#x9;idIfCond_82 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_82 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.times(self, other), &quot;java.lang.Double&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="minus" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_83 = false;&#xA;&#x9;idIfCond_83 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_83 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.minus(self, other), &quot;java.lang.Double&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="toInteger" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.toInteger(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="uminus" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.minus(kermeta.standard.helper.IntegerWrapper.toReal(0), self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_84 = false;&#xA;&#x9;idIfCond_84 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_84 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_85 = false;&#xA;&#x9;idIfCond_85 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_85 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="div" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_86 = false;&#xA;&#x9;idIfCond_86 = kermeta.standard.helper.RealWrapper.equals(other, kermeta.standard.helper.IntegerWrapper.toReal(0));&#xA;&#xA;&#x9;if( idIfCond_86 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getDivisionByZero())) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_87 = false;&#xA;&#x9;idIfCond_87 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_87 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.div(self, other), &quot;java.lang.Double&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="compareTo" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_88 = false;&#xA;&#x9;idIfCond_88 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_88 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_89 = false;&#xA;&#x9;idIfCond_89 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_89 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getNotComparableException())) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.compareTo(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.toString(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="isLowerOrEqual" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreater" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreaterOrEqual" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLower" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_90 = false;&#xA;&#x9;idIfCond_90 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_90 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_91 = false;&#xA;&#x9;idIfCond_91 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_91 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_92 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft20 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_93 = false;&#xA;&#x9;idIfCond_93 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_93 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp20 = null;&#xA;&#xA;&#x9;result_ft20 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft20 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_92 = result_ft20;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_92 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_94 = false;&#xA;&#x9;idIfCond_94 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_94 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft21 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_95 = false;&#xA;&#x9;while( !idLoopCond_95 ) {&#xA;&#x9;idLoopCond_95 = it_ft21.isOff();&#xA;&#x9;if ( idLoopCond_95 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp21 = it_ft21.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft22 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft22 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft22 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp21.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_97 = false;&#xA;&#x9;while( !idLoopCond_97 ) {&#xA;&#x9;idLoopCond_97 = kermeta.standard.helper.BooleanWrapper.or(it_ft22.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft22, false));&#xA;&#x9;if ( idLoopCond_97 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft22 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp22 = it_ft22.next();&#xA;&#xA;&#x9;result_lambda_ft22 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp22.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft22 = kermeta.standard.helper.BooleanWrapper.or(test_ft22, result_lambda_ft22);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft22 = test_ft22;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_96 = false;&#xA;&#x9;idIfCond_96 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft22), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp21.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_96 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp21);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_98 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft23 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_99 = false;&#xA;&#x9;idIfCond_99 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_99 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp23 = null;&#xA;&#xA;&#x9;result_ft23 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft23 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_98 = result_ft23;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_98 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_100 = false;&#xA;&#x9;idIfCond_100 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp21.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp21.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_100 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp21.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_101 = false;&#xA;&#x9;idIfCond_101 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp21.getLower());&#xA;&#xA;&#x9;if( idIfCond_101 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp21.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_102 = false;&#xA;&#x9;idIfCond_102 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp21.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_102 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp21.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.18" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_103 = false;&#xA;&#x9;idIfCond_103 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_103 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft24 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_104 = false;&#xA;&#x9;while( !idLoopCond_104 ) {&#xA;&#x9;idLoopCond_104 = it_ft24.isOff();&#xA;&#x9;if ( idLoopCond_104 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp24 = it_ft24.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_105 = false;&#xA;&#x9;idIfCond_105 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp24.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp24.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_105 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_106 = false;&#xA;&#x9;idIfCond_106 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp24)));&#xA;&#xA;&#x9;if( idIfCond_106 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_107 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft25 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft25 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft25 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp24)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_108 = false;&#xA;&#x9;while( !idLoopCond_108 ) {&#xA;&#x9;idLoopCond_108 = kermeta.standard.helper.BooleanWrapper.or(it_ft25.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft25, false));&#xA;&#x9;if ( idLoopCond_108 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft25 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp25 = it_ft25.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_109 = false;&#xA;&#x9;idIfCond_109 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp25, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_109 ) {&#xA;&#xA;&#x9;result_lambda_ft25 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp25, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft25 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft25 = kermeta.standard.helper.BooleanWrapper.or(test_ft25, result_lambda_ft25);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft25 = test_ft25;&#xA;&#xA;//CEC&#xA;idIfCond_107 = result_ft25;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_107 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp24), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft26 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_110 = false;&#xA;&#x9;while( !idLoopCond_110 ) {&#xA;&#x9;idLoopCond_110 = it_ft26.isOff();&#xA;&#x9;if ( idLoopCond_110 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp26 = it_ft26.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp26);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp24));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_111 = false;&#xA;&#x9;idIfCond_111 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Character&quot;));&#xA;&#xA;&#x9;if( idIfCond_111 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.toString(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="compareTo" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_112 = false;&#xA;&#x9;idIfCond_112 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_112 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getCallOnVoidTarget())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.compareTo(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_113 = false;&#xA;&#x9;idIfCond_113 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_113 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_114 = false;&#xA;&#x9;idIfCond_114 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_114 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_115 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft27 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_116 = false;&#xA;&#x9;idIfCond_116 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_116 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp27 = null;&#xA;&#xA;&#x9;result_ft27 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft27 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_115 = result_ft27;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_115 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_117 = false;&#xA;&#x9;idIfCond_117 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_117 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft28 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_118 = false;&#xA;&#x9;while( !idLoopCond_118 ) {&#xA;&#x9;idLoopCond_118 = it_ft28.isOff();&#xA;&#x9;if ( idLoopCond_118 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp28 = it_ft28.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft29 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft29 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft29 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp28.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_120 = false;&#xA;&#x9;while( !idLoopCond_120 ) {&#xA;&#x9;idLoopCond_120 = kermeta.standard.helper.BooleanWrapper.or(it_ft29.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft29, false));&#xA;&#x9;if ( idLoopCond_120 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft29 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp29 = it_ft29.next();&#xA;&#xA;&#x9;result_lambda_ft29 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp29.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft29 = kermeta.standard.helper.BooleanWrapper.or(test_ft29, result_lambda_ft29);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft29 = test_ft29;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_119 = false;&#xA;&#x9;idIfCond_119 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft29), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp28.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_119 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp28);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_121 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft30 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_122 = false;&#xA;&#x9;idIfCond_122 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_122 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp30 = null;&#xA;&#xA;&#x9;result_ft30 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft30 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_121 = result_ft30;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_121 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_123 = false;&#xA;&#x9;idIfCond_123 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp28.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp28.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_123 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp28.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_124 = false;&#xA;&#x9;idIfCond_124 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp28.getLower());&#xA;&#xA;&#x9;if( idIfCond_124 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp28.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_125 = false;&#xA;&#x9;idIfCond_125 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp28.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_125 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp28.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_126 = false;&#xA;&#x9;idIfCond_126 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_126 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft31 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_127 = false;&#xA;&#x9;while( !idLoopCond_127 ) {&#xA;&#x9;idLoopCond_127 = it_ft31.isOff();&#xA;&#x9;if ( idLoopCond_127 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp31 = it_ft31.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_128 = false;&#xA;&#x9;idIfCond_128 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp31.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp31.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_128 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_129 = false;&#xA;&#x9;idIfCond_129 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp31)));&#xA;&#xA;&#x9;if( idIfCond_129 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_130 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft32 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft32 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft32 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp31)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_131 = false;&#xA;&#x9;while( !idLoopCond_131 ) {&#xA;&#x9;idLoopCond_131 = kermeta.standard.helper.BooleanWrapper.or(it_ft32.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft32, false));&#xA;&#x9;if ( idLoopCond_131 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft32 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp32 = it_ft32.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_132 = false;&#xA;&#x9;idIfCond_132 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp32, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_132 ) {&#xA;&#xA;&#x9;result_lambda_ft32 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp32, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft32 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft32 = kermeta.standard.helper.BooleanWrapper.or(test_ft32, result_lambda_ft32);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft32 = test_ft32;&#xA;&#xA;//CEC&#xA;idIfCond_130 = result_ft32;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_130 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp31), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft33 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_133 = false;&#xA;&#x9;while( !idLoopCond_133 ) {&#xA;&#x9;idLoopCond_133 = it_ft33.isOff();&#xA;&#x9;if ( idLoopCond_133 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp33 = it_ft33.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp33);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp31));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isLowerOrEqual" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreater" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreaterOrEqual" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLower" sMContext="//@sMContexts.19" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = self;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="plus" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_134 = false;&#xA;&#x9;idIfCond_134 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_134 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, kermeta.standard.helper.StringWrapper.toString(other)), &quot;java.lang.String&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, other), &quot;java.lang.String&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="append" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_135 = false;&#xA;&#x9;idIfCond_135 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_135 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getCallOnVoidTarget())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.StringUtil.append(self, other);&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_136 = false;&#xA;&#x9;idIfCond_136 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.String&quot;));&#xA;&#xA;&#x9;if( idIfCond_136 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="toReal" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toReal(self), &quot;java.lang.Double&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_137 = false;&#xA;&#x9;idIfCond_137 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(result);&#xA;&#xA;&#x9;if( idIfCond_137 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringFormatException())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="toBoolean" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toBoolean(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_138 = false;&#xA;&#x9;idIfCond_138 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(result);&#xA;&#xA;&#x9;if( idIfCond_138 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringFormatException())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="compareTo" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_139 = false;&#xA;&#x9;idIfCond_139 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_139 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getCallOnVoidTarget())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.compareTo(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="contains" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.contains(self, str1), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="indexOf" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.indexOf(self, str), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="size" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.size(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="elementAt" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Character result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_140 = false;&#xA;&#x9;idIfCond_140 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, kermeta.standard.helper.IntegerWrapper.minus(kermeta.standard.helper.StringWrapper.size(self), 1)));&#xA;&#xA;&#x9;if( idIfCond_140 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringIndexOutOfBound())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Character) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.elementAt(self, index), &quot;java.lang.Character&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Character"/>
  </sMMethods>
  <sMMethods name="replace" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.replace(self, str1, str2), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMParameters name="str2" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="toUpperCase" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toUpperCase(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="toInteger" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toInteger(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_141 = false;&#xA;&#x9;idIfCond_141 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(result);&#xA;&#xA;&#x9;if( idIfCond_141 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringFormatException())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="toLowerCase" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toLowerCase(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="substring" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_142 = false;&#xA;&#x9;idIfCond_142 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(startIndex, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(startIndex, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(endIndex, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(endIndex, startIndex));&#xA;&#xA;&#x9;if( idIfCond_142 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.substring(self, startIndex, endIndex), &quot;java.lang.String&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringIndexOutOfBound())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="startIndex" type="java.lang.Integer"/>
    <sMParameters name="endIndex" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="split" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.standard.Sequence&lt;java.lang.String> result = null;&#xA;&#xA;&#x9;result = (kermeta.standard.Sequence&lt;java.lang.String>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.split(self, delimiter), &quot;kermeta.standard.Sequence&lt;java.lang.String>&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="delimiter" type="java.lang.String"/>
    <sMReturn type="kermeta.standard.Sequence&lt;java.lang.String>"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_143 = false;&#xA;&#x9;idIfCond_143 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_143 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_144 = false;&#xA;&#x9;idIfCond_144 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_144 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_145 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft34 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_146 = false;&#xA;&#x9;idIfCond_146 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_146 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp34 = null;&#xA;&#xA;&#x9;result_ft34 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft34 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_145 = result_ft34;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_145 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_147 = false;&#xA;&#x9;idIfCond_147 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_147 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft35 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_148 = false;&#xA;&#x9;while( !idLoopCond_148 ) {&#xA;&#x9;idLoopCond_148 = it_ft35.isOff();&#xA;&#x9;if ( idLoopCond_148 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp35 = it_ft35.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft36 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft36 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft36 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp35.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_150 = false;&#xA;&#x9;while( !idLoopCond_150 ) {&#xA;&#x9;idLoopCond_150 = kermeta.standard.helper.BooleanWrapper.or(it_ft36.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft36, false));&#xA;&#x9;if ( idLoopCond_150 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft36 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp36 = it_ft36.next();&#xA;&#xA;&#x9;result_lambda_ft36 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp36.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft36 = kermeta.standard.helper.BooleanWrapper.or(test_ft36, result_lambda_ft36);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft36 = test_ft36;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_149 = false;&#xA;&#x9;idIfCond_149 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft36), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp35.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_149 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp35);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_151 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft37 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_152 = false;&#xA;&#x9;idIfCond_152 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_152 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp37 = null;&#xA;&#xA;&#x9;result_ft37 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft37 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_151 = result_ft37;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_151 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_153 = false;&#xA;&#x9;idIfCond_153 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp35.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp35.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_153 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp35.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_154 = false;&#xA;&#x9;idIfCond_154 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp35.getLower());&#xA;&#xA;&#x9;if( idIfCond_154 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp35.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_155 = false;&#xA;&#x9;idIfCond_155 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp35.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_155 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp35.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_156 = false;&#xA;&#x9;idIfCond_156 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_156 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft38 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_157 = false;&#xA;&#x9;while( !idLoopCond_157 ) {&#xA;&#x9;idLoopCond_157 = it_ft38.isOff();&#xA;&#x9;if ( idLoopCond_157 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp38 = it_ft38.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_158 = false;&#xA;&#x9;idIfCond_158 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp38.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp38.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_158 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_159 = false;&#xA;&#x9;idIfCond_159 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp38)));&#xA;&#xA;&#x9;if( idIfCond_159 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_160 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft39 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft39 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft39 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp38)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_161 = false;&#xA;&#x9;while( !idLoopCond_161 ) {&#xA;&#x9;idLoopCond_161 = kermeta.standard.helper.BooleanWrapper.or(it_ft39.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft39, false));&#xA;&#x9;if ( idLoopCond_161 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft39 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp39 = it_ft39.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_162 = false;&#xA;&#x9;idIfCond_162 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp39, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_162 ) {&#xA;&#xA;&#x9;result_lambda_ft39 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp39, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft39 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft39 = kermeta.standard.helper.BooleanWrapper.or(test_ft39, result_lambda_ft39);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft39 = test_ft39;&#xA;&#xA;//CEC&#xA;idIfCond_160 = result_ft39;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_160 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp38), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft40 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_163 = false;&#xA;&#x9;while( !idLoopCond_163 ) {&#xA;&#x9;idLoopCond_163 = it_ft40.isOff();&#xA;&#x9;if ( idLoopCond_163 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp40 = it_ft40.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp40);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp38));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isLowerOrEqual" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreater" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreaterOrEqual" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLower" sMContext="//@sMContexts.20" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="main" sMContext="//@sMContexts.21" body="&#xA;kermeta.standard.UnknownJavaObject anExec = (kermeta.standard.UnknownJavaObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getUnknownJavaObject());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.22" body="&#xA;kermeta.standard.Void anExec = (kermeta.standard.Void) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getVoid());&#xA;anExec.isVoid();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.23" body="&#xA;kermeta.standard.Void anExec = (kermeta.standard.Void) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getVoid());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.24" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.25" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.flatten();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.26" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.27" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.28" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.29" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.30" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.31" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.flatten();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.32" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.33" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.34" body="&#xA;kermeta.standard.OrderedCollection anExec = (kermeta.standard.OrderedCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getOrderedCollection());&#xA;anExec.last();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.35" body="&#xA;kermeta.standard.OrderedCollection anExec = (kermeta.standard.OrderedCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getOrderedCollection());&#xA;anExec.first();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.36" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStringBuffer());&#xA;anExec.append( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.37" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStringBuffer());&#xA;anExec.length();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.38" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStringBuffer());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.39" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.40" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.keyIterator();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.41" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.keys();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.42" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.values();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.43" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.valueIterator();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.44" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.size();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.45" body="&#xA;kermeta.utils.Stack anExec = (kermeta.utils.Stack) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStack());&#xA;anExec.peek();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.46" body="&#xA;kermeta.utils.Stack anExec = (kermeta.utils.Stack) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStack());&#xA;anExec.pop();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.47" body="&#xA;kermeta.language.ReflectiveCollection anExec = (kermeta.language.ReflectiveCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.LanguagePackage.eINSTANCE.getReflectiveCollection());&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.48" body="&#xA;kermeta.language.ReflectiveSequence anExec = (kermeta.language.ReflectiveSequence) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.LanguagePackage.eINSTANCE.getReflectiveSequence());&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.49" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.isVoid();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.50" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.container();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.51" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.getMetaClass();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.52" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.oid();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.53" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.54" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.isFrozen();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.55" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.checkInvariants();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.56" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.hashcode();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.57" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.freeze();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.58" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.containingResource();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.59" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.checkAllInvariants();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.60" body="&#xA;kermeta.language.structure.NamedElement anExec = (kermeta.language.structure.NamedElement) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getNamedElement());&#xA;anExec.qualifiedName();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.61" body="&#xA;kermeta.language.structure.Class anExec = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getClass_());&#xA;anExec._new();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.62" body="&#xA;kermeta.language.structure.Class anExec = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getClass_());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.63" body="&#xA;kermeta.language.structure.ClassDefinition anExec = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getClassDefinition());&#xA;anExec.allSuperTypes();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.64" body="&#xA;kermeta.language.structure.ModelType anExec = (kermeta.language.structure.ModelType) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getModelType());&#xA;anExec._new();&#xA;" usages="Runner"/>
  <sMMethods name="checkInvariant_29523334__resultType" sMContext="//@sMContexts.65" body="java.lang.Boolean result = false;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOfSwitcher(self.getRight(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ProductType&quot;)));&#xA;return result;" usages="Invariant">
    <sMParameters name="self" type="kermeta.language.structure.FunctionType"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="main" sMContext="//@sMContexts.66" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.number();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.67" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.getLogKermeta();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.68" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.mustStop();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.69" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.fail( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.70" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.assertEqual( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.71" body="&#xA;kermeta.kunit.Test anExec = (kermeta.kunit.Test) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTest());&#xA;anExec.run();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.72" body="&#xA;kermeta.kunit.Test anExec = (kermeta.kunit.Test) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTest());&#xA;anExec.initLog();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.73" body="&#xA;kermeta.kunit.Log anExec = (kermeta.kunit.Log) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getLog());&#xA;anExec.newAttempt();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.74" body="&#xA;kermeta.kunit.Failure anExec = (kermeta.kunit.Failure) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFailure());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.75" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getError());&#xA;anExec.makeTearDown();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.76" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getError());&#xA;anExec.makeSetUp();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.77" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getError());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.78" body="&#xA;kermeta.kunit.TestSuite anExec = (kermeta.kunit.TestSuite) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestSuite());&#xA;anExec.run();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.79" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.setUp();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.80" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.raiseIfHasFailures();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.81" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.getLogEMF_renameAs();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.82" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.setTestMethodName( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.83" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.getTestMethodName();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.84" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.85" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.tearDown();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.86" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.run();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.87" body="&#xA;kermeta.kunit.TestRunner anExec = (kermeta.kunit.TestRunner) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestRunner());&#xA;anExec.printTestResult();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.88" body="&#xA;kermeta.kunit.AbstractFallible anExec = (kermeta.kunit.AbstractFallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAbstractFallible());&#xA;anExec.distil( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.89" body="&#xA;kermeta.kunit.AbstractFallible anExec = (kermeta.kunit.AbstractFallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAbstractFallible());&#xA;anExec.fail( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.90" body="&#xA;kermeta.kunit.AbstractFallible anExec = (kermeta.kunit.AbstractFallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAbstractFallible());&#xA;anExec.assertEqual( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.91" body="&#xA;kermeta.kunit.AbstractFallible anExec = (kermeta.kunit.AbstractFallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAbstractFallible());&#xA;anExec.assertSimilar( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.92" body="&#xA;kermeta.kunit.Assert anExec = (kermeta.kunit.Assert) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAssert());&#xA;anExec.fail( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.93" body="&#xA;kermeta.kunit.Assert anExec = (kermeta.kunit.Assert) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAssert());&#xA;anExec.assertEqual( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.94" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.writeln( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.95" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.errorln( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.96" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.error( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.97" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.write( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.98" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.read( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.99" body="&#xA;kermeta.io.FileIO anExec = (kermeta.io.FileIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getFileIO());&#xA;anExec.writeTextFileWithEncoding( args[0],  args[1],  args[2]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.100" body="&#xA;kermeta.io.FileIO anExec = (kermeta.io.FileIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getFileIO());&#xA;anExec.writeTextFile( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.101" body="&#xA;kermeta.io.FileIO anExec = (kermeta.io.FileIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getFileIO());&#xA;anExec.readTextFile( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.102" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.load();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.103" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.normalizedUri();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.104" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.save();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.105" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.saveWithNewURI( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.106" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.findDanglingModelElements();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.107" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.instances();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.108" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFResource());&#xA;anExec.save();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.109" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFResource());&#xA;anExec.saveWithNewURI( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.110" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFResource());&#xA;anExec.saveAndValidateWithEMF();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.111" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFResource());&#xA;anExec.load();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.112" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getRepository());&#xA;anExec.createResource( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.113" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getRepository());&#xA;anExec.normalizeUri( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.114" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getRepository());&#xA;anExec.findDanglingModelElements();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.115" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getRepository());&#xA;anExec.getResource( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.116" body="&#xA;kermeta.persistence.DanglingDiagnostic anExec = (kermeta.persistence.DanglingDiagnostic) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getDanglingDiagnostic());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.117" body="&#xA;kermeta.persistence.EMFRepository anExec = (kermeta.persistence.EMFRepository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFRepository());&#xA;anExec.createResource( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.118" body="&#xA;kermeta.persistence.EMFRepository anExec = (kermeta.persistence.EMFRepository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFRepository());&#xA;anExec.registerEcoreFile( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.119" body="&#xA;kermeta.interpreter.DynamicExpression anExec = (kermeta.interpreter.DynamicExpression) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.interpreter.InterpreterPackage.eINSTANCE.getDynamicExpression());&#xA;anExec.initializeDefaults();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.120" body="&#xA;kermeta.interpreter.DynamicExpression anExec = (kermeta.interpreter.DynamicExpression) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.interpreter.InterpreterPackage.eINSTANCE.getDynamicExpression());&#xA;anExec.parse( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.121" body="&#xA;runtime2SCA.Main anExec = (runtime2SCA.Main) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(runtime2SCA.Runtime2SCAPackage.eINSTANCE.getMain());&#xA;anExec.mainWithParameter( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.122" body="&#xA;runtime2SCA.Main anExec = (runtime2SCA.Main) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(runtime2SCA.Runtime2SCAPackage.eINSTANCE.getMain());&#xA;anExec.main();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.123" body="&#xA;art.instance.ComponentInstance anExec = (art.instance.ComponentInstance) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(art.instance.InstancePackage.eINSTANCE.getComponentInstance());&#xA;anExec.getOperationEMF_renameAs();&#xA;" usages="Runner"/>
  <sMMethods name="checkInvariant_2921254__completeTransmissionBindings" sMContext="//@sMContexts.124" body="java.lang.Boolean result = false;&#xA;&#xA;&#x9;//BIft:select&#xA;&#xA;kermeta.standard.Sequence&lt;art.type.Port> result_ft96 = null;&#xA;&#xA;&#x9;art.type.Port elem_ft96 = null;&#xA;&#xA;&#x9;result_ft96 = ((kermeta.standard.Sequence&lt;art.type.Port>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSequence()));&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;art.type.Port> it_ft96 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;art.type.Port>convertAsOrderedSet(self.getType().getPort()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_375 = false;&#xA;&#x9;while( !idLoopCond_375 ) {&#xA;&#x9;idLoopCond_375 = it_ft96.isOff();&#xA;&#x9;if ( idLoopCond_375 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft96 = it_ft96.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_376 = false;&#xA;//BIle:selector&#xA;art.type.Port p_lbdExp96 = elem_ft96;&#xA;&#xA;&#x9;idIfCond_376 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(p_lbdExp96.getIsOptional()), kermeta.standard.helper.StringWrapper.equals(p_lbdExp96.getRole(), &quot;client&quot;));&#xA;//EIle:selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_376 ) {&#xA;&#xA;&#x9;result_ft96.add(elem_ft96);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:select&#xA;//BIft:forAll&#xA;&#xA;java.lang.Boolean result_ft94 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft94 = true;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;art.type.Port> it_ft94 = result_ft96.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_373 = false;&#xA;&#x9;while( !idLoopCond_373 ) {&#xA;&#x9;idLoopCond_373 = it_ft94.isOff();&#xA;&#x9;if ( idLoopCond_373 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft94 = null;&#xA;//BIle:func&#xA;art.type.Port p_lbdExp94 = it_ft94.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft95 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft95 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;art.instance.TransmissionBinding> it_ft95 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;art.instance.TransmissionBinding>convertAsOrderedSet(self.getBinding()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_374 = false;&#xA;&#x9;while( !idLoopCond_374 ) {&#xA;&#x9;idLoopCond_374 = kermeta.standard.helper.BooleanWrapper.or(it_ft95.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft95, false));&#xA;&#x9;if ( idLoopCond_374 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft95 = null;&#xA;//BIle:func&#xA;art.instance.TransmissionBinding b_lbdExp95 = it_ft95.next();&#xA;&#xA;&#x9;result_lambda_ft95 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(b_lbdExp95.getClient(), p_lbdExp94);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft95 = kermeta.standard.helper.BooleanWrapper.or(test_ft95, result_lambda_ft95);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft95 = test_ft95;&#xA;//EIft:exists&#xA;result_lambda_ft94 = result_ft95;&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft94 = kermeta.standard.helper.BooleanWrapper.and(test_ft94, result_lambda_ft94);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft94 = test_ft94;&#xA;//EIft:forAll&#xA;result = result_ft94;&#xA;&#xA;&#xA;return result;" usages="Invariant">
    <sMParameters name="self" type="art.instance.ComponentInstance"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="main" sMContext="//@sMContexts.125" body="&#xA;art.instance.PrimitiveInstance anExec = (art.instance.PrimitiveInstance) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(art.instance.InstancePackage.eINSTANCE.getPrimitiveInstance());&#xA;anExec.getOperationEMF_renameAs();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.126" body="&#xA;art.instance.CompositeInstance anExec = (art.instance.CompositeInstance) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(art.instance.InstancePackage.eINSTANCE.getCompositeInstance());&#xA;anExec.getOperationEMF_renameAs();&#xA;" usages="Runner"/>
  <sMMethods name="checkInvariant_18545478__completeDelegationBindings" sMContext="//@sMContexts.127" body="java.lang.Boolean result = false;&#xA;&#xA;&#x9;//BIft:select&#xA;&#xA;kermeta.standard.Sequence&lt;art.type.Port> result_ft105 = null;&#xA;&#xA;&#x9;art.type.Port elem_ft105 = null;&#xA;&#xA;&#x9;result_ft105 = ((kermeta.standard.Sequence&lt;art.type.Port>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSequence()));&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;art.type.Port> it_ft105 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;art.type.Port>convertAsOrderedSet(self.getType().getPort()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_386 = false;&#xA;&#x9;while( !idLoopCond_386 ) {&#xA;&#x9;idLoopCond_386 = it_ft105.isOff();&#xA;&#x9;if ( idLoopCond_386 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft105 = it_ft105.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_387 = false;&#xA;//BIle:selector&#xA;art.type.Port p_lbdExp105 = elem_ft105;&#xA;&#xA;&#x9;idIfCond_387 = kermeta.standard.helper.BooleanWrapper.not(p_lbdExp105.getIsOptional());&#xA;//EIle:selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_387 ) {&#xA;&#xA;&#x9;result_ft105.add(elem_ft105);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:select&#xA;//BIft:forAll&#xA;&#xA;java.lang.Boolean result_ft102 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft102 = true;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;art.type.Port> it_ft102 = result_ft105.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_383 = false;&#xA;&#x9;while( !idLoopCond_383 ) {&#xA;&#x9;idLoopCond_383 = it_ft102.isOff();&#xA;&#x9;if ( idLoopCond_383 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft102 = null;&#xA;//BIle:func&#xA;art.type.Port p_lbdExp102 = it_ft102.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft103 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft103 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;art.instance.DelegationBinding> it_ft103 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;art.instance.DelegationBinding>convertAsOrderedSet(self.getDelegation()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_384 = false;&#xA;&#x9;while( !idLoopCond_384 ) {&#xA;&#x9;idLoopCond_384 = kermeta.standard.helper.BooleanWrapper.or(it_ft103.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft103, false));&#xA;&#x9;if ( idLoopCond_384 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft103 = null;&#xA;//BIle:func&#xA;art.instance.DelegationBinding b_lbdExp103 = it_ft103.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft104 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft104 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;art.instance.ComponentInstance> it_ft104 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;art.instance.ComponentInstance>convertAsOrderedSet(self.getSubComponent()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_385 = false;&#xA;&#x9;while( !idLoopCond_385 ) {&#xA;&#x9;idLoopCond_385 = kermeta.standard.helper.BooleanWrapper.or(it_ft104.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft104, false));&#xA;&#x9;if ( idLoopCond_385 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft104 = null;&#xA;//BIle:func&#xA;art.instance.ComponentInstance sub_lbdExp104 = it_ft104.next();&#xA;&#xA;&#x9;result_lambda_ft104 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(b_lbdExp103.getExported(), p_lbdExp102);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft104 = kermeta.standard.helper.BooleanWrapper.or(test_ft104, result_lambda_ft104);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft104 = test_ft104;&#xA;//EIft:exists&#xA;result_lambda_ft103 = result_ft104;&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft103 = kermeta.standard.helper.BooleanWrapper.or(test_ft103, result_lambda_ft103);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft103 = test_ft103;&#xA;//EIft:exists&#xA;result_lambda_ft102 = result_ft103;&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft102 = kermeta.standard.helper.BooleanWrapper.and(test_ft102, result_lambda_ft102);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft102 = test_ft102;&#xA;//EIft:forAll&#xA;result = result_ft102;&#xA;&#xA;&#xA;return result;" usages="Invariant">
    <sMParameters name="self" type="art.instance.CompositeInstance"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="checkInvariant_8672196__wellFormedBinding" sMContext="//@sMContexts.128" body="java.lang.Boolean result = false;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self.getServerInstance(), null);&#xA;&#xA;return result;" usages="Invariant">
    <sMParameters name="self" type="art.instance.Binding"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="checkInvariant_17429499__wellFormedTransmissionBinding" sMContext="//@sMContexts.129" body="java.lang.Boolean result = false;&#xA;&#xA;&#x9;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft108 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_390 = false;&#xA;&#x9;idIfCond_390 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self.getClient(), null);&#xA;&#xA;&#x9;if( idIfCond_390 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object b_lbdExp108 = null;&#xA;&#xA;&#x9;result_ft108 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self.getServer(), null);&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft108 = false;&#xA;}&#xA;&#xA;//EIft:andThen&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft107 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_389 = false;&#xA;&#x9;idIfCond_389 = result_ft108;&#xA;&#xA;&#x9;if( idIfCond_389 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object b_lbdExp107 = null;&#xA;&#xA;&#x9;result_ft107 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self.getClient().getRole(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(self.getServer().getRole()));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft107 = false;&#xA;}&#xA;&#xA;//EIft:andThen&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft106 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_388 = false;&#xA;&#x9;idIfCond_388 = result_ft107;&#xA;&#xA;&#x9;if( idIfCond_388 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object b_lbdExp106 = null;&#xA;&#xA;&#x9;result_ft106 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self.getClient().getService(), self.getServer().getService());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft106 = false;&#xA;}&#xA;&#xA;//EIft:andThen&#xA;result = result_ft106;&#xA;&#xA;&#xA;return result;" usages="Invariant">
    <sMParameters name="self" type="art.instance.TransmissionBinding"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="checkInvariant_7402671__wellFormedDelegationBinding" sMContext="//@sMContexts.130" body="java.lang.Boolean result = false;&#xA;&#xA;&#x9;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft111 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_393 = false;&#xA;&#x9;idIfCond_393 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self.getExported(), null);&#xA;&#xA;&#x9;if( idIfCond_393 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object b_lbdExp111 = null;&#xA;&#xA;&#x9;result_ft111 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self.getSource(), null);&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft111 = false;&#xA;}&#xA;&#xA;//EIft:andThen&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft110 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_392 = false;&#xA;&#x9;idIfCond_392 = result_ft111;&#xA;&#xA;&#x9;if( idIfCond_392 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object b_lbdExp110 = null;&#xA;&#xA;&#x9;result_ft110 = kermeta.standard.helper.StringWrapper.equals(self.getExported().getRole(), self.getSource().getRole());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft110 = false;&#xA;}&#xA;&#xA;//EIft:andThen&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft109 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_391 = false;&#xA;&#x9;idIfCond_391 = result_ft110;&#xA;&#xA;&#x9;if( idIfCond_391 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object b_lbdExp109 = null;&#xA;&#xA;&#x9;result_ft109 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self.getExported().getService(), self.getSource().getService());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft109 = false;&#xA;}&#xA;&#xA;//EIft:andThen&#xA;result = result_ft109;&#xA;&#xA;&#xA;return result;" usages="Invariant">
    <sMParameters name="self" type="art.instance.DelegationBinding"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="checkInvariant_11536626__validService" sMContext="//@sMContexts.131" body="java.lang.Boolean result = false;&#xA;&#xA;&#x9;java.lang.Boolean res = true;&#xA;&#xA;&#x9;{&#xA;try {&#xA;&#x9;((kermeta.io.FileIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getFileIO())).readTextFile(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;C:/work/dev/diva/src/&quot;, kermeta.standard.helper.StringWrapper.replace(self.getName(), &quot;.&quot;, &quot;/&quot;)), &quot;.java&quot;));&#xA;} catch( org.kermeta.compil.runtime.helper.error.KRuntimeError ex_switcher_5 ) {&#xA;boolean caught_5 = false;&#xA;if( ex_switcher_5.getRealException() instanceof kermeta.exceptions.FileNotFoundException ) {&#xA;caught_5 = true;&#xA;kermeta.exceptions.FileNotFoundException e = (kermeta.exceptions.FileNotFoundException) ex_switcher_5.getRealException();&#xA;res = false;&#xA;}&#xA;if( !caught_5 ) { throw ex_switcher_5; }&#xA;&#xA;}&#xA;}&#xA;&#xA;&#x9;result = res;&#xA;&#xA;return result;" usages="Invariant">
    <sMParameters name="self" type="art.type.Service"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="super_addAt" sMContext="//@sMContexts.132" typeParameters="G" body="&#xA;&#x9;java.lang.Boolean idIfCond_404 = false;&#xA;&#x9;idIfCond_404 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, self.size()));&#xA;&#xA;&#x9;if( idIfCond_404 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIndexOutOfBound())) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.addAt(self, index, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.OrderedCollection"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_equals" sMContext="//@sMContexts.132" typeParameters="G" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean isEqual = false;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_405 = false;&#xA;&#x9;idIfCond_405 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(element));&#xA;&#xA;&#x9;if( idIfCond_405 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_406 = false;&#xA;&#x9;idIfCond_406 = org.kermeta.compil.runtime.helper.language.TypeUtil.isInstanceSwitcher(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.OrderedCollection&lt;G>&quot;), element);&#xA;&#xA;&#x9;if( idIfCond_406 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;G> collection = null;&#xA;&#xA;&#x9;collection = (kermeta.standard.Collection&lt;G>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.standard.Collection&lt;G>&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_407 = false;&#xA;&#x9;idIfCond_407 = kermeta.standard.helper.IntegerWrapper.equals(self.size(), collection.size());&#xA;&#xA;&#x9;if( idIfCond_407 ) {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> selfIterator = self.iterator();&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> collectionIterator = collection.iterator();&#xA;&#xA;&#x9;java.lang.Boolean difference = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.helper.IntegerWrapper.equals(1, 1);&#xA;&#x9;java.lang.Boolean idLoopCond_408 = false;&#xA;&#x9;while( !idLoopCond_408 ) {&#xA;&#x9;idLoopCond_408 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.or(selfIterator.isOff(), collectionIterator.isOff()), difference);&#xA;&#x9;if ( idLoopCond_408 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_409 = false;&#xA;&#x9;idIfCond_409 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(selfIterator.next(), collectionIterator.next()));&#xA;&#xA;&#x9;if( idIfCond_409 ) {&#xA;&#xA;&#x9;difference = true;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;isEqual = kermeta.standard.helper.BooleanWrapper.not(difference);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = isEqual;&#xA;&#xA;return result;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.OrderedCollection"/>
    <sMParameters name="element" type="kermeta.language.structure.Object"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="super_clear" sMContext="//@sMContexts.133" typeParameters="G" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.clear(self);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_remove" sMContext="//@sMContexts.133" typeParameters="G" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.remove(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_add" sMContext="//@sMContexts.133" typeParameters="G" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.add(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_remove" sMContext="//@sMContexts.134" typeParameters="G" body="&#xA;&#x9;G elem = null;&#xA;//BIft:detect&#xA;&#xA;G result_ft120 = null;&#xA;&#xA;&#x9;G elem_ft120 = null;&#xA;&#xA;&#x9;result_ft120 = null;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft120 = self.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_410 = false;&#xA;&#x9;while( !idLoopCond_410 ) {&#xA;&#x9;idLoopCond_410 = kermeta.standard.helper.BooleanWrapper.or(it_ft120.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(result_ft120, null));&#xA;&#x9;if ( idLoopCond_410 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft120 = it_ft120.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_411 = false;&#xA;//BIle:detector&#xA;G e_lbdExp120 = elem_ft120;&#xA;&#xA;&#x9;idIfCond_411 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(e_lbdExp120, element);&#xA;//EIle:detector&#xA;&#xA;&#xA;&#x9;if( idIfCond_411 ) {&#xA;&#xA;&#x9;result_ft120 = elem_ft120;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;//CE&#xA;elem = result_ft120;&#xA;//EIft:detect&#xA;;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_412 = false;&#xA;&#x9;idIfCond_412 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(elem, null);&#xA;&#xA;&#x9;if( idIfCond_412 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(self, elem);&#xA;}&#xA;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Set"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_add" sMContext="//@sMContexts.135" typeParameters="G" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.add(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Collection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_add" sMContext="//@sMContexts.134" typeParameters="G" body="&#xA;&#x9;java.lang.Boolean idIfCond_413 = false;&#xA;&#x9;idIfCond_413 = kermeta.standard.helper.BooleanWrapper.not(self.contains(element));&#xA;&#xA;&#x9;if( idIfCond_413 ) {&#xA;&#xA;&#x9;kermeta.standard.helper.CollectionSuper.super_add(self, element);&#xA;}&#xA;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Set"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
</simk:SIMKModel>
