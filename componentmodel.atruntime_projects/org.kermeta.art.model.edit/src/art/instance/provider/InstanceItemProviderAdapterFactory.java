/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package art.instance.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import art.instance.util.InstanceAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InstanceItemProviderAdapterFactory extends InstanceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InstanceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link art.instance.PrimitiveInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveInstanceItemProvider primitiveInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link art.instance.PrimitiveInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveInstanceAdapter() {
		if (primitiveInstanceItemProvider == null) {
			primitiveInstanceItemProvider = new PrimitiveInstanceItemProvider(this);
		}

		return primitiveInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link art.instance.CompositeInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeInstanceItemProvider compositeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link art.instance.CompositeInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeInstanceAdapter() {
		if (compositeInstanceItemProvider == null) {
			compositeInstanceItemProvider = new CompositeInstanceItemProvider(this);
		}

		return compositeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link art.instance.ValuedAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValuedAttributeItemProvider valuedAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link art.instance.ValuedAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValuedAttributeAdapter() {
		if (valuedAttributeItemProvider == null) {
			valuedAttributeItemProvider = new ValuedAttributeItemProvider(this);
		}

		return valuedAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link art.instance.TransmissionBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransmissionBindingItemProvider transmissionBindingItemProvider;

	/**
	 * This creates an adapter for a {@link art.instance.TransmissionBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransmissionBindingAdapter() {
		if (transmissionBindingItemProvider == null) {
			transmissionBindingItemProvider = new TransmissionBindingItemProvider(this);
		}

		return transmissionBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link art.instance.DelegationBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelegationBindingItemProvider delegationBindingItemProvider;

	/**
	 * This creates an adapter for a {@link art.instance.DelegationBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelegationBindingAdapter() {
		if (delegationBindingItemProvider == null) {
			delegationBindingItemProvider = new DelegationBindingItemProvider(this);
		}

		return delegationBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link art.instance.DictionaryValuedAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DictionaryValuedAttributeItemProvider dictionaryValuedAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link art.instance.DictionaryValuedAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDictionaryValuedAttributeAdapter() {
		if (dictionaryValuedAttributeItemProvider == null) {
			dictionaryValuedAttributeItemProvider = new DictionaryValuedAttributeItemProvider(this);
		}

		return dictionaryValuedAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link art.instance.DefaultEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultEntryItemProvider defaultEntryItemProvider;

	/**
	 * This creates an adapter for a {@link art.instance.DefaultEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultEntryAdapter() {
		if (defaultEntryItemProvider == null) {
			defaultEntryItemProvider = new DefaultEntryItemProvider(this);
		}

		return defaultEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link art.instance.OtherEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OtherEntryItemProvider otherEntryItemProvider;

	/**
	 * This creates an adapter for a {@link art.instance.OtherEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOtherEntryAdapter() {
		if (otherEntryItemProvider == null) {
			otherEntryItemProvider = new OtherEntryItemProvider(this);
		}

		return otherEntryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (primitiveInstanceItemProvider != null) primitiveInstanceItemProvider.dispose();
		if (compositeInstanceItemProvider != null) compositeInstanceItemProvider.dispose();
		if (transmissionBindingItemProvider != null) transmissionBindingItemProvider.dispose();
		if (delegationBindingItemProvider != null) delegationBindingItemProvider.dispose();
		if (valuedAttributeItemProvider != null) valuedAttributeItemProvider.dispose();
		if (dictionaryValuedAttributeItemProvider != null) dictionaryValuedAttributeItemProvider.dispose();
		if (defaultEntryItemProvider != null) defaultEntryItemProvider.dispose();
		if (otherEntryItemProvider != null) otherEntryItemProvider.dispose();
	}

}
