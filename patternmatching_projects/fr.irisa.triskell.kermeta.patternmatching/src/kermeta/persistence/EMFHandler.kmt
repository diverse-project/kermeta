/* $Id: EMFHandler.kmt,v 1.1 2006-10-24 12:27:26 rodrigotex Exp $
 * Creation date: October 11, 2006
 * License:
 * Copyright:
 * Authors:
 */
package kermeta::persistence;

require "platform:/resource/fr.irisa.triskell.kermeta.ecore/src/kermeta/ecore.kmt"

require kermeta

using kermeta::standard
using kermeta::persistence 


using ecore

class EMFHandler {

/*
    operation loadMetaModel(repository : EMFRepository, metamodelPath : String, packageName : String) : EClassifier[0..*] is do             
        var  ecoreMetamodelPath : String init "platform:/resource/fr.irisa.triskell.kermeta.ecore/src/ecore/Ecore.ecore"
   		var resource : Resource init repository.createResource(metamodelPath, ecoreMetamodelPath)
       	resource.load()
       	       
        result := resource.instances.select { e | EPackage.isInstance(e) }.
                           collect{p | var pack : EPackage pack ?= p}.
                           detect { ec | ec.name.equals(packageName)}.
                           eClassifiers
   end
   
    operation loadModel(repository : EMFRepository, modePath : String, metamodelPath : String) : Set<kermeta::standard::Object> is do                   
   		var resource : Resource init repository.createResource(modePath, metamodelPath)
       	resource.load()
        result := resource.instances
    end	
*/    
   
   operation cleanInstanceClassNames(pack :EPackage) is do
      pack.eClassifiers.select{ eClassifier | EClass.isInstance(eClassifier)}.
              collect{ eClassifier | var eClass : EClass eClass ?= eClassifier}.
              select{ eClass | eClass.instanceClassName.equals("")}.
              each{ eClass | eClass.instanceClassName := void
           }      
      pack.eSubpackages.each{ p | cleanInstanceClassNames(p)}
    end      
}