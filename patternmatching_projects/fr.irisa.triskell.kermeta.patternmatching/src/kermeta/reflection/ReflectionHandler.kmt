/* $Id: ReflectionHandler.kmt,v 1.2 2006-12-19 12:37:57 rodrigotex Exp $
 * Creation date: October 17, 2006
 * License:
 * Copyright:
 * Authors:
 */

package kermeta::reflection;


require kermeta

using kermeta::standard
using kermeta::reflection
using kermeta::interpreter
using kermeta::utils

class ReflectionHandler
{
	/* operation create was created because of problems with the basic method Object.get(Property)	
   with attribute with type Sequence.
   
	Example of the problem: 
  	   var seqpro : Sequence<Object> init Sequence<Object>.new
       seqpro ?= obj.get(pro)
       result := seqpro     
	*/ 
	operation getSequenceProperties ( obj : kermeta::standard::Object, pro : Property) : Sequence<kermeta::standard::Object> is do
  	   var seqpro : Sequence<kermeta::standard::Object> init Sequence<kermeta::standard::Object>.new
	 
       var de : DynamicExpression init DynamicExpression.new
       de.initializeDefaults
       de.formalParameters.put("obj", kermeta::language::structure::Object)  
       de.formalParameters.put("seqpro", Sequence<Object>)       
       if (pro.upper != 1) then       
          de.parse("do var target : "+obj.getMetaClass.typeDefinition.qualifiedName+" target ?= obj  target."+pro.name+".each{s| seqpro.add(s)} end") 
       else 
          de.parse("do var target : "+obj.getMetaClass.typeDefinition.qualifiedName+" target ?= obj  seqpro.add(target."+pro.name+") end")                                
       end          
       var params : Hashtable<String, kermeta::standard::Object> init Hashtable<String, kermeta::standard::Object>.new
       params.put("obj", obj)
       params.put("seqpro", seqpro)       
       de.execute(void, params)	
       result := seqpro
	end
	
	operation getAllSuperClasses(cls : Class) : OrderedSet<Class> is do
	   var resp : Class[0..*] init OrderedSet<Class>.new
	   resp.addAll(cls.superClass)
	   cls.superClass.each{ c | resp.addAll(getAllSuperClasses(c))} 
	   result := resp
	end	
}