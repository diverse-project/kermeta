/* $Id: PatternMetamodelBuilder.kmt,v 1.3 2008-02-13 16:30:26 bmorin Exp $
 * Creation date: October 12, 2006
 * Authors: Rodrigo Ramos, Olivier Barais, Brice Morin
 */
@mainClass "kermeta::pattern::CreatePatternExample"
@mainOperation "main"

package kermeta::pattern;

require kermeta
require "platform:/resource/fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/ecoreClone.kmt"
  
using kermeta::standard
using kermeta::persistence
using ecore
 

class PatternMetamodelBuilder {
    
    operation addPatternFramework(sequencePack : Sequence<EPackage>, newURI : String) : EPackage is do 
      var patternFramework : Sequence<EPackage> init loadEcoreModel(EMFRepository.new, 
      			"platform:/resource/fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/metamodel/PatternFramework.ecore")
                  
      var pattern : EPackage init EPackage.new  
      pattern.name := "pattern"
      pattern.nsPrefix:="pattern"      
      pattern.nsURI:=sequencePack.first.nsURI+"/pattern" 
      
      
      var cache : CloneRoot init CloneRoot.new
      cache.initialize
      
	  var ewp : EPackage
	  ewp := sequencePack.first.clone(cache)      
	  ewp.setType(cache)      
	 
	  var frameworkPack : EPackage init patternFramework.first     
      var basicObject : EClass init findClassByName(frameworkPack, "PObject")
	  ewp.setPObject(basicObject)
     
      pattern.eSubpackages.add(ewp)
      setSubPackagesURI(pattern)

      result := pattern
    end
    
    operation setSubPackagesURI (pack :EPackage) is do
      stdio.writeln(pack.nsURI)   
      pack.eSubpackages.each{p |  
          p.nsURI:=pack.nsURI+"/"+p.name 
          p.nsPrefix:=p.name 
          setSubPackagesURI(p)
      }    
    end  

	operation loadEcoreModel(repository : EMFRepository, modelUri : String) : Sequence<EPackage> is 
    do
    	var resource : Resource init repository.createResource(modelUri , "http://www.eclipse.org/emf/2002/Ecore")
    	resource.load
    	var instances : Set<Object> init resource.instances
    	var pack : EPackage
    	result := instances.select { e | EPackage.isInstance(e) }.collect{p | pack ?= p}	
    end

	operation saveEcoreModel(obj : Set<Object>, uri : String) is 
	do
    	obj.each{o | stdio.writeln(o.toString)}
    	var repository:EMFRepository init EMFRepository.new
	    var resource : Resource init repository.createResource(uri , "http://www.eclipse.org/emf/2002/Ecore")
	    obj.each{o | resource.instances.add(o)}
	    resource.save
    end
    
    operation findClassByName(pack : EPackage, name : String) : EClass is
    do
    	var res : EClass
    	pack.eClassifiers.each{c |
    		var cl : EClass
    		cl ?= c
    		if (cl != void) then
    			if cl.name == name then
    				res := cl
    			end
    		end
    	}
   	
    	pack.eSubpackages.each{p |
    		if res == void then
    			res := findClassByName(p, name)
    		end
    	}
    	
    	result := res
    end

}
 
class CreatePatternExample {

  operation main() is do 
      var metamodelUri : String init "../../../samples/SimpleFSM/metamodels/FSMMM.ecore"
      var ecoreMetamodel : String init "platform:/resource/fr.irisa.triskell.kermeta.ecore/src/ecore/Ecore.ecore"

      var metamodelPatternUri : String init "platform:/resource/Pattern_project/samples/SimpleFSM/metamodels/FSMMMPattern.ecore"

//      var helper : EcoreHelpers::EcoreHelper init EcoreHelpers::EcoreHelper.new
   	  var repository : EMFRepository init EMFRepository.new
//      helper.initialize           	      
              	      
      var resource : Resource init EMFRepository.new.createResource(metamodelUri , ecoreMetamodel)      
      resource.load
/*      
       var patternCreator : CreatePatternMetamodel init CreatePatternMetamodel.new      

      // retreives only the packages   	
      var packagesModelModel : Sequence<EPackage> init 
    	      resource.instances.select { e | EPackage.isInstance(e) }.collect{p | var pack : EPackage pack ?= p}   	          	      
      
      // Add framework for patterns
      patternCreator.initialize        
      var pattern : EPackage init patternCreator.addPatternFramework(packagesModelModel, metamodelPatternUri) 
      
      packagesModelModel.each{p | resource.remove(p)} 
      resource.add(pattern)
*/    

      /* Another problem. the load repository method is seting instanceClassName to "" */     
/*           resource.instances.select { e | EPackage.isInstance(e) }.
    	      collect{p | var pack : EPackage pack ?= p}.
    	      each { p | patternCreator.cleanInstanceClassNames(p)}
*/        
      resource.saveWithNewURI(metamodelPatternUri)
      /* There is a bug when I am trying to use EMFRepository.new.createResource ... resource.save */
  end
}