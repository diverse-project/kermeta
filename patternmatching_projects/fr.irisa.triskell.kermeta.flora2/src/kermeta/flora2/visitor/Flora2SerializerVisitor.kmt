/* $Id: Flora2SerializerVisitor.kmt,v 1.3 2007-08-24 12:09:18 bmorin Exp $
 * Creation date: October 5, 2006
 * License:
 * Copyright:
 * Authors:
 */
@mainClass "root_package::FloraVisitor"
@mainOperation "main"

 
package flora2::visitors;

require kermeta
require "../../../flora2/Flora2wVisitor.kmt"  
  
using kermeta::standard
using kermeta::reflection
using flora2::visitors

class Flora2SerializerVisitor inherits Visitor
{

	method visit(visitable : Visitable) : flora2::DTString is do
       var clsName : kermeta::standard::String init self.getMetaClass.typeDefinition.name   
          
       if (clsName.equals("Variable")) then 
           var t : flora2::Variable 
           result := visitVariable(t?=visitable)
       else if (clsName.equals("Constant")) then 
           var t : flora2::Variable 
           result := visitVariable(t?=visitable)           
       else if (clsName.equals("FunctionalTerm")) then 
           var t : flora2::Variable 
           result := visitVariable(t?=visitable)
       else if (clsName.equals("DataAtom")) then 
           var t : flora2::Variable 
           result := visitVariable(t?=visitable)
       else if (clsName.equals("SignatureAtom")) then 
           var t : flora2::Variable 
           result := visitVariable(t?=visitable)
       else if (clsName.equals("ISAInstance")) then 
           var t : flora2::Variable 
           result := visitVariable(t?=visitable)
       else if (clsName.equals("CompoundedFormula")) then 
           var t : flora2::Variable 
           result := visitVariable(t?=visitable)
       else if (clsName.equals("String")) then 
           var t : flora2::Variable 
           result := visitVariable(t?=visitable)           
       else if (clsName.equals("ISASubclass")) then 
           var t : flora2::Variable 
           result := visitVariable(t?=visitable)  
       else if (clsName.equals("Integer")) then 
           var t : flora2::Variable 
          result := visitVariable(t?=visitable)  
       else if (clsName.equals("Negation")) then 
           var t : flora2::Negation 
          result := visitNegation(t?=visitable)            
       else if (clsName.equals("Float")) then 
           var t : flora2::Variable 
	      result :=  visitVariable(t?=visitable)                                   
       else if (clsName.equals("BuiltInClasses")) then 
           var t : flora2::Variable 
	      result :=  visitVariable(t?=visitable) 	      
       else 
 	      result :=  "Unexpected class"+clsName 
       end end end end end end end end end end end end end
 	end
 	
	method visitProgram(visitable : flora2::Program) : flora2::DTString is do end
	
	method visitRule(visitable : flora2::Rule) : flora2::DTString is do 
	   result := visitable.head.accept(self)+ ":-"+ result visitable.body.accept(self)+"."	
	end
	method visitQuery(visitable : flora2::Query) : flora2::DTString is do 
	   result := "?- "+visitable.body.accept(self)+ "."	
	end	
	method visitFact(visitable : flora2::Fact) : flora2::DTString is do 
	   result := visitable.expression.accept(self)+ "."
	end			

	method visitNegation(visitable : flora2::Negation) : flora2::DTString is do 
	   result := "not (("+ visitable.expression.accept(self)+ "))"
	end		

	method visitDataAtom(visitable : flora2::DataAtom) : flora2::DTString is do 
	   result := visitable.host.accept(self) + "["+ visitable.feature.accept(self) + " -> "+ visitable.~value.accept(self)+ "]"		
	end
	method visitSignatureAtom(visitable : flora2::SignatureAtom) : flora2::DTString is do 
	   result := visitable.host.accept(self) + "["+ visitable.feature.accept(self) + " => "+ visitable.~class.accept(self)+ "]"					
	end

	method visitISAInstance(visitable : flora2::ISAInstance) : flora2::DTString is do 
	   result := visitable.element.accept(self) + " : "+ visitable.~class.accept(self)	
	end
	method visitISASubclass(visitable : flora2::ISASubclass) : flora2::DTString is do 
	   result := visitable.element.accept(self) + " :: "+ visitable.superclass.accept(self)
	end

	method visitVariable(visitable : flora2::Variable) : flora2::DTString is do 
	   result := visitable.symbolName
	end
	method visitConstant(visitable : flora2::Constant) : flora2::DTString is do 
	   result := visitable.symbolName	
	end	
	method visitFunctionalTerm(visitable : flora2::FunctionalTerm) : flora2::DTString is do 
	   var strparameters : kermeta::standard::String init kermeta::standard::String.new
	   var it : Iterator<flora2::Term> init visitable.parameters.iterator
       if it.hasNext then 
          strparameters.append("(") 
          strparameters.append( it.next.accept (self))          
          from it until it.isOff loop          
             strparameters.append ( ", ")           
             strparameters.append ( it.next.accept(self))
           end
          strparameters.append(")")           
       end   
       
	   result := visitable.functor.accept(self) + strparameters
	end
	
	method visitBuiltInClasses(visitable : flora2::BuiltInClasses) : flora2::DTString is do 
	   if ( visitable.className  == flora2::PrimitiveClasses.integer) then
	     result := "integer"
	   else if ( visitable.className  == flora2::PrimitiveClasses.float) then
	     result := "float"
	   else if ( visitable.className  == flora2::PrimitiveClasses.number) then
	     result := "number"	   
	   else if ( visitable.className  == flora2::PrimitiveClasses.string) then
	     result := "string"	   
	   end end end end   
	end
		
	method visitString(visitable : flora2::String) : flora2::DTString is do 
	  result := "\""+ visitable.strName+"\""
	end
	method visitInteger(visitable : flora2::Integer) : flora2::DTString is do 
	  result := visitable.intName.toString
	end
	method visitFloat(visitable : flora2::Float) : flora2::DTString is do 
	  result := visitable.floatName.toString	
	end
	
	method visitCompoundedFormula(visitable : flora2::CompoundedFormula) : flora2::DTString is do 
	   var it : Iterator<flora2::Expression> init visitable.elements.iterator
	   var strelements: kermeta::standard::String
       strelements := ""
       if it.hasNext then  
          strelements.append( it.next.accept (self) )
          from it until it.isOff loop          
             if ( visitable.operator  == flora2::ConnectiveOp.conjunctionOp) then
                strelements := strelements + ", "
             else
                strelements := strelements +"; "                       
             end
          strelements := strelements + it.next.accept(self)
           end         
       end   
       result := strelements	
	end	
 
	method visitClause(visitable : flora2::Clause) : flora2::DTString is do 
	      stdio.writeln ("Should not enter em clause")		
	end
	method visitAtomicFormula(visitable : flora2::AtomicFormula) : flora2::DTString is do 
	      stdio.writeln ("Should not enter in AtomicFormula")			
	end
	
	method visitTerm(visitable : flora2::Term) : flora2::DTString is do 
	      stdio.writeln ("Should not enter in Term")				
	end
	method visitNonFunctionalTerm(visitable : flora2::NonFunctionalTerm) : flora2::DTString is do 
	      stdio.writeln ("Should not enter in FunctionalTerm")				
	end
	method visitISAAtom(visitable : flora2::ISAAtom) : flora2::DTString is do 
	      stdio.writeln ("Should not enter in IsAAtom")				
	end
	method visitFeatureAtom(visitable : flora2::FeatureAtom) : flora2::DTString is do 
	      stdio.writeln ("Should not enter in FeatureAtom")				
	end	
	method visitIdTerm(visitable : flora2::IdTerm) : flora2::DTString is do 
	      stdio.writeln ("Should not enter in IdTErm")				
	end
	method visitExpression(visitable : flora2::Expression) : flora2::DTString is do 
	      stdio.writeln ("Should not enter in Expression")				
	end	
	

}