/* File:      FloraObject.java
**
** Author(s): Aditi Pandit, Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
** 
** Copyright (C) The Research Foundation of SUNY, 2005, 2006
** 
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
**
** 
*/

package net.sourceforge.flora.javaAPI.src;
 
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;

import net.sourceforge.flora.javaAPI.util.FlrException;

import com.declarativa.interprolog.TermModel;

/** This class is the glue between the high-level generated Java
   classes and the low-level interface. It contains the logic to
   translate calls from the high-level Java classes to f-logic queries
   to be called using the lower-level interface
*/

public class FloraObject extends FloraConstants
{
    FloraSession session;
    // floraOID is set by proxy object constructors within
    // the files automatically generated by %write(?,?,?)
    public TermModel floraOID;

    public FloraObject(TermModel name,FloraSession sess)
    {
	floraOID = name;
	session = sess;
    }

    public FloraObject(String name, FloraSession sess)
    {
	String oid = name.trim();
	session = sess;

	if (oid.endsWith(")")) {
	    // oid was a complex term - convert it into a TermModel object
	    String query = "buildTermModel(("+oid+"),Model)";
	    floraOID =
		(TermModel)sess.flora.engine.deterministicGoal(query,"[Model]")[0];
	} else
	    // oid was not a complex term
	    floraOID = new TermModel(oid);
    }


    public String toString ()
    {
	/*
	if (floraOID.isAtom() || floraOID.isVar()
	    || floraOID.isList() || floraOID.isNumber())
	    return floraOID.toString();
	else {
	    // ensure that HiLog terms are printed without flapply
	    String query =
		"flora_plg2hlg(PTerm, (" + this.floraOID + "), "
		+ WRAP_HILOG + ", 0), buildTermModel(PTerm,Model)";
	    return
		((TermModel)session.flora.engine.deterministicGoal(query,"[Model]")[0]).toString();
	}
	*/
	String query =
	    "flora_decode_oid_as_atom((" + toQuotedString(this.floraOID) + "),Printable), "
	    + "buildTermModel(Printable,Model)";
	return ((TermModel)session.flora.engine.deterministicGoal(query,"[Model]")[0]).toString();
    }

    /* This is a modified method from Interprolog's TermModel.java */
    private static String toQuotedString (TermModel modObj) {
	String nodeString =
	    (modObj.node instanceof String ?
	     "'"+modObj.node.toString()+"'" : modObj.node.toString());
	if (modObj.getChildCount()==0) 
	    return  nodeString;
	else if (modObj.isList()) {
	    return listToQuotedString(modObj);
	} else {
	    StringBuffer s=
		new StringBuffer(nodeString+"("
				 +toQuotedString(modObj.children[0]));
	    for (int i=1;i<modObj.children.length;i++){
		s.append(","+toQuotedString(modObj.children[i]));
	    }
	    return s+")";
	}
    }

    /* This is a modified method from Interprolog's TermModel.java */
    private static final int listMaxLength=1000;
    private static String listToQuotedString(TermModel term) {
	int i;
	StringBuffer s = new StringBuffer("[");
	TermModel temp = term;
	for( i = 0 ; i < listMaxLength ; i++ ){
	    s.append(toQuotedString(temp.children[0])); // head
	    temp = temp.children[1];
	    if (temp.isListEnd()) break;
	    if( ! temp.isList() ) break ; // tail is not a list
	    s.append(',') ;
	}
	if( i == listMaxLength )
	    s.append("...");
        else if ( ! temp.isListEnd() ) {
	    s.append('|') ;
	    s.append(toQuotedString(temp)); 
	}
	return s + "]";
    }


    /* Get a boolean property of the object
    **
    ** methodName is the name of the boolean method
    ** inherit: whether the method is inheritable or not
    ** parameters: parameters passed to the method
    */
    public boolean getboolean(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String paramList = makeParameterListString(parameters);
	String methodmodifier = "";
	if (isDataAtom)
	    methodmodifier =
		(inherit ?
		 INHERITABLE_METHOD_SYMBOL : NONINHERITABLE_METHOD_SYMBOL);
	else
	    methodmodifier =
		(inherit ?
		 INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
	   
	String floraQuery =
	    floraOID + "["
	    + methodmodifier
	    + methodName.toString()
	    + paramList
	    + "]" + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Command failed, " + floraQuery);
	}
    }


    /* Get all values for a Boolean method where the arguments might be unbound.
    ** For instance, obj[m(aaa,?Y)] or obj[*m(aaa,?Y)]
    **
    ** methodName  : name of method whose value is to be got
    ** inherit     : whether the method is inheritable or not 
    ** parameters  : the parameters for the method
    */
    public Iterator<HashMap<String, FloraObject>> getbooleanAll(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String floraQuery = "";
	String paramList = makeParameterListString(parameters);
	
	// add variable arguments of method to get their bindings out
	Vector<String> argList = new Vector<String>();
	int noOfPars = parameters.size();
	for (int i=0; i<noOfPars; i++) {
	    String param = parameters.elementAt(i).toString();
	    if (param.startsWith("?")) argList.add(param);
	}
		
	String methodmodifier = "";
	if (isDataAtom)
	    methodmodifier =
		(inherit ?
		 INHERITABLE_METHOD_SYMBOL : NONINHERITABLE_METHOD_SYMBOL);
	else
	    methodmodifier =
		(inherit ?
		 INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
	   
	floraQuery =
	    floraOID + "[" + methodmodifier + methodName.toString() + paramList 
	    + "]" + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.FindAllMatches(floraQuery,argList);
	}
	catch(Exception e) {
	    e.printStackTrace();	
	    throw new FlrException("j2flora2: Error in getbooleanAll(). Query was "
				   + floraQuery);
	}
    }



    /* Set a boolean property of the object
    **
    ** methodName : name of the boolean method
    ** inherit: whether the method is inheritable or not
    ** parameters: parameters passed to the method
    */
    public boolean setboolean(String moduleName,Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String paramList = makeParameterListString(parameters);
	String methodmodifier = "";
	if (isDataAtom)
	    methodmodifier =
		(inherit ?
		 INHERITABLE_METHOD_SYMBOL : NONINHERITABLE_METHOD_SYMBOL);
	else
	    methodmodifier =
		(inherit ?
		 INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);

	String floraQuery=
	    "insert{" + floraOID + "["
	    + methodmodifier
	    + methodName.toString()
	    + paramList
	    + "]" + AT_MODULE_SYMBOL + moduleName + "}.";

	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Command failed, " + floraQuery);
	}
    }

    
    /* Delete a boolean property of the object
    **
    ** methodName : name of the boolean method
    ** inherit: whether the method is inheritable or not
    ** parameters: parameters passed to the method
    */
    public boolean deleteboolean(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String paramList = makeParameterListString(parameters);

	String methodmodifier = "";
	if (isDataAtom)
	    methodmodifier =
		(inherit ?
		 INHERITABLE_METHOD_SYMBOL : NONINHERITABLE_METHOD_SYMBOL);
	else
	    methodmodifier =
		(inherit ?
		 INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);

	String floraQuery =
	    "deleteall{" + floraOID + "["
	    + methodmodifier
	    + methodName.toString()
	    + paramList
	    + "]" + AT_MODULE_SYMBOL + moduleName + "}.";

	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Command "
				   + floraQuery + " failed");
	}
    }

    
    /* Get a procedural property of the object
    **
    ** methodName is the name of the boolean method
    ** inherit: ignored - for future use
    ** parameters: parameters passed to the method
    */
    public boolean getprocedural(String moduleName,Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String paramList = makeParameterListString(parameters);

	String methodmodifier = "";
	if (isDataAtom)
	    methodmodifier = "";
	else
	    methodmodifier =
		(inherit ?
		 INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);

	String floraQuery =
	    floraOID + "["
	    + methodmodifier + " "
	    + PROCEDURAL_METHOD_SYMBOL + methodName.toString()
	    + paramList
	    + "]" + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Command "
				   + floraQuery + " failed");
	}
    }


    /* Get all values for a procedural method. The arguments might be unbound.
    ** For instance, obj[m(aaa,?Y)] or obj[*m(aaa,?Y)]
    **
    ** methodName  : name of method whose value is to be got
    ** inherit     : whether the method is inheritable or not 
    ** parameters  : the parameters for the method
    */
    public Iterator<HashMap<String, FloraObject>> getproceduralAll(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String floraQuery = "";
	String paramList = makeParameterListString(parameters);
	
	// add variable arguments of method to get their bindings out
	Vector<String> argList = new Vector<String>();
	int noOfPars = parameters.size();
	for (int i=0; i<noOfPars; i++) {
	    String param = parameters.elementAt(i).toString();
	    if (param.startsWith("?")) argList.add(param);
	}
		
	// inherit is ignored here
	String methodmodifier = "";
	if (isDataAtom)
	    methodmodifier = "";
	else
	    methodmodifier =
		(inherit ?
		 INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
	   
	floraQuery =
	    floraOID + "[" + methodmodifier + " "
	    + PROCEDURAL_METHOD_SYMBOL
	    + methodName.toString() + paramList 
	    + "]" + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.FindAllMatches(floraQuery,argList);
	}
	catch(Exception e) {
	    e.printStackTrace();	
	    throw new FlrException("j2flora2: Error in getproceduralAll(). Query was "
				   + floraQuery);
	}
    }


    /* Set a procedural property of the object
    **
    ** methodName : boolean method
    ** inherit: ignored - for future use
    ** parameters: parameters passed to the method
    */
    public boolean setprocedural(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String paramList = makeParameterListString(parameters);

	String methodmodifier = "";
	if (isDataAtom)
	    methodmodifier = "";
	else
	    methodmodifier =
		(inherit ?
		 INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);

	String floraQuery=
	    "insert{" + floraOID + "[" + methodmodifier + " "
	    + PROCEDURAL_METHOD_SYMBOL
	    + methodName.toString()
	    + paramList
	    + "]" + AT_MODULE_SYMBOL + moduleName + "}.";
	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Command "
				   + floraQuery + " failed");
	}
    }

    
    /* Delete a procedural property of the object
    **
    ** methodName : name of the boolean method
    ** inherit: ignored - for future use
    ** parameters: parameters passed to the method
    */
    public boolean deleteprocedural(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String paramList = makeParameterListString(parameters);

	String methodmodifier = "";
	if (isDataAtom)
	    methodmodifier = "";
	else
	    methodmodifier =
		(inherit ?
		 INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);

	String floraQuery=
	    "deleteall{" + floraOID + "[" + methodmodifier + " "
	    + PROCEDURAL_METHOD_SYMBOL
	    + methodName.toString()
	    + paramList
	    + "]" + AT_MODULE_SYMBOL + moduleName + "}.";
	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in deleteprocedural(). Query was "
				   + floraQuery);
	}
    }


    /* Delete a single value from method's result
    ** methodName : name of method 
    ** inherit    : whether the method is inheritable or not 
    ** parameters : the parameters to the method
    ** value      : the value of the method to be deleted
    */
    public boolean deletevalue(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters,Object value)
    {
	String floraQuery= "";
	String paramList = makeParameterListString(parameters);

	String operatorstring = "";
	if (isDataAtom)
	    operatorstring =
		(inherit ? INHERIT_DATA_ARROW : NONINHERIT_DATA_ARROW);
	else
	    operatorstring =
		(inherit ? INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
		
	floraQuery =
	    "deleteall{"+floraOID + "[" + methodName.toString() + paramList
	    + operatorstring + value + "]"
	    + AT_MODULE_SYMBOL + moduleName + "}.";
		
	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in deletevalue(). Query was "
				   + floraQuery);
	}
    }

	
    /* Get all values for a method where the arguments might be unbound.
    ** For instance, obj[m(aaa,?Y) -> ?Z] or obj[m(aaa,?Y) *-> ?Z]
    **
    ** methodName  : name of method whose value is to be got
    ** inherit     : whether the method is inheritable or not 
    ** parameters  : the parameters for the method
    */
    public Iterator<HashMap<String, FloraObject>> getvalueAll(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String floraQuery = "";
	String paramList = makeParameterListString(parameters);
	
	// add variable arguments of method to get their bindings out
	Vector<String> argList = new Vector<String>();
	int noOfPars = parameters.size();
	for (int i=0; i<noOfPars; i++) {
	    String param = parameters.elementAt(i).toString();
	    if (param.startsWith("?")) argList.add(param);
	}
		
	String operatorstring = "";
	if (isDataAtom)
	    operatorstring =
		(inherit ? INHERIT_DATA_ARROW : NONINHERIT_DATA_ARROW);
	else
	    operatorstring =
		(inherit ? INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
	   
	// Use weird name Value___395792 to avoid clashes with argList vars
	floraQuery =
	    floraOID + "[" + methodName.toString() + paramList + operatorstring
	    + "?Value___395792]" + AT_MODULE_SYMBOL + moduleName + ".";
	argList.add("?Value___395792");
		
	try {
	    return session.FindAllMatches(floraQuery,argList);
	}
	catch(Exception e) {
	    e.printStackTrace();	
	    throw new FlrException("j2flora2: Error in getvalueAll(). Query was "
				   + floraQuery);
	}
    }


    /* Get all values for a method, where all arguments are bound.
    **
    ** methodName  : name of method whose value is to be got
    ** inherit     : whether the method is inheritable or not 
    ** parameters  : the parameters for the method
    */
    public Iterator<FloraObject> getvalue(String moduleName,Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String floraQuery = "";
	String paramList = makeParameterListString(parameters);
	
	String operatorstring = "";
	if (isDataAtom)
	    operatorstring =
		(inherit ? INHERIT_DATA_ARROW : NONINHERIT_DATA_ARROW);
	else
	    operatorstring =
		(inherit ? INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
	      
	floraQuery =
	    floraOID + "[" + methodName.toString() + paramList + operatorstring
	    + "?Value]" + AT_MODULE_SYMBOL + moduleName + ".";

	if (debug)
	    System.out.println("In get/3, floraQuery: " + floraQuery);
		
	try {
	    return session.ExecuteQuery(floraQuery);
	}
	catch (Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Method " + methodName
				   + " failed on object " + floraOID
				   + " in module " + moduleName);
	}
    }
	

    /* Delete a set of values from a method's result
    ** methodName : method 
    ** inherit    : whether the method is inheritable or not
    ** parameters : the parameters to the method 
    ** value      : the values of the method to be deleted
    */
    public boolean deletevalue(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters,Vector value)
    {
	String floraQuery= "";
	String paramList = makeParameterListString(parameters);
	String valuelist = makeValueListString(value);
		
	String operatorstring = "";
	if (isDataAtom)
	    operatorstring =
		(inherit ? INHERIT_DATA_ARROW : NONINHERIT_DATA_ARROW);
	else
	    operatorstring =
		(inherit ? INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
		
	floraQuery =
	    "deleteall{" + floraOID + "[" + methodName.toString()
	    + paramList + operatorstring+valuelist + "]"
	    + AT_MODULE_SYMBOL + moduleName + "}.";
	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in deletevalue(). Query was "
				   + floraQuery);
	}
    }


    /* Delete all values for a method
    **
    ** methodName : name of method
    ** inherit    : whether the method is inheritable or not
    ** parameters : the parameters to the method
    */
    public boolean deletevalue(String moduleName, Object methodName,boolean inherit,boolean isDataAtom,Vector parameters)
    {
	String floraQuery= "";
	String paramList = makeParameterListString(parameters);
	
	String operatorstring = "";
	if (isDataAtom)
	    operatorstring =
		(inherit ? INHERIT_DATA_ARROW : NONINHERIT_DATA_ARROW);
	else
	    operatorstring =
		(inherit ? INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
		
	floraQuery =
	    "deleteall{" + floraOID + "[" + methodName.toString()
	    + paramList + operatorstring + "?Value___395792" + "]"
	    + AT_MODULE_SYMBOL + moduleName + "}.";
		
	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch (Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in deletevalue(). Query was "
				   + floraQuery);
	}
    }


     /* Add a single value to method
     **
     ** methodName : method whose value is to be set
     ** inherit    : whether the method is inheritable
     ** parameters : parameters to the method
     ** value      : value to be set to 
     */
    public boolean setvalue(String moduleName,Object methodName,boolean inherit,boolean isDataAtom,Vector parameters,Object value)
    {
	String floraQuery= "";
	String paramList = makeParameterListString(parameters);
	
	String operatorstring = "";
	if (isDataAtom)
	    operatorstring =
		(inherit ? INHERIT_DATA_ARROW : NONINHERIT_DATA_ARROW);
	else
	    operatorstring =
		(inherit ? INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
		
	floraQuery =
	    "insert{"+floraOID + "[" + methodName + paramList
	    + operatorstring + value.toString() + "]"
	    + AT_MODULE_SYMBOL + moduleName + "}.";
		
	try {
	    return session.ExecuteCommand(floraQuery);
	} catch (Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in setvalue(). Query was "
				   + floraQuery);
	}
    }

	
    /* Add multiple values
    **
    ** methodName   : method to be set 
    ** inherit      : whether the method is inheritable or not 
    ** parameters   : parameters to the method 
    ** value        : vector of values to be set to
    */
    public boolean setvalue(String moduleName,Object methodName,boolean inherit,boolean isDataAtom,Vector parameters,Vector value)
    {
	String floraQuery= "";
	String paramList = makeParameterListString(parameters);
	String valuelist = makeValueListString(value);
		
	String operatorstring = "";
	if (isDataAtom)
	    operatorstring =
		(inherit ? INHERIT_DATA_ARROW : NONINHERIT_DATA_ARROW);
	else
	    operatorstring =
		(inherit ? INHERIT_SIGNATURE_ARROW : NONINHERIT_SIGNATURE_ARROW);
		
	floraQuery =
	    "insert{"+floraOID + "[" + methodName.toString() + paramList
	    + operatorstring + valuelist + "]"
	    + AT_MODULE_SYMBOL + moduleName +"}.";
	try {
	    return session.ExecuteCommand(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in setvalue(). Query was "
				   + floraQuery);
	}
    }


    /* Get all instances of of this object */
    public Iterator<FloraObject> getInstances(String moduleName)
    {
	String floraQuery =
	    "?Object" + ISA_SYMBOL + this.toString()
	    + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.ExecuteQuery(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in getInstances(). Query was "
				   + floraQuery);
	}
    }


    /* Get all instances of the object that are it's 
    ** direct instances and not instances of any subclasses
    */
    public Iterator<FloraObject> getDirectInstances(String moduleName)
    {
	// Construct a query of the form ?X:C, not ((?_S::C, ?X:?_S)).
	String floraQuery =
	    "( ?Object" + ISA_SYMBOL + this.toString()
	    + ", not ((?__Subcl" + SUBCLASS_SYMBOL
	    + this.toString() + ", ?Object"
	    + ISA_SYMBOL + "?__Subcl)) )"
	    + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.ExecuteQuery(floraQuery);
	}
	catch(Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in getDirectInstances(). Query was "
				   + floraQuery);
	}
    }


    /* Get all SubClasses of this object */
    public Iterator<FloraObject> getSubClasses(String moduleName)
    {
	String floraQuery =
	    "?Class" + SUBCLASS_SYMBOL + this.toString()
	    + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.ExecuteQuery(floraQuery);
	}
	catch (Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in getSubClasses(). Query was "
				   + floraQuery);
	}
    }


    /* Get all direct SubClasses of this object */
    public Iterator<FloraObject> getDirectSubClasses(String moduleName)
    {
	// construct query of the form ?S :: SC, not ((?S::?_Mid, ?_Mid::SC)).
	String floraQuery =
	    "( ?Class " + SUBCLASS_SYMBOL + this.toString()
	    + ", not (( ?Class" + SUBCLASS_SYMBOL
	    + "?__Mid, ?__Mid" + SUBCLASS_SYMBOL + this.toString() + " )))"
	    + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.ExecuteQuery(floraQuery);
	}
	catch (Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in geDirecttSubClasses(). Query was "
				   + floraQuery);
	}
    }


    /* Get all SuperClasses of this object */
    public Iterator<FloraObject> getSuperClasses(String moduleName)
    {
	String floraQuery =
	    this.toString() + SUBCLASS_SYMBOL
	    + "?Class" + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.ExecuteQuery(floraQuery);
	}
	catch (Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in getSuperClasses(). Query was "
				   + floraQuery);
	}
    }


    /* Get all direct SuperClasses of this object */
    public Iterator<FloraObject> getDirectSuperClasses(String moduleName)
    {
	// construct query of the form SC::?S, not ((SC::?_Mid, ?_Mid::?S)).
	String floraQuery =
	    "( " + this.toString() + SUBCLASS_SYMBOL + "?Class, "
	    + "not ((" + this.toString() + SUBCLASS_SYMBOL
	    + "?__Mid, ?__Mid" + SUBCLASS_SYMBOL + "?Class)))"
	    + AT_MODULE_SYMBOL + moduleName + ".";
		
	try {
	    return session.ExecuteQuery(floraQuery);
	}
	catch (Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in getDirectSuperClasses(). Query was "
				   + floraQuery);
	}
    }


    /* Get all the declared methods of the class to which this object belongs
    **
    ** moduleName - module in which the methods are defined
    */
    public Iterator<FloraMethod> getMethods(String moduleName)
    {
	Vector<FloraMethod> allMethods = new Vector<FloraMethod>();
		
	Iterator<FloraMethod> methodIter = getMethods(moduleName,NONINHERITABLE,VALUE);
	while(methodIter.hasNext())
	    allMethods.add((methodIter.next()));
			
	methodIter = getMethods(moduleName,INHERITABLE,VALUE);
	while(methodIter.hasNext())
	    allMethods.add((methodIter.next()));
			
	methodIter = getMethods(moduleName,INHERITABLE,BOOLEAN);
	while(methodIter.hasNext())
	    allMethods.add((methodIter.next()));
			
	methodIter = getMethods(moduleName,NONINHERITABLE,BOOLEAN);
	while(methodIter.hasNext())
	    allMethods.add((methodIter.next()));
			
	methodIter = getMethods(moduleName,NONINHERITABLE,PROCEDURAL);
	while(methodIter.hasNext())
	    allMethods.add((methodIter.next()));
			
	return allMethods.iterator();
    }
		

    /* Get methods of a particular type (inheritable or
    ** noninheritable, boolean, ptocedural, etc.).
    **
    ** inherit : indicates if the method is inheritable
    ** methType:  VALUE, BOOLEAN, PROCEDURAL
    */
    private Iterator<FloraMethod> getMethods(String moduleName, boolean inherit, int methType)
    {
	String callModifier = ""; // *, %, or nothing
	String valuePart = "";    // => ?Val or *=> ?Val for data symbols

	checkMethodType(methType);

	if (methType == VALUE) {
	    if (inherit)
		valuePart = INHERIT_SIGNATURE_ARROW + "?Value";
	    else
		valuePart = NONINHERIT_SIGNATURE_ARROW + "?Value";
	} else if (methType == BOOLEAN) {
	    if (inherit)
		callModifier = INHERIT_SIGNATURE_ARROW;
	    else
		callModifier = NONINHERIT_SIGNATURE_ARROW;
	} else if (methType == PROCEDURAL) {
	    if (inherit)
		throw new FlrException("j2flora2: Invalid method type -- procedural+inheritable methods are not supported");
	    else
		callModifier =
		    NONINHERIT_SIGNATURE_ARROW + PROCEDURAL_METHOD_SYMBOL;
	}
			
	Vector<String> vars = new Vector<String>();
	vars.add("?Method");
	vars.add("?Value"); // shouldn't matter if ?Value is not used
	vars.add("?Arguments");
		
	String floraQueryString =
	    "(" + this.toString()
	    + "[" + callModifier + "?__Call" + valuePart + "]"
	    + ", (?__Call =.. [hilog(?Method) | ?Arguments] "
               + "or (?__Call =.. [?Method | ?Arguments], atom(?Method)))"
	    + ")" + AT_MODULE_SYMBOL + moduleName + ".";
		
	Iterator<HashMap<String, FloraObject>> methodMatches;
	Vector<FloraMethod> returnMethodVec = new Vector<FloraMethod>();
	try {
	    methodMatches = session.FindAllMatches(floraQueryString,vars);
	    HashMap firstmatch;
	    while (methodMatches.hasNext()) {	
		firstmatch = methodMatches.next();
		FloraObject methodObj = (FloraObject)firstmatch.get("?Method");

		FloraObject returnTypeObj =
		    // unbound, if ?Value isn't used for procedural/bool
		    (FloraObject)firstmatch.get("?Value");
		if (returnTypeObj.floraOID.isVar()) returnTypeObj = null;

		TermModel methodArgs =
		    ((FloraObject)firstmatch.get("?Arguments")).floraOID;
				
		Vector<FloraObject> methodPars = new Vector<FloraObject>();
		while (!methodArgs.isLeaf()) {
		    methodPars.add(new FloraObject((TermModel)methodArgs.getChild(0),session));
		    methodArgs = (TermModel) methodArgs.getChild(1);
		}
		returnMethodVec.add(new FloraMethod(methodObj,methodPars,
						    returnTypeObj,inherit,methType));
	    }		
	}
	catch (Exception e) {
	    e.printStackTrace();
	    throw new FlrException("j2flora2: Error in getMethods(). Query was "
				   + floraQueryString);
	}
	return returnMethodVec.iterator();
    }

	
    private String makeParameterListString(Vector parameters)
    {
	String paramList = "(";
	int noOfPars = parameters.size();
		
	for (int i=0; i<noOfPars; i++)
	    paramList +=
		parameters.elementAt(i).toString()+(i < noOfPars-1 ? "," : ")");

	if (noOfPars==0) paramList = "";

	return paramList;
    }


    private String makeValueListString(Vector value)
    {
	String valuelist = "{";
	int noOfVals = value.size();

	for (int i=0; i<noOfVals; i++)
	    valuelist +=
		value.elementAt(i).toString()+(i < noOfVals-1 ? "," : "");
	valuelist += "}";

	return valuelist;
    }
}
