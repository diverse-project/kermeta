/* File:      odbc_driver_config.P -- loader for the ODBC driver
** Author:    Saikat Mukherjee
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 2002-2006
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
*/

:- compiler_options([xpp_on]).
#include "extensions_xsb.h"

:- import slash/1, str_cat/3 from machine.
:- import fmt_write_string/3, file_time/2 from file_io.
:- import search_module/6 from consult.
:- import xsb_configuration/2 from xsb_configuration.
:- import odbc_info/2 from odbc_init.
:- import compile_so/3, runtime_loader_flag/3 from foreign.
:- import path_sysop/3, path_sysop/2 from file_io.


make_odbc_driverH(CC, CC_opts) :-
   	slash(Slash),
	xsb_configuration(compiler, XCC),
	xsb_configuration(configuration, XSBconfiguration),
	xsb_configuration(config_libdir, ConfigLibDir),
	odbc_info(libdir, ODBC_libdir),
	(ODBC_libdir == ''
	-> ODBC_libdir_flag = ''
	;  str_cat('-L', ODBC_libdir, ODBC_libdir_flag)
	),
	%% Creates something like -Wl,-rpath,<libdir>
	runtime_loader_flag(XCC, ODBC_libdir, OdbcRunpathFlag),
	(running_under(cygwin) ->
				% cygwin specific stuff

	    xsb_configuration(config_bindir, ConfigBindir),
	    package_configuration(dir(odbc_driver), ODBCDriverDir),
	    fmt_write_string(LD_flags,
			     ' %s %s%sdriver_manager.dll -lodbc32 -lodbccp32 ',
			     f(ODBC_libdir_flag, ConfigBindir, Slash))

	; %% windows specific stuff
	    running_under(windows) -> true
	; %% MacOS
	    running_under(darwin)
	->
	    fmt_write_string(LD_flags,
			     ' %s %s %s%sdriver_manager.dylib %s%sodbc_driver.dylib -lodbc -ldl',
			     f(OdbcRunpathFlag, ODBC_libdir_flag, 
			       ConfigLibDir, Slash, ConfigLibDir, Slash))
	; %% other unixes
	    fmt_write_string(LD_flags,
			     ' %s %s %s%sdriver_manager.so %s%sodbc_driver.so -lodbc -ldl',
			     f(OdbcRunpathFlag, ODBC_libdir_flag, 
			       ConfigLibDir, Slash, ConfigLibDir, Slash))
	),
	package_configuration(dir(odbc_driver), ODBCDriverDir),
	fmt_write_string(LD_directives_file,
			 '%s%scc%sodbc_driver.H',
			 f(ODBCDriverDir, Slash, Slash)),
	telling(OldTell),
	tell(LD_directives_file),
	writeln('%% This file is generated on-the-fly by odbc_driver_config.P'),
	writeln('%% Do not edit--any changes will be written over.'),
	write('%% XSB config:    '), writeln(XSBconfiguration),
	write('%% XSB CC:        '), writeln(XCC),
	write('%% CC:       '), writeln(CC),
	write('%% CC Opts: '), writeln(CC_opts), 
	writeln(':- export driverODBC_register/0.'),
	writeln(':- export driverODBC_initialise/0.'),
	write(':- ldoption('''),
	write(LD_flags),
	writeln(''').'),
	told,
	tell(OldTell).


:-  package_configuration(dir(odbc_driver), ODBCDriverDir),
	slash(Slash),
	Basename = odbc_driver,
	fmt_write_string(Module,
			 '%s%scc%s%s', f(ODBCDriverDir, Slash, Slash, Basename)),
	xsb_configuration(config_libdir, ConfigLibDir),
	xsb_configuration(compiler, CC),
	xsb_configuration(config_dir, ConfigDir),
	xsb_configuration(config_bindir, ConfigBinDir),
	xsb_configuration(packagesdir, PackagesDir),
	fmt_write_string(LibObjFileX,
			 '%s%s%s%s',
			 args(ConfigLibDir,Slash, Basename, XSB_OBJ_EXTENSION_ATOM)),
	str_cat(Module, XSB_OBJ_EXTENSION_ATOM, ObjfileX),
	odbc_info(ccflags, CCflags),
	odbc_info(ldflags, LDflags),
	((running_under(windows) ; running_under(cygwin))
	->
	    fmt_write_string(ConfigSharedMod,
			     '%s%s%s.dll', f(ConfigBinDir, Slash, Basename))
	    ; running_under(darwin)
	->
	    fmt_write_string(ConfigSharedMod,
			     '%s%s%s.dylib',  f(ConfigLibDir, Slash, Basename))
	    ;
	    fmt_write_string(ConfigSharedMod,
			     '%s%s%s.so',  f(ConfigLibDir, Slash, Basename))
	    ),
	( %% avoid recompilation: check if odbc_driver.xwam exists and 
	    %% is newer than odbc_driver.c.
	    search_module(Basename,Dir,_Mod,_Ext,BaseDir,ModuleO),
	    str_cat(Module, '.c', ModuleSourceFile),
	    path_sysop(newerthan,ModuleO,ModuleSourceFile),
	    path_sysop(newerthan,ConfigSharedMod,ModuleSourceFile)
	%% module compiled and is current, so just load
	-> [Basename]
	;  
	    (running_under(cygwin) ->
				% cygwin specific stuff

		fmt_write_string(DBDriversDir, '%s%sdbdrivers%scc', 
				 f(PackagesDir, Slash, Slash)),
		fmt_write_string(CC_opts,
				 ' %s -I %s -I %s',
				 f(CCflags, ConfigDir, DBDriversDir)),
		str_cat(Module, '.dll', SharedLib),
		make_odbc_driverH(CC, CC_opts),
		consult(Module, [cc(CC), cc_opts(CC_opts)]),
		force_rename(SharedLib, ConfigSharedMod),
		force_rename(ObjfileX, LibObjFileX),
		str_cat(Module, '.o', ObjfileO),
		fmt_write_string(LibObjFileO,
				 '%s%s%s.o', f(ConfigBinDir, Slash, Basename)),
		force_rename(ObjfileO, LibObjFileO),
		str_cat(Module, '.a', ObjfileA),
		fmt_write_string(LibObjFileA,
				 '%s%s%s.a', f(ConfigBinDir, Slash, Basename)),
		force_rename(ObjfileA, LibObjFileA),
		str_cat(Module, '.def', ObjfileDef),
		fmt_write_string(LibObjFileDef,
				 '%s%s%s.def', f(ConfigBinDir, Slash, Basename)),
		force_rename(ObjfileDef, LibObjFileDef)
	    ; %% windows specific stuff
		running_under(windows) ->
		make_odbc_driverH(CC, ''),
		[Basename],
		force_rename(ObjfileX, LibObjFileX)
	    ; %% else unix specific stuff
		fmt_write_string(DBDriversDir, '%s%sdbdrivers%scc', 
				 f(PackagesDir, Slash, Slash)),
		fmt_write_string(CC_opts, ' %s -I %s -I %s',
				 f(CCflags, ConfigDir, DBDriversDir)),
		compile_so(Module, [cc(CC), cc_opts(CC_opts)], LDflags),
		
		(running_under(darwin)
		-> LibrarySuffix='.dylib'
		;  LibrarySuffix='.so'
		),

		str_cat(Module, LibrarySuffix, SharedLib),
		force_rename(SharedLib, ConfigSharedMod),
		make_odbc_driverH(CC, CC_opts),
		consult(Module, [cc(CC), cc_opts(CC_opts)]),
		fmt_write_string(LibSharedObjFile, '%s%s%s%s',
				 f(ConfigLibDir, Slash, Basename, LibrarySuffix)),
		force_rename(SharedLib, LibSharedObjFile),
		force_rename(ObjfileX, LibObjFileX)
	    )
	).


running_under(cygwin) :-
	xsb_configuration(architecture, A),
	str_sub(cygwin, A),
	!.
running_under(windows) :-
	xsb_configuration(architecture, A),
	str_sub(windows, A),
	!.
running_under(darwin) :-
	xsb_configuration(architecture, A),
	str_sub(darwin, A),
	!.
running_under(unix) :-
	\+ running_under(cygwin),
	\+ running_under(darwin),
        \+ running_under(windows).

%% Windows semantics for renaming is such that the op fails, 
%% if the target exists
force_rename(Orig,Target) :-
	(path_sysop(unlink,Target), !; true),
	path_sysop(rename,Orig,Target).

