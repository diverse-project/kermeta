/***************************************************************************
  file: closure/flrcommon.fli

  Author(s): Guizhen Yang

  Contact:   flora-users@lists.sourceforge.net

  Copyright (C) The Research Foundation of SUNY, 1999-2004

  The common part of every trailer
***************************************************************************/


#include "flora_wspredicates.flh"
#include "flora_porting.flh"
#include "flora_exceptions.flh"

:- import ground/1 from basics.
%% checkCallerInfo is just for debugging
:- import 
	checkCallerInfo/3,
	flora_abort/1
   from flrutils.

:- import flora_optimizer_registry/2 from flrregistry.

:- WRAP_COPY_UNQUOTED 'FLORA_THIS_MODULE_NAME'.


#include "flrtypes.fli"


/***************************************************************************
  inferred predicates

  These wrapper predicates with the 'inferred_' prefix are needed to make
  the trailer dynamically loadable. Note that the program rules use wrapper
  predicates with the 'derived_', prefix, i.e., FLHEADPREFIX.
***************************************************************************/
FLTRAILERPREFIX(sub)(X,Y,CallerInfo) :-
	%% checkCallerInfo is just for debugging
	checkCallerInfo(sub(X,Y),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(sub)(X,Y,CallerInfo).
FLTRAILERPREFIX(isa)(O,C,CallerInfo) :-
	checkCallerInfo(isa(O,C),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(isa)(O,C,CallerInfo).
FLTRAILERPREFIX(mvd)(O,A,V,CallerInfo) :-
	checkCallerInfo(mvd(O,A,V),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(mvd)(O,A,V,CallerInfo).
FLTRAILERPREFIX(imvd)(C,A,V,CallerInfo) :-
	checkCallerInfo(imvd(C,A,V),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(imvd)(C,A,V,CallerInfo).
FLTRAILERPREFIX(mvddef)(O,A,CallerInfo) :-
	checkCallerInfo(mvddef(O,A),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(mvddef)(O,A,CallerInfo).
FLTRAILERPREFIX(imvddef)(C,A,CallerInfo) :-
	checkCallerInfo(imvddef(C,A),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(imvddef)(C,A,CallerInfo).
FLTRAILERPREFIX(mvdsig)(O,MethodArgs,R,CallerInfo) :-
	checkCallerInfo(mvdsig(O,MethodArgs,R),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(mvdsig)(O,MethodArgs,R,CallerInfo).
FLTRAILERPREFIX(mvdcondef)(O,MethodArgs,L,H,CallerInfo) :-
	checkCallerInfo(mvdcondef(O,MethodArgs,L,H),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(mvdcondef)(O,MethodArgs,L,H,CallerInfo),
	( integer(L) ->
	     true
	;
	     flora_concat_items(['Lower bound ',L,' of cardinality
	constraint of ',O,'[',MethodArgs,'=>?]  is not an integer.'],ErrorMsg),
	     flora_abort(FLORA_CARDINALITY_CONSTRAINT_EXCEPTION(ErrorMsg))
	),
	( ((integer(H),H>=0);H=='*') ->
	     true
	;
	     flora_concat_items(['Higher bound ',H,' of cardinality
	constraint of ',O,'[',MethodArgs,'=>?]  is not a non-negative integer or infinity(*).'],ErrorMsg),
	     flora_abort(FLORA_CARDINALITY_CONSTRAINT_EXCEPTION(ErrorMsg))
	).
FLTRAILERPREFIX(mvdsigdef)(O,MethodArgs,CallerInfo) :-
	checkCallerInfo(mvdsigdef(O,MethodArgs),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(mvdsigdef)(O,MethodArgs,CallerInfo).
FLTRAILERPREFIX(imvdsig)(O,MethodArgs,R,CallerInfo) :-
	checkCallerInfo(imvdsig(O,MethodArgs,R),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(imvdsig)(O,MethodArgs,R,CallerInfo).
FLTRAILERPREFIX(imvdcondef)(O,MethodArgs,L,H,CallerInfo) :-
	checkCallerInfo(imvdcondef(O,MethodArgs,L,H),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(imvdcondef)(O,MethodArgs,L,H,CallerInfo),
	( integer(L) ->
	     true
	;
	     flora_concat_items(['Lower bound ',L,' of cardinality
	constraint of ',O,'[',MethodArgs,'*=>?]  is not an integer.'],ErrorMsg),
	     flora_abort(FLORA_CARDINALITY_CONSTRAINT_EXCEPTION(ErrorMsg))
	),
	( ((integer(H),H>=0);H=='*') ->
	     true
	;
	     flora_concat_items(['Higher bound ',H,' of cardinality
	constraint of ',O,'[',MethodArgs,'*=>?]  is not a non-negative integer or infinity(*).'],ErrorMsg),
	     flora_abort(FLORA_CARDINALITY_CONSTRAINT_EXCEPTION(ErrorMsg))
	).
FLTRAILERPREFIX(imvdsigdef)(O,MethodArgs,CallerInfo) :-
	checkCallerInfo(imvdsigdef(O,MethodArgs),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(imvdsigdef)(O,MethodArgs,CallerInfo).
FLTRAILERPREFIX(meth)(O,M,CallerInfo) :-
	checkCallerInfo(meth(O,M),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(meth)(O,M,CallerInfo).
FLTRAILERPREFIX(imeth)(C,M,CallerInfo) :-
	checkCallerInfo(imeth(C,M),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(imeth)(C,M,CallerInfo).
FLTRAILERPREFIX(boolsig)(O,M,CallerInfo) :-
	checkCallerInfo(boolsig(O,M),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(boolsig)(O,M,CallerInfo).
FLTRAILERPREFIX(iboolsig)(C,M,CallerInfo) :-
	checkCallerInfo(iboolsig(C,M),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(iboolsig)(C,M,CallerInfo).
FLTRAILERPREFIX(transig)(O,M,CallerInfo) :-
	checkCallerInfo(transig(O,M),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(transig)(O,M,CallerInfo).
FLTRAILERPREFIX(itransig)(C,M,CallerInfo) :-
	checkCallerInfo(itransig(C,M),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(itransig)(C,M,CallerInfo).
FLTRAILERPREFIX(tran)(O,T,CallerInfo) :-
	checkCallerInfo(tran(O,T),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(tran)(O,T,CallerInfo).
FLTRAILERPREFIX(objeql)(X,Y,CallerInfo) :-
	checkCallerInfo(objeql(X,Y),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(objeql)(X,Y,CallerInfo).
FLTRAILERPREFIX(exists)(X,CallerInfo) :-
	checkCallerInfo(exists(X),'FLORA_THIS_MODULE_NAME',CallerInfo),
	FLHEADPREFIX(exists)(X,CallerInfo).


/***************************************************************************
  multivalued attributes inclusion
***************************************************************************/
mvdinc(_O,_M,[],CallerInfo) :- !.
mvdinc(O,M,[H|T],CallerInfo) :-
    	mvd(O,M,H,CallerInfo), mvdinc(O,M,T,CallerInfo).


imvdinc(_O,_M,[],CallerInfo) :- !.
imvdinc(O,M,[H|T],CallerInfo) :-
    	imvd(O,M,H,CallerInfo), imvdinc(O,M,T,CallerInfo).


/****************************************************************************
  multivalued attributes aggregation

  Note: (1) These two predicates always succeeds.
        (2) These two predicates are not tabled.
****************************************************************************/
mvdtolist(O,M,L,CallerInfo) :-
	mvddef(O,M,CallerInfo),
	findall(V,mvd(O,M,V,CallerInfo),L).

mvdtolist(O,M,[],CallerInfo) :-
	FLORA_TNOT(mvddef(O,M,CallerInfo)).


imvdtolist(O,M,L,CallerInfo) :-
	imvddef(O,M,CallerInfo),
	findall(V,imvd(O,M,V,CallerInfo),L).
 
imvdtolist(O,M,[],CallerInfo) :-
	FLORA_TNOT(imvddef(O,M,CallerInfo)).


/****************************************************************************
  exists/1
****************************************************************************/
exists(X,CallerInfo) :- mvd(X,_,_,CallerInfo).
exists(X,CallerInfo) :- mvd(_,_,X,CallerInfo).
exists(X,CallerInfo) :- mvddef(X,_,CallerInfo).
exists(X,CallerInfo) :- imvd(X,_,_,CallerInfo).
exists(X,CallerInfo) :- imvd(_,_,X,CallerInfo).
exists(X,CallerInfo) :- imvddef(X,_,CallerInfo).
exists(X,CallerInfo) :- isa(X,_,CallerInfo).
exists(X,CallerInfo) :- isa(_,X,CallerInfo).
exists(X,CallerInfo) :- sub(X,_,CallerInfo).
exists(X,CallerInfo) :- sub(_,X,CallerInfo).
exists(X,CallerInfo) :- meth(X,_,CallerInfo).
exists(X,CallerInfo) :- imeth(X,_,CallerInfo).


/****************************************************************************
  objeql/3
****************************************************************************/
objeql(X,Y,_CallerInfo) :- X=Y.
%%objeql(X,Y,_Caller) :- (nonvar(X); nonvar(Y)), X=Y.
objeql(X,Y,CallerInfo) :- diffobjeql(X,Y,CallerInfo).


/****************************************************************************
    Introduced in support of the debugger
****************************************************************************/
%% like sub, but the debugger won't trace it
silent_sub(C,S,CallerInfo) :- sub(C,S,CallerInfo).
isa(O,C,CallerInfo) :- silent_isa(O,C,CallerInfo).
%% like sub, but the debugger will print it specially and won't trace inside
inheritance_sub(C,S,CallerInfo) :- sub(C,S,CallerInfo).
inheritance_isa(C,S,CallerInfo) :- isa(C,S,CallerInfo).

%% Like inferred_* but the debugger (actually the decoder, flrdecode.P)
%% will print them in a special way
inheritance_imvd(C,M,V,CallerInfo) :- FLTRAILERPREFIX(imvd)(C,M,V,CallerInfo).
inheritance_imvddef(C,M,CallerInfo) :- FLTRAILERPREFIX(imvddef)(C,M,CallerInfo).

inheritance_imvd_eql(C,M,V,CallerInfo) :- FLTRAILERPREFIX(imvd_eql)(C,M,V,CallerInfo).
inheritance_imvddef_eql(C,M,CallerInfo) :- FLTRAILERPREFIX(imvddef_eql)(C,M,CallerInfo).

inheritance_imeth(C,M,CallerInfo) :- FLTRAILERPREFIX(imeth)(C,M,CallerInfo).
inheritance_imeth_eql(C,M,CallerInfo) :- FLTRAILERPREFIX(imeth_eql)(C,M,CallerInfo).



FL_SILENT_EQUAL(X,X).


/****************************************************************************
   axioms for signature semantics
****************************************************************************/
#include "flrsigaxioms.fli"
