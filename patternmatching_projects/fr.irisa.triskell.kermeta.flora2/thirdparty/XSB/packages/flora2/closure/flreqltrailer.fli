/***************************************************************************
  file: closure/flreqltrailer.fli

  Author(s): Guizhen Yang

  Contact:   flora-users@lists.sourceforge.net

  Copyright (C) The Research Foundation of SUNY, 1999-2004

  This is a template file to generate the FLORA trailer with
  equality maintenance and NO behavioral inheritance.
  Inheritance of signatures is still supported.

***************************************************************************/


#include "flora_wspredicates.flh"
#include "flora_porting.flh"

:- import flora_warning_line/2 from flrprint.
:- import flora_funct_arity/2 from flrwrapper.


/***************************************************************************
  Note that all programs rules are translated with with a 'derived_' prefix.
  These rules are bridged to the trailer using wrapper predicates with a
  'inferred_' prefix.
***************************************************************************/


/***************************************************************************
  closure rules for X::Y
***************************************************************************/
%% inferred_sub_eql/3
inferred_sub_eql(X,Y,CallerInfo) :-
	inferred_sub(X,Y,CallerInfo).

inferred_sub_eql(X,Y,CallerInfo) :-
	diffobjeql(X,OX,CallerInfo),
	inferred_sub(OX,Y,CallerInfo).

inferred_sub_eql(X,Y,CallerInfo) :-
	diffobjeql(Y,OY,CallerInfo),
	inferred_sub(X,OY,CallerInfo).

inferred_sub_eql(X,Y,CallerInfo) :-
	diffobjeql(X,OX,CallerInfo),
	diffobjeql(Y,OY,CallerInfo),
	inferred_sub(OX,OY,CallerInfo).


%% sub/3
sub(X,Y,CallerInfo) :-
	inferred_sub_eql(X,Y,CallerInfo),
	(X=Y,
	    flora_warning_line('cycle in class hierarchy: ~w sub ~w',[X,Y])
	; true).

sub(X,Y,CallerInfo) :-
	silent_sub(X,Z,CallerInfo),
	inferred_sub_eql(Z,Y,CallerInfo),
	(X=Y,
	    flora_warning_line('cycle in class hierarchy: ~w sub ~w sub ~w',[X,Z,Y])
	; true).


/***************************************************************************
  closure rules for O:C
***************************************************************************/
%% inferred_isa_eql/3
inferred_isa_eql(O,C,CallerInfo) :-
	inferred_isa(O,C,CallerInfo).

inferred_isa_eql(O,C,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_isa(OX,C,CallerInfo).

inferred_isa_eql(O,C,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	inferred_isa(O,CX,CallerInfo).

inferred_isa_eql(O,C,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(C,CX,CallerInfo),
	inferred_isa(OX,CX,CallerInfo).


%% isa/3
isa(O,C,CallerInfo) :-
	inferred_isa_eql(O,C,CallerInfo).

isa(O,C,CallerInfo) :-
        nonvar(C), var(O),
	!,
	silent_sub(S,C,CallerInfo),
	inferred_isa_eql(O,S,CallerInfo).

isa(O,C,CallerInfo) :-
	(
	    flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')
	-> 
	    silent_sub(S,C,CallerInfo),
	    inferred_isa_eql(O,S,CallerInfo)
	;
	   %% The order of inferred_isa/silent_sub is important. Otherwise, it
	   %% won't return correct answers in cases like a:(b,c). ?- a:?X.
	    inferred_isa_eql(O,S,CallerInfo),
	    silent_sub(S,C,CallerInfo)
	).


/*****************************************************************************
  The following rules propogate the effects of equality.
*****************************************************************************/
%% inferred_imvd_eql/4
inferred_imvd_eql(C,M,V,CallerInfo) :-
	inferred_imvd(C,M,V,CallerInfo).

inferred_imvd_eql(C,M,V,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	inferred_imvd(CX,M,V,CallerInfo).

inferred_imvd_eql(C,M,V,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_imvd(C,MX,V,CallerInfo).

inferred_imvd_eql(C,M,V,CallerInfo) :-
	diffobjeql(V,VX,CallerInfo),
	inferred_imvd(C,M,VX,CallerInfo).

inferred_imvd_eql(C,M,V,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(V,VX,CallerInfo),
	inferred_imvd(C,MX,VX,CallerInfo).

inferred_imvd_eql(C,M,V,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(V,VX,CallerInfo),
	inferred_imvd(CX,M,VX,CallerInfo).

inferred_imvd_eql(C,M,V,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_imvd(CX,MX,V,CallerInfo).

inferred_imvd_eql(C,M,V,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(V,VX,CallerInfo),
	inferred_imvd(CX,MX,VX,CallerInfo).


%% inferred_imvddef_eql/3
inferred_imvddef_eql(C,M,CallerInfo) :-
	inferred_imvddef(C,M,CallerInfo).

inferred_imvddef_eql(C,M,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	inferred_imvddef(CX,M,CallerInfo).

inferred_imvddef_eql(C,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_imvddef(C,MX,CallerInfo).


/***************************************************************************
  closure for X[Y->Z], X[Y*->Z], X[]
/***************************************************************************/
%% inferred_mvd_eql/4
inferred_mvd_eql(O,M,V,CallerInfo) :-
	inferred_mvd(O,M,V,CallerInfo).

inferred_mvd_eql(O,M,V,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_mvd(OX,M,V,CallerInfo).

inferred_mvd_eql(O,M,V,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_mvd(O,MX,V,CallerInfo).

inferred_mvd_eql(O,M,V,CallerInfo) :-
	diffobjeql(V,VX,CallerInfo),
	inferred_mvd(O,M,VX,CallerInfo).

inferred_mvd_eql(O,M,V,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(V,VX,CallerInfo),
	inferred_mvd(O,MX,VX,CallerInfo).

inferred_mvd_eql(O,M,V,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(V,VX,CallerInfo),
	inferred_mvd(OX,M,VX,CallerInfo).

inferred_mvd_eql(O,M,V,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_mvd(OX,MX,V,CallerInfo).

inferred_mvd_eql(O,M,V,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(V,VX,CallerInfo),
	inferred_mvd(OX,MX,VX,CallerInfo).


%% inferred_mvddef_eql/3
inferred_mvddef_eql(O,M,CallerInfo) :-
	inferred_mvddef(O,M,CallerInfo).

inferred_mvddef_eql(O,M,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_mvddef(OX,M,CallerInfo).

inferred_mvddef_eql(O,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_mvddef(O,MX,CallerInfo).

%% inferred_imeth_eql/3
inferred_imeth_eql(C,M,CallerInfo) :-
	inferred_imeth(C,M,CallerInfo).

inferred_imeth_eql(C,M,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	inferred_imeth(CX,M,CallerInfo).

inferred_imeth_eql(C,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_imeth(C,MX,CallerInfo).

inferred_imeth_eql(C,M,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_imeth(CX,MX,CallerInfo).


%% inferred_meth_eql/3
inferred_meth_eql(O,M,CallerInfo) :-
	inferred_meth(O,M,CallerInfo).

inferred_meth_eql(O,M,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_meth(OX,M,CallerInfo).

inferred_meth_eql(O,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_meth(O,MX,CallerInfo).

inferred_meth_eql(O,M,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_meth(OX,MX,CallerInfo).


/*****************************************************************************
  regular wrappers
*****************************************************************************/
imvd(C,M,V,CallerInfo) :-
	inferred_imvd_eql(C,M,V,CallerInfo).

imvddef(C,M,CallerInfo) :-
	inferred_imvddef_eql(C,M,CallerInfo).

imvddef(C,M,CallerInfo) :-
	nonvar(M),
	imvd(C,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow

mvd(O,M,V,CallerInfo) :-
	inferred_mvd_eql(O,M,V,CallerInfo).

mvddef(O,M,CallerInfo) :-
	inferred_mvddef_eql(O,M,CallerInfo).

mvddef(O,M,CallerInfo) :-
	nonvar(M),
	mvd(O,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  monotonic inheritance of binary attributes (tabled methods)
*****************************************************************************/
meth(O,M,CallerInfo) :-
	inferred_meth_eql(O,M,CallerInfo).

%% imeth/3
imeth(C,M,CallerInfo) :-
	inferred_imeth_eql(C,M,CallerInfo).

/*****************************************************************************
  nontabled methods (transactions)
*****************************************************************************/
tran(O,T,CallerInfo) :-
	inferred_tran(O,T,CallerInfo).

tran(O,T,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_tran(OX,T,CallerInfo).

tran(O,T,CallerInfo) :-
	diffobjeql(T,TX,CallerInfo),
	inferred_tran(O,TX,CallerInfo).

tran(O,T,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(T,TX,CallerInfo),
	inferred_tran(OX,TX,CallerInfo).

/*****************************************************************************
  monotonic inheritance of signatures
*****************************************************************************/
%% mvdsig/4
mvdsig(O,M,R,CallerInfo) :-
	inferred_mvdsig(O,M,R,CallerInfo).

mvdsig(O,M,R,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_mvdsig(OX,M,R,CallerInfo).

mvdsig(O,M,R,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_mvdsig(O,MX,R,CallerInfo).

mvdsig(O,M,R,CallerInfo) :-
	diffobjeql(R,RX,CallerInfo),
	inferred_mvdsig(O,M,RX,CallerInfo).

mvdsig(O,M,R,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(R,RX,CallerInfo),
	inferred_mvdsig(O,MX,RX,CallerInfo).

mvdsig(O,M,R,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(R,RX,CallerInfo),
	inferred_mvdsig(OX,M,RX,CallerInfo).

mvdsig(O,M,R,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_mvdsig(OX,MX,R,CallerInfo).

mvdsig(O,M,R,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(R,RX,CallerInfo),
	inferred_mvdsig(OX,MX,RX,CallerInfo).

mvdsig(O,M,R,CallerInfo) :-
	isa(O,C,CallerInfo),
	imvdsig(C,M,R,CallerInfo).


%% mvdcondef/5 
mvdcondef(O,M,L,H,CallerInfo) :-
	inferred_mvdcondef(O,M,L,H,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_mvdcondef(OX,M,L,H,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_mvdcondef(O,MX,L,H,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(L,LX,CallerInfo),
	inferred_mvdcondef(O,M,LX,H,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(H,HX,CallerInfo),
	inferred_mvdcondef(O,M,L,HX,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(L,LX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	inferred_mvdcondef(O,M,LX,HX,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	inferred_mvdcondef(O,MX,L,HX,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	inferred_mvdcondef(OX,M,L,HX,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_mvdcondef(O,MX,LX,H,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_mvdcondef(OX,M,LX,H,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_mvdcondef(OX,MX,L,H,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_mvdcondef(OX,MX,LX,H,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	inferred_mvdcondef(OX,MX,L,HX,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_mvdcondef(OX,M,LX,HX,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_mvdcondef(O,MX,LX,HX,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_mvdcondef(OX,MX,LX,HX,CallerInfo).

mvdcondef(O,M,L,H,CallerInfo) :-
	isa(O,C,CallerInfo),
	imvdcondef(C,M,L,H,CallerInfo).


%% mvdsigdef/3
mvdsigdef(O,M,CallerInfo) :-
	inferred_mvdsigdef(O,M,CallerInfo).

mvdsigdef(O,M,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_mvdsigdef(OX,M,CallerInfo).

mvdsigdef(O,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_mvdsigdef(O,MX,CallerInfo).

mvdsigdef(O,M,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_mvdsigdef(OX,MX,CallerInfo).

mvdsigdef(O,M,CallerInfo) :-
	isa(O,C,CallerInfo),
	imvdsigdef(C,M,CallerInfo).

mvdsigdef(O,M,CallerInfo) :-
	mvdsig(O,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow


%% imvdsig/4
imvdsig(C,M,R,CallerInfo) :-
	inferred_imvdsig(C,M,R,CallerInfo).

imvdsig(C,M,R,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	inferred_imvdsig(CX,M,R,CallerInfo).

imvdsig(C,M,R,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_imvdsig(C,MX,R,CallerInfo).

imvdsig(C,M,R,CallerInfo) :-
	diffobjeql(R,RX,CallerInfo),
	inferred_imvdsig(C,M,RX,CallerInfo).

imvdsig(C,M,R,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(R,RX,CallerInfo),
	inferred_imvdsig(C,MX,RX,CallerInfo).

imvdsig(C,M,R,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(R,RX,CallerInfo),
	inferred_imvdsig(CX,M,RX,CallerInfo).

imvdsig(C,M,R,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_imvdsig(CX,MX,R,CallerInfo).

imvdsig(C,M,R,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(R,RX,CallerInfo),
	inferred_imvdsig(CX,MX,RX,CallerInfo).

imvdsig(C,M,R,CallerInfo) :-
	inheritance_sub(C,S,CallerInfo),
	imvdsig(S,M,R,CallerInfo).


%% imvdcondef/5 
imvdcondef(O,M,L,H,CallerInfo) :-
	inferred_imvdcondef(O,M,L,H,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_imvdcondef(OX,M,L,H,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_imvdcondef(O,MX,L,H,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(L,LX,CallerInfo),
	inferred_imvdcondef(O,M,LX,H,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(H,HX,CallerInfo),
	inferred_imvdcondef(O,M,L,HX,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(L,LX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	inferred_imvdcondef(O,M,LX,HX,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	inferred_imvdcondef(O,MX,L,HX,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	inferred_imvdcondef(OX,M,L,HX,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_imvdcondef(O,MX,LX,H,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_imvdcondef(OX,M,LX,H,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_imvdcondef(OX,MX,L,H,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_imvdcondef(OX,MX,LX,H,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	inferred_imvdcondef(OX,MX,L,HX,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_imvdcondef(OX,M,LX,HX,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_imvdcondef(O,MX,LX,HX,CallerInfo).

imvdcondef(O,M,L,H,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	diffobjeql(H,HX,CallerInfo),
	diffobjeql(L,LX,CallerInfo),
	inferred_imvdcondef(OX,MX,LX,HX,CallerInfo).

imvdcondef(C1,M,L,H,CallerInfo) :-
	inheritance_sub(C1,C2,CallerInfo),
	imvdcondef(C2,M,L,H,CallerInfo).


%% imvdsigdef/3
imvdsigdef(C,M,CallerInfo) :-
	inferred_imvdsigdef(C,M,CallerInfo).

imvdsigdef(C,M,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	inferred_imvdsigdef(CX,M,CallerInfo).

imvdsigdef(C,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_imvdsigdef(C,MX,CallerInfo).

imvdsigdef(C,M,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_imvdsigdef(CX,MX,CallerInfo).

imvdsigdef(C,M,CallerInfo) :-
	inheritance_sub(C,S,CallerInfo),
	imvdsigdef(S,M,CallerInfo).

imvdsigdef(C,M,CallerInfo) :-
	imvdsig(C,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow


%% boolsig/3
boolsig(O,M,CallerInfo) :-
	inferred_boolsig(O,M,CallerInfo).

boolsig(O,M,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_boolsig(OX,M,CallerInfo).

boolsig(O,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_boolsig(O,MX,CallerInfo).

boolsig(O,M,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_boolsig(OX,MX,CallerInfo).

boolsig(O,M,CallerInfo) :-
	isa(O,C,CallerInfo),
	iboolsig(C,M,CallerInfo).


%% iboolsig/3
iboolsig(C,M,CallerInfo) :-
	inferred_iboolsig(C,M,CallerInfo).

iboolsig(C,M,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	inferred_iboolsig(CX,M,CallerInfo).

iboolsig(C,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_iboolsig(C,MX,CallerInfo).

iboolsig(C,M,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_iboolsig(CX,MX,CallerInfo).

iboolsig(C,M,CallerInfo) :-
	inheritance_sub(C,S,CallerInfo),
	iboolsig(S,M,CallerInfo).


%% transig/3
transig(O,M,CallerInfo) :-
	inferred_transig(O,M,CallerInfo).

transig(O,M,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	inferred_transig(OX,M,CallerInfo).

transig(O,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_transig(O,MX,CallerInfo).

transig(O,M,CallerInfo) :-
	diffobjeql(O,OX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_transig(OX,MX,CallerInfo).

transig(O,M,CallerInfo) :-
	isa(O,C,CallerInfo),
	itransig(C,M,CallerInfo).


%% itransig/3
itransig(C,M,CallerInfo) :-
	inferred_itransig(C,M,CallerInfo).

itransig(C,M,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	inferred_itransig(CX,M,CallerInfo).

itransig(C,M,CallerInfo) :-
	diffobjeql(M,MX,CallerInfo),
	inferred_itransig(C,MX,CallerInfo).

itransig(C,M,CallerInfo) :-
	diffobjeql(C,CX,CallerInfo),
	diffobjeql(M,MX,CallerInfo),
	inferred_itransig(CX,MX,CallerInfo).

itransig(C,M,CallerInfo) :-
	inheritance_sub(C,S,CallerInfo),
	itransig(S,M,CallerInfo).


/*****************************************************************************
  object existence
*****************************************************************************/
exists(X,CallerInfo) :-
	inferred_exists(X,CallerInfo).

exists(X,CallerInfo) :-
	diffobjeql(X,OX,CallerInfo),
	inferred_exists(OX,CallerInfo).


/*****************************************************************************
  basic equality maintenance
*****************************************************************************/
%% Means X,Y are equal, but not identical
diffobjeql(X,Y,CallerInfo) :-
	inferred_objeql(X,Y,CallerInfo),
	X \= Y.

diffobjeql(X,Y,CallerInfo) :-
	inferred_objeql(Y,X,CallerInfo),
	X \= Y.

diffobjeql(X,Y,CallerInfo) :-
	diffobjeql(X,Z,CallerInfo),
	diffobjeql(Z,Y,CallerInfo),
	X \= Y.
