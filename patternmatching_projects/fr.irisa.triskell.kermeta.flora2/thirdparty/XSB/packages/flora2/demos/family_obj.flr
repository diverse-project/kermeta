/* File:      family_obj.flr
** Author(s): Bertram Ludaescher
** Contact:   flora-users@lists.sourceforge.net
** 
** Copyright (C) Bertram Ludaescher, 1998
** 
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: family_obj.flr,v 1.4 2005/12/22 22:37:18 hwan Exp $
** 
*/

//  ======================================================================
//  QUERYING THE PEDIGREE OF ``THE FALLERS'' 
//  (German TV serial; see: www.swf.de/diefallers/stammbaum/index.html)
//  
//  An OBJECT-ORIENTED version of family_rel.flp
// 
//  ======================================================================


//  ======================================================================
//  SCHEMA DATA: CLASSES & SIGNATURES
//  ======================================================================



male :: person.		// subclass relation
female :: person.	// subclass relation

person[	mother{1:1}*=>person, father{1:1}*=>person,		// some SINGLE-valued...
	spouse{1:1}*=>person, husband{1:1}*=>person,	// ... methods

	son*=>person, daughter*=>person,	// some MULTI-valued...
	brother*=>person, sister*=>person,	// ... methods...
	uncle*=>person, aunt*=>person,
	ancestor*=>person, parent*=>person
].


//  ======================================================================
//  INSTANCE DATA  (aka EDB/BASE FACTS)
//  (partially) define mother, father, spouse, (fe)male info
//  ======================================================================

wilhelm:male[spouse->rita].
rita:female.
franz:male[mother->rita,father->wilhelm].
heinz:male[mother->rita,father->wilhelm].
hermann:male[mother->rita,father->wilhelm,spouse->johanna].
johanna:female.
monique:female.
bernhard:male[mother->johanna,father->hermann].
karl:male[mother->johanna,father->hermann,spouse->christina].
christina:female.
kati:female[mother->johanna,father->hermann].
albert:male[mother->monique,father->bernhard].
eva:female[mother->kati].


//  ======================================================================
//  RULES (aka IDB/DERIVED RELATIONS)
//  ======================================================================

?X[spouse->?Y] :- ?Y[spouse->?X].	// spouse is symmetric!

?X[parent->{?Y}] :- ?X[father->?Y].
?X[parent->{?Y}] :- ?X[mother->?Y].

?X[son->{?Y}]      :- ?Y[parent->{?X}], ?Y:male.
?X[daughter->{?Y}] :- ?Y[parent->{?X}], ?Y:female.

?X[brother->{?Y}] :- ?X.parent[son->{?Y}], \+ ?X=?Y.
?X[sister->{?Y}]  :- ?X.parent[daughter->{?Y}], \+ ?X=?Y.

?X[brother_in_law->{?Y}] :- ?X.sister[spouse->?Y].
?X[brother_in_law->{?Y}] :- ?X.spouse[brother->{?Y}].

?X[sister_in_law->{?Y}] :- ?X.brother[spouse->?Y].
?X[sister_in_law->{?Y}] :- ?X.spouse[sister->{?Y}].

?X[uncle->{?Y}] :- ?X.parent[brother->{?Y}].
?X[uncle->{?Y}] :- ?X.parent[brother_in_law->{?Y}].
?X[aunt->{?Y}]  :- ?X.parent[sister->{?Y}].
?X[aunt->{?Y}]  :- ?X.parent[sister_in_law->{?Y}].

?X[ancestor->{?Y}] :- ?X[parent->{?Y}].
?X[ancestor->{?Y}] :- ?X.ancestor[ancestor->{?Y}].


?X:illegitimate :- ?X[father->?F, mother->?M], ?M[spouse -> ?S], ?S\=?F.


//  ======================================================================
//  QUERIES
//  ======================================================================

?- albert:?C.			// which classes...
?- albert[?M{1:1}=>?],albert[?M->?X]. // SINGLE-valued methods
?- albert[?M->?X],not(albert[?M{1:1}=>?]).		// ... and MTULTI-valued methods...
//?- albert[?M->{?X}].		// ... are known for Albert? 

?- ?_o[?S{1:1}=>?],?_o.?S[].			// show SINGLE-valued and...
?- ?_o.?M[],not(?_o[?M{1:1}=>?]).			// ... MULTI-valued methods...
?- ?_:?C[].			// ... and classes

?- albert.parent.uncle[sister_in_law -> {?Y}]. // a path expression

?- ?X[sister_in_law->{?Y}].


