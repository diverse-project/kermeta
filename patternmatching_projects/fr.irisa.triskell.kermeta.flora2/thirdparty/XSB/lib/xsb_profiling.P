/* File:      xsb_profiling.P
** Author(s): David S. Warren
**
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1993-1998
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** 
*/

/* This call can only be used if XSB has been compiled with
XSB_PROFILING defined.  profile_call(Goal) will call Goal and then
print out a profile of percentage of time spent in each predicate.  It
uses a "sampling" method so the results may vary some from run to
run.*/

profile_call(Goal) :-
	%% test xsb_configuration(xsb-profiling) so works when running with nonprof xsb
	cputime(T0),
	(prof_cmd(1)		% start profiling
	 ->	(call(Goal) ; prof_cmd(2),fail),
		prof_cmd(2),	% stop profiling
		cputime(T1),
		Time is T1-T0,
		telling(OF),tell(userout),write('PROFILE FOR: '),write(Goal),
		write('  Total cputime: '),write(Time),writeln(' seconds'),
		dump_prof,
		tell(OF)
	 ;	call(Goal),	% profiling not enabled (xsb -p)
		cputime(T1),
		Time is T1-T0,
		telling(OF),tell(userout),write('PROFILE FOR: '),write(Goal),
		write('  Total cputime: '),write(Time),writeln(' seconds')
	).

get_profile_tuple(Node,Tuple,NNode) :- prof_cmd(3,Node,Tuple,NNode).

prof_cmd(_CODE) :- '_$builtin'(237).
prof_cmd(_Code,_Node,_Tuple,_NNode) :- '_$builtin'(237).

profile_tuple(Tuple) :-
	get_profile_tuple(0,Tuple0,NodePtr),
	profile_tuple(NodePtr,Tuple0,Tuple).

profile_tuple(NodePtr,Tuple0,Tuple) :-
	(Tuple = Tuple0
	 ;
	 NodePtr =\= 0,
	 get_profile_tuple(NodePtr,Tuple1,NextNodePtr),
	 profile_tuple(NextNodePtr,Tuple1,Tuple)
	).

dump_prof :-
	findall(Tuple,profile_tuple(Tuple),Tuples),
	parsort(Tuples,[asc(2),asc(1)],0,[p(PSC,MPSC,Cnt)|STuples]),
	sum_profile(STuples,Cnt,Total),
	nl, write('Total Count: '),writeln(Total), nl,
	(Total > 0
	 ->	dump_profile(STuples,Total,PSC,MPSC,Cnt,Cnt)
	 ;	true
	).

sum_profile([],Sum,Sum).
sum_profile([p(_,_,Cnt)|STuples],Sum0,Sum) :-
	    Sum1 is Sum0 + Cnt,
	    sum_profile(STuples,Sum1,Sum).

dump_profile([],Total,OPSC,OMPSC,OCnt,ACnt) :-
	(OPSC =:= 0
	 ->	OPName = 'Unknown', OPArity = ('?')
	 ;	psc_name(OPSC,OPName),psc_arity(OPSC,OPArity)
	),
	Percent is (OCnt*200+Total) // (2*Total),
	tab(20), write(Percent),write('%'),write(' '(OCnt)),tab(2),
	write(OPName),write('/'),writeln(OPArity),
	MPercent is (ACnt*200+Total) // (2*Total),
	write(MPercent),write('%'),write(' '(ACnt)),tab(2),
	(OMPSC =:= 0
	 ->	MName = 'Unknown'
	 ;	psc_name(OMPSC,MName)
	),
	writeln(MName).
dump_profile([p(PSC,MPSC,Cnt)|STuples],Total,OPSC,OMPSC,OCnt,ACnt) :-
	(OPSC =:= 0
	 ->	OPName = 'Unknown', OPArity = ('?')
	 ;	psc_name(OPSC,OPName),psc_arity(OPSC,OPArity)
	),
	Percent is (OCnt*200+Total) // (2*Total),
	tab(20), write(Percent),write('%'),write(' '(OCnt)),tab(2),
	write(OPName),write('/'),writeln(OPArity),
	(MPSC =\= OMPSC
	 ->	MPercent is (ACnt*200+Total) // (2*Total),
		write(MPercent),write('%'),write(' '(ACnt)),tab(2),
		(OMPSC =:= 0
		 ->	MName = 'Unknown'
		 ;	psc_name(OMPSC,MName)
		),
		writeln(MName),
		dump_profile(STuples,Total,PSC,MPSC,Cnt,Cnt)
	 ;	NACnt is Cnt+ACnt,
		dump_profile(STuples,Total,PSC,MPSC,Cnt,NACnt)
	).

