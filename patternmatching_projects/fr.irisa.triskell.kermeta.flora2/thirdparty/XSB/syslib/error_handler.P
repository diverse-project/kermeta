/* File:      error_handler.P
** Author(s): Swift
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1986, 1993-1998
** Copyright (C) ECRC, Germany, 1990
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABrILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: error_handler.P,v 1.39 2006/05/31 22:30:08 tswift Exp $
** 
*/

:- compiler_options([xpp_on,sysmod,optimize,spec_off]).

#include "sig_xsb.h"
#include "flag_defs_xsb.h"
#include "heap_defs_xsb.h"
#include "standard.h"
#include "char_defs.h"

:- import default_user_error_handler/1 from usermod.
:- dynamic default_user_error_handler/1.

/* Types of errors are based on Section 7.12 of the ISO Standard, but
/* I've added tabling_error.  (see manual for types and explanation).*/

default_error_handler(Error) :- 
	default_user_error_handler(Error),
	close_open_tables,
	!,fail.
default_error_handler(Error) :-
	default_sys_error_handler(Error).

/* Below, representation errors (usually mallocs returning null ptrs)
 * are handled seperately, by writing out message in C.  
 * Also, as a stab at error handling in the MT engine, we only print
 * out backtrace for the console thread; we keep the error message
 * around for non-console joinable threads. For detached threads,
 * there's not much that can be done.  */

:- import  '_$thread_exit_ball'/2 from usermod.
:- dynamic '_$thread_exit_ball'/2.
:- thread_shared('_$thread_exit_ball'(_,_)).

 default_sys_error_handler(error(Error,Msg,Backtrace)) :-
	% here is where we may do something abt backtraces.
	xsb_flag(backtrace_on_error,BT),
	xsb_thread_self(Thread),
        default_sys_error_handler(error(Error,Msg)),
	!,
	(Thread == 0 -> 
	    default_sys_error_handler_main(BT,Backtrace)
	  ; 
	    default_sys_error_handler_nonmain(Error,Thread,Backtrace,Msg) ).

default_sys_error_handler(error(Error,Msg)) :-
	get_sys_error_description(error(Error,Msg),NewMsg),
	messageln(NewMsg,STDERR),!.

default_sys_error_handler(X) :-
	messageln(('++Error[XSB/Runtime] Unhandled Exception: ',X),STDERR).

default_sys_error_handler_main(BT,Backtrace):- 
	(BT == on -> print_backtrace(Backtrace) ; true),
	close_open_tables,
	fail.

% Cancellation.
default_sys_error_handler_nonmain(thread_cancel,Thread,Backtrace,Msg):- !,
	(xsb_thread_property(Thread,joinable) -> 
	       get_backtrace(Backtrace,ReadBT),
	       asserta('_$thread_exit_ball'(Thread,
	                                    error(thread_cancel,Msg,ReadBT)))
	     ; true),
	xsb_thread_exit(1).
% Error: non-cancellation.
default_sys_error_handler_nonmain(Error,Thread,Backtrace,Msg):- 
	(xsb_thread_property(Thread,joinable) -> 
	       get_backtrace(Backtrace,ReadBT),
	       asserta('_$thread_exit_ball'(Thread,error(Error,Msg,ReadBT)))
	     ; true),
	xsb_thread_exit(2).

% get_sys_error_description/3
get_sys_error_description(error(Error,Msg,Backtrace), 
	                        ExceptionDescription, BacktraceList) :- !,
	get_sys_error_description(error(Error,Msg), ExceptionDescription),
	get_backtrace(Backtrace, BacktraceList).
get_sys_error_description(error(Error,Msg), ExceptionDescription, []) :-
	get_sys_error_description(error(Error,Msg), ExceptionDescription).

% get_sys_error_description/2
% This needs to handle either comma lists or lists as input -- just as message/[1,2]
get_sys_error_description(error(domain_error(Valid_type,Culprit),Msg), ExceptionDesc) :-
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Domain (',Culprit,' not in domain ',
	                          Valid_type,')] ', Msg).
get_sys_error_description(error(evaluation_error(Flag),Msg), ExceptionDesc) :- 
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Evaluation (',Flag,')] ', Msg).
get_sys_error_description(error(existence_error(Obj_type,Culprit),Msg), ExceptionDesc):-
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Existence (No ',Obj_type,
	                          ' ',Culprit,' exists)] ', Msg).
get_sys_error_description(error(instantiation_error,Msg), ExceptionDesc) :- 
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Instantiation] ', Msg).
get_sys_error_description(error(misc_error,Msg), ExceptionDesc) :- 
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Miscellaneous] ', Msg).
get_sys_error_description(error(permission_error(Op,Obj_type,Culprit),Msg), 
	                          ExceptionDesc) :-
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Permission (Operation) ',
		     Op,' on ',Obj_type,': ',Culprit,'] ', Msg).
get_sys_error_description(error(representation_error(Flag),Msg), ExceptionDesc) :- 
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Representation (',Flag,')] ', Msg) .
get_sys_error_description(error(resource_error(Flag),Msg), ExceptionDesc) :- 
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Resource (',Flag,')] ', Msg) .
get_sys_error_description(error(syntax_error,Msg), ExceptionDesc) :- 
	ExceptionDesc =   ('++Error[XSB/Runtime/P]: [Syntax] ', Msg) .
get_sys_error_description(error(system_error,Msg), ExceptionDesc) :- 
	ExceptionDesc =   ('++Error[XSB/Runtime/P]: [System] ', Msg) .
get_sys_error_description(error(table_error,Msg), ExceptionDesc) :-
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Table] ',Msg).

get_sys_error_description(error(thread_cancel,Id), ExceptionDesc) :- 
	ExceptionDesc = 
             ('++Error[XSB/Runtime/P]: [XSB Thread Cancellation] Thread ',Id).

get_sys_error_description(error(type_error(Valid_type,Culprit),Msg), ExceptionDesc) :-
	ExceptionDesc = ('++Error[XSB/Runtime/P]: [Type (',Culprit,' in place of ',
	                          Valid_type,')] ', Msg).

/*get_backtrace(+, -) gets backtrace as built by build_xsb_backtrace:
list pair, with car=forward continuation, cdr=backward continuation.
backward is [] if xsb not started with -p option */
get_backtrace([ForPscs|BackPscs], [['Forward Continuation...'|PFor]|['Backward Continuation...'| PBack]]) :-
	get_mod_pred_arity_list(ForPscs,PFor),
	get_mod_pred_arity_list(BackPscs,PBack).


/* get backtrace as list of Mod:Pred/Arity, with ? if unknown */
get_backtrace_list([],[]).
get_backtrace_list([Psc|Pscs],[Mod:Name/Arity|Preds]) :-
	(Psc =:= 0
	 ->	Mod = '?', Name = '?', Arity = '?'
	 ;	psc_data(Psc,ModPsc),
		(ModPsc =:= 0
		 ->	Mod = usermod % 0 also means usermod
		 ;	psc_name(ModPsc,Mod)
		),
		psc_name(Psc,Name),
		psc_arity(Psc,Arity)
	),
	get_backtrace_list(Pscs,Preds).

/* get backtrace as printable list of atoms */
get_mod_pred_arity_list([], []).
get_mod_pred_arity_list([Psc|Pscs], [ModPred|ModPreds]) :-
	(Psc =:= 0
	 ->	ModPred = '... unknown/?'
	 ;	psc_data(Psc,ModPsc),
		(ModPsc =:= 0
		 ->	ModName = usermod % 0 also means usermod
		 ;	psc_name(ModPsc,ModName)
		),
		psc_name(Psc,Name),
		psc_arity(Psc,Arity),
		(ModName == usermod
		 ->	concat_atom(['... ',Name,'/',Arity],ModPred)
		 ;	concat_atom(['... ',ModName,':',Name,'/',Arity],ModPred)
		)
	),
	get_mod_pred_arity_list(Pscs, ModPreds).

/* prints out backtrace as built by build_xsb_backtrace:
list pair, with car=forward continuation, cdr=backward continuation.
backward is [] if xsb not started with -p option */

print_backtrace([[]]) :- !.  % if empty, don't print anything
print_backtrace([For|Back]) :-
	messageln('Forward Continuation...',STDERR),
	print_mod_pred_arity_list(For),
	(Back == []
	 ->	true
	 ;	messageln('Backward Continuation...',STDERR),
		print_mod_pred_arity_list(Back)
	).

print_mod_pred_arity_list([]).
print_mod_pred_arity_list([Psc|Pscs]) :-
	(Psc =:= 0
	 ->	messageln('... unknown/?',STDERR)
	 ;	psc_data(Psc,ModPsc),
		(ModPsc =\= 0
		 ->	psc_name(ModPsc,ModName)
		 ;	ModName = unknown
		),
		psc_name(Psc,Name),
		psc_arity(Psc,Arity),
		(ModName \== usermod
		 ->	messageln(['... ',ModName,':',Name,'/',Arity],STDERR)
		 ;	messageln(['... ',Name,'/',Arity],STDERR)
		)
	),
	print_mod_pred_arity_list(Pscs).
%-----------------------------------------------------------------------

% ISO-compatable (and other) convenience predicates

domain_error(Valid_type,Culprit,Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(domain_error(Valid_type,Culprit),
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).
domain_error(Valid_type,Culprit,Predicate,Arg,Msg):- 
	xsb_backtrace(Bt),
	throw(error(domain_error(Valid_type,Culprit),
                           (' in arg ',Arg,' of predicate ',Predicate, '(',Msg,')'),Bt)).
%------
evaluation_error(Flag,Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(evaluation_error(Flag),
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).
%------
existence_error(Object_type,Culprit,Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(existence_error(Object_type,Culprit),
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).
%------
% obsolete TLS
instantiation_error(Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(instantiation_error,
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).
instantiation_error(Predicate,Arg,State):- 
	xsb_backtrace(Bt),
	throw(error(instantiation_error,
	      (' in arg ',Arg,' of predicate ',Predicate,': must be ',State),Bt)).
%------
% Misc Errors (nee aborts)
misc_error(Message):- 
	xsb_backtrace(Bt),
	throw(error(misc_error,Message,Bt)).

%------
permission_error(Op,Obj_type,Culprit,Predicate):- 
	xsb_backtrace(Bt),
	throw(error(permission_error(Op,Obj_type,Culprit),(' in ',Predicate),Bt)).
%------
representation_error(Flag,Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(representation_error(Flag),
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).
%------
resource_error(Flag,Predicate):- 
	xsb_backtrace(Bt),
	throw(error(resource_error(Flag),
	                             (' in predicate ',Predicate),Bt)).
%------
syntax_error(Message):- 
	xsb_backtrace(Bt),
	throw(error(syntax_error,Message,Bt)).
%------
system_error(Flag,Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(system_error(Flag),
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).
%------
table_error(Message):- 
	xsb_backtrace(Bt),
	throw(error(table_error,Message,Bt)).

%------
abort_on_thread_cancel:- 
	xsb_thread_self(Id),
	throw(error(thread_cancel,Id,[[]])).

%------
type_error(Valid_type,Culprit,Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(type_error(Valid_type,Culprit),
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).


%--------------------------------
% These checks can be reused for various types of ISO compatability.
% atom, number, integer, non-negative integer, nonvar, nonvar_list, 
% atom_list.

%-------------
% Checks that a term is an atom.
check_atom(Term,Predicate,Arg) :- 
	(atom(Term) -> 
	    true
	 ;  type_error(atom,Term,Predicate,Arg) ).

%-------------
check_number(Term,Predicate,Arg) :- 
	(number(Term) -> 
	    true
	 ;  type_error(number,Term,Predicate,Arg) ).

%-------------
check_integer(Term,Predicate,Arg) :- 
	(integer(Term) -> 
	    true
	 ;  type_error(integer,Term,Predicate,Arg) ).

%-------------
check_nonneg_integer(Term,Predicate,Arg) :- 
	(integer(Term), Term >= 0 -> 
	    true
	 ;  domain_error(nonNegativeInteger,Term,Predicate,Arg) ).

%-------------
check_callable(Term,Predicate,Arg):- 
	(callable(Term) -> 
	    true
	 ;  type_error(callable_term,Term,Predicate,Arg) ).


%-------------
% Checks that a term is ground
check_ground(Term,Predicate,Arg) :- 
	(ground(Term) -> 
	    true
	 ;  instantiation_error(Predicate,Arg,ground) ).

%-------------
% Checks that a term is not a variable
check_nonvar(Term,Predicate,Arg) :- 
	(var(Term) -> 
	    instantiation_error(Predicate,Arg,nonvar)
             ;  true).

check_one_thread(Op,Obj_type,Predicate):- 
	stat_flag(NUM_THREADS, Value),
	(Value > 1 -> 
	    misc_error(('Operation ',Op,' on ',Obj_type,
	                 ' is not permitted when more than one thread is active (',
			 Predicate,')') )
         ; true).
	
%-------------
% Checks that a term is a variable
check_var(Term,Predicate,Arg) :- 
	(var(Term) -> 
	    true
             ;  type_error(variable,Term,Predicate,Arg) ).

%-------------

% Checks that Term is a list containing no variable elements
check_nonvar_list(Term,Predicate,Arg):- 
	check_nonvar(Term,Predicate,Arg),
	(check_nonvar_list1(Term,Predicate,Arg) -> 
	    true
	 ;  domain_error(list,Term,Predicate,Arg)).
	    
check_nonvar_list1([],_Predicate,_Arg).
check_nonvar_list1([H|T],Predicate,Arg):- 
	(nonvar(H) -> 
	    check_nonvar_list1(T,Predicate,Arg)
	; 
	    instantiation_error(Predicate,Arg)).

% Checks that Term is either an atom or a list all of whose elements
% are atoms.  This is how ptoc_longstring should be checked. 
check_atom_list(Term,Predicate,Arg):- 
	check_nonvar(Term,Predicate,Arg),
	(( atom(Term) 
	 ; check_atom_list1(Term,Predicate,Arg)) -> 
	    true
	 ;  domain_error(list_of_atom,Term,Predicate,Arg)).
	    
check_atom_list1([],_Predicate,_Arg).
check_atom_list1([H|T],Predicate,Arg):- 
	(atom(H) -> 
	    check_atom_list1(T,Predicate,Arg)
	; 
	    instantiation_error(Predicate,Arg)).

%-------------
end_of_file.

get_sys_error_description(error(Error,Msg,_Backtrace), ExceptionDesc) :-
	get_sys_error_description(error(Error,Msg), ExceptionDescription).

/* messages are handled via abort/1.  */
/* Obsolete ..
| default_sys_error_handler('_$abort_ball'(Backtrace)):- 
| 	% here is where we may do something abt backtraces.
| 	get_sys_error_description('_$abort_ball'(Backtrace),NewMsg),
| 	messageln(NewMsg,STDERR),
| 	xsb_flag(backtrace_on_error,BT),
| 	(BT == on
| 	 ->	print_backtrace(Backtrace)
| 	 ;	true
| 	).
| default_sys_error_handler('_$abort_ball'(Msg,Backtrace)) :-
| 	% here is where we may do something abt backtraces.
| 	get_sys_error_description('_$abort_ball'(Msg, Backtrace),NewMsg),
| 	messageln(NewMsg,STDERR),
| 	xsb_flag(backtrace_on_error,BT),
| 	(BT == on
| 	 ->	print_backtrace(Backtrace)
| 	 ;	true
| 	).
*/
/* Obsolete 
| get_sys_error_description('_$abort_ball'(AbortMsgs, Backtrace), 
| 	                  ExceptionDescription, BacktraceList) :- !,
| 	get_sys_error_description('_$abort_ball'(AbortMsgs, Backtrace), 
| 	                          ExceptionDescription),
| 	get_backtrace(Backtrace, BacktraceList).
| get_sys_error_description('_$abort_ball'(Backtrace),'Aborting...',BacktraceList) :- 
|	!,
| 	get_backtrace(Backtrace, BacktraceList).
*/
/* Obsolete
| get_sys_error_description('_$abort_ball'(AbortMsgs, _Backtrace), ExceptionDesc) :- 
| 	ExceptionDesc = AbortMsgs.
| get_sys_error_description('_$abort_ball'(_Backtrace), 'Aborting...'). 
*/

