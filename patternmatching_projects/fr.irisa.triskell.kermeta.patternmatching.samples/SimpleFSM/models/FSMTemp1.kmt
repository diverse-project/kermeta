@mainClass "FSMTemp::Main"
@mainOperation "main"

package FSMTemp; 

require kermeta

require "platform:/resource/fr.irisa.triskell.kermeta.patternmatching.samples/SimpleFSM/metamodels/FSMMMPattern.ecore"
//require "platform:/resource/fr.irisa.triskell.kermeta.pattern/samples/SimpleFSM/metamodels/patternframework.ecore"
require "platform:/resource/fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/metamodel/PatternFramework.ecore"
 
require "platform:/resource/fr.irisa.triskell.kermeta.ecore/src/kermeta/ecore.kmt"

using kermeta::standard 
using kermeta::persistence 
 
using ecore  
class Main
{
    operation main() : Void is do 
        var patternTemplate : patternframework::ModelPattern init patternframework::ModelPattern.new
//        template.constraints := pattern::PConstraint.new
        patternTemplate.featureIdentifier.add("name")

        var pmodel : patternframework::PModel init patternframework::PModel.new
        patternTemplate.pattern := pmodel
        pmodel.content := OrderedSet<patternframework::PObject>.new
                
        // Creating structural model
		var s3 : pattern::FSM::State init pattern::FSM::State.new
		s3.name := "A"	
		var t33: pattern::FSM::Transition init pattern::FSM::Transition.new
		t33.source := s3
		t33.target := s3		
		
		// Adding  elements to the structural part of the pattern
		pmodel.content.add(s3)
		pmodel.content.add(t33)		
		// Setting roles
		var role1 : patternframework::PRole init patternframework::PRole.new
		role1.name := "cyclicTransition"
		role1.player := t33		
		var role2 : patternframework::PRole init patternframework::PRole.new
		role2.name := "targetState"
		role2.player := s3				
		patternTemplate.pattern.roles.add(role1)
		patternTemplate.pattern.roles.add(role2)		

        // Persisting the model		
		stdio.writeln("Creating file ../models/FSMMPattern_structure.xmi ")
		var repository : EMFRepository init EMFRepository.new
		var resource1 : Resource init repository.createResource("FSMMPattern_structure.xmi",
         "platform:/resource/fr.irisa.triskell.kermeta.patternmatching.samples/SimpleFSM/metamodels/FSMMMPattern.ecore")		
        pmodel.content.each { o | resource1.instances.add(o) } 
		resource1.save()			
		
		stdio.writeln("Creating file ../models/FSMMPattern_frame.xmi ")		
		var resource2 : Resource init repository.createResource("FSMMPattern_frame.xmi",
         "platform:/resource/fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/metamodel/PatternFramework.ecore")		
		resource2.instances.add(patternTemplate)

		
		resource2.save()						
    end
}