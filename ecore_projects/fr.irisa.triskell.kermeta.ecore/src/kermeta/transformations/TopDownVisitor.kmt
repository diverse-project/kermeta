/* $Id: TopDownVisitor.kmt,v 1.1 2006-04-05 12:15:10 vmahe Exp $
 * File : TopDownVisitor.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Apr 3, 2006
 * Authors : 
 *  Vincent Mahé	<vmahe@irisa.fr>
 * 
 */

/* This package contains operations code for Visitor Pattern "top-down" strategy.
 You should use it through Patterns4Ecore.kmt 'addTopDownVisitor' operation */
package TopDownVisitor;

require "Visitors.kmt"
require kermeta
require "../ecore.kmt"
require "../helpers/EcoreHelper.kmt"
require "Tools.kmt"

using kermeta::standard
using ecore

using EcoreVisitors

class TopDownVisitorPattern inherits VisitorPattern
{
	reference mainVisitor : EClass
	
	// the main method to be rewrited from Visitor class
	/**
	 * the Top-Down approach consist in adding navigation code to the 'accept' methods
	 * for the elements which have sub-elements, in a "super" concrete visitor. This
	 * visitor would be inherited by the real visitors which can have only the specific
	 * code devoted to the targeted treatment.
	 * Use the "super.accept()" command to include the navigation behavior in your visitor.
	 */
    method applyPattern(pack : EPackage, visitableInterface : EClass, abstractVisitor : EClass,
			visitReturnType : EClassifier) is do
		
		mainVisitor := addMainVisitor(pack, visitableInterface)
		
		// TODO : add the management of subPackages
		
		// we reuse the Visitor.applyPattern()
        super(pack, visitableInterface, abstractVisitor, visitReturnType)
        
        // we generate the code of MainVisitor 'visit' methods
        pack.eClassifiers.each{ eClassifier | 
            var eClass : EClass
            eClass ?= eClassifier
            if eClass != void then
            	if (eClass != visitableInterface ) and (eClass != abstractVisitor )
            	then
            		processClass(eClass, visitableInterface, abstractVisitor, visitReturnType)
    			end
        	end
        }
    end
    
    // add the main concrete visitor to the 'visitors' package
    operation addMainVisitor(pack : EPackage, visitableInterface : EClass) : EClass is do
		var superVisitor : EClass init EClass.new
		superVisitor.name := "TopDownVisitor"
		superVisitor.eSuperTypes.add(visitableInterface)
		superVisitor.~abstract := true
        specPack.eClassifiers.add(superVisitor)
        result := superVisitor
    end
    
    // processes package components and creates the package "visit" method
    operation processSubPackage(p : EPackage, visitableInterface : EClass, abstractVisitor : EClass,
			visitReturnType : EClassifier) is do
        // TODO : not yet implemented
    	
    end
    
    // TODO : Java code not yet generated ....
    // processes the class composition and creates the class 'visit' code in MainVisitor
    operation processClass(eClass : EClass, visitableInterface : EClass, abstractVisitor : EClass,
			visitReturnType : EClassifier) is do
		
    	if(eClass.eAllSuperTypes.exists{e | e.equals(visitableInterface)}) then
    		
			var kermetaBody : String init ""
			if self.generateKermetaCode then	// add the kermeta code for the implementation
				// superType references
				eClass.eAllReferences.each{ eRef |
					kermetaBody.append(processReference(eClass, eRef, visitableInterface,
						abstractVisitor, visitReturnType))
				}
				// current Type references
				eClass.eReferences.each{ eRef |
					kermetaBody.append(processReference(eClass, eRef, visitableInterface,
						abstractVisitor, visitReturnType))
				}
			end
			// the visitFoo methods in the visitor
    		var visitFoo : EOperation init addVisitFooOperation(abstractVisitor, 
    				eClass, eClass.name, visitReturnType)
			if self.generateKermetaCode and kermetaBody != "" then
    			helper.addAnnotation(visitFoo,"kermeta", "body", kermetaBody)
    		end
    		mainVisitor.eOperations.add(visitFoo)
    	end
    	
    end
    
    // write the specific code of compositions
    operation processReference(c : EClass, r : EReference, visitableInterface : EClass,
			abstractVisitor : EClass, visitReturnType : EClassifier) : String is do
    	
		var body : String init ""
		if r.containment then
			body.append("\n// Autogenerated Top-Down Visitor action for " + r.eType.name)
			body.append("\neAllReferences.each{ eRef | \n")
			body.append("	if eRef.eType.name == \"" + r.eType.name + "\" then accept(self) end\n")
			body.append("}")
		end
		result := body
    end
}