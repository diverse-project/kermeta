/* $Id: Patterns4Ecore.kmt,v 1.5 2006-04-12 07:28:40 vmahe Exp $
 * File : Patterns4Ecore.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Sep 08, 2005
 * Authors : 
 *  Didier Vojtisek <dvojtise@irisa.fr>
 *  Damien Pollet   <dpollet@irisa.fr>
 *	Vincent Mahé	<vmahe@irisa.fr>
 * 
 */
//@mainClass "EcorePattern::Patterns"
//@mainOperation "main"


package EcoreTransformations;

require kermeta
require "../ecore.kmt"
require "../helpers/EcoreHelper.kmt"
require "TopDownVisitor.kmt"
require "Visitors.kmt"
require "Builders.kmt"
require "ReturnBuilder.kmt"
require "Observers.kmt"

using kermeta::standard
using ecore
using EcoreVisitors
using EcoreBuilders
using EcoreObservers
using TopDownVisitor
using ReturnBuilder

class Patterns4Ecore
{
    
    reference helper : EcoreHelpers::EcoreHelper
    
    attribute generateJavaCode : Boolean
    attribute generateKermetaCode : Boolean
    
    operation initialize() is do
		helper := EcoreHelpers::EcoreHelper.new
    	helper.initialize
    	generateJavaCode := true
    	generateKermetaCode := true
    	
	end

	operation addCommand() is do
       	// need to be implemented ...
    end

	/* --------------- Visitor -------------------------------*/
	/** create a Visitor for each of the class of the package
	 and return a "visitors" package containing autogenerated new classes */    
    operation addVisitor(pack : EPackage, visitReturnType : EClassifier) : EPackage is do
    	var specPack : EPackage
    	var visitor : VisitorPattern init VisitorPattern.new
    	visitor.initialize
    	visitor.generateJavaCode := generateJavaCode
    	visitor.generateKermetaCode := generateKermetaCode
    	specPack := visitor.addVisitor(pack, visitReturnType)
		
		result := specPack
    end
	/* --------------- another Visitor strategy ---------------------*/
	/** create a Visitor for each of the class of the package
	 and return a "visitors" package containing autogenerated new classes */    
    operation addTopDownVisitor(pack : EPackage, visitReturnType : EClassifier) : EPackage is do
    	var specPack : EPackage
    	var visitor : TopDownVisitorPattern init TopDownVisitorPattern.new
    	visitor.initialize
    	visitor.generateJavaCode := generateJavaCode
    	visitor.generateKermetaCode := generateKermetaCode
    	specPack := visitor.addVisitor(pack, visitReturnType)
		
		result := specPack
    end
     
	/* --------------- Builder -------------------------------*/    
    /** create a Builder for each of the concrete class of the package
	 and return a "builders" package containing autogenerated new classes */
    operation addBuilder(pack : EPackage) : EPackage is do
    	var specPack : EPackage
    	var builder : BuilderPattern init BuilderPattern.new
    	builder.initialize
    	builder.generateJavaCode := generateJavaCode
    	builder.generateKermetaCode := generateKermetaCode
    	specPack := builder.addBuilder(pack)
		
		result := specPack
    end
 	/* --------------- another Builder -------------------------------*/    
    /** create a "create" for each of the concrete class of the package
     which return the created object. The Builder return a "builders" package */
    operation addReturnBuilder(pack : EPackage) : EPackage is do
    	var specPack : EPackage
    	var builder : ReturnBuilderPattern init ReturnBuilderPattern.new
    	builder.initialize
    	builder.generateJavaCode := generateJavaCode
    	builder.generateKermetaCode := generateKermetaCode
    	specPack := builder.addBuilder(pack)
		
		result := specPack
    end
    
    
    /* --------------- Observer -------------------------------*/    
   
    operation addObserver(pack : EPackage,
						concreteSubject : EClass,
						concreteObserver : EClass) is do
    	var observer : ObserverPattern init ObserverPattern.new
    	observer.initialize
    	observer.generateJavaCode := generateJavaCode
    	observer.generateKermetaCode := generateKermetaCode
    	observer.addObserver(pack, concreteSubject, concreteObserver)
    end
}