/* $Id: Observers.kmt,v 1.1 2006-04-05 12:15:10 vmahe Exp $
 * File : Visitors.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Mar 28, 2006
 * Authors : 
 *  Didier Vojtisek <dvojtise@irisa.fr>
 *  Damien Pollet   <dpollet@irisa.fr>
 *  Vincent Mahé	<vmahe@irisa.fr>
 * 
 */

/* This package contains operations code for Visitor Patterns
 You should use Patterns4Ecore.kmt operations for applying Patterns */
package EcoreObservers;

require kermeta
require "../ecore.kmt"
require "../helpers/EcoreHelper.kmt"
require "Tools.kmt"

using kermeta::standard
using ecore

class ObserverPattern
{
    
    reference helper : EcoreHelpers::EcoreHelper
    
    attribute generateJavaCode : Boolean
    attribute generateKermetaCode : Boolean
    
   	attribute tools : EcoreTools::Tools
    	
    operation initialize() is do
		helper := EcoreHelpers::EcoreHelper.new
    	helper.initialize
    	generateJavaCode := true
    	generateKermetaCode := true
    	
    	tools := EcoreTools::Tools.new
    	
	end

	// TODO : write the official comment .....
	/* --------------- Visitor -------------------------------*/
	/** create a Visitor for each of the class of the package
	 and return a "visitors" package containing autogenerated new classes */    
    
    /* --------------- Observer -------------------------------*/    
   
    operation addObserver(pack : EPackage, concreteSubject : EClass, concreteObserver : EClass) is do
		
        // create super classes/interfaces
        var subject : EClass 
        var observer : EClass
        subject ?= pack.eClassifiers.detect{c | c.name.equals("Subject")}
       	observer ?= pack.eClassifiers.detect{c | c.name.equals("Observer")}
    	if subject.isVoid and observer.isVoid then
	    	subject := EClass.new
			subject.name := "Subject"
			subject.~abstract := true
	        pack.eClassifiers.add(subject)
	        	       
    		observer := EClass.new
         	observer.name := "Observer"
        	observer.interface := true
        	pack.eClassifiers.add(observer)
        	
        	// create and add Observer's operations	        
	        var notify : EOperation init EOperation.new
	        var s : EParameter init EParameter.new
	
			notify.name := "update"
			s.name := "s"
			s.eType := subject
			notify.eParameters.add(s)
			observer.eOperations.add(notify)
                		
			// create and add Subject's operations
			var attach : EOperation init EOperation.new
			var o : EParameter init EParameter.new
			
	        attach.name := "attach"
	        o.name := "o" 
	        o.eType := observer
	        attach.eParameters.add(o)
	        subject.eOperations.add(attach)
	        
			var detach : EOperation init EOperation.new
			o := EParameter.clone(o)  
	        o.name := "o" 
	        o.eType := observer      
			detach.name := "detach"
			detach.eParameters.add(o)
			subject.eOperations.add(detach)
	        
	        var notifyAll : EOperation init EOperation.new
	
			notifyAll.name := "notifyall"
			subject.eOperations.add(notifyAll)
			
			if self.generateJavaCode then
				// add the java code for the implementation
				helper.addAnnotation(notifyAll,"http://www.eclipse.org/emf/2002/GenModel","body",
					"java.util.Iterator it = getObservers().iterator();\n" + 
					"while(it.hasNext()){\n" +
					"	((Observer)it.next()).update(this);\n" +
					"}")
			end
			if self.generateKermetaCode then
				// add the kermeta code for the implementation
				helper.addAnnotation(notifyAll,"kermeta","body",
					"observers.each{o| o.update}")
			end
			
			// create the association: Subject --> *Observer
			var observers : EReference init EReference.new
			observers.name := "observers"
			observers.eType := observer
			observers.lowerBound := 0
			observers.upperBound := -1
			subject.eStructuralFeatures.add(observers)
		end 
		// add Subject and Observer as supertypes
		concreteSubject.eSuperTypes.add(subject)
		concreteObserver.eSuperTypes.add(observer)
		
    end
}