/* $Id: Builders.kmt,v 1.4 2008-02-21 15:35:36 dvojtise Exp $
 * File : Builders.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Mar 28, 2006
 * Authors : 
 *  Didier Vojtisek <dvojtise@irisa.fr>
 *  Damien Pollet   <dpollet@irisa.fr>
 *  Vincent Mahï¿½	<vmahe@irisa.fr>
 * 
 */


/* This package contains operations code for Visitor Patterns
 You should use Patterns4Ecore.kmt operations for applying Patterns */
package EcoreBuilders;

require kermeta
require "../helpers/EcoreHelper.kmt"
require "Tools.kmt"

using kermeta::standard
using ecore

class BuilderPattern
{
    
    reference helper : EcoreHelpers::EcoreHelper
    
    attribute generateJavaCode : Boolean
    attribute generateKermetaCode : Boolean
    
   	attribute tools : EcoreTools::Tools
    	
    operation initialize() is do
		helper := EcoreHelpers::EcoreHelper.new
    	helper.initialize
    	helper.loadEcoreAsModel
    	generateJavaCode := true
    	generateKermetaCode := true
    	
    	tools := EcoreTools::Tools.new
    	
	end

	/* --------------- Builder -------------------------------*/    
    /** create a Builder for each of the concrete class of the package
	 and return a "builders" package containing autogenerated new classes */
    operation addBuilder(pack : EPackage) : EPackage is do
		
    	// create the specialized package for separate storage of pattern new classes
    	var specPack : EPackage
    	specPack := tools.getSpecializedPackage("builders", pack)
    	
    	// create super classes/interfaces
        var abstractfactory : EClass init EClass.new
        abstractfactory.name := "AbstractFactory"
        abstractfactory.interface := false
        abstractfactory.~abstract := true
        specPack.eClassifiers.add(abstractfactory)
        
        applyPattern(pack, abstractfactory)
        
		result := specPack
    end
    
    operation applyPattern (pack : EPackage, abstractfactory : EClass) is do
        // for each of the concrete classes of this package except for the Factory
        pack.eClassifiers.each{ eClassifier | 
            var eClass : EClass
            eClass ?= eClassifier
            if eClass != void then
            	if eClass != abstractfactory then
            		if (eClass.interface == false) and (eClass.~abstract == false) then
            			addCreateOperation(eClass, abstractfactory)
            		end
        		end
        	end
        }
    end
    operation addCreateOperation (eClass : EClass, abstractfactory : EClass) is do
		var builOp : EOperation init EOperation.new
		builOp.name := "create" + eClass.name
//		builOp.eType := eClass		// overided by the next line
		builOp.eType := helper.getEcoreClassifierByQualifiedName("ecore::EObject")
		helper.addAnnotation(builOp,"kermeta","isAbstract","true")
		abstractfactory.eOperations.add(builOp)
    end
}