/* $Id: ContainmentBasedActionPerformer_KmtPrinter_Ecore.kmt,v 1.2 2008-03-05 10:52:12 cfaucher Exp $
 * Creation date: March 04, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *
 */

package ecore;
 
require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "../ecore_behavior.kmt"
require "EcoreHelper.kmt"
require "ContainmentBasedActionPerformer_Ecore.kmt"

using ecore
using kermeta::language::structure
using kermeta::utils
using EcoreHelpers

aspect class EObject {
	operation kmtPrinter() : String is do
		result := ""
	end
}

aspect class EPackage {
	method kmtPrinter() : String is do
		var content : StringBuffer init StringBuffer.new
		if not self.container.isVoid() then 
			content.append("package " + self.name + " {\n\n")
		end
		
		self.eachOwnedElement{ e |
			content.append(e.kmtPrinter() + "\n")
		}
		
		if not self.container.isVoid() then
			content.append("}\n")
		end
		result := content.toString()
	end
}

aspect class EClass {
	method kmtPrinter() : String is do
		var content : StringBuffer init StringBuffer.new
		content.append("aspect class " + self.name + " {\n")
		
		if self.eSuperTypes.size()>0 then
			content.append("\tmethod")
		else
			content.append("\toperation")
		end
		
		content.append(" eachOwnedElement(func : <Object -> Object>) : Void")
		
		if self.eSuperTypes.size()>0 then
			 content.append(" from " + self.eSuperTypes.one.name)
		end
		
		content.append(" is do\n")
		
		if self.eSuperTypes.size()>0 then
			content.append("\t\tsuper(func)\n")
		end
		
		self.eachOwnedElement{ e |
			content.append(e.kmtPrinter() + "\n")
		}
		result := content.append("\n\tend\n}\n").toString()
	end
}

aspect class EReference {
	method kmtPrinter() : String is do
		var content : StringBuffer init StringBuffer.new

		content.append("\t\t")
		
		if self.upperBound==1 then
			content.append("func(")
		end
		
		content.append("self." + EcoreHelper.new.getMangledIdentifier(self.name))
				if self.upperBound==1 then
			content.append(")")
		end
		
		if self.upperBound==-1 then
			content.append(".each{ e |\n")
			content.append("\t\t\tfunc(e)")
			content.append("\n\t\t}")
		end

		result := content.toString()
	end
}
