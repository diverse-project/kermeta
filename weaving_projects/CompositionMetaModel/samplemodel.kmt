@mainClass "ecore::Main"
@mainOperation "main"


package ecore;


require kermeta
require "CmodelSimple.kmt"

using kermeta::standard

class Main
{
    operation main() : Void is do 
        var model1 : EPackage init createModel1
        var model2 : EPackage init createModel2
        
        stdio.writeln("Input model 1 : ")
        printModel(model1) 
        
        
        stdio.writeln("\nInput model 2 : ")
        printModel(model2)
        
        
        var ec : EClass init EClass.new
        
        
        
        
        var merged : EPackage
        stdio.writeln("\nMerging... ")
        merged ?= model1.merge(model2)
        stdio.writeln("\nMerged model: " + merged.toString)
        
        //merged := EPackage.clone(model1)
        
        printModel(merged) 
        // */
      
        
    end
    
    operation printModel(p : EPackage) is do
    	
    	// Print the package
    	stdio.writeln("package " + p.name)
    	// Print the classes
    	p.eClassifiers.each{ e | 
    		var c : EClass		c ?= e
    		var d : EDataType	d ?= e
    		if c != void then
    			stdio.writeln("  class " + c.name.toString + " abstract = " + c.~abstract.toString)
    			// Print Attributes and References
    			c.eStructuralFeatures.each{ p | 
    				var s : EAttribute		s ?= p
    				var r : EReference		r ?= p
    				if r != void then 
    					stdio.write("    ref  " + r.name.toString)
    					stdio.write(" : " + r.eType.name)
    					if r.eOpposite != void then 
    						stdio.write(" opposite of " + r.eOpposite.name)
    					end
    					stdio.writeln("")
    				else
    					stdio.write("    attr " + s.name.toString)
    					stdio.writeln(" : " + s.eType.name)
    				end
    			}
    			//Print Operations
    			c.eOperations.each{ o | 
    				stdio.write("    op   " + o.name + "(")
    				o.eParameters.each{ p | 
    					stdio.write(p.name + " : " + p.eType.name + " ")
    				}
    				stdio.write(")")
    				if o.eType != void then
    					stdio.write(" : " + o.eType.name)
    				end
    				stdio.writeln("")
    			}
    			
    			
    		else
    			stdio.writeln("  datatype " + d.name)
    		end
    	
    	}
    
    end
    
    
    operation createModel1() : EPackage is do
    	
    	var strType : EDataType init EDataType.new
    	strType.name := "String" 
    	
    	var intType : EDataType init EDataType.new
    	intType.name := "int" 
    	
    	var m1 : EPackage init EPackage.new
    	m1.name := "Model 1"
    	
    	var c1 : EClass init EClass.new
    	c1.name := "Customer"
    	c1.~abstract := true
    	
    	m1.eClassifiers.add(c1)
    	m1.eClassifiers.add(strType)
    	m1.eClassifiers.add(intType)
    	
    	var a1 : EAttribute init EAttribute.new
    	a1.name := "name"
    	a1.eType := strType
    	a1.eContainingClass := c1 
    	
    	var a2 : EAttribute init EAttribute.new
    	a2.name := "CUSTid"
    	a2.eType := intType
    	a2.eContainingClass := c1 
    	
    	var o1 : EOperation init EOperation.new
    	o1.name := "addAmount"
    	o1.eContainingClass := c1
    	
    	var o2 : EOperation init EOperation.new
    	o2.name := "update"
    	o2.eContainingClass := c1
    	
    	var p21 : EParameter init EParameter.new
    	p21.name := "name"
    	p21.eType := strType
    	p21.eOperation := o2
    	
    	var o3 : EOperation init EOperation.new
    	o3.name := "update"
    	o3.eContainingClass := c1
    	
    	var p31 : EParameter init EParameter.new
    	p31.name := "custID"
    	p31.eType := intType
    	p31.eOperation := o3
    	
    	result := m1
    	
    end
    
    
    
    operation createModel2() : EPackage is do
    	
    	var strType : EDataType init EDataType.new
    	strType.name := "String" 
    	
    	var intType : EDataType init EDataType.new
    	intType.name := "int" 
    	
    	var m1 : EPackage init EPackage.new
    	m1.name := "Model 1"
    	
    	var c1 : EClass init EClass.new
    	c1.name := "Customer"
    	c1.~abstract := true 
    	
    	m1.eClassifiers.add(c1)
    	m1.eClassifiers.add(strType)
    	m1.eClassifiers.add(intType)
    	
    	var a1 : EAttribute init EAttribute.new
    	a1.name := "name"
    	a1.eType := strType
    	a1.eContainingClass := c1 
    	
    	var o2 : EOperation init EOperation.new
    	o2.name := "update"
    	o2.eContainingClass := c1
    	
    	var p21 : EParameter init EParameter.new
    	p21.name := "name"
    	p21.eType := strType
    	p21.eOperation := o2
    	
    	var c2 : EClass init EClass.new
    	c2.name := "Account"
    	m1.eClassifiers.add(c2)
    	
    	var a2 : EAttribute init EAttribute.new
    	a2.name := "accID"
    	a2.eType := intType
    	a2.eContainingClass := c2 
    	
    	var r1 : EReference init EReference.new
    	var r2 : EReference init EReference.new
    	r1.name := "CustAcc"	r2.name := "ActAcc"
    	r1.eOpposite := r2		r2.eOpposite := r1
    	r1.eType := c2			r2.eType := c1
    	r1.eContainingClass := c1
    	r2.eContainingClass := c2
    	r1.containment := true  
    	
    	result := m1
    	
    end
}