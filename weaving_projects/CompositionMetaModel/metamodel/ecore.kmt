package ecore;

require kermeta

using kermeta::reflection
using kermeta::standard

class EAttribute inherits EStructuralFeature
{
	attribute iD : EBoolean
	property eAttributeType : EDataType[1..1]
		getter is do
			//TODO: implement getter for derived property eAttributeType
		end
		setter is do
			//TODO: implement setter for derived property eAttributeType
		end
}
class EAnnotation inherits EModelElement
{
	attribute source : EString
	attribute details : EStringToStringMapEntry[0..*]
	reference eModelElement : EModelElement#eAnnotations
	attribute contents : EObject[0..*]
	reference references : EObject[0..*]
}
class EClass inherits EClassifier
{
	attribute ~abstract : EBoolean
	attribute interface : EBoolean
	reference eSuperTypes : EClass[0..*]
	attribute eOperations : EOperation[0..*]#eContainingClass
	property eAllAttributes : EAttribute[0..*]
		getter is do
			//TODO: implement getter for derived property eAllAttributes
		end
		setter is do
			//TODO: implement setter for derived property eAllAttributes
		end
	property eAllReferences : EReference[0..*]
		getter is do
			//TODO: implement getter for derived property eAllReferences
		end
		setter is do
			//TODO: implement setter for derived property eAllReferences
		end
	property eReferences : EReference[0..*]
		getter is do
			//TODO: implement getter for derived property eReferences
		end
		setter is do
			//TODO: implement setter for derived property eReferences
		end
	property eAttributes : EAttribute[0..*]
		getter is do
			//TODO: implement getter for derived property eAttributes
		end
		setter is do
			//TODO: implement setter for derived property eAttributes
		end
	property eAllContainments : EReference[0..*]
		getter is do
			//TODO: implement getter for derived property eAllContainments
		end
		setter is do
			//TODO: implement setter for derived property eAllContainments
		end
	property eAllOperations : EOperation[0..*]
		getter is do
			//TODO: implement getter for derived property eAllOperations
		end
		setter is do
			//TODO: implement setter for derived property eAllOperations
		end
	property eAllStructuralFeatures : EStructuralFeature[0..*]
		getter is do
			//TODO: implement getter for derived property eAllStructuralFeatures
		end
		setter is do
			//TODO: implement setter for derived property eAllStructuralFeatures
		end
	property eAllSuperTypes : EClass[0..*]
		getter is do
			//TODO: implement getter for derived property eAllSuperTypes
		end
		setter is do
			//TODO: implement setter for derived property eAllSuperTypes
		end
	property eIDAttribute : EAttribute
		getter is do
			//TODO: implement getter for derived property eIDAttribute
		end
		setter is do
			//TODO: implement setter for derived property eIDAttribute
		end
	attribute eStructuralFeatures : EStructuralFeature[0..*]#eContainingClass
	operation isSuperTypeOf(someClass : EClass) : EBoolean is do
		//TODO: implement operation isSuperTypeOf
	end
	operation getFeatureCount() : EInt is do
		//TODO: implement operation getFeatureCount
	end
	operation getEStructuralFeature(featureID : EInt) : EStructuralFeature is do
		//TODO: implement operation getEStructuralFeature
	end
	operation getFeatureID(feature : EStructuralFeature) : EInt is do
		//TODO: implement operation getFeatureID
	end
	operation getEStructuralFeatureByName(featureName : EString) : EStructuralFeature is do
		//TODO: implement operation getEStructuralFeature
	end
	
	method getSignature() : Signature is do
		if signature == void then 
			var s : ClassSignature init ClassSignature.new
			s.cls := self
			signature := s
		end
		result := signature
	end
	
}
abstract class EClassifier inherits ENamedElement, Mergeable
{
	attribute instanceClassName : EString
	attribute instanceClass : EJavaClass
	attribute defaultValue : EJavaObject
	reference ePackage : EPackage#eClassifiers
	operation isInstance(object : EJavaObject) : EBoolean is do
		//TODO: implement operation isInstance
	end
	operation getClassifierID() : EInt is do
		//TODO: implement operation getClassifierID
	end
	
	method sigEqual(other : Mergeable) : Boolean is do
		var t1 : Type init self.getMetaClass
		var t2 : Type init other.getMetaClass
		
		if t1 == t2 then
			if self.getSignature == other.getSignature then
				result := true
			else
				result := false
			end
		else
			result := false
		end 
	end
	
	method getSignature() : Signature is do
		if signature == void then 
			var s : StringSignature init StringSignature.new
			s.sign := name
			signature := s
		end
		result := signature
	end
}
class EDataType inherits EClassifier
{
	attribute serializable : EBoolean
}
class EEnum inherits EDataType
{
	attribute eLiterals : EEnumLiteral[0..*]#eEnum
	operation getEEnumLiteral(name : EString) : EEnumLiteral is do
		//TODO: implement operation getEEnumLiteral
	end
	operation getEEnumLiteralByID(~value : EInt) : EEnumLiteral is do
		//TODO: implement operation getEEnumLiteral
	end
}
class EEnumLiteral inherits ENamedElement
{
	attribute ~value : EInt
	attribute instance : EEnumerator
	reference eEnum : EEnum#eLiterals
}
class EFactory inherits EModelElement
{
	reference ePackage : EPackage[1..1]#eFactoryInstance
	operation create(eClass : EClass) : EObject is do
		//TODO: implement operation create
	end
	operation createFromString(eDataType : EDataType, literalValue : EString) : EJavaObject is do
		//TODO: implement operation createFromString
	end
	operation convertToString(eDataType : EDataType, instanceValue : EJavaObject) : EString is do
		//TODO: implement operation convertToString
	end
}
abstract class EModelElement inherits EObject
{
	attribute eAnnotations : EAnnotation[0..*]#eModelElement
	operation getEAnnotation(source : EString) : EAnnotation is do
		//TODO: implement operation getEAnnotation
	end
	
	operation getmatchingElements(elements : Collection<EModelElement>) : seq EModelElement[0..*] is do
		var e1 : Mergeable	e1 ?= self
		if e1 == void then
			result := Sequence<EModelElement>.new
		else
			result := elements.select{ e | 
				var e2 : Mergeable	e2 ?= e
				if e2 == void then false else e1.getSignature ==  e2.getSignature end
			}
		end
		
	end
	
	operation getClassFromType(t : Type) : Class is do
		if t.getMetaClass == kermeta::language::structure::PrimitiveType then
			var pt : PrimitiveType		pt ?= t
			result := getClassFromType(pt.instanceType)
		else
			result ?= t
		end
	end
	
	operation getSAttributes() : Collection<Property> is do
		result := getAllProps.select{ p | 
			var c : Class init getClassFromType(p.type)
			not Mergeable.isSubType(c)
		}
	end
	operation getComponents() : Collection<Property> is do
		result := getAllProps.select{ p | 
			var c : Class init getClassFromType(p.type)
			Mergeable.isSubType(c) and
			p.isComposite 
		}
	end
	
	operation getAllProps() : Collection<Property> is do
		var cd : ClassDefinition init getClassDef(self.getMetaClass)
		result := getAllPropertiesOfClass(cd) 
	end
	
	operation isMergeableType(c : Class) : Boolean is do
		result := Mergeable.isSubType(c)
	end
	
		
	operation getAllPropertiesOfClass(cd : ClassDefinition) : Collection<Property> is do
			result := Set<Property>.new
			
			result.addAll(cd.ownedAttribute) 
			
			cd.superType.each{ t | 
				var sc : Class		sc := t
				getAllPropertiesOfClass(getClassDef(sc)).each{ p | 
					if not result.contains(p) then
						result.add(p)
					end
				}
			}
			 
			result := result.select{ k | not k.isDerived }
	end
	
	operation getClassDef(c : Class) : ClassDefinition is do
		result ?= c.typeDefinition
	end
	
}
abstract class ENamedElement inherits EModelElement
{
	attribute name : EString
}
class EObject
{
	operation eClass() : EClass is do
		//TODO: implement operation eClass
	end
	operation eIsProxy() : EBoolean is do
		//TODO: implement operation eIsProxy
	end
	operation eResource() : EResource is do
		//TODO: implement operation eResource
	end
	operation eContainer() : EObject is do
		//TODO: implement operation eContainer
	end
	operation eContainingFeature() : EStructuralFeature is do
		//TODO: implement operation eContainingFeature
	end
	operation eContainmentFeature() : EReference is do
		//TODO: implement operation eContainmentFeature
	end
	operation eContents() : EEList is do
		//TODO: implement operation eContents
	end
	operation eAllContents() : ETreeIterator is do
		//TODO: implement operation eAllContents
	end
	operation eCrossReferences() : EEList is do
		//TODO: implement operation eCrossReferences
	end
	operation eGet(feature : EStructuralFeature) : EJavaObject is do
		//TODO: implement operation eGet
	end
	operation eGetResolved(feature : EStructuralFeature, resolve : EBoolean) : EJavaObject is do
		//TODO: implement operation eGet
	end
	operation eSet(feature : EStructuralFeature, newValue : EJavaObject) : kermeta::standard::~Void is do
		//TODO: implement operation eSet
	end
	operation eIsSet(feature : EStructuralFeature) : EBoolean is do
		//TODO: implement operation eIsSet
	end
	operation eUnset(feature : EStructuralFeature) : kermeta::standard::~Void is do
		//TODO: implement operation eUnset
	end
}
class EOperation inherits ETypedElement, Mergeable
{
	reference eContainingClass : EClass#eOperations
	attribute eParameters : EParameter[0..*]#eOperation
	reference eExceptions : EClassifier[0..*]
	
	method sigEqual(other : Mergeable) : Boolean is do
		var t1 : Type init self.getMetaClass
		var t2 : Type init other.getMetaClass
		
		if t1 == t2 then
			if self.getSignature == other.getSignature then
				result := true
			else
				result := false
			end
		else
			result := false
		end 
	end
	
	method getSignature() : Signature is do
		if signature == void then 
			var s : OperationSignature init OperationSignature.new
			s.op := self
			signature := s
		end
		result := signature
	end
	
}
class EPackage inherits ENamedElement, Mergeable
{
	attribute nsURI : EString
	attribute nsPrefix : EString
	reference eFactoryInstance : EFactory[1..1]#ePackage
	attribute eClassifiers : EClassifier[0..*]#ePackage
	attribute eSubpackages : EPackage[0..*]#eSuperPackage
	reference eSuperPackage : EPackage#eSubpackages
	operation getEClassifier(name : EString) : EClassifier is do
		//TODO: implement operation getEClassifier
	end
	
	method sigEqual(other : Mergeable) : Boolean is do
		var t1 : Type init self.getMetaClass
		var t2 : Type init other.getMetaClass
		
		if t1 == t2 then
			if self.getSignature == other.getSignature then
				result := true
			else
				result := false
			end
		else
			result := false
		end 
	end
	
	
	method getSignature() : Signature is do
		if signature == void then 
			var s : StringSignature init StringSignature.new
			s.sign := name
			signature := s
		end
		result := signature
	end
	
}
class EParameter inherits ETypedElement, Mergeable
{
	reference eOperation : EOperation#eParameters
	
		method sigEqual(other : Mergeable) : Boolean is do
		var t1 : Type init self.getMetaClass
		var t2 : Type init other.getMetaClass
		
		if t1 == t2 then
			if self.getSignature == other.getSignature then
				result := true
			else
				result := false
			end
		else
			result := false
		end 
	end
	
	method getSignature() : Signature is do
		if signature == void then 
			var s : ParameterSignature init ParameterSignature.new
			s.param := self
			signature := s
		end
		result := signature
	end
	
}
class EReference inherits EStructuralFeature, Mergeable
{
	attribute containment : EBoolean
	attribute container : EBoolean
	attribute resolveProxies : EBoolean
	reference eOpposite : EReference
	property eReferenceType : EClass[1..1]
		getter is do
			//TODO: implement getter for derived property eReferenceType
		end
		setter is do
			//TODO: implement setter for derived property eReferenceType
		end
	method sigEqual(other : Mergeable) : Boolean is do
		var t1 : Type init self.getMetaClass
		var t2 : Type init other.getMetaClass
		
		if t1 == t2 then
			if self.getSignature == other.getSignature then
				result := true
			else
				result := false
			end
		else
			result := false
		end 
	end
	
	method getSignature() : Signature is do
		if signature == void then 
			var s : StringSignature init StringSignature.new
			s.sign := name
			signature := s
		end
		result := signature
	end
}
abstract class EStructuralFeature inherits ETypedElement
{
	attribute changeable : EBoolean
	attribute volatile : EBoolean
	attribute transient : EBoolean
	attribute defaultValueLiteral : EString
	attribute defaultValue : EJavaObject
	attribute unsettable : EBoolean
	attribute derived : EBoolean
	reference eContainingClass : EClass#eStructuralFeatures
	operation getFeatureID() : EInt is do
		//TODO: implement operation getFeatureID
	end
	operation getContainerClass() : EJavaClass is do
		//TODO: implement operation getContainerClass
	end
}
abstract class ETypedElement inherits ENamedElement
{
	attribute ordered : EBoolean
	attribute unique : EBoolean
	attribute lowerBound : EInt
	attribute upperBound : EInt
	attribute many : EBoolean
	attribute required : EBoolean
	reference eType : EClassifier
}
class EStringToStringMapEntry
{
	attribute key : EString
	attribute ~value : EString
}


abstract class Mergeable inherits EModelElement
{
	reference signature : Signature[1..1]
	
	
	operation merge(other : Mergeable) : Mergeable is do

		var type : Class init self.getMetaClass 
		result ?= type.new
	
		stdio.writeln("-> MERGE " + self.toString + " AND " + other.toString)
		
		var props : Collection<Property> init self.getAllProps
		
		props.each{ p | 
			
			if Mergeable.isSubType(p.type)  then 
			
					if self.get(p) == void then
						result.~set(p, other.get(p))
					else
						if other.get(p) == void then
							result.~set(p, self.get(p))
						else
						
							if p.upper != 1 then
								var ocol1 : Collection<kermeta::reflection::Object> 	ocol1 ?= self.get(p) 
								var col1 : Collection<EModelElement> init Sequence<EModelElement>.new
								ocol1.each{ k | 
									var m : EModelElement	m ?= k
									col1.add(m)
								}
								var ocol2 : Collection<kermeta::reflection::Object> 	ocol2 ?= other.get(p) 
								var col2 : Collection<EModelElement> init Sequence<EModelElement>.new
								ocol2.each{ k | 
									var m : EModelElement	m ?= k
									col2.add(m)
								}
								col1.each{ me | 
									
									var matching : Collection<EModelElement> init me.getmatchingElements(col2)
									var col : Collection<kermeta::reflection::Object>
									col ?= result.get(p)
									if matching.size == 0 then
										col.add(me)
									else
										matching.each{ me2 | 
											var mergable : Mergeable	mergable ?= me
											var mergable2 : Mergeable	mergable2 ?= me2

											if p.isComposite then
												col.add(mergable.merge(mergable2))
											else
												col.add(mergable)
											end
										}
									end	
								}
								
								col2.each{ me | 
									
									var matching : Collection<EModelElement> init me.getmatchingElements(col1)
									var col : Collection<kermeta::reflection::Object>
									col ?= result.get(p)
									if matching.size == 0 then
										col.add(me)
									end
								}
								
							
								
							else
								var me1 : Mergeable		me1 ?= self.get(p)
								var me2 : Mergeable		me2 ?= other.get(p)
								
								if me1 == void or me2 == void then
									stdio.writeln("WARNING : Elements are not mergeable")
								else
									if me1.getSignature == me2.getSignature then
										if p.isComposite then
											stdio.writeln("Recursive merge")
											result.~set(p, me1.merge(me2))
										else
											result.~set(p, me1)
										end
									else
										stdio.writeln("ERROR : Elements signature do not match")
									end
								end
							end
						end
					end

			else
				if self.get(p) == void then
					result.~set(p, other.get(p))
				else
					if self.get(p) == void then
						result.~set(p, self.get(p))
					else
						if self.get(p) == other.get(p) then
							result.~set(p, self.get(p))
						else
							stdio.writeln("WARNING : conflicting value for property " + p.name + " picking the first value")
							result.~set(p, self.get(p))
						end
					end
				end
			end
		
		
		}
		
		
		
		
	end

	operation getSignature() : Signature is abstract
	operation sigEqual(other : Mergeable) : EBoolean is abstract

}
class Composer
{
	operation main(e1 : EModelElement, e2 : EModelElement) : Void is do
		var e3 : EModelElement
		
		var m1 : Mergeable
		var m2 : Mergeable
		
		m1 ?= e1
		m2 ?= e2
		
		if m1 == void or m2 == void then
			raise "Model elements are not mergeable"
		end
		
		if m1.sigEqual(m2) then 
			e3 := m1.merge(m2)
			stdio.writeln("Elements merged " + e3.toString)
		else
			stdio.writeln("Models not mergeable")
		end
		
		
	end
}
abstract class Signature
{
}
class StringSignature inherits Signature
{
	attribute sign : String
	
	method equals(other : Object ) : Boolean is do
		var othersign : StringSignature
		othersign ?= other
		if othersign != void then
			result := sign == othersign.sign
		else
			result := false
		end
	end
	
}

class ClassSignature inherits Signature
{
	reference cls : EClass 
	
	method equals(other : Object ) : Boolean is do
		var othersign : ClassSignature
		othersign ?= other
		if othersign != void then
			result := self.cls.name == othersign.cls.name 
			and
				self.cls.~abstract == othersign.cls.~abstract 
			
		else
			result := false
		end
	end
	
}


class OperationSignature inherits Signature
{
	reference op : EOperation 
	
	method equals(other : Object ) : Boolean is do
		var othersign : OperationSignature
		othersign ?= other
		if othersign != void then
			result := self.op.name == othersign.op.name 
			
			self.op.eParameters.each{ p1 | 
				if result then
					result := othersign.op.eParameters.select{ p2 | p1.sigEqual(p2) }.size == 1
				end
			}
			
		else
			result := false
		end
	end
	
}

class ParameterSignature inherits Signature
{
	reference param : EParameter 
	
	method equals(other : Object ) : Boolean is do
		var othersign : ParameterSignature
		othersign ?= other
		if othersign != void then
			result := self.param.name == othersign.param.name and
				self.param.eType.sigEqual(othersign.param.eType)
		else
			result := false
		end
	end
	
}



alias EBigDecimal : kermeta::language::structure::Object;
alias EBigInteger : kermeta::language::structure::Object;
alias EBoolean : kermeta::standard::Boolean;
alias EBooleanObject : kermeta::standard::Boolean;
alias EByte : kermeta::language::structure::Object;
alias EByteArray : kermeta::language::structure::Object;
alias EByteObject : kermeta::language::structure::Object;
alias EChar : kermeta::language::structure::Object;
alias ECharacterObject : kermeta::language::structure::Object;
alias EDate : kermeta::language::structure::Object;
alias EDiagnosticChain : kermeta::language::structure::Object;
alias EDouble : kermeta::language::structure::Object;
alias EDoubleObject : kermeta::language::structure::Object;
alias EEList : kermeta::language::structure::Object;
alias EEnumerator : kermeta::language::structure::Object;
alias EFeatureMap : kermeta::language::structure::Object;
alias EFeatureMapEntry : kermeta::language::structure::Object;
alias EFloat : kermeta::language::structure::Object;
alias EFloatObject : kermeta::language::structure::Object;
alias EInt : kermeta::standard::Integer;
alias EIntegerObject : kermeta::standard::Integer;
alias EJavaClass : kermeta::language::structure::Object;
alias EJavaObject : kermeta::language::structure::Object;
alias ELong : kermeta::language::structure::Object;
alias ELongObject : kermeta::language::structure::Object;
alias EMap : kermeta::language::structure::Object;
alias EResource : kermeta::language::structure::Object;
alias EResourceSet : kermeta::language::structure::Object;
alias EShort : kermeta::language::structure::Object;
alias EShortObject : kermeta::language::structure::Object;
alias EString : kermeta::standard::String;
alias ETreeIterator : kermeta::language::structure::Object;
