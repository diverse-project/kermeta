/* $Id: serviceDiscovery.kmt,v 1.6 2008-06-24 14:37:31 bmorin Exp $
 * Creation date: March 19, 2008
 * License:
 * Copyright: IRISA / INRIA Rennes Bretagne Atlantique
 * Authors: Brice Morin bmorin@irisa.fr
 */
@mainClass "test::ServiceDiscoveryMain"
@mainOperation "main"


package test;
require kermeta

//Loading the SmartAdapter aspect weaver
require "platform:/resource/SmartAdapters/program/weaving/weaver4Runtime.kmt"

//Loading the platform adapter (here, the service discovery example for the Fractal platform)
//just change this require to adapt another platform and/or another application
require "platform:/resource/SmartAdapters/program/adapter/ServiceDiscovery.kmt"

using kermeta::standard 
using kermeta::io
using weaver
using org::kermeta::runtime::adapter


class ServiceDiscoveryMain
{
	operation main() : Void is do 
		var modelUri : String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/fromPlatform/base/referenceModel.art"
		var wovenModelUri : String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/woven/DAModel.art"
		var finalModelUri : String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/model/fromPlatform/woven/newReferenceModel.art"
		var metamodelUri : String init "platform:/resource/SmartAdapters/metamodel/domain/metamodel@runtime.ecore"
		var MMPatternUri : String init "platform:/resource/SmartAdapters/metamodel/domain/metamodel@runtimePattern.ecore"
			
		var adapterUri : String init "platform:/resource/SmartAdapters/examples/serviceDiscovery/aspect/UAprotocol.xmi"
		var adaptMMUri : String init "platform:/resource/SmartAdapters/metamodel/specific/runtime_AOM_Framework1.ecore"
		

		var weaver:Weaver init Weaver.new
		weaver.initWeaver()
		
/*		var reuseModel : Boolean init true
		do
			FileIO.new.readTextFile(wovenModelUri.replace("platform:/resource/","C:/work/dev/Kermeta/"))
		rescue (e : kermeta::exceptions::FileNotFoundException)
			reuseModel := false
		end
		
		if not reuseModel then
*/			weaver.loadMetamodel(metamodelUri)
			weaver.loadMetamodelPattern(MMPatternUri)
			weaver.loadAdapter(adapterUri, adaptMMUri)
//		end
		
		stdio.writeln("K> Running the service discovery application (SA configuration)...")
		var platformAdapter : PlatformAdapter init PlatformAdapter.new 
		platformAdapter.~init
		platformAdapter.run

		stdio.writeln("")							
		//if not reuseModel then
			platformAdapter.saveModel(modelUri)
			weaver.loadModel(modelUri, "http://art")
			weaver.weaving(metamodelUri, MMPatternUri)
			weaver.saveModel(wovenModelUri, "http://art")
		/*else
			weaver.loadModel(wovenModelUri, "http://art")*/
		//end
		stdio.writeln("")

		
		stdio.writeln("K> We now obtain DA = SA (base) + UA (aspect)")
		stdio.writeln("")
		
		stdio.writeln("K> Submit the model transformation to the platform")
		stdio.writeln("     -Model comparison")
		stdio.writeln("     -Analyze diff / match")
		stdio.writeln("     -Instanciate and order atomic reconfiguration commands")
		stdio.writeln("     -Execute the ordered set of commands")
		stdio.writeln("")
		platformAdapter.loadUpdateModel(wovenModelUri)
		platformAdapter.saveModel(finalModelUri)
		
/*		if reuseModel then
			weaver.loadModel(wovenModelUri, "http://art")
		end
*/		
		var context : art::display::DisplayContext init art::display::DisplayContext.new
		context.~init
		context.setRoot(weaver.resourceModel.instances.one.asType(art::System).root)
		weaver.resourceModel.instances.one.asType(art::System).root.display(context)
		
		weaver.finalizeWeaver()
	end
}