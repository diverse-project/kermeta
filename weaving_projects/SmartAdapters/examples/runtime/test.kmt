/* $Id: test.kmt,v 1.5 2008-04-16 13:40:41 bmorin Exp $
 * Creation date: March 19, 2008
 * License:
 * Copyright:
 * Authors:
 */
@mainClass "test::TestRuntime"
@mainOperation "main"


package test;
require kermeta

//Loading the aspect weaver (optional, we can use directly Kermeta or another tool like Kompose)
require "platform:/resource/SmartAdapters/program/weaving/weaver4Runtime.kmt"

//Loading the platform adapter (here, the example 1 for the Fractal platform)
require "platform:/resource/SmartAdapters/program/adapter/FractalAdapterExample1.kmt"

using kermeta::standard 
using kermeta::utils
using kermeta::persistence
using weaver
using org::kermeta::runtime::adapter


class TestRuntime
{
	operation main() : Void is do 
		stdio.writeln("K> ###START###")
		var modelUri : String init "platform:/resource/SmartAdapters/examples/runtime/model/model.art"
		var wovenModelUri : String init "platform:/resource/SmartAdapters/examples/runtime/model/woven.art"
		var finalModelUri : String init "platform:/resource/SmartAdapters/examples/runtime/model/result.art"
		var metamodelUri : String init "platform:/resource/SmartAdapters/metamodel/domain/metamodel@runtime.ecore"
		
		
		var adapterUri : String init "platform:/resource/SmartAdapters/examples/runtime/Adapter.xmi"
		var adaptMMUri : String init "platform:/resource/SmartAdapters/metamodel/specific/runtime_AOM_Framework1.ecore"
		var MMPatternUri : String init "platform:/resource/SmartAdapters/metamodel/domain/metamodel@runtimePattern.ecore"
	
		
		var platformAdapter : PlatformAdapter init PlatformAdapter.new 
/**->*/	platformAdapter.~init //initializing the connection between the execution platform and Kermeta
		
		stdio.writeln("K> Starting the system...")
/**->*/ platformAdapter.run //running the system on the execution platform
		stdio.writeln("K> OK!")
		
		stdio.writeln("K> Generating and saving the model...")
/**->*/ platformAdapter.generateAndSaveEMFModel(modelUri) //generating a model from the running system
		stdio.writeln("K> OK!")
		
		//Aspect weaving with SmartAdapters
		var weaver:Weaver init Weaver.new
		weaver.weaving(modelUri, adapterUri, adaptMMUri, metamodelUri, MMPatternUri, wovenModelUri)
		
		stdio.writeln("K> Loading the model...")
/**->*/	platformAdapter.loadUpdateModel(wovenModelUri) //loading a modified model into the running system
		stdio.writeln("K> OK!")
		
		stdio.writeln("K> Generating and saving the model...")
/**->*/	platformAdapter.generateAndSaveEMFModel(finalModelUri) //generating a model (after adaptation) from the
		stdio.writeln("K> OK!")									//running system
		
		stdio.writeln("K> ###END###")
	end
}