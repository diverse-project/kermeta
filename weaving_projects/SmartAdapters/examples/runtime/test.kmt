/* $Id: test.kmt,v 1.4 2008-04-03 07:17:14 bmorin Exp $
 * Creation date: March 19, 2008
 * License:
 * Copyright:
 * Authors:
 */
@mainClass "test::TestRuntime"
@mainOperation "main"


package test;
require kermeta
require "platform:/resource/SmartAdapters/program/weaving/weaver4Runtime.kmt"

using kermeta::standard 
using kermeta::utils
using kermeta::persistence
using weaver



/**
 * This class provides an example on how to adapt a Fractal running system from Kermeta,
 * using for example SmartAdapters 
 */
class TestRuntime
{
	operation main() : Void is do 
		stdio.writeln("K> ###START###")
		var modelUri : String init "platform:/resource/SmartAdapters/examples/runtime/model.xmi"
		var wovenModelUri : String init "platform:/resource/SmartAdapters/examples/runtime/woven.xmi"
		var finalModelUri : String init "platform:/resource/SmartAdapters/examples/runtime/result.xmi"
		var metamodelUri : String init "platform:/resource/SmartAdapters/metamodel/domain/metamodel@runtime.ecore"
		
		
		var adapterUri : String init "platform:/resource/SmartAdapters/examples/runtime/Adapter.xmi"
		var adaptMMUri : String init "platform:/resource/SmartAdapters/metamodel/specific/runtime_AOM_Framework1.ecore"
		var MMPatternUri : String init "platform:/resource/SmartAdapters/metamodel/domain/metamodel@runtimePattern.ecore"
		
		extern org::kermeta::smartadapters::runtime::fractal::SmartAdaptersToFractal.~init(self)
		
		stdio.writeln("K> Starting the system...")
		extern org::kermeta::smartadapters::runtime::fractal::SmartAdaptersToFractal.run(self)
		stdio.writeln("K> OK!")
		
		stdio.writeln("K> Generating and saving the model...")
		extern org::kermeta::smartadapters::runtime::fractal::SmartAdaptersToFractal.generateAndSaveEMFModel(self, modelUri)
		stdio.writeln("K> OK!")
		
		//Aspect weaving with SmartAdapters
		var weaver:Weaver init Weaver.new
		weaver.weaving(modelUri, adapterUri, adaptMMUri, metamodelUri, MMPatternUri, wovenModelUri)
		
		stdio.writeln("K> Loading the model...")
		extern org::kermeta::smartadapters::runtime::fractal::SmartAdaptersToFractal.loadUpdateModel(self, wovenModelUri)
		stdio.writeln("K> OK!")
		
		stdio.writeln("K> Generating and saving the model...")
		extern org::kermeta::smartadapters::runtime::fractal::SmartAdaptersToFractal.generateAndSaveEMFModel(self, finalModelUri)
		stdio.writeln("K> OK!")
		
		//Aspect weaving with SmartAdapters (bug Kermeta reflection/enumeration)
		/*weaver.weaving(wovenModelUri, adapterUri.replace(".xmi","2.xmi"), adaptMMUri, metamodelUri, MMPatternUri, wovenModelUri)
		stdio.writeln("K> Loading the model...")
		extern org::kermeta::smartadapters::runtime::fractal::SmartAdaptersToFractal.loadUpdateModel(self, wovenModelUri)
		stdio.writeln("K> OK!")
		
		stdio.writeln("K> Generating and saving the model...")
		extern org::kermeta::smartadapters::runtime::fractal::SmartAdaptersToFractal.generateAndSaveEMFModel(self, finalModelUri)
		stdio.writeln("K> OK!")*/
		
		stdio.writeln("K> ###END###")
	end
	

    operation loadModel(repository : EMFRepository, modelPath : String, metamodelPath : String) : Set<kermeta::standard::Object> is do                   
    	stdio.writeln("K>  loading: "+modelPath+" ("+metamodelPath+")")
   		var resource : Resource init repository.createResource(modelPath, metamodelPath)
       	resource.load()
        result := resource.instances
    end	
	
    operation saveModel(obj : Set<Object>, uri : String, domainMM : String) is do
 		stdio.writeln("K>  saving: "+uri+" ("+domainMM+")")
    	var repository : EMFRepository init EMFRepository.new
	    var resource : Resource init repository.createResource(uri , domainMM)
	    obj.each{o | resource.instances.add(o)}
	    resource.save
    end	
}