/* $Id: MMPatternBuilder.kmt,v 1.7 2008-03-04 14:00:03 bmorin Exp $
 * Creation date: October 18, 2006
 * License:
 * Copyright:
 * Authors:
 */
@mainClass "root_package::EcorePatternMetamodelBuilder"
@mainOperation "main"


package root_package;


require kermeta
require "platform:/resource/fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/PatternMetamodelBuilder.kmt"
using ecore 
using kermeta::standard
using kermeta::persistence
using kermeta::pattern
 
class EcorePatternMetamodelBuilder {

  operation main() is do 
      var sourceMetamodelUri : String init "platform:/resource/SmartAdapters/metamodel/domain/Fractal.ecore"
      var targetMetamodelUri : String init "platform:/resource/SmartAdapters/metamodel/domain/FractalPattern.ecore"

   	  var sourceMetamodel : Sequence<EPackage> init loadEcoreModel(EMFRepository.new, sourceMetamodelUri)
 
      // Link packages to the framework of patterns (the content of the packages are changed 
      var patternCreator : PatternMetamodelBuilder init PatternMetamodelBuilder.new       
      var patternPack : EPackage init patternCreator.addPatternFramework(sourceMetamodel, targetMetamodelUri) 
         
      stdio.write("Saving...")
      var setPack : Set<Object> init Set<Object>.new
      setPack.add(patternPack)
       
      saveEcoreModel(setPack, targetMetamodelUri)
      stdio.writeln("OK!") 
  end
  
	operation loadEcoreModel(repository : EMFRepository, modelUri : String) : Sequence<EPackage> is 
    do
    	var resource : Resource init repository.createResource(modelUri , "http://www.eclipse.org/emf/2002/Ecore")
    	resource.load
    	var instances : Set<Object> init resource.instances
    	var pack : EPackage
    	result := instances.select { e | EPackage.isInstance(e) }.collect{p | pack ?= p}	
    end

	operation saveEcoreModel(obj : Set<Object>, uri : String) is 
	do
    	obj.each{o | stdio.writeln(o.toString)}
    	var repository:EMFRepository init EMFRepository.new
	    var resource : Resource init repository.createResource(uri , "http://www.eclipse.org/emf/2002/Ecore")
	    obj.each{o | resource.instances.add(o)}
	    resource.save
    end 
}