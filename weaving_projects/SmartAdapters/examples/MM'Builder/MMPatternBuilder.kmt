/* $Id: MMPatternBuilder.kmt,v 1.4 2007-10-19 09:06:04 bmorin Exp $
 * Creation date: October 18, 2006
 * License:
 * Copyright:
 * Authors:
 */
@mainClass "root_package::EcorePatternMetamodelBuilder"
@mainOperation "main"


package root_package;


require kermeta
require "platform:/resource/fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/PatternMetamodelBuilder.kmt"

// require statement to workaround a problem in kermeta
//require "platform:/resource/fr.irisa.triskell.kermeta.patternmatching/src/kermeta/persistence/EMFHandler.kmt"

using ecore 
using kermeta::standard
using kermeta::persistence
using kermeta::pattern
 
class EcorePatternMetamodelBuilder {

  operation main() is do 
      var sourceMetamodelUri : String init "platform:/resource/SmartAdapters/metamodel/domain/FSMMM.ecore"
      var targetMetamodelUri : String init "platform:/resource/SmartAdapters/metamodel/domain/FSMMMPattern.ecore"

   	  var repository : EMFRepository
   	  var repository2 : EMFRepository init EMFRepository.new 
      var handler : EcoreHelpers::EcoreHelper init EcoreHelpers::EcoreHelper.new   	  
      handler.initialize()        	 
      repository:=handler.loadMetamodel(sourceMetamodelUri)    
      //var seqPack:Sequence<EPackage> init handler.loadEcoreModel(repository,sourceMetamodelUri)
              	 
      var seqPack : Sequence<EPackage> init handler.packages
 
      // Link packages to the framework of patterns (the content of the packages are changed 
      var patternCreator : PatternMetamodelBuilder init PatternMetamodelBuilder.new       
      patternCreator.initialize(repository2)       
      var patternPack : EPackage init patternCreator.addPatternFramework(seqPack, targetMetamodelUri) 
      
      // remove the source packages from their previours container
      //packagesModelModel.each{p | repository.getResource(sourceMetamodelUri).remove(p)} 
      
      // problem in Kermeta: we have to clea instance class name
      //var emfhandler : kermeta::pattern::persistence::EMFHandler init kermeta::pattern::persistence::EMFHandler.new 
      //emfhandler.cleanInstanceClassNames(patternPack)
      
      patternPack.eSubpackages.each{p | 
			p.eClassifiers.each{c |
				var cl:EClass
				cl?=c
				if(cl!=void) then
					stdio.writeln(cl.name)
					cl.eSuperTypes.each{s | stdio.write(s.name+" ")}
					stdio.writeln("")
				end 
		}}
      
      stdio.write("Saving...")
      repository2.resources.each{r | stdio.writeln(r.uri)}
      handler.saveEcoreModel(repository2,patternPack,targetMetamodelUri)
      stdio.writeln("OK!") 
  end
}