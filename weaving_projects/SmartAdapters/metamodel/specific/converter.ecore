<?xml version="1.0" encoding="ASCII"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="utils" nsURI="platform:/resource/SmartAdapters/metamodel/specific//converter.ecore" nsPrefix="utils">
  <eAnnotations source="kermeta">
    <details key="mainClass" value="root_package::Main"/>
    <details key="mainOperation" value="main"/>
  </eAnnotations>
  <eAnnotations source="kermeta.req">
    <details key="platform:/plugin/fr.irisa.triskell.kermeta/lib/framework.km" value="platform:/plugin/fr.irisa.triskell.kermeta/lib/framework.km"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Converter">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA;Aims at converting a model that conforms to a MM' metamodel &#xD;&#xA;into a model that conforms to a MM metamodel&#xD;&#xA;It can be improved...&#xD;&#xA;*/"/>
    </eAnnotations>
    <eOperations name="deleteConverted">
      <eAnnotations source="kermeta">
        <details key="body" value="do&#xA;&#x9;converted.remove(obj)&#xA;end"/>
      </eAnnotations>
      <eParameters name="obj">
        <eType xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//reflection/Object"/>
      </eParameters>
    </eOperations>
    <eOperations name="convert">
      <eAnnotations source="kermeta">
        <details key="body" value="do&#xA;&#x9;if converted.equals(void) then&#xA;&#x9;&#x9;converted := kermeta::utils::Hashtable&lt;kermeta::reflection::Object, kermeta::reflection::Object>.new&#xA;&#xA;&#x9;end&#xA;&#x9;if converting.equals(void) then&#xA;&#x9;&#x9;converting := kermeta::utils::Hashtable&lt;kermeta::reflection::Object, kermeta::reflection::Object>.new&#xA;&#xA;&#x9;end&#xA;&#x9;var res : kermeta::reflection::Object&#xA;&#x9;res := converted.getValue(obj)&#xA;&#x9;if res.isNotEqual(void) then&#xA;&#x9;&#x9;result := res&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;res := converting.getValue(obj)&#xA;&#x9;&#x9;if res.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;result := res&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;var newMetaClass : kermeta::reflection::Class&#xA;&#x9;&#x9;&#x9;newMetaClass := convert.getValue(obj.getMetaClass)&#xA;&#x9;&#x9;&#x9;if newMetaClass.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;var newObj : kermeta::reflection::Object init newMetaClass.new&#xA;&#x9;&#x9;&#x9;&#x9;var classDef : kermeta::reflection::ClassDefinition&#xA;&#x9;&#x9;&#x9;&#x9;classDef ?= newObj.getMetaClass.typeDefinition&#xA;&#x9;&#x9;&#x9;&#x9;converting.put(obj, newObj)&#xA;&#x9;&#x9;&#x9;&#x9;if classDef.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var att : kermeta::standard::Set&lt;kermeta::reflection::Property> init classDef.allOwnedAttribute&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;att.each{a | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var primitive : kermeta::language::structure::PrimitiveType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;primitive ?= a.type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if a.upper.equals(1) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if primitive.equals(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var temp : kermeta::reflection::Object&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if converting.getValue(obj.get(a)).equals(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp := self.convert(obj.get(a), convert)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if temp.isInstanceOf(a.type) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newObj.~set(a, temp)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newObj.~set(a, obj.get(a))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newObj.~set(a, obj.get(a))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var list : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var convertedList : kermeta::standard::Collection&lt;kermeta::reflection::Object> init kermeta::standard::Set&lt;kermeta::reflection::Object>.new&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;list ?= obj.get(a)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if list.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;list.each{o | if (converting.getValue(o).equals(void)) and (converted.getValue(o).equals(void)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var tmp : kermeta::reflection::Object init self.convert(o, convert)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;converting.put(o, tmp)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;list.remove(o)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;list.add(tmp)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var list2 : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;list2 ?= newObj.get(a)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;list2.clear&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;list2.addAll(list)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;converted.put(obj, newObj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;converting.remove(obj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result := newObj&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
        <details key="documentation" value="/**&#xD;&#xA; changes the metaclass of obj&#xD;&#xA; */"/>
      </eAnnotations>
      <eType xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//reflection/Object"/>
      <eParameters name="obj">
        <eType xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//reflection/Object"/>
      </eParameters>
      <eParameters name="convert">
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="kermeta::reflection::Class"/>
          <details key="1" value="kermeta::reflection::Class"/>
        </eAnnotations>
        <eType xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//utils/Hashtable"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="converted" containment="true">
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="0" value="kermeta::reflection::Object"/>
        <details key="1" value="kermeta::reflection::Object"/>
      </eAnnotations>
      <eType xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//utils/Hashtable"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="converting" containment="true">
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="0" value="kermeta::reflection::Object"/>
        <details key="1" value="kermeta::reflection::Object"/>
      </eAnnotations>
      <eType xsi:type="ecore:EClass" href="../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//utils/Hashtable"/>
    </eStructuralFeatures>
  </eClassifiers>
</ecore:EPackage>
