/* Authors: Brice Morin
 * Creation date: 
 * License: 
 * Copyright: IRISA Rennes - Equipe Projet INRIA Triskell
 */


package org;
require kermeta
require "platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.kmt"
require "platform:/resource/SmartAdapters/metamodel/domain/runtime/runtime.ecore"
require "platform:/resource/SmartAdapters/metamodel/domain/runtime/runtimePattern.ecore"

using kermeta::standard
using kermeta::utils
using patternframework
using org::smartadapters::core
using org::smartadapters::extension
using ecore
using org::smartadapters::utils

package smartadapters
{
	package core
	{
		@aspect "true"
		class Adapter 
		{
			operation initConvert(): Void is do
				stdio.write("Mapping MM\' to MM...")
				converter := Converter.new
				convert := Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>.new
				convert.put(pattern::runtime::System,runtime::System)
				convert.put(pattern::runtime::Configuration,runtime::Configuration)
				convert.put(pattern::runtime::CompositeComponentInstance,runtime::CompositeComponentInstance)
				convert.put(pattern::runtime::PrimitiveComponentInstance,runtime::PrimitiveComponentInstance)
				convert.put(pattern::runtime::SimpleBind,runtime::SimpleBind)
				convert.put(pattern::runtime::ExportBind,runtime::ExportBind)
				convert.put(pattern::type::ComponentType,type::ComponentType)
				convert.put(pattern::type::Port,type::Port)
				convert.put(pattern::type::FunctionalService,type::FunctionalService)
				stdio.writeln("OK!")
			end
		}
		
	package adaptations
	{
		
		class SetSystem inherits setAdaptation
		{
			reference SystemToSet : pattern::runtime::System
			reference refconfigurations : pattern::runtime::Configuration[0..*]
			reference refcomponents : pattern::runtime::ComponentInstance[0..*]
			reference reftypes : pattern::type::ComponentType[0..*]
			reference refserviceDeclarations : pattern::type::Service[0..*]
			
			method check(): Boolean is do
				result := SystemToSet!=void
			end
			
			method execute(): Void is do
				var tempSystem : runtime::System
				tempSystem ?= adapter.getRealObject(SystemToSet,false)
				if(tempSystem != void) then
					var tempconfigurations : Collection<kermeta::reflection::Object>
					if(refconfigurations!=void) then
						tempconfigurations ?= adapter.getRealObject(refconfigurations,true)
						if(tempconfigurations!=void) then
							tempconfigurations.each{o | 
								var temp : runtime::Configuration
								temp?=o
								if(temp!=void) then
									tempSystem.configurations.add(temp)
								end}
						end
					end
					var tempcomponents : Collection<kermeta::reflection::Object>
					if(refcomponents!=void) then
						tempcomponents ?= adapter.getRealObject(refcomponents,true)
						if(tempcomponents!=void) then
							tempcomponents.each{o | 
								var temp : runtime::ComponentInstance
								temp?=o
								if(temp!=void) then
									tempSystem.components.add(temp)
								end}
						end
					end
					var temptypes : Collection<kermeta::reflection::Object>
					if(reftypes!=void) then
						temptypes ?= adapter.getRealObject(reftypes,true)
						if(temptypes!=void) then
							temptypes.each{o | 
								var temp : type::ComponentType
								temp?=o
								if(temp!=void) then
									tempSystem.types.add(temp)
								end}
						end
					end
					var tempserviceDeclarations : Collection<kermeta::reflection::Object>
					if(refserviceDeclarations!=void) then
						tempserviceDeclarations ?= adapter.getRealObject(refserviceDeclarations,true)
						if(tempserviceDeclarations!=void) then
							tempserviceDeclarations.each{o | 
								var temp : type::Service
								temp?=o
								if(temp!=void) then
									tempSystem.serviceDeclarations.add(temp)
								end}
						end
					end
				end			
			end			
		}
		
		class UnsetSystem inherits unsetAdaptation
		{
			reference SystemToUnset : pattern::runtime::System
			reference refconfigurations:pattern::runtime::Configuration[0..*]
			reference refcomponents:pattern::runtime::ComponentInstance[0..*]
			reference reftypes:pattern::type::ComponentType[0..*]
			reference refserviceDeclarations:pattern::type::Service[0..*]
			
			method check(): Boolean is do
				result := SystemToUnset!=void
			end
			
			method execute(): Void is do
				var tempSystem : runtime::System
				tempSystem?=adapter.getRealObject(SystemToUnset,false)
				if(tempSystem!=void) then
					if(refconfigurations != void) then
						var tempconfigurations : Collection<kermeta::reflection::Object>
						tempconfigurations?=adapter.getRealObject(refconfigurations,true)
						if(tempconfigurations!=void) then
							tempconfigurations.each{o | 
								var temp : runtime::Configuration
								temp?=o
								if(temp!=void) then
									tempSystem.configurations.remove(temp)
								end
							}
						end
					end
					if(refcomponents != void) then
						var tempcomponents : Collection<kermeta::reflection::Object>
						tempcomponents?=adapter.getRealObject(refcomponents,true)
						if(tempcomponents!=void) then
							tempcomponents.each{o | 
								var temp : runtime::ComponentInstance
								temp?=o
								if(temp!=void) then
									tempSystem.components.remove(temp)
								end
							}
						end
					end
					if(reftypes != void) then
						var temptypes : Collection<kermeta::reflection::Object>
						temptypes?=adapter.getRealObject(reftypes,true)
						if(temptypes!=void) then
							temptypes.each{o | 
								var temp : type::ComponentType
								temp?=o
								if(temp!=void) then
									tempSystem.types.remove(temp)
								end
							}
						end
					end
					if(refserviceDeclarations != void) then
						var tempserviceDeclarations : Collection<kermeta::reflection::Object>
						tempserviceDeclarations?=adapter.getRealObject(refserviceDeclarations,true)
						if(tempserviceDeclarations!=void) then
							tempserviceDeclarations.each{o | 
								var temp : type::Service
								temp?=o
								if(temp!=void) then
									tempSystem.serviceDeclarations.remove(temp)
								end
							}
						end
					end
				end
			end
		}
		
		class CreateConfiguration inherits createAdaptation
		{
			attribute newConfiguration : pattern::runtime::Configuration
					
			method check(): Boolean is do
				result := newConfiguration!=void
			end
					
			method execute(): Void is do
				var realConfiguration : runtime::Configuration
				if(adapter.created.getValue(newConfiguration) == void or not(isUnique==uniqueType.unique)) then
					realConfiguration ?= adapter.converter.getConverted(newConfiguration)
					adapter.created.put(newConfiguration,realConfiguration)
				else
					var clone : Boolean init false
					if(isUnique==uniqueType.onDemand) then
						var input : String init stdio.read("create "+newConfiguration.toString+" (true/false) :")
			               clone := input.toBoolean
					end									
					if(isUnique == uniqueType.non_unique or clone) then
						realConfiguration ?= adapter.converter.getConverted(newConfiguration)
						adapter.created.put(newConfiguration,realConfiguration)
					end
				end						
			end
		}

		class SetConfiguration inherits setAdaptation
		{
			reference ConfigurationToSet : pattern::runtime::Configuration
			reference refcomponents : pattern::runtime::ComponentInstance[0..*]
			reference refname : pattern::type::kermeta::standard::String
			
			method check(): Boolean is do
				result := ConfigurationToSet!=void
			end
			
			method execute(): Void is do
				var tempConfiguration : runtime::Configuration
				tempConfiguration ?= adapter.getRealObject(ConfigurationToSet,false)
				if(tempConfiguration != void) then
					var tempcomponents : Collection<kermeta::reflection::Object>
					if(refcomponents!=void) then
						tempcomponents ?= adapter.getRealObject(refcomponents,true)
						if(tempcomponents!=void) then
							tempcomponents.each{o | 
								var temp : runtime::ComponentInstance
								temp?=o
								if(temp!=void) then
									tempConfiguration.components.add(temp)
								end}
						end
					end
					var tempname : type::kermeta::standard::String
					if(refname!=void) then
						tempname ?= adapter.getRealObject(refname,false)
						if(tempname!=void) then
							tempConfiguration.name := tempname
						end
					end
				end			
			end			
		}
		
		class UnsetConfiguration inherits unsetAdaptation
		{
			reference ConfigurationToUnset : pattern::runtime::Configuration
			reference refcomponents:pattern::runtime::ComponentInstance[0..*]
			reference refname:pattern::type::kermeta::standard::String
			
			method check(): Boolean is do
				result := ConfigurationToUnset!=void
			end
			
			method execute(): Void is do
				var tempConfiguration : runtime::Configuration
				tempConfiguration?=adapter.getRealObject(ConfigurationToUnset,false)
				if(tempConfiguration!=void) then
					if(refcomponents != void) then
						var tempcomponents : Collection<kermeta::reflection::Object>
						tempcomponents?=adapter.getRealObject(refcomponents,true)
						if(tempcomponents!=void) then
							tempcomponents.each{o | 
								var temp : runtime::ComponentInstance
								temp?=o
								if(temp!=void) then
									tempConfiguration.components.remove(temp)
								end
							}
						end
					end
					if(refname != void) then
						var tempname : type::kermeta::standard::String
						tempname ?= adapter.getRealObject(refname,false)
						if(tempname!=void) then
							if(tempname==tempConfiguration.name) then
								tempConfiguration.name:=void
							end
						end						
					end
				end
			end
		}

		class SetComponentInstance inherits setAdaptation
		{
			reference ComponentInstanceToSet : pattern::runtime::ComponentInstance
			reference reftype : pattern::type::ComponentType
			reference refsuperComponents : pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings : pattern::runtime::Binding[0..*]
			reference refstate : pattern::type::kermeta::standard::String
			reference refname : pattern::type::kermeta::standard::String
			
			method check(): Boolean is do
				result := ComponentInstanceToSet!=void
			end
			
			method execute(): Void is do
				var tempComponentInstance : runtime::ComponentInstance
				tempComponentInstance ?= adapter.getRealObject(ComponentInstanceToSet,false)
				if(tempComponentInstance != void) then
					var temptype : type::ComponentType
					if(reftype!=void) then
						temptype ?= adapter.getRealObject(reftype,false)
						if(temptype!=void) then
							tempComponentInstance.type := temptype
						end
					end
					var tempsuperComponents : Collection<kermeta::reflection::Object>
					if(refsuperComponents!=void) then
						tempsuperComponents ?= adapter.getRealObject(refsuperComponents,true)
						if(tempsuperComponents!=void) then
							tempsuperComponents.each{o | 
								var temp : runtime::CompositeComponentInstance
								temp?=o
								if(temp!=void) then
									tempComponentInstance.superComponents.add(temp)
								end}
						end
					end
					var tempbindings : Collection<kermeta::reflection::Object>
					if(refbindings!=void) then
						tempbindings ?= adapter.getRealObject(refbindings,true)
						if(tempbindings!=void) then
							tempbindings.each{o | 
								var temp : runtime::Binding
								temp?=o
								if(temp!=void) then
									tempComponentInstance.bindings.add(temp)
								end}
						end
					end
					var tempstate : type::kermeta::standard::String
					if(refstate!=void) then
						tempstate ?= adapter.getRealObject(refstate,false)
						if(tempstate!=void) then
							tempComponentInstance.state := tempstate
						end
					end
					var tempname : type::kermeta::standard::String
					if(refname!=void) then
						tempname ?= adapter.getRealObject(refname,false)
						if(tempname!=void) then
							tempComponentInstance.name := tempname
						end
					end
				end			
			end			
		}
		
		class UnsetComponentInstance inherits unsetAdaptation
		{
			reference ComponentInstanceToUnset : pattern::runtime::ComponentInstance
			reference reftype:pattern::type::ComponentType
			reference refsuperComponents:pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings:pattern::runtime::Binding[0..*]
			reference refstate:pattern::type::kermeta::standard::String
			reference refname:pattern::type::kermeta::standard::String
			
			method check(): Boolean is do
				result := ComponentInstanceToUnset!=void
			end
			
			method execute(): Void is do
				var tempComponentInstance : runtime::ComponentInstance
				tempComponentInstance?=adapter.getRealObject(ComponentInstanceToUnset,false)
				if(tempComponentInstance!=void) then
					if(reftype != void) then
						var temptype : type::ComponentType
						temptype ?= adapter.getRealObject(reftype,false)
						if(temptype!=void) then
							if(temptype==tempComponentInstance.type) then
								tempComponentInstance.type:=void
							end
						end						
					end
					if(refsuperComponents != void) then
						var tempsuperComponents : Collection<kermeta::reflection::Object>
						tempsuperComponents?=adapter.getRealObject(refsuperComponents,true)
						if(tempsuperComponents!=void) then
							tempsuperComponents.each{o | 
								var temp : runtime::CompositeComponentInstance
								temp?=o
								if(temp!=void) then
									tempComponentInstance.superComponents.remove(temp)
								end
							}
						end
					end
					if(refbindings != void) then
						var tempbindings : Collection<kermeta::reflection::Object>
						tempbindings?=adapter.getRealObject(refbindings,true)
						if(tempbindings!=void) then
							tempbindings.each{o | 
								var temp : runtime::Binding
								temp?=o
								if(temp!=void) then
									tempComponentInstance.bindings.remove(temp)
								end
							}
						end
					end
					if(refstate != void) then
						var tempstate : type::kermeta::standard::String
						tempstate ?= adapter.getRealObject(refstate,false)
						if(tempstate!=void) then
							if(tempstate==tempComponentInstance.state) then
								tempComponentInstance.state:=void
							end
						end						
					end
					if(refname != void) then
						var tempname : type::kermeta::standard::String
						tempname ?= adapter.getRealObject(refname,false)
						if(tempname!=void) then
							if(tempname==tempComponentInstance.name) then
								tempComponentInstance.name:=void
							end
						end						
					end
				end
			end
		}
		
		class CreateCompositeComponentInstance inherits createAdaptation
		{
			attribute newCompositeComponentInstance : pattern::runtime::CompositeComponentInstance
					
			method check(): Boolean is do
				result := newCompositeComponentInstance!=void
			end
					
			method execute(): Void is do
				var realCompositeComponentInstance : runtime::CompositeComponentInstance
				if(adapter.created.getValue(newCompositeComponentInstance) == void or not(isUnique==uniqueType.unique)) then
					realCompositeComponentInstance ?= adapter.converter.getConverted(newCompositeComponentInstance)
					adapter.created.put(newCompositeComponentInstance,realCompositeComponentInstance)
				else
					var clone : Boolean init false
					if(isUnique==uniqueType.onDemand) then
						var input : String init stdio.read("create "+newCompositeComponentInstance.toString+" (true/false) :")
			               clone := input.toBoolean
					end									
					if(isUnique == uniqueType.non_unique or clone) then
						realCompositeComponentInstance ?= adapter.converter.getConverted(newCompositeComponentInstance)
						adapter.created.put(newCompositeComponentInstance,realCompositeComponentInstance)
					end
				end						
			end
		}

		class CloneCompositeComponentInstance inherits cloneAdaptation
		{
			reference CompositeComponentInstanceToClone : pattern::runtime::CompositeComponentInstance
			attribute clonedCompositeComponentInstance : pattern::runtime::CompositeComponentInstance
			
			method check(): Boolean is do
				result := CompositeComponentInstanceToClone!=void
			end
			
			method execute(): Void is do
				var realClonedCompositeComponentInstance : runtime::CompositeComponentInstance
				var temp : runtime::CompositeComponentInstance
				temp?=adapter.getRealObject(CompositeComponentInstanceToClone,false)
				if(isUnique == uniqueType.unique) then
					if(not(adapter.cloned.exists{o | o == temp})) then
						realClonedCompositeComponentInstance ?= Object.clone(temp)
						adapter.created.put(clonedCompositeComponentInstance,realClonedCompositeComponentInstance)
						adapter.cloned.add(temp)
					end
				else
					var clone : Boolean init false
					if(isUnique == uniqueType.onDemand) then
						var input : String init stdio.read("clone "+CompositeComponentInstanceToClone.toString+" (true/false) :")
		                clone := input.toBoolean
					end
					if(isUnique == uniqueType.non_unique or clone) then
						realClonedCompositeComponentInstance ?= Object.clone(temp)
						adapter.created.put(clonedCompositeComponentInstance,realClonedCompositeComponentInstance)
						adapter.cloned.add(temp)
					end
				end
			end					
		}

		class SetCompositeComponentInstance inherits setAdaptation
		{
			reference CompositeComponentInstanceToSet : pattern::runtime::CompositeComponentInstance
			reference refsubComponents : pattern::runtime::ComponentInstance[0..*]
			reference reftype : pattern::type::ComponentType
			reference refsuperComponents : pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings : pattern::runtime::Binding[0..*]
			reference refstate : pattern::type::kermeta::standard::String
			reference refname : pattern::type::kermeta::standard::String
			
			method check(): Boolean is do
				result := CompositeComponentInstanceToSet!=void
			end
			
			method execute(): Void is do
				var tempCompositeComponentInstance : runtime::CompositeComponentInstance
				tempCompositeComponentInstance ?= adapter.getRealObject(CompositeComponentInstanceToSet,false)
				if(tempCompositeComponentInstance != void) then
					var tempsubComponents : Collection<kermeta::reflection::Object>
					if(refsubComponents!=void) then
						tempsubComponents ?= adapter.getRealObject(refsubComponents,true)
						if(tempsubComponents!=void) then
							tempsubComponents.each{o | 
								var temp : runtime::ComponentInstance
								temp?=o
								if(temp!=void) then
									tempCompositeComponentInstance.subComponents.add(temp)
								end}
						end
					end
					var temptype : type::ComponentType
					if(reftype!=void) then
						temptype ?= adapter.getRealObject(reftype,false)
						if(temptype!=void) then
							tempCompositeComponentInstance.type := temptype
						end
					end
					var tempsuperComponents : Collection<kermeta::reflection::Object>
					if(refsuperComponents!=void) then
						tempsuperComponents ?= adapter.getRealObject(refsuperComponents,true)
						if(tempsuperComponents!=void) then
							tempsuperComponents.each{o | 
								var temp : runtime::CompositeComponentInstance
								temp?=o
								if(temp!=void) then
									tempCompositeComponentInstance.superComponents.add(temp)
								end}
						end
					end
					var tempbindings : Collection<kermeta::reflection::Object>
					if(refbindings!=void) then
						tempbindings ?= adapter.getRealObject(refbindings,true)
						if(tempbindings!=void) then
							tempbindings.each{o | 
								var temp : runtime::Binding
								temp?=o
								if(temp!=void) then
									tempCompositeComponentInstance.bindings.add(temp)
								end}
						end
					end
					var tempstate : type::kermeta::standard::String
					if(refstate!=void) then
						tempstate ?= adapter.getRealObject(refstate,false)
						if(tempstate!=void) then
							tempCompositeComponentInstance.state := tempstate
						end
					end
					var tempname : type::kermeta::standard::String
					if(refname!=void) then
						tempname ?= adapter.getRealObject(refname,false)
						if(tempname!=void) then
							tempCompositeComponentInstance.name := tempname
						end
					end
				end			
			end			
		}
		
		class UnsetCompositeComponentInstance inherits unsetAdaptation
		{
			reference CompositeComponentInstanceToUnset : pattern::runtime::CompositeComponentInstance
			reference refsubComponents:pattern::runtime::ComponentInstance[0..*]
			reference reftype:pattern::type::ComponentType
			reference refsuperComponents:pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings:pattern::runtime::Binding[0..*]
			reference refstate:pattern::type::kermeta::standard::String
			reference refname:pattern::type::kermeta::standard::String
			
			method check(): Boolean is do
				result := CompositeComponentInstanceToUnset!=void
			end
			
			method execute(): Void is do
				var tempCompositeComponentInstance : runtime::CompositeComponentInstance
				tempCompositeComponentInstance?=adapter.getRealObject(CompositeComponentInstanceToUnset,false)
				if(tempCompositeComponentInstance!=void) then
					if(refsubComponents != void) then
						var tempsubComponents : Collection<kermeta::reflection::Object>
						tempsubComponents?=adapter.getRealObject(refsubComponents,true)
						if(tempsubComponents!=void) then
							tempsubComponents.each{o | 
								var temp : runtime::ComponentInstance
								temp?=o
								if(temp!=void) then
									tempCompositeComponentInstance.subComponents.remove(temp)
								end
							}
						end
					end
					if(reftype != void) then
						var temptype : type::ComponentType
						temptype ?= adapter.getRealObject(reftype,false)
						if(temptype!=void) then
							if(temptype==tempCompositeComponentInstance.type) then
								tempCompositeComponentInstance.type:=void
							end
						end						
					end
					if(refsuperComponents != void) then
						var tempsuperComponents : Collection<kermeta::reflection::Object>
						tempsuperComponents?=adapter.getRealObject(refsuperComponents,true)
						if(tempsuperComponents!=void) then
							tempsuperComponents.each{o | 
								var temp : runtime::CompositeComponentInstance
								temp?=o
								if(temp!=void) then
									tempCompositeComponentInstance.superComponents.remove(temp)
								end
							}
						end
					end
					if(refbindings != void) then
						var tempbindings : Collection<kermeta::reflection::Object>
						tempbindings?=adapter.getRealObject(refbindings,true)
						if(tempbindings!=void) then
							tempbindings.each{o | 
								var temp : runtime::Binding
								temp?=o
								if(temp!=void) then
									tempCompositeComponentInstance.bindings.remove(temp)
								end
							}
						end
					end
					if(refstate != void) then
						var tempstate : type::kermeta::standard::String
						tempstate ?= adapter.getRealObject(refstate,false)
						if(tempstate!=void) then
							if(tempstate==tempCompositeComponentInstance.state) then
								tempCompositeComponentInstance.state:=void
							end
						end						
					end
					if(refname != void) then
						var tempname : type::kermeta::standard::String
						tempname ?= adapter.getRealObject(refname,false)
						if(tempname!=void) then
							if(tempname==tempCompositeComponentInstance.name) then
								tempCompositeComponentInstance.name:=void
							end
						end						
					end
				end
			end
		}
		
		class CreatePrimitiveComponentInstance inherits createAdaptation
		{
			attribute newPrimitiveComponentInstance : pattern::runtime::PrimitiveComponentInstance
					
			method check(): Boolean is do
				result := newPrimitiveComponentInstance!=void
			end
					
			method execute(): Void is do
				var realPrimitiveComponentInstance : runtime::PrimitiveComponentInstance
				if(adapter.created.getValue(newPrimitiveComponentInstance) == void or not(isUnique==uniqueType.unique)) then
					realPrimitiveComponentInstance ?= adapter.converter.getConverted(newPrimitiveComponentInstance)
					adapter.created.put(newPrimitiveComponentInstance,realPrimitiveComponentInstance)
				else
					var clone : Boolean init false
					if(isUnique==uniqueType.onDemand) then
						var input : String init stdio.read("create "+newPrimitiveComponentInstance.toString+" (true/false) :")
			               clone := input.toBoolean
					end									
					if(isUnique == uniqueType.non_unique or clone) then
						realPrimitiveComponentInstance ?= adapter.converter.getConverted(newPrimitiveComponentInstance)
						adapter.created.put(newPrimitiveComponentInstance,realPrimitiveComponentInstance)
					end
				end						
			end
		}

		class ClonePrimitiveComponentInstance inherits cloneAdaptation
		{
			reference PrimitiveComponentInstanceToClone : pattern::runtime::PrimitiveComponentInstance
			attribute clonedPrimitiveComponentInstance : pattern::runtime::PrimitiveComponentInstance
			
			method check(): Boolean is do
				result := PrimitiveComponentInstanceToClone!=void
			end
			
			method execute(): Void is do
				var realClonedPrimitiveComponentInstance : runtime::PrimitiveComponentInstance
				var temp : runtime::PrimitiveComponentInstance
				temp?=adapter.getRealObject(PrimitiveComponentInstanceToClone,false)
				if(isUnique == uniqueType.unique) then
					if(not(adapter.cloned.exists{o | o == temp})) then
						realClonedPrimitiveComponentInstance ?= Object.clone(temp)
						adapter.created.put(clonedPrimitiveComponentInstance,realClonedPrimitiveComponentInstance)
						adapter.cloned.add(temp)
					end
				else
					var clone : Boolean init false
					if(isUnique == uniqueType.onDemand) then
						var input : String init stdio.read("clone "+PrimitiveComponentInstanceToClone.toString+" (true/false) :")
		                clone := input.toBoolean
					end
					if(isUnique == uniqueType.non_unique or clone) then
						realClonedPrimitiveComponentInstance ?= Object.clone(temp)
						adapter.created.put(clonedPrimitiveComponentInstance,realClonedPrimitiveComponentInstance)
						adapter.cloned.add(temp)
					end
				end
			end					
		}

		class SetPrimitiveComponentInstance inherits setAdaptation
		{
			reference PrimitiveComponentInstanceToSet : pattern::runtime::PrimitiveComponentInstance
			reference reftype : pattern::type::ComponentType
			reference refsuperComponents : pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings : pattern::runtime::Binding[0..*]
			reference refstate : pattern::type::kermeta::standard::String
			reference refname : pattern::type::kermeta::standard::String
			
			method check(): Boolean is do
				result := PrimitiveComponentInstanceToSet!=void
			end
			
			method execute(): Void is do
				var tempPrimitiveComponentInstance : runtime::PrimitiveComponentInstance
				tempPrimitiveComponentInstance ?= adapter.getRealObject(PrimitiveComponentInstanceToSet,false)
				if(tempPrimitiveComponentInstance != void) then
					var temptype : type::ComponentType
					if(reftype!=void) then
						temptype ?= adapter.getRealObject(reftype,false)
						if(temptype!=void) then
							tempPrimitiveComponentInstance.type := temptype
						end
					end
					var tempsuperComponents : Collection<kermeta::reflection::Object>
					if(refsuperComponents!=void) then
						tempsuperComponents ?= adapter.getRealObject(refsuperComponents,true)
						if(tempsuperComponents!=void) then
							tempsuperComponents.each{o | 
								var temp : runtime::CompositeComponentInstance
								temp?=o
								if(temp!=void) then
									tempPrimitiveComponentInstance.superComponents.add(temp)
								end}
						end
					end
					var tempbindings : Collection<kermeta::reflection::Object>
					if(refbindings!=void) then
						tempbindings ?= adapter.getRealObject(refbindings,true)
						if(tempbindings!=void) then
							tempbindings.each{o | 
								var temp : runtime::Binding
								temp?=o
								if(temp!=void) then
									tempPrimitiveComponentInstance.bindings.add(temp)
								end}
						end
					end
					var tempstate : type::kermeta::standard::String
					if(refstate!=void) then
						tempstate ?= adapter.getRealObject(refstate,false)
						if(tempstate!=void) then
							tempPrimitiveComponentInstance.state := tempstate
						end
					end
					var tempname : type::kermeta::standard::String
					if(refname!=void) then
						tempname ?= adapter.getRealObject(refname,false)
						if(tempname!=void) then
							tempPrimitiveComponentInstance.name := tempname
						end
					end
				end			
			end			
		}
		
		class UnsetPrimitiveComponentInstance inherits unsetAdaptation
		{
			reference PrimitiveComponentInstanceToUnset : pattern::runtime::PrimitiveComponentInstance
			reference reftype:pattern::type::ComponentType
			reference refsuperComponents:pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings:pattern::runtime::Binding[0..*]
			reference refstate:pattern::type::kermeta::standard::String
			reference refname:pattern::type::kermeta::standard::String
			
			method check(): Boolean is do
				result := PrimitiveComponentInstanceToUnset!=void
			end
			
			method execute(): Void is do
				var tempPrimitiveComponentInstance : runtime::PrimitiveComponentInstance
				tempPrimitiveComponentInstance?=adapter.getRealObject(PrimitiveComponentInstanceToUnset,false)
				if(tempPrimitiveComponentInstance!=void) then
					if(reftype != void) then
						var temptype : type::ComponentType
						temptype ?= adapter.getRealObject(reftype,false)
						if(temptype!=void) then
							if(temptype==tempPrimitiveComponentInstance.type) then
								tempPrimitiveComponentInstance.type:=void
							end
						end						
					end
					if(refsuperComponents != void) then
						var tempsuperComponents : Collection<kermeta::reflection::Object>
						tempsuperComponents?=adapter.getRealObject(refsuperComponents,true)
						if(tempsuperComponents!=void) then
							tempsuperComponents.each{o | 
								var temp : runtime::CompositeComponentInstance
								temp?=o
								if(temp!=void) then
									tempPrimitiveComponentInstance.superComponents.remove(temp)
								end
							}
						end
					end
					if(refbindings != void) then
						var tempbindings : Collection<kermeta::reflection::Object>
						tempbindings?=adapter.getRealObject(refbindings,true)
						if(tempbindings!=void) then
							tempbindings.each{o | 
								var temp : runtime::Binding
								temp?=o
								if(temp!=void) then
									tempPrimitiveComponentInstance.bindings.remove(temp)
								end
							}
						end
					end
					if(refstate != void) then
						var tempstate : type::kermeta::standard::String
						tempstate ?= adapter.getRealObject(refstate,false)
						if(tempstate!=void) then
							if(tempstate==tempPrimitiveComponentInstance.state) then
								tempPrimitiveComponentInstance.state:=void
							end
						end						
					end
					if(refname != void) then
						var tempname : type::kermeta::standard::String
						tempname ?= adapter.getRealObject(refname,false)
						if(tempname!=void) then
							if(tempname==tempPrimitiveComponentInstance.name) then
								tempPrimitiveComponentInstance.name:=void
							end
						end						
					end
				end
			end
		}

		class SetBinding inherits setAdaptation
		{
			reference BindingToSet : pattern::runtime::Binding
			reference refportA : pattern::type::Port
			reference refportB : pattern::type::Port
			
			method check(): Boolean is do
				result := BindingToSet!=void
			end
			
			method execute(): Void is do
				var tempBinding : runtime::Binding
				tempBinding ?= adapter.getRealObject(BindingToSet,false)
				if(tempBinding != void) then
					var tempportA : type::Port
					if(refportA!=void) then
						tempportA ?= adapter.getRealObject(refportA,false)
						if(tempportA!=void) then
							tempBinding.portA := tempportA
						end
					end
					var tempportB : type::Port
					if(refportB!=void) then
						tempportB ?= adapter.getRealObject(refportB,false)
						if(tempportB!=void) then
							tempBinding.portB := tempportB
						end
					end
				end			
			end			
		}
		
		class UnsetBinding inherits unsetAdaptation
		{
			reference BindingToUnset : pattern::runtime::Binding
			reference refportA:pattern::type::Port
			reference refportB:pattern::type::Port
			
			method check(): Boolean is do
				result := BindingToUnset!=void
			end
			
			method execute(): Void is do
				var tempBinding : runtime::Binding
				tempBinding?=adapter.getRealObject(BindingToUnset,false)
				if(tempBinding!=void) then
					if(refportA != void) then
						var tempportA : type::Port
						tempportA ?= adapter.getRealObject(refportA,false)
						if(tempportA!=void) then
							if(tempportA==tempBinding.portA) then
								tempBinding.portA:=void
							end
						end						
					end
					if(refportB != void) then
						var tempportB : type::Port
						tempportB ?= adapter.getRealObject(refportB,false)
						if(tempportB!=void) then
							if(tempportB==tempBinding.portB) then
								tempBinding.portB:=void
							end
						end						
					end
				end
			end
		}
		
		class CreateSimpleBind inherits createAdaptation
		{
			attribute newSimpleBind : pattern::runtime::SimpleBind
					
			method check(): Boolean is do
				result := newSimpleBind!=void
			end
					
			method execute(): Void is do
				var realSimpleBind : runtime::SimpleBind
				if(adapter.created.getValue(newSimpleBind) == void or not(isUnique==uniqueType.unique)) then
					realSimpleBind ?= adapter.converter.getConverted(newSimpleBind)
					adapter.created.put(newSimpleBind,realSimpleBind)
				else
					var clone : Boolean init false
					if(isUnique==uniqueType.onDemand) then
						var input : String init stdio.read("create "+newSimpleBind.toString+" (true/false) :")
			               clone := input.toBoolean
					end									
					if(isUnique == uniqueType.non_unique or clone) then
						realSimpleBind ?= adapter.converter.getConverted(newSimpleBind)
						adapter.created.put(newSimpleBind,realSimpleBind)
					end
				end						
			end
		}

		class SetSimpleBind inherits setAdaptation
		{
			reference SimpleBindToSet : pattern::runtime::SimpleBind
			reference refcptA : pattern::runtime::ComponentInstance
			reference refcptB : pattern::runtime::ComponentInstance
			reference refportA : pattern::type::Port
			reference refportB : pattern::type::Port
			
			method check(): Boolean is do
				result := SimpleBindToSet!=void
			end
			
			method execute(): Void is do
				var tempSimpleBind : runtime::SimpleBind
				tempSimpleBind ?= adapter.getRealObject(SimpleBindToSet,false)
				if(tempSimpleBind != void) then
					var tempcptA : runtime::ComponentInstance
					if(refcptA!=void) then
						tempcptA ?= adapter.getRealObject(refcptA,false)
						if(tempcptA!=void) then
							tempSimpleBind.cptA := tempcptA
						end
					end
					var tempcptB : runtime::ComponentInstance
					if(refcptB!=void) then
						tempcptB ?= adapter.getRealObject(refcptB,false)
						if(tempcptB!=void) then
							tempSimpleBind.cptB := tempcptB
						end
					end
					var tempportA : type::Port
					if(refportA!=void) then
						tempportA ?= adapter.getRealObject(refportA,false)
						if(tempportA!=void) then
							tempSimpleBind.portA := tempportA
						end
					end
					var tempportB : type::Port
					if(refportB!=void) then
						tempportB ?= adapter.getRealObject(refportB,false)
						if(tempportB!=void) then
							tempSimpleBind.portB := tempportB
						end
					end
				end			
			end			
		}
		
		class UnsetSimpleBind inherits unsetAdaptation
		{
			reference SimpleBindToUnset : pattern::runtime::SimpleBind
			reference refcptA:pattern::runtime::ComponentInstance
			reference refcptB:pattern::runtime::ComponentInstance
			reference refportA:pattern::type::Port
			reference refportB:pattern::type::Port
			
			method check(): Boolean is do
				result := SimpleBindToUnset!=void
			end
			
			method execute(): Void is do
				var tempSimpleBind : runtime::SimpleBind
				tempSimpleBind?=adapter.getRealObject(SimpleBindToUnset,false)
				if(tempSimpleBind!=void) then
					if(refcptA != void) then
						var tempcptA : runtime::ComponentInstance
						tempcptA ?= adapter.getRealObject(refcptA,false)
						if(tempcptA!=void) then
							if(tempcptA==tempSimpleBind.cptA) then
								tempSimpleBind.cptA:=void
							end
						end						
					end
					if(refcptB != void) then
						var tempcptB : runtime::ComponentInstance
						tempcptB ?= adapter.getRealObject(refcptB,false)
						if(tempcptB!=void) then
							if(tempcptB==tempSimpleBind.cptB) then
								tempSimpleBind.cptB:=void
							end
						end						
					end
					if(refportA != void) then
						var tempportA : type::Port
						tempportA ?= adapter.getRealObject(refportA,false)
						if(tempportA!=void) then
							if(tempportA==tempSimpleBind.portA) then
								tempSimpleBind.portA:=void
							end
						end						
					end
					if(refportB != void) then
						var tempportB : type::Port
						tempportB ?= adapter.getRealObject(refportB,false)
						if(tempportB!=void) then
							if(tempportB==tempSimpleBind.portB) then
								tempSimpleBind.portB:=void
							end
						end						
					end
				end
			end
		}
		
		class CreateExportBind inherits createAdaptation
		{
			attribute newExportBind : pattern::runtime::ExportBind
					
			method check(): Boolean is do
				result := newExportBind!=void
			end
					
			method execute(): Void is do
				var realExportBind : runtime::ExportBind
				if(adapter.created.getValue(newExportBind) == void or not(isUnique==uniqueType.unique)) then
					realExportBind ?= adapter.converter.getConverted(newExportBind)
					adapter.created.put(newExportBind,realExportBind)
				else
					var clone : Boolean init false
					if(isUnique==uniqueType.onDemand) then
						var input : String init stdio.read("create "+newExportBind.toString+" (true/false) :")
			               clone := input.toBoolean
					end									
					if(isUnique == uniqueType.non_unique or clone) then
						realExportBind ?= adapter.converter.getConverted(newExportBind)
						adapter.created.put(newExportBind,realExportBind)
					end
				end						
			end
		}

		class SetExportBind inherits setAdaptation
		{
			reference ExportBindToSet : pattern::runtime::ExportBind
			reference refcptA : pattern::runtime::ComponentInstance
			reference refcptB : pattern::runtime::ComponentInstance
			reference refportA : pattern::type::Port
			reference refportB : pattern::type::Port
			
			method check(): Boolean is do
				result := ExportBindToSet!=void
			end
			
			method execute(): Void is do
				var tempExportBind : runtime::ExportBind
				tempExportBind ?= adapter.getRealObject(ExportBindToSet,false)
				if(tempExportBind != void) then
					var tempcptA : runtime::ComponentInstance
					if(refcptA!=void) then
						tempcptA ?= adapter.getRealObject(refcptA,false)
						if(tempcptA!=void) then
							tempExportBind.cptA := tempcptA
						end
					end
					var tempcptB : runtime::ComponentInstance
					if(refcptB!=void) then
						tempcptB ?= adapter.getRealObject(refcptB,false)
						if(tempcptB!=void) then
							tempExportBind.cptB := tempcptB
						end
					end
					var tempportA : type::Port
					if(refportA!=void) then
						tempportA ?= adapter.getRealObject(refportA,false)
						if(tempportA!=void) then
							tempExportBind.portA := tempportA
						end
					end
					var tempportB : type::Port
					if(refportB!=void) then
						tempportB ?= adapter.getRealObject(refportB,false)
						if(tempportB!=void) then
							tempExportBind.portB := tempportB
						end
					end
				end			
			end			
		}
		
		class UnsetExportBind inherits unsetAdaptation
		{
			reference ExportBindToUnset : pattern::runtime::ExportBind
			reference refcptA:pattern::runtime::ComponentInstance
			reference refcptB:pattern::runtime::ComponentInstance
			reference refportA:pattern::type::Port
			reference refportB:pattern::type::Port
			
			method check(): Boolean is do
				result := ExportBindToUnset!=void
			end
			
			method execute(): Void is do
				var tempExportBind : runtime::ExportBind
				tempExportBind?=adapter.getRealObject(ExportBindToUnset,false)
				if(tempExportBind!=void) then
					if(refcptA != void) then
						var tempcptA : runtime::ComponentInstance
						tempcptA ?= adapter.getRealObject(refcptA,false)
						if(tempcptA!=void) then
							if(tempcptA==tempExportBind.cptA) then
								tempExportBind.cptA:=void
							end
						end						
					end
					if(refcptB != void) then
						var tempcptB : runtime::ComponentInstance
						tempcptB ?= adapter.getRealObject(refcptB,false)
						if(tempcptB!=void) then
							if(tempcptB==tempExportBind.cptB) then
								tempExportBind.cptB:=void
							end
						end						
					end
					if(refportA != void) then
						var tempportA : type::Port
						tempportA ?= adapter.getRealObject(refportA,false)
						if(tempportA!=void) then
							if(tempportA==tempExportBind.portA) then
								tempExportBind.portA:=void
							end
						end						
					end
					if(refportB != void) then
						var tempportB : type::Port
						tempportB ?= adapter.getRealObject(refportB,false)
						if(tempportB!=void) then
							if(tempportB==tempExportBind.portB) then
								tempExportBind.portB:=void
							end
						end						
					end
				end
			end
		}
	}
}}