/* Authors: Brice Morin
 * Creation date: 
 * License: 
 * Copyright: IRISA Rennes - Equipe Projet INRIA Triskell
 */


package org;
require kermeta
require "platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.kmt"
require "platform:/resource/SmartAdapters/metamodel/domain/FSMMM.ecore"
require "platform:/resource/SmartAdapters/metamodel/domain/FSMMMPattern.ecore"

using kermeta::standard
using kermeta::utils
using patternframework
using org::smartadapters::core
using org::smartadapters::extension
using ecore
using org::smartadapters::utils

package smartadapters
{
	package core
	{
		@aspect "true"
		class Adapter 
		{
			operation initConvert(): Void is do
				stdio.write("Mapping MM\' to MM...")
				converter := Converter.new
				convert := Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>.new
				convert.put(pattern::FSM::State,FSM::State)
				convert.put(pattern::FSM::Transition,FSM::Transition)
				convert.put(pattern::FSM::Fsm,FSM::Fsm)
				converter.initConverter(convert)
				stdio.writeln("OK!")
			end
		}
		
	package adaptations
	{
		
		class CreateState inherits createAdaptation
		{
			attribute newState : pattern::FSM::State
					
			method check(): Boolean is do
				result := newState!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newState, void, isUnique)					
			end
		}

		class CloneState inherits cloneAdaptation
		{
			reference StateToClone : pattern::FSM::State
			attribute clonedState : pattern::FSM::State
			
			method check(): Boolean is do
				result := StateToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedState, StateToClone, isUnique)
			end					
		}

		class SetState inherits setAdaptation
		{
			reference StateToSet : pattern::FSM::State
			reference refname : String
			
			method check(): Boolean is do
				result := StateToSet!=void
			end
			
			method execute(): Void is do
				var tempState : FSM::State
				tempState ?= adapter.getRealObject(StateToSet,false)
				
				tempState.name ?= adapter.setSingleProperty(refname, tempState.name)
			end			
		}
		
		class UnsetState inherits unsetAdaptation
		{
			reference StateToUnset : pattern::FSM::State
			reference refname : String
			
			method check(): Boolean is do
				result := StateToUnset!=void
			end
			
			method execute(): Void is do
				var tempState : FSM::State
				tempState ?= adapter.getRealObject(StateToUnset,false)
				
				tempState.name ?= adapter.unsetSingleProperty(refname, tempState.name)
			end
		}
		
		class CreateTransition inherits createAdaptation
		{
			attribute newTransition : pattern::FSM::Transition
					
			method check(): Boolean is do
				result := newTransition!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newTransition, void, isUnique)					
			end
		}

		class CloneTransition inherits cloneAdaptation
		{
			reference TransitionToClone : pattern::FSM::Transition
			attribute clonedTransition : pattern::FSM::Transition
			
			method check(): Boolean is do
				result := TransitionToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedTransition, TransitionToClone, isUnique)
			end					
		}

		class SetTransition inherits setAdaptation
		{
			reference TransitionToSet : pattern::FSM::Transition
			reference refsource : pattern::FSM::State
			reference reftarget : pattern::FSM::State
			
			method check(): Boolean is do
				result := TransitionToSet!=void
			end
			
			method execute(): Void is do
				var tempTransition : FSM::Transition
				tempTransition ?= adapter.getRealObject(TransitionToSet,false)
				
				tempTransition.source ?= adapter.setSingleProperty(refsource, tempTransition.source)
				tempTransition.target ?= adapter.setSingleProperty(reftarget, tempTransition.target)
			end			
		}
		
		class UnsetTransition inherits unsetAdaptation
		{
			reference TransitionToUnset : pattern::FSM::Transition
			reference refsource : pattern::FSM::State
			reference reftarget : pattern::FSM::State
			
			method check(): Boolean is do
				result := TransitionToUnset!=void
			end
			
			method execute(): Void is do
				var tempTransition : FSM::Transition
				tempTransition ?= adapter.getRealObject(TransitionToUnset,false)
				
				tempTransition.source ?= adapter.unsetSingleProperty(refsource, tempTransition.source)
				tempTransition.target ?= adapter.unsetSingleProperty(reftarget, tempTransition.target)
			end
		}
		
		class CreateFsm inherits createAdaptation
		{
			attribute newFsm : pattern::FSM::Fsm
					
			method check(): Boolean is do
				result := newFsm!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newFsm, void, isUnique)					
			end
		}

		class CloneFsm inherits cloneAdaptation
		{
			reference FsmToClone : pattern::FSM::Fsm
			attribute clonedFsm : pattern::FSM::Fsm
			
			method check(): Boolean is do
				result := FsmToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedFsm, FsmToClone, isUnique)
			end					
		}

		class SetFsm inherits setAdaptation
		{
			reference FsmToSet : pattern::FSM::Fsm
			reference refstates : pattern::FSM::State[0..*]
			reference reftransitions : pattern::FSM::Transition[0..*]
			
			method check(): Boolean is do
				result := FsmToSet!=void
			end
			
			method execute(): Void is do
				var tempFsm : FSM::Fsm
				tempFsm ?= adapter.getRealObject(FsmToSet,false)
				
				adapter.setMultipleProperty(tempFsm.states,refstates)
				adapter.setMultipleProperty(tempFsm.transitions,reftransitions)
			end			
		}
		
		class UnsetFsm inherits unsetAdaptation
		{
			reference FsmToUnset : pattern::FSM::Fsm
			reference refstates : pattern::FSM::State[0..*]
			reference reftransitions : pattern::FSM::Transition[0..*]
			
			method check(): Boolean is do
				result := FsmToUnset!=void
			end
			
			method execute(): Void is do
				var tempFsm : FSM::Fsm
				tempFsm ?= adapter.getRealObject(FsmToUnset,false)
				
				adapter.unsetMultipleProperty(tempFsm.states,refstates)
				adapter.unsetMultipleProperty(tempFsm.transitions,reftransitions)
			end
		}
	}
}}