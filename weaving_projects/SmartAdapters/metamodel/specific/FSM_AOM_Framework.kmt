package org;
   require kermeta
   require "platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.kmt"
   require "platform:/resource/SmartAdapters/metamodel/domain/FSMMM.ecore"
   require "platform:/resource/SmartAdapters/metamodel/domain/FSMMMPattern.ecore"

   using kermeta::standard
   using kermeta::utils
   using patternframework
   using org::smartadapters::core
   using org::smartadapters::extension
   using ecore

   package smartadapters
   {
    	package core
    	{ 
     		@aspect "true"
     		class Adapter{
				operation initConvert() : Void is do
stdio.write("Mapping MM' to MM...")
convert:=Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>.new
	convert.put(pattern::FSM::State,FSM::State)
	convert.put(pattern::FSM::Transition,FSM::Transition)
	convert.put(pattern::FSM::Fsm,FSM::Fsm)
end
}
	package adaptations{
				class createState inherits Adaptation{
	attribute isUnique:Boolean
	attribute newState:pattern::FSM::State

	operation check() : Boolean is do
		result:=(newState!=void)
	end

	operation execute() is do
		if(adapter.created.getValue(newState)==void or not(isUnique)) then
			var realState:FSM::State
			realState?=adapter.converter.convert(Object.clone(newState), adapter.convert)
			adapter.created.put(newState,realState)
		end
	end
}

class cloneState inherits cloneAdaptation{
	//attribute isUnique:Boolean
	reference newState:pattern::FSM::State
	attribute realState:pattern::FSM::State

	operation check() : Boolean is do
		result:=(newState!=void)
	end

	operation execute() is do
		var clonedState:FSM::State
		var temp:FSM::State
		temp?=adapter.getRealObject(newState,false)
		stdio.writeln(isUnique.name.toString)
		if(isUnique==uniqueType.unique) then
			stdio.writeln("isUnique==uniqueType.unique")
			if(not(adapter.cloned.exists{o | o==temp})) then
				clonedState?=Object.clone(temp)
				adapter.clone.put(realState,clonedState)
				adapter.cloned.add(temp)
			end
		else
			stdio.writeln("else")
			stdio.writeln(isUnique.name.toString)
			var clone:Boolean init false
			if(isUnique==uniqueType.non_unique) then
				stdio.writeln("isUnique==uniqueType.onDemand")
				var input:String init stdio.read("clone "+newState.toString+" (true/false) :")//user interaction
				clone:=input.toBoolean
			end
			if(isUnique==uniqueType.non_unique or clone) then
					stdio.writeln("isUnique==uniqueType.non_unique or clone")
					clonedState?=Object.clone(temp)
					adapter.clone.put(realState,clonedState)
					adapter.cloned.add(temp)
			end
		end
	end
}

class setState inherits Adaptation{
	reference aState:pattern::FSM::State
	reference aname:ecore::EString

	operation check() : Boolean is do
		result:=(aState!=void)
	end

	operation execute() is do
		var tempState:FSM::State
		tempState?=adapter.getRealObject(aState,false)
		var tempname:ecore::EString
		tempname?=adapter.getRealObject(aname,false)
		if(tempname!=void) then
			tempState.name:=tempname
		end
	end
}

class unsetState inherits Adaptation{
	reference aState:pattern::FSM::State
	reference aname:ecore::EString

	operation check() : Boolean is do
		result:=(aState!=void)
	end

	operation execute() is do
		var tempState:FSM::State
		tempState?=adapter.getRealObject(aState,false)
		var tempname:ecore::EString
		tempname?=adapter.getRealObject(aname,false)
		if(tempname!=void) then
			tempState.name:=void
		end
	end
}

class createTransition inherits Adaptation{
	attribute isUnique:Boolean
	attribute newTransition:pattern::FSM::Transition

	operation check() : Boolean is do
		result:=(newTransition!=void)
	end

	operation execute() is do
		if(adapter.created.getValue(newTransition)==void or not(isUnique)) then
			var realTransition:FSM::Transition
			realTransition?=adapter.converter.convert(Object.clone(newTransition), adapter.convert)
			adapter.created.put(newTransition,realTransition)
		end
	end
}

class cloneTransition inherits Adaptation{
	attribute isUnique:Boolean
	reference newTransition:pattern::FSM::Transition
	attribute realTransition:pattern::FSM::Transition

	operation check() : Boolean is do
		result:=(newTransition!=void)
	end

	operation execute() is do
		var clonedTransition:FSM::Transition
		var temp:FSM::Transition
		temp?=adapter.getRealObject(newTransition,false)
		if(isUnique) then
			if(not(adapter.cloned.exists{o | o==temp})) then
				clonedTransition?=Object.clone(temp)
				adapter.clone.put(realTransition,clonedTransition)
				adapter.cloned.add(temp)
			end
		else
			clonedTransition?=Object.clone(temp)
			adapter.clone.put(realTransition,clonedTransition)
		end
	end
}

class setTransition inherits Adaptation{
	reference aTransition:pattern::FSM::Transition
	reference asource:pattern::FSM::State
	reference atarget:pattern::FSM::State

	operation check() : Boolean is do
		result:=(aTransition!=void)
	end

	operation execute() is do
		var tempTransition:FSM::Transition
		tempTransition?=adapter.getRealObject(aTransition,false)
		var tempsource:FSM::State
		tempsource?=adapter.getRealObject(asource,false)
		if(tempsource!=void) then
			tempTransition.source:=tempsource
		end
		var temptarget:FSM::State
		temptarget?=adapter.getRealObject(atarget,false)
		if(temptarget!=void) then
			tempTransition.target:=temptarget
		end
	end
}

class unsetTransition inherits Adaptation{
	reference aTransition:pattern::FSM::Transition
	reference asource:pattern::FSM::State
	reference atarget:pattern::FSM::State

	operation check() : Boolean is do
		result:=(aTransition!=void)
	end

	operation execute() is do
		var tempTransition:FSM::Transition
		tempTransition?=adapter.getRealObject(aTransition,false)
		var tempsource:FSM::State
		tempsource?=adapter.getRealObject(asource,false)
		if(tempsource!=void) then
			tempTransition.source:=tempsource
		end
		var temptarget:FSM::State
		temptarget?=adapter.getRealObject(atarget,false)
		if(temptarget!=void) then
			tempTransition.target:=void
		end
	end
}

class createFsm inherits Adaptation{
	attribute isUnique:Boolean
	attribute newFsm:pattern::FSM::Fsm

	operation check() : Boolean is do
		result:=(newFsm!=void)
	end

	operation execute() is do
		if(adapter.created.getValue(newFsm)==void or not(isUnique)) then
			var realFsm:FSM::Fsm
			realFsm?=adapter.converter.convert(Object.clone(newFsm), adapter.convert)
			adapter.created.put(newFsm,realFsm)
		end
	end
}

class cloneFsm inherits Adaptation{
	attribute isUnique:Boolean
	reference newFsm:pattern::FSM::Fsm
	attribute realFsm:pattern::FSM::Fsm

	operation check() : Boolean is do
		result:=(newFsm!=void)
	end

	operation execute() is do
		var clonedFsm:FSM::Fsm
		var temp:FSM::Fsm
		temp?=adapter.getRealObject(newFsm,false)
		if(isUnique) then
			if(not(adapter.cloned.exists{o | o==temp})) then
				clonedFsm?=Object.clone(temp)
				adapter.clone.put(realFsm,clonedFsm)
				adapter.cloned.add(temp)
			end
		else
			clonedFsm?=Object.clone(temp)
			adapter.clone.put(realFsm,clonedFsm)
		end
	end
}

class setFsm inherits Adaptation{
	reference aFsm:pattern::FSM::Fsm
	reference astates:pattern::FSM::State[0..*]
	reference atransitions:pattern::FSM::Transition[0..*]

	operation check() : Boolean is do
		result:=(aFsm!=void)
	end

	operation execute() is do
		var tempFsm:FSM::Fsm
		tempFsm?=adapter.getRealObject(aFsm,false)
		var tempstates:Collection<kermeta::reflection::Object>
		tempstates?=adapter.getRealObject(astates,true)
		if(tempstates!=void) then
			tempstates.each{o | 
				var temp:FSM::State
				temp?=o
				if(temp!=void) then
					tempFsm.states.add(temp)
					stdio.writeln("  "+temp.toString+" added into "+tempFsm.toString)
				end}
		end
		var temptransitions:Collection<kermeta::reflection::Object>
		temptransitions?=adapter.getRealObject(atransitions,true)
		if(temptransitions!=void) then
			temptransitions.each{o | 
				var temp:FSM::Transition
				temp?=o
				if(temp!=void) then
					tempFsm.transitions.add(temp)
				end}
		end
	end
}

class unsetFsm inherits Adaptation{
	reference aFsm:pattern::FSM::Fsm
	reference astates:pattern::FSM::State[0..*]
	reference atransitions:pattern::FSM::Transition[0..*]

	operation check() : Boolean is do
		result:=(aFsm!=void)
	end

	operation execute() is do
		var tempFsm:FSM::Fsm
		tempFsm?=adapter.getRealObject(aFsm,false)
		var tempstates:Collection<kermeta::reflection::Object>
		tempstates?=adapter.getRealObject(astates,true)
		if(tempstates!=void) then
			tempstates.each{o | 
				var temp:FSM::State
				temp?=o
				if(temp!=void) then
					tempFsm.states.add(temp)
				end}
		end
		var temptransitions:Collection<kermeta::reflection::Object>
		temptransitions?=adapter.getRealObject(atransitions,true)
		if(temptransitions!=void) then
			temptransitions.each{o | 
				var temp:FSM::Transition
				temp?=o
				if(temp!=void) then
					tempFsm.transitions.remove(temp)
				end}
		end
	end
}

						}
	}
}