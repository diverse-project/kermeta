/* Authors: Brice Morin
 * Creation date: 
 * License: 
 * Copyright: IRISA Rennes - Equipe Projet INRIA Triskell
 */


package org;
require kermeta
require "platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.kmt"
require "platform:/resource/SmartAdapters/metamodel/domain/runtime/runtime.ecore"
require "platform:/resource/SmartAdapters/metamodel/domain/runtime/runtimePattern.ecore"

using kermeta::standard
using kermeta::utils
using patternframework
using org::smartadapters::core
using org::smartadapters::extension
using ecore
using org::smartadapters::utils

package smartadapters
{
	package core
	{
		@aspect "true"
		class Adapter 
		{
			operation initConvert(): Void is do
				stdio.write("Mapping MM\' to MM...")
				converter := Converter.new
				convert := Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>.new
				convert.put(pattern::runtime::System,runtime::System)
				convert.put(pattern::runtime::Configuration,runtime::Configuration)
				convert.put(pattern::runtime::CompositeComponentInstance,runtime::CompositeComponentInstance)
				convert.put(pattern::runtime::PrimitiveComponentInstance,runtime::PrimitiveComponentInstance)
				convert.put(pattern::runtime::SimpleBind,runtime::SimpleBind)
				convert.put(pattern::runtime::ExportBind,runtime::ExportBind)
				convert.put(pattern::type::ComponentType,type::ComponentType)
				convert.put(pattern::type::FunctionalService,type::FunctionalService)
				convert.put(pattern::type::ControlService,type::ControlService)
				convert.put(pattern::type::Operation,type::Operation)
				convert.put(pattern::type::Port,type::Port)
				converter.initConverter(convert)
				stdio.writeln("OK!")
			end
		}
		
	package adaptations
	{
		
		class CreateSystem inherits createAdaptation
		{
			attribute newSystem : pattern::runtime::System
					
			method check(): Boolean is do
				result := newSystem!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newSystem, void, isUnique)					
			end
		}

		class CloneSystem inherits cloneAdaptation
		{
			reference SystemToClone : pattern::runtime::System
			attribute clonedSystem : pattern::runtime::System
			
			method check(): Boolean is do
				result := SystemToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedSystem, SystemToClone, isUnique)
			end					
		}

		class SetSystem inherits setAdaptation
		{
			reference SystemToSet : pattern::runtime::System
			reference refconfigurations : pattern::runtime::Configuration[0..*]
			reference refcomponents : pattern::runtime::ComponentInstance[0..*]
			reference reftypes : pattern::type::ComponentType[0..*]
			reference refserviceDeclarations : pattern::type::Service[0..*]
			
			method check(): Boolean is do
				result := SystemToSet!=void
			end
			
			method execute(): Void is do
				var tempSystem : runtime::System
				tempSystem ?= adapter.getRealObject(SystemToSet,false)
				
				adapter.setMultipleProperty(tempSystem.configurations,refconfigurations)
				adapter.setMultipleProperty(tempSystem.components,refcomponents)
				adapter.setMultipleProperty(tempSystem.types,reftypes)
				adapter.setMultipleProperty(tempSystem.serviceDeclarations,refserviceDeclarations)
			end			
		}
		
		class UnsetSystem inherits unsetAdaptation
		{
			reference SystemToUnset : pattern::runtime::System
			reference refconfigurations : pattern::runtime::Configuration[0..*]
			reference refcomponents : pattern::runtime::ComponentInstance[0..*]
			reference reftypes : pattern::type::ComponentType[0..*]
			reference refserviceDeclarations : pattern::type::Service[0..*]
			
			method check(): Boolean is do
				result := SystemToUnset!=void
			end
			
			method execute(): Void is do
				var tempSystem : runtime::System
				tempSystem ?= adapter.getRealObject(SystemToUnset,false)
				
				adapter.unsetMultipleProperty(tempSystem.configurations,refconfigurations)
				adapter.unsetMultipleProperty(tempSystem.components,refcomponents)
				adapter.unsetMultipleProperty(tempSystem.types,reftypes)
				adapter.unsetMultipleProperty(tempSystem.serviceDeclarations,refserviceDeclarations)
			end
		}
		
		class CreateConfiguration inherits createAdaptation
		{
			attribute newConfiguration : pattern::runtime::Configuration
					
			method check(): Boolean is do
				result := newConfiguration!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newConfiguration, void, isUnique)					
			end
		}

		class CloneConfiguration inherits cloneAdaptation
		{
			reference ConfigurationToClone : pattern::runtime::Configuration
			attribute clonedConfiguration : pattern::runtime::Configuration
			
			method check(): Boolean is do
				result := ConfigurationToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedConfiguration, ConfigurationToClone, isUnique)
			end					
		}

		class SetConfiguration inherits setAdaptation
		{
			reference ConfigurationToSet : pattern::runtime::Configuration
			reference refcomponents : pattern::runtime::ComponentInstance[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := ConfigurationToSet!=void
			end
			
			method execute(): Void is do
				var tempConfiguration : runtime::Configuration
				tempConfiguration ?= adapter.getRealObject(ConfigurationToSet,false)
				
				adapter.setMultipleProperty(tempConfiguration.components,refcomponents)
				tempConfiguration.name ?= adapter.setSingleProperty(refname, tempConfiguration.name)
			end			
		}
		
		class UnsetConfiguration inherits unsetAdaptation
		{
			reference ConfigurationToUnset : pattern::runtime::Configuration
			reference refcomponents : pattern::runtime::ComponentInstance[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := ConfigurationToUnset!=void
			end
			
			method execute(): Void is do
				var tempConfiguration : runtime::Configuration
				tempConfiguration ?= adapter.getRealObject(ConfigurationToUnset,false)
				
				adapter.unsetMultipleProperty(tempConfiguration.components,refcomponents)
				tempConfiguration.name ?= adapter.unsetSingleProperty(refname, tempConfiguration.name)
			end
		}

		class SetComponentInstance inherits setAdaptation
		{
			reference ComponentInstanceToSet : pattern::runtime::ComponentInstance
			reference reftype : pattern::type::ComponentType
			reference refsuperComponents : pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings : pattern::runtime::Binding[0..*]
			reference refstate : EString
			reference refname : EString
			
			method check(): Boolean is do
				result := ComponentInstanceToSet!=void
			end
			
			method execute(): Void is do
				var tempComponentInstance : runtime::ComponentInstance
				tempComponentInstance ?= adapter.getRealObject(ComponentInstanceToSet,false)
				
				tempComponentInstance.type ?= adapter.setSingleProperty(reftype, tempComponentInstance.type)
				adapter.setMultipleProperty(tempComponentInstance.superComponents,refsuperComponents)
				adapter.setMultipleProperty(tempComponentInstance.bindings,refbindings)
				tempComponentInstance.state ?= adapter.setSingleProperty(refstate, tempComponentInstance.state)
				tempComponentInstance.name ?= adapter.setSingleProperty(refname, tempComponentInstance.name)
			end			
		}
		
		class UnsetComponentInstance inherits unsetAdaptation
		{
			reference ComponentInstanceToUnset : pattern::runtime::ComponentInstance
			reference reftype : pattern::type::ComponentType
			reference refsuperComponents : pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings : pattern::runtime::Binding[0..*]
			reference refstate : EString
			reference refname : EString
			
			method check(): Boolean is do
				result := ComponentInstanceToUnset!=void
			end
			
			method execute(): Void is do
				var tempComponentInstance : runtime::ComponentInstance
				tempComponentInstance ?= adapter.getRealObject(ComponentInstanceToUnset,false)
				
				tempComponentInstance.type ?= adapter.unsetSingleProperty(reftype, tempComponentInstance.type)
				adapter.unsetMultipleProperty(tempComponentInstance.superComponents,refsuperComponents)
				adapter.unsetMultipleProperty(tempComponentInstance.bindings,refbindings)
				tempComponentInstance.state ?= adapter.unsetSingleProperty(refstate, tempComponentInstance.state)
				tempComponentInstance.name ?= adapter.unsetSingleProperty(refname, tempComponentInstance.name)
			end
		}
		
		class CreateCompositeComponentInstance inherits createAdaptation
		{
			attribute newCompositeComponentInstance : pattern::runtime::CompositeComponentInstance
					
			method check(): Boolean is do
				result := newCompositeComponentInstance!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newCompositeComponentInstance, void, isUnique)					
			end
		}

		class CloneCompositeComponentInstance inherits cloneAdaptation
		{
			reference CompositeComponentInstanceToClone : pattern::runtime::CompositeComponentInstance
			attribute clonedCompositeComponentInstance : pattern::runtime::CompositeComponentInstance
			
			method check(): Boolean is do
				result := CompositeComponentInstanceToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedCompositeComponentInstance, CompositeComponentInstanceToClone, isUnique)
			end					
		}

		class SetCompositeComponentInstance inherits setAdaptation
		{
			reference CompositeComponentInstanceToSet : pattern::runtime::CompositeComponentInstance
			reference refsubComponents : pattern::runtime::ComponentInstance[0..*]
			reference reftype : pattern::type::ComponentType
			reference refsuperComponents : pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings : pattern::runtime::Binding[0..*]
			reference refstate : EString
			reference refname : EString
			
			method check(): Boolean is do
				result := CompositeComponentInstanceToSet!=void
			end
			
			method execute(): Void is do
				var tempCompositeComponentInstance : runtime::CompositeComponentInstance
				tempCompositeComponentInstance ?= adapter.getRealObject(CompositeComponentInstanceToSet,false)
				
				adapter.setMultipleProperty(tempCompositeComponentInstance.subComponents,refsubComponents)
				tempCompositeComponentInstance.type ?= adapter.setSingleProperty(reftype, tempCompositeComponentInstance.type)
				adapter.setMultipleProperty(tempCompositeComponentInstance.superComponents,refsuperComponents)
				adapter.setMultipleProperty(tempCompositeComponentInstance.bindings,refbindings)
				tempCompositeComponentInstance.state ?= adapter.setSingleProperty(refstate, tempCompositeComponentInstance.state)
				tempCompositeComponentInstance.name ?= adapter.setSingleProperty(refname, tempCompositeComponentInstance.name)
			end			
		}
		
		class UnsetCompositeComponentInstance inherits unsetAdaptation
		{
			reference CompositeComponentInstanceToUnset : pattern::runtime::CompositeComponentInstance
			reference refsubComponents : pattern::runtime::ComponentInstance[0..*]
			reference reftype : pattern::type::ComponentType
			reference refsuperComponents : pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings : pattern::runtime::Binding[0..*]
			reference refstate : EString
			reference refname : EString
			
			method check(): Boolean is do
				result := CompositeComponentInstanceToUnset!=void
			end
			
			method execute(): Void is do
				var tempCompositeComponentInstance : runtime::CompositeComponentInstance
				tempCompositeComponentInstance ?= adapter.getRealObject(CompositeComponentInstanceToUnset,false)
				
				adapter.unsetMultipleProperty(tempCompositeComponentInstance.subComponents,refsubComponents)
				tempCompositeComponentInstance.type ?= adapter.unsetSingleProperty(reftype, tempCompositeComponentInstance.type)
				adapter.unsetMultipleProperty(tempCompositeComponentInstance.superComponents,refsuperComponents)
				adapter.unsetMultipleProperty(tempCompositeComponentInstance.bindings,refbindings)
				tempCompositeComponentInstance.state ?= adapter.unsetSingleProperty(refstate, tempCompositeComponentInstance.state)
				tempCompositeComponentInstance.name ?= adapter.unsetSingleProperty(refname, tempCompositeComponentInstance.name)
			end
		}
		
		class CreatePrimitiveComponentInstance inherits createAdaptation
		{
			attribute newPrimitiveComponentInstance : pattern::runtime::PrimitiveComponentInstance
					
			method check(): Boolean is do
				result := newPrimitiveComponentInstance!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newPrimitiveComponentInstance, void, isUnique)					
			end
		}

		class ClonePrimitiveComponentInstance inherits cloneAdaptation
		{
			reference PrimitiveComponentInstanceToClone : pattern::runtime::PrimitiveComponentInstance
			attribute clonedPrimitiveComponentInstance : pattern::runtime::PrimitiveComponentInstance
			
			method check(): Boolean is do
				result := PrimitiveComponentInstanceToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedPrimitiveComponentInstance, PrimitiveComponentInstanceToClone, isUnique)
			end					
		}

		class SetPrimitiveComponentInstance inherits setAdaptation
		{
			reference PrimitiveComponentInstanceToSet : pattern::runtime::PrimitiveComponentInstance
			reference reftype : pattern::type::ComponentType
			reference refsuperComponents : pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings : pattern::runtime::Binding[0..*]
			reference refstate : EString
			reference refname : EString
			
			method check(): Boolean is do
				result := PrimitiveComponentInstanceToSet!=void
			end
			
			method execute(): Void is do
				var tempPrimitiveComponentInstance : runtime::PrimitiveComponentInstance
				tempPrimitiveComponentInstance ?= adapter.getRealObject(PrimitiveComponentInstanceToSet,false)
				
				tempPrimitiveComponentInstance.type ?= adapter.setSingleProperty(reftype, tempPrimitiveComponentInstance.type)
				adapter.setMultipleProperty(tempPrimitiveComponentInstance.superComponents,refsuperComponents)
				adapter.setMultipleProperty(tempPrimitiveComponentInstance.bindings,refbindings)
				tempPrimitiveComponentInstance.state ?= adapter.setSingleProperty(refstate, tempPrimitiveComponentInstance.state)
				tempPrimitiveComponentInstance.name ?= adapter.setSingleProperty(refname, tempPrimitiveComponentInstance.name)
			end			
		}
		
		class UnsetPrimitiveComponentInstance inherits unsetAdaptation
		{
			reference PrimitiveComponentInstanceToUnset : pattern::runtime::PrimitiveComponentInstance
			reference reftype : pattern::type::ComponentType
			reference refsuperComponents : pattern::runtime::CompositeComponentInstance[0..*]
			reference refbindings : pattern::runtime::Binding[0..*]
			reference refstate : EString
			reference refname : EString
			
			method check(): Boolean is do
				result := PrimitiveComponentInstanceToUnset!=void
			end
			
			method execute(): Void is do
				var tempPrimitiveComponentInstance : runtime::PrimitiveComponentInstance
				tempPrimitiveComponentInstance ?= adapter.getRealObject(PrimitiveComponentInstanceToUnset,false)
				
				tempPrimitiveComponentInstance.type ?= adapter.unsetSingleProperty(reftype, tempPrimitiveComponentInstance.type)
				adapter.unsetMultipleProperty(tempPrimitiveComponentInstance.superComponents,refsuperComponents)
				adapter.unsetMultipleProperty(tempPrimitiveComponentInstance.bindings,refbindings)
				tempPrimitiveComponentInstance.state ?= adapter.unsetSingleProperty(refstate, tempPrimitiveComponentInstance.state)
				tempPrimitiveComponentInstance.name ?= adapter.unsetSingleProperty(refname, tempPrimitiveComponentInstance.name)
			end
		}

		class SetBinding inherits setAdaptation
		{
			reference BindingToSet : pattern::runtime::Binding
			reference refportA : pattern::type::Port
			reference refportB : pattern::type::Port
			
			method check(): Boolean is do
				result := BindingToSet!=void
			end
			
			method execute(): Void is do
				var tempBinding : runtime::Binding
				tempBinding ?= adapter.getRealObject(BindingToSet,false)
				
				tempBinding.portA ?= adapter.setSingleProperty(refportA, tempBinding.portA)
				tempBinding.portB ?= adapter.setSingleProperty(refportB, tempBinding.portB)
			end			
		}
		
		class UnsetBinding inherits unsetAdaptation
		{
			reference BindingToUnset : pattern::runtime::Binding
			reference refportA : pattern::type::Port
			reference refportB : pattern::type::Port
			
			method check(): Boolean is do
				result := BindingToUnset!=void
			end
			
			method execute(): Void is do
				var tempBinding : runtime::Binding
				tempBinding ?= adapter.getRealObject(BindingToUnset,false)
				
				tempBinding.portA ?= adapter.unsetSingleProperty(refportA, tempBinding.portA)
				tempBinding.portB ?= adapter.unsetSingleProperty(refportB, tempBinding.portB)
			end
		}
		
		class CreateSimpleBind inherits createAdaptation
		{
			attribute newSimpleBind : pattern::runtime::SimpleBind
					
			method check(): Boolean is do
				result := newSimpleBind!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newSimpleBind, void, isUnique)					
			end
		}

		class CloneSimpleBind inherits cloneAdaptation
		{
			reference SimpleBindToClone : pattern::runtime::SimpleBind
			attribute clonedSimpleBind : pattern::runtime::SimpleBind
			
			method check(): Boolean is do
				result := SimpleBindToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedSimpleBind, SimpleBindToClone, isUnique)
			end					
		}

		class SetSimpleBind inherits setAdaptation
		{
			reference SimpleBindToSet : pattern::runtime::SimpleBind
			reference refcptA : pattern::runtime::ComponentInstance
			reference refcptB : pattern::runtime::ComponentInstance
			reference refportA : pattern::type::Port
			reference refportB : pattern::type::Port
			
			method check(): Boolean is do
				result := SimpleBindToSet!=void
			end
			
			method execute(): Void is do
				var tempSimpleBind : runtime::SimpleBind
				tempSimpleBind ?= adapter.getRealObject(SimpleBindToSet,false)
				
				tempSimpleBind.cptA ?= adapter.setSingleProperty(refcptA, tempSimpleBind.cptA)
				tempSimpleBind.cptB ?= adapter.setSingleProperty(refcptB, tempSimpleBind.cptB)
				tempSimpleBind.portA ?= adapter.setSingleProperty(refportA, tempSimpleBind.portA)
				tempSimpleBind.portB ?= adapter.setSingleProperty(refportB, tempSimpleBind.portB)
			end			
		}
		
		class UnsetSimpleBind inherits unsetAdaptation
		{
			reference SimpleBindToUnset : pattern::runtime::SimpleBind
			reference refcptA : pattern::runtime::ComponentInstance
			reference refcptB : pattern::runtime::ComponentInstance
			reference refportA : pattern::type::Port
			reference refportB : pattern::type::Port
			
			method check(): Boolean is do
				result := SimpleBindToUnset!=void
			end
			
			method execute(): Void is do
				var tempSimpleBind : runtime::SimpleBind
				tempSimpleBind ?= adapter.getRealObject(SimpleBindToUnset,false)
				
				tempSimpleBind.cptA ?= adapter.unsetSingleProperty(refcptA, tempSimpleBind.cptA)
				tempSimpleBind.cptB ?= adapter.unsetSingleProperty(refcptB, tempSimpleBind.cptB)
				tempSimpleBind.portA ?= adapter.unsetSingleProperty(refportA, tempSimpleBind.portA)
				tempSimpleBind.portB ?= adapter.unsetSingleProperty(refportB, tempSimpleBind.portB)
			end
		}
		
		class CreateExportBind inherits createAdaptation
		{
			attribute newExportBind : pattern::runtime::ExportBind
					
			method check(): Boolean is do
				result := newExportBind!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newExportBind, void, isUnique)					
			end
		}

		class CloneExportBind inherits cloneAdaptation
		{
			reference ExportBindToClone : pattern::runtime::ExportBind
			attribute clonedExportBind : pattern::runtime::ExportBind
			
			method check(): Boolean is do
				result := ExportBindToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedExportBind, ExportBindToClone, isUnique)
			end					
		}

		class SetExportBind inherits setAdaptation
		{
			reference ExportBindToSet : pattern::runtime::ExportBind
			reference refcptA : pattern::runtime::ComponentInstance
			reference refcptB : pattern::runtime::ComponentInstance
			reference refportA : pattern::type::Port
			reference refportB : pattern::type::Port
			
			method check(): Boolean is do
				result := ExportBindToSet!=void
			end
			
			method execute(): Void is do
				var tempExportBind : runtime::ExportBind
				tempExportBind ?= adapter.getRealObject(ExportBindToSet,false)
				
				tempExportBind.cptA ?= adapter.setSingleProperty(refcptA, tempExportBind.cptA)
				tempExportBind.cptB ?= adapter.setSingleProperty(refcptB, tempExportBind.cptB)
				tempExportBind.portA ?= adapter.setSingleProperty(refportA, tempExportBind.portA)
				tempExportBind.portB ?= adapter.setSingleProperty(refportB, tempExportBind.portB)
			end			
		}
		
		class UnsetExportBind inherits unsetAdaptation
		{
			reference ExportBindToUnset : pattern::runtime::ExportBind
			reference refcptA : pattern::runtime::ComponentInstance
			reference refcptB : pattern::runtime::ComponentInstance
			reference refportA : pattern::type::Port
			reference refportB : pattern::type::Port
			
			method check(): Boolean is do
				result := ExportBindToUnset!=void
			end
			
			method execute(): Void is do
				var tempExportBind : runtime::ExportBind
				tempExportBind ?= adapter.getRealObject(ExportBindToUnset,false)
				
				tempExportBind.cptA ?= adapter.unsetSingleProperty(refcptA, tempExportBind.cptA)
				tempExportBind.cptB ?= adapter.unsetSingleProperty(refcptB, tempExportBind.cptB)
				tempExportBind.portA ?= adapter.unsetSingleProperty(refportA, tempExportBind.portA)
				tempExportBind.portB ?= adapter.unsetSingleProperty(refportB, tempExportBind.portB)
			end
		}
		
		class CreateComponentType inherits createAdaptation
		{
			attribute newComponentType : pattern::type::ComponentType
					
			method check(): Boolean is do
				result := newComponentType!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newComponentType, void, isUnique)					
			end
		}

		class CloneComponentType inherits cloneAdaptation
		{
			reference ComponentTypeToClone : pattern::type::ComponentType
			attribute clonedComponentType : pattern::type::ComponentType
			
			method check(): Boolean is do
				result := ComponentTypeToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedComponentType, ComponentTypeToClone, isUnique)
			end					
		}

		class SetComponentType inherits setAdaptation
		{
			reference ComponentTypeToSet : pattern::type::ComponentType
			reference refports : pattern::type::Port[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := ComponentTypeToSet!=void
			end
			
			method execute(): Void is do
				var tempComponentType : type::ComponentType
				tempComponentType ?= adapter.getRealObject(ComponentTypeToSet,false)
				
				adapter.setMultipleProperty(tempComponentType.ports,refports)
				tempComponentType.name ?= adapter.setSingleProperty(refname, tempComponentType.name)
			end			
		}
		
		class UnsetComponentType inherits unsetAdaptation
		{
			reference ComponentTypeToUnset : pattern::type::ComponentType
			reference refports : pattern::type::Port[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := ComponentTypeToUnset!=void
			end
			
			method execute(): Void is do
				var tempComponentType : type::ComponentType
				tempComponentType ?= adapter.getRealObject(ComponentTypeToUnset,false)
				
				adapter.unsetMultipleProperty(tempComponentType.ports,refports)
				tempComponentType.name ?= adapter.unsetSingleProperty(refname, tempComponentType.name)
			end
		}

		class SetService inherits setAdaptation
		{
			reference ServiceToSet : pattern::type::Service
			reference refoperations : pattern::type::Operation[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := ServiceToSet!=void
			end
			
			method execute(): Void is do
				var tempService : type::Service
				tempService ?= adapter.getRealObject(ServiceToSet,false)
				
				adapter.setMultipleProperty(tempService.operations,refoperations)
				tempService.name ?= adapter.setSingleProperty(refname, tempService.name)
			end			
		}
		
		class UnsetService inherits unsetAdaptation
		{
			reference ServiceToUnset : pattern::type::Service
			reference refoperations : pattern::type::Operation[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := ServiceToUnset!=void
			end
			
			method execute(): Void is do
				var tempService : type::Service
				tempService ?= adapter.getRealObject(ServiceToUnset,false)
				
				adapter.unsetMultipleProperty(tempService.operations,refoperations)
				tempService.name ?= adapter.unsetSingleProperty(refname, tempService.name)
			end
		}
		
		class CreateFunctionalService inherits createAdaptation
		{
			attribute newFunctionalService : pattern::type::FunctionalService
					
			method check(): Boolean is do
				result := newFunctionalService!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newFunctionalService, void, isUnique)					
			end
		}

		class CloneFunctionalService inherits cloneAdaptation
		{
			reference FunctionalServiceToClone : pattern::type::FunctionalService
			attribute clonedFunctionalService : pattern::type::FunctionalService
			
			method check(): Boolean is do
				result := FunctionalServiceToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedFunctionalService, FunctionalServiceToClone, isUnique)
			end					
		}

		class SetFunctionalService inherits setAdaptation
		{
			reference FunctionalServiceToSet : pattern::type::FunctionalService
			reference refoperations : pattern::type::Operation[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := FunctionalServiceToSet!=void
			end
			
			method execute(): Void is do
				var tempFunctionalService : type::FunctionalService
				tempFunctionalService ?= adapter.getRealObject(FunctionalServiceToSet,false)
				
				adapter.setMultipleProperty(tempFunctionalService.operations,refoperations)
				tempFunctionalService.name ?= adapter.setSingleProperty(refname, tempFunctionalService.name)
			end			
		}
		
		class UnsetFunctionalService inherits unsetAdaptation
		{
			reference FunctionalServiceToUnset : pattern::type::FunctionalService
			reference refoperations : pattern::type::Operation[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := FunctionalServiceToUnset!=void
			end
			
			method execute(): Void is do
				var tempFunctionalService : type::FunctionalService
				tempFunctionalService ?= adapter.getRealObject(FunctionalServiceToUnset,false)
				
				adapter.unsetMultipleProperty(tempFunctionalService.operations,refoperations)
				tempFunctionalService.name ?= adapter.unsetSingleProperty(refname, tempFunctionalService.name)
			end
		}
		
		class CreateControlService inherits createAdaptation
		{
			attribute newControlService : pattern::type::ControlService
					
			method check(): Boolean is do
				result := newControlService!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newControlService, void, isUnique)					
			end
		}

		class CloneControlService inherits cloneAdaptation
		{
			reference ControlServiceToClone : pattern::type::ControlService
			attribute clonedControlService : pattern::type::ControlService
			
			method check(): Boolean is do
				result := ControlServiceToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedControlService, ControlServiceToClone, isUnique)
			end					
		}

		class SetControlService inherits setAdaptation
		{
			reference ControlServiceToSet : pattern::type::ControlService
			reference refoperations : pattern::type::Operation[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := ControlServiceToSet!=void
			end
			
			method execute(): Void is do
				var tempControlService : type::ControlService
				tempControlService ?= adapter.getRealObject(ControlServiceToSet,false)
				
				adapter.setMultipleProperty(tempControlService.operations,refoperations)
				tempControlService.name ?= adapter.setSingleProperty(refname, tempControlService.name)
			end			
		}
		
		class UnsetControlService inherits unsetAdaptation
		{
			reference ControlServiceToUnset : pattern::type::ControlService
			reference refoperations : pattern::type::Operation[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := ControlServiceToUnset!=void
			end
			
			method execute(): Void is do
				var tempControlService : type::ControlService
				tempControlService ?= adapter.getRealObject(ControlServiceToUnset,false)
				
				adapter.unsetMultipleProperty(tempControlService.operations,refoperations)
				tempControlService.name ?= adapter.unsetSingleProperty(refname, tempControlService.name)
			end
		}
		
		class CreateOperation inherits createAdaptation
		{
			attribute newOperation : pattern::type::Operation
					
			method check(): Boolean is do
				result := newOperation!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newOperation, void, isUnique)					
			end
		}

		class CloneOperation inherits cloneAdaptation
		{
			reference OperationToClone : pattern::type::Operation
			attribute clonedOperation : pattern::type::Operation
			
			method check(): Boolean is do
				result := OperationToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedOperation, OperationToClone, isUnique)
			end					
		}

		class SetOperation inherits setAdaptation
		{
			reference OperationToSet : pattern::type::Operation
			reference refname : EString
			
			method check(): Boolean is do
				result := OperationToSet!=void
			end
			
			method execute(): Void is do
				var tempOperation : type::Operation
				tempOperation ?= adapter.getRealObject(OperationToSet,false)
				
				tempOperation.name ?= adapter.setSingleProperty(refname, tempOperation.name)
			end			
		}
		
		class UnsetOperation inherits unsetAdaptation
		{
			reference OperationToUnset : pattern::type::Operation
			reference refname : EString
			
			method check(): Boolean is do
				result := OperationToUnset!=void
			end
			
			method execute(): Void is do
				var tempOperation : type::Operation
				tempOperation ?= adapter.getRealObject(OperationToUnset,false)
				
				tempOperation.name ?= adapter.unsetSingleProperty(refname, tempOperation.name)
			end
		}

		class SetDiVANamedElement inherits setAdaptation
		{
			reference DiVANamedElementToSet : pattern::type::DiVANamedElement
			reference refname : EString
			
			method check(): Boolean is do
				result := DiVANamedElementToSet!=void
			end
			
			method execute(): Void is do
				var tempDiVANamedElement : type::DiVANamedElement
				tempDiVANamedElement ?= adapter.getRealObject(DiVANamedElementToSet,false)
				
				tempDiVANamedElement.name ?= adapter.setSingleProperty(refname, tempDiVANamedElement.name)
			end			
		}
		
		class UnsetDiVANamedElement inherits unsetAdaptation
		{
			reference DiVANamedElementToUnset : pattern::type::DiVANamedElement
			reference refname : EString
			
			method check(): Boolean is do
				result := DiVANamedElementToUnset!=void
			end
			
			method execute(): Void is do
				var tempDiVANamedElement : type::DiVANamedElement
				tempDiVANamedElement ?= adapter.getRealObject(DiVANamedElementToUnset,false)
				
				tempDiVANamedElement.name ?= adapter.unsetSingleProperty(refname, tempDiVANamedElement.name)
			end
		}
		
		class CreatePort inherits createAdaptation
		{
			attribute newPort : pattern::type::Port
					
			method check(): Boolean is do
				result := newPort!=void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(newPort, void, isUnique)					
			end
		}

		class ClonePort inherits cloneAdaptation
		{
			reference PortToClone : pattern::type::Port
			attribute clonedPort : pattern::type::Port
			
			method check(): Boolean is do
				result := PortToClone!=void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(clonedPort, PortToClone, isUnique)
			end					
		}

		class SetPort inherits setAdaptation
		{
			reference PortToSet : pattern::type::Port
			reference refprovided : pattern::type::Service[0..*]
			reference refrequired : pattern::type::Service[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := PortToSet!=void
			end
			
			method execute(): Void is do
				var tempPort : type::Port
				tempPort ?= adapter.getRealObject(PortToSet,false)
				
				adapter.setMultipleProperty(tempPort.provided,refprovided)
				adapter.setMultipleProperty(tempPort.required,refrequired)
				tempPort.name ?= adapter.setSingleProperty(refname, tempPort.name)
			end			
		}
		
		class UnsetPort inherits unsetAdaptation
		{
			reference PortToUnset : pattern::type::Port
			reference refprovided : pattern::type::Service[0..*]
			reference refrequired : pattern::type::Service[0..*]
			reference refname : EString
			
			method check(): Boolean is do
				result := PortToUnset!=void
			end
			
			method execute(): Void is do
				var tempPort : type::Port
				tempPort ?= adapter.getRealObject(PortToUnset,false)
				
				adapter.unsetMultipleProperty(tempPort.provided,refprovided)
				adapter.unsetMultipleProperty(tempPort.required,refrequired)
				tempPort.name ?= adapter.unsetSingleProperty(refname, tempPort.name)
			end
		}
	}
}}