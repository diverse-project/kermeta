<?xml version="1.0" encoding="ASCII"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="org"
    nsURI="platform:/resource/SmartAdapters/metamodel/specific/simpleClassDiag_AOM_Framework.ecore"
    nsPrefix="org">
  <eAnnotations source="kermeta.req">
    <details key="platform:/plugin/fr.irisa.triskell.kermeta/lib/framework.km" value="platform:/plugin/fr.irisa.triskell.kermeta/lib/framework.km"/>
    <details key="platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.kmt"
        value="platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.kmt"/>
    <details key="platform:/resource/SmartAdapters/metamodel/domain/ClassMM.ecore"
        value="platform:/resource/SmartAdapters/metamodel/domain/ClassMM.ecore"/>
    <details key="platform:/resource/SmartAdapters/metamodel/domain/ClassMMPattern.ecore"
        value="platform:/resource/SmartAdapters/metamodel/domain/ClassMMPattern.ecore"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EDataType" name="Object" instanceClassName="java.lang.Object"/>
  <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean"/>
  <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer"/>
  <eSubpackages name="smartadapters" nsURI="platform:/resource/SmartAdapters/metamodel/specific/simpleClassDiag_AOM_Framework.ecore#//smartadapters"
      nsPrefix="smartadapters">
    <eSubpackages name="core" nsURI="platform:/resource/SmartAdapters/metamodel/specific/simpleClassDiag_AOM_Framework.ecore#//smartadapters/core"
        nsPrefix="core">
      <eClassifiers xsi:type="ecore:EClass" name="Adapter">
        <eOperations name="initConvert">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;stdio.write(&quot;Mapping MM' to MM...&quot;)&#xA;&#x9;convert := kermeta::utils::Hashtable&lt;kermeta::reflection::Class, kermeta::reflection::Class>.new&#xA;&#x9;convert.put(pattern::ClassMM::NamedElement, ClassMM::NamedElement)&#xA;&#x9;convert.put(pattern::ClassMM::Classifier, ClassMM::Classifier)&#xA;&#x9;convert.put(pattern::ClassMM::Attribute, ClassMM::Attribute)&#xA;&#x9;convert.put(pattern::ClassMM::Class, ClassMM::Class)&#xA;&#x9;convert.put(pattern::ClassMM::Association, ClassMM::Association)&#xA;&#x9;convert.put(pattern::ClassMM::PrimitiveDataType, ClassMM::PrimitiveDataType)&#xA;&#x9;convert.put(pattern::ClassMM::ClassModel, ClassMM::ClassModel)&#xA;end"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="apply" ordered="false">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;binding := b&#xA;&#x9;if clone.equals(void) then&#xA;&#x9;&#x9;initClone&#xA;&#xA;&#x9;end&#xA;&#x9;adapt.each{a | a.execute}&#xA;&#x9;updateClones&#xA;end"/>
          </eAnnotations>
          <eParameters name="b" eType="ecore:EClass ../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//utils/Hashtable">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="Object"/>
              <details key="1" value="Object"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="initClone" ordered="false">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;converter := utils::Converter.new&#xA;&#x9;clone := kermeta::utils::Hashtable&lt;kermeta::standard::Object, kermeta::standard::Object>.new&#xA;&#x9;cloned := kermeta::standard::Set&lt;kermeta::standard::Object>.new&#xA;&#x9;created := kermeta::utils::Hashtable&lt;kermeta::standard::Object, kermeta::standard::Object>.new&#xA;&#x9;if aspect.structure.isNotEqual(void) then&#xA;&#x9;&#x9;aspect.structure.content.each{elt | do&#xA;&#x9;&#x9;&#x9;&#x9;var newCloned : kermeta::standard::Object&#xA;&#x9;&#x9;&#x9;&#x9;newCloned := converter.convert(kermeta::standard::Object.clone(elt), convert)&#xA;&#x9;&#x9;&#x9;&#x9;if newCloned.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;clone.put(elt, newCloned)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   initClone must be called before the first binding&#xD;&#xA;   */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="updateClones" ordered="false">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if aspect.structure.isNotEqual(void) then&#xA;&#x9;&#x9;aspect.structure.content.each{o | if not (aspect.persistent.contains(o)) then&#xA;&#x9;&#x9;&#x9;&#x9;updateClone(o)&#xA;&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   updateClone must be called after every binding&#xD;&#xA;   */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="updateClone" ordered="false">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;clone.remove(pObj)&#xA;&#x9;converter.deleteConverted(pObj)&#xA;&#x9;var newCloned : kermeta::standard::Object&#xA;&#x9;newCloned := converter.convert(kermeta::standard::Object.clone(pObj), convert)&#xA;&#x9;if newCloned.isNotEqual(void) then&#xA;&#x9;&#x9;clone.put(pObj, newCloned)&#xA;&#xA;&#x9;end&#xA;end"/>
          </eAnnotations>
          <eParameters name="pObj" eType="#//Object"/>
        </eOperations>
        <eOperations name="getRealObject" eType="#//Object">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if isCollect then&#xA;&#x9;&#x9;var col : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;col ?= obj&#xA;&#x9;&#x9;var res : kermeta::standard::Set&lt;kermeta::standard::Object> init kermeta::standard::Set&lt;kermeta::standard::Object>.new&#xA;&#x9;&#x9;col.each{o | res.add(getRealObject(o, false))}&#xA;&#x9;&#x9;result := res&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var realObj : kermeta::standard::Object&#xA;&#x9;&#x9;realObj ?= clone.getValue(obj)&#xA;&#x9;&#x9;if realObj.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;result := realObj&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;realObj ?= binding.getValue(obj)&#xA;&#x9;&#x9;&#x9;if realObj.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;result := realObj&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;realObj ?= created.getValue(obj)&#xA;&#x9;&#x9;&#x9;&#x9;if realObj.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result := realObj&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var pObj : patternframework::PObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pObj ?= obj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if pObj.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result := converter.convert(kermeta::standard::Object.clone(obj), convert)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result := obj&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   returns the PObject that is actually in the base model&#xD;&#xA;    - a model base element&#xD;&#xA;   or - a clone of an aspect element already inserted in the base model&#xD;&#xA;   or  - the element itself (composition of two models without using pattern matching)&#xD;&#xA;   */"/>
          </eAnnotations>
          <eParameters name="obj" eType="#//Object"/>
          <eParameters name="isCollect" eType="#//Boolean"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="aspect" lowerBound="1"
            eType="#//smartadapters/core/Aspect" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="adapt" upperBound="-1"
            eType="#//smartadapters/core/Adaptation" containment="true" eOpposite="#//smartadapters/core/Adaptation/adapter"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clone" eType="ecore:EClass ../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//utils/Hashtable"
            containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   key : aspect element&#xD;&#xA;   value : associated clone&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="Object"/>
            <details key="1" value="Object"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="cloned" eType="ecore:EClass ../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//standard/Set"
            containment="true">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="Object"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="binding" eType="ecore:EClass ../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//utils/Hashtable"
            containment="true">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="Object"/>
            <details key="1" value="Object"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="convert" eType="ecore:EClass ../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//utils/Hashtable"
            containment="true">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="kermeta::reflection::Class"/>
            <details key="1" value="kermeta::reflection::Class"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="created" eType="ecore:EClass ../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//utils/Hashtable"
            containment="true">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="Object"/>
            <details key="1" value="Object"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="converter" eType="ecore:EClass platform:/resource/SmartAdapters/metamodel/specific//converter.ecore#//Converter"
            containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Aspect">
        <eStructuralFeatures xsi:type="ecore:EReference" name="template" eType="ecore:EClass ../../../fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/metamodel/PatternFramework.ecore#//ModelPattern"
            containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="structure" lowerBound="1"
            eType="ecore:EClass ../../../fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/metamodel/PatternFramework.ecore#//PModel"
            containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="persistent" upperBound="-1"
            eType="ecore:EClass ../../../fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/metamodel/PatternFramework.ecore#//PObject">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   persistent refers to aspectual PObject that must not be&#xD;&#xA;   cloned between two bindings&#xD;&#xA;   TODO : contraints...&#xD;&#xA;   */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Adaptation" abstract="true" eSuperTypes="#//smartadapters/extension/AdapterElement">
        <eOperations name="check" eType="#//Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="execute">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;   Execute the adaptation for a given binding&#xD;&#xA;   Sub-classes must implement this method&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="checking" value="check"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="adapter" lowerBound="1"
            eType="#//smartadapters/core/Adapter" eOpposite="#//smartadapters/core/Adapter/adapt"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="makeUnique" eSuperTypes="#//smartadapters/core/Adaptation">
        <eOperations name="check" eType="#//Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := (element.isNotEqual(void)) and (adapter.aspect.structure.content.contains(element))&#xA;end"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="execute">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;adapter.aspect.persistent.add(element)&#xA;end"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="element" lowerBound="1"
            eType="ecore:EClass ../../../fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/metamodel/PatternFramework.ecore#//PObject"/>
      </eClassifiers>
      <eSubpackages name="adaptations" nsURI="platform:/resource/SmartAdapters/metamodel/specific/simpleClassDiag_AOM_Framework.ecore#//smartadapters/core/adaptations"
          nsPrefix="adaptations">
        <eClassifiers xsi:type="ecore:EClass" name="createNamedElement" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newNamedElement.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (adapter.created.getValue(newNamedElement).equals(void)) or (not (isUnique)) then&#xA;&#x9;&#x9;var realNamedElement : ClassMM::NamedElement&#xA;&#x9;&#x9;realNamedElement ?= adapter.converter.convert(kermeta::standard::Object.clone(newNamedElement), adapter.convert)&#xA;&#x9;&#x9;adapter.created.put(newNamedElement, realNamedElement)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newNamedElement"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/NamedElement"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="cloneNamedElement" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newNamedElement.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var clonedNamedElement : ClassMM::NamedElement&#xA;&#x9;var temp : ClassMM::NamedElement&#xA;&#x9;temp ?= adapter.getRealObject(newNamedElement, false)&#xA;&#x9;if isUnique then&#xA;&#x9;&#x9;if not (adapter.cloned.exists{o | o.equals(temp)}) then&#xA;&#x9;&#x9;&#x9;clonedNamedElement ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;&#x9;adapter.clone.put(realNamedElement, clonedNamedElement)&#xA;&#x9;&#x9;&#x9;adapter.cloned.add(temp)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;clonedNamedElement ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;adapter.clone.put(realNamedElement, clonedNamedElement)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newNamedElement"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/NamedElement"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="realNamedElement"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/NamedElement"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="setNamedElement" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aNamedElement.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempNamedElement : ClassMM::NamedElement&#xA;&#x9;tempNamedElement ?= adapter.getRealObject(aNamedElement, false)&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempNamedElement.name := tempname&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aNamedElement" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/NamedElement"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="unsetNamedElement" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aNamedElement.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempNamedElement : ClassMM::NamedElement&#xA;&#x9;tempNamedElement ?= adapter.getRealObject(aNamedElement, false)&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempNamedElement.name := void&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aNamedElement" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/NamedElement"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="createClassifier" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newNamedElement.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (adapter.created.getValue(newNamedElement).equals(void)) or (not (isUnique)) then&#xA;&#x9;&#x9;var realNamedElement : ClassMM::NamedElement&#xA;&#x9;&#x9;realNamedElement ?= adapter.converter.convert(kermeta::standard::Object.clone(newNamedElement), adapter.convert)&#xA;&#x9;&#x9;adapter.created.put(newNamedElement, realNamedElement)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newNamedElement"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/NamedElement"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="cloneClassifier" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newNamedElement.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var clonedNamedElement : ClassMM::NamedElement&#xA;&#x9;var temp : ClassMM::NamedElement&#xA;&#x9;temp ?= adapter.getRealObject(newNamedElement, false)&#xA;&#x9;if isUnique then&#xA;&#x9;&#x9;if not (adapter.cloned.exists{o | o.equals(temp)}) then&#xA;&#x9;&#x9;&#x9;clonedNamedElement ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;&#x9;adapter.clone.put(realNamedElement, clonedNamedElement)&#xA;&#x9;&#x9;&#x9;adapter.cloned.add(temp)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;clonedNamedElement ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;adapter.clone.put(realNamedElement, clonedNamedElement)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newNamedElement"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/NamedElement"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="realNamedElement"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/NamedElement"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="setClassifier" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aClassifier.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempClassifier : ClassMM::Classifier&#xA;&#x9;tempClassifier ?= adapter.getRealObject(aClassifier, false)&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempClassifier.name := tempname&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aClassifier" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Classifier"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="unsetClassifier" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aClassifier.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempClassifier : ClassMM::Classifier&#xA;&#x9;tempClassifier ?= adapter.getRealObject(aClassifier, false)&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempClassifier.name := void&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aClassifier" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Classifier"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="createAttribute" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newAttribute.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (adapter.created.getValue(newAttribute).equals(void)) or (not (isUnique)) then&#xA;&#x9;&#x9;var realAttribute : ClassMM::Attribute&#xA;&#x9;&#x9;realAttribute ?= adapter.converter.convert(kermeta::standard::Object.clone(newAttribute), adapter.convert)&#xA;&#x9;&#x9;adapter.created.put(newAttribute, realAttribute)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newAttribute" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Attribute"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="cloneAttribute" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newAttribute.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var clonedAttribute : ClassMM::Attribute&#xA;&#x9;var temp : ClassMM::Attribute&#xA;&#x9;temp ?= adapter.getRealObject(newAttribute, false)&#xA;&#x9;if isUnique then&#xA;&#x9;&#x9;if not (adapter.cloned.exists{o | o.equals(temp)}) then&#xA;&#x9;&#x9;&#x9;clonedAttribute ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;&#x9;adapter.clone.put(realAttribute, clonedAttribute)&#xA;&#x9;&#x9;&#x9;adapter.cloned.add(temp)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;clonedAttribute ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;adapter.clone.put(realAttribute, clonedAttribute)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newAttribute" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Attribute"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="realAttribute" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Attribute"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="setAttribute" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aAttribute.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempAttribute : ClassMM::Attribute&#xA;&#x9;tempAttribute ?= adapter.getRealObject(aAttribute, false)&#xA;&#x9;var temptype : ClassMM::Classifier&#xA;&#x9;temptype ?= adapter.getRealObject(atype, false)&#xA;&#x9;if temptype.isNotEqual(void) then&#xA;&#x9;&#x9;tempAttribute.type := temptype&#xA;&#xA;&#x9;end&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempAttribute.name := tempname&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aAttribute" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Attribute"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="atype" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Classifier"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="unsetAttribute" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aAttribute.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempAttribute : ClassMM::Attribute&#xA;&#x9;tempAttribute ?= adapter.getRealObject(aAttribute, false)&#xA;&#x9;var temptype : ClassMM::Classifier&#xA;&#x9;temptype ?= adapter.getRealObject(atype, false)&#xA;&#x9;if temptype.isNotEqual(void) then&#xA;&#x9;&#x9;tempAttribute.type := temptype&#xA;&#xA;&#x9;end&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempAttribute.name := void&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aAttribute" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Attribute"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="atype" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Classifier"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="createClass" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newClass.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (adapter.created.getValue(newClass).equals(void)) or (not (isUnique)) then&#xA;&#x9;&#x9;var realClass : ClassMM::Class&#xA;&#x9;&#x9;realClass ?= adapter.converter.convert(kermeta::standard::Object.clone(newClass), adapter.convert)&#xA;&#x9;&#x9;adapter.created.put(newClass, realClass)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newClass" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="cloneClass" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newClass.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var clonedClass : ClassMM::Class&#xA;&#x9;var temp : ClassMM::Class&#xA;&#x9;temp ?= adapter.getRealObject(newClass, false)&#xA;&#x9;if isUnique then&#xA;&#x9;&#x9;if not (adapter.cloned.exists{o | o.equals(temp)}) then&#xA;&#x9;&#x9;&#x9;clonedClass ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;&#x9;adapter.clone.put(realClass, clonedClass)&#xA;&#x9;&#x9;&#x9;adapter.cloned.add(temp)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;clonedClass ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;adapter.clone.put(realClass, clonedClass)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newClass" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="realClass" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="setClass" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aClass.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempClass : ClassMM::Class&#xA;&#x9;tempClass ?= adapter.getRealObject(aClass, false)&#xA;&#x9;var tempattributes : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;tempattributes ?= adapter.getRealObject(aattributes, true)&#xA;&#x9;if tempattributes.isNotEqual(void) then&#xA;&#x9;&#x9;tempattributes.each{o | do&#xA;&#x9;&#x9;&#x9;&#x9;var temp : ClassMM::Attribute&#xA;&#x9;&#x9;&#x9;&#x9;temp ?= o&#xA;&#x9;&#x9;&#x9;&#x9;if temp.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tempClass.attributes.add(temp)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;var tempsuper : ClassMM::Class&#xA;&#x9;tempsuper ?= adapter.getRealObject(asuper, false)&#xA;&#x9;if tempsuper.isNotEqual(void) then&#xA;&#x9;&#x9;tempClass.~super := tempsuper&#xA;&#xA;&#x9;end&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempClass.name := tempname&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aClass" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aattributes" upperBound="-1"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Attribute"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="asuper" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="unsetClass" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aClass.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempClass : ClassMM::Class&#xA;&#x9;tempClass ?= adapter.getRealObject(aClass, false)&#xA;&#x9;var tempattributes : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;tempattributes ?= adapter.getRealObject(aattributes, true)&#xA;&#x9;if tempattributes.isNotEqual(void) then&#xA;&#x9;&#x9;tempattributes.each{o | do&#xA;&#x9;&#x9;&#x9;&#x9;var temp : ClassMM::Attribute&#xA;&#x9;&#x9;&#x9;&#x9;temp ?= o&#xA;&#x9;&#x9;&#x9;&#x9;if temp.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tempClass.attributes.add(temp)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;var tempsuper : ClassMM::Class&#xA;&#x9;tempsuper ?= adapter.getRealObject(asuper, false)&#xA;&#x9;if tempsuper.isNotEqual(void) then&#xA;&#x9;&#x9;tempClass.~super := tempsuper&#xA;&#xA;&#x9;end&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempClass.name := void&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aClass" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aattributes" upperBound="-1"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Attribute"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="asuper" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="createAssociation" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newAssociation.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (adapter.created.getValue(newAssociation).equals(void)) or (not (isUnique)) then&#xA;&#x9;&#x9;var realAssociation : ClassMM::Association&#xA;&#x9;&#x9;realAssociation ?= adapter.converter.convert(kermeta::standard::Object.clone(newAssociation), adapter.convert)&#xA;&#x9;&#x9;adapter.created.put(newAssociation, realAssociation)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newAssociation" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Association"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="cloneAssociation" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newAssociation.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var clonedAssociation : ClassMM::Association&#xA;&#x9;var temp : ClassMM::Association&#xA;&#x9;temp ?= adapter.getRealObject(newAssociation, false)&#xA;&#x9;if isUnique then&#xA;&#x9;&#x9;if not (adapter.cloned.exists{o | o.equals(temp)}) then&#xA;&#x9;&#x9;&#x9;clonedAssociation ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;&#x9;adapter.clone.put(realAssociation, clonedAssociation)&#xA;&#x9;&#x9;&#x9;adapter.cloned.add(temp)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;clonedAssociation ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;adapter.clone.put(realAssociation, clonedAssociation)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newAssociation" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Association"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="realAssociation"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Association"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="setAssociation" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aAssociation.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempAssociation : ClassMM::Association&#xA;&#x9;tempAssociation ?= adapter.getRealObject(aAssociation, false)&#xA;&#x9;var tempsrc : ClassMM::Class&#xA;&#x9;tempsrc ?= adapter.getRealObject(asrc, false)&#xA;&#x9;if tempsrc.isNotEqual(void) then&#xA;&#x9;&#x9;tempAssociation.src := tempsrc&#xA;&#xA;&#x9;end&#xA;&#x9;var tempdest : ClassMM::Class&#xA;&#x9;tempdest ?= adapter.getRealObject(adest, false)&#xA;&#x9;if tempdest.isNotEqual(void) then&#xA;&#x9;&#x9;tempAssociation.dest := tempdest&#xA;&#xA;&#x9;end&#xA;&#x9;var templowerBound : ecore::EInt&#xA;&#x9;templowerBound ?= adapter.getRealObject(alowerBound, false)&#xA;&#x9;if (templowerBound) != (void) then&#xA;&#x9;&#x9;tempAssociation.lowerBound := templowerBound&#xA;&#xA;&#x9;end&#xA;&#x9;var tempupperBound : ecore::EInt&#xA;&#x9;tempupperBound ?= adapter.getRealObject(aupperBound, false)&#xA;&#x9;if (tempupperBound) != (void) then&#xA;&#x9;&#x9;tempAssociation.upperBound := tempupperBound&#xA;&#xA;&#x9;end&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempAssociation.name := tempname&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aAssociation" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Association"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="asrc" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="adest" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="alowerBound" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aupperBound" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="unsetAssociation" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aAssociation.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempAssociation : ClassMM::Association&#xA;&#x9;tempAssociation ?= adapter.getRealObject(aAssociation, false)&#xA;&#x9;var tempsrc : ClassMM::Class&#xA;&#x9;tempsrc ?= adapter.getRealObject(asrc, false)&#xA;&#x9;if tempsrc.isNotEqual(void) then&#xA;&#x9;&#x9;tempAssociation.src := tempsrc&#xA;&#xA;&#x9;end&#xA;&#x9;var tempdest : ClassMM::Class&#xA;&#x9;tempdest ?= adapter.getRealObject(adest, false)&#xA;&#x9;if tempdest.isNotEqual(void) then&#xA;&#x9;&#x9;tempAssociation.dest := tempdest&#xA;&#xA;&#x9;end&#xA;&#x9;var templowerBound : ecore::EInt&#xA;&#x9;templowerBound ?= adapter.getRealObject(alowerBound, false)&#xA;&#x9;if (templowerBound) != (void) then&#xA;&#x9;&#x9;tempAssociation.lowerBound := templowerBound&#xA;&#xA;&#x9;end&#xA;&#x9;var tempupperBound : ecore::EInt&#xA;&#x9;tempupperBound ?= adapter.getRealObject(aupperBound, false)&#xA;&#x9;if (tempupperBound) != (void) then&#xA;&#x9;&#x9;tempAssociation.upperBound := tempupperBound&#xA;&#xA;&#x9;end&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempAssociation.name := void&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aAssociation" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Association"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="asrc" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="adest" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Class"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="alowerBound" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aupperBound" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="createPrimitiveDataType" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newPrimitiveDataType.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (adapter.created.getValue(newPrimitiveDataType).equals(void)) or (not (isUnique)) then&#xA;&#x9;&#x9;var realPrimitiveDataType : ClassMM::PrimitiveDataType&#xA;&#x9;&#x9;realPrimitiveDataType ?= adapter.converter.convert(kermeta::standard::Object.clone(newPrimitiveDataType), adapter.convert)&#xA;&#x9;&#x9;adapter.created.put(newPrimitiveDataType, realPrimitiveDataType)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newPrimitiveDataType"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/PrimitiveDataType"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="clonePrimitiveDataType" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newPrimitiveDataType.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var clonedPrimitiveDataType : ClassMM::PrimitiveDataType&#xA;&#x9;var temp : ClassMM::PrimitiveDataType&#xA;&#x9;temp ?= adapter.getRealObject(newPrimitiveDataType, false)&#xA;&#x9;if isUnique then&#xA;&#x9;&#x9;if not (adapter.cloned.exists{o | o.equals(temp)}) then&#xA;&#x9;&#x9;&#x9;clonedPrimitiveDataType ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;&#x9;adapter.clone.put(realPrimitiveDataType, clonedPrimitiveDataType)&#xA;&#x9;&#x9;&#x9;adapter.cloned.add(temp)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;clonedPrimitiveDataType ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;adapter.clone.put(realPrimitiveDataType, clonedPrimitiveDataType)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newPrimitiveDataType"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/PrimitiveDataType"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="realPrimitiveDataType"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/PrimitiveDataType"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="setPrimitiveDataType" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aPrimitiveDataType.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempPrimitiveDataType : ClassMM::PrimitiveDataType&#xA;&#x9;tempPrimitiveDataType ?= adapter.getRealObject(aPrimitiveDataType, false)&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempPrimitiveDataType.name := tempname&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aPrimitiveDataType"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/PrimitiveDataType"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="unsetPrimitiveDataType" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aPrimitiveDataType.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempPrimitiveDataType : ClassMM::PrimitiveDataType&#xA;&#x9;tempPrimitiveDataType ?= adapter.getRealObject(aPrimitiveDataType, false)&#xA;&#x9;var tempname : ecore::EString&#xA;&#x9;tempname ?= adapter.getRealObject(aname, false)&#xA;&#x9;if tempname.isNotEqual(void) then&#xA;&#x9;&#x9;tempPrimitiveDataType.name := void&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aPrimitiveDataType"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/PrimitiveDataType"/>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aname" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="createClassModel" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newClassModel.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if (adapter.created.getValue(newClassModel).equals(void)) or (not (isUnique)) then&#xA;&#x9;&#x9;var realClassModel : ClassMM::ClassModel&#xA;&#x9;&#x9;realClassModel ?= adapter.converter.convert(kermeta::standard::Object.clone(newClassModel), adapter.convert)&#xA;&#x9;&#x9;adapter.created.put(newClassModel, realClassModel)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newClassModel" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/ClassModel"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="cloneClassModel" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := newClassModel.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var clonedClassModel : ClassMM::ClassModel&#xA;&#x9;var temp : ClassMM::ClassModel&#xA;&#x9;temp ?= adapter.getRealObject(newClassModel, false)&#xA;&#x9;if isUnique then&#xA;&#x9;&#x9;if not (adapter.cloned.exists{o | o.equals(temp)}) then&#xA;&#x9;&#x9;&#x9;clonedClassModel ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;&#x9;adapter.clone.put(realClassModel, clonedClassModel)&#xA;&#x9;&#x9;&#x9;adapter.cloned.add(temp)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;clonedClassModel ?= kermeta::standard::Object.clone(temp)&#xA;&#x9;&#x9;adapter.clone.put(realClassModel, clonedClassModel)&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="newClassModel" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/ClassModel"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="realClassModel" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/ClassModel"
              containment="true"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="setClassModel" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aClassModel.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempClassModel : ClassMM::ClassModel&#xA;&#x9;tempClassModel ?= adapter.getRealObject(aClassModel, false)&#xA;&#x9;var tempclassifier : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;tempclassifier ?= adapter.getRealObject(aclassifier, true)&#xA;&#x9;if tempclassifier.isNotEqual(void) then&#xA;&#x9;&#x9;tempclassifier.each{o | do&#xA;&#x9;&#x9;&#x9;&#x9;var temp : ClassMM::Classifier&#xA;&#x9;&#x9;&#x9;&#x9;temp ?= o&#xA;&#x9;&#x9;&#x9;&#x9;if temp.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tempClassModel.classifier.add(temp)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;var tempassociation : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;tempassociation ?= adapter.getRealObject(aassociation, true)&#xA;&#x9;if tempassociation.isNotEqual(void) then&#xA;&#x9;&#x9;tempassociation.each{o | do&#xA;&#x9;&#x9;&#x9;&#x9;var temp : ClassMM::Association&#xA;&#x9;&#x9;&#x9;&#x9;temp ?= o&#xA;&#x9;&#x9;&#x9;&#x9;if temp.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tempClassModel.association.add(temp)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aClassModel" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/ClassModel"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aclassifier" upperBound="-1"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Classifier"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aassociation" upperBound="-1"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Association"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="unsetClassModel" eSuperTypes="#//smartadapters/core/Adaptation">
          <eOperations name="check" eType="#//Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := aClassModel.isNotEqual(void)&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="execute" ordered="false">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var tempClassModel : ClassMM::ClassModel&#xA;&#x9;tempClassModel ?= adapter.getRealObject(aClassModel, false)&#xA;&#x9;var tempclassifier : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;tempclassifier ?= adapter.getRealObject(aclassifier, true)&#xA;&#x9;if tempclassifier.isNotEqual(void) then&#xA;&#x9;&#x9;tempclassifier.each{o | do&#xA;&#x9;&#x9;&#x9;&#x9;var temp : ClassMM::Classifier&#xA;&#x9;&#x9;&#x9;&#x9;temp ?= o&#xA;&#x9;&#x9;&#x9;&#x9;if temp.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tempClassModel.classifier.add(temp)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;var tempassociation : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;tempassociation ?= adapter.getRealObject(aassociation, true)&#xA;&#x9;if tempassociation.isNotEqual(void) then&#xA;&#x9;&#x9;tempassociation.each{o | do&#xA;&#x9;&#x9;&#x9;&#x9;var temp : ClassMM::Association&#xA;&#x9;&#x9;&#x9;&#x9;temp ?= o&#xA;&#x9;&#x9;&#x9;&#x9;if temp.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tempClassModel.association.remove(temp)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aClassModel" eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/ClassModel"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aclassifier" upperBound="-1"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Classifier"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="aassociation" upperBound="-1"
              eType="ecore:EClass ../domain/ClassMMPattern.ecore#//ClassMM/Association"/>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
    <eSubpackages name="extension" nsURI="platform:/resource/SmartAdapters/metamodel/specific/simpleClassDiag_AOM_Framework.ecore#//smartadapters/extension"
        nsPrefix="extension">
      <eClassifiers xsi:type="ecore:EClass" name="AdapterElement">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOptional" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DerivableAdapter" eSuperTypes="#//smartadapters/core/Adapter">
        <eOperations name="resolve" eType="#//smartadapters/core/Adapter">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if derivation.isApplicableTo(self) then&#xA;&#x9;&#x9;stdio.write(&quot;Deriving an adapter...&quot;)&#xA;&#x9;&#x9;var derivable : org::smartadapters::extension::DerivableAdapter init org::smartadapters::extension::DerivableAdapter.new&#xA;&#x9;&#x9;adapt.each{a | if (not (a.isOptional)) or (derivation.adaptations.contains(a)) then&#xA;&#x9;&#x9;&#x9;&#x9;derivable.adapt.add(a)&#xA;&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;alternatives.each{alt | if (alt.number) > (0) then&#xA;&#x9;&#x9;&#x9;&#x9;derivable.adapt.addAll(alt.selected)&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if not (alt.isOptional) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;derivable.alternatives.add(alt)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;if derivable.isConcretizable then&#xA;&#x9;&#x9;&#x9;var adapter : org::smartadapters::core::Adapter init org::smartadapters::core::Adapter.new&#xA;&#x9;&#x9;&#x9;var hash : kermeta::utils::Hashtable&lt;kermeta::reflection::Class, kermeta::reflection::Class> init kermeta::utils::Hashtable&lt;kermeta::reflection::Class, kermeta::reflection::Class>.new&#xA;&#x9;&#x9;&#x9;hash.put(derivable.getMetaClass, adapter.getMetaClass)&#xA;&#x9;&#x9;&#x9;derivable.adapt.each{a | hash.put(a.getMetaClass, a.getMetaClass)}&#xA;&#x9;&#x9;&#x9;if converter.equals(void) then&#xA;&#x9;&#x9;&#x9;&#x9;converter := utils::Converter.new&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;adapter ?= converter.convert(derivable, hash)&#xA;&#x9;&#x9;&#x9;result := adapter&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := derivable&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;stdio.writeln(&quot;  OK!&quot;)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var e : org::smartadapters::extension::Exception init org::smartadapters::extension::NonApplicableDerivation.new&#xA;&#x9;&#x9;e.display&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="overloadable" value="false"/>
          </eAnnotations>
          <eAnnotations source="kermeta.raisedExceptions" references="../../../../plugin/fr.irisa.triskell.kermeta/lib/framework.ecore#//exceptions/Exception">
            <details key="kermeta::exceptions::Exception" value="kermeta::exceptions::Exception"/>
          </eAnnotations>
          <eAnnotations source="kermeta.raisedExceptions" references="#//smartadapters/extension/Exception">
            <details key="org::smartadapters::extension::Exception" value="org::smartadapters::extension::Exception"/>
          </eAnnotations>
          <eParameters name="derivation" eType="#//smartadapters/extension/Derivation"/>
        </eOperations>
        <eOperations name="isReallyAbstract" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := (alternatives.size) &lt; (1)&#xA;end"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isConcretizable" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := (alternatives.size) == (0)&#xA;end"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="alternatives" upperBound="-1"
            eType="#//smartadapters/extension/EntityAlternative" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="options" upperBound="-1"
            eType="#//smartadapters/extension/AdapterElement" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="xor" upperBound="-1"
            eType="#//smartadapters/extension/MutualExclusion" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="and" upperBound="-1"
            eType="#//smartadapters/extension/Dependency" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EntityAlternative" eSuperTypes="#//smartadapters/extension/AdapterElement">
        <eOperations name="isDetermined" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var oldNumber : kermeta::standard::Integer init 0&#xA;&#x9;number := 0&#xA;&#x9;self.selected.clear&#xA;&#x9;error := false&#xA;&#x9;xor.each{elt | if not (error) then&#xA;&#x9;&#x9;&#x9;isSelected(elt, derivation)&#xA;&#x9;&#x9;&#x9;if (oldNumber) > (0) then&#xA;&#x9;&#x9;&#x9;&#x9;error := not ((oldNumber) == (number))&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;oldNumber := number&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end}&#xA;&#x9;stdio.writeln(&quot;number: &quot;.plus(number.toString))&#xA;&#x9;stdio.writeln(&quot;error: &quot;.plus(error.toString))&#xA;&#x9;if not (error) then&#xA;&#x9;&#x9;result := true&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var except : org::smartadapters::extension::Exception init org::smartadapters::extension::NonApplicableDerivation.new&#xA;&#x9;&#x9;except.display&#xA;&#x9;&#x9;raise except&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   Returns true if the alternative is correctly determined&#xD;&#xA;   (if one and only one variant is fully selected in the derivation)&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.raisedExceptions" references="#//smartadapters/extension/Exception">
            <details key="org::smartadapters::extension::Exception" value="org::smartadapters::extension::Exception"/>
          </eAnnotations>
          <eParameters name="derivation" eType="#//smartadapters/extension/Derivation"/>
        </eOperations>
        <eOperations name="isSelected" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var adapt : org::smartadapters::core::Adaptation init void&#xA;&#x9;adapt ?= elt&#xA;&#x9;if adapt.isNotEqual(void) then&#xA;&#x9;&#x9;if derivation.adaptations.contains(adapt) then&#xA;&#x9;&#x9;&#x9;number := (number) + (1)&#xA;&#x9;&#x9;&#x9;selected.add(adapt)&#xA;&#x9;&#x9;&#x9;result := true&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;&#x9;var c : org::smartadapters::extension::EntityConjunction init void&#xA;&#x9;c ?= elt&#xA;&#x9;if c.isNotEqual(void) then&#xA;&#x9;&#x9;var ~select : ecore::EBoolean init true&#xA;&#x9;&#x9;var option : ecore::EBoolean init false&#xA;&#x9;&#x9;var number : kermeta::standard::Integer init 0&#xA;&#x9;&#x9;c.~and.each{e | if not (e.isOptional) then&#xA;&#x9;&#x9;&#x9;&#x9;if isSelected(e, derivation) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;number := (number) + (1)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;~select := false&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if isSelected(e, derivation) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;number := (number) + (1)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;stdio.writeln(&quot;select:&quot;.plus(~select.toString))&#xA;&#x9;&#x9;if not (~select) then&#xA;&#x9;&#x9;&#x9;error := (number) != (0)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;&#x9;var altern : org::smartadapters::extension::EntityAlternative init void&#xA;&#x9;altern ?= elt&#xA;&#x9;if altern.isNotEqual(void) then&#xA;&#x9;&#x9;if altern.isDetermined(derivation) then&#xA;&#x9;&#x9;&#x9;result := true&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   Returns 1 if elt is selected in derivation, 0 otherwise&#xD;&#xA;   */"/>
          </eAnnotations>
          <eParameters name="elt" eType="#//smartadapters/extension/AdapterElement"/>
          <eParameters name="derivation" eType="#//smartadapters/extension/Derivation"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="xor" upperBound="-1"
            eType="#//smartadapters/extension/AdapterElement"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="number" eType="#//Integer">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="selected" upperBound="-1"
            eType="#//smartadapters/core/Adaptation"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="error" eType="#//Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EntityConjunction" eSuperTypes="#//smartadapters/extension/AdapterElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="and" upperBound="-1"
            eType="#//smartadapters/extension/AdapterElement"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MutualExclusion" eSuperTypes="#//smartadapters/extension/AdapterElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="entities" upperBound="-1"
            eType="#//smartadapters/extension/AdapterElement"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Dependency" eSuperTypes="#//smartadapters/extension/AdapterElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
            eType="#//smartadapters/extension/AdapterElement"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="dependencies" upperBound="-1"
            eType="#//smartadapters/extension/AdapterElement"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Derivation">
        <eOperations name="isApplicableTo" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;stdio.writeln(&quot;Checking derivation:&quot;)&#xA;&#x9;var isApplicable : ecore::EBoolean init true&#xA;&#x9;var elements : kermeta::standard::Set&lt;org::smartadapters::extension::AdapterElement> init kermeta::standard::Set&lt;org::smartadapters::extension::AdapterElement>.new&#xA;&#x9;adaptations.each{a | elements.add(a)}&#xA;&#x9;stdio.write(&quot;  - alternatives...&quot;)&#xA;&#x9;derivable.alternatives.each{alt | isApplicable := (isApplicable) and (alt.isDetermined(self))}&#xA;&#x9;if isApplicable then&#xA;&#x9;&#x9;stdio.writeln(&quot;  OK!&quot;)&#xA;&#x9;&#x9;stdio.write(&quot;  - mutual exclusions...&quot;)&#xA;&#x9;&#x9;derivable.xor.each{mutex | isApplicable := (isApplicable) and ((elements.intersection(mutex.entities).size) &lt;= (1))}&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;stdio.writeln(&quot;  Error!&quot;)&#xA;&#xA;&#x9;end&#xA;&#x9;if isApplicable then&#xA;&#x9;&#x9;stdio.writeln(&quot; OK!&quot;)&#xA;&#x9;&#x9;stdio.write(&quot;  - dependencies&quot;)&#xA;&#x9;&#x9;derivable.~and.each{dep | if elements.contains(dep.source) then&#xA;&#x9;&#x9;&#x9;&#x9;isApplicable := (isApplicable) and (elements.containsAll(dep.dependencies))&#xA;&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;stdio.writeln(&quot;  Error!&quot;)&#xA;&#xA;&#x9;end&#xA;&#x9;if isApplicable then&#xA;&#x9;&#x9;stdio.writeln(&quot;  OK!&quot;)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;stdio.writeln(&quot;  Error!&quot;)&#xA;&#xA;&#x9;end&#xA;&#x9;result := isApplicable&#xA;end"/>
          </eAnnotations>
          <eParameters name="derivable" eType="#//smartadapters/extension/DerivableAdapter"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="adaptations" upperBound="-1"
            eType="#//smartadapters/core/Adaptation"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Exception" abstract="true">
        <eOperations name="display" ordered="false">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MultipleVariants" eSuperTypes="#//smartadapters/extension/Exception">
        <eOperations name="display" ordered="false">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;stdio.writeln(&quot;Many variants of an alternative have been selected. Maybe the derivation is not well formed.&quot;)&#xA;end"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NonApplicableDerivation" eSuperTypes="#//smartadapters/extension/Exception">
        <eOperations name="display" ordered="false">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;stdio.writeln(&quot;Derivation is not applicable to DerivableAdapter. Maybe the derivation is not well formed.&quot;)&#xA;&#x9;stdio.writeln(&quot;Please check that the derivation respects all the explicit and implicit constraints...&quot;)&#xA;end"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IncompleteConjunction" eSuperTypes="#//smartadapters/extension/Exception">
        <eOperations name="display" ordered="false">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;stdio.writeln(&quot;At least one mandatory element of a conjunction is missing. Maybe the derivation is not well formed&quot;)&#xA;end"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </eSubpackages>
</ecore:EPackage>
