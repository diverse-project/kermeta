/* $Id: genericSmartAdapters.kmt,v 1.2 2007-07-26 07:15:24 bmorin Exp $
 * Creation date: July 17, 2007
 * License:
 * Copyright:
 * Authors: bmorin
 */

package org;

require "platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdaptersBase.kmt"
require "../../program/weaving/converter.kmt"

using kermeta::standard
using kermeta::utils
using kermeta::persistence
using kermeta::exceptions
using patternframework
using org::smartadapters::core
using org::smartadapters::extension
using ecore
using utils

package smartadapters
{
	package core
	{
		@aspect "true"
		class Adapter
		{	
			/**
			key : aspect element
			value : associated clone
			*/
			attribute clone : Hashtable</*P*/Object, Object>
			attribute cloned : Set<Object>
			attribute binding : Hashtable<Object, Object>
			attribute convert : Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>
			attribute created : Hashtable<Object, Object>
			attribute converter : Converter
			
			operation initConvert() : Void is abstract
			
			operation apply(b:Hashtable<Object, Object>) is do
				binding:=b
				if(clone==void) then
					initClone
				end
				adapt.each{a | a.execute()}
				updateClones
			end
					
			/**
			initClone must be called before the first binding
			*/
			operation initClone() is do
				converter:=Converter.new
				clone:=Hashtable<Object, Object>.new
				cloned:=Set<Object>.new
				created:=Hashtable<Object, Object>.new
				if(aspect.structure!=void) then
				aspect.structure.content.each{elt |
							var newCloned:Object
							newCloned:=converter.convert(Object.clone(elt), convert)
							if(newCloned!=void) then
								clone.put(elt, newCloned)
							end
						}
				end
			end
			
			/**
			updateClone must be called after every binding
			*/
			operation updateClones() is do
				if(aspect.structure!=void) then
				aspect.structure.content.each{o | 
					if(not(aspect.persistent.contains(o))) then
						updateClone(o)
					end}
				end
			end
			
			operation updateClone(pObj : Object) is do
				clone.remove(pObj)
				converter.deleteConverted(pObj)
					var newCloned:Object
					newCloned:=converter.convert(Object.clone(pObj), convert)
					if(newCloned!=void) then
						clone.put(pObj, newCloned)
					end
			end
			
			operation getRealObject(obj : Object, isCollect:Boolean) : Object is do
				if(isCollect) then
					var col:Collection<kermeta::reflection::Object>
					col?=obj
					var res:Set<Object> init Set<Object>.new
					col.each{o | res.add(getRealObject(o,false))}
					result:=res
				else
					var realObj:Object
					realObj?=clone.getValue(obj)
					if(realObj!=void) then
						result:=realObj
					else
						realObj?=binding.getValue(obj)
						if(realObj!=void) then
							result:=realObj
						else
							realObj?=created.getValue(obj)
							if(realObj!=void) then
								result:=realObj
							else
								var pObj:PObject
								pObj?=obj
								if(pObj!=void) then
									result:=converter.convert(Object.clone(obj), convert)
								else
									result:=obj
								end
							end
						end
					end	
				end		
			end
		}
	}
	

	package extension
	{
		@aspect "true"
		class DerivableAdapter
		{
			operation resolve(derivation:Derivation):Adapter is do
				var adapter:DerivableAdapter init DerivableAdapter.new
				var isChecked:Boolean init true
				constraints.each{c | isChecked:=isChecked and c.check(derivation)}
				if(isChecked) then
					adapt.each{a | adapter.addAdaptation(derivation,a)}
					alternatives.each{a | adapter.addAlternative(derivation,a)}
					if(adapter.isConcretizable) then
						var concreteAdapter:Adapter init Adapter.new
						var hash:Hashtable<kermeta::reflection::Class,kermeta::reflection::Class> init Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>.new
						hash.put(adapter.getMetaClass,concreteAdapter.getMetaClass)
						adapter.adapt.each{a | hash.put(a.getMetaClass, a.getMetaClass)}
						if(converter==void) then
							converter:=Converter.new
						end
						concreteAdapter?=converter.convert(adapter,hash)
						result:=concreteAdapter
					else
						result:=adapter
					end					
				else
					var e:NonApplicableDerivation init NonApplicableDerivation.new
					e.display
					raise e
				end
			end
			
			operation addAdaptation(d:Derivation, a:Adaptation) is do
				if(not(a.isOptional) or d.selectedOptions.contains(a)) then
					adapt.add(a)
				end
			end
			
			operation addConjunction(d:Derivation, c:EntityConjunction) is do
				if(not(c.isOptional) or d.selectedOptions.contains(c)) then
					c.~and.each{e |
						var a:Adaptation
						a?=e
						if(a!=void) then
							addAdaptation(d,a)
						else
							var alt:EntityAlternative
							alt?=e
							if(alt!=void) then
								addAlternative(d,alt)
							else
								var conj:EntityConjunction
								conj?=c
								if(conj!=void) then
									addConjunction(d,conj)
								end
							end
						end
					}
				end
			end
			
			operation addAlternative(d:Derivation, alt:EntityAlternative) is do
				if(d.elements.exists{e | e.alternative==alt}) then
					var v:AdapterElement 
					var elt:DerivationElement
					elt:=d.elements.select{e | e.alternative==alt}.one
					v:=elt.selectedVariant
					var a:Adaptation
					a?=v
					if(a!=void) then
						addAdaptation(d,a)
					else
					   var altern:EntityAlternative
					   altern?=v
					   if(altern!=void) then
					   		addAlternative(d,altern)
					   else
					   		var c:EntityConjunction
					   		c?=v
					   		if(c!=void) then
					   			addConjunction(d,c)
					   		end
					   end
					end

				else
					if(not(alt.isOptional) or d.selectedOptions.contains(alt)) then
						self.alternatives.add(alt)
					end
				end
			end

			
			operation isConcretizable() : ecore::EBoolean is do
				result:=(alternatives.size==0)
			end			
		}
		
		class NonApplicableDerivation inherits kermeta::exceptions::Exception {
			operation display() is do
				message:="Derivation is not applicable to DerivableAdapter. Maybe the derivation is not well formed.\n
				Please check that the derivation respects all the explicit and implicit constraints..."			
			end
		}		
	}
}

