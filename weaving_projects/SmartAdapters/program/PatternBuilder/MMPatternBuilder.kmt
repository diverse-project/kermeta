/* $Id: MMPatternBuilder.kmt,v 1.1 2008-05-20 14:30:38 bmorin Exp $
 * Creation date: October 18, 2006
 * License:
 * Copyright: IRISA / INRIA Rennes Bretagne Atlantique
 * Authors: Brice Morin bmorin@irisa.fr
 */

package org::smartadapters::utils;


require kermeta
require "platform:/resource/fr.irisa.triskell.kermeta.patternmatching/src/kermeta/pattern/PatternMetamodelBuilder.kmt"
using ecore 
using kermeta::standard
using kermeta::persistence
using kermeta::pattern
 
class PatternBuilder {

	operation relax(sourceMetamodelUri : String, targetMetamodelUri : String) is do 
		stdio.writeln("Loading input metamodel...")
		var sourceMetamodel : Sequence<EPackage> init loadEcoreModel(EMFRepository.new, sourceMetamodelUri)
		stdio.writeln("OK!")
		stdio.writeln("Relaxing constraints...")
		var patternCreator : PatternMetamodelBuilder init PatternMetamodelBuilder.new
		var patternPack : EPackage init patternCreator.addPatternFramework(sourceMetamodel, targetMetamodelUri)
		stdio.writeln("OK!")  
	    
	    stdio.write("Saving output metamodel...")
	    var setPack : Set<Object> init Set<Object>.new
	    setPack.add(patternPack)
	    
	    saveEcoreModel(setPack, targetMetamodelUri)
	    stdio.writeln("OK!") 
	end
  
	operation loadEcoreModel(repository : EMFRepository, modelUri : String) : Sequence<EPackage> is 
    do
    	var resource : Resource init repository.createResource(modelUri , "http://www.eclipse.org/emf/2002/Ecore")
    	resource.load
    	var instances : Set<Object> init resource.instances
    	var pack : EPackage
    	result := instances.select { e | EPackage.isInstance(e) }.collect{p | pack ?= p}	
    end

	operation saveEcoreModel(obj : Set<Object>, uri : String) is 
	do
    	obj.each{o | stdio.writeln(o.toString)}
    	var repository:EMFRepository init EMFRepository.new
	    var resource : Resource init repository.createResource(uri , "http://www.eclipse.org/emf/2002/Ecore")
	    obj.each{o | resource.instances.add(o)}
	    resource.save
    end 
}