/* $Id: testConverter.kmt,v 1.1 2007-12-07 07:15:17 bmorin Exp $
 * Creation date: December 3, 2007
 * License:
 * Copyright:
 * Authors:
 */
@mainClass "org::smartadapters::utils::TestConverter"
@mainOperation "main"


package org::smartadapters::utils;


require kermeta
require "./weaver.kmt"
require "platform:/resource/SmartAdapters/metamodel/domain/runtime/runtime.ecore"
require "platform:/resource/SmartAdapters/metamodel/domain/runtime/runtimePattern.ecore"

using kermeta::persistence
using kermeta::standard
using kermeta::utils
using weaver
using runtime

class TestConverter
{
	operation main() : Void is do 
		var c : Converter init Converter.new
		var w : Weaver init Weaver.new
		var inputModel : String init "platform:/resource/SmartAdapters/program/weaving/SystemPattern.xmi"
		var metamodelPattern : String init "platform:/resource/SmartAdapters/metamodel/domain/runtime/runtimePattern.ecore"
		var outputModel : String init "platform:/resource/SmartAdapters/program/weaving/System.xmi"
		var metamodel : String init "platform:/resource/SmartAdapters/metamodel/domain/runtime/runtime.ecore"
	

		var convert : Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>
				init Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>.new
		convert.put(pattern::runtime::System,runtime::System)
		convert.put(pattern::runtime::Configuration,runtime::Configuration)				
		convert.put(pattern::runtime::CompositeComponentInstance,runtime::CompositeComponentInstance)
		convert.put(pattern::runtime::PrimitiveComponentInstance,runtime::PrimitiveComponentInstance)
		convert.put(pattern::runtime::SimpleBind,runtime::SimpleBind)
		convert.put(pattern::runtime::ExportBind,runtime::ExportBind)
		convert.put(pattern::type::ComponentType,type::ComponentType)
		convert.put(pattern::type::Port,type::Port)
		convert.put(pattern::type::FunctionalService,type::FunctionalService)		
		c.initConverter(convert)

		
		var modelPattern : Set<Object> init w.loadModel(EMFRepository.new, inputModel, metamodelPattern)
		var model : Set<Object> init Set<Object>.new
		modelPattern.each{o |
			model.add(c.getConverted(o))
		}
		
		var system : System
		system ?= model.one
		if(system!=void) then
			system.components.each{c |
				stdio.writeln(c.name)
			}
		end
		
		w.saveModel(model,outputModel,metamodel)
	end
}