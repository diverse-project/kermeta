/* $Id: converter.kmt,v 1.11 2008-03-04 14:07:59 bmorin Exp $
 * Creation date: July 17, 2007
 * License:
 * Copyright: IRISA Rennes - Equipe Projet INRIA Triskell
 * Authors: Brice MORIN
 */
//@mainClass "root_package::Main"
//@mainOperation "main"


package org::smartadapters::utils;

require kermeta
using kermeta::language::structure
using kermeta::standard 
using kermeta::utils

/**
Converts a model that conforms to MM' into a model that conforms to MM
It can be significantly improved...
*/
class Converter
{
	//Mapping MM'->MM
	attribute convertTable : Hashtable<kermeta::language::structure::Class,kermeta::language::structure::Class>
	reference converted : Hashtable<kermeta::language::structure::Object,kermeta::language::structure::Object>
	//reference converting : Hashtable<kermeta::language::structure::Object,kermeta::language::structure::Object>	
	
	/**
	initializes the converter (~constructor)
	must be called before any other operation
	*/
	operation initConverter(convert:Hashtable<kermeta::language::structure::Class,kermeta::language::structure::Class>) is do	
		convertTable := convert
		converted := Hashtable<kermeta::language::structure::Object,kermeta::language::structure::Object>.new
		//converting := Hashtable<kermeta::language::structure::Object,kermeta::language::structure::Object>.new
	end
	
	operation deleteConverted(obj:kermeta::language::structure::Object) : Void is do
		//converting.remove(obj)
		converted.remove(obj)
	end	

	operation addEntry(key : kermeta::language::structure::Class, val : kermeta::language::structure::Class) is do
		convertTable.put(key,val)
	end
	
	operation getConverted(obj : kermeta::language::structure::Object) : kermeta::language::structure::Object is do
		result := getConvertedObject(obj)
	end
	
	/**
	returns a converted object (MM), equivalent to obj (MM')
	*/
	operation getConvertedObject(obj : kermeta::language::structure::Object) : kermeta::language::structure::Object 
	pre notVoid is obj != void
	post notVoid is result != void
	post conformance is result.getMetaClass == convertTable.getValue(obj.getMetaClass)
	is do
		//stdio.writeln("?>getConvertedObject: "+obj.toString)
		var newMeta : kermeta::language::structure::Class 
		newMeta := convertTable.getValue(obj.getMetaClass)
		if(newMeta!=void) then
			var o : kermeta::language::structure::Object init newMeta.new
			if(converted.getValue(obj)==void) then
				//if(converting.getValue(obj)==void) then
					//converting.put(obj,o)
					converted.put(obj,o)
					convert(obj,o)
				    //converted.put(obj,o)
				    //converting.remove(obj)
				    result:=o
				/*else
					result := converting.getValue(obj)	
				end*/
			else
				result := converted.getValue(obj) 
			end
		else
			result := obj
		end
	end
		
	/**
	copies obj (MM') into conv (MM) thanks to the convert Hashtable
	*/	
	operation convert(obj : kermeta::language::structure::Object, conv : kermeta::language::structure::Object) : Void is do		
		//stdio.writeln("converting "+obj.toString+" into "+conv.toString)
		var classDef:kermeta::language::structure::ClassDefinition
		classDef?=conv.getMetaClass.typeDefinition
		
		conv.getMetaClass.ownedAttribute.each{a |		
			if(obj.get(a)!=void and not(a.name.equals("tag") or a.name.equals("ownedTag"))) then
				var  cl : kermeta::language::structure::Class init a.getMetaClass.typeDefinition.getMetaClass
				var ob : Object init obj.get(a)
				//stdio.writeln("?>ob: "+ob.toString)
				//single property (upper bound==1)
				if(a.upper==1 and ob!=void) then
					//stdio.writeln("Single property")
					var temp:Object
					temp:= getConverted(ob)
					if(temp!=void) then					
						conv.~set(a,temp)
					end
				//collection property -> iteration
				else
					//stdio.writeln("Collection property")
					var list:Collection<kermeta::language::structure::Object>
					var convertedList:Collection<kermeta::language::structure::Object>
					list?=ob
					if(list!=void and list.size>0) then
						convertedList ?= conv.get(a)
						convertedList.clear
						list.each{o |
								var tmp:Object init getConverted(o)
								convertedList.add(tmp)
						}						
					end
				end
			end
			}
		end
	//end
}