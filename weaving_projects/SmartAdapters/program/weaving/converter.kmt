/* $Id: converter.kmt,v 1.12 2008-05-20 14:30:02 bmorin Exp $
 * Creation date: July 17, 2007
 * License:
 * Copyright: IRISA / INRIA Rennes Bretagne Atlantique
 * Authors: Brice Morin bmorin@irisa.fr
 */

package org::smartadapters::utils;

require kermeta
using kermeta::language::structure
using kermeta::standard 
using kermeta::utils

/**
Converts a model that conforms to MM' into a model that conforms to MM
It can be significantly improved...
*/
class Converter
{
	//Mapping MM'->MM
	reference convertTable : Hashtable<kermeta::language::structure::Class,kermeta::language::structure::Class>
	reference converted : Hashtable<kermeta::language::structure::Object,kermeta::language::structure::Object>	
	
	/**
	initializes the converter (~constructor)
	must be called before any other operation
	*/
	operation initConverter(convert:Hashtable<kermeta::language::structure::Class,kermeta::language::structure::Class>) is do	
		convertTable := convert
		converted := Hashtable<kermeta::language::structure::Object,kermeta::language::structure::Object>.new
	end
	
	operation deleteConverted(obj:kermeta::language::structure::Object) : Void is do
		converted.remove(obj)
	end	

	operation addEntry(key : kermeta::language::structure::Class, val : kermeta::language::structure::Class) is do
		convertTable.put(key,val)
	end
	
	operation getConverted(obj : kermeta::language::structure::Object) : kermeta::language::structure::Object is do
		result := getConvertedObject(obj)
	end
	
	/**
	returns a converted object (MM), equivalent to obj (MM')
	*/
	operation getConvertedObject(obj : kermeta::language::structure::Object) : kermeta::language::structure::Object 
	pre notVoid is obj != void
	post notVoid is result != void
	post conformance is result.getMetaClass == convertTable.getValue(obj.getMetaClass)
	is do
		var newMeta : kermeta::language::structure::Class 
		newMeta := convertTable.getValue(obj.getMetaClass)
		if(newMeta != void) then
			var o : kermeta::language::structure::Object init newMeta.new
			if(converted.getValue(obj) == void) then
					converted.put(obj,o)
					convert(obj,o)
				    result:=o
			else
				result := converted.getValue(obj) 
			end
		else
			result := obj
		end
	end
		
	operation convert2(obj : kermeta::language::structure::Object, conv : kermeta::language::structure::Object) is
	do
		var c : Class init conv.getMetaClass
	
		c.ownedAttribute.each{p |
			//stdio.writeln(p.name)
			processProperty(obj,conv,p)
		}
	
		var superClasses : Set<Class> init c.superClass
		from  not superClasses.isEmpty
		until superClasses.isEmpty
		loop
			var temp : Set<Class> init Set<Class>.new
 			superClasses.each{s |
 					s.ownedAttribute.each{p | 
 					//stdio.writeln(p.name)
 					processProperty(obj,conv,p)
 				}
 				temp.addAll(s.superClass)
 			}
 			superClasses.clear
 			superClasses.addAll(temp)
		end
	end

	operation processProperty(obj : kermeta::language::structure::Object, conv : kermeta::language::structure::Object, a : Property) is
	do
		if(obj.get(a) != void and not(a.name.equals("tag") or a.name.equals("ownedTag"))) then
			var ob : Object init obj.get(a)
			//single property (upper bound==1)
			if(a.upper == 1 and ob != void) then
				var temp : Object
				temp := getConverted(ob)
				if(temp != void) then
					var e : EnumerationLiteral
					e ?= temp
					if e == void then					
						conv.~set(a,temp)
					else
						stdio.writeln("not converted due to a bug in Kermeta!!!"+conv.toString+"."+a.name+" := "+temp.toString)
						stdio.writeln("testEnum::TestEnum.testReflect2")
					end
				end
			//collection property -> iteration
			else
				var list:Collection<kermeta::language::structure::Object>
				var convertedList:Collection<kermeta::language::structure::Object>
				list?=ob
				if(list!=void and list.size>0) then
					convertedList ?= conv.get(a)
					convertedList.clear
					list.each{o |
							var tmp:Object init getConverted(o)
							convertedList.add(tmp)
					}						
				end
			end
		end	
	end
		
	/**
	copies obj (MM') into conv (MM) thanks to the convert Hashtable
	*/	
	operation convert(obj : kermeta::language::structure::Object, conv : kermeta::language::structure::Object) : Void is do
		//stdio.writeln("convert "+obj.toString+" "+conv.toString)		
		convert2(obj,conv)
	end
}