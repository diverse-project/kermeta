/* $Id: AdaptationBuilder.kmt,v 1.1 2007-07-18 06:58:24 bmorin Exp $
 * Creation date: July 17, 2007
 * License:
 * Copyright:
 * Authors: bmorin
 */
@mainClass "specialize::AdaptationBuilder"



package specialize;


require kermeta

require "platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"

using ecore
using EcoreHelpers
using kermeta::standard
using kermeta::utils
using kermeta::persistence
using kermeta::reflection
using kermeta::io

class AdaptationBuilder
{
	operation generateFramework(domainMM:String, domainMMPrime:String, ecore:String, file:String) is do
		stdio.writeln("Generating framework")
		var handler : EcoreHelpers::EcoreHelper init EcoreHelpers::EcoreHelper.new   	  
	    handler.initialize()
		var repository:EMFRepository init EMFRepository.new
		var inputMM:Set<Object> init loadModel(repository, domainMM, ecore)
		var mm:EPackage
		mm?=inputMM.one
		var classif:Set<EClassifier> init getAllNestedClassifiers(mm)	
		var framework:String
		framework:="package org;
			require kermeta
			require \"platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.kmt\"
			require \""+domainMM+"\"
			require \""+domainMMPrime+"\"

			using kermeta::standard
			using kermeta::utils
			using patternframework
			using org::smartadapters::core
			using org::smartadapters::extension
			using ecore

			package smartadapters
			{
				\tpackage core
				\t{	
					\t\t@aspect \"true\"
					\t\tclass Adapter{\n"+"\t\t\t\t"+generateConvert(classif)+"}\n"
		framework:=framework+"\tpackage adaptations{\n"+"\t\t\t\t"+generateAdapt(classif)+"\t\t\t\t"
		framework:=framework+"\t\t}\n\t}\n}"
		var fileWriter:FileIO init FileIO.new
		fileWriter.writeTextFile(file,framework)
		stdio.writeln("Framework generated!")
	end

	operation generateConvert(classif:Set<EClassifier>) : String is do
		var bodyConvert:String init "stdio.write(\"Mapping MM' to MM...\")\nconvert:=Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>.new\n"
		classif.each{cl |
			var name:String init getQualifiedName(cl,cl.ePackage,"")
			bodyConvert:=bodyConvert+"\tconvert.put(pattern::"+name+","+name+")\n"		
		}
		result:="operation initConvert() : Void is do\n"+bodyConvert+"end\n"
	end

	operation generateAdapt(classif:Set<EClassifier>) : String is do
		var paramCreate:String init String.new
		var paramClone:String init String.new
		var bodyCreate:String init String.new
		var bodyClone:String init String.new
		var param:String init String.new
		var body:String init String.new
		var bodyUnset:String init String.new
		var adaptation:String init String.new
		classif.each{cl | var c:EClass
						  c?=cl
						  if(c!=void) then
							  if(not(c.~abstract)) then
								  	bodyCreate:=""
								  	paramCreate:=""
								  	paramCreate:=paramCreate+"\tattribute isUnique:Boolean\n"
								  	paramClone:=paramCreate+"\treference new"+c.name+":pattern::"+getQualifiedName(c,c.ePackage,"")+"\n"
								  	paramClone:=paramClone+"\tattribute real"+c.name+":pattern::"+getQualifiedName(c,c.ePackage,"")+"\n"
									paramCreate:=paramCreate+"\tattribute new"+c.name+":pattern::"+getQualifiedName(c,c.ePackage,"")+"\n"
									bodyCreate:=bodyCreate+"\toperation check() : Boolean is do\n"
									bodyCreate:=bodyCreate+"\t\tresult:=(new"+c.name+"!=void)\n"
									bodyCreate:=bodyCreate+"\tend\n\n"
									bodyCreate:=bodyCreate+"\toperation execute() is do\n"
									bodyClone:=bodyCreate
									
									bodyCreate:=bodyCreate+"\t\tif(adapter.created.getValue(new"+c.name+")==void or not(isUnique)) then\n"
									bodyCreate:=bodyCreate+"\t\t\tvar real"+c.name+":"+getQualifiedName(c,c.ePackage,"")+"\n"
									bodyCreate:=bodyCreate+"\t\t\treal"+c.name+"?=adapter.converter.convert(Object.clone(new"+c.name+"), adapter.convert)\n"
									bodyCreate:=bodyCreate+"\t\t\tadapter.created.put(new"+c.name+",real"+c.name+")\n"
									bodyCreate:=bodyCreate+"\t\tend\n"
									bodyCreate:=bodyCreate+"\tend\n"
										
									bodyClone:=bodyClone+"\t\tvar cloned"+c.name+":"+getQualifiedName(c,c.ePackage,"")+"\n"
									bodyClone:=bodyClone+"\t\tvar temp:"+getQualifiedName(c,c.ePackage,"")+"\n"
									bodyClone:=bodyClone+"\t\ttemp?=adapter.getRealObject(new"+c.name+",false)\n"
									bodyClone:=bodyClone+"\t\tif(isUnique) then\n"
									bodyClone:=bodyClone+"\t\t\tif(not(adapter.cloned.exists{o | o==temp})) then\n"
									bodyClone:=bodyClone+"\t\t\t\tcloned"+c.name+"?=Object.clone(temp)\n"
									bodyClone:=bodyClone+"\t\t\t\tadapter.clone.put(real"+c.name+",cloned"+c.name+")\n"
									bodyClone:=bodyClone+"\t\t\t\tadapter.cloned.add(temp)\n"
									bodyClone:=bodyClone+"\t\t\tend\n"
									bodyClone:=bodyClone+"\t\telse\n"
									bodyClone:=bodyClone+"\t\t\tcloned"+c.name+"?=Object.clone(temp)\n"
									bodyClone:=bodyClone+"\t\t\tadapter.clone.put(real"+c.name+",cloned"+c.name+")\n"
									bodyClone:=bodyClone+"\t\tend\n"
									bodyClone:=bodyClone+"\tend\n"
								end						  
						  	body:=""
						  	param:=""
							param:=param+"\treference a"+c.name+":pattern::"+getQualifiedName(c,c.ePackage,"")+"\n"
							var obj:String init "temp"+c.name
							body:=body+"\toperation check() : Boolean is do\n"
							body:=body+"\t\tresult:=(a"+c.name+"!=void)\n"
							body:=body+"\tend\n\n"
							body:=body+"\toperation execute() is do\n"
							body:=body+"\t\tvar "+obj+":"+getQualifiedName(c,c.ePackage,"")+"\n"
							body:=body+"\t\t"+obj+"?=adapter.getRealObject(a"+c.name+",false)"+"\n"
							c.eAllStructuralFeatures.each{f | 
								if(not(f.derived) and not(f.unsettable)) then
									var primitive:kermeta::language::structure::PrimitiveType
									var newObj:kermeta::reflection::Object init f.eType.getMetaClass.new
									primitive?=newObj
									if(primitive==void) then
										param:=param+"\treference a"+f.name+":pattern::"+getQualifiedName(f.eType,f.eType.ePackage,"")
									else
										param:=param+"\treference a"+f.name+":"+getQualifiedName(f.eType,f.eType.ePackage,"")
									end
									var temp:String init "temp"+f.name
									if(f.upperBound==1)then
										body:=body+"\t\tvar "+temp+":"+getQualifiedName(f.eType,f.eType.ePackage,"")+"\n"
									else
										param:=param+"[0..*]"
										body:=body+"\t\tvar "+temp+":Collection<kermeta::reflection::Object>\n"
									end
									param:=param+"\n"
									if(primitive==void)then
										if(f.upperBound==1)then
											body:=body+"\t\t"+temp+"?=adapter.getRealObject(a"+f.name+",false)"+"\n"
										else
											body:=body+"\t\t"+temp+"?=adapter.getRealObject(a"+f.name+",true)"+"\n"
										end
									else
										body:=body+"\t\t"+temp+":=a"+f.name+"\n"
									end
									body:=body+"\t\tif("+temp+"!=void) then"+"\n"
									if(f.upperBound==1) then
										bodyUnset:=body
										body:=body+"\t\t\t"+obj+"."+f.name+":="+temp+"\n"
										bodyUnset:=bodyUnset+"\t\t\t"+obj+"."+f.name+":=void\n"
									else
										body:=body+"\t\t\t"+temp+".each{o | \n\t\t\t\tvar temp:"+getQualifiedName(f.eType,f.eType.ePackage,"")+"\n"
										body:=body+"\t\t\t\ttemp?=o\n"
										body:=body+"\t\t\t\tif(temp!=void) then\n"
										bodyUnset:=body
										body:=body+"\t\t\t\t\t"+obj+"."+f.name+".add(temp)\n"
										bodyUnset:=bodyUnset+"\t\t\t\t\t"+obj+"."+f.name+".remove(temp)\n"
										body:=body+"\t\t\t\tend}\n"
										bodyUnset:=bodyUnset+"\t\t\t\tend}\n"
									end
									body:=body+"\t\tend"+"\n"
									bodyUnset:=bodyUnset+"\t\tend"+"\n"
								end
							}
							body:=body+"\tend\n"
							bodyUnset:=bodyUnset+"\tend\n"
							adaptation:=adaptation+"class create"+c.name+" inherits Adaptation{\n"+paramCreate+"\n"+bodyCreate+"}\n\n"
							adaptation:=adaptation+"class clone"+c.name+" inherits Adaptation{\n"+paramClone+"\n"+bodyClone+"}\n\n"
							adaptation:=adaptation+"class set"+c.name+" inherits Adaptation{\n"+param+"\n"+body+"}\n\n"						
							adaptation:=adaptation+"class unset"+c.name+" inherits Adaptation{\n"+param+"\n"+bodyUnset+"}\n\n"
						  end}
	result:=adaptation						  
	end
	
    operation loadModel(repository : EMFRepository, modelPath : String, metamodelPath : String) : Set<kermeta::standard::Object> is do                   
   		var resource : Resource init repository.createResource(modelPath, metamodelPath)
       	resource.load()
        result := resource.instances
    end	
	
    operation saveModel(obj : Set<Object>, uri : String, domainMM : String) is do
    	var repository:EMFRepository init EMFRepository.new
	    var resource : Resource init repository.createResource(uri , domainMM)
	    obj.each{o | resource.instances.add(o)}
	    resource.save
    end		
    
    operation getAllNestedClassifiers(pack : EPackage) : Set<EClassifier> is do
       var eclassifiers : Set<EClassifier> init Set<EClassifier>.new
       eclassifiers.addAll( pack.eClassifiers)
       pack.eSubpackages.each{ subpack | 
                eclassifiers.addAll( getAllNestedClassifiers(subpack))}
       result := eclassifiers
    end
    
    operation getQualifiedName(cl : EClassifier, p : EPackage, name : String) : String is do
    	if(name==void or name=="") then
    		name:=cl.name
    	end
    	name := cl.ePackage.name+"::"+name
    	if(cl.ePackage.eSuperPackage!=void) then
    		getQualifiedName(cl, cl.ePackage.eSuperPackage, name)
    	end
    	result:=name
    end
}