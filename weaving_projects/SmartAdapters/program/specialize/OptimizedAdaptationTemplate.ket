<%@ ket package="specialize" 
	require="platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/keyword_list.kmt" 
	using="ecore EcoreHelpers kermeta::language::key" 
	class="AdaptationTemplate"  
	parameters="classif:Set<EClassifier>, domainMM:String, domainMMPattern:String, shortName:String"
%>

/* 
 * Author: Brice Morin
 * Creation date: 
 * License: 
 * Copyright: IRISA Rennes - Equipe Projet INRIA Triskell
 */

/*
 * This file was automatically generated
 */
<%
var helper:EcoreHelper init EcoreHelper.new
var keyWord : KeyWordList init KeyWordList.new
keyWord.initialize
var fName : String
%>

package org;
require kermeta
require "platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.kmt"
require "<%=domainMM%>"
require "<%=domainMMPattern%>"

using kermeta::standard
using kermeta::utils
using patternframework
using org::smartadapters::core
using org::smartadapters::extension
using ecore
using org::smartadapters::utils

package smartadapters
{
	package core
	{
		aspect class Adapter 
		{
			/**
			 * Associates concrete meta-classes from MM' to concrete meta-classes from MM
			 */
			operation initConvert(): Void is do
				converter := Converter.new
				convert := Hashtable<kermeta::language::structure::Class,kermeta::language::structure::Class>.new
				<%
				var name:String 
				classif.each{cl |
					var c:EClass
					c?=cl
					if(c!=void) then
						if(not(c.~abstract) and not(c.interface)) then
					name:=helper.getClassifierQualifiedName(c)%>
				convert.put(pattern::<%=name%>,<%=name%>)
					<%end
					end
					}%>
				converter.initConverter(convert)
			end
		}
		
	package adaptations
	{
		<%classif.each{cl | 
		var c:EClass
		var qualifiedName:String
		qualifiedName:=helper.getClassifierQualifiedName(cl)
		c?=cl %>
		 
		<%
		if(c!=void) then
			if(not(c.~abstract) and not(c.interface)) then%>
		/*
		 * Adaptations dedicated to the manipulation
		 * of <%=qualifiedName%>
		 */
		
		/**
		 * Creates a new <%=qualifiedName%> from scratch
		 * This new element is handled by refering to new<%=c.name%>
		 */
		class Create<%=qualifiedName.replace("::","")%> inherits createAdaptation
		{
			attribute new<%=c.name%> : pattern::<%=qualifiedName%>
					
			method check(): Boolean is do
				result := new<%=c.name%> != void
			end
					
			method execute(reverse : Boolean): Void is do
				adapter.cloneAgain(new<%=c.name%>, void, isUnique)					
			end
		}

		/**
		 * Creates a new <%=qualifiedName%> from an existing one
		 * This cloned element is handled by refering to cloned<%=c.name%>
		 */
		class Clone<%=qualifiedName.replace("::","")%> inherits cloneAdaptation
		{
			reference <%=c.name%>ToClone : pattern::<%=qualifiedName%>
			attribute cloned<%=c.name%> : pattern::<%=qualifiedName%>
			
			method check(): Boolean is do
				result := <%=c.name%>ToClone != void
			end
			
			method execute(reverse : Boolean): Void is do
				adapter.cloneAgain(cloned<%=c.name%>, <%=c.name%>ToClone, isUnique)
			end					
		}
		<%end%>

		/**
		 * Sets any property of <%=qualifiedName%>
		 * All the references expect <%=c.name%>ToSet may be void
		 */
		class Set<%=qualifiedName.replace("::","")%> inherits setAdaptation
		{
			reference <%=c.name%>ToSet : pattern::<%=qualifiedName%>
			<%
			var card:String
			var fQualName:String
			var newObj:kermeta::language::structure::Object
			var primitive:kermeta::language::structure::PrimitiveType
			c.eAllStructuralFeatures.each{f | 
				if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then
					fQualName:=helper.getClassifierQualifiedName(f.eType)
					newObj:=f.eType.getMetaClass.new
					primitive?=newObj
					if(not(f.upperBound==1))then%>
						<%card:="[0..*]"
					else%>
						<%card:=""
					end
					if(primitive==void) then%>
			reference ref<%=f.name%> : pattern::<%=fQualName%><%=card%>
					<%else%>
			reference ref<%=f.name%> : <%=fQualName%><%=card%>
					<%end%>
				<%end
				}%>
			
			method check(): Boolean is do
				result := <%=c.name%>ToSet != void
			end
			
			method execute(reverse : Boolean): Void 
			post correctlySetted<%=qualifiedName.replace("::","")%> is do
				var ad : Adapter init getAdapter
				var temp<%=c.name%>ToSet : <%=qualifiedName%>
				temp<%=c.name%>ToSet ?= ad.getRealObject(<%=c.name%>ToSet,false)
				var isCorrectlySetted : Boolean init true
				var c : Collection<kermeta::language::structure::Object>
				<%c.eAllStructuralFeatures.each{f | %>
					<%if f.upperBound==1 then%>
				if ref<%=f.name%> != void then
					isCorrectlySetted := isCorrectlySetted and temp<%=c.name%>ToSet.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%> == ad.getRealObject(ref<%=f.name%>,false)
				end
					<%else%>
				c ?= ad.getRealObject(ref<%=f.name%>,true)
				c.each{o | var p : <%=helper.getClassifierQualifiedName(f.eType)%> p?=o isCorrectlySetted := isCorrectlySetted and temp<%=c.name%>ToSet.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%>.contains(p)}
					<%end%>
				<%}%>
				isCorrectlySetted
			end
			is do
				var ad : Adapter init getAdapter
				var temp<%=c.name%> : <%=qualifiedName%>
				temp<%=c.name%> ?= ad.getRealObject(<%=c.name%>ToSet,false)
				
				<%c.eAllStructuralFeatures.each{f | 
				if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then%>
				<%if f.upperBound==1 then%>
				temp<%=c.name%>.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%> ?= ad.setSingleProperty(ref<%=f.name%>, temp<%=c.name%>.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%>)
				<%else%>
				ad.setMultipleProperty(temp<%=c.name%>.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%>,ref<%=f.name%>)
				<%end%>
				<%end
				}%>
				
				//Instantiating the reverse adaptation
				if(reverse) then		
					var unset : Unset<%=qualifiedName.replace("::","")%> 
					if self.reverse == void then
						unset := Unset<%=qualifiedName.replace("::","")%>.new
						unset.reverse := self
						self.reverse := unset
					else
						unset ?= self.reverse
					end		
					unset.<%=c.name%>ToUnset := self.<%=c.name%>ToSet
					<%c.eAllStructuralFeatures.each{f | 
					if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then%>
						<%if(not(f.upperBound==1))then%>
					unset.ref<%=f.name%>.clear
					unset.ref<%=f.name%>.addAll(self.ref<%=f.name%>)
						<%else%>
					unset.ref<%=f.name%> := self.ref<%=f.name%>
						<%end%>
					<%end%>
					<%}%>
				end	
			end			
		}
		
		/**
		 * Unsets any property of <%=qualifiedName%>
		 * All the references expect <%=c.name%>ToUnset may be void 
		 */		
		class Unset<%=qualifiedName.replace("::","")%> inherits unsetAdaptation
		{
			reference <%=c.name%>ToUnset : pattern::<%=qualifiedName%>
			<%
			c.eAllStructuralFeatures.each{f | 
				if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then%>
					<%fQualName:=helper.getClassifierQualifiedName(f.eType)
					newObj:=f.eType.getMetaClass.new
					primitive?=newObj%>
					<%if(not(f.upperBound==1))then%>
						<%card:="[0..*]"%>
					<%else%>
						<%card:=""%>
					<%end%>
					<%if(primitive==void) then%>
			reference ref<%=f.name%> : pattern::<%=fQualName%><%=card%>
					<%else%>
			reference ref<%=f.name%> : <%=fQualName%><%=card%>
					<%end%>
				<%end%>
			<%}%>
			
			method check(): Boolean is do
				result := <%=c.name%>ToUnset != void
			end
			
			method execute(reverse : Boolean): Void 
			post correctlyUnsetted<%=qualifiedName.replace("::","")%> is do
				var ad : Adapter init getAdapter
				var temp<%=c.name%>ToUnset : <%=qualifiedName%>
				temp<%=c.name%>ToUnset ?= ad.getRealObject(<%=c.name%>ToUnset,false)
				var isCorrectlyUnsetted : Boolean init true
				var c : Collection<kermeta::language::structure::Object>
				<%c.eAllStructuralFeatures.each{f | %>
					<%if f.upperBound==1 then%>
				if ref<%=f.name%> != void then 
				if not ad.notRemovable.contains(ad.getRealObject(ref<%=f.name%>,false)) then
					isCorrectlyUnsetted := isCorrectlyUnsetted and temp<%=c.name%>ToUnset.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%> == void
				end end
					<%else%>
				c ?= ad.getRealObject(ref<%=f.name%>,true)
				c.each{o | var p : <%=helper.getClassifierQualifiedName(f.eType)%> p?=o 
					if not ad.notRemovable.contains(p) then
						isCorrectlyUnsetted := isCorrectlyUnsetted and not temp<%=c.name%>ToUnset.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%>.contains(p)
					end
				}
					<%end%>
				<%}%>
				isCorrectlyUnsetted
			end
			is do
				var ad : Adapter init getAdapter
				var temp<%=c.name%> : <%=qualifiedName%>
				temp<%=c.name%> ?= ad.getRealObject(<%=c.name%>ToUnset,false)
				
				<%c.eAllStructuralFeatures.each{f | 
				if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then%>
				<%if f.upperBound==1 then%>
				temp<%=c.name%>.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%> ?= ad.unsetSingleProperty(ref<%=f.name%>, temp<%=c.name%>.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%>)
				<%else%>
				ad.unsetMultipleProperty(temp<%=c.name%>.<%if keyWord.isKeyword(f.name) then%>~<%end%><%=f.name%>,ref<%=f.name%>)
				<%end%>
				<%end
				}%>
				
				//Instantiating the reverse adaptation
				if reverse then
					var ~set : Set<%=qualifiedName.replace("::","")%> 
					if self.reverse == void then
						~set := Set<%=qualifiedName.replace("::","")%>.new
						~set.reverse := self
						self.reverse := ~set
					else
						~set ?= self.reverse
					end
					~set.<%=c.name%>ToSet := self.<%=c.name%>ToUnset
					<%c.eAllStructuralFeatures.each{f | 
					if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then%>
						<%if(not(f.upperBound==1))then%>
					~set.ref<%=f.name%>.clear
					~set.ref<%=f.name%>.addAll(self.ref<%=f.name%>)
						<%else%>
					~set.ref<%=f.name%> := self.ref<%=f.name%>
						<%end%>
					<%end%>
					<%}%>
				end
			end
		}
		<%end
		}%>
	}
}}