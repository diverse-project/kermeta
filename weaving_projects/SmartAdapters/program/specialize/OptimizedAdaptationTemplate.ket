<%@ ket package="specialize" 
	require="platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt" 
	using="ecore EcoreHelpers" 
	class="AdaptationTemplate"  
	parameters="classif:Set<EClassifier>, domainMM:String, domainMMPattern:String, shortName:String"
%>

/* Authors: Brice Morin
 * Creation date: 
 * License: 
 * Copyright: IRISA Rennes - Equipe Projet INRIA Triskell
 */

<%var helper:EcoreHelper init EcoreHelper.new%>

package org;
require kermeta
require "platform:/resource/SmartAdapters/metamodel/generic/genericSmartAdapters.kmt"
require "<%=domainMM%>"
require "<%=domainMMPattern%>"

using kermeta::standard
using kermeta::utils
using patternframework
using org::smartadapters::core
using org::smartadapters::extension
using ecore
using org::smartadapters::utils

package smartadapters
{
	package core
	{
		aspect class Adapter 
		{
			operation initConvert(): Void is do
				stdio.write("Mapping MM' to MM...")
				converter := Converter.new
				convert := Hashtable<kermeta::reflection::Class,kermeta::reflection::Class>.new
				<%
				var name:String 
				classif.each{cl |
					var c:EClass
					c?=cl
					if(c!=void) then
						if(not(c.~abstract) and not(c.interface)) then
					name:=helper.getClassifierQualifiedName(c)%>
				convert.put(pattern::<%=name%>,<%=name%>)
					<%end
					end
					}%>
				converter.initConverter(convert)
				stdio.writeln("OK!")
			end
		}
		
	package adaptations
	{
		<%classif.each{cl | 
		var c:EClass
		var qualifiedName:String
		qualifiedName:=helper.getClassifierQualifiedName(cl)
		c?=cl
		if(c!=void) then
			if(not(c.~abstract) and not(c.interface)) then%>
		
		class Create<%=c.name%> inherits createAdaptation
		{
			attribute new<%=c.name%> : pattern::<%=qualifiedName%>
					
			method check(): Boolean is do
				result := new<%=c.name%> != void
			end
					
			method execute(): Void is do
				adapter.cloneAgain(new<%=c.name%>, void, isUnique)					
			end
		}

		class Clone<%=c.name%> inherits cloneAdaptation
		{
			reference <%=c.name%>ToClone : pattern::<%=qualifiedName%>
			attribute cloned<%=c.name%> : pattern::<%=qualifiedName%>
			
			method check(): Boolean is do
				result := <%=c.name%>ToClone != void
			end
			
			method execute(): Void is do
				adapter.cloneAgain(cloned<%=c.name%>, <%=c.name%>ToClone, isUnique)
			end					
		}
		<%end%>

		class Set<%=c.name%> inherits setAdaptation
		{
			reference <%=c.name%>ToSet : pattern::<%=qualifiedName%>
			<%
			var card:String
			var fQualName:String
			var newObj:kermeta::reflection::Object
			var primitive:kermeta::language::structure::PrimitiveType
			c.eAllStructuralFeatures.each{f | 
				if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then
					fQualName:=helper.getClassifierQualifiedName(f.eType)
					newObj:=f.eType.getMetaClass.new
					primitive?=newObj
					if(not(f.upperBound==1))then%>
						<%card:="[0..*]"
					else%>
						<%card:=""
					end
					if(primitive==void) then%>
			reference ref<%=f.name%> : pattern::<%=fQualName%><%=card%>
					<%else%>
			reference ref<%=f.name%> : <%=fQualName%><%=card%>
					<%end%>
				<%end
				}%>
			
			method check(): Boolean is do
				result := <%=c.name%>ToSet != void
			end
			
			method execute(): Void is do
				var temp<%=c.name%> : <%=qualifiedName%>
				temp<%=c.name%> ?= adapter.getRealObject(<%=c.name%>ToSet,false)
				
				<%c.eAllStructuralFeatures.each{f | 
				if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then%>
				<%if f.upperBound==1 then%>
				temp<%=c.name%>.<%=f.name%> ?= adapter.setSingleProperty(ref<%=f.name%>, temp<%=c.name%>.<%=f.name%>)
				<%else%>
				adapter.setMultipleProperty(temp<%=c.name%>.<%=f.name%>,ref<%=f.name%>)
				<%end%>
				<%end
				}%>
			end			
		}
		
		class Unset<%=c.name%> inherits unsetAdaptation
		{
			reference <%=c.name%>ToUnset : pattern::<%=qualifiedName%>
			<%
			c.eAllStructuralFeatures.each{f | 
				if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then%>
					<%fQualName:=helper.getClassifierQualifiedName(f.eType)
					newObj:=f.eType.getMetaClass.new
					primitive?=newObj%>
					<%if(not(f.upperBound==1))then%>
						<%card:="[0..*]"%>
					<%else%>
						<%card:=""%>
					<%end%>
					<%if(primitive==void) then%>
			reference ref<%=f.name%> : pattern::<%=fQualName%><%=card%>
					<%else%>
			reference ref<%=f.name%> : <%=fQualName%><%=card%>
					<%end%>
				<%end%>
			<%}%>
			
			method check(): Boolean is do
				result := <%=c.name%>ToUnset != void
			end
			
			method execute(): Void is do
				var temp<%=c.name%> : <%=qualifiedName%>
				temp<%=c.name%> ?= adapter.getRealObject(<%=c.name%>ToUnset,false)
				
				<%c.eAllStructuralFeatures.each{f | 
				if(not(f.derived or f.unsettable) and f.changeable and not(f.name.equals("tag") or f.name.equals("ownedTag"))) then%>
				<%if f.upperBound==1 then%>
				temp<%=c.name%>.<%=f.name%> ?= adapter.unsetSingleProperty(ref<%=f.name%>, temp<%=c.name%>.<%=f.name%>)
				<%else%>
				adapter.unsetMultipleProperty(temp<%=c.name%>.<%=f.name%>,ref<%=f.name%>)
				<%end%>
				<%end
				}%>
			end
		}
		<%end
		}%>
	}
}}