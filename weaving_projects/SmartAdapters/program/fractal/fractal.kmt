package fractal;
require kermeta
require "http://art"
using kermeta::standard
using kermeta::utils
using art
using art::instance
using art::type
class FractalTemplate{
operation generate(system:System):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("package org.diva.causalLink.smartadapters.fractal;\n\nimport org.diva.causalLink.IFactory;\nimport org.diva.causalLink.Platform2EMF;\nimport org.diva.fractal.notification.ListenerEvolution;\nimport org.kermeta.fractal.console.KermetaFractalInterpreter;\nimport org.objectweb.fractal.api.Component;\nimport org.objectweb.fractal.api.control.NotificationController;\nimport org.objectweb.fractal.api.factory.GenericFactory;\nimport org.objectweb.fractal.api.type.ComponentType;\nimport org.objectweb.fractal.api.type.InterfaceType;\nimport org.objectweb.fractal.api.type.TypeFactory;\nimport org.objectweb.fractal.julia.InitializationContext;\nimport org.objectweb.fractal.util.Fractal;\n\nimport fr.irisa.triskell.kermeta.runtime.RuntimeObject;\n\n\n/** \n * Creation : July 2, 2008\n * Licence  : EPL \n * Copyright: IRISA / INRIA Rennes\n * Authors  : Brice Morin, Equipe-Projet INRIA Triskell\n *            bmorin[at]irisa.fr\n *\n */\n \n")

var clsName : String init "Main"
if system.name != void then
	clsName := system.name+clsName
end

_res.append("\npublic class ")
_res.append(clsName.replace(" ","").replace(".",""))
_res.append("\n{\n\t/**\n\t * Runs the initial configuration of the system (causal link + user system)\n\t * and makes the connection with Kermeta\n\t */\n\tpublic static RuntimeObject run(RuntimeObject self){\n\t\tKermetaFractalInterpreter.getKermetaFractalInterpreter().println(\"\");\n\t\ttry {\n\t\t\tSystem.setProperty(\"fractal.provider\", \"org.objectweb.fractal.julia.Julia\");\n\t\t\tSystem.setProperty(\"julia.loader\", \"org.objectweb.fractal.julia.loader.DynamicLoader\");\n\t\t\tSystem.setProperty(\"julia.config\",\"etc/julia.cfg\");\n\t\t\tComponent boot = Fractal.getBootstrapComponent();\n\t\t\tTypeFactory tf = (TypeFactory) boot.getFcInterface(\"type-factory\");\n\n\t\t\t/*\n\t\t\t * Declaring component types related to the causal link\n\t\t\t */\n\t\t\tComponentType causalLink = \n\t\t\t\ttf.createFcType(\n\t\t\t\t\tnew InterfaceType[]{\n\t\t\t\t\t\ttf.createFcItfType(\"model2platform\", \"org.diva.causalLink.EMF2Platform\", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE),\n\t\t\t\t\t\ttf.createFcItfType(\"platform2model\", \"org.diva.causalLink.Platform2EMF\", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\n\t\t\tComponentType factory =\n\t\t\t\ttf.createFcType(\n\t\t\t\t\tnew InterfaceType[] { \n\t\t\t\t\t\t\ttf.createFcItfType(\"factory\", \"org.diva.causalLink.IFactory\", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE),\n\t\t\t\t\t\t\ttf.createFcItfType(\"platform2model\", \"org.diva.causalLink.Platform2EMF\", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE),\n\t\t\t\t\t\t\ttf.createFcItfType(\"model2platform\", \"org.diva.causalLink.EMF2Platform\", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE)\n\t\t\t\t\t}\n\t\t\t\t);\t\t\t\n\n\t\t\tComponentType fractal2EMF =\n\t\t\t\ttf.createFcType(\n\t\t\t\t\t\tnew InterfaceType[] { \n\t\t\t\t\t\t\t\ttf.createFcItfType(\"factory\", \"org.diva.causalLink.IFactory\", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE),\n\t\t\t\t\t\t\t\ttf.createFcItfType(\"platform2model\", \"org.diva.causalLink.Platform2EMF\", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE)});\n\t\t\t\n\t\t\tComponentType emf2Fractal =\n\t\t\t\ttf.createFcType(\n\t\t\t\t\t\tnew InterfaceType[] { \n\t\t\t\t\t\t\t\ttf.createFcItfType(\"factory\", \"org.diva.causalLink.IFactory\", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE),\n\t\t\t\t\t\t\t\ttf.createFcItfType(\"platform2model\", \"org.diva.causalLink.Platform2EMF\", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE),\n\t\t\t\t\t\t\t\ttf.createFcItfType(\"model2platform\", \"org.diva.causalLink.EMF2Platform\", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE)});\n\n\t\t\t/*\n\t\t\t * Declaring component types related to the system\n\t\t\t */\t\t\t\t\t\t\t\t\t\t\t \n")
system.types.each{t |
			 	var lastPort : Port 
			 	if t.port.size > 0 then
			 		lastPort := t.port.last
			 	end
_res.append("\t\t\t \tComponentType type")
_res.append(t.oid.toString)
_res.append(" =\n\t\t\t \t\ttf.createFcType(\n\t\t\t\t\t\tnew InterfaceType[]{")
t.port.each{p | 
_res.append("\n\t\t\t\t\t\t\ttf.createFcItfType(\"")
_res.append(p.name)
_res.append("\",\"")
_res.append(p.service.name)
_res.append("\", ")
if p.role == "server" then 
_res.append("TypeFactory.SERVER")
else
_res.append("TypeFactory.CLIENT")
end
_res.append(", ")
if (p.lower==void).orElse{x | p.lower == 0} then 
_res.append("TypeFactory.OPTIONAL")
else
_res.append("TypeFactory.MANDATORY")
end
_res.append(", ")
if (p.upper == void).orElse{x | p.upper == 1} then 
_res.append("TypeFactory.COLLECTION")
else
_res.append("TypeFactory.SINGLE")
end
_res.append(")")
if p != lastPort then 
_res.append(",")
end
}
_res.append("\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n")
}
_res.append("\t\t\t \n\t\t\t/*\n\t\t\t * Instanciating components related to the causal link\n\t\t\t */\n\t\t\tGenericFactory cf = Fractal.getGenericFactory(boot);\n\t\t\t\n\t\t\tComponent factoryComp = cf.newFcInstance(factory, \"primitive\", \"org.diva.causalLink.FactoryImpl\");\n\t\t\tComponent f2eComp = cf.newFcInstance(fractal2EMF, \"primitive\", \"org.diva.causalLink.Fractal2EMF\");\n\t\t\tComponent e2fComp = cf.newFcInstance(emf2Fractal, \"primitive\", \"org.diva.causalLink.EMF2Fractal\");\n\t\t\t\n\t\t\tSmartAdaptersToFractal.causalComp = cf.newFcInstance(causalLink, \"NotifyComposite\", null);\n\t\t\t\n\t\t\tFractal.getNameController(SmartAdaptersToFractal.causalComp).setFcName(\"causalLink\");\n\t\t\tFractal.getNameController(factoryComp).setFcName(\"factory\");\n\t\t\tFractal.getNameController(f2eComp).setFcName(\"fractal2EMF\");\n\t\t\tFractal.getNameController(e2fComp).setFcName(\"EMF2Fractal\");\n\t\t\t\n\t\t\t/*\n\t\t\t * Creating listeners to observe the system \n\t\t\t */\n\t\t\tPlatform2EMF link = ((Platform2EMF)f2eComp.getFcInterface(\"platform2model\"));\n\t\t\tListenerEvolution listener = new ListenerEvolution(link);\n\t\t\t\n\t\t\t/*\n\t\t\t * Instanciating components related to the system\n\t\t\t */\n")
var cptName : String init system.root.name.replace(" ","").replace(".","")
_res.append("\t\t\tComponent ")
_res.append(cptName)
_res.append("Comp = cf.newFcInstance(type")
_res.append(system.root.type.oid.toString)
_res.append(", \"NotifyComposite\", ")
if system.root.contentDesc == void then
_res.append("null")
else
_res.append("\"")
_res.append(system.root.contentDesc)
_res.append("\"")
end
_res.append(");\n\t\t\tFractal.getNameController(")
_res.append(cptName)
_res.append("Comp).setFcName(\"")
_res.append(system.root.name)
_res.append("\");\n\t\t\tNotificationController ")
_res.append(cptName)
_res.append("NC = (NotificationController) ")
_res.append(system.root.name.replace(" ","").replace(".",""))
_res.append("Comp.getFcInterface(\"notify-controller\");\n\t\t\tInitializationContext ")
_res.append(cptName)
_res.append("Context = new InitializationContext();\n\t\t\t")
_res.append(cptName)
_res.append("Context.content = ")
_res.append(cptName)
_res.append("Comp;\n\t\t\t")
_res.append(cptName)
_res.append("NC.initFcController(")
_res.append(cptName)
_res.append("Context);\n\t\t\t")
_res.append(cptName)
_res.append("NC.registerListener(listener);\n\t\t\t \n")
system.root.subComponent.each{c | 
_res.append("")
cptName := c.name.replace(" ","").replace(".","")
_res.append("\t\t\t Component ")
_res.append(cptName)
_res.append("Comp = cf.newFcInstance(type")
_res.append(c.type.oid.toString)
_res.append(", ")
if c.isInstanceOf(PrimitiveInstance) then
_res.append("\"NotifyPrimitive\"")
else
_res.append("\"NotifyComposite\"")
end
_res.append(", ")
if c.contentDesc == void then
_res.append("null")
else
_res.append("\"")
_res.append(c.contentDesc)
_res.append("\"")
end
_res.append(");\n\t\t\t Fractal.getNameController(")
_res.append(cptName)
_res.append("Comp).setFcName(\"")
_res.append(c.name)
_res.append("\");\n\t\t\t NotificationController ")
_res.append(cptName)
_res.append("NC = (NotificationController) ")
_res.append(c.name.replace(" ","").replace(".",""))
_res.append("Comp.getFcInterface(\"notify-controller\");\n\t\t\tInitializationContext ")
_res.append(cptName)
_res.append("Context = new InitializationContext();\n\t\t\t")
_res.append(cptName)
_res.append("Context.content = ")
_res.append(cptName)
_res.append("Comp;\n\t\t\t")
_res.append(cptName)
_res.append("NC.initFcController(")
_res.append(cptName)
_res.append("Context);\n\t\t\t")
_res.append(cptName)
_res.append("NC.registerListener(listener);\n\t\t\t\n")
}
_res.append("\t\t\t \n\t\t\t /*\n\t\t\t  * Binding components related to the causal link\n\t\t\t  */\n\t\t\tFractal.getContentController(SmartAdaptersToFractal.causalComp).addFcSubComponent(factoryComp);\n\t\t\tFractal.getContentController(SmartAdaptersToFractal.causalComp).addFcSubComponent(e2fComp);\n\t\t\tFractal.getContentController(SmartAdaptersToFractal.causalComp).addFcSubComponent(f2eComp);\n\t\t\tFractal.getContentController(SmartAdaptersToFractal.causalComp).addFcSubComponent(")
_res.append(system.root.name.replace(" ","").replace(".",""))
_res.append("Comp);\n\t\t\t\n\t\t\tFractal.getBindingController(SmartAdaptersToFractal.causalComp).bindFc(\"model2platform\", e2fComp.getFcInterface(\"model2platform\"));\n\t\t\tFractal.getBindingController(SmartAdaptersToFractal.causalComp).bindFc(\"platform2model\", f2eComp.getFcInterface(\"platform2model\"));\n\t\t\tFractal.getBindingController(factoryComp).bindFc(\"platform2model\", f2eComp.getFcInterface(\"platform2model\"));\n\t\t\tFractal.getBindingController(factoryComp).bindFc(\"model2platform\", e2fComp.getFcInterface(\"model2platform\"));\n\t\t\tFractal.getBindingController(f2eComp).bindFc(\"factory\", factoryComp.getFcInterface(\"factory\"));\n\t\t\tFractal.getBindingController(e2fComp).bindFc(\"factory\", factoryComp.getFcInterface(\"factory\"));\n\t\t\tFractal.getBindingController(e2fComp).bindFc(\"platform2model\", f2eComp.getFcInterface(\"platform2model\"));\n\n\t\t\tFractal.getLifeCycleController(SmartAdaptersToFractal.causalComp).startFc();\n\n\t\t\t((IFactory)factoryComp.getFcInterface(\"factory\")).setGenericFactory(cf);\n\t\t\t((IFactory)factoryComp.getFcInterface(\"factory\")).setTypeFactory(tf);\n\t\t\t((Platform2EMF)f2eComp.getFcInterface(\"platform2model\")).setRoot(")
_res.append(system.root.name.replace(" ","").replace(".",""))
_res.append("Comp);\n\t\t\n\t\t\t/*\n\t\t\t * Binding components related to the system\n\t\t\t */\n")

			 var superCptName : String init ""
			 var subComponent : Set<ComponentInstance> init Set<ComponentInstance>.new
			 subComponent.addAll(system.root.subComponent)
			 var tempSubComponent : Set<ComponentInstance> init Set<ComponentInstance>.new
			 from  not subComponent.isEmpty
			 until subComponent.isEmpty
			 loop 
			 	subComponent.each{c |
			 		if c.isInstanceOf(CompositeInstance) then tempSubComponent.addAll(c.asType(CompositeInstance).subComponent) end
			 		cptName := c.name.replace(" ","").replace(".","")
			 		superCptName := c.superComponent.name.replace(" ","").replace(".","")
_res.append("\t\t\t Fractal.getContentController(")
_res.append(superCptName)
_res.append("Comp).addFcSubComponent(")
_res.append(cptName)
_res.append("Comp);\t\t\t\n")
	}
			 	subComponent.clear
			 	subComponent.addAll(tempSubComponent)
			 	tempSubComponent.clear
			 end
			 
_res.append("\t\t\t\n")

			 var serverName : String init ""
			 var bindingName : String init ""
			 subComponent.add(system.root)
			 from  not subComponent.isEmpty
			 until subComponent.isEmpty
			 loop 
			 	subComponent.each{c |
			 		cptName := c.name.replace(" ","").replace(".","")
			 		if c.isInstanceOf(CompositeInstance) then 
			 			tempSubComponent.addAll(c.asType(CompositeInstance).subComponent)
			 			c.asType(CompositeInstance).delegation.each{d |
			 			serverName := d.serverInstance.name
_res.append("\t\t\t Fractal.getBindingController(")
_res.append(cptName)
_res.append("Comp).bindFc(\"")
_res.append(d.exported.name)
_res.append("\", ")
_res.append(serverName)
_res.append("Comp.getFcInterface(\"")
_res.append(d.source.name)
_res.append("\"));\n")
} 
			 		end
			 		
			 		c.binding.each{b |
			 			serverName := b.serverInstance.name.replace(" ","").replace(".","")
			 			if b.id != void then bindingName := b.id else bindingName := b.client.name end
_res.append("\t\t\t Fractal.getBindingController(")
_res.append(cptName)
_res.append("Comp).bindFc(\"")
_res.append(bindingName)
_res.append("\", ")
_res.append(serverName)
_res.append("Comp.getFcInterface(\"")
_res.append(b.server.name)
_res.append("\"));\t\n")
}
_res.append("")
	}
			 	subComponent.clear
			 	subComponent.addAll(tempSubComponent)
			 	tempSubComponent.clear
			 end
			 
_res.append("\t\t\t \n")

			 subComponent.add(system.root)
			 from  not subComponent.isEmpty
			 until subComponent.isEmpty
			 loop 
			 	subComponent.each{c |
			 		if c.isInstanceOf(CompositeInstance) then tempSubComponent.addAll(c.asType(CompositeInstance).subComponent) end
			 	
_res.append("\t\t\tFractal.getLifeCycleController(")
_res.append(c.name.replace(" ","").replace(".",""))
_res.append("Comp).startFc();\n")
	}
			 	subComponent.clear
			 	subComponent.addAll(tempSubComponent)
			 	tempSubComponent.clear
			 end
			 
_res.append("\t\t} catch (Exception ex) {\n\t\t\tKermetaFractalInterpreter.getKermetaFractalInterpreter().errorln(\"!!!EXCEPTION!!!\");\n\t\t\tex.printStackTrace();\n\t\t}\t\t\n\t\treturn self;\n\t}\t\t\t \t\t\t \n}")
result := _res.toString
end
}
