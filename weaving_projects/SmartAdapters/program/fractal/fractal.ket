<%@ket
package="fractal"
require="http://art"
using="art art::instance art::type"
class="FractalTemplate"
parameters="system:System"
%>
package org.diva.causalLink.smartadapters.fractal;

import org.diva.causalLink.IFactory;
import org.diva.causalLink.Platform2EMF;
import org.diva.fractal.notification.ListenerEvolution;
import org.kermeta.fractal.console.KermetaFractalInterpreter;
import org.objectweb.fractal.api.Component;
import org.objectweb.fractal.api.control.NotificationController;
import org.objectweb.fractal.api.factory.GenericFactory;
import org.objectweb.fractal.api.type.ComponentType;
import org.objectweb.fractal.api.type.InterfaceType;
import org.objectweb.fractal.api.type.TypeFactory;
import org.objectweb.fractal.julia.InitializationContext;
import org.objectweb.fractal.util.Fractal;

import fr.irisa.triskell.kermeta.runtime.RuntimeObject;


/** 
 * Creation : July 2, 2008
 * Licence  : EPL 
 * Copyright: IRISA / INRIA Rennes
 * Authors  : Brice Morin, Equipe-Projet INRIA Triskell
 *            bmorin[at]irisa.fr
 *
 */
 
<%
var clsName : String init "Main"
if system.name != void then
	clsName := system.name+clsName
end
%>

public class <%=clsName.replace(" ","").replace(".","")%>
{
	/**
	 * Runs the initial configuration of the system (causal link + user system)
	 * and makes the connection with Kermeta
	 */
	public static RuntimeObject run(RuntimeObject self){
		KermetaFractalInterpreter.getKermetaFractalInterpreter().println("");
		try {
			System.setProperty("fractal.provider", "org.objectweb.fractal.julia.Julia");
			System.setProperty("julia.loader", "org.objectweb.fractal.julia.loader.DynamicLoader");
			System.setProperty("julia.config","etc/julia.cfg");
			Component boot = Fractal.getBootstrapComponent();
			TypeFactory tf = (TypeFactory) boot.getFcInterface("type-factory");

			/*
			 * Declaring component types related to the causal link
			 */
			ComponentType causalLink = 
				tf.createFcType(
					new InterfaceType[]{
						tf.createFcItfType("model2platform", "org.diva.causalLink.EMF2Platform", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE),
						tf.createFcItfType("platform2model", "org.diva.causalLink.Platform2EMF", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE)
					}
				);
			
			ComponentType factory =
				tf.createFcType(
					new InterfaceType[] { 
							tf.createFcItfType("factory", "org.diva.causalLink.IFactory", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE),
							tf.createFcItfType("platform2model", "org.diva.causalLink.Platform2EMF", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE),
							tf.createFcItfType("model2platform", "org.diva.causalLink.EMF2Platform", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE)
					}
				);			

			ComponentType fractal2EMF =
				tf.createFcType(
						new InterfaceType[] { 
								tf.createFcItfType("factory", "org.diva.causalLink.IFactory", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE),
								tf.createFcItfType("platform2model", "org.diva.causalLink.Platform2EMF", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE)});
			
			ComponentType emf2Fractal =
				tf.createFcType(
						new InterfaceType[] { 
								tf.createFcItfType("factory", "org.diva.causalLink.IFactory", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE),
								tf.createFcItfType("platform2model", "org.diva.causalLink.Platform2EMF", TypeFactory.CLIENT, TypeFactory.MANDATORY, TypeFactory.SINGLE),
								tf.createFcItfType("model2platform", "org.diva.causalLink.EMF2Platform", TypeFactory.SERVER, TypeFactory.MANDATORY, TypeFactory.SINGLE)});

			/*
			 * Declaring component types related to the system
			 */											 
			 <%system.types.each{t |
			 	var lastPort : Port 
			 	if t.port.size > 0 then
			 		lastPort := t.port.last
			 	end%>
			 	ComponentType type<%=t.oid.toString%> =
			 		tf.createFcType(
						new InterfaceType[]{<%t.port.each{p | %>
							tf.createFcItfType("<%=p.name%>","<%=p.service.name%>", <%if p.role == "server" then %>TypeFactory.SERVER<%else%>TypeFactory.CLIENT<%end%>, <%if (p.lower==void).orElse{x | p.lower == 0} then %>TypeFactory.OPTIONAL<%else%>TypeFactory.MANDATORY<%end%>, <%if (p.upper == void).orElse{x | p.upper == 1} then %>TypeFactory.COLLECTION<%else%>TypeFactory.SINGLE<%end%>)<%if p != lastPort then %>,<%end%><%}%>
						}
					);
			 <%}%>
			 
			/*
			 * Instanciating components related to the causal link
			 */
			GenericFactory cf = Fractal.getGenericFactory(boot);
			
			Component factoryComp = cf.newFcInstance(factory, "primitive", "org.diva.causalLink.FactoryImpl");
			Component f2eComp = cf.newFcInstance(fractal2EMF, "primitive", "org.diva.causalLink.Fractal2EMF");
			Component e2fComp = cf.newFcInstance(emf2Fractal, "primitive", "org.diva.causalLink.EMF2Fractal");
			
			SmartAdaptersToFractal.causalComp = cf.newFcInstance(causalLink, "NotifyComposite", null);
			
			Fractal.getNameController(SmartAdaptersToFractal.causalComp).setFcName("causalLink");
			Fractal.getNameController(factoryComp).setFcName("factory");
			Fractal.getNameController(f2eComp).setFcName("fractal2EMF");
			Fractal.getNameController(e2fComp).setFcName("EMF2Fractal");
			
			/*
			 * Creating listeners to observe the system 
			 */
			Platform2EMF link = ((Platform2EMF)f2eComp.getFcInterface("platform2model"));
			ListenerEvolution listener = new ListenerEvolution(link);
			
			/*
			 * Instanciating components related to the system
			 */
			 <%var cptName : String init system.root.name.replace(" ","").replace(".","")%>
			Component <%=cptName%>Comp = cf.newFcInstance(type<%=system.root.type.oid.toString%>, "NotifyComposite", <%if system.root.contentDesc == void then%>null<%else%>"<%=system.root.contentDesc%>"<%end%>);
			Fractal.getNameController(<%=cptName%>Comp).setFcName("<%=system.root.name%>");
			NotificationController <%=cptName%>NC = (NotificationController) <%=system.root.name.replace(" ","").replace(".","")%>Comp.getFcInterface("notify-controller");
			InitializationContext <%=cptName%>Context = new InitializationContext();
			<%=cptName%>Context.content = <%=cptName%>Comp;
			<%=cptName%>NC.initFcController(<%=cptName%>Context);
			<%=cptName%>NC.registerListener(listener);
			 
			 <%system.root.subComponent.each{c | %>
			 <%cptName := c.name.replace(" ","").replace(".","")%>
			 Component <%=cptName%>Comp = cf.newFcInstance(type<%=c.type.oid.toString%>, <%if c.isInstanceOf(PrimitiveInstance) then%>"NotifyPrimitive"<%else%>"NotifyComposite"<%end%>, <%if c.contentDesc == void then%>null<%else%>"<%=c.contentDesc%>"<%end%>);
			 Fractal.getNameController(<%=cptName%>Comp).setFcName("<%=c.name%>");
			 NotificationController <%=cptName%>NC = (NotificationController) <%=c.name.replace(" ","").replace(".","")%>Comp.getFcInterface("notify-controller");
			InitializationContext <%=cptName%>Context = new InitializationContext();
			<%=cptName%>Context.content = <%=cptName%>Comp;
			<%=cptName%>NC.initFcController(<%=cptName%>Context);
			<%=cptName%>NC.registerListener(listener);
			
			 <%}%>
			 
			 /*
			  * Binding components related to the causal link
			  */
			Fractal.getContentController(SmartAdaptersToFractal.causalComp).addFcSubComponent(factoryComp);
			Fractal.getContentController(SmartAdaptersToFractal.causalComp).addFcSubComponent(e2fComp);
			Fractal.getContentController(SmartAdaptersToFractal.causalComp).addFcSubComponent(f2eComp);
			Fractal.getContentController(SmartAdaptersToFractal.causalComp).addFcSubComponent(<%=system.root.name.replace(" ","").replace(".","")%>Comp);
			
			Fractal.getBindingController(SmartAdaptersToFractal.causalComp).bindFc("model2platform", e2fComp.getFcInterface("model2platform"));
			Fractal.getBindingController(SmartAdaptersToFractal.causalComp).bindFc("platform2model", f2eComp.getFcInterface("platform2model"));
			Fractal.getBindingController(factoryComp).bindFc("platform2model", f2eComp.getFcInterface("platform2model"));
			Fractal.getBindingController(factoryComp).bindFc("model2platform", e2fComp.getFcInterface("model2platform"));
			Fractal.getBindingController(f2eComp).bindFc("factory", factoryComp.getFcInterface("factory"));
			Fractal.getBindingController(e2fComp).bindFc("factory", factoryComp.getFcInterface("factory"));
			Fractal.getBindingController(e2fComp).bindFc("platform2model", f2eComp.getFcInterface("platform2model"));

			Fractal.getLifeCycleController(SmartAdaptersToFractal.causalComp).startFc();

			((IFactory)factoryComp.getFcInterface("factory")).setGenericFactory(cf);
			((IFactory)factoryComp.getFcInterface("factory")).setTypeFactory(tf);
			((Platform2EMF)f2eComp.getFcInterface("platform2model")).setRoot(<%=system.root.name.replace(" ","").replace(".","")%>Comp);
		
			/*
			 * Binding components related to the system
			 */
			 <%
			 var superCptName : String init ""
			 var subComponent : Set<ComponentInstance> init Set<ComponentInstance>.new
			 subComponent.addAll(system.root.subComponent)
			 var tempSubComponent : Set<ComponentInstance> init Set<ComponentInstance>.new
			 from  not subComponent.isEmpty
			 until subComponent.isEmpty
			 loop 
			 	subComponent.each{c |
			 		if c.isInstanceOf(CompositeInstance) then tempSubComponent.addAll(c.asType(CompositeInstance).subComponent) end
			 		cptName := c.name.replace(" ","").replace(".","")
			 		superCptName := c.superComponent.name.replace(" ","").replace(".","")%>
			 Fractal.getContentController(<%=superCptName%>Comp).addFcSubComponent(<%=cptName%>Comp);			
			 <%	}
			 	subComponent.clear
			 	subComponent.addAll(tempSubComponent)
			 	tempSubComponent.clear
			 end
			 %>	
			
			<%
			 var serverName : String init ""
			 var bindingName : String init ""
			 subComponent.add(system.root)
			 from  not subComponent.isEmpty
			 until subComponent.isEmpty
			 loop 
			 	subComponent.each{c |
			 		cptName := c.name.replace(" ","").replace(".","")
			 		if c.isInstanceOf(CompositeInstance) then 
			 			tempSubComponent.addAll(c.asType(CompositeInstance).subComponent)
			 			c.asType(CompositeInstance).delegation.each{d |
			 			serverName := d.serverInstance.name%>
			 Fractal.getBindingController(<%=cptName%>Comp).bindFc("<%=d.exported.name%>", <%=serverName%>Comp.getFcInterface("<%=d.source.name%>"));
			 			<%} 
			 		end
			 		
			 		c.binding.each{b |
			 			serverName := b.serverInstance.name.replace(" ","").replace(".","")
			 			if b.id != void then bindingName := b.id else bindingName := b.client.name end%>
			 Fractal.getBindingController(<%=cptName%>Comp).bindFc("<%=bindingName%>", <%=serverName%>Comp.getFcInterface("<%=b.server.name%>"));	
			 		<%}%>
			 <%	}
			 	subComponent.clear
			 	subComponent.addAll(tempSubComponent)
			 	tempSubComponent.clear
			 end
			 %>
			 
			 <%
			 subComponent.add(system.root)
			 from  not subComponent.isEmpty
			 until subComponent.isEmpty
			 loop 
			 	subComponent.each{c |
			 		if c.isInstanceOf(CompositeInstance) then tempSubComponent.addAll(c.asType(CompositeInstance).subComponent) end
			 	%>
			Fractal.getLifeCycleController(<%=c.name.replace(" ","").replace(".","")%>Comp).startFc();
			 <%	}
			 	subComponent.clear
			 	subComponent.addAll(tempSubComponent)
			 	tempSubComponent.clear
			 end
			 %>
		} catch (Exception ex) {
			KermetaFractalInterpreter.getKermetaFractalInterpreter().errorln("!!!EXCEPTION!!!");
			ex.printStackTrace();
		}		
		return self;
	}			 			 
}