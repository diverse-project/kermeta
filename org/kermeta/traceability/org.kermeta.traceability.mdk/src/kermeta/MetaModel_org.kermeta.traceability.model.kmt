@uri "http://www.kermeta.org/Traceability/2.0.0"
package org::kermeta::traceability;
//require "http://www.kermeta.org/Traceability/2.0.0"

require "platform:/resource/org.kermeta.traceability.model/model/Traceability.ecore"
//require "Traceability.kmt"
require "kermeta"
using kermeta::standard
using kermeta::language::structure

/**
 * This abstract class represents a reference to a concrete object
 */
aspect abstract class Reference inherits Traceable
{
	/**return a unique signature for equivalents references*/
	operation signature() : String is abstract
}

aspect abstract class Traceable
{
	operation addTarget( context : Object , targetElem : Traceable) : Void is do 
		var targetTrace : Trace init Trace.new
		targetTrace.sourceElem:=self
		targetTrace.targetElem:=targetElem
		targetTrace.context?=context
	end
	
	operation resolveAll() : Sequence<Traceable>  is do
		result:=target.collect{x|x.targetElem}
	end
	
	
	operation resolveOne(t:Class) : Traceable is do
		
		from var i : Integer init 0
			until target.size() <= i
				loop
		
    			if target.elementAt(i).targetElem.isKindOf(t) then 
    	
    				result:=target.elementAt(i).targetElem
    				i:=target.size()
    			end
    			i:=i+1
			end
	end
	
	
	operation resolveIn(aContext : Object) : Sequence<Traceable> is do
		result:=target.select{trace|trace.context.equals(aContext)}.collect{x|x.targetElem}
	end
	
	operation invResolveAll() : Sequence<Traceable>  is do
		result:=source.collect{x|x.sourceElem}
	end
	
	
	operation invResolveOne(t:Class) : Traceable is do
		from var i : Integer init 0
			until source.size() == i
				loop
    			if source.elementAt(i).sourceElem.isKindOf(t) then 
    				result:=source.elementAt(i).sourceElem
    				end
			end
	end
	
	operation invResolveIn(aContext : Object) : Sequence<Traceable> is do
		result:=source.select{trace|trace.context.equals(aContext)}.collect{x|x.sourceElem}
	end
	
}
