

using kermeta::standard

alias Integer : kermeta::standard::Integer;

package testArithm{






// "this testsuite must be cleaned and verified !!"

// arithmetic operations
class Test_arithm  {
	
	// Contains all tests from this class
	@main "main"
	operation main() : Void is do
		main_operation()
		
		// Plus tests
		testPlus0()
		testPlus8()
		testOpPlus_8()
		testPlus()
		
		// Minus tests
		testMinus0()
		testMinus8()
		testMinus_8() 
		testMinus()
		
		// Times tests
		testTimes0()
		testTimes8()
		testTimes_8()
		testTimes()
		
		// Test compare to numeric
		testCompareToNumeric()
		
		// Test Div
		testDiv()
		//testfailDivBy0()
		
		// Test priority
		 testoperationpplus()
		 testoperationpplusbis()
		 
		 testoperationpminus()
		 testoperationpminusbis()
		 
		 testoperationpdivtimes()
		 testoperationpdivtimesbis()
		 
		 // Plus times minus
		 testoperation_ptm()
		 
	end

    operation main_operation() : kermeta::standard::Integer is do
        var r1 : kermeta::standard::Integer
        var r2 : kermeta::standard::Integer
        var r3 : kermeta::standard::Integer
        var rptm : kermeta::standard::Integer
        var r1_8 :  kermeta::standard::Integer
        var r2_8 :  kermeta::standard::Integer
        var r3_8 :  kermeta::standard::Integer
        var r1_m8 : kermeta::standard::Integer
        var r2_m8  : kermeta::standard::Integer
        var r3_m8  : kermeta::standard::Integer
        
        // melting
        rptm := operation_ptm(2)
        
        // plus
        r1 :=  operationPlus(0)
        r1_8 := operationPlus(8)
        r1_m8 :=  operationPlus(0-8)

        // minus
        r2 := operationMinus(0)
        r2_8 := operationMinus(8)
//        r2_m8 := testoperation2(-8)

        // times
        r3 := operationTimes(0)
        r3_8 := operationTimes(8)
//        r3_m8 := testoperation3(-8)

		result := void

    end
    
    operation testPlus0() : Void is do
    	stdio.write( operationPlus(0).toString)
    	5+3
    	// change assert( operationPlus(0)==5) in commentaries
		//5.equals(5)
    	assert( operationPlus(0)==5)
    end
    operation testPlus8() : Void is do
    	assert( operationPlus(8)==13)
    end
	operation testOpPlus_8() : Void is do
//		assert( operationPlus(0-8)==0-3)
	end
	
	operation testMinus0() : Void is do
		assert(operationMinus(0)==5)
	end
	operation testMinus8() : Void is do
//		assert(operationMinus(0)==0-3)
	end
	operation testMinus_8() : Void is do
//		assert(operationMinus(0-8)==13)
	end
	// 5*num
	operation testTimes0() : Void is do
		assert(operationTimes(0)==0)
	end
	operation testTimes8() : Void is do
		assert(operationTimes(8)==40)
	end
	operation testTimes_8() : Void is do
		assert(operationTimes(0-8)==0-40)
	end

	operation testCompareToNumeric() : Void is do
		assert(8.compareTo(8) == 0)
	end

	// test plus
	operation testPlus() : Void is do
		assert( operationPlus(5-2)==8)
		assert( operationPlus(-3)==2)
		assert( operationPlus(0)==5)
	end
	
	// test minus
	operation testMinus() : Void is do
		assert(operationMinus(3)==2)
		assert(operationMinus(-3)==8)
		assert(operationMinus(0)==5)
	end

	// test times
	operation testTimes() : Void is do
		assert(operationTimes(3)==15)
		assert(operationTimes(-3)==-15)
		assert(operationTimes(0)==0)
	end
	
	
	// test div
	operation testDiv() : Void is do
		assert(operationDiv(3)==1)
		assert(operationDiv(-3)==-1)
		assert(operationDiv(5)==1)
	end
	
	// div by Zero
/*	operation testfailDivBy0() : Void is do
		assert(operationDiv(0)==0)
	end*/


	// priority : * on +
	operation testoperationpplus() : Integer is do
		// this should be : 3 + ( 7 * 2 )
		result := 3 + 7 * 2
		assert(result==17)
	end
	
	// priority : * on + (another order)
	operation testoperationpplusbis() : Integer is do
		result := 3 * 2 + 1
		assert(result==7)
	end
	
	// priority : * on -
	operation testoperationpminus() : Integer is do
		result := 3 - 7 * 2
		assert(result==-11)
	end
	
	// priority : * on -
	operation testoperationpminusbis() : Integer is do
		result := 3 * 7 - 2
		assert(result==19)
	end	
	
	// priority : * and / 
	operation testoperationpdivtimes() : Integer is do
		result := 3 * 8 / 3 * 4
		assert(result==32)
	end
	
	// priority : * and / 
	operation testoperationpdivtimesbis() : Integer is do
		result := 3 * ( 8 / 3 ) * 4
		assert(result==24)
	end	
	

    // plus times minus
    operation testoperation_ptm() : Integer is do
        assert(operationDivbis()==0)
        assert(operation_ptm(3)==11)
        result := void
    end

    // plus times minus
    operation operation_ptm(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        var ~result : kermeta::standard::Integer
        var a : kermeta::standard::Integer
        a := 4
        ~result := ( 3 + a ) * num - 10
        result := ~result
    end

    // plus
    operation operationPlus(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 + num
    
    end

    // minus
    operation operationMinus(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 - num
    end

    // times
    operation operationTimes(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 * num
    end

    // div
    operation operationDiv(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 / num
    end
    // div2 -> should be zero
	operation operationDivbis() : Integer is do
		result := 0 / 4
	end
}

}


