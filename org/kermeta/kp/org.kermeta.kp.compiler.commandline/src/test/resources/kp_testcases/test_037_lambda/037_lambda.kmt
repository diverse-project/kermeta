/*****************************************************************************
 * $Id: 037_testLambda.main.kmt,v 1.8 2008-11-25 15:11:47 dvojtise Exp $
 * Project : Kermeta (First iteration)
 * Creation date :  
 * File : testLambda.kmt
 * 		
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * Creation date : Apr 18 11:13:50 2005
 * Authors : 
 *		zdrey
 *		dvojtise
 * Description : 
 *		test for Lambda
 * 		test all the possible maneers to use a lambda expression
 ***************************************************************************
 */


package root_package_lambda;

using kermeta::io 
using kermeta::standard 
using org::kermeta::kunit


//alias FunctionType : kermeta::language::structure::FunctionType;

class LambdaTester inherits kermeta::kunit::Assert
{
	
	operation mainTest() : Void is do
		testNoLambda
		testLambda1
		testLambdaWithDef
		testLambdaWithTwoParams
		testLambdaSimpleWithString
		testLambdaWithString
		testLambdaWithThreeParams
		testLambdaWithThreeParams2
		testLambdaWithoutParam1
		testLambdaWithoutParam2
		testLambdaWithoutParam3
		testNestedLambda
		testLambdaWithExtVar
		testLambdaStoredInReference
		testLambdaWithExternVarStoredInReference
		testOutsideScopeVar
		testOutsideScopeParam
		
		testLambdaVarPriority
		testLambdaInOperation
		testOpWithLambdaAsParam
		testintegerTimes
		testintegerTimesToString
		testFract
	end
	
	operation testNoLambda() : kermeta::standard::Integer is do
		StdIO.write("toto")
		result := void 
	end
	/** test a simple lambda expression call with one argument 
	 *  A call of a lambda expression is "interpreted" as a callvariable with parameters
	 *    <fParameters xsi:type="kermeta_behavior:FCallVariable" fName="lf1">
            <fParameters xsi:type="kermeta_behavior:FIntegerLiteral" fValue="3"/>
          </fParameters>
	*/
	operation testLambda1() : Void is do
		var lf1 : <Integer->Integer>
		var res : Integer
		// old syntax lf1 := function { i : Integer | i.plus(1) }
		lf1 := { i : Integer | i.plus(1) }
		res := lf1(3)
		assert(res == 4)
	end
	
	/** test an operation call with a lambda expression */
	operation testLambdaWithDef() : Void is do
		var lf1 : <Integer->Integer>
		// old syntax lf1 := function { i : Integer | i.plus(1) }
		lf1 := { i : Integer | i.plus(1) }
		assert(lf1(3).equals(4))
	end

	/** test a lambda exp. with 2 parameters */
	operation testLambdaWithTwoParams() : Void is do
		var lf1 : <[Integer, Integer]->Integer>
		// old syntax lf1 := function { i : Integer, j : Integer | i.plus(j) }
		lf1 := { i : Integer, j : Integer | i.plus(j) }
		assert(lf1(3, 4) == 7)
	end


	
	operation testLambdaSimpleWithString() : Void is do
		var lfs : <String->String>
		// old syntax lfs := function { str : String | "toto" }
		lfs := { str : String | "toto" }
		lfs("pof")
		assert(lfs("pof")=="toto")
		
	end
	
	
	
	/** test a lambda exp. with a String */
	operation testLambdaWithString() : Void is do
		var lfs : <String->String>
		// old syntax lfs := function { str : String | str.substring(0,1) }
		lfs := { str : String | str.substring(0,1) }
		assert(lfs("pof")=="p")
		
	end

	/** test a lambda exp. with 3 parameters */
	operation testLambdaWithThreeParams() : Void is do
		var lft1 : <[Integer, Integer, String]->Integer>
		// old syntax lft1 := function { i : Integer, j : Integer, k : String | k.indexOf("f") }
		lft1 := { i : Integer, j : Integer, k : String | k.indexOf("f") }
		StdIO.writeln("stringOfMoreThanSevenChars".indexOf("f").toString)
		assert(lft1(3, 4, "stringOfMoreThanSevenChars")==7)
	end


	operation testLambdaWithThreeParams2() : Void is do
		var lft2 : <[Integer, Integer, String]->String>
		// old syntax lft2 := function { i : Integer, j : Integer, k : String | k.substring(i.plus(j), i.plus(j)+2) }
		lft2 := { i : Integer, j : Integer, k : String | k.substring(i.plus(j), i.plus(j)+2) }
		assert(lft2(3, 4, "stringOfMoreThanSevenChars")=="fM")
	end

	operation testLambdaWithoutParam1() is
	do
		var f: <Void -> Void>
		var passed : Boolean init false
		f := {i : Void | StdIO.writeln("testLambdaWithoutParam")
				passed := true
				void
			}       
		
		f(void)
		assertTrueWithMsg(passed,"function f(void) not called !")
		

	end 
	/** test for bug #6883 */
	operation testLambdaWithoutParam2() is
	do
		var f: <Void -> Void>
		var passed : Boolean init false
		f := {i : Void | StdIO.writeln("testLambdaWithoutParam")
				passed := true
				void
			}       
		
		f() // "Hello" is not displayed
		assertTrueWithMsg(passed,"function f() not called !")
		

	end
	/** test for bug #6883 */
	operation testLambdaWithoutParam3() is
	do
		var f: <Void -> Void>
		var passed : Boolean init false
		f := {i : Void | StdIO.writeln("testLambdaWithoutParam3")
				passed := true
				void
			}       
				
		f // "Hello" is not displayed
		assertTrueWithMsg(passed,"function f not called !")

	end

	// todo : { i : Integer | i }?

	// test a nested lambda exp. 
	operation testNestedLambda() : Void is do
		var lf1 : <[Integer, Integer, String]->String>
		var lf2 : <[String, String]->String>
		lf1 := { i : Integer, j : Integer, k : String | k.substring(i.plus(j), 7) }
		lf2 := { s1 : String, s2 : String | lf1(1, 2, s1+s2) }
		assert(lf2("abcde", "fghi")=="defg")
	end
	
	// test a lambda expression using an extern variable
	operation testLambdaWithExtVar() : Void is do
		var lf1 : <Integer->Integer>
		var extern_var : kermeta::standard::Integer
		lf1 := { i : kermeta::standard::Integer |  i.plus(extern_var)}
		extern_var := 5
		assert(lf1(4)==9)
	end
	
	reference lambdaStoredInReference : <Integer->Integer>
	
	// test a lambda expression stored in a reference
	operation testLambdaStoredInReference() : Void is do
		
		lambdaStoredInReference := { i : kermeta::standard::Integer |  i.plus(1)}
		
		//assert(lambdaInReference(4)==5) // doesn't work
		// workaround
		var lf1 : <Integer->Integer>
		lf1 := lambdaStoredInReference
		assert(lf1(4) == 5)
	end
	
	//----------------
	reference lambdaWithExternVarStoredInReference : <Integer->Integer>
	
	// test a lambda expression stored in a reference
	operation testLambdaWithExternVarStoredInReference() : Void is do
		var extern_var : Integer init 5
		lambdaWithExternVarStoredInReference := { i : kermeta::standard::Integer |  i.plus(extern_var)}
		
		//assert(lambdaInReference(4)==5) // doesn't work
		// workaround
		var lf1 : <Integer->Integer>
		lf1 := lambdaWithExternVarStoredInReference
		assert(lf1(4) == 9)
	end
	
	//--------------------
	
	
	operation testOutsideScopeVar() : Void is do
		var lf1 : <Integer->Integer>
		lf1 := getOutsidescopeLambda()
		assert(lf1(4) == 7)
		//StdIO.writeln("   " +lf1(4).toString)
		use1OutsidescopeLambda(lf1)
		use2OutsidescopeLambda(lf1)
	end
	
	operation getOutsidescopeLambda() : <Integer->Integer> is do
		var extern_var : Integer init 5
		result := { i : kermeta::standard::Integer |  i.plus(extern_var)}
		extern_var := 3
	end
	
	operation use1OutsidescopeLambda( f : <Integer->Integer>) : Void is do
		assert(f(4) == 7)
	end
	operation use2OutsidescopeLambda( f : <Integer->Integer>) : Void is do
		// check that the variable isn't overwriten
		var extern_var : Integer init 8
		assert(f(4) == 7)
	end
	
	/* -------------------- */
	attribute anInteger : Integer
	operation testOutsideScopeAttribute() : Void is do
		var lf1 : <Integer->Integer>
		lf1 := getOutsidescopeLambdaAtt()
		anInteger := 3
		assert(lf1(4) == 7)
		StdIO.writeln("testOutsideScopeAttribute   " +lf1(4).toString)
	end
	
	operation getOutsidescopeLambdaAtt() : <Integer->Integer> is do
		result := { i : kermeta::standard::Integer |  i.plus(anInteger)}
	end
	
	/* -------------------- */
	operation testOutsideScopeParam() : Void is do
		var lf1 : <Integer->Integer>
		var myInteger : Integer init 3
		lf1 := getOutsidescopeLambdaParam(myInteger)
		assert(lf1(4) == 7)
		StdIO.writeln(" hop  " +lf1(4).toString)
		myInteger := 4
		getOutsidescopeLambdaParam(myInteger)
		assert(lf1(4) == 7) // verify that the previous instructions haven't changed lf1 behavior 
					// DVK is it true even if we use non priomitive types ?
		StdIO.writeln(" hop  " +lf1(4).toString)
	end
	
	operation getOutsidescopeLambdaParam(aParamInteger : Integer) : <Integer->Integer> is do
		result := { i : kermeta::standard::Integer |  i.plus(aParamInteger)}
	end
	
	/* ----------------- */
	// test a lambda expression using in its params 
	// a variable of same name as an extern variable
	operation testLambdaVarPriority() : Void is do
		var lf1 : <[Integer, Integer]->Integer>
		var a_var : kermeta::standard::Integer
		lf1 := { i : Integer, a_var : Integer |  i.plus(a_var)}
		a_var := 4
		assert(lf1(1,2)==3)
		assert(a_var == 4)
	end
	
	// lambda exp. as parameter of an operation?
	operation testLambdaInOperation() : Void is do
		var lf1 : <[Integer, Integer]->Integer>
		lf1 := { i : Integer, j : Integer | i.plus(j) }
		// 3 * 2 * 5
		assert(3.mult(lf1(2, 5))==21)
	end
	
	operation testOpWithLambdaAsParam() : Void is do
		var lf1 : <Integer->Integer>
		lf1 := { i : Integer | i.plus(54) }
		assert(opWithLambdaAsParam(lf1, 3)==57)
	end
	// TODO : lambda exp. as a parameter binding of a parametric class? 


	/** an operation that takes a lambda exp. as param and simply executes it */
	operation opWithLambdaAsParam(lambda : <Integer->Integer>, a : kermeta::standard::Integer) : Integer is do
		result := lambda(a)
	end
	
	operation testintegerTimes() is do
		var total : Integer init 0
		3.times{ i |
			total := total + i
		}
		assert(total == 3)
	end
	
	operation testintegerTimesToString() is do
		3.times{ i |
			StdIO.writeln("hello " + i.toString)
			//StdIO.write((i+1).toString)
		}
	end
	
	operation testFract() is do
		var fact : <Integer -> Integer>
        fact := {x : Integer |
	        	if x == 0 then 1 else x * fact(x-1) end
	       	}
        fact(3)
		assert(fact(3) == 6)
		StdIO.writeln(fact(7).toString)
	end
	
}