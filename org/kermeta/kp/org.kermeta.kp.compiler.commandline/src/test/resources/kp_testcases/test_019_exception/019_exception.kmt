

package testExceptionsPackage;



using kermeta_standard^kermeta::standard::*
using kermeta_standard^kermeta::exceptions::*

using kermeta::io::StdIO => stdio
 
 class MyExceptionX inherits Exception {
 }
 class MyExceptionY inherits Exception {
 }
 
 
 class A
 {
  	operation opA1 (b : Boolean) is do
 		if (b) then
 			raise MyExceptionX.new
 		else raise MyExceptionY.new
 		end
 	end

 	operation opA2(b1 : Boolean,b2 : Boolean) is do
 		if b1 then do
 			opA1(b2)
 			rescue (s : MyExceptionX)
 			 stdio.write(s.toString)
 			 stdio.writeln(" rescued")
 			 end
 		else do
 			opA1(b2)
 			rescue (i : MyExceptionY)
 			 stdio.write(i.toString)
 			 stdio.writeln(" propagated")
 			 raise i
 			 end
 		end
 	end
 }
 
class B
{
 	operation opB(a : A,b1 : Boolean,b2 : Boolean) is do
 		if (b1) then do
 			a.opA1(b2)
 			rescue (s : MyExceptionX)
 			 stdio.write(s.toString)
 			 stdio.writeln(" rescued")
 			 end
 		else do
 			a.opA1(b2)
 			rescue (i : MyExceptionY)
 			 stdio.write(i.toString)
 			 stdio.writeln(" propagated")
 			 raise i
 			 end
 		end
 		rescue (s : MyExceptionX)
 			 stdio.write(s.toString)
 			 stdio.writeln(" rescued")
 	end
}

class TestExceptions inherits kermeta::kunit::Assert
{    

	operation main() is do
		testExceptionPropagation
	end
    operation testExceptionPropagation() is do
     	var a : A
     	var b : B
     	
     	a := A.new
     	b := B.new
     	
     	do
     		a.opA1(true)
     		assert(false)
     		rescue (s:MyExceptionX)
     			assert(true)
     	end
     	do
     		a.opA1(false)
     		assert(false)
     		rescue (i:MyExceptionY)
     			assert(true)
     	end
     	a.opA2(true,true)
     	do
     		a.opA2(true,false)
     		assert(false)
     		rescue (i:MyExceptionY)
     			assert(true)
     	end
     	do
     		a.opA2(false,true)
     		assert(false)
     		rescue (s:MyExceptionX)
     			assert(true)
     	end
     	do
      		a.opA2(false,false)
      		assert(false)
      		rescue(i:MyExceptionY)
      			assert(true)
      	end
      	b.opB(a,true,true)
      	b.opB(a,false,true)
      	do
	      	b.opB(a,true,false)
	      	assert(false)
	      	rescue(i:MyExceptionY)
	      		assert(true)
	    end
     	do
	      	b.opB(a,false,false)
	      	assert(false)
	      	rescue(i:MyExceptionY)
	      		assert(true)
	    end
     end
     
}    
