package testArithm;

using kermeta::standard::Integer => Integer

// arithmetic operations
class Test_arithm {

    operation main_operation() is do
        var r1 : kermeta::standard::Integer
        var r2 : kermeta::standard::Integer
        var r3 : kermeta::standard::Integer
        var rptm : kermeta::standard::Integer
        var r1_8 :  kermeta::standard::Integer
        var r2_8 :  kermeta::standard::Integer
        var r3_8 :  kermeta::standard::Integer
        var r1_m8 : kermeta::standard::Integer
        var r2_m8  : kermeta::standard::Integer
        var r3_m8  : kermeta::standard::Integer
        
        // melting
        rptm := operation_ptm(2)
        
        // plus
        r1 := operation1(0)
        r1_8 := operation1(8)
        r1_m8 := operation1(0-8)

        // minus
        r2 := operation2(0)
        r2_8 := operation2(8)
//        r2_m8 := testoperation2(-8)

        // times
        r3 := operation3(0)
        r3_8 := operation3(8)
//        r3_m8 := testoperation3(-8)

    end
    
    operation testOp10() is do
    	kermeta::io::StdIO.writeln(operation1(0).toString)
    	5+3
		5.equals(5)
    	//assert(operation1(0)==5)
    end
    operation testOp18() is do
    	assert(operation1(8)==13)
    end
	operation testOp1_8() is do
//		assert(operation1(0-8)==0-3)
	end
	
	operation testOp20() is do
		assert(operation2(0)==5)
	end
	operation testOp28() is do
//		assert(operation2(0)==0-3)
	end
	operation testOp2_8() is do
//		assert(operation2(0-8)==13)
	end
	// 5*num
	operation testOp30() is do
		assert(operation3(0)==0)
	end
	operation testOp38() is do
		assert(operation3(8)==40)
	end
	operation testOp3_8() is do
		assert(operation3(0-8)==0-40)
	end

	operation testCompareToNumeric() is do
		assert(8.compareTo(8) == 0)
	end

	// test plus
	operation testop1() is do
		assert(operation1(5-2)==8)
		assert(operation1(-3)==2)
		assert(operation1(0)==5)
	end
	
	// test minus
	operation testop2() is do
		assert(operation2(3)==2)
		assert(operation2(-3)==8)
		assert(operation2(0)==5)
	end

	// test times
	operation testop3() is do
		assert(operation3(3)==15)
		assert(operation3(-3)==-15)
		assert(operation3(0)==0)
	end
	
	
	// test div
	operation testop4() is do
		assert(operation4(3)==1)
		assert(operation4(-3)==-1)
		assert(operation4(5)==1)
	end
	
	// div by Zero
/*	operation testfailop4() is do
		assert(operation4(0)==0)
	end*/


	// priority : * on +
	operation testoperationpplus() : Integer is do
		// this should be : 3 + ( 7 * 2 )
		result := 3 + 7 * 2
		assert(result==17)
	end
	
	// priority : * on + (another order)
	operation testoperationpplusbis() : Integer is do
		result := 3 * 2 + 1
		assert(result==7)
	end
	
	// priority : * on -
	operation testoperationpminus() : Integer is do
		result := 3 - 7 * 2
		assert(result==-11)
	end
	
	// priority : * on -
	operation testoperationpminusbis() : Integer is do
		result := 3 * 7 - 2
		assert(result==19)
	end	
	
	// priority : * and / 
	operation testoperationpdivtimes() : Integer is do
		result := 3 * 8 / 3 * 4
		assert(result==32)
	end
	
	// priority : * and / 
	operation testoperationpdivtimesbis() : Integer is do
		result := 3 * ( 8 / 3 ) * 4
		assert(result==24)
	end	
	

    // plus times minus
    operation testoperation_ptm() is do
        assert(operation4bis()==0)
        assert(operation_ptm(3)==11)
    end

    // plus times minus
    operation operation_ptm(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        var ~result : kermeta::standard::Integer
        var a : kermeta::standard::Integer
        a := 4
        ~result := ( 3 + a ) * num - 10
        result := ~result
    end

    // plus
    operation operation1(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 + num
    
    end

    // minus
    operation operation2(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 - num
    end

    // times
    operation operation3(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 * num
    end

    // div
    operation operation4(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 / num
    end
    // div2 -> should be zero
	operation operation4bis() : Integer is do
		result := 0 / 4
	end
}


