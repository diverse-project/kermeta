using kermeta_standard^kermeta::standard::*
using kermeta_standard^kermeta::io::StdIO => stdio
using #rootPackage::*

package mainPackage{
	class MainClass inherits library_utils^kermeta::kunit::TestCase
	{
		operation mainOperation() : Void is do 
			var c : C := C.new
			
			c.ownedAs.add(C.new.initialize("foo").asType(C))
			c.ownedAs.add(C.new.initialize("bar").asType(C))
			
			c.ownedAs.first.ownedAs.add(C.new.initialize("sub").asType(C)) 
			
			// write the name of all the elements directly  contained by c
			c.eachOwnedElement{ aNamedElement | stdio.writeln(aNamedElement.name) }
			
			// collect all the elements directly contained by c
			var ownedElements : Sequence<Object> := Sequence<Object>.new
			c.eachOwnedElement{ aNamedElement | ownedElements.add(aNamedElement) }
			stdio.writeln("ownedElements.size = "+ ownedElements.size.toString)
			assert(ownedElements.size == 2)
			
			// write the name of all the elements directly or indirectly contained by c
			c.eachAllOwnedElement{ aNamedElement | stdio.writeln(aNamedElement.name) }
			
			// collect all the elements directly or indirectly contained by c
			var allownedElements : Sequence<Object> := Sequence<Object>.new
			c.eachAllOwnedElement{ aNamedElement | allownedElements.add(aNamedElement) }
			stdio.writeln("allownedElements.size = "+ allownedElements.size.toString)
			assert(allownedElements.size == 3)
			
		end
	}
}