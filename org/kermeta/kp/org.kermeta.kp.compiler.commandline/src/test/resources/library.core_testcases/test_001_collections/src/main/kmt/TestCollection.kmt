package testPackage;

using kermeta_standard^kermeta::standard::*
using kermeta_standard^kermeta::io::StdIO => stdio
using library_utils^kermeta::kunit::*
using kermeta_standard^kermeta::exceptions::*


class TestCollection inherits TestCase {
	
	attribute c:Collection[String]
	
	reference c_ref_bag:bag String[*]
	reference c_ref_set:set String[*]
	reference c_ref_seq:seq String[*]
	reference c_ref_oset:oset String[*]

	attribute c_att_bag:bag String[*]
	attribute c_att_set:set String[*]
	attribute c_att_seq:seq String[*]
	attribute c_att_oset:oset String[*]
	
	operation mainTest() : Void is do
		var testRunner : TestRunner init TestRunner.new
       	testRunner.run(self.getMetaClass)
       	testRunner.printTestResult
       	if(testRunner.log.failures.isNotEmpty or testRunner.log.errors.isNotEmpty or testRunner.log.harnessErrors.isNotEmpty) then
       		raise Exception.new.initialize("Errors during test execution. See test results for more information.")
       	end
	end
	
	operation setUp():Void is do
		c := CollectionStub[String].new
	end
	
	operation testAdd():Void is do
		c.add("tutu")
		assertTrue(c.size==1)
		c.add("tutu")
		assertTrue(c.size==2)
	end
	
	operation testAddSafe():Void is do
		c.addSafe(3)
		assertTrue(c.size==0)
		c.addSafe("tutu")
		assertTrue(c.size==1)
	end
	
	operation testRemove():Void is do
		c.add("tutu")
		c.add("titi")
		c.add("toto")
		assertTrue(c.size==3)
		c.remove("titi")
		assertTrue(c.size==2)
		c.add("titi")
		c.add("titi")
		c.add("toto")
		c.add("tutu")
		assertTrue(c.size==6)
		c.remove("titi")
		assertTrue(c.size==4)

		var c:Collection[Object]:=CollectionStub[Object].new
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		assertTrue(c.size==4)
		c.remove(AlwaysEqual.new)
		assertTrue(c.size==2)
		var n:NamedElement
		n:=NamedElement.new
		n.name:="t"
		c.add(n)
		n:=NamedElement.new
		n.name:="tu"
		c.add(n)
		c.add(NamedElement.new)
		assertTrue(c.size==5)
		c.remove(n)
		assertTrue(c.size==4)
		c.remove(NamedElement.new)
		assertTrue(c.size==1)
	end
	
	operation testClear() : Void is do
		c.add("titi")
		c.add("tutu")
		c.add("toto")
		assertTrue(c.size==3)
		c.clear
		assertTrue(c.size==0)
	end
	
	operation testAddAll():Void is do
		var c2:Collection[String] := CollectionStub[String].new
		c2.addAll(c)
		assertTrue(c2.size==0)
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		assertTrue(c.size==3)
		c2.addAll(c)
		assertTrue(c2.size==3)
	end
	
	operation testContains():Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		assertTrue(c.contains("toto"))
		assertTrue(!c.contains("tata"))
		c.add("tata")
		c.add("tete")
		assertTrue(c.contains("tata"))
		
		var c:Collection[Object]:=CollectionStub[Object].new
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		assertTrue(c.contains(AlwaysEqual.new))
		assertTrue(c.contains(NamedElement.new))
		var n:NamedElement
		n:=NamedElement.new
		n.name:="t"
		assertTrue(!c.contains(n))
		c.add(n)
		n:=NamedElement.new
		n.name:="tu"
		c.add(n)
		c.add(NamedElement.new)
		assertTrue(c.contains(n))
	end
	
	operation testIncludes():Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		assertTrue(c.includes("toto"))
		assertTrue(!c.includes("tata"))
		c.add("tata")
		c.add("tete")
		assertTrue(c.includes("tata"))
		
		var c:Collection[Object]:=CollectionStub[Object].new
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		assertTrue(c.includes(AlwaysEqual.new))
		assertTrue(c.includes(NamedElement.new))
		var n:NamedElement
		n:=NamedElement.new
		n.name:="t"
		assertTrue(!c.includes(n))
		c.add(n)
		n:=NamedElement.new
		n.name:="tu"
		c.add(n)
		c.add(NamedElement.new)
		n:=NamedElement.new
		n.name:="t"
		assertTrue(c.includes(n))
	end
	
	operation testContainsAll():Void is do
		var c2:Collection[String]:=CollectionStub[String].new
		assertTrue(c.containsAll(c2))
		c.add("titi")
		assertTrue(c.containsAll(c2))
		c2.add("titi")
		assertTrue(c.containsAll(c2))
		c2.add("tutu")
		assertTrue(!c.containsAll(c2))
		c.add("tete")
		c.add("tutu")
		c.add("toto")
		assertTrue(c.containsAll(c2))
		c2.add("titi")
		c2.add("tutu")
		c2.add("titi")
		assertTrue(c.containsAll(c2))
		
		var c:Collection[Object]:=CollectionStub[Object].new
		var c0:Collection[Object]:=CollectionStub[Object].new
		c0.add(AlwaysEqual.new)
		assertTrue(!c.containsAll(c0))
		c.add(AlwaysEqual.new)
		assertTrue(c.containsAll(c0))
		c.add(NamedElement.new)
		assertTrue(c.containsAll(c0))
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c0.add(n)
		assertTrue(!c.containsAll(c0))
		c.add(n)
		assertTrue(c.containsAll(c0))
	end
	
	operation testIncludesAll():Void is do
		var c2:Collection[String]:=CollectionStub[String].new
		assertTrue(c.includesAll(c2))
		c.add("titi")
		assertTrue(c.includesAll(c2))
		c2.add("titi")
		assertTrue(c.includesAll(c2))
		c2.add("tutu")
		assertTrue(!c.includesAll(c2))
		c.add("tete")
		c.add("tutu")
		c.add("toto")
		assertTrue(c.includesAll(c2))
		c2.add("titi")
		c2.add("tutu")
		c2.add("titi")
		assertTrue(c.includesAll(c2))
		
		var c:Collection[Object]:=CollectionStub[Object].new
		var c0:Collection[Object]:=CollectionStub[Object].new
		c0.add(AlwaysEqual.new)
		assertTrue(!c.includesAll(c0))
		c.add(AlwaysEqual.new)
		assertTrue(c.includesAll(c0))
		c.add(NamedElement.new)
		assertTrue(c.includesAll(c0))
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c0.add(n)
		assertTrue(!c.includesAll(c0))
		c.add(n)
		assertTrue(c.includesAll(c0))
	end
	
	operation testExcludes():Void is do
		assertTrue(c.excludes("toto"))
		c.add("toto")
		assertTrue(!c.excludes("toto"))
		
		var c:Collection[Object]:=CollectionStub[Object].new
		assertTrue(c.excludes(AlwaysEqual.new))
		c.add(AlwaysEqual.new)
		assertTrue(!c.excludes(AlwaysEqual.new))
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		n:=NamedElement.new
		n.name:="titi"
		c.add(n)
		assertTrue(c.excludes(NamedElement.new))
		n:=NamedElement.new
		n.name:="toto"
		assertTrue(!c.excludes(n))
	end
	
	operation testExcludesAll():Void is do
		var c2:Collection[String]:=CollectionStub[String].new
		assertTrue(c.excludesAll(c2))
		c2.add("tutu")
		c2.add("toto")
		assertTrue(c.excludesAll(c2))
		c.add("tutu")
		assertTrue(!c.excludesAll(c2))
		
		var c:Collection[Object]:=CollectionStub[Object].new
		var c0:Collection[Object]:=CollectionStub[Object].new
		c0.add(AlwaysEqual.new)
		assertTrue(c.excludesAll(c0))
		c.add(NamedElement.new)
		assertTrue(c.excludesAll(c0))
		c.add(AlwaysEqual.new)
		assertTrue(!c.excludesAll(c0))
		c.clear
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		assertTrue(c.excludesAll(c0))
		n:=NamedElement.new
		n.name:="tutu"
		c0.add(n)
		assertTrue(c.excludesAll(c0))
		n:=NamedElement.new
		n.name:="toto"
		c0.add(n)
		assertTrue(!c.excludesAll(c0))
	end
	
	operation testSize():Void is do
		assertTrue(c.size==0)
		c.add("toto")
		c.add("tutu")
		assertTrue(c.size==2)
	end
	
	operation testEmpty():Void is do
		assertTrue(c.empty)
		c.add("toto")
		assertTrue(!c.empty)
		c.clear
		assertTrue(c.empty)
	end
	
	operation testIsEmpty():Void is do
		assertTrue(c.isEmpty)
		c.add("toto")
		assertTrue(!c.isEmpty)
		c.clear
		assertTrue(c.isEmpty)
	end
	
	operation testIsNotEmpty():Void is do
		assertTrue(!c.isNotEmpty)
		c.add("toto")
		assertTrue(c.isNotEmpty)
		c.clear
		assertTrue(!c.isNotEmpty)
	end
	
	operation testIterator():Void is do
		var i:Iterator[String]:=c.iterator
		assertTrue(i.isOff)
		assertTrue(!i.hasNext)
		/* do
			i.next
			test :=false
		rescue (e:kermeta::exceptions::IteratorIsOff)
		rescue (e:kermeta::exceptions::Exception)
			test:=false
		end */
		
		c.add("toto")
		c.add("tata")
		c.add("tutu")
		var c2 : Collection[String]:=CollectionStub[String].new
		from i:=c.iterator
		until i.isOff
		loop
			c2.add(i.next)
		end
		assertTrue(c2.size==3)
		assertTrue(c.containsAll(c2) and c2.containsAll(c))
	end
	
	operation testOne():Void is do
		assertTrue(c.one==void)
		c.add("tutu")
		assertTrue(c.one=="tutu")
	end

	operation testAny():Void is do
		do
			c.any
			assertTrue(false)
		rescue(e:EmptyCollection)
		rescue(e:Exception)
			assertTrue(false)
		end
		
		c.add("tutu")
		assertTrue(c.any=="tutu")
	end
	
	operation testEach():Void is do
		var c2:Collection[String]:=CollectionStub[String].new
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		c.each{e|c2.add(e)}
		assertTrue(c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size)
		
		var i:Integer init 0
		do 
			c.each{e|c.clear i:=i+1 assertTrue(c.size==0)}
		rescue(e:Exception)
			assertTrue(false)
		end
		assertTrue(i==3)
	end
	
	operation testIndexedEach():Void is do
		var c2:Collection[String]:=CollectionStub[String].new
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		c.indexedEach{e,ctxt|c2.add(e)}
		assertTrue(c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size)
		
		var i:Integer init 0
		do 
			c.indexedEach{e,ctxt|
				c.clear
				assertTrue(ctxt.index==i)
				assertTrue(ctxt.isFirst or i!=0)
				assertTrue(ctxt.isLast or i!=c.size-1)
				i:=i+1 
				assertTrue(c.size==0)
			}
		rescue(e:Exception)
			assertTrue(false)
		end
		assertTrue(i==3)
		
	end
	
	operation testForAll():Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		assertTrue(c.forAll{e|e.charAt(0).toString=="t"})
		c.add("baba")
		assertTrue(!c.forAll{e|e.charAt(0).toString=="t"})
		assertTrue(c.forAll{e|e.size==4})
		
		var c2:Collection[String]:=CollectionStub[String].new
		c.forAll{e|c2.add(e) true}
		assertTrue(c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size)
	end
     
	operation testForAllCpl():Void is do
		var c2:Collection[String]:=CollectionStub[String].new
		var i:Integer := 0
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		c.forAllCpl{x,y|i:=i+1 if(x==y) then c2.add(x) end true}
		assertTrue(i==9)
		assertTrue(c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size)
		
		var c:Collection[NamedElement]:=CollectionStub[NamedElement].new
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		n:=NamedElement.new
		n.name:="tutu"
		c.add(n)
		n:=NamedElement.new
		n.name:="titi"
		c.add(n)
		assertTrue(c.forAllCpl{x,y|(x.name!=y.name) or (x.oid==y.oid)})
	end 

	operation testExists():Void is do
    	c.add("toto")
    	c.add("tutu")
    	c.add("titi")
    	assertTrue(c.exists{e|e=="toto"})
    	assertTrue(!c.exists{e|e.charAt(0).toString=="b"})
    	c.add("baba")
    	assertTrue(c.exists{e|e.charAt(0).toString=="b"})

		var c2:Collection[String]:=CollectionStub[String].new
		c.exists{e|c2.add(e) false}
		assertTrue(c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size)
	end
	
	operation testExistsCpl():Void is do
		var c2:Collection[String]:=CollectionStub[String].new
		var i:Integer := 0
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		assertTrue(!c.existsCpl{x,y|i:=i+1 if(x==y) then c2.add(x) end false})
		assertTrue(i==9)
		assertTrue(c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size)
		
		var c:Collection[NamedElement]:=CollectionStub[NamedElement].new
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		n:=NamedElement.new
		n.name:="tutu"
		c.add(n)
		n:=NamedElement.new
		n.name:="titi"
		c.add(n)
		assertTrue(!c.existsCpl{x,y|x.name==y.name and x.oid!=y.oid})
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		assertTrue(c.existsCpl{x,y|x.name==y.name and x.oid!=y.oid})
	end 

	operation testCollect():Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var c2:Collection[Integer]:=c.collect{e|e.size}
		assertTrue(c2.size==3)
		assertTrue(c2.forAll{i|i==4})
		c.add("b")
		c2:=c.collect{e|e.size}
		assertTrue(c2.count(4)==3 and c2.count(1)==1)
	end
	
	operation testIsUnique():Void is do
		c.add("toto")
		c.add("tut")
		c.add("ti")
		assertTrue(c.isUnique{e|e.size})
		c.add("ba")
		assertTrue(!c.isUnique{e|e.size})
		var i:Integer := 0
		assertTrue(c.isUnique{e|i:=i+1 e})
		assertTrue(i==4)
	end
	
	operation testDetect():Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		assertTrue(c.detect{e|e.size==3}==void)
		c.add("tat")
		assertTrue(c.detect{e|e.size==3}=="tat")
	end
		
	operation testSelect():Void is do
		c.add("toto")
		c.add("ba")
		c.add("tut")
		c.add("ti")
		var c2:Collection[String]:=c.select{e|e.size==2}
		assertTrue(c2.size==2 and c2.contains("ba") and c2.contains("ti"))
		c2 := c.select{e|e=="titi"}
		assertTrue(c2.size==0)
	end
	
 	operation testSelectOne():Void  is do
 		c.add("toto")
		c.add("ba")
		c.add("tut")
		c.add("ti")
		var c2:Collection[String]:=c.selectOne{e|e.size==2}
 		assertTrue(c2.size==1 and (c2.contains("ba") or c2.contains("ti")))
		assertTrue(c.selectOne{e|e=="titi"}.size==0)
 	end
	
	operation testReject():Void  is do
 		c.add("toto")
		c.add("ba")
		c.add("tut")
		c.add("ti")
		var c2:Collection[String]:=c.reject{e|e.size==2}
 		assertTrue(c2.size==2 and c2.contains("toto") and c2.contains("tut"))
	end
	
	operation testCount():Void is do
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		assertTrue(c.count("tata")==0 and c.count("toto")==1)
		c.add("tata")
		c.add("toto")
		assertTrue(c.count("tata")==1 and c.count("toto")==2)
		
		var c:Collection[Object]:=CollectionStub[Object].new
		c.add(AlwaysEqual.new)
		assertTrue(c.count(AlwaysEqual.new)==1)
	end
	
	operation testSum():Void is do
		var c : Collection[Object] := CollectionStub[Object].new
		c.add(3)
		c.add(2)
		assert(c.sum == 5)
		c.add("toto")
		assert(c.sum==void)
		c.clear
		assert(c.sum==void)
	end
		
	operation testAsBag():Void is do
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		assertTrue(c.size==6 and c.count("toto")==2)
		
		var c2:Collection[String]
		c2 := c.asBag
		assertTrue(c2.isInstanceOf(Bag[String]))
		assertTrue(c2.size==6 and c2.count("toto")==2 and c2.containsAll(c))
		c2.add("bubu")
		assertTrue(!c.contains("bubu"))
	end
	
	operation testAsSet():Void is do
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		assertTrue(c.size==6 and c.count("toto")==2)
		
		var c2:Collection[String]
		c2 := c.asSet
		assertTrue(c2.isInstanceOf(Set[String]))
		assertTrue(c2.size==5 and c2.count("toto")==1 and c2.containsAll(c))
		c2.add("bubu")
		assertTrue(!c.contains("bubu"))
	end
	
	operation testAsSequenceType():Void is do 
		var c:Collection[Object]:=CollectionStub[Object].new
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add(2)
		c.add(AlwaysEqual.new)
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		assertTrue(c.size==8)
		
		/*var c2:Collection[String]:=c.asSequenceType[String]
		test := test and c2.isInstanceOf(Sequence[String])
		test := test and c2.size==6 and c2.count("toto")==2 and c2.containsAll(c.select{e|e.isInstanceOf(String)}.asType(Sequence[String]))
		assertTrue(test)		
		*/

	end

	operation testAsOrderedSet():Void is do
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		assertTrue(c.size==6 and c.count("toto")==2)
		
		var c2:Collection[String]
		c2 := c.asOrderedSet
		assertTrue(c2.isInstanceOf(OrderedSet[String]))
		assertTrue(c2.size==5 and c2.count("toto")==1 and c2.containsAll(c))
		c2.add("bubu")
		assertTrue(!c.contains("bubu"))
	end

	operation testAsSequence():Void is do
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		assertTrue(c.size==6 and c.count("toto")==2)
		
		var c2:Collection[String]
		c2 := c.asSequence
		assertTrue(c2.isInstanceOf(Sequence[String]))
		assertTrue(c2.size==6 and c2.count("toto")==2 and c2.containsAll(c))
		c2.add("bubu")
		assertTrue(!c.contains("bubu"))
	end
	
	operation testRef():Void is do
		assertTrue(c_ref_bag.isInstanceOf(Bag[String]))
		assertTrue(c_ref_set.isInstanceOf(Set[String]))
		assertTrue(c_ref_seq.isInstanceOf(Sequence[String]))
		assertTrue(c_ref_oset.isInstanceOf(OrderedSet[String]))
		
		assertTrue(c_ref_set.size==0)
		c_ref_set.add("toto")
		assertTrue(c_ref_set.size==1)
		assertTrue(c_ref_bag.size==0)
		c_ref_bag.add("toto")
		assertTrue(c_ref_bag.size==1)
		assertTrue(c_ref_oset.size==0)
		c_ref_oset.add("toto")
		assertTrue(c_ref_oset.size==1)
		assertTrue(c_ref_seq.size==0)
		c_ref_seq.add("toto")
		assertTrue(c_ref_seq.size==1)
	end

	operation testAtt():Void is do
		assertTrue(c_att_bag.isInstanceOf(Bag[String]))
		assertTrue(c_att_set.isInstanceOf(Set[String]))
		assertTrue(c_att_seq.isInstanceOf(Sequence[String]))
		assertTrue(c_att_oset.isInstanceOf(OrderedSet[String]))
		
		assertTrue(c_att_set.size==0)
		c_att_set.add("toto")
		assertTrue(c_att_set.size==1)
		assertTrue(c_att_bag.size==0)
		c_att_bag.add("toto")
		assertTrue(c_att_bag.size==1)
		assertTrue(c_att_oset.size==0)
		c_att_oset.add("toto")
		assertTrue(c_att_oset.size==1)
		assertTrue(c_att_seq.size==0)
		c_att_seq.add("toto")
		assertTrue(c_att_seq.size==1)
	end
}