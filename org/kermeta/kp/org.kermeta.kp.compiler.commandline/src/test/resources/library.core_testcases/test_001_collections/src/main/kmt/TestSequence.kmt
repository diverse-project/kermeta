package testPackage;

using kermeta::standard
using kermeta::io::StdIO => stdio
using kermeta::kunit

class TestSequence inherits TestCase {
	
	attribute c:Sequence[String]

	operation mainTest() : Void is do
		var testRunner : TestRunner init TestRunner.new
       	testRunner.run(self.getMetaClass)
       	testRunner.printTestResult
	end
	
	operation setUp():Void is do
		c := Sequence[String].new
	end

	operation testEquals() : Void is do
		c.add("toto")
		c.add("titi")
		c.add("tutu")
		var c2:Collection[String]:=Set[String].new
		c2.add("toto")
		c2.add("titi")
		c2.add("tutu")
		assertTrue(!c.equals(c2))
		
		c2:=Bag[String].new
		c2.add("toto")
		c2.add("titi")
		c2.add("tutu")
		assertTrue(!c.equals(c2))

		c2:=Sequence[String].new
		c2.add("tutu")
		c2.add("titi")
		c2.add("toto")
		assertTrue(!c.equals(c2))

		c2:=Sequence[String].new
		c2.add("toto")
		c2.add("titi")
		c2.add("tutu")
		assertTrue(c.equals(c2))
		
		c2:=OrderedSet[String].new
		c2.add("tutu")
		c2.add("titi")
		c2.add("toto")
		assertTrue(!c.equals(c2))

		c2:=OrderedSet[String].new
		c2.add("toto")
		c2.add("titi")
		c2.add("tutu")
		assertTrue(c.equals(c2))

		var c:Sequence[Object]:=Sequence[Object].new
		var c0:OrderedSet[Object]:=OrderedSet[Object].new
		c.add(AlwaysEqual.new)
		c0.add(AlwaysEqual.new)
		assertTrue(c.equals(c2))
	end
	
	operation testSubSequence() : Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		c.add("tata")
		c.add("nana")
		c.add("tete")
		var c2:Sequence[String]:=c.subSequence(2,5)
		assertTrue(c2.size==3)
		assertTrue(c2.at(0)=="titi")
		assertTrue(c2.at(1)=="tata")
		assertTrue(c2.at(2)=="nana")
		c2.add("baba")
		assertTrue(c2.size==4)
		assertTrue(c.size==6)
		
		do
			c.subSequence(-1,2)
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
		do
			c.subSequence(4,8)
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
		do
			c.subSequence(4,3)
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
	end
	
	operation testInsertAt() : Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var c2:Sequence[String]:=c.insertAt(2,"tata")
		assertTrue(c2.size==4)
		assertTrue(c2.subSequence(0,2).equals(c.subSequence(0,2)))
		assertTrue(c2.at(2)=="tata")
		assertTrue(c2.at(3)==c.at(2))
		
		c2.add("baba")
		assertTrue(c2.size==5)
		assertTrue(c.size==3)

		c2:=c.insertAt(2,"toto")
		assertTrue(c2.size==4)
		
		do
			c.insertAt(-1,"baba")
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
		do
			c.insertAt(4,"baba")
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
	end
	
	operation testAppend() : Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var c2:Sequence[String]:=c.append("tata")
		assertTrue(c2.size==4)
		assertTrue(c2.subSequence(0,3).equals(c))
		assertTrue(c2.at(3)=="tata")
		
		c2.add("baba")
		assertTrue(c2.size==5)
		assertTrue(c.size==3)
		
		c2:=c.append("toto")
		assertTrue(c2.size==4)
		c2.add("baba")
		assertTrue(c2.size==5)
		assertTrue(c.size==3)
	end
	
	operation testPrepend() : Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var c2:Sequence[String]:=c.prepend("tata")
		assertTrue(c2.size==4)
		assertTrue(c2.subSequence(1,4).equals(c))
		assertTrue(c2.at(0)=="tata")
		
		c2.add("baba")
		assertTrue(c2.size==5)
		assertTrue(c.size==3)
		
		c2:=c.prepend("toto")
		assertTrue(c2.size==4)
		c2.add("baba")
		assertTrue(c2.size==5)
		assertTrue(c.size==3)
	end
}