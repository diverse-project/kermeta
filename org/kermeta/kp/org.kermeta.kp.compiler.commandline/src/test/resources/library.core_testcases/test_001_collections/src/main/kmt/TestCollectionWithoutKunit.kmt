package testPackage;

using kermeta::standard
using kermeta::io::StdIO => stdio
using kermeta::exceptions

class TestCollectionWithoutKunit {
	
	attribute c:Collection[String]
	
	reference c_ref_bag:bag String[*]
	reference c_ref_set:set String[*]
	reference c_ref_seq:seq String[*]
	reference c_ref_oset:oset String[*]

	attribute c_att_bag:bag String[*]
	attribute c_att_set:set String[*]
	attribute c_att_seq:seq String[*]
	attribute c_att_oset:oset String[*]
	
	operation mainTest() : Void is do
		stdio.writeln("******************* Test Collection ***************************")
		setUp
		stdio.writeln("testAdd "+testAdd.toString)
		setUp
		stdio.writeln("testAddSafe "+testAddSafe.toString)
		setUp
		stdio.writeln("testRemove "+testRemove.toString)
		setUp
		stdio.writeln("testClear "+testClear.toString)
		setUp
		stdio.writeln("testAddAll "+testAddAll.toString)
		setUp
		stdio.writeln("testContains "+testContains.toString)
		setUp
		stdio.writeln("testIncludes "+testIncludes.toString)
		setUp
		stdio.writeln("testContainsAll "+testContainsAll.toString)
		setUp
		stdio.writeln("testIncludesAll "+testIncludesAll.toString)
		setUp
		stdio.writeln("testExcludes "+testExcludes.toString)
		setUp
		stdio.writeln("testExcludesAll "+testExcludesAll.toString)
		setUp
		stdio.writeln("testSize "+testSize.toString)
		setUp
		stdio.writeln("testEmpty "+testEmpty.toString)
		setUp
		stdio.writeln("testIsEmpty "+testIsEmpty.toString)
		setUp
		stdio.writeln("testIsNotEmpty "+testIsNotEmpty.toString)
		setUp
		stdio.writeln("testIterator "+testIterator.toString)
		setUp
		stdio.writeln("testOne "+testOne.toString)
		setUp
		stdio.writeln("testAny "+testAny.toString)
		setUp
		stdio.writeln("testEach "+testEach.toString)
		setUp
		stdio.writeln("testIndexedEach "+testIndexedEach.toString)
		setUp
		stdio.writeln("testForAll "+testForAll.toString)
		setUp
		stdio.writeln("testForAllCpl "+testForAllCpl.toString)
		setUp
		stdio.writeln("testExists "+testExists.toString)
		setUp
		stdio.writeln("testExistsCpl "+testExistsCpl.toString)
		setUp
		stdio.writeln("testCollect "+testCollect.toString)
		setUp
		stdio.writeln("testIsUnique "+testIsUnique.toString)
		setUp
		stdio.writeln("testDetect "+testDetect.toString)
		setUp
		stdio.writeln("testSelect "+testSelect.toString)
		setUp
		stdio.writeln("testSelectOne "+testSelectOne.toString)
		setUp
		stdio.writeln("testReject "+testReject.toString)
		setUp
		stdio.writeln("testCount "+testCount.toString)
		setUp
		stdio.writeln("testSum "+testSum.toString)
		setUp
		stdio.writeln("testAsBag "+testAsBag.toString)
		setUp
		stdio.writeln("testAsSet "+testAsSet.toString)
		setUp
		stdio.writeln("testAsSequenceType "+testAsSequenceType.toString)
		setUp
		stdio.writeln("testAsSequence "+testAsSequence.toString)
		setUp
		stdio.writeln("testAsOrderedSet "+testAsOrderedSet.toString)
		setUp
		stdio.writeln("testRef "+testRef.toString)
		setUp
		stdio.writeln("testAtt "+testAtt.toString)
	end
	
	operation setUp():Void is do
		c := CollectionStub[String].new
	end
	
	operation testAdd():Boolean is do
		var test:Boolean := true
		c.add("tutu")
		test := test and c.size==1
		c.add("tutu")
		test := test and c.size==2
		result := test
	end
	
	operation testAddSafe():Boolean is do
		var test:Boolean := true
		c.addSafe(3)
		test := test and c.size==0
		c.addSafe("tutu")
		test := test and c.size==1
		result := test
	end
	
	operation testRemove():Boolean is do
		var test:Boolean := true
		c.add("tutu")
		c.add("titi")
		c.add("toto")
		test := test and c.size==3
		c.remove("titi")
		test := test and c.size==2
		c.add("titi")
		c.add("titi")
		c.add("toto")
		c.add("tutu")
		test:= test and c.size==6
		c.remove("titi")
		test := test and c.size==4

		var c:Collection[Object]:=CollectionStub[Object].new
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		test := test and c.size==4
		c.remove(AlwaysEqual.new)
		test := test and c.size==2
		var n:NamedElement
		n:=NamedElement.new
		n.name:="t"
		c.add(n)
		n:=NamedElement.new
		n.name:="tu"
		c.add(n)
		c.add(NamedElement.new)
		test := test and c.size==5
		c.remove(n)
		test := test and c.size==4
		c.remove(NamedElement.new)
		test := test and c.size==1

		result := test
	end
	
	operation testClear() : Boolean is do
		var test:Boolean := true
		c.add("titi")
		c.add("tutu")
		c.add("toto")
		test := test and c.size==3
		c.clear
		test := test and c.size==0
		result := test
	end
	
	operation testAddAll():Boolean is do
		var test : Boolean := true
		var c2:Collection[String] := CollectionStub[String].new
		c2.addAll(c)
		test := test and c2.size==0
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		test := test and c.size==3
		c2.addAll(c)
		test := test and c2.size==3
		result := test
	end
	
	operation testContains():Boolean is do
		var test : Boolean := true
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		test := test and c.contains("toto")
		test := test and !c.contains("tata")
		c.add("tata")
		c.add("tete")
		test:=test and c.contains("tata")
		
		var c:Collection[Object]:=CollectionStub[Object].new
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		test := test and c.contains(AlwaysEqual.new)
		test := test and c.contains(NamedElement.new)
		var n:NamedElement
		n:=NamedElement.new
		n.name:="t"
		test := test and !c.contains(n)
		c.add(n)
		n:=NamedElement.new
		n.name:="tu"
		c.add(n)
		c.add(NamedElement.new)
		test := test and c.contains(n)
		
		result := test
	end
	
	operation testIncludes():Boolean is do
		var test : Boolean := true
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		test := test and c.includes("toto")
		test := test and !c.includes("tata")
		c.add("tata")
		c.add("tete")
		test:=test and c.includes("tata")
		
		var c:Collection[Object]:=CollectionStub[Object].new
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		test := test and c.includes(AlwaysEqual.new)
		test := test and c.includes(NamedElement.new)
		var n:NamedElement
		n:=NamedElement.new
		n.name:="t"
		test := test and !c.includes(n)
		c.add(n)
		n:=NamedElement.new
		n.name:="tu"
		c.add(n)
		c.add(NamedElement.new)
		n:=NamedElement.new
		n.name:="t"
		test := test and c.includes(n)
		
		result := test		
	end
	
	operation testContainsAll():Boolean is do
		var test:Boolean:=true
		var c2:Collection[String]:=CollectionStub[String].new
		test := test and c.containsAll(c2)
		c.add("titi")
		test := test and c.containsAll(c2)
		c2.add("titi")
		test := test and c.containsAll(c2)
		c2.add("tutu")
		test := test and !c.containsAll(c2)
		c.add("tete")
		c.add("tutu")
		c.add("toto")
		test := test and c.containsAll(c2)
		c2.add("titi")
		c2.add("tutu")
		c2.add("titi")
		test := test and c.containsAll(c2)
		
		var c:Collection[Object]:=CollectionStub[Object].new
		var c0:Collection[Object]:=CollectionStub[Object].new
		c0.add(AlwaysEqual.new)
		test := test and !c.containsAll(c0)
		c.add(AlwaysEqual.new)
		test := test and c.containsAll(c0)
		c.add(NamedElement.new)
		test := test and c.containsAll(c0)
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c0.add(n)
		test := test and !c.containsAll(c0)
		c.add(n)
		test := test and c.containsAll(c0)
		
		result := test
	end
	
	operation testIncludesAll():Boolean is do
		var test:Boolean:=true
		var c2:Collection[String]:=CollectionStub[String].new
		test := test and c.includesAll(c2)
		c.add("titi")
		test := test and c.includesAll(c2)
		c2.add("titi")
		test := test and c.includesAll(c2)
		c2.add("tutu")
		test := test and !c.includesAll(c2)
		c.add("tete")
		c.add("tutu")
		c.add("toto")
		test := test and c.includesAll(c2)
		c2.add("titi")
		c2.add("tutu")
		c2.add("titi")
		test := test and c.includesAll(c2)
		
		var c:Collection[Object]:=CollectionStub[Object].new
		var c0:Collection[Object]:=CollectionStub[Object].new
		c0.add(AlwaysEqual.new)
		test := test and !c.includesAll(c0)
		c.add(AlwaysEqual.new)
		test := test and c.includesAll(c0)
		c.add(NamedElement.new)
		test := test and c.includesAll(c0)
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c0.add(n)
		test := test and !c.includesAll(c0)
		c.add(n)
		test := test and c.includesAll(c0)
		
		result := test
	end
	
	operation testExcludes():Boolean is do
		var test:Boolean := true
		test := test and c.excludes("toto")
		c.add("toto")
		test := test and !c.excludes("toto")
		
		var c:Collection[Object]:=CollectionStub[Object].new
		test := test and c.excludes(AlwaysEqual.new)
		c.add(AlwaysEqual.new)
		test := test and !c.excludes(AlwaysEqual.new)
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		n:=NamedElement.new
		n.name:="titi"
		c.add(n)
		test := test and c.excludes(NamedElement.new)
		n:=NamedElement.new
		n.name:="toto"
		test := test and !c.excludes(n)
		
		result := test
	end
	
	operation testExcludesAll():Boolean is do
		var test:Boolean := true
		var c2:Collection[String]:=CollectionStub[String].new
		test := test and c.excludesAll(c2)
		c2.add("tutu")
		c2.add("toto")
		test := test and c.excludesAll(c2)
		c.add("tutu")
		test := test and !c.excludesAll(c2)
		
		var c:Collection[Object]:=CollectionStub[Object].new
		var c0:Collection[Object]:=CollectionStub[Object].new
		c0.add(AlwaysEqual.new)
		test := test and c.excludesAll(c0)
		c.add(NamedElement.new)
		test := test and c.excludesAll(c0)
		c.add(AlwaysEqual.new)
		test := test and !c.excludesAll(c0)
		c.clear
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		test := test and c.excludesAll(c0)
		n:=NamedElement.new
		n.name:="tutu"
		c0.add(n)
		test := test and c.excludesAll(c0)
		n:=NamedElement.new
		n.name:="toto"
		c0.add(n)
		test := test and !c.excludesAll(c0)
		
		result := test
	end
	
	operation testSize():Boolean is do
		var test:Boolean :=true
		test:=test and c.size==0
		c.add("toto")
		c.add("tutu")
		test := test and c.size==2
		
		result := test
	end
	
	operation testEmpty():Boolean is do
		var test:Boolean := true
		test := test and c.empty
		c.add("toto")
		test := test and !c.empty
		c.clear
		test := test and c.empty
		
		result := test
	end
	
	operation testIsEmpty():Boolean is do
		var test:Boolean:=true
		test:=test and c.isEmpty
		c.add("toto")
		test := test and !c.isEmpty
		c.clear
		test := test and c.isEmpty
		
		result := test
	end
	
	operation testIsNotEmpty():Boolean is do
		var test:Boolean:=true
		test:=test and !c.isNotEmpty
		c.add("toto")
		test := test and c.isNotEmpty
		c.clear
		test := test and !c.isNotEmpty
		
		result := test
	end
	
	operation testIterator():Boolean is do
		var test:Boolean := true
		var i:Iterator[String]:=c.iterator
		test := test and i.isOff
		test := test and !i.hasNext
		/* do
			i.next
			test :=false
		rescue (e:kermeta::exceptions::IteratorIsOff)
		rescue (e:kermeta::exceptions::Exception)
			test:=false
		end */
		
		c.add("toto")
		c.add("tata")
		c.add("tutu")
		var c2 : Collection[String]:=CollectionStub[String].new
		from i:=c.iterator
		until i.isOff
		loop
			c2.add(i.next)
		end
		test := test and c2.size==3
		test := test and c.containsAll(c2) and c2.containsAll(c)
		
		result:=test
	end
	
	operation testOne():Boolean is do
		var test:Boolean := true
		test := test and c.one==void
		c.add("tutu")
		test := test and c.one=="tutu"
		
		result := test	
	end

	operation testAny():Boolean is do
		var test:Boolean := true
		do
			c.any
			test:=false
		rescue(e:EmptyCollection)
		rescue(e:Exception)
			test:=false
		end
		
		c.add("tutu")
		test := test and c.any=="tutu"
		
		result := test
	end
	
	operation testEach():Boolean is do
		var test:Boolean := true
		
		var c2:Collection[String]:=CollectionStub[String].new
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		c.each{e|c2.add(e)}
		test := test and c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size
		
		var i:Integer init 0
		do 
			c.each{e|c.clear i:=i+1 test:=test and c.size==0}
		rescue(e:Exception)
			test:=false
		end
		test := test and i==3
		
		result := test
	end
	
	operation testIndexedEach():Boolean is do
		var test:Boolean := true
				
		var c2:Collection[String]:=CollectionStub[String].new
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		c.indexedEach{e,ctxt|c2.add(e)}
		test := test and c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size
		
		var i:Integer init 0
		do 
			c.indexedEach{e,ctxt|
				c.clear
				test := test and ctxt.index==i
				test := test and (ctxt.isFirst or i!=0)
				test := test and (ctxt.isLast or i!=c.size-1)
				i:=i+1 
				test:=test and c.size==0
			}
		rescue(e:Exception)
			test:=false
		end
		test := test and i==3
		
		result := test
		
	end
	
	operation testForAll():Boolean is do
		var test:Boolean := true
		
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		test := test and c.forAll{e|e.charAt(0).toString=="t"}
		c.add("baba")
		test := test and !c.forAll{e|e.charAt(0).toString=="t"}
		test := test and c.forAll{e|e.size==4}
		
		var c2:Collection[String]:=CollectionStub[String].new
		c.forAll{e|c2.add(e) true}
		test := test and c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size
		
		result := test
	end
     
	operation testForAllCpl():Boolean is do
		var test:Boolean := true
		var c2:Collection[String]:=CollectionStub[String].new
		var i:Integer := 0
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		test := test and c.forAllCpl{x,y|i:=i+1 if(x==y) then c2.add(x) end true}
		test := test and i==9
		test := test and c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size
		
		var c:Collection[NamedElement]:=CollectionStub[NamedElement].new
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		n:=NamedElement.new
		n.name:="tutu"
		c.add(n)
		n:=NamedElement.new
		n.name:="titi"
		c.add(n)
		test := test and c.forAllCpl{x,y|x.name!=y.name or x.oid==y.oid}
				
		result:=test
	end 

	operation testExists():Boolean is do
    	var test:Boolean := true
    	c.add("toto")
    	c.add("tutu")
    	c.add("titi")
    	test := test and c.exists{e|e=="toto"}
    	test := test and !c.exists{e|e.charAt(0).toString=="b"}
    	c.add("baba")
    	test := test and c.exists{e|e.charAt(0).toString=="b"}

		var c2:Collection[String]:=CollectionStub[String].new
		c.exists{e|c2.add(e) false}
		test := test and c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size
    	
    	result:=test
	end
	
	operation testExistsCpl():Boolean is do
		var test:Boolean := true
		var c2:Collection[String]:=CollectionStub[String].new
		var i:Integer := 0
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		test := test and !c.existsCpl{x,y|i:=i+1 if(x==y) then c2.add(x) end false}
		test := test and i==9
		test := test and c.containsAll(c2) and c2.containsAll(c) and c2.size==c.size
		
		var c:Collection[NamedElement]:=CollectionStub[NamedElement].new
		var n:NamedElement
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		n:=NamedElement.new
		n.name:="tutu"
		c.add(n)
		n:=NamedElement.new
		n.name:="titi"
		c.add(n)
		test := test and !c.existsCpl{x,y|x.name==y.name and x.oid!=y.oid}
		n:=NamedElement.new
		n.name:="toto"
		c.add(n)
		test := test and c.existsCpl{x,y|x.name==y.name and x.oid!=y.oid}

		result:=test
	end 

	operation testCollect():Boolean is do
		var test:Boolean := true
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var c2:Collection[Integer]:=c.collect{e|e.size}
		test := test and c2.size==3
		test := test and c2.forAll{i|i==4}
		c.add("b")
		c2:=c.collect{e|e.size}
		test:=test and c2.count(4)==3 and c2.count(1)==1
		
		result:=test
	end
	
	operation testIsUnique():Boolean is do
		var test:Boolean := true
		c.add("toto")
		c.add("tut")
		c.add("ti")
		test := test and c.isUnique{e|e.size}
		c.add("ba")
		test := test and !c.isUnique{e|e.size}
		var i:Integer := 0
		test := test and c.isUnique{e|i:=i+1 e}
		test := test and i==4
		
		result:=test
	end
	
	operation testDetect():Boolean is do
		var test:Boolean:=true
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		test := test and c.detect{e|e.size==3}==void
		c.add("tat")
		test := test and c.detect{e|e.size==3}=="tat"
		
		result := test
	end
		
	operation testSelect():Boolean is do
		var test:Boolean := true
		c.add("toto")
		c.add("ba")
		c.add("tut")
		c.add("ti")
		var c2:Collection[String]:=c.select{e|e.size==2}
		test := test and c2.size==2 and c2.contains("ba") and c2.contains("ti")
		c2 := c.select{e|e=="titi"}
		test := test and c2.size==0
		
		result := test
	end
	
 	operation testSelectOne():Boolean  is do
 		var test:Boolean := true
 		c.add("toto")
		c.add("ba")
		c.add("tut")
		c.add("ti")
		var c2:Collection[String]:=c.selectOne{e|e.size==2}
 		test := test and c2.size==1 and (c2.contains("ba") or c2.contains("ti"))
		test := test and c.selectOne{e|e=="titi"}.size==0
		
		result := test
 	end
	
	operation testReject():Boolean  is do
 		var test:Boolean := true
 		c.add("toto")
		c.add("ba")
		c.add("tut")
		c.add("ti")
		var c2:Collection[String]:=c.reject{e|e.size==2}
 		test := test and c2.size==2 and c2.contains("toto") and c2.contains("tut")
		
		result := test
	end
	
	operation testCount():Boolean is do
		var test:Boolean := true
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		test := test and c.count("tata")==0 and c.count("toto")==1
		c.add("tata")
		c.add("toto")
		test := test and c.count("tata")==1 and c.count("toto")==2
		
		result := test
	end
	
	operation testSum():Boolean is do
		var test:Boolean := true
		
		test := false // bug 2154
		
		result := test
	end
		
	operation testAsBag():Boolean is do
		var test :Boolean := true
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		test := test and c.size==6 and c.count("toto")==2
		
		var c2:Collection[String]
		c2 := c.asBag
		test := test and c2.isInstanceOf(Bag[String])
		test := test and c2.size==6 and c2.count("toto")==2 and c2.containsAll(c)
		c2.add("bubu")
		test := test and !c.contains("bubu")
		
		result := test
	end
	
	operation testAsSet():Boolean is do
		var test :Boolean := true
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		test := test and c.size==6 and c.count("toto")==2
		
		var c2:Collection[String]
		c2 := c.asSet
		test := test and c2.isInstanceOf(Set[String])
		test := test and c2.size==5 and c2.count("toto")==1 and c2.containsAll(c)
		c2.add("bubu")
		test := test and !c.contains("bubu")
		
		result := test
	end
	
	operation testAsSequenceType():Boolean is do 
		var test:Boolean := true
		var c:Collection[Object]:=CollectionStub[Object].new
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add(2)
		c.add(AlwaysEqual.new)
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		test := test and c.size==8
		
		/*var c2:Collection[String]:=c.asSequenceType[String]
		test := test and c2.isInstanceOf(Sequence[String])
		test := test and c2.size==6 and c2.count("toto")==2 and c2.containsAll(c.select{e|e.isInstanceOf(String)}.asType(Sequence[String]))
		*/
		test := false //bug 2110
		
		result := test
	end

	operation testAsOrderedSet():Boolean is do
		var test :Boolean := true
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		test := test and c.size==6 and c.count("toto")==2
		
		var c2:Collection[String]
		c2 := c.asOrderedSet
		test := test and c2.isInstanceOf(OrderedSet[String])
		test := test and c2.size==5 and c2.count("toto")==1 and c2.containsAll(c)
		c2.add("bubu")
		test := test and !c.contains("bubu")
		
		result := test
	end

	operation testAsSequence():Boolean is do
		var test :Boolean := true
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		test := test and c.size==6 and c.count("toto")==2
		
		var c2:Collection[String]
		c2 := c.asSequence
		test := test and c2.isInstanceOf(Sequence[String])
		test := test and c2.size==6 and c2.count("toto")==2 and c2.containsAll(c)
		c2.add("bubu")
		test := test and !c.contains("bubu")
		
		result := test
	end
	
	operation testRef():Boolean is do
		var test:Boolean := true
		test := test and c_ref_bag.isInstanceOf(Bag[String])
		test := test and c_ref_set.isInstanceOf(Set[String])
		test := test and c_ref_seq.isInstanceOf(Sequence[String])
		test := test and c_ref_oset.isInstanceOf(OrderedSet[String])
		
		test:=test and c_ref_set.size==0
		c_ref_set.add("toto")
		test := test and c_ref_set.size==1
		test:=test and c_ref_bag.size==0
		c_ref_bag.add("toto")
		test := test and c_ref_bag.size==1
		test:=test and c_ref_oset.size==0
		c_ref_oset.add("toto")
		test := test and c_ref_oset.size==1
		test:=test and c_ref_seq.size==0
		c_ref_seq.add("toto")
		test := test and c_ref_seq.size==1
		
		result := test
	end

	operation testAtt():Boolean is do
		var test:Boolean := true
		test := test and c_att_bag.isInstanceOf(Bag[String])
		test := test and c_att_set.isInstanceOf(Set[String])
		test := test and c_att_seq.isInstanceOf(Sequence[String])
		test := test and c_att_oset.isInstanceOf(OrderedSet[String])
		
		test:=test and c_att_set.size==0
		c_att_set.add("toto")
		test := test and c_att_set.size==1
		test:=test and c_att_bag.size==0
		c_att_bag.add("toto")
		test := test and c_att_bag.size==1
		test:=test and c_att_oset.size==0
		c_att_oset.add("toto")
		test := test and c_att_oset.size==1
		test:=test and c_att_seq.size==0
		c_att_seq.add("toto")
		test := test and c_att_seq.size==1

		result := test
	end
}