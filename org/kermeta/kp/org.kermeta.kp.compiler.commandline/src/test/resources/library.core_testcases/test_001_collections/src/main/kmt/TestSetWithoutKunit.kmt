package testPackage;

using kermeta::standard
using kermeta::io::StdIO => stdio

class TestSetWithoutKunit {
	
	attribute c:Set[String]

	operation mainTest() : Void is do
		stdio.writeln("******************* Test Set ***************************")
		setUp
		stdio.writeln("testAdd "+testAdd.toString)
		setUp
		stdio.writeln("testRemove "+testRemove.toString)
		setUp
		stdio.writeln("testEquals "+testEquals.toString)
		setUp
		stdio.writeln("testCount "+testCount.toString)
		setUp
		stdio.writeln("testUnion "+testUnion.toString)
		setUp
		stdio.writeln("testUnionWithBag "+testUnionWithBag.toString)
		setUp
		stdio.writeln("testIntersection "+testIntersection.toString)
		setUp
		stdio.writeln("testMinus "+testMinus.toString)
		setUp
		stdio.writeln("testAsSet "+testAsSet.toString)
		setUp
		stdio.writeln("testAsOrderedSet "+testAsOrderedSet.toString)
		setUp
		stdio.writeln("testSymmetricDifference "+testSymmetricDifference.toString)
		setUp
		stdio.writeln("testFlatten "+testFlatten.toString)
		setUp
		stdio.writeln("testSortedBy "+testSortedBy.toString)
	end

	operation setUp():Void is do
		c := Set[String].new
	end
	
	method testAdd() : Boolean is do
		var test : Boolean := true
		c.add("toto")
		test := test and c.size==1
		c.add("tutu")
		c.add("titi")
		test := test and c.size==3
		c.add("toto")
		test := test and c.size==3

		var c2:Collection[String]:=Bag[String].new
		c2.add("toto")
		test := test and c2.size==1
		c.addAll(c2)
		test := test and c.size==3
		c2.add("tata")
		c.addAll(c2)
		test := test and c.size==4
		
		var c:Set[Object]:=Set[Object].new
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		c.add(AlwaysEqual.new)
		c.add(NamedElement.new)
		test := test and c.size==2
		var n:NamedElement
		n:=NamedElement.new
		n.name:="t"
		c.add(n)
		n:=NamedElement.new
		n.name:="tu"
		c.add(n)
		c.add(NamedElement.new)
		test := test and c.size==4		
		
		result := test
	end

	method testRemove() : Boolean is do
		var test:Boolean := true
		c.add("tutu")
		c.add("titi")
		c.add("toto")
		test := test and c.contains("titi")
		c.remove("titi")
		test := test and !c.contains("titi")
		
		var c:Set[Object]:=Set[Object].new
		c.add(NamedElement.new)
		c.add(AlwaysEqual.new)
		test := test and c.size==2
		c.remove(AlwaysEqual.new)
		test := test and c.size==1 and !c.contains(AlwaysEqual.new)
		var n:NamedElement
		n:=NamedElement.new
		n.name:="t"
		c.add(n)
		n:=NamedElement.new
		n.name:="tu"
		c.add(n)
		c.add(NamedElement.new)
		test := test and c.size==3
		n:=NamedElement.new
		n.name:="t"
		c.remove(n)
		test := test and c.size==2
		c.remove(NamedElement.new)
		n:=NamedElement.new
		n.name:="tu"
		test := test and c.size==1 and c.contains(n)
		
		result := test
	end

	method testEquals() : Boolean is do
		var test:Boolean := true
		c.add("toto")
		c.add("titi")
		c.add("tutu")
		var c2:Collection[String]:=Bag[String].new
		c2.add("tutu")
		c2.add("titi")
		c2.add("toto")
		test := test and c.equals(c2)
		
		result:=test
	end
	
	operation testCount() : Boolean is do
		var test:Boolean := true
		c.add("toto")
		c.add("titi")
		c.add("toto")
		c.add("tutu")
		test := test and c.count("toto")==1
		test := test and c.count("tata")==0
		
		result:=test
	end
	
	operation testUnion() : Boolean is do
		var test:Boolean := true
		var c2:Set[String]:=Set[String].new
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var union :Collection[String] := c.union(c2)
		test := test and union.size==3 and c.containsAll(union) and union.containsAll(c)
		c2.add("toto")
		union := c.union(c2)
		test := test and union.size==3 and c.containsAll(union) and union.containsAll(c)
		c2.add("tata")
		union := c.union(c2)
		test := test and union.size==4 and !c.containsAll(union) and union.containsAll(c) and union.containsAll(c2)
		
		result := test
	end
	
	operation testUnionWithBag() : Boolean is do
		var test:Boolean := true
		var c2:Bag[String]:=Bag[String].new
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var union :Collection[String] := c.unionWithBag(c2)
		test := test and union.size==3 and c.containsAll(union) and union.containsAll(c)
		c2.add("toto")
		union := c.unionWithBag(c2)
		test := test and union.size==4 and c.containsAll(union) and union.containsAll(c)
		c2.add("tata")
		union := c.unionWithBag(c2)
		test := test and union.size==5 and !c.containsAll(union) and union.containsAll(c) and union.containsAll(c2)
		
		result := test
	end
	
	operation testIntersection() : Boolean is do
		var test:Boolean := true
		var c2:Collection[String] := Bag[String].new
		c.add("titi")
		c.add("toto")
		c.add("tutu")
		var intersection:Collection[String]:=c.intersection(c2)
		test := test and intersection.empty
		c2.add("toto")
		intersection:=c.intersection(c2)
		test := test and intersection.size==1 and intersection.contains("toto")
		c2.add("toto")
		test := test and c2.size==2
		intersection:=c.intersection(c2)
		test := test and intersection.size==1 and intersection.contains("toto")
		
		result := test
	end
	
	operation testMinus() : Boolean is do
		var test:Boolean := true
		var c2:Set[String]:=Set[String].new
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var diff :Collection[String] := c.minus(c2)
		test := test and diff.size==3 and c.containsAll(diff) and diff.containsAll(c)
		c2.add("toto")
		diff := c.minus(c2)
		test := test and diff.size==2 and c.containsAll(diff) and !diff.containsAll(c)
		c2.add("tata")
		diff := c.minus(c2)
		test := test and diff.size==2 and diff.contains("tutu") and diff.contains("titi")
		
		result := test
	end
	
	method testAsSet() : Boolean is do
		var test :Boolean := true
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		test := test and c.size==5
		
		var c2:Collection[String]
		c2 := c.asSet
		test := test and c2.isInstanceOf(Set[String])
		test := test and c2.size==5 and c2.containsAll(c)
		c2.add("bubu")
		test := test and !c.contains("bubu")
		
		result := test
	end
	
	method testAsOrderedSet() : Boolean is do
		var test :Boolean := true
		c.add("toto")
		c.add("ba")
		c.add("titi")
		c.add("tutu")
		c.add("tata")
		c.add("toto")
		test := test and c.size==5
		
		var c2:Collection[String]
		c2 := c.asOrderedSet
		test := test and c2.isInstanceOf(OrderedSet[String])
		test := test and c2.size==5 and c2.containsAll(c)
		c2.add("bubu")
		test := test and !c.contains("bubu")
		
		result := test
	end

	operation testSymmetricDifference() : Boolean is do
		var test:Boolean := true
		var c2:Set[String]:=Set[String].new
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var diff :Collection[String] := c.symmetricDifference(c2)
		test := test and diff.size==3 and c.containsAll(diff) and diff.containsAll(c)
		c2.add("toto")
		diff := c.symmetricDifference(c2)
		test := test and diff.size==2 and c.containsAll(diff) and !diff.containsAll(c)
		c2.add("tata")
		diff := c.symmetricDifference(c2)
		test := test and diff.size==3 and diff.contains("tutu") and diff.contains("titi") and diff.contains("tata")
		
		result := test
	end
	
	operation testFlatten() : Boolean is do
		var test:Boolean := true
		var c:Set[Object] := Set[Object].new
		var c2:Collection[String]
		c2:=Set[String].new
		c2.add("toto")
		c2.add("tutu") 
		c.add(c2)
		c.add("tata")
		c2:=Bag[String].new
		c2.add("toto")
		c2.add("titi")
		c.add(c2)
		c.add("tete")
		
		/*var flatten:Set[Object]:=c.flatten
		test := test and flatten.contains("toto") and flatten.contains("tutu")
		test := test and flatten.contains("titi")
		test := test and flatten.contains("tata") and flatten.contains("tete")
		*/
		test := false // bug Object -> Any
		
		result := test
	end
	
	operation testSortedBy() : Boolean  is do
		var test:Boolean := true
		c.add("toto")
		c.add("baba")
		c.add("didi")
		c.add("bibu")
		c.add("tutu")
		var sorted:OrderedSet[String] := c.sortedBy{x,y|y.charAt(0).toString.compareTo(x.charAt(0).toString)}
		test := test and sorted.size==5
		var i:Iterator[String]:=sorted.iterator
		var c2:Collection[String] := Bag[String].new
		c2.add(i.next)
		c2.add(i.next)
		test := test and c2.contains("baba") and c2.contains("bibu")
		test := test and i.next=="didi"
		c2.clear
		c2.add(i.next)
		c2.add(i.next)
		test := test and c2.contains("toto") and c2.contains ("tutu")
		
		result := test
	end
}
