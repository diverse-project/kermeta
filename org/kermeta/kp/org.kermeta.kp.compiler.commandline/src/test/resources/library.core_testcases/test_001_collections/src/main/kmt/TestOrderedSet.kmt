package testPackage;

using kermeta_standard#kermeta::standard::*
using kermeta_standard#kermeta::io::StdIO => stdio
using library_utils#kermeta::kunit::*

class TestOrderedSet inherits TestCase {
	
	attribute c:OrderedSet[String]

	operation mainTest() : Void is do
		var testRunner : TestRunner init TestRunner.new
       	testRunner.run(self.getMetaClass)
       	testRunner.printTestResult
       	if(testRunner.log.failures.isNotEmpty or testRunner.log.errors.isNotEmpty or testRunner.log.harnessErrors.isNotEmpty) then
       		raise kermeta::exceptions::Exception.new.initialize("Errors during test execution. See test results for more information.")
       	end
	end
	
	operation setUp():Void is do
		c := OrderedSet[String].new
	end

	operation testAddAt() : Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		c.addAt(1,"tata")
		assertTrue(c.size==4)
		var i:Iterator[String] := c.iterator
		assertTrue(i.next=="toto")
		assertTrue(i.next=="tata")
		assertTrue(i.next=="tutu")
		
		c.addAt(4,"toto")
		assertTrue(c.size==4)
		
		do
			c.addAt(-1,"baba")
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
		do
			c.addAt(6,"baba")
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
	end
	
	operation testEquals() : Void is do
		c.add("toto")
		c.add("titi")
		c.add("tutu")
		var c2:Collection[String]:=Set[String].new
		c2.add("toto")
		c2.add("titi")
		c2.add("tutu")
		assertTrue(!c.equals(c2))
		
		c2:=Bag[String].new
		c2.add("toto")
		c2.add("titi")
		c2.add("tutu")
		assertTrue(!c.equals(c2))

		c2:=Sequence[String].new
		c2.add("tutu")
		c2.add("titi")
		c2.add("toto")
		assertTrue(!c.equals(c2))

		c2:=Sequence[String].new
		c2.add("toto")
		c2.add("titi")
		c2.add("tutu")
		assertTrue(c.equals(c2))
		
		c2:=OrderedSet[String].new
		c2.add("tutu")
		c2.add("titi")
		c2.add("toto")
		assertTrue(!c.equals(c2))

		c2:=OrderedSet[String].new
		c2.add("toto")
		c2.add("titi")
		c2.add("tutu")
		assertTrue(c.equals(c2))

		var c:OrderedSet[Object]:=OrderedSet[Object].new
		var c0:Sequence[Object]:=Sequence[Object].new
		c.add(AlwaysEqual.new)
		c0.add(AlwaysEqual.new)
		assertTrue(c.equals(c0))
	end
	
	operation testSubSet() :Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		c.add("tata")
		c.add("nana")
		c.add("tete")
		var c2:OrderedSet[String]:=c.subSet(2,5)
		assertTrue(c2.size==3)
		assertTrue(c2.at(0)=="titi")
		assertTrue(c2.at(1)=="tata")
		assertTrue(c2.at(2)=="nana")
		c2.add("baba")
		assertTrue(c2.size==4)
		assertTrue(c.size==6)
		
		do
			c.subSet(-1,2)
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
		do
			c.subSet(4,8)
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
		do
			c.subSet(4,3)
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
	end

	operation testAppend() : Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var c2:OrderedSet[String]:=c.append("tata")
		assertTrue(c2.size==4)
		assertTrue(c2.subSet(0,3).equals(c))
		assertTrue(c2.at(3)=="tata")
		
		c2.add("baba")
		assertTrue(c2.size==5)
		assertTrue(c.size==3)
		
		c2:=c.append("toto")
		assertTrue(c2.equals(c))
		c2.add("baba")
		assertTrue(c2.size==4)
		assertTrue(c.size==3)
	end
	
	operation testPrepend() : Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var c2:OrderedSet[String]:=c.prepend("tata")
		assertTrue(c2.size==4)
		assertTrue(c2.subSet(1,4).equals(c))
		assertTrue(c2.at(0)=="tata")
		
		c2.add("baba")
		assertTrue(c2.size==5)
		assertTrue(c.size==3)
		
		c2:=c.prepend("toto")
		assertTrue(c2.equals(c))
		c2.add("baba")
		assertTrue(c2.size==4)
		assertTrue(c.size==3)
	end
	
	operation testInsertAt() : Void is do
		c.add("toto")
		c.add("tutu")
		c.add("titi")
		var c2:OrderedSet[String]:=c.insertAt(2,"tata")
		assertTrue(c2.size==4)
		assertTrue(c2.subSet(0,2).equals(c.subSet(0,2)))
		assertTrue(c2.at(2)=="tata")
		assertTrue(c2.at(3)==c.at(2))
		
		c2.add("baba")
		assertTrue(c2.size==5)
		assertTrue(c.size==3)
		
		c2:=c.insertAt(2,"toto")
		assertTrue(c2.equals(c))
		c2.add("baba")
		assertTrue(c2.size==4)
		assertTrue(c.size==3)

		do
			c.insertAt(-1,"baba")
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
		do
			c.insertAt(4,"baba")
			assertTrue(false)
		rescue(e:kermeta::exceptions::IndexOutOfBound)
		rescue(e:kermeta::exceptions::Exception)
			assertTrue(false)
		end
	end
	
}