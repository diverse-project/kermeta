/* $Id: kunit.kmt,v 1.45 2009-02-16 15:55:50 cfaucher Exp $
 * Creation date: February 19, 2007
 * License: EPL
 * Copyright:
 * Authors:  Franck Chauvel, Mark Skipper, Harry Lime, Jonathan Marchand
 */
 
/**
 * Contains the implementation of a unit test tool. This is a clone of
 * JUnit architecture.
 * Reference : http://junit.sourceforge.net/doc/cookstour/cookstour.htm
 *
 * Usage example of kunit can be found in fr.irisa.triskell.kermeta.samples project.
 *
 * <img src="platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/kunit_package.png"/>
 */
package kermeta::kunit;

using kermeta::standard
using kermeta::utils
using kermeta
using org::kermeta::language::structure
using kermeta::kunit
using kermeta::io::StdIO => stdio


/**
 * This exception is rose if there is a problem on the name of the test method
 */
class InvalidTestCaseNameException inherits exceptions::Exception{}

/**
 * This is for when we try to build a suite from a class that isn't a TestCase
 */
class InvalidParameterException inherits exceptions::Exception{}

/**
 * This is represents the aspect of tests that they may go wrong.
 * it defines the ability to define the conditions for success
 * (assertions) and the mechanism for recording that those 
 * conditions have not been met.
 */
abstract class Fallible inherits AbstractFallible 
{

  /**
   * counter of assertions in the test method
   */
  attribute rank : Integer
  
  /**
   * Set this attribute to false if you wish your test to not stop if the assert fails.
   * note : if set to false, the count of failures/errors may be bigger that the number of executed test operations
   */
  attribute stopOnFailure : Boolean
  operation mustStop() : Boolean is do
  	if stopOnFailure.isVoid then  
  		stopOnFailure := true	
  	end
  	result := stopOnFailure
  end 
   
  
  /**
   * where failures will be put 
   */
  operation  getLog(): Log  
  	post logDefined is result != void
  	is abstract
  
   
  /**
   * current order position of counter of assertions
   */
  operation number(): Integer is
	  	do
		 	if rank.isVoid then 
		 		rank := 0 
		 	end
		 	rank := rank + 1
		 	result := rank
	  	end
  	
  /**
   * Log a failure if condition is false
   */
  method assert(condition: Boolean):Void is
	  	do
		  	var number : Integer init self.number()
	  		if not condition then
	  			var msg : String init "assertion number " + number.toString + " failed"
	  			if mustStop then	
		  			var exception : AssertionFailedError init AssertionFailedError.new
	            	exception.message := msg
	            	raise exception	
	  			else
	  				getLog.addFailure(self, msg)
            	end	  				  				
	  		end	  			  		
	  	end

  	
  /**
   * Log a failure if condition is false
   */
  method assertWithMsg(condition: Boolean, msg: String):Void 	is
	  	do
		  	var number : Integer init self.number()
	  		if not condition then
	  			var realMsg : String init "assertion number " + number.toString + " failed: " + msg	  			
	  			if mustStop then	
		  			var exception : AssertionFailedError init AssertionFailedError.new
	            	exception.message := realMsg
	            	raise exception	
	  			else
	  				getLog.addFailure(self, realMsg)
            	end	
	  		end
	  	end

  /**
   * Log a failure 
   */
	method fail(msg: String): Void is
		 do
		 	if mustStop then
		 		var exception : AssertionFailedError init AssertionFailedError.new
	            exception.message := "explicit failure: " + msg
	            raise exception
		 	else
				getLog.addFailure(self, "explicit failure: " + msg)
			end
		 end
		 
  /**
   * Log a failure if condition is false
   */
/*	method assertTrue(condition: Boolean): Void is
		do
			assert(condition)
		end
*/
	method assertTrue(condition: Boolean): Void is // workaround
	  	do
		  	var number : Integer init self.number()
	  		if not condition then
	  			var msg : String init "assertion number " + number.toString + " failed"
	  			if mustStop then	
		  			var exception : AssertionFailedError init AssertionFailedError.new
	            	exception.message := msg
	            	raise exception	
	  			else
	  				getLog.addFailure(self, msg)
            	end	  				  				
	  		end	  			  		
	  	end

		
  /**
   * Log a failure if condition is false
   */
	method assertTrueWithMsg(condition: Boolean, message: String): Void is
		do
			assertWithMsg(condition, message)
		end
	
  /**
   * Log a failure if condition is true
   */
	method assertFalse(condition: Boolean): Void is
		do	
			assert(not condition)
		end
		
  /**
   * Log a failure if condition is true
   */
	method assertFalseWithMsg(condition: Boolean, message: String): Void is
		do
			assertWithMsg(not condition, message)
		end
		 
  /**
   * Log a failure if the two strings are not identical
   */
 	method assertEqual(expected: String, actual: String): Void is
		do	
			assertWithMsg(expected.equals(actual), "\nexpected\t:[" + expected + "] != \nactual\t:[" + actual + "]")
		end
}


/**
 * Log is a log of failures and errors that happened to fallibles since start was called
 */
class Log
{
	/**
	 * number of test that were run
	 */
	attribute runtests : Integer
	
	/** 
	 * list of detected assertion failures
	 */
	reference failures : Failure[*]
	
	/**
	 * list of detected test errors
	 */
	reference errors : Error[*]
	
	/**
	* list of detected errors with the test harness
	*/
	reference harnessErrors :  Error[*]
		
	/**
	 * Increments the runtests counter
	 */
	operation newAttempt() : Void is 
		do
			if runtests == void then
			  runtests := 0
			end
			runtests := 1 + runtests
		end
	
	/**
	 * Adds a failed test to the list of failed tests
	 */
	operation addFailure(test : Fallible, msg: String) : Void is do
		failures.add(Failure.new.initFrom(test, msg)) 
	end
	
	/**
	 * Adds an error to the list of errors
	 */
	operation addTestError(test : Fallible, e : kermeta::exceptions::Exception) : Void is 
		do
			errors.add(Error.new.initFrom(test,e))
		end

	/**
	 * Adds errors which occur during the SetUp phase
	 */
	operation addSetUpError(test : Fallible, e : kermeta::exceptions::Exception) : Void is 
		do
			harnessErrors.add(Error.new.initFrom(test,e).makeSetUp)
		end

	/**
	 * Adds errors which occur during the TearDown phase
	 */
	operation addTearDownError(test : Fallible, e : kermeta::exceptions::Exception) : Void is 
		do
			harnessErrors.add(Error.new.initFrom(test,e).makeTearDown)
		end
	
}

/**
 * Failure represents an assertion failure stored in a failure log
 */
class Failure
{
	/**
	 * the stored failure
	 */
	reference failure : Fallible

	/**
	 * the stored message (given or generated one)
	 */
	reference message : String
	
	/**
	 * initialization of the failure
	 */
	operation initFrom(fallible: Fallible, msg: String): Failure is
	 	do
	 		failure := fallible
	 		message := msg
	 		result :=  self
	 	end
	
	/**
	 * overwrite the default method, in order to add the message
	 */
	method toString(): String is 
		do 
			result := failure.toString + " " + message
		end
}

/**
 * all kinds of error we can meet
 */
enumeration ErrorKind
{
	setUpError;
	testError;
	tearDownError;
}

/**
 * Error represents an occurrence of an exception in setUp, tearDown or a test
 * and is stored in a failure log
 */

class Error
{
	/**
	 * the stored error
	 */
	reference error : Fallible
	
	/**
	 * the Kermeta exception corresponding to the error
	 */
	reference exception : kermeta::exceptions::Exception
	
	/**
	 * the nature of the stored error
	 */
	attribute kind : ErrorKind
	
	/**
	 * Sets up a new error with failable object and the exception that occurred
	 * by default it will be a test error. Use makeSetUp or makeTearDown to
	 * change its type
	 */
	operation initFrom(error: Fallible, e: kermeta::exceptions::Exception): Error is
	 	do
	 		self.error  := error
	 		exception := e
	 		kind := ErrorKind.testError
	 		result :=  self
	 	end
	 	
	/**
	 * Changes the type of an error to SetUpError, the best way to use
	 * this method is to call it after the init from line:
	 * var e : Error init Error.new.initFrom(f, e).makeSetUp
	 */
	operation makeSetUp():Error is
		do	
			kind := ErrorKind.setUpError
			result := self
		end

	/**
	 * Changes the type of an error to makeTearDownError, the best way to use
	 * this method is to call it after the init from line:
	 * var e : Error init Error.new.initFrom(f, e).makeTearDown
	 */		
	operation makeTearDown():Error is
		do	
			kind := ErrorKind.tearDownError
			result := self
		end
		
	/**
	 * overwrite the default method, in order to add :
	 *   - the type
	 *   - the message
	 *   - the stack trace
	 */
	operation toString(): String is 
		do 
			if kind.equals(ErrorKind.testError) then
				result := error.toString 
			else
				result := error.getMetaClass.name
				if kind.equals(ErrorKind.setUpError) then
					result := result + "." + "setUp()"
				else
					result := result + "." + "tearDown()"
				end
			end
			if(exception.getMetaClass!=void) then
				result := result	+ " raised " + exception.getMetaClass.name
			else
				result := result +" raised an uncaught exception"
			end
			
			if exception.message != void then
				result := result + "\n    Message: "+ exception.message
			else
				result := result + "\n    (no message)"
			end
			if exception.stackTrace != void then
				result := result	+ "\n    Stack Trace:\n" + exception.stackTrace
			else
				result := result + "\n    (no stack trace)"
			end
		end
	
}

/**
 * The abstact notion of a test which is runnable and which has a log
 * in which it can keep note of failures
 */
abstract class Test 
{
    /**
     * where failures and errors will be put 
     */
	reference log: Log 
	
	/**
	 * called when run by the java testrunner
	 */
	operation initLog(): Log is
		do
			self.log := Log.new
			result := self.log
		end
	
	/**
	 * Initializes the log where failures and errors will be put
	 */
	operation setLog(log: Log): Void 
		pre paramNotVoid is log != void
		post logNotVoid is self.log != void 
		is do
			self.log := log
		end
	
	/**
	 * Execute the test and verify its assertions
	 */
	operation run():Void 
		pre logNotVoid is self.log != void 
		is  abstract
}


/**
 * A TestSuite is a structured collection of tests, using the
 * composite pattern, all tests are runnable and have a log
 * In addition a suite can be populated automatically from a
 * test case class with one test case object for each test
 * method in the class.
 *  You can make a suite and populate it manually like this:
 *
 *  var suite : TestSuite init TestSuite.new.
 *  suite.tests.add(t1)
 *
 *  Alternatively you can populate a suite automatically from
 *  a class that inherits TestCase and which has several methods
 *  called test:
 *
 *  var suite : TestSuite init TestSuite.new.addAllTestCasesFrom(InterestingTestCaseSet)
 */
class TestSuite inherits Test
{
	/**
	 * The collection of tests which will be ran as the suite
	 */
	reference tests: Test[*]
	
	/** 
	 * Run all the tests in the test suite
	 */
	method run() is
	  do
			tests.each{ t | 
				t.setLog(log) 
				t.run() 
			}
	  end
	  
	 /**
	  * Add to this suite, a set of test cases of type c, one for each
	  * test method in class c. C must be a descendent of TestCase
	  */
   	operation addAllTestCasesFrom(testCaseClass:Class): TestSuite  // workaround
   		pre testCaseClassIsATestCase is testCaseClass.superClass.contains(TestCase)
   		is
 		do
 			if not testCaseClass.typeDefinition.superType.exists{ sc | sc.asType(Class).typeDefinition.equals(TestCase.typeDefinition)} then // workaround
 				var e : exceptions::Exception init InvalidParameterException.new
 				e.message :="Cannot build a suite from class: " + testCaseClass.typeDefinition.name // workaround
 				raise e
 			end
			
			testCaseClass.typeDefinition.asType(ClassDefinition).ownedOperation.select { o |  //workaround
				if o.name.size>=4 then 
					o.name.substring(0, 4)== "test"
				else
					false
				end				
			}.each { o | 
			    var testCase : TestCase
				testCase ?= testCaseClass.new
				testCase.setTestMethodName(o.name)
				self.tests.add(testCase)
			}
			
			result := self
 		end
	   
	 /**
	  * to be written #####################################################
	  */
	   operation addAllTestCasesFromAspects( testCaseClass: Class, anAspect : ClassDefinition ) : Void is do
	   		
	   		anAspect.ownedOperation.select { o |  
				if o.name.size>=4 then 
					o.name.substring(0, 4)== "test"
				else
					false
				end
			}.each { o | 
			    var testCase : TestCase
				testCase ?= testCaseClass.new
				testCase.setTestMethodName( o.name)
				self.tests.add(testCase)
			}
			
	   end
}

/**
 * A test case comprises one or more test methods plus
 * setUp and tearDown that build and destroy their test harness.
 * An instance of a subclass of TestCase should have its
 * testMethodName set to the name of one of its operations
 * which should be called whe the test is run. You can do this
 * yourself:
 *
 * var testCase : TestCase init MyTestCaseClass.new.setTestMethodName("testSomething")
 *
 * Alternatively if your TestCase Class has many methods whose
 * name begins with 'test' you can create a set of instaces already
 * set up with their testMethodName using the addAllTestCasesFrom
 * operation on TestSuite
 */
abstract class TestCase inherits Test, Fallible
{

	/**
	 * the name of the method which corresponds to the test case in the test class
	 */
	attribute __testMethodName : String
	
	/**
	 * accessor on the method name
	 */
	operation getTestMethodName(): String is
		do
			result := __testMethodName
		end
		
	/**
	 * Sets the name of the method from the concrete subclass of
	 *  TestCase that should be executed when this TestCase instance
	 * is run as a test.
	 * Throws invalidTestCaseNameException if the given string is not
	 * the name of a method in the test case
	 */
	operation setTestMethodName(name: String): TestCase is 
		do
			__testMethodName := name
			/*if self.getMetaClass.ownedOperation.exists{o| o.name.equals(name)} then
				__testMethodName := name
			else	
				var e :  InvalidTestCaseNameException init InvalidTestCaseNameException.new
				e.message := name + " is not a valid method name for class " + self.getMetaClass.name
				raise e
			end*/
			result := self
		end
		
	/**
	 * accessor on the log
	 */
	method getLog(): Log is
		do
			result := self.log
		end
	
	/**
	 * the things to be done before execution of the test method
	 * (designed to be overwritten in real TestCase classes) 
	 */
	operation setUp():Void  is 
		do
		end
	
	/**
	 * the things to be done after execution of the test method
	 * (designed to be overwritten in real TestCase classes) 
	 */
	operation tearDown():Void is 
		do
		end
	
	/**
	 * operation used when the TestCase is run from a java test runner, encapsulates the failures results
	 * into an AssertionFailedError so the TestRunner can detect it
	 */
	operation raiseIfHasFailures() : Void is 
	do
		var msg : String init ""
		if not log.failures.empty then
			msg := "Failures: "
			log.failures.each { f | msg := msg +"\n   " + f.toString 	}
			var exception : AssertionFailedError init kermeta::kunit::AssertionFailedError.new
			exception.message := msg
			raise exception
		end
		if not log.errors.empty then
			log.errors.each { f | 
				msg := "Errors: "
				msg := msg +"\n   " + f.toString
				var exception : exceptions::Exception init exceptions::Exception.new
				exception.message := msg
				raise exception 	
			}
			
		end
	end
	
	/**
	 * Execute the whole test case : SetUp, test method, TearDown
	 * The assertions of the test method are computed
	 */
	method run() is
		do
			getLog.newAttempt
			do
				setUp
				do
					var cd : ClassDefinition init self.getMetaClass.typeDefinition.asType(ClassDefinition)
					var op : Operation init cd.ownedOperation.asOrderedSet.detect{op | op.name.equals(self.getTestMethodName)}
					self.invoke(op,OrderedSet[Object].new)
					do
						tearDown
					rescue (e : exceptions::Exception)
						getLog.addTearDownError(self, e)
					end
				rescue (afe:  AssertionFailedError)
					getLog.addFailure(self, afe.message/* + "\nstack trace:\n" +  afe.stackTrace*/) // workaround
				rescue (e1 : exceptions::Exception)
					getLog.addTestError(self,e1)
					do
						tearDown
					rescue (e : exceptions::Exception)
						getLog.addTearDownError(self, e)
					end
				end
			rescue (e : exceptions::Exception)
				getLog.addSetUpError(self, e)
			end
		end

	/**
	 * overwrites the default method for more informative output
	 */
	method toString(): String is
		do
			result := self.getMetaClass.typeDefinition.asType(ClassDefinition).name + "." + getTestMethodName + "()" // workaround
		end

}

/**
 * Create and use a test runner to run one or more tests and print the failure log. E.g.:
 * do
 *	     var suite : TestSuite init TestSuite.new.addAllTestCasesFrom(InterestingTestCaseSet)
 *	     var runner : TestRunner init TestRunner.new
 *	     runner.run(suite)
 *	     runner.printLogs
 * end
 *
 * Where InterestingTestCaseSet is a subclass of TestCase and contains several test... methods
 */
class TestRunner
{
	/**
	 * Where to register the failures and errors
	 */
	attribute log : Log

	/**
	 * Use this to run a test case or a test suite.
	 * If you want to run all the test.... methods in a TestCase class,
	 *  you can populate a suite with TestSuite.addAllTestCasesFrom
	 */
	 operation runTest(test:Test): Void 
		pre testNotVoid is test != void
		post logNotVoid is log != void
		is
		do
			log := Log.new
			test.setLog(log)
			test.run()
		end
	 
	 /**
	  * For backwards compatibility with old kunit, this takes a test case class
	  * and creates the necessary suite, and runs it. DEPRECATED
	  */
	operation run(testCaseClass:Class): Void 
		pre cIsATestCase is testCaseClass.superClass.contains(TestCase) 
		is
		do
			runTest(TestSuite.new.addAllTestCasesFrom(testCaseClass)) // workaround
		end
		
	/**
	 * Prints the log or errors and failures from a test run.
	 * Run some tests first.
	 */
	operation printTestResult() is do
		stdio.writeln(
		"\n---------------------------------------------  TEST RESULTS-----------------------------------------------\n")

		if not log.failures.empty then
			stdio.writeln("\nFailures: ")
			log.failures.each { f | stdio.writeln("\n   " + f.toString) 	}
		end
		if not log.errors.empty then
			stdio.writeln("\nErrors: ")	
			log.errors.each { e | 
			stdio.writeln("\n   " + e.toString) 	}
		end
		if not log.harnessErrors.empty then
			stdio.writeln("\nErrors from setUp or tearDown : ")	
			log.harnessErrors.each { e | stdio.writeln("\n   " + e.toString) 	}
		end
		stdio.writeln("\n Summary: ")
		stdio.writeln("   Number of launched tests : " + log.runtests.toString)
		stdio.writeln("   Number of failures : " + log.failures.size.toString)
		stdio.writeln("   Number of errors : " +  log.errors.size.toString)
		stdio.writeln("   Number of errors in setUp or tearDown: " +  log.harnessErrors.size.toString)
		stdio.writeln("\n-------------------------------------------------------------------------------------------------------------------------------\n")
	end
}
