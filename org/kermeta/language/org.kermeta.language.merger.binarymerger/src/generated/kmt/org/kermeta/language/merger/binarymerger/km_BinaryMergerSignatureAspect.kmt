package org;

require kermeta
require "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.ecore.binarymergergenerator/src/main/kermeta/org/kermeta/ecore/binarymerger/BinaryMergerContext.kmt"

using kermeta::language::structure
using org::kermeta::ecore::binarymerger

package kermeta {
	package language {
		package behavior {
			aspect class Assignment {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::Assignment
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.target.isVoid) and (not aspectElement.target.isVoid) then
						result := result and self.target == aspectElement.target
					end
					if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
						result := result and self.~value == aspectElement.~value
					end
					if (not self.isCast.isVoid) and (not aspectElement.isCast.isVoid) then
						result := result and self.isCast == aspectElement.isCast
					end
				end
			}

			aspect class Expression {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::behavior::Expression
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class CallExpression {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::CallExpression
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class Block {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::Block
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class CallVariable {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					var aspectElement : org::kermeta::language::behavior::CallVariable
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.isAtpre.isVoid) and (not aspectElement.isAtpre.isVoid) then
						result := result and self.isAtpre == aspectElement.isAtpre
					end
				end
			}

			aspect class CallFeature {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					var aspectElement : org::kermeta::language::behavior::CallFeature
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.target.isVoid) and (not aspectElement.target.isVoid) then
						result := result and self.target == aspectElement.target
					end
					if (not self.isAtpre.isVoid) and (not aspectElement.isAtpre.isVoid) then
						result := result and self.isAtpre == aspectElement.isAtpre
					end
				end
			}

			aspect class CallSuperOperation {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					var aspectElement : org::kermeta::language::behavior::CallSuperOperation
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class CallResult {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallVariable is do
					var aspectElement : org::kermeta::language::behavior::CallResult
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class CallValue {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					var aspectElement : org::kermeta::language::behavior::CallValue
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class Conditional {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::Conditional
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.thenBody.isVoid) and (not aspectElement.thenBody.isVoid) then
						result := result and self.thenBody == aspectElement.thenBody
					end
					if (not self.elseBody.isVoid) and (not aspectElement.elseBody.isVoid) then
						result := result and self.elseBody == aspectElement.elseBody
					end
					if (not self.condition.isVoid) and (not aspectElement.condition.isVoid) then
						result := result and self.condition == aspectElement.condition
					end
				end
			}

			aspect class Raise {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::Raise
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.expression.isVoid) and (not aspectElement.expression.isVoid) then
						result := result and self.expression == aspectElement.expression
					end
				end
			}

			aspect class Rescue {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::behavior::Rescue
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					if (not self.exceptionType.isVoid) and (not aspectElement.exceptionType.isVoid) then
						result := result and self.exceptionType == aspectElement.exceptionType
					end
					if (not self.exceptionName.isVoid) and (not aspectElement.exceptionName.isVoid) then
						result := result and self.exceptionName == aspectElement.exceptionName
					end
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class TypeReference {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					var aspectElement : org::kermeta::language::behavior::TypeReference
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class Literal {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::Literal
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class EmptyExpression {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::EmptyExpression
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class JavaStaticCall {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::JavaStaticCall
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.jclass.isVoid) and (not aspectElement.jclass.isVoid) then
						result := result and self.jclass == aspectElement.jclass
					end
					if (not self.jmethod.isVoid) and (not aspectElement.jmethod.isVoid) then
						result := result and self.jmethod == aspectElement.jmethod
					end
				end
			}

			aspect class LambdaExpression {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::LambdaExpression
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
						result := result and self.body == aspectElement.body
					end
				end
			}

			aspect class LambdaParameter {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::behavior::LambdaParameter
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					if (not self.type.isVoid) and (not aspectElement.type.isVoid) then
						result := result and self.type == aspectElement.type
					end
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class IntegerLiteral {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					var aspectElement : org::kermeta::language::behavior::IntegerLiteral
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
						result := result and self.~value == aspectElement.~value
					end
				end
			}

			aspect class StringLiteral {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					var aspectElement : org::kermeta::language::behavior::StringLiteral
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
						result := result and self.~value == aspectElement.~value
					end
				end
			}

			aspect class BooleanLiteral {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					var aspectElement : org::kermeta::language::behavior::BooleanLiteral
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
						result := result and self.~value == aspectElement.~value
					end
				end
			}

			aspect class TypeLiteral {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					var aspectElement : org::kermeta::language::behavior::TypeLiteral
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.typeref.isVoid) and (not aspectElement.typeref.isVoid) then
						result := result and self.typeref == aspectElement.typeref
					end
				end
			}

			aspect class VoidLiteral {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					var aspectElement : org::kermeta::language::behavior::VoidLiteral
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class Loop {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::Loop
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.initialization.isVoid) and (not aspectElement.initialization.isVoid) then
						result := result and self.initialization == aspectElement.initialization
					end
					if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
						result := result and self.body == aspectElement.body
					end
					if (not self.stopCondition.isVoid) and (not aspectElement.stopCondition.isVoid) then
						result := result and self.stopCondition == aspectElement.stopCondition
					end
				end
			}

			aspect class SelfExpression {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::SelfExpression
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class VariableDecl {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					var aspectElement : org::kermeta::language::behavior::VariableDecl
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.initialization.isVoid) and (not aspectElement.initialization.isVoid) then
						result := result and self.initialization == aspectElement.initialization
					end
					if (not self.type.isVoid) and (not aspectElement.type.isVoid) then
						result := result and self.type == aspectElement.type
					end
					if (not self.identifier.isVoid) and (not aspectElement.identifier.isVoid) then
						result := result and self.identifier == aspectElement.identifier
					end
				end
			}

		}


		package structure {


			aspect class Object {
				operation localMatch( aspectElementObj : kermeta::standard::Object) : Boolean is do
					var aspectElement : org::kermeta::language::structure::Object
					aspectElement ?= aspectElementObj
					
					result := true
				end
			}


			aspect class Operation {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					var aspectElement : org::kermeta::language::structure::Operation
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
						result := result and self.body == aspectElement.body
					end
					if (not self.isAbstract.isVoid) and (not aspectElement.isAbstract.isVoid) then
						result := result and self.isAbstract == aspectElement.isAbstract
					end
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class Property {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					var aspectElement : org::kermeta::language::structure::Property
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.getterBody.isVoid) and (not aspectElement.getterBody.isVoid) then
						result := result and self.getterBody == aspectElement.getterBody
					end
					if (not self.setterBody.isVoid) and (not aspectElement.setterBody.isVoid) then
						result := result and self.setterBody == aspectElement.setterBody
					end
					if (not self.isReadOnly.isVoid) and (not aspectElement.isReadOnly.isVoid) then
						result := result and self.isReadOnly == aspectElement.isReadOnly
					end
					if (not self.default.isVoid) and (not aspectElement.default.isVoid) then
						result := result and self.default == aspectElement.default
					end
					if (not self.isComposite.isVoid) and (not aspectElement.isComposite.isVoid) then
						result := result and self.isComposite == aspectElement.isComposite
					end
					if (not self.isDerived.isVoid) and (not aspectElement.isDerived.isVoid) then
						result := result and self.isDerived == aspectElement.isDerived
					end
					if (not self.isID.isVoid) and (not aspectElement.isID.isVoid) then
						result := result and self.isID == aspectElement.isID
					end
					if (not self.isGetterAbstract.isVoid) and (not aspectElement.isGetterAbstract.isVoid) then
						result := result and self.isGetterAbstract == aspectElement.isGetterAbstract
					end
					if (not self.isSetterAbstract.isVoid) and (not aspectElement.isSetterAbstract.isVoid) then
						result := result and self.isSetterAbstract == aspectElement.isSetterAbstract
					end
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class Type {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::Type
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class TypeContainer {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::TypeContainer
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class EnumerationLiteral {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					var aspectElement : org::kermeta::language::structure::EnumerationLiteral
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class TypeVariableBinding {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					var aspectElement : org::kermeta::language::structure::TypeVariableBinding
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class MultiplicityElement {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypedElement is do
					var aspectElement : org::kermeta::language::structure::MultiplicityElement
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.isOrdered.isVoid) and (not aspectElement.isOrdered.isVoid) then
						result := result and self.isOrdered == aspectElement.isOrdered
					end
					if (not self.isUnique.isVoid) and (not aspectElement.isUnique.isVoid) then
						result := result and self.isUnique == aspectElement.isUnique
					end
					if (not self.lower.isVoid) and (not aspectElement.lower.isVoid) then
						result := result and self.lower == aspectElement.lower
					end
					if (not self.upper.isVoid) and (not aspectElement.upper.isVoid) then
						result := result and self.upper == aspectElement.upper
					end
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class TypeDefinition {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					var aspectElement : org::kermeta::language::structure::TypeDefinition
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
						result := result and self.isAspect == aspectElement.isAspect
					end
				end
			}

			aspect class Class {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ParameterizedType is do
					var aspectElement : org::kermeta::language::structure::Class
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.isAbstract.isVoid) and (not aspectElement.isAbstract.isVoid) then
						result := result and self.isAbstract == aspectElement.isAbstract
					end
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class DataType {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					var aspectElement : org::kermeta::language::structure::DataType
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
						result := result and self.isAspect == aspectElement.isAspect
					end
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class Enumeration {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::DataType is do
					var aspectElement : org::kermeta::language::structure::Enumeration
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
						result := result and self.isAspect == aspectElement.isAspect
					end
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class NamedElement {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::NamedElement
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class Package {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					var aspectElement : org::kermeta::language::structure::Package
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.uri.isVoid) and (not aspectElement.uri.isVoid) then
						result := result and self.uri == aspectElement.uri
					end
				end
			}

			aspect class Parameter {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					var aspectElement : org::kermeta::language::structure::Parameter
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class PrimitiveType {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::DataType is do
					var aspectElement : org::kermeta::language::structure::PrimitiveType
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
						result := result and self.isAspect == aspectElement.isAspect
					end
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class TypedElement {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					var aspectElement : org::kermeta::language::structure::TypedElement
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}


			aspect class Tag {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::Tag
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
					if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
						result := result and self.~value == aspectElement.~value
					end
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class AbstractProperty {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::AbstractProperty
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class Constraint {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					var aspectElement : org::kermeta::language::structure::Constraint
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
						result := result and self.body == aspectElement.body
					end
					if (not self.stereotype.isVoid) and (not aspectElement.stereotype.isVoid) then
						result := result and self.stereotype == aspectElement.stereotype
					end
					if (not self.language.isVoid) and (not aspectElement.language.isVoid) then
						result := result and self.language == aspectElement.language
					end
				end
			}


			aspect class ClassDefinition {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::GenericTypeDefinition is do
					var aspectElement : org::kermeta::language::structure::ClassDefinition
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.isAbstract.isVoid) and (not aspectElement.isAbstract.isVoid) then
						result := result and self.isAbstract == aspectElement.isAbstract
					end
				end
			}


			aspect class ModelingUnit {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeDefinitionContainer is do
					var aspectElement : org::kermeta::language::structure::ModelingUnit
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.namespacePrefix.isVoid) and (not aspectElement.namespacePrefix.isVoid) then
						result := result and self.namespacePrefix == aspectElement.namespacePrefix
					end
				end
			}

			aspect class TypeDefinitionContainer {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					var aspectElement : org::kermeta::language::structure::TypeDefinitionContainer
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class Require {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::Require
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					if (not self.uri.isVoid) and (not aspectElement.uri.isVoid) then
						result := result and self.uri == aspectElement.uri
					end
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class GenericTypeDefinition {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeDefinition is do
					var aspectElement : org::kermeta::language::structure::GenericTypeDefinition
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class ParameterizedType {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					var aspectElement : org::kermeta::language::structure::ParameterizedType
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class TypeVariable {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					var aspectElement : org::kermeta::language::structure::TypeVariable
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class ObjectTypeVariable {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeVariable is do
					var aspectElement : org::kermeta::language::structure::ObjectTypeVariable
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class ModelType {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					var aspectElement : org::kermeta::language::structure::ModelType
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
						result := result and self.isAspect == aspectElement.isAspect
					end
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class ModelTypeVariable {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeVariable is do
					var aspectElement : org::kermeta::language::structure::ModelTypeVariable
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class VirtualType {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ObjectTypeVariable is do
					var aspectElement : org::kermeta::language::structure::VirtualType
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
						result := result and self.name == aspectElement.name
					end
				end
			}

			aspect class Model {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::Model
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class Resource {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::Resource
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class ResourceGroup {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Resource is do
					var aspectElement : org::kermeta::language::structure::ResourceGroup
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class SimpleResource {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Resource is do
					var aspectElement : org::kermeta::language::structure::SimpleResource
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.uri.isVoid) and (not aspectElement.uri.isVoid) then
						result := result and self.uri == aspectElement.uri
					end
				end
			}

			aspect class AbstractOperation {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::AbstractOperation
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class UnresolvedType {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					var aspectElement : org::kermeta::language::structure::UnresolvedType
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.typeIdentifier.isVoid) and (not aspectElement.typeIdentifier.isVoid) then
						result := result and self.typeIdentifier == aspectElement.typeIdentifier
					end
				end
			}

			aspect class Unresolved {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::Unresolved
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class UnresolvedProperty {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AbstractProperty is do
					var aspectElement : org::kermeta::language::structure::UnresolvedProperty
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.propertyIdentifier.isVoid) and (not aspectElement.propertyIdentifier.isVoid) then
						result := result and self.propertyIdentifier == aspectElement.propertyIdentifier
					end
				end
			}

			aspect class UnresolvedOperation {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AbstractOperation is do
					var aspectElement : org::kermeta::language::structure::UnresolvedOperation
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.operationIdentifier.isVoid) and (not aspectElement.operationIdentifier.isVoid) then
						result := result and self.operationIdentifier == aspectElement.operationIdentifier
					end
				end
			}

			aspect class Using {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Object is do
					var aspectElement : org::kermeta::language::structure::Using
					aspectElement ?= aspectElementObj
					
					// workaround compiler V2 bug, cannot call super on a Class named "Object" 

					// result := super( aspectElement)
					result := true
					if (not self.fromQName.isVoid) and (not aspectElement.fromQName.isVoid) then
						result := result and self.fromQName == aspectElement.fromQName
					end
					if (not self.toName.isVoid) and (not aspectElement.toName.isVoid) then
						result := result and self.toName == aspectElement.toName
					end
					// workaround compiler V2 bug, embed code that should have been called via super 

				end
			}

			aspect class ProductType {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					var aspectElement : org::kermeta::language::structure::ProductType
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class FunctionType {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					var aspectElement : org::kermeta::language::structure::FunctionType
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class VoidType {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					var aspectElement : org::kermeta::language::structure::VoidType
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
				end
			}

			aspect class TypeMapping {
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					var aspectElement : org::kermeta::language::structure::TypeMapping
					aspectElement ?= aspectElementObj
					
					result := super( aspectElement)
					if (not self.mapping.isVoid) and (not aspectElement.mapping.isVoid) then
						result := result and self.mapping == aspectElement.mapping
					end
				end
			}

		}


		aspect class DummyClass {
			operation localMatch( aspectElementObj : kermeta::standard::Object) : Boolean is do
				var aspectElement : org::kermeta::language::DummyClass
				aspectElement ?= aspectElementObj
				
				result := true
			end
		}

	}


	aspect class DummyClass {
		operation localMatch( aspectElementObj : kermeta::standard::Object) : Boolean is do
			var aspectElement : org::kermeta::DummyClass
			aspectElement ?= aspectElementObj
			
			result := true
		end
	}

}


aspect class DummyClass {
	operation localMatch( aspectElementObj : kermeta::standard::Object) : Boolean is do
		var aspectElement : org::DummyClass
		aspectElement ?= aspectElementObj
		
		result := true
	end
}
