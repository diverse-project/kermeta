/* $Id:$ 
 * Creation : October 27, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            Didier
 */
@mainClass "org::kermeta::language::merger::BinaryMerger"
@mainOperation "main"


package org::kermeta::language::merger;


require kermeta
require "platform:/lookup/org.kermeta.language.merger.binarymerger/src/generated/kmt/org/kermeta/language/merger/binarymerger/km_BinaryMergerAspect.kmt"
//require "platform:/lookup/org.kermeta.language.merger.binarymerger/src/generated/kmt/org/kermeta/language/merger/binarymerger/km_BinaryMergerSignatureAspect.kmt"
require "km_BinaryMergerSignatureAspect.kmt"
require "platform:/lookup/org.kermeta.language.merger.binarymerger/src/generated/kmt/org/kermeta/language/merger/binarymerger/km_BinaryMergerMoveAspect.kmt"
require "platform:/lookup/org.kermeta.language.merger.binarymerger/src/generated/kmt/org/kermeta/language/merger/binarymerger/km_BinaryMergerReferenceFixerAspect.kmt"
//require "platform:/lookup/org.kermeta.ecore.binarymergergenerator/src/main/kermeta/org/kermeta/ecore/binarymerger/BinaryMergerContext.kmt"
//require "platform:/lookup/org.kermeta.ecore.binarymergergenerator/target/test/test_kermeta2/kermeta/org/kermeta/language/binarymerger/km_ContainmentBasedActionPerformer.kmt"
//require "platform:/resource/org.kermeta.language.mdk/src/kmt/language/helpers/kermeta_ContainmentBasedActionPerformer.kmt"
//require "BinaryMergerStrategy.kmt"

using kermeta::standard
using kermeta::utils
using kermeta::persistence
using org::kermeta::language::structure

class BinaryMerger
{
	operation main() : Void is do 
		//test_001_a
		test_invalid_001
		/*test_001_b
		test_001_c
		test_001_d*/
		stdio.writeln("Done")
	end
	
	reference context : org::kermeta::ecore::binarymerger::BinaryMergerContext
	
	operation getErrors() : OrderedSet<org::kermeta::ecore::binarymerger::BinaryMergerException> is do
		result := context.errors
	end
	
	operation merge(primaryModelModelingUnit : Collection<AbstractMetamodel>, aspectModelModelingUnit : Collection<AbstractMetamodel>) : Collection<AbstractMetamodel> is do
		//primaryModelModelingUnit.eachOwnedElement(void, function { c : kermeta::standard::Object| stdio.writeln(c.toString)})
		
		// primaryModelModelingUnit is now used as mergedModel
		//var mergedModelModelingUnit : ModelingUnit init primaryModelModelingUnit
		var mergedModelModelingUnit : Collection<AbstractMetamodel> init OrderedSet<AbstractMetamodel>.new
		
		//aspectModelModelingUnit.similarElementInMergedModel := mergedModelModelingUnit
		aspectModelModelingUnit.each{aspectMM|
			mergedModelModelingUnit.each{mergedMM|
				if (aspectMM.uri == mergedMM.uri) then
					aspectMM.similarElementInMergedModel := mergedMM
				end
			}
		}
		
		
		context := org::kermeta::ecore::binarymerger::BinaryMergerContext.new
		do 
			aspectModelModelingUnit.each{aspectMM|
				aspectMM.binaryMerger_MoveToMergedModel(context)
				
			}
			
			//stdio.writeln("Merging references of "+context.elementsNeedingReferenceMerge.size.toString+" objects")
			context.elementsNeedingReferenceMerge.each{o |
				do
					o.asType(KermetaModelElement).mergeReferences
				rescue (mergeException : org::kermeta::ecore::binarymerger::BinaryMergerException)
					getErrors.add(mergeException)
				end
			}
			//mergedModelModelingUnit.fixReferences
			context.movedElementsNeedingReferenceFix.each{o |
				o.asType(KermetaModelElement).fixReferences
			}
		rescue (mergeException : org::kermeta::ecore::binarymerger::BinaryMergerException)
			getErrors.add(mergeException)
		end
		/* aspectModelModelingUnit.eachOwnedElement{ c |
				c.binaryMerger_MoveToMergedModel(context)}
		 mergedModelModelingUnit.eachOwnedElement(mergedModelModelingUnit, 
			function { c : kermeta::standard::Object|
				c.binaryMerger_FixReferences()})
		*/
		// control result
		/* stdio.writeln("Check result")		
		primaryModelModelingUnit.eachOwnedElement(void, 
			function { c : kermeta::standard::Object| stdio.writeln(c.toString)})
			*/		
		result := primaryModelModelingUnit
	end
	
	operation test_001_a() : Void is do 
		stdio.writeln("test_001()...")
		var repository : EMFRepository init EMFRepository.new
   		//repository.registerEcoreFile("platform:/resource/fr.irisa.triskell.kermeta.samples/class2RDBMS/metamodels/ClassMM.ecore")             
   		var primaryModelResource : Resource init repository.getResource("platform:/resource/org.kermeta.language.api.tests/src/main/resources/KmBinaryMerger_Valid/valid_001/primary/AB.km")
       	var aspectModelResource : Resource init repository.getResource("platform:/resource/org.kermeta.language.api.tests/src/main/resources/KmBinaryMerger_Valid/valid_001/aspect/Aatt.km")
       	
       	var pmModelingUnit : Set<AbstractMetamodel>
       	pmModelingUnit ?= primaryModelResource.contents
       	
       	var amModelingUnit : Set<AbstractMetamodel>
       	amModelingUnit ?= aspectModelResource.contents
       	
       	var mergedModelingUnit : Collection<AbstractMetamodel>
       	mergedModelingUnit := merge(pmModelingUnit, amModelingUnit)
       	
       	var mergedModelResource : Resource init repository.createResource("platform:/resource/org.kermeta.language.merger.binarymerger/target/test/output/test_001/km/001_ABatt.km",
       		"platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore")
       	primaryModelResource.remove(mergedModelingUnit)
       	mergedModelResource.add(mergedModelingUnit)
       	stdio.writeln("Saving " + mergedModelResource.uri)
       	mergedModelResource.save
		stdio.writeln("test_001_a() Done")
	end
	operation test_invalid_001() : Void is do 
		stdio.writeln("test_001()...")
		var repository : EMFRepository init EMFRepository.new
   		//repository.registerEcoreFile("platform:/resource/fr.irisa.triskell.kermeta.samples/class2RDBMS/metamodels/ClassMM.ecore")             
   		var primaryModelResource : Resource init repository.getResource("platform:/resource/org.kermeta.language.api.tests/src/main/resources/KmBinaryMerger_Invalid/invalid_001_merge_non_aspect_classes/primary/AB.km")
       	var aspectModelResource : Resource init repository.getResource("platform:/resource/org.kermeta.language.api.tests/src/main/resources/KmBinaryMerger_Invalid/invalid_001_merge_non_aspect_classes/aspect/Aatt.km")
       	
       	var pmModelingUnit : Set<AbstractMetamodel> 
       	pmModelingUnit ?= primaryModelResource.contents
       	
       	var amModelingUnit : Set<AbstractMetamodel> 
       	amModelingUnit ?= aspectModelResource.contents
       	
       	var mergedModelingUnit : Collection<AbstractMetamodel>
       	mergedModelingUnit := merge(pmModelingUnit, amModelingUnit)
       	
       	var mergedModelResource : Resource init repository.createResource("platform:/resource/org.kermeta.language.merger.binarymerger/target/test/output/invalid_001/km/001_ABatt.km",
       		"platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore")
       	primaryModelResource.remove(mergedModelingUnit)
       	mergedModelResource.add(mergedModelingUnit)
       	stdio.writeln("Saving " + mergedModelResource.uri)
       	mergedModelResource.save
		stdio.writeln("test_001_a() Done")
	end
	
}