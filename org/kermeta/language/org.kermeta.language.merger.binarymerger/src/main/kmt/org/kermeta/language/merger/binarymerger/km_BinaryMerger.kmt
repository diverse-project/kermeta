/* $Id:$ 
 * Creation : October 27, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            Didier
 */
@mainClass "org::kermeta::language::merger::BinaryMerger"
@mainOperation "main"


package org::kermeta::language::merger;


require kermeta
require "platform:/lookup/org.kermeta.language.merger.binarymerger/src/generated/kmt/org/kermeta/language/merger/binarymerger/km_BinaryMergerAspect.kmt"
//require "platform:/lookup/org.kermeta.language.merger.binarymerger/src/generated/kmt/org/kermeta/language/merger/binarymerger/km_BinaryMergerSignatureAspect.kmt"
require "km_BinaryMergerSignatureAspect.kmt"
require "platform:/lookup/org.kermeta.language.merger.binarymerger/src/generated/kmt/org/kermeta/language/merger/binarymerger/km_BinaryMergerMoveAspect.kmt"
require "platform:/lookup/org.kermeta.language.merger.binarymerger/src/generated/kmt/org/kermeta/language/merger/binarymerger/km_BinaryMergerReferenceFixerAspect.kmt"
//require "platform:/lookup/org.kermeta.ecore.binarymergergenerator/src/main/kermeta/org/kermeta/ecore/binarymerger/BinaryMergerContext.kmt"
//require "platform:/lookup/org.kermeta.ecore.binarymergergenerator/target/test/test_kermeta2/kermeta/org/kermeta/language/binarymerger/km_ContainmentBasedActionPerformer.kmt"
//require "platform:/resource/org.kermeta.language.mdk/src/kmt/language/helpers/kermeta_ContainmentBasedActionPerformer.kmt"
//require "BinaryMergerStrategy.kmt"

using kermeta::standard
using kermeta::utils
using kermeta::persistence
using org::kermeta::language::structure

class BinaryMerger
{
	operation main() : Void is do 
		//test_001_a
		test_invalid_001
		/*test_001_b
		test_001_c
		test_001_d*/
		stdio.writeln("Done")
	end
	
	reference context : org::kermeta::ecore::binarymerger::BinaryMergerContext
	
	operation getErrors() : OrderedSet<org::kermeta::ecore::binarymerger::BinaryMergerException> is do
		result := context.errors
	end
	
	/**
	 * normal merger for kermeta programs, use kermeta strategy
	 */
	operation merge(primaryMetamodels : Collection<Metamodel>, aspectMetamodels : Collection<Metamodel>) : Collection<Metamodel> is do
		
		
		var mergedMetamodels : Collection<Metamodel> init OrderedSet<Metamodel>.new
		mergedMetamodels.addAll(primaryMetamodels)
		var metamodelsToMerge : Collection<Metamodel> init OrderedSet<Metamodel>.new
		// everything should be merged in case several metamodel with the same name already exist in the primary collection
		metamodelsToMerge.addAll(aspectMetamodels)
		
		
		context := org::kermeta::ecore::binarymerger::BinaryMergerContext.new.initialize
			
		do 
			// for each metamodels to be merged, either add it into the result or merge it in the appropriate existing metamodel
			metamodelsToMerge.each{mmToMerge|
			
				var existingCorrespondingMMs : Collection<Metamodel> init mergedMetamodels.select{ alreadyMergedMM |
					mmToMerge.name == alreadyMergedMM.name
				} 
				
				if (existingCorrespondingMMs.isEmpty) then
					// simply add this mm
					mergedMetamodels.add(mmToMerge)
					// mark as moved element so its references could be fixed
					context.movedElementsNeedingReferenceFix.add(mmToMerge)
				else do
					mmToMerge.similarElementInMergedModel := existingCorrespondingMMs.one // there is normally only one CorrespondingMM  
					mmToMerge.binaryMerger_MoveToMergedModel(context)
					//context.movedElementsNeedingReferenceFix.add(mmToMerge)
					//context.elementsNeedingReferenceMerge.add(mmToMerge)
					rescue (mergeException : org::kermeta::ecore::binarymerger::BinaryMergerException)
						getErrors.add(mergeException)
					end
				end
				
			}
		
			context.elementsNeedingReferenceMerge.each{o |
				do
					o.asType(KermetaModelElement).mergeReferences(context)
				rescue (mergeException : org::kermeta::ecore::binarymerger::BinaryMergerException)
					getErrors.add(mergeException)
				end
			}
			var indirectlyMovedElements : Bag<KermetaModelElement> init Bag<KermetaModelElement>.new 
			context.movedElementsNeedingReferenceFix.each{o |
				o.asType(KermetaModelElement).fixReferences
				o.asType(KermetaModelElement).eachOwnedElement{ e |  
					if e.isInstanceOf(KermetaModelElement) then
				   		indirectlyMovedElements.add(e.asType(KermetaModelElement))
				   	end
				   	e
				}
			}
			// indirectly moved elements, will also need reference fix
			stdio.writeln("fixing references of indirectly moved elements")
			indirectlyMovedElements.each{ o |
				o.fixReferences
			}
		rescue (mergeException : org::kermeta::ecore::binarymerger::BinaryMergerException)
			getErrors.add(mergeException)
		end
		
		
		result := mergedMetamodels
	end
	
	
	/**
	 * use the default strategy merger, it meges everything, but works only on strictly identical structures 
	 * useful for merging imported projects that aren't meant to be changed
	 */
	operation genericMerge(primaryMetamodels : Collection<Metamodel>, aspectMetamodels : Collection<Metamodel>) : Collection<Metamodel> is do
		
		
		var mergedMetamodels : Collection<Metamodel> init OrderedSet<Metamodel>.new
		mergedMetamodels.addAll(primaryMetamodels)
		var metamodelsToMerge : Collection<Metamodel> init OrderedSet<Metamodel>.new
		// everything should be merged in case several metamodel with the same name already exist in the primary collection
		metamodelsToMerge.addAll(aspectMetamodels)
		
		
		context := org::kermeta::ecore::binarymerger::BinaryMergerContext.new.initialize
		context.useGenericMerge := true	
		do 
			// for each metamodels to be merged, either add it into the result or merge it in the appropriate existing metamodel
			metamodelsToMerge.each{mmToMerge|
			
				var existingCorrespondingMMs : Collection<Metamodel> init mergedMetamodels.select{ alreadyMergedMM |
					mmToMerge.name == alreadyMergedMM.name
				} 
				
				if (existingCorrespondingMMs.isEmpty) then
					// simply add this mm
					mergedMetamodels.add(mmToMerge)
					// mark as moved element so its references could be fixed
					context.movedElementsNeedingReferenceFix.add(mmToMerge)
				else do
					mmToMerge.similarElementInMergedModel := existingCorrespondingMMs.one // there is normally only one CorrespondingMM  
					mmToMerge.binaryMerger_MoveToMergedModel(context)
					//context.movedElementsNeedingReferenceFix.add(mmToMerge)
					//context.elementsNeedingReferenceMerge.add(mmToMerge)
					rescue (mergeException : org::kermeta::ecore::binarymerger::BinaryMergerException)
						getErrors.add(mergeException)
					end
				end
				
			}
		
			context.elementsNeedingReferenceMerge.each{o |
				do
					o.asType(KermetaModelElement).mergeReferences(context)
				rescue (mergeException : org::kermeta::ecore::binarymerger::BinaryMergerException)
					getErrors.add(mergeException)
				end
			}
			var indirectlyMovedElements : Bag<KermetaModelElement> init Bag<KermetaModelElement>.new 
			context.movedElementsNeedingReferenceFix.each{o |
				o.asType(KermetaModelElement).fixReferences
				o.asType(KermetaModelElement).eachOwnedElement{ e |  
					if e.isInstanceOf(KermetaModelElement) then
				   		indirectlyMovedElements.add(e.asType(KermetaModelElement))
				   	end
				   	e
				}
			}
			// indirectly moved elements, will also need reference fix
			stdio.writeln("fixing references of indirectly moved elements")
			indirectlyMovedElements.each{ o |
				o.fixReferences
			}
			
		rescue (mergeException : org::kermeta::ecore::binarymerger::BinaryMergerException)
			getErrors.add(mergeException)
		end
		
		
		result := mergedMetamodels
	end
	
	operation test_001_a() : Void is do 
		stdio.writeln("test_001()...")
		var repository : EMFRepository init EMFRepository.new
   		//repository.registerEcoreFile("platform:/resource/fr.irisa.triskell.kermeta.samples/class2RDBMS/metamodels/ClassMM.ecore")             
   		var primaryModelResource : Resource init repository.getResource("platform:/resource/org.kermeta.language.api.tests/src/main/resources/KmBinaryMerger_Valid/valid_001/primary/AB.km")
       	var aspectModelResource : Resource init repository.getResource("platform:/resource/org.kermeta.language.api.tests/src/main/resources/KmBinaryMerger_Valid/valid_001/aspect/Aatt.km")
       	
       	var pmModelingUnit : Set<Metamodel>
       	pmModelingUnit ?= primaryModelResource.contents
       	
       	var amModelingUnit : Set<Metamodel>
       	amModelingUnit ?= aspectModelResource.contents
       	
       	var mergedModelingUnit : Collection<Metamodel>
       	mergedModelingUnit := merge(pmModelingUnit, amModelingUnit)
       	
       	var mergedModelResource : Resource init repository.createResource("platform:/resource/org.kermeta.language.merger.binarymerger/target/test/output/test_001/km/001_ABatt.km",
       		"platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore")
       	primaryModelResource.remove(mergedModelingUnit)
       	mergedModelResource.add(mergedModelingUnit)
       	stdio.writeln("Saving " + mergedModelResource.uri)
       	mergedModelResource.save
		stdio.writeln("test_001_a() Done")
	end
	operation test_invalid_001() : Void is do 
		stdio.writeln("test_001()...")
		var repository : EMFRepository init EMFRepository.new
   		//repository.registerEcoreFile("platform:/resource/fr.irisa.triskell.kermeta.samples/class2RDBMS/metamodels/ClassMM.ecore")             
   		var primaryModelResource : Resource init repository.getResource("platform:/resource/org.kermeta.language.api.tests/src/main/resources/KmBinaryMerger_Invalid/invalid_001_merge_non_aspect_classes/primary/AB.km")
       	var aspectModelResource : Resource init repository.getResource("platform:/resource/org.kermeta.language.api.tests/src/main/resources/KmBinaryMerger_Invalid/invalid_001_merge_non_aspect_classes/aspect/Aatt.km")
       	
       	var pmModelingUnit : Set<Metamodel> 
       	pmModelingUnit ?= primaryModelResource.contents
       	
       	var amModelingUnit : Set<Metamodel> 
       	amModelingUnit ?= aspectModelResource.contents
       	
       	var mergedModelingUnit : Collection<Metamodel>
       	mergedModelingUnit := merge(pmModelingUnit, amModelingUnit)
       	
       	var mergedModelResource : Resource init repository.createResource("platform:/resource/org.kermeta.language.merger.binarymerger/target/test/output/invalid_001/km/001_ABatt.km",
       		"platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore")
       	primaryModelResource.remove(mergedModelingUnit)
       	mergedModelResource.add(mergedModelingUnit)
       	stdio.writeln("Saving " + mergedModelResource.uri)
       	mergedModelResource.save
		stdio.writeln("test_001_a() Done")
	end
	
}