package org;

require kermeta
require "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.ecore.binarymergergenerator/src/main/kermeta/org/kermeta/ecore/binarymerger/BinaryMergerContext.kmt"

using kermeta::language::structure
using org::kermeta::ecore::binarymerger

package kermeta {
	package language {
		package behavior {
			aspect class Assignment {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of Assignment
					var aspectElement : org::kermeta::language::behavior::Assignment
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.target.isVoid) and (not aspectElement.target.isVoid) then
							result := result and self.target.genericLocalMatch(aspectElement.target)
						end
						if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
							result := result and self.~value.genericLocalMatch(aspectElement.~value)
						end
						if (not self.isCast.isVoid) and (not aspectElement.isCast.isVoid) then
							result := result and self.isCast == aspectElement.isCast
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Expression {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of Expression
					var aspectElement : org::kermeta::language::behavior::Expression
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallExpression {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of CallExpression
					var aspectElement : org::kermeta::language::behavior::CallExpression
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Block {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of Block
					var aspectElement : org::kermeta::language::behavior::Block
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallVariable {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					// TODO deal with aspectElementObj not a strict instance of CallVariable
					var aspectElement : org::kermeta::language::behavior::CallVariable
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.isAtpre.isVoid) and (not aspectElement.isAtpre.isVoid) then
							result := result and self.isAtpre == aspectElement.isAtpre
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallFeature {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					// TODO deal with aspectElementObj not a strict instance of CallFeature
					var aspectElement : org::kermeta::language::behavior::CallFeature
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.target.isVoid) and (not aspectElement.target.isVoid) then
							result := result and self.target.genericLocalMatch(aspectElement.target)
						end
						if (not self.isAtpre.isVoid) and (not aspectElement.isAtpre.isVoid) then
							result := result and self.isAtpre == aspectElement.isAtpre
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallSuperOperation {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallOperation is do
					// TODO deal with aspectElementObj not a strict instance of CallSuperOperation
					var aspectElement : org::kermeta::language::behavior::CallSuperOperation
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallOperation is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallResult {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallVariable is do
					// TODO deal with aspectElementObj not a strict instance of CallResult
					var aspectElement : org::kermeta::language::behavior::CallResult
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallVariable is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallValue {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					// TODO deal with aspectElementObj not a strict instance of CallValue
					var aspectElement : org::kermeta::language::behavior::CallValue
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Conditional {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of Conditional
					var aspectElement : org::kermeta::language::behavior::Conditional
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.thenBody.isVoid) and (not aspectElement.thenBody.isVoid) then
							result := result and self.thenBody.genericLocalMatch(aspectElement.thenBody)
						end
						if (not self.elseBody.isVoid) and (not aspectElement.elseBody.isVoid) then
							result := result and self.elseBody.genericLocalMatch(aspectElement.elseBody)
						end
						if (not self.condition.isVoid) and (not aspectElement.condition.isVoid) then
							result := result and self.condition.genericLocalMatch(aspectElement.condition)
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Raise {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of Raise
					var aspectElement : org::kermeta::language::behavior::Raise
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.expression.isVoid) and (not aspectElement.expression.isVoid) then
							result := result and self.expression.genericLocalMatch(aspectElement.expression)
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Rescue {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of Rescue
					var aspectElement : org::kermeta::language::behavior::Rescue
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.exceptionType.isVoid) and (not aspectElement.exceptionType.isVoid) then
							result := result and self.exceptionType.genericLocalMatch(aspectElement.exceptionType)
						end
						if (not self.exceptionName.isVoid) and (not aspectElement.exceptionName.isVoid) then
							result := result and self.exceptionName == aspectElement.exceptionName
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class TypeReference {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					// TODO deal with aspectElementObj not a strict instance of TypeReference
					var aspectElement : org::kermeta::language::behavior::TypeReference
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Literal {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of Literal
					var aspectElement : org::kermeta::language::behavior::Literal
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class EmptyExpression {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of EmptyExpression
					var aspectElement : org::kermeta::language::behavior::EmptyExpression
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class JavaStaticCall {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of JavaStaticCall
					var aspectElement : org::kermeta::language::behavior::JavaStaticCall
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.jclass.isVoid) and (not aspectElement.jclass.isVoid) then
							result := result and self.jclass == aspectElement.jclass
						end
						if (not self.jmethod.isVoid) and (not aspectElement.jmethod.isVoid) then
							result := result and self.jmethod == aspectElement.jmethod
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class LambdaExpression {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of LambdaExpression
					var aspectElement : org::kermeta::language::behavior::LambdaExpression
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
							result := result and self.body.genericLocalMatch(aspectElement.body)
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class LambdaParameter {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of LambdaParameter
					var aspectElement : org::kermeta::language::behavior::LambdaParameter
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.type.isVoid) and (not aspectElement.type.isVoid) then
							result := result and self.type.genericLocalMatch(aspectElement.type)
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class IntegerLiteral {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					// TODO deal with aspectElementObj not a strict instance of IntegerLiteral
					var aspectElement : org::kermeta::language::behavior::IntegerLiteral
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
							result := result and self.~value == aspectElement.~value
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class StringLiteral {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					// TODO deal with aspectElementObj not a strict instance of StringLiteral
					var aspectElement : org::kermeta::language::behavior::StringLiteral
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
							result := result and self.~value == aspectElement.~value
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class BooleanLiteral {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					// TODO deal with aspectElementObj not a strict instance of BooleanLiteral
					var aspectElement : org::kermeta::language::behavior::BooleanLiteral
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
							result := result and self.~value == aspectElement.~value
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallTypeLiteral {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					// TODO deal with aspectElementObj not a strict instance of CallTypeLiteral
					var aspectElement : org::kermeta::language::behavior::CallTypeLiteral
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.typeref.isVoid) and (not aspectElement.typeref.isVoid) then
							result := result and self.typeref.genericLocalMatch(aspectElement.typeref)
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class VoidLiteral {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					// TODO deal with aspectElementObj not a strict instance of VoidLiteral
					var aspectElement : org::kermeta::language::behavior::VoidLiteral
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Literal is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Loop {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of Loop
					var aspectElement : org::kermeta::language::behavior::Loop
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.initialization.isVoid) and (not aspectElement.initialization.isVoid) then
							result := result and self.initialization.genericLocalMatch(aspectElement.initialization)
						end
						if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
							result := result and self.body.genericLocalMatch(aspectElement.body)
						end
						if (not self.stopCondition.isVoid) and (not aspectElement.stopCondition.isVoid) then
							result := result and self.stopCondition.genericLocalMatch(aspectElement.stopCondition)
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class SelfExpression {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of SelfExpression
					var aspectElement : org::kermeta::language::behavior::SelfExpression
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class VariableDecl {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					// TODO deal with aspectElementObj not a strict instance of VariableDecl
					var aspectElement : org::kermeta::language::behavior::VariableDecl
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.initialization.isVoid) and (not aspectElement.initialization.isVoid) then
							result := result and self.initialization.genericLocalMatch(aspectElement.initialization)
						end
						if (not self.type.isVoid) and (not aspectElement.type.isVoid) then
							result := result and self.type.genericLocalMatch(aspectElement.type)
						end
						if (not self.identifier.isVoid) and (not aspectElement.identifier.isVoid) then
							result := result and self.identifier == aspectElement.identifier
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::Expression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedCall {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::UnresolvedReference is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedCall
					var aspectElement : org::kermeta::language::behavior::UnresolvedCall
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.target.isVoid) and (not aspectElement.target.isVoid) then
							result := result and self.target.genericLocalMatch(aspectElement.target)
						end
						if (not self.isAtpre.isVoid) and (not aspectElement.isAtpre.isVoid) then
							result := result and self.isAtpre == aspectElement.isAtpre
						end
						if (not self.isCalledWithParenthesis.isVoid) and (not aspectElement.isCalledWithParenthesis.isVoid) then
							result := result and self.isCalledWithParenthesis == aspectElement.isCalledWithParenthesis
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::UnresolvedReference is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallOperation {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallFeature is do
					// TODO deal with aspectElementObj not a strict instance of CallOperation
					var aspectElement : org::kermeta::language::behavior::CallOperation
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallFeature is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallProperty {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallFeature is do
					// TODO deal with aspectElementObj not a strict instance of CallProperty
					var aspectElement : org::kermeta::language::behavior::CallProperty
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallFeature is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallEnumLiteral {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					// TODO deal with aspectElementObj not a strict instance of CallEnumLiteral
					var aspectElement : org::kermeta::language::behavior::CallEnumLiteral
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallExpression is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class CallModelTransformation {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallFeature is do
					// TODO deal with aspectElementObj not a strict instance of CallModelTransformation
					var aspectElement : org::kermeta::language::behavior::CallModelTransformation
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::behavior::CallFeature is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

		}


		package structure {


			aspect class KermetaModelElement {
				operation genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean is do
					// TODO deal with aspectElementObj not a strict instance of KermetaModelElement
					var aspectElement : org::kermeta::language::structure::KermetaModelElement
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := true
					else
						result := false
					end
				end
				operation localMatch( aspectElementObj : kermeta::standard::Object) : Boolean is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}


			aspect class Operation {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					// TODO deal with aspectElementObj not a strict instance of Operation
					var aspectElement : org::kermeta::language::structure::Operation
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
							result := result and self.body.genericLocalMatch(aspectElement.body)
						end
						if (not self.isAbstract.isVoid) and (not aspectElement.isAbstract.isVoid) then
							result := result and self.isAbstract == aspectElement.isAbstract
						end
						if (not self.uniqueName.isVoid) and (not aspectElement.uniqueName.isVoid) then
							result := result and self.uniqueName == aspectElement.uniqueName
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					//change the following line in order to customize the localMatch for this class
					//result := genericLocalMatch(aspectElementObj)
					// TODO deal with aspectElementObj not a strict instance of Operation
					/* disable merge of operation because we cannot correctly deal with its UnresolvedType
					   the operations are duplicated, and resolved after , then a fusion is applied 
					   (see bug 1962)
					var aspectElement : org::kermeta::language::structure::Operation
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						*/
						/* ignore abstract and body -> will raise an exception in case of conflict */
					    /*
						if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
							result := result and self.body == aspectElement.body
						end
						if (not self.isAbstract.isVoid) and (not aspectElement.isAbstract.isVoid) then
							result := result and self.isAbstract == aspectElement.isAbstract
						end

						if (not self.uniqueName.isVoid) and (not aspectElement.uniqueName.isVoid) then
							result := result and self.uniqueName == aspectElement.uniqueName
						end
						*/
					/*	if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else */
						result := false
					/* end */
				end
			}

			aspect class Property {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					// TODO deal with aspectElementObj not a strict instance of Property
					var aspectElement : org::kermeta::language::structure::Property
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.getterBody.isVoid) and (not aspectElement.getterBody.isVoid) then
							result := result and self.getterBody.genericLocalMatch(aspectElement.getterBody)
						end
						if (not self.setterBody.isVoid) and (not aspectElement.setterBody.isVoid) then
							result := result and self.setterBody.genericLocalMatch(aspectElement.setterBody)
						end
						if (not self.isReadOnly.isVoid) and (not aspectElement.isReadOnly.isVoid) then
							result := result and self.isReadOnly == aspectElement.isReadOnly
						end
						if (not self.default.isVoid) and (not aspectElement.default.isVoid) then
							result := result and self.default == aspectElement.default
						end
						if (not self.isComposite.isVoid) and (not aspectElement.isComposite.isVoid) then
							result := result and self.isComposite == aspectElement.isComposite
						end
						if (not self.isDerived.isVoid) and (not aspectElement.isDerived.isVoid) then
							result := result and self.isDerived == aspectElement.isDerived
						end
						if (not self.isID.isVoid) and (not aspectElement.isID.isVoid) then
							result := result and self.isID == aspectElement.isID
						end
						if (not self.isGetterAbstract.isVoid) and (not aspectElement.isGetterAbstract.isVoid) then
							result := result and self.isGetterAbstract == aspectElement.isGetterAbstract
						end
						if (not self.isSetterAbstract.isVoid) and (not aspectElement.isSetterAbstract.isVoid) then
							result := result and self.isSetterAbstract == aspectElement.isSetterAbstract
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					//change the following line in order to customize the localMatch for this class
					//result := genericLocalMatch(aspectElementObj)
					// TODO deal with aspectElementObj not a strict instance of Property
					/* disable merge of operation because we cannot correctly deal with its UnresolvedType
					   the operations are duplicated, and resolved after, then a fusion is applied 
					   (see bug 1962)
					var aspectElement : org::kermeta::language::structure::Property
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.getterBody.isVoid) and (not aspectElement.getterBody.isVoid) then
							result := result and self.getterBody == aspectElement.getterBody
						end
						if (not self.setterBody.isVoid) and (not aspectElement.setterBody.isVoid) then
							result := result and self.setterBody == aspectElement.setterBody
						end



						if (not self.isReadOnly.isVoid) and (not aspectElement.isReadOnly.isVoid) then
							result := result and self.isReadOnly == aspectElement.isReadOnly
						end

						if (not self.default.isVoid) and (not aspectElement.default.isVoid) then
							result := result and self.default == aspectElement.default
						end

						if (not self.isComposite.isVoid) and (not aspectElement.isComposite.isVoid) then
							result := result and self.isComposite == aspectElement.isComposite
						end

						if (not self.isDerived.isVoid) and (not aspectElement.isDerived.isVoid) then
							result := result and self.isDerived == aspectElement.isDerived
						end

						if (not self.isID.isVoid) and (not aspectElement.isID.isVoid) then
							result := result and self.isID == aspectElement.isID
						end

						if (not self.isGetterAbstract.isVoid) and (not aspectElement.isGetterAbstract.isVoid) then
							result := result and self.isGetterAbstract == aspectElement.isGetterAbstract
						end

						if (not self.isSetterAbstract.isVoid) and (not aspectElement.isSetterAbstract.isVoid) then
							result := result and self.isSetterAbstract == aspectElement.isSetterAbstract
						end

						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else */
						result := false
					//end
					
				end
			}

			aspect class Type {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of Type
					var aspectElement : org::kermeta::language::structure::Type
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class TypeContainer {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of TypeContainer
					var aspectElement : org::kermeta::language::structure::TypeContainer
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class EnumerationLiteral {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					// TODO deal with aspectElementObj not a strict instance of EnumerationLiteral
					var aspectElement : org::kermeta::language::structure::EnumerationLiteral
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class TypeVariableBinding {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					// TODO deal with aspectElementObj not a strict instance of TypeVariableBinding
					var aspectElement : org::kermeta::language::structure::TypeVariableBinding
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class MultiplicityElement {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypedElement is do
					// TODO deal with aspectElementObj not a strict instance of MultiplicityElement
					var aspectElement : org::kermeta::language::structure::MultiplicityElement
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.isOrdered.isVoid) and (not aspectElement.isOrdered.isVoid) then
							result := result and self.isOrdered == aspectElement.isOrdered
						end
						if (not self.isUnique.isVoid) and (not aspectElement.isUnique.isVoid) then
							result := result and self.isUnique == aspectElement.isUnique
						end
						if (not self.lower.isVoid) and (not aspectElement.lower.isVoid) then
							result := result and self.lower == aspectElement.lower
						end
						if (not self.upper.isVoid) and (not aspectElement.upper.isVoid) then
							result := result and self.upper == aspectElement.upper
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypedElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class TypeDefinition {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					// TODO deal with aspectElementObj not a strict instance of TypeDefinition
					var aspectElement : org::kermeta::language::structure::TypeDefinition
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
							result := result and self.isAspect == aspectElement.isAspect
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					//change the following line in order to customize the localMatch for this class
					//result := genericLocalMatch(aspectElementObj)
					// TODO deal with aspectElementObj not a strict instance of TypeDefinition
					var aspectElement : org::kermeta::language::structure::TypeDefinition
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						/* Ignore isAspect attribute
						if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
							result := result and self.isAspect == aspectElement.isAspect
						end
						*/
					else
						result := false
					end
				end
			}

			aspect class Class {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ParameterizedType is do
					// TODO deal with aspectElementObj not a strict instance of Class
					var aspectElement : org::kermeta::language::structure::Class
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.isAbstract.isVoid) and (not aspectElement.isAbstract.isVoid) then
							result := result and self.isAbstract == aspectElement.isAbstract
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ParameterizedType is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class DataType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					// TODO deal with aspectElementObj not a strict instance of DataType
					var aspectElement : org::kermeta::language::structure::DataType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
							result := result and self.isAspect == aspectElement.isAspect
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Enumeration {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::DataType is do
					// TODO deal with aspectElementObj not a strict instance of Enumeration
					var aspectElement : org::kermeta::language::structure::Enumeration
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
							result := result and self.isAspect == aspectElement.isAspect
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::DataType is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class NamedElement {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of NamedElement
					var aspectElement : org::kermeta::language::structure::NamedElement
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Package {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					// TODO deal with aspectElementObj not a strict instance of Package
					var aspectElement : org::kermeta::language::structure::Package
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.uri.isVoid) and (not aspectElement.uri.isVoid) then
							result := result and self.uri == aspectElement.uri
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Parameter {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					// TODO deal with aspectElementObj not a strict instance of Parameter
					var aspectElement : org::kermeta::language::structure::Parameter
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class PrimitiveType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::DataType is do
					// TODO deal with aspectElementObj not a strict instance of PrimitiveType
					var aspectElement : org::kermeta::language::structure::PrimitiveType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.isAspect.isVoid) and (not aspectElement.isAspect.isVoid) then
							result := result and self.isAspect == aspectElement.isAspect
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::DataType is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class TypedElement {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					// TODO deal with aspectElementObj not a strict instance of TypedElement
					var aspectElement : org::kermeta::language::structure::TypedElement
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}


			aspect class Tag {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of Tag
					var aspectElement : org::kermeta::language::structure::Tag
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
						if (not self.~value.isVoid) and (not aspectElement.~value.isVoid) then
							result := result and self.~value == aspectElement.~value
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class AbstractProperty {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of AbstractProperty
					var aspectElement : org::kermeta::language::structure::AbstractProperty
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Constraint {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					// TODO deal with aspectElementObj not a strict instance of Constraint
					var aspectElement : org::kermeta::language::structure::Constraint
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
							result := result and self.body.genericLocalMatch(aspectElement.body)
						end
						if (not self.stereotype.isVoid) and (not aspectElement.stereotype.isVoid) then
							result := result and self.stereotype == aspectElement.stereotype
						end
						if (not self.language.isVoid) and (not aspectElement.language.isVoid) then
							result := result and self.language == aspectElement.language
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}


			aspect class ClassDefinition {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::GenericTypeDefinition is do
					// TODO deal with aspectElementObj not a strict instance of ClassDefinition
					var aspectElement : org::kermeta::language::structure::ClassDefinition
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.isAbstract.isVoid) and (not aspectElement.isAbstract.isVoid) then
							result := result and self.isAbstract == aspectElement.isAbstract
						end
						if (not self.isSingleton.isVoid) and (not aspectElement.isSingleton.isVoid) then
							result := result and self.isSingleton == aspectElement.isSingleton
						end
						if (not self.isFinal.isVoid) and (not aspectElement.isFinal.isVoid) then
							result := result and self.isFinal == aspectElement.isFinal
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::GenericTypeDefinition is do
					//change the following line in order to customize the localMatch for this class
					//result := genericLocalMatch(aspectElementObj)
					// TODO deal with aspectElementObj not a strict instance of ClassDefinition
					var aspectElement : org::kermeta::language::structure::ClassDefinition
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then
						// only the name is part of the signature
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := self.name == aspectElement.name
						end
						
					else
						result := false
					end
				end
			}


			aspect class Metamodel {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of Metamodel
					var aspectElement : org::kermeta::language::structure::Metamodel
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.uri.isVoid) and (not aspectElement.uri.isVoid) then
							result := result and self.uri == aspectElement.uri
						end
						if (not self.isResolved.isVoid) and (not aspectElement.isResolved.isVoid) then
							result := result and self.isResolved == aspectElement.isResolved
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ModelElementTypeDefinitionContainer {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					// TODO deal with aspectElementObj not a strict instance of ModelElementTypeDefinitionContainer
					var aspectElement : org::kermeta::language::structure::ModelElementTypeDefinitionContainer
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class GenericTypeDefinition {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ModelElementTypeDefinition is do
					// TODO deal with aspectElementObj not a strict instance of GenericTypeDefinition
					var aspectElement : org::kermeta::language::structure::GenericTypeDefinition
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ModelElementTypeDefinition is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ParameterizedType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					// TODO deal with aspectElementObj not a strict instance of ParameterizedType
					var aspectElement : org::kermeta::language::structure::ParameterizedType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class TypeVariable {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					// TODO deal with aspectElementObj not a strict instance of TypeVariable
					var aspectElement : org::kermeta::language::structure::TypeVariable
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ObjectTypeVariable {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeVariable is do
					// TODO deal with aspectElementObj not a strict instance of ObjectTypeVariable
					var aspectElement : org::kermeta::language::structure::ObjectTypeVariable
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeVariable is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ModelTypeVariable {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeVariable is do
					// TODO deal with aspectElementObj not a strict instance of ModelTypeVariable
					var aspectElement : org::kermeta::language::structure::ModelTypeVariable
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeVariable is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class VirtualType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ObjectTypeVariable is do
					// TODO deal with aspectElementObj not a strict instance of VirtualType
					var aspectElement : org::kermeta::language::structure::VirtualType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ObjectTypeVariable is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Model {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of Model
					var aspectElement : org::kermeta::language::structure::Model
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class AbstractOperation {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of AbstractOperation
					var aspectElement : org::kermeta::language::structure::AbstractOperation
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedType
					var aspectElement : org::kermeta::language::structure::UnresolvedType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.typeIdentifier.isVoid) and (not aspectElement.typeIdentifier.isVoid) then
							result := result and self.typeIdentifier == aspectElement.typeIdentifier
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedReference {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedReference
					var aspectElement : org::kermeta::language::structure::UnresolvedReference
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedProperty {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AbstractProperty is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedProperty
					var aspectElement : org::kermeta::language::structure::UnresolvedProperty
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.propertyIdentifier.isVoid) and (not aspectElement.propertyIdentifier.isVoid) then
							result := result and self.propertyIdentifier == aspectElement.propertyIdentifier
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AbstractProperty is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedOperation {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AbstractOperation is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedOperation
					var aspectElement : org::kermeta::language::structure::UnresolvedOperation
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.operationIdentifier.isVoid) and (not aspectElement.operationIdentifier.isVoid) then
							result := result and self.operationIdentifier == aspectElement.operationIdentifier
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AbstractOperation is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class Using {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of Using
					var aspectElement : org::kermeta::language::structure::Using
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.fromQName.isVoid) and (not aspectElement.fromQName.isVoid) then
							result := result and self.fromQName == aspectElement.fromQName
						end
						if (not self.toName.isVoid) and (not aspectElement.toName.isVoid) then
							result := result and self.toName == aspectElement.toName
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ProductType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					// TODO deal with aspectElementObj not a strict instance of ProductType
					var aspectElement : org::kermeta::language::structure::ProductType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class FunctionType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					// TODO deal with aspectElementObj not a strict instance of FunctionType
					var aspectElement : org::kermeta::language::structure::FunctionType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeContainer is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class VoidType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					// TODO deal with aspectElementObj not a strict instance of VoidType
					var aspectElement : org::kermeta::language::structure::VoidType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedInferredType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::UnresolvedReference is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedInferredType
					var aspectElement : org::kermeta::language::structure::UnresolvedInferredType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::UnresolvedReference is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedTypeVariable {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::UnresolvedReference is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedTypeVariable
					var aspectElement : org::kermeta::language::structure::UnresolvedTypeVariable
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::UnresolvedReference is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ModelTypeDefinitionBinding {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of ModelTypeDefinitionBinding
					var aspectElement : org::kermeta::language::structure::ModelTypeDefinitionBinding
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ClassDefinitionBinding {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of ClassDefinitionBinding
					var aspectElement : org::kermeta::language::structure::ClassDefinitionBinding
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class EnumerationBinding {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of EnumerationBinding
					var aspectElement : org::kermeta::language::structure::EnumerationBinding
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class PropertyBinding {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of PropertyBinding
					var aspectElement : org::kermeta::language::structure::PropertyBinding
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class OperationBinding {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of OperationBinding
					var aspectElement : org::kermeta::language::structure::OperationBinding
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class AdaptationOperator {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					// TODO deal with aspectElementObj not a strict instance of AdaptationOperator
					var aspectElement : org::kermeta::language::structure::AdaptationOperator
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::NamedElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UseAdaptationOperator {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of UseAdaptationOperator
					var aspectElement : org::kermeta::language::structure::UseAdaptationOperator
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class PropertyAdaptationOperator {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AdaptationOperator is do
					// TODO deal with aspectElementObj not a strict instance of PropertyAdaptationOperator
					var aspectElement : org::kermeta::language::structure::PropertyAdaptationOperator
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.~getter.isVoid) and (not aspectElement.~getter.isVoid) then
							result := result and self.~getter == aspectElement.~getter
						end
						if (not self.~setter.isVoid) and (not aspectElement.~setter.isVoid) then
							result := result and self.~setter == aspectElement.~setter
						end
						if (not self.adder.isVoid) and (not aspectElement.adder.isVoid) then
							result := result and self.adder == aspectElement.adder
						end
						if (not self.remover.isVoid) and (not aspectElement.remover.isVoid) then
							result := result and self.remover == aspectElement.remover
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AdaptationOperator is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedAdaptationOperator {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AdaptationOperator is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedAdaptationOperator
					var aspectElement : org::kermeta::language::structure::UnresolvedAdaptationOperator
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AdaptationOperator is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class AdaptationParameter {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypedElement is do
					// TODO deal with aspectElementObj not a strict instance of AdaptationParameter
					var aspectElement : org::kermeta::language::structure::AdaptationParameter
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypedElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class OperationAdaptationOperator {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AdaptationOperator is do
					// TODO deal with aspectElementObj not a strict instance of OperationAdaptationOperator
					var aspectElement : org::kermeta::language::structure::OperationAdaptationOperator
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
							result := result and self.body == aspectElement.body
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::AdaptationOperator is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ModelElementTypeDefinition {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeDefinition is do
					// TODO deal with aspectElementObj not a strict instance of ModelElementTypeDefinition
					var aspectElement : org::kermeta::language::structure::ModelElementTypeDefinition
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeDefinition is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ModelType {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					// TODO deal with aspectElementObj not a strict instance of ModelType
					var aspectElement : org::kermeta::language::structure::ModelType
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::Type is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class FilteredMetamodelReference {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of FilteredMetamodelReference
					var aspectElement : org::kermeta::language::structure::FilteredMetamodelReference
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ModelTypeDefinition {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeDefinition is do
					// TODO deal with aspectElementObj not a strict instance of ModelTypeDefinition
					var aspectElement : org::kermeta::language::structure::ModelTypeDefinition
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::TypeDefinition is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ModelTransformation {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					// TODO deal with aspectElementObj not a strict instance of ModelTransformation
					var aspectElement : org::kermeta::language::structure::ModelTransformation
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.body.isVoid) and (not aspectElement.body.isVoid) then
							result := result and self.body.genericLocalMatch(aspectElement.body)
						end
						if (not self.isAbstract.isVoid) and (not aspectElement.isAbstract.isVoid) then
							result := result and self.isAbstract == aspectElement.isAbstract
						end
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::MultiplicityElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedModelTypeDefinition {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ModelTypeDefinition is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedModelTypeDefinition
					var aspectElement : org::kermeta::language::structure::UnresolvedModelTypeDefinition
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ModelTypeDefinition is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class UnresolvedModelTransformation {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ModelTransformation is do
					// TODO deal with aspectElementObj not a strict instance of UnresolvedModelTransformation
					var aspectElement : org::kermeta::language::structure::UnresolvedModelTransformation
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
						if (not self.name.isVoid) and (not aspectElement.name.isVoid) then
							result := result and self.name == aspectElement.name
						end
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::ModelTransformation is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

			aspect class ModelTypeDefinitionContainer {
				method genericLocalMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					// TODO deal with aspectElementObj not a strict instance of ModelTypeDefinitionContainer
					var aspectElement : org::kermeta::language::structure::ModelTypeDefinitionContainer
					aspectElement ?= aspectElementObj
					if not aspectElement.isVoid then

						
						result := super( aspectElement)
					else
						result := false
					end
				end
				method localMatch( aspectElementObj : kermeta::standard::Object) : Boolean from org::kermeta::language::structure::KermetaModelElement is do
					//change the following line in order to customize the localMatch for this class
					result := genericLocalMatch(aspectElementObj)
				end
			}

		}


	}


}

