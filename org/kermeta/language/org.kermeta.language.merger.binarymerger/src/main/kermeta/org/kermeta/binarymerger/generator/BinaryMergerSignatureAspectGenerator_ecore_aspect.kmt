/* $Id: ActionToPerformOnEcoreModel.kmt,v 1.1 2008-03-14 10:57:56 cfaucher Exp $
 * Creation date: March 04, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *
 */

package ecore;
 
require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "platform:/lookup/fr.irisa.triskell.kermeta.ecore/src/kermeta/ecore_behavior.kmt"
require "platform:/lookup/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"
require "platform:/lookup/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/ContainmentBasedActionPerformer_Ecore.kmt"
require "BinaryMergerSignatureAspectGenerator.kmt"

using ecore
using kermeta::language::structure
using kermeta::standard
using kermeta::utils
using EcoreHelpers
using org::kermeta::binarymerger::generator

aspect class EObject {
	operation binaryMergerSignatureAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		result := ""
	end
	
}

aspect class EPackage {
	method binaryMergerSignatureAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		var content : StringBuffer init StringBuffer.new
		if not self.container.isVoid() then 
			content.append(context.indentString)
			content.append("package " + self.name + " {")
			context.pushIndent
		end
		
		self.eachOwnedElement{ e |
			content.append(e.binaryMergerSignatureAspectKmtPrinter(context) + "\n")
		}
		
		if not self.container.isVoid() then
			context.popIndent
			content.append(context.indentString)
			content.append("}\n")
		end
		result := content.toString()
	end
	
}

aspect class EClass {
	method binaryMergerSignatureAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		var content : StringBuffer init StringBuffer.new
		content.append(context.indentString)
		content.append("aspect class " + self.name + " {")
		
		context.pushIndent
		content.append(context.indentString)
				
		
		if self.eSuperTypes.size()>0 then
			content.append("method")
		else
			content.append("operation")
		end
		
		content.append(" localMatch( aspectElementObj : kermeta::standard::Object) : Boolean")
		
		if self.eSuperTypes.size()>0 then
			 content.append(" from " + context.ecoreHelper.getClassifierQualifiedName(self.eSuperTypes.one))
		end
		
		content.append(" is do")
		context.pushIndent
		content.append(context.indentString)
		content.append("var aspectElement : " + context.ecoreHelper.getClassifierQualifiedName(self))
		content.append(context.indentString)
		content.append("aspectElement ?= aspectElementObj")
		content.append(context.indentString)
		if self.eSuperTypes.size()>0 then
			content.append(context.indentString)
			content.append("result := result and super( aspectElement)")
		else 
			content.append(context.indentString)
			content.append("result := true")
		end
		
		
								
		self.eachOwnedElement{ e |
				content.append(e.binaryMergerSignatureAspectKmtPrinter(context))
		}
					
		
		
		context.popIndent
		content.append(context.indentString)
		content.append("end")
		
		context.popIndent
		content.append(context.indentString)
		result := content.append("}").toString()
	end
	
}

aspect class EReference {
	method binaryMergerSignatureAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		var content : StringBuffer init StringBuffer.new


		
		var mangledName : String init context.ecoreHelper.getMangledIdentifier(self.name) 
		if (self.containment) then
			if self.upperBound==1 then
				content.append(context.indentString)
				content.append("result := result and self."+mangledName+" == aspectElement."+mangledName)			
			end			
		end
				

		result := content.toString()
	end
}
