

using kermeta::standard::*	// don't need to specify it all the time

class Test {

	operation test() is do
		// This is the simpliest and recommanded way of declaring a collection variable
		var myColA : Set<Integer> // this is equivalent to saying set Integer[0..*]
		var myColB : OrderedSet<Integer> // this is equivalent to saying oset Integer[0..*]
			
	
		// Collection with multiplicities
	    var myCol1 : set Integer[4..6] // At least 4 elements and never more than 6
		var myCol3 : seq String[2..*] // At least two strings in the sequence
		var myCol4 : set String[1..*] // An non empty set
		var myCol5 : String[1..*] // If you don't specify any keyword, it is an ordered set
	        
	    // Example of declaration of variables as Collections. All those syntaxes are valid
		var myCol1 : set Integer[0..*]    init kermeta::standard::Set<Integer>.new
		// Fill in myCol1
		myCol1.add(10)
		myCol1.add(50)
		
		var myCol2 : oset String[0..*]    init kermeta::standard::OrderedSet<String>.new
		var myCol3 : bag Boolean[0..*]    init kermeta::standard::Bag<Boolean>.new
		var myCol4 : seq Integer[0..*]    init kermeta::standard::Sequence<Integer>.new
		// if no keyword specified, and multiplicity is set, it is an OrderedSet
		
		var myCol4 : String[0..*] init kermeta::standard::OrderedSet<String>.new
		
		var myCol1a : seq Integer[0..*]    init myCol1
		var myCol2a : oset String[0..*]    init myCol2
		var myCol3a : kermeta::standard::Bag<Boolean> init myCol3
		var myCol3a : kermeta::standard::Sequence<Integer> init myCol4
		
	end

}