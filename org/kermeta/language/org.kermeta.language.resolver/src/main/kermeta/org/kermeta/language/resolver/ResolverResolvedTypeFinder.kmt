/* $Id:$ 
 * Creation : November 16, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */
package org::kermeta::language::resolver;

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/LanguageVisitor.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/LanguageVisitor_Aspect_Accept.kmt"
require "platform:/lookup/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/resolver/ResolverContext_Aspect.kmt"
require "ResolverException.kmt"

using org::kermeta::language::structure
using kermeta::exceptions
using language::helpers

class ResolverResolvedTypeFinder inherits LanguageVisitor
{
	method visitClassDefinition(c : ClassDefinition, ctxt : LanguageVisitorContext) is do
		var newClass : Class init Class.new
		newClass.typeDefinition := c
		
		if (ctxt.unresolved.asType(UnresolvedType).generics.size() != c.typeParameter.size()) then
			var message : String init "Resolver: Not the same number of parameters in UnresolvedType " + ctxt.unresolved.asType(UnresolvedType).typeIdentifier + "<"
			
			ctxt.unresolved.asType(UnresolvedType).generics.each{ g |
				message := message + g.toString + " "
			}
			message := message+ "> and in ClassDefinition " + c.name +"<"
			c.typeParameter.each{ tp | message := message + tp.toString + " " }
			message := message + ">"
			ctxt.errors.add(ResolverException.new.initialize(message, self))
		end
		var typeParamBinding : TypeVariableBinding
		var i : Integer init 0
		//For each UnresolvedType in generics
		ctxt.unresolved.asType(UnresolvedType).generics.each{g|g
			//Create a new TypeVariableBinding
			typeParamBinding := TypeVariableBinding.new
			//Link it with the correspondant TypeVariable of c and the UnresolvedType
			typeParamBinding.variable := c.typeParameter.at(i)
			typeParamBinding.type := g
			typeParamBinding.containedType.add(g)
			//Add the new TypeVariable to the newClass
			newClass.typeParamBinding.add(typeParamBinding)
			i := i + 1
		}
		
		ctxt.foundType := newClass
	end
	
	method visitEnumeration(e : Enumeration, ctxt : LanguageVisitorContext) is do
		ctxt.foundType := e
	end
	
	method visitModelType(m : ModelType, ctxt : LanguageVisitorContext) is do
		ctxt.foundType := m
	end
	
	method visitPrimitiveType(p : PrimitiveType, ctxt : LanguageVisitorContext) is	do
		ctxt.foundType := p
	end
	
	method visitModelingUnit(m : ModelingUnit, ctxt : LanguageVisitorContext) is do
		var typeDef : TypeDefinition init m.ownedTypeDefinition.detect{t|
			t.name.equals(ctxt.unresolvedName) and ctxt.currentIdentifierIsLast()
		}
		//If the last identifier we had is the last of the qualified path and typeDef have the same name than the UnresolvedType, we found the good TypeDefinition
		if not typeDef.isVoid then
			typeDef.accept(self, ctxt)
		//Else
		else
			//If we did not reach the end of the qualifiedPath we are looking for a package
			if not ctxt.currentIdentifierIsLast() then
				var lookingFor : String init ctxt.getCurrentIdentifier()
				var ~package : Package init m.packages.detect{p|p.name.equals(lookingFor)}
				if not ~package.isVoid() then
					~package.accept(self, ctxt)
				end
			end
		end
	end
	
	method visitPackage(p : Package, ctxt : LanguageVisitorContext) is do
		var typeDef : TypeDefinition
		//If there is no qualified path we are looking only in this package
		if ctxt.qualifiedPath.isEmpty() then
			//If p contains a TypeDefinition which name is the unresolvedName
			typeDef := p.ownedTypeDefinition.detect{t|
				t.name.equals(ctxt.unresolvedName)				
			}
			//We found the good TypeDefinition
			if not typeDef.isVoid then
				typeDef.accept(self, ctxt)
			end
		//Else we search also in the nested packages
		else
			//If the last identifier of the qualified path is the name of the UnresolvedType we are looking for and if p contains a TypeDefinition with this name
			//Case using x::x::Class
			if (ctxt.nextIdentifierIsLast()) then
				typeDef := p.ownedTypeDefinition.detect{t|
					t.name.equals(ctxt.unresolvedName) and t.name.equals(ctxt.getLastIdentifier)
				}
			//Or if the last identifier we had is the last of the qualified path and if p contains a TypeDefinition with the same name than the UnresolvedType
			//Case using x::x
			else
				typeDef := p.ownedTypeDefinition.detect{t|
					t.name.equals(ctxt.unresolvedName) and ctxt.currentIdentifierIsLast()
				}
			end
			//We found the good TypeDefinition
			if not typeDef.isVoid then
				typeDef.accept(self, ctxt)
			//Else
			else
				//If we did not reach the end of the qualifiedPath we are looking for a package
				if not ctxt.currentIdentifierIsLast() then
					var lookingFor : String init ctxt.getCurrentIdentifier()
					var ~package : Package init p.nestedPackage.detect{n|n.name.equals(lookingFor)}
					if not ~package.isVoid() then
						~package.accept(self, ctxt)
					end
				end
			end
		end
	end
}