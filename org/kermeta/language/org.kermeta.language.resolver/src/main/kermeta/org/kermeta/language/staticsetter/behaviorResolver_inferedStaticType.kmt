/* $Id:$ 
 * Creation : October 29, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            dvojtise, xdolques
 */


package org::kermeta::language;


require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/staticsetter/StaticSetter_kermeta_aspect.kmt"
require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/staticsetter/StaticSetter_typevariableResolver.kmt"
require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/structureResolver/primitiveType_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/prettyprinters/PrettyPrinter_kermeta_aspect.kmt"

using kermeta::standard

using org::kermeta::language::structure
using org::kermeta::language::behavior
using org::kermeta::language::resolver
using org::kermeta::language::staticsetter
using kermeta::utils

/*
In this file we define the method setInferedStaticType(context,aType) which will set the staticType of an expression to aType but considering the possible bindings
*/

package behavior {
	aspect class Expression inherits TypeContainer
	{
	/**
		 * add this type to the Expression as staticType, also add to its containedType if it is not already contained
		 */
		operation setInferedStaticType(context : StaticSetterContext, type : Type) : Type is do
			
			if not type.isVoid then
				self.staticType := type
				if(type.container.isVoid) then
					self.containedType.add(self.staticType)
				end
				result := self.staticType
			end
		end
		
	}
	
	aspect class CallFeature inherits CallExpression
	{
	
		/**in a CallFeature the list of bindings is obtained by getting all the bindings from the target*/
		operation findBindings(context : StaticSetterContext,type : Type, bindings : kermeta::standard::Sequence<TypeVariableBinding>) is do
			if not target.isVoid then
			
				if target.isInstanceOf(CallTypeLiteral) then					
					if target.asType(CallTypeLiteral).typeref.type.isInstanceOf(Class) then
						bindings.addAll(target.asType(CallTypeLiteral).typeref.type.asType(Class).getAllTypeVariableBindings())
					end
					if target.asType(CallTypeLiteral).typeref.type.isInstanceOf(VirtualType) then
						bindings.addAll(target.asType(CallTypeLiteral).typeref.type.asType(VirtualType).getAllTypeVariableBindings())
					end
				end
				if target.staticType.realInstanceType.isInstanceOf(Class) then
					bindings.addAll(target.staticType.realInstanceType.asType(Class).getAllTypeVariableBindings())
				end
				if target.staticType.realInstanceType.isInstanceOf(VirtualType) then
					bindings.addAll(target.staticType.realInstanceType.asType(VirtualType).getAllTypeVariableBindings())
				end
			end
			if (context.verbose) then 
				stdio.write("bindings.size : "+bindings.size.toString+" content = (")
				bindings.each{b | 
					stdio.write("["+b.type.toString+","+b.variable.prettyPrint+"], ")
				}
				stdio.writeln(") on type " +type.toString)
			end
		end
	
		/**
		 * add this type to the Expression as staticType, also add to its containedType if it is not already contained
		 */
		method setInferedStaticType(context : StaticSetterContext,type : Type) : Type from Expression is do
			if not type.isVoid then
				// make sure all parameter of this type are concrete
				var bindings : kermeta::standard::Sequence<TypeVariableBinding> init kermeta::standard::Sequence<TypeVariableBinding>.new
				findBindings(context ,type, bindings)
				self.staticType := type.resolveTypeVariables(context,bindings)
				if(self.staticType.isVoid) then
					if context.verbose then stdio.writeln("Warning static type is Void on CallFeature "+self.name + " replaced by VoidType") end					
					self.staticType := context.createTypeFromPartialName("kermeta::standard::Void")
				end
				if(self.staticType.container.isVoid) then
					
					self.containedType.add(self.staticType)
				end
				
				result := self.staticType
			else
				stdio.writeln("Warning setting void as statictype on "+ self.name)
			end
		end
	}
	
	
	aspect class CallOperation
	{
		/**in a CallFeature the list of bindings is obtained by getting all the bindings from the target (call to super) and from the staticTypeVariableBindings*/
		method findBindings(context : StaticSetterContext,type : Type, bindings : kermeta::standard::Sequence<TypeVariableBinding>) from CallFeature is do
		
			super(context ,type, bindings)
			from var i : Integer init 0
			until i==self.staticTypeVariableBindings.size loop
				
				if context.verbose then stdio.writeln("add one binding for variable: "+self.staticOperation.typeParameter.elementAt(i).name) end
				var tvb : TypeVariableBinding init TypeVariableBinding.new
				tvb.variable:=self.staticOperation.typeParameter.elementAt(i)
				tvb.type:=self.staticTypeVariableBindings.elementAt(i)
				bindings.add(tvb)
				i:=i+1
			end
			
			
		end
	
	}
	
	
	aspect class CallSuperOperation {
		/**in a CallSuperOperation the list of bindings is obtained by getting all the bindings from the target (super has no target), from the staticTypeVariableBindings (call to super) and from self */
		method findBindings(context : StaticSetterContext, type : Type, bindings : kermeta::standard::Sequence<TypeVariableBinding>) from CallOperation is do
			super(context ,type, bindings)
			bindings.addAll(getSelfType(context).getAllTypeVariableBindings())
		 end
		/** return the type of self*/
		operation getSelfType (context: StaticSetterContext) : Class is do 
			result := Class.new
			result.typeDefinition:=context.currentClassDefinition
			context.currentClassDefinition.typeParameter.each{ tv|
				var tvb : TypeVariableBinding init TypeVariableBinding.new
				tvb.variable:= tv
				tvb.type:=tv
				result.typeParamBinding.add(tvb)
			}
		end
		
	}
}

package structure {

	aspect class VirtualType
	{
	
		operation getAllTypeVariableBindings() : Sequence<TypeVariableBinding> is do
			result := Sequence<TypeVariableBinding>.new
			
			result.addAll(typeParamBinding)
			
			var localBindings : Hashtable<TypeVariable,Type> init Hashtable<TypeVariable,Type>.new
			
			result.each{ b|
				localBindings.put(b.variable, b.type)
			}
			
			//get All the inherited bindings
			var inheritedBindings : Sequence<TypeVariableBinding> init Sequence<TypeVariableBinding>.new
			typeDefinition.superType.each{ c|
				if c.isInstanceOf(Class) then
					if c.asType(Class).typeDefinition !=typeDefinition then
						inheritedBindings.addAll(c.asType(Class).getAllTypeVariableBindings())	
					end
				end
			}
			
			//replace the variables in inherited Bindings according to local bindings
			inheritedBindings.each{ b |
				if b.type.isInstanceOf(TypeVariable) then
					if localBindings.containsKey(b.type.asType(TypeVariable)) then
						var tvb : TypeVariableBinding init TypeVariableBinding.new
						tvb.variable:=b.variable
						tvb.type:=localBindings.getValue(b.type.asType(TypeVariable))
						result.add(tvb)
					end
				else
					//if the variable is binded with a formal type, then add it directly to the bindings
					var tvb : TypeVariableBinding init TypeVariableBinding.new
					tvb.variable:=b.variable
					tvb.type:=b.type
					result.add(tvb)
				end
			}
		end
	}
}