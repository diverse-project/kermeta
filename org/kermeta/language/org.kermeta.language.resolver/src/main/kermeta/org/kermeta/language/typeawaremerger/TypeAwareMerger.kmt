package org::kermeta::language::structure;
require kermeta

//require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/resolver/NewStaticResolver.kmt"
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/typeawaremerger/TypeAwareMergerContext.kmt"


using kermeta::standard
using org::kermeta::language::resolver
using kermeta::utils

/* *
 	The type aware merge will finish the process of merging after every unresolved type is resolved
 	It needs to merge operations, properties, and remove inheritance doublons
*/

aspect class KermetaModelElement{

	operation typeAwareMerge(context : TypeAwareMergerContext) is do
		self.eachOwnedElement{ e|
				if e.isInstanceOf(KermetaModelElement) then
					e.asType(KermetaModelElement).typeAwareMerge(context)
				end
			e}// must return somthing for scala compiler to work		
		
	end
}

aspect class ClassDefinition {

	method typeAwareMerge(context : TypeAwareMergerContext) is do
		cleanDoublonForInheritedClasses(context)
		addObjectInheritance(context)
		mergeOperations(context)
		mergeProperties(context)
	end

	operation mergeOperations(context : TypeAwareMergerContext) is do
		var opsToMerge : Sequence<Operation> init Sequence<Operation>.new
		opsToMerge.addAll(ownedOperation)
		ownedOperation.clear
		opsToMerge.each{op|
			var mergeable : Operation init ownedOperation.detect{ ownedOp| ownedOp.mergeableWith(op, context) }
			if not mergeable.isVoid then
				mergeable.merge(op, context)
			else
				ownedOperation.add(op)
			end
		}
	
	end
	//remove unnecessary inheritance
	//todo: when inheriting from A and B remove inheritance to B if A<B
	operation cleanDoublonForInheritedClasses(context : TypeAwareMergerContext) is do
		var classesToRemove : Sequence<Class> init Sequence<Class>.new
		var classesToKeep : Sequence<Class> init Sequence<Class>.new
		superType.each{t1|
			if t1.isInstanceOf(Class) then
				if not classesToKeep.exists{t2|t1.typeEquals(t2)} then
					classesToKeep.add(t1.asType(Class))
				else
					classesToRemove.add(t1.asType(Class))
				end
			end
			}
		classesToRemove.each{c|superType.remove(c) containedType.remove(c)}
	end
	
	/**
	 * add inheritance to kermeta::standard::Object if not already inherited (directly or indirectly)
	 */
	operation addObjectInheritance(context : TypeAwareMergerContext) is do
		if superType.size == 0 then
			if getQualifiedName != "kermeta_standard#kermeta::standard::Object" then
				var objectClass : Class init Class.new
				var cd : ClassDefinition init self.getRootContainer.asType(Metamodel).getTypeDefinitionByQualifiedName(
						"kermeta_standard#kermeta::standard::Object").asType(ClassDefinition)
				if(cd.isVoid) then
					stdio.errorln("failed to find classDefinition kermeta_standard#kermeta::standard::Object")
				end
				objectClass.initializeFromAClassDefinition(cd)
				self.containedType.add(objectClass)
				self.superType.add(objectClass)
			end
		end		
	end
	
	operation mergeProperties(context: TypeAwareMergerContext) is do
		var propsToMerge : Sequence<Property> init Sequence<Property>.new
		propsToMerge.addAll(ownedAttribute)
		ownedAttribute.clear
		propsToMerge.each{prop|
			var  mergeable : Property init ownedAttribute.detect{ ownedProp| ownedProp.mergeableWith(prop, context)}
			if not mergeable.isVoid then
				mergeable.merge(prop,context)
			else
				ownedAttribute.add(prop)
			end
		}
		// make sure to use the opposite that is the result of the merge
		ownedAttribute.each{ prop | 
			//var 
			if not prop.opposite.isVoid then
				if ( prop.opposite.isInstanceOf(Property) ) then
					if ( not (prop.opposite.asType(Property).opposite == prop) ) then
						prop.opposite.asType(Property).opposite := prop
					end
				end
			end
		}
	end

}


aspect class Property {

	operation merge(otherProperty : Property, context : TypeAwareMergerContext) is do 
		if self.getterBody.isVoid and not otherProperty.getterBody.isVoid then
			self.getterBody:=otherProperty.getterBody
		end
		if self.setterBody.isVoid and not otherProperty.setterBody.isVoid then
			self.setterBody:=otherProperty.setterBody
		end
		kOwnedTags.addAll(otherProperty.kOwnedTags)
		otherProperty.kTag.asOrderedSet().each{ t | 
			kTag.add(t) 
			t.object.remove(otherProperty)
		}
		
		if self.opposite.isVoid and not otherProperty.opposite.isVoid then
			self.opposite:=otherProperty.opposite
			if self.opposite.isInstanceOf(UnresolvedProperty) then
				self.ownedUnresolvedProperties.add(self.opposite.asType(UnresolvedProperty))
			end
		end
	end
	
	/**says if two properties are mergeable
	
	two properties are mergeable if  : 
	
x	one default is void or they are both equals
x	at least one getterBody is void
x	isComposite are equals
x	isDerived are equals
x	isGetterAbstract are equals
x	isID are equals
x	isOrdered are equals
x	isReadOnly are equals
x	isSetterAbstract are equals
x	isUnique are equals
x	lower are equals
x	name are equals
x	one opposite is void or they are both equals
x	at least one setterBody is void
x	type are equals
x	upper are equals

	*/
	operation mergeableWith(otherProperty : Property, context: TypeAwareMergerContext) : Boolean is do
		result:=(self.name==otherProperty.name)
				   .andThen{x| self.lower==otherProperty.lower}
				   .andThen{x| self.upper==otherProperty.upper}
				   .andThen{x| self.isComposite==otherProperty.isComposite}
				   .andThen{x| self.isDerived==otherProperty.isDerived}
				   .andThen{x| self.isGetterAbstract==otherProperty.isGetterAbstract}
				   .andThen{x| self.isID==otherProperty.isID}
				   .andThen{x| self.isOrdered==otherProperty.isOrdered}
				   .andThen{x| self.isReadOnly==otherProperty.isReadOnly}
				   .andThen{x| self.isSetterAbstract==otherProperty.isSetterAbstract}
				   .andThen{x| self.isUnique==otherProperty.isUnique} 
				   .andThen{x| self.type.typeEquals(otherProperty.type)} 
				   .andThen{x| self.default.isVoid
				   		.orElse{y|otherProperty.default.isVoid}
				   		.orElse{y|self.default==otherProperty.default}}
				   	.andThen{x| self.getterBody.isVoid
				   		.orElse{y|otherProperty.getterBody.isVoid}}
				   	.andThen{x| self.setterBody.isVoid
				   		.orElse{y|otherProperty.setterBody.isVoid}}
				   	.andThen{x| self.oppositeEquals(otherProperty,context)}
		
		if 	(self.name==otherProperty.name).andThen{x| not result} then
			context.errors.add(ResolverException.new.initialize("Property "+name+" declared twice with different signatures", self))
			context.errors.add(ResolverException.new.initialize("Property "+name+" declared twice with different signatures", otherProperty))
		end  		
						
	end 
	
	
	/**
		return true if the opposite properties are the same or if only one of them is defined
	*/
	operation oppositeEquals(otherProperty : Property, context : TypeAwareMergerContext) : Boolean is do
		
		if self.opposite.isVoid.orElse{x|otherProperty.opposite.isVoid} then
			result := true
		else
			if self.opposite.isInstanceOf(UnresolvedProperty).andThen{x|self.opposite.isInstanceOf(UnresolvedProperty)} then
				result:= self.opposite.asType(UnresolvedProperty).propertyIdentifier==otherProperty.opposite.asType(UnresolvedProperty).propertyIdentifier
			else
				if self.opposite.isInstanceOf(Property).andThen{x|self.opposite.isInstanceOf(Property)} then
					result := self.opposite==otherProperty.opposite
				else
					if self.opposite.isInstanceOf(Property) then
						result := self.opposite.asType(Property).name==otherProperty.opposite.asType(UnresolvedProperty).propertyIdentifier
					else
						result := self.opposite.asType(UnresolvedProperty).propertyIdentifier==otherProperty.opposite.asType(Property).name
					end
				end
			end
		end
	end




}



aspect class Operation {

	operation merge(otherOperation : Operation, context : TypeAwareMergerContext) is do
		// remove VoidLiteral from body
		if self.isBodyVoidLiteral() then
			self.body := void
		end
		if otherOperation.isBodyVoidLiteral() then
			otherOperation.body := void
		end
	
		if self.body.isVoid and not otherOperation.body.isVoid then
			otherOperation.body.rebind(self.typeParameter, otherOperation.typeParameter)
			self.body:=otherOperation.body
		end
		
		kOwnedTags.addAll(otherOperation.kOwnedTags)
		otherOperation.kTag.asOrderedSet().each{ t | 
			kTag.add(t) 
			t.object.remove(otherOperation)
		}
		
		
		otherOperation.~pre.each{c|
			c.body.rebind(self.typeParameter, otherOperation.typeParameter)}
		self.~pre.addAll(otherOperation.~pre)
		
		otherOperation.~post.each{c|
			c.body.rebind(self.typeParameter, otherOperation.typeParameter)}
		self.~post.addAll(otherOperation.~post)

	end
	
	operation isBodyVoidLiteral() : Boolean is do
		result := (not self.body.isVoid).andThen{y| self.body.isInstanceOf(org::kermeta::language::behavior::VoidLiteral)}
	end
	
	/**says if two operations are mergeable
	
	two operations are mergeable if  : 
	
	- at least one of the body is void or at least one of the body is the VoidLiteral
	- is abstract is equal
	- all the MultiplicityElement attributes are equal (isOrdered, isUnique, lower, upper)
	- name is equal
	- ownedParameter is equal in size, in names of parameters, in types of parameters (modulo the typeParameter), in order of parameters
	- owningClass is equal
	- raisedException is equal
	- superOperation is equal
	- type is equal
	*/
	operation mergeableWith(otherOperation : Operation , context : TypeAwareMergerContext) : Boolean is do
		result:=false
		/*stdio.writeln("self "+name+" to merge with "+otherOperation.name+" : "
			+(self.body.isVoid or otherOperation.body.isVoid).toString
			+(self.name == otherOperation.name).toString
			+ (self.owningClass == otherOperation.owningClass).toString
			+(self.isOrdered == otherOperation.isOrdered).toString
			+( self.isUnique == otherOperation.isUnique).toString
			+( self.lower == otherOperation.lower).toString
			+( self.upper == otherOperation.upper).toString
			+( self.ownedParameter.size == otherOperation.ownedParameter.size).toString
			
		)*/
			
		//check quick equality check
		if 	(self.name == otherOperation.name)
			.andThen{x| self.ownedParameter.size == otherOperation.ownedParameter.size} 
			.andThen{x| (self.body.isVoid or otherOperation.body.isVoid)
					  or self.isBodyVoidLiteral()	or otherOperation.isBodyVoidLiteral()
				}
			//and self.owningClass == otherOperation.owningClass 
			.andThen{x| self.isOrdered == otherOperation.isOrdered}
			.andThen{x| self.isUnique == otherOperation.isUnique}
			.andThen{x| self.lower == otherOperation.lower}
			.andThen{x| self.upper == otherOperation.upper} then
			//stdio.writeln("self "+name+" to merge with "+otherOperation.name+" : "+result.toString())
			//stdio.writeln("1")
			//check the parameters names
			var paramNamesAreEqual : Boolean init true
			from var i : Integer init 0
			until i==self.ownedParameter.size loop
				paramNamesAreEqual:= paramNamesAreEqual 
					and self.ownedParameter.elementAt(i).name == otherOperation.ownedParameter.elementAt(i).name
				i:=i+1
			end	
		
			//check type equivalence
			if	paramNamesAreEqual
				and self.typeParameter.size == otherOperation.typeParameter.size then

				//stdio.writeln("2")
				//create set of equivalent typevariables from typeParameters of the operations
				var binding : Sequence<TypeEqualityBinding> init Sequence<TypeEqualityBinding>.new
				from var i : Integer init 0
				until i==self.typeParameter.size loop
					var equivalentVars : TypeEqualityBinding init TypeEqualityBinding.new
					equivalentVars.types:=Set<TypeVariable>.new
					equivalentVars.types.add(self.typeParameter.elementAt(i))
					equivalentVars.types.add(otherOperation.typeParameter.elementAt(i))
					binding.add(equivalentVars) 
					i:=i+1
				end	
				
				//check type equivalence for parameters
				var paramTypesAreEquivalent : Boolean init true
				from var i : Integer init 0
				until i==self.ownedParameter.size loop
					if paramTypesAreEquivalent then
						paramTypesAreEquivalent := self.ownedParameter.elementAt(i).type.typeEquivalence(otherOperation.ownedParameter.elementAt(i).type, binding)
						//stdio.writeln("i"+paramTypesAreEquivalent.toString)
					end
					i:=i+1
				end	
				
				//check type equivalence for return type superOperation and Exception Type
				if paramTypesAreEquivalent then
					//stdio.writeln("3")
					
					var superOperationsAreEquivalent : Boolean 
					
					//check type equivalence for superOperation
					if not self.superOperation.isVoid and not self.superOperation.isVoid then
						superOperationsAreEquivalent:=self.superOperation.asType(UnresolvedOperation).~from.typeEquivalence(otherOperation.superOperation.asType(UnresolvedOperation).~from, binding)
					else
						superOperationsAreEquivalent:=self.superOperation.isVoid and self.superOperation.isVoid
					end
					
					
					result:= self.type.typeEquivalence(otherOperation.type, binding)
							and superOperationsAreEquivalent
							and self.raisedException.forAll{selfException|
									otherOperation.raisedException.exists{otherException| selfException.typeEquivalence(otherException, binding)}}
				end
			end	
		end
		
		if (self.name == otherOperation.name)
			.andThen{x| self.ownedParameter.size == otherOperation.ownedParameter.size}
			.andThen{x| not result} then
			context.errors.add(ResolverException.new.initialize("Operation "+name+" declared twice with different signatures", self))
			context.errors.add(ResolverException.new.initialize("Operation "+name+" declared twice with different signatures", otherOperation))
		end 
		
		//stdio.writeln("self "+name+" to merge with "+otherOperation.name+" : "+result.toString())
	end
	
	
	
}
