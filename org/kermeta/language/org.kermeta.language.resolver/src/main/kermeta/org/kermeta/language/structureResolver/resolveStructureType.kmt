package org::kermeta::language;
require kermeta

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/structureResolver/ResolverContext_Aspect.kmt"
require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/structureResolver/unresolvedType_Aspect.kmt"

using kermeta::standard
using org::kermeta::language::resolver
package structure{
	aspect class KermetaModelElement{
		
		/**
		* resolving type is done in two steps
		* 1) resolve all unresolvedtypes contained by elements, link unresolvedtypes to resolved types, remove unresolved type from container and add the resolved type
		* 2) replace the references to unresolvedtypes with references to resolved types
		*/
		operation resolveStructureType(context : LanguageVisitorContext) is do
			
			
			self.resolveStructureContainedType(context)
			
			self.resolveStructureReferencedType(context)
			
		end
		
		operation resolveStructureContainedType(context : LanguageVisitorContext) is do
			//stdio.writeln("call of resolveStructureContainedType from kme "+ self.toString)
		end
		operation resolveStructureReferencedType(context : LanguageVisitorContext) is do
			//stdio.writeln("call of resolveStructureReferencedType from kme "+ self.toString)
		end
		
		
	}
	
	
	// The 2 following classes are type containers
	
	aspect class TypeContainer inherits KermetaModelElement{
		
		method resolveStructureContainedType(context : LanguageVisitorContext) is do
			//stdio.writeln("call resolveStructureContainedType from typecontainer "+self.toString)
			var toResolve : Sequence<UnresolvedType> init Sequence<UnresolvedType>.new
			containedType.each{ t|
					if t.isInstanceOf(UnresolvedType) then
						toResolve.add(t.asType(UnresolvedType))
					end
					}
			toResolve.each{t |
					var resolvedType : Type
					resolvedType:=t.findCorrespondingType(context)
					if not resolvedType.isVoid then
						if resolvedType.container.isVoid then
							containedType.add(resolvedType)
						end
						containedType.remove(t)
					//else
					//	context.errors.add(ResolverException.new.initialize("Type "+t.name+" cannot be resolved", self))
					end
			}
		
		end
	
	}
	
	aspect class UnresolvedType inherits Type, UnresolvedReference, TypeContainer {
		
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			// must maintain order	
			from var i : Integer init 0
			until i==generics.size
			loop
				if generics.at(i).isInstanceOf(UnresolvedType) then
				
					var unresolvedType : UnresolvedType init generics.at(i).asType(UnresolvedType)
					var resolvedType : Type
					resolvedType:=unresolvedType.correspondingType
					if not resolvedType.isVoid then
						generics.addAt(i,resolvedType)
						generics.remove(unresolvedType)
					end		
					//else
					//	context.errors.add(ResolverException.new.initialize("Type "+t.name+" cannot be resolved", self))
				end			
				i:=i+1
			end
				
		end
	}
	
	
	
	aspect class MultiplicityElement inherits TypedElement{
		method resolveStructureContainedType(context : LanguageVisitorContext) from TypedElement is do
			super(context)
		end
	}
	
	
	aspect class Property inherits MultiplicityElement, AbstractProperty{
		method resolveStructureContainedType(context : LanguageVisitorContext) from MultiplicityElement is do
			super(context)
		end
	}
/* 	aspect class UnresolvedOperation inherits AbstractOperation, UnresolvedReference, TypeContainer {
		method resolveStructureContainedType(context : LanguageVisitorContext) from TypeContainer is do
			super(context)
		end
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			if not ~from.isVoid then
				if ~from.isInstanceOf(UnresolvedType) then
					if not ~from.asType(UnresolvedType).correspondingType.isVoid then
						~from:=~from.asType(UnresolvedType).correspondingType
					end
				end
			end
		end
	}*/
	
	
	
	aspect class TypeDefinition inherits NamedElement, TypeContainer{
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			var unresolvedWithCorresponding : Sequence<UnresolvedType> init Sequence<UnresolvedType>.new  
			superType.each{ t|
				if t.isInstanceOf(UnresolvedType) then
						if not t.asType(UnresolvedType).correspondingType.isVoid then
							unresolvedWithCorresponding.add(t.asType(UnresolvedType))
						end
				end
				}
			unresolvedWithCorresponding.each{t|
				// make sure to not introduce a circular inheritance (many algorithm may crash otherwise)
				var involdedTypeDefiniton : Collection<TypeDefinition> init Sequence<TypeDefinition>.new  
				//stdio.writeln("   DVK searching cyclic inheritance for " + self.name)
				t.correspondingType.getAllSuperTypes().each{typeInHierarchy |
							var searchedElement : Object 
							if typeInHierarchy.isInstanceOf(UnresolvedType) then
								searchedElement := typeInHierarchy.asType(UnresolvedType).correspondingType
							else
								searchedElement := typeInHierarchy
							end
						 	if not searchedElement.isVoid then
							 	var td : TypeDefinition init void
							 	if searchedElement.isInstanceOf(TypeDefinition) then
									td := searchedElement.asType(TypeDefinition) // maybe we are a DataType (ie. inherits from TypeDefintion directly
								end
								if td.isVoid and searchedElement.isInstanceOf(Class) then
									td := searchedElement.asType(Class).typeDefinition
								end
								if not td.isVoid then
									involdedTypeDefiniton.add(td)
								else
									//stdio.writeln("  cannot find TypeDefinition for Type "+typeInHierarchy.toString)
								end
							end
						}
				//involdedTypeDefiniton.each{td | stdio.writeln("            DVK involved resolved inheritance "+ td.toString + " ")}
				
				superType.remove(t)
				if involdedTypeDefiniton.exists{typeDefInHierarchy | typeDefInHierarchy == self } 
				then
					// error on self and all supertype definition but don't report if this is kermeta::standard::Object pointing to self
					if not (self.getQualifiedName.endsWith("#kermeta::standard::Object") and involdedTypeDefiniton.size() == 1) then
						var involvedList : kermeta::utils::StringBuffer init kermeta::utils::StringBuffer.new
						involdedTypeDefiniton.each{td | involvedList.append(td.getQualifiedName + " ")}
						involdedTypeDefiniton.each{td |
							context.errors.add(ResolverException.new.initialize("Cyclic inheritance not allowed. Involved TypeDefinitions are : " + involvedList.toString , td))
							//stdio.writeln("  Cyclic inheritance not allowed. Involved TypeDefinitions are : " + involvedList.toString) 
						}
					end
				else
					superType.add(t.correspondingType)
				end
				}
		end
	
	}
	
	
	aspect class TypeVariable inherits TypeContainer, Type, NamedElement{
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			if not supertype.isVoid then
				if supertype.isInstanceOf(UnresolvedType) then
					if not supertype.asType(UnresolvedType).correspondingType.isVoid then
						supertype:=supertype.asType(UnresolvedType).correspondingType
					end
				end
			end
		end
	}
	
	aspect class TypeVariableBinding inherits TypeContainer, KermetaModelElement {
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			if not type.isVoid then
				if type.isInstanceOf(UnresolvedType) then
					if not type.asType(UnresolvedType).correspondingType.isVoid then
						type:=type.asType(UnresolvedType).correspondingType
					end
				end
			end
		end
	}
	
	
	aspect class TypedElement inherits TypeContainer, NamedElement {
		method resolveStructureContainedType(context : LanguageVisitorContext) from TypeContainer is do
			super(context)
		end
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			if not type.isVoid then
				if type.isInstanceOf(UnresolvedType) then
					if not type.asType(UnresolvedType).correspondingType.isVoid then
						type:=type.asType(UnresolvedType).correspondingType
					else
						stdio.writeln("type "+type.asType(UnresolvedType).typeIdentifier+" has not been resolved1")						
					end
				end
			end
		end
	}
	
	
	aspect class Operation inherits MultiplicityElement, AbstractOperation {
	
		//defined to ensure that the method called is from TypeContainer and not from KermetaModelElement 
		method resolveStructureContainedType(context : LanguageVisitorContext) from MultiplicityElement is do
			super(context)
		end
		method resolveStructureReferencedType(context : LanguageVisitorContext) from TypedElement is do
			super(context)
			var unresolvedWithCorresponding : Sequence<UnresolvedType> init Sequence<UnresolvedType>.new  
			raisedException.each{ t|
				if t.isInstanceOf(UnresolvedType) then
						if not t.asType(UnresolvedType).correspondingType.isVoid then
							unresolvedWithCorresponding.add(t.asType(UnresolvedType))
						end
				end
				}
			unresolvedWithCorresponding.each{t|
				raisedException.remove(t)
				raisedException.add(t.correspondingType)
				}
			
		end
	}
	
	aspect class ProductType inherits TypeContainer, Type{
		method resolveStructureContainedType( context : LanguageVisitorContext) from TypeContainer is do
		
		super(context)
		
		end
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			
			var unresolvedWithCorresponding : Sequence<UnresolvedType> init Sequence<UnresolvedType>.new  
			type.each{ t|
				if t.isInstanceOf(UnresolvedType) then
						if not t.asType(UnresolvedType).correspondingType.isVoid then
							unresolvedWithCorresponding.add(t.asType(UnresolvedType))
						end
				end
				}
			unresolvedWithCorresponding.each{t|
				type.remove(t)
				type.add(t.correspondingType)
				}
			
		end
	}
	
	aspect class FunctionType inherits TypeContainer, Type {
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			if not left.isVoid then
				if left.isInstanceOf(UnresolvedType) then
					if not left.asType(UnresolvedType).correspondingType.isVoid then
						left:=left.asType(UnresolvedType).correspondingType
					end
				end
			end
			if not right.isVoid then
				if right.isInstanceOf(UnresolvedType) then
					if not right.asType(UnresolvedType).correspondingType.isVoid then
						right:=right.asType(UnresolvedType).correspondingType
					end
				end
			end
		end
	}
	
	aspect class PrimitiveType inherits DataType {
		method resolveStructureContainedType( context : LanguageVisitorContext) from TypeContainer is do
		
		super(context)
		
		end
		
		method resolveStructureReferencedType(context : LanguageVisitorContext) from TypeDefinition is do 
			if not instanceType.isVoid then
				if instanceType.isInstanceOf(UnresolvedType) then
					if not instanceType.asType(UnresolvedType).correspondingType.isVoid then
						instanceType:=instanceType.asType(UnresolvedType).correspondingType
					end
				end
			
			end
		end
	}

}
package behavior {
	aspect class UnresolvedCall inherits UnresolvedReference, CallExpression, TypeContainer{
	
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			// must maintain order	
			from var i : Integer init 0
			until i==generics.size
			loop
				if generics.at(i).isInstanceOf(UnresolvedType) then
				
					var unresolvedType : UnresolvedType init generics.at(i).asType(UnresolvedType)
					var resolvedType : Type
					resolvedType:=unresolvedType.correspondingType
					if not resolvedType.isVoid then
						generics.addAt(i,resolvedType)
						generics.remove(unresolvedType)
					end		
					//else
					//	context.errors.add(ResolverException.new.initialize("Type "+t.name+" cannot be resolved", self))
				end			
				i:=i+1
			end
		end
	}
	aspect class CallSuperOperation inherits CallOperation{
	
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			// must maintain order	
			from var i : Integer init 0
			until i==staticTypeVariableBindings.size
			loop
				if staticTypeVariableBindings.at(i).isInstanceOf(UnresolvedType) then
				
					var unresolvedType : UnresolvedType init staticTypeVariableBindings.at(i).asType(UnresolvedType)
					var resolvedType : Type
					resolvedType:=unresolvedType.correspondingType
					if not resolvedType.isVoid then
						staticTypeVariableBindings.addAt(i,resolvedType)
						staticTypeVariableBindings.remove(unresolvedType)
					end		
					//else
					//	context.errors.add(ResolverException.new.initialize("Type "+t.name+" cannot be resolved", self))
				end			
				i:=i+1
			end
			// deal with directed super
			if superType.isInstanceOf(UnresolvedType) then
				var resolvedType : Type
				resolvedType:=superType.asType(UnresolvedType).correspondingType
				if not resolvedType.isVoid then
					superType := resolvedType
				end
			end
		end
	}
	aspect class TypeReference inherits MultiplicityElement{
	
		method resolveStructureReferencedType(context : LanguageVisitorContext) is do
			if not type.isVoid then
				if type.isInstanceOf(UnresolvedType) then
					if not type.asType(UnresolvedType).correspondingType.isVoid then
						type:=type.asType(UnresolvedType).correspondingType
					end
				end
			end
		end
	}
	
}
