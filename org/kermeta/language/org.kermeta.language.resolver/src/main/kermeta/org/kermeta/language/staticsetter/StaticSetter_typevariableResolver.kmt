/* $Id:$ 
 * Creation : October 29, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            dvojtise, xdolques
 
 given a type with possibly some typevariable, returns a new type with no typevariable
 */


package org::kermeta::language::structure;


require kermeta
require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/resolver/NewStaticResolver.kmt"
using kermeta::standard

using org::kermeta::language::structure
using org::kermeta::language::behavior
using org::kermeta::language::resolver
using org::kermeta::language::staticsetter
using kermeta::utils
aspect class Type {

	operation resolveTypeVariables (context : StaticSetterContext, bindings : Sequence<TypeVariableBinding>):Type is do 
		result := self
	end

}


aspect class Class {

	operation getAllTypeVariableBindings() : Sequence<TypeVariableBinding> is do
		result := Sequence<TypeVariableBinding>.new
		
		result.addAll(typeParamBinding)
		
		var localBindings : Hashtable<TypeVariable,Type> init Hashtable<TypeVariable,Type>.new
		
		result.each{ b|
			localBindings.put(b.variable, b.type)	
		}
		
		//get All the inherited bindings
		var inheritedBindings : Sequence<TypeVariableBinding> init Sequence<TypeVariableBinding>.new
		typeDefinition.superType.each{ c|
			if c.realInstanceType.isInstanceOf(Class) then
				if c.realInstanceType.asType(Class).typeDefinition !=typeDefinition then
					inheritedBindings.addAll(c.realInstanceType.asType(Class).getAllTypeVariableBindings())	
				end
			end
		}
		
		//replace the variables in inherited Bindings according to local bindings
		inheritedBindings.each{ b |
			if b.type.isInstanceOf(TypeVariable) then
				if localBindings.containsKey(b.type.asType(TypeVariable)) then
					var tvb : TypeVariableBinding init TypeVariableBinding.new
					tvb.variable:=b.variable
					tvb.type:=localBindings.getValue(b.type.asType(TypeVariable))
					result.add(tvb)
				end
			else
				//if the variable is binded with a formal type, then add it directly to the bindings
				var tvb : TypeVariableBinding init TypeVariableBinding.new
				tvb.variable:=b.variable
				tvb.type:=b.type
				result.add(tvb)
			end
		}
		/* stdio.writeln("Bindings for Class")
		result.each{b |		
			stdio.writeln("["+b.variable.prettyPrint + ", "+b.type.prettyPrint +"]")
		}*/
	end
	

	method resolveTypeVariables(context : StaticSetterContext, bindings : Sequence<TypeVariableBinding>) : Type is do 
		
		var newClass : Class init Class.new
		newClass.typeDefinition:=typeDefinition
		typeParamBinding.each{b|newClass.typeParamBinding.add(b.cloner(context, bindings))}
		if not virtualTypeBinding.isEmpty then
			context.errors.add(ResolverException.new.initialize("VirtualTypeBinding not implemented.", self))
		end 
		result := newClass
	end
	

}

aspect class TypeVariableBinding {

	operation cloner(context : StaticSetterContext, bindings : Sequence<TypeVariableBinding>) : TypeVariableBinding is do
		var newBinding : TypeVariableBinding init TypeVariableBinding.new
		
		newBinding.variable:=variable
		var newt : Type init type.resolveTypeVariables(context, bindings)
		if newt.isVoid then
			stdio.writeln("ERROR : TypeVariableBinding resolved as void !")
			context.errors.add(ResolverException.new.initialize("ERROR : TypeVariableBinding resolved as void !", self))
		else
			if(newt.container.isVoid) then
				newBinding.containedType.add(newt)
			end
			newBinding.type := newt
			result := newBinding
		end
	end

}


aspect class ObjectTypeVariable{

	method resolveTypeVariables (context : StaticSetterContext, bindings : Sequence<TypeVariableBinding>) : Type is do
	
		
		var binding : TypeVariableBinding
		binding := bindings.detect{ b|
			
			b.variable==self
		}
		if binding != void then
			result:=binding.type
		else
			result:=self
			
			if context.verbose then stdio.writeln("WARNING : binding not found : "+name) end
		end
		
		
	end
}

aspect class ProductType{
		method resolveTypeVariables (context : StaticSetterContext, bindings : Sequence<TypeVariableBinding>) : Type is do
		// TODO not sure must see with lambda and generic
		result := self
	end
}
aspect class FunctionType{
		method resolveTypeVariables (context : StaticSetterContext, bindings : Sequence<TypeVariableBinding>) : Type is do
		// TODO not sure must see with lambda and generic
		result := self
	end
}

aspect class VoidType{
		method resolveTypeVariables (context : StaticSetterContext, bindings : Sequence<TypeVariableBinding>) : Type is do
	
		result := self
	end
}
aspect class VirtualType{
		method resolveTypeVariables (context : StaticSetterContext, bindings : Sequence<TypeVariableBinding>) : Type is do
		// TODO not sure must see with model type use case
		result := self
	end
}
aspect class MetamodelVariable{
		method resolveTypeVariables (context : StaticSetterContext, bindings : Sequence<TypeVariableBinding>) : Type is do
	// TODO not sure must see with model type use case
		result := self
	end
}