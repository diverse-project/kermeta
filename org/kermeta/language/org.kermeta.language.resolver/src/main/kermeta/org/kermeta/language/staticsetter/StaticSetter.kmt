/* $Id:$ 
 * Creation : December 1, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cbouhour
 */
@mainClass "org::kermeta::language::staticsetter::StaticSetter"
@mainOperation "lancement"


package org::kermeta::language::staticsetter;


require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/eachOwnedElement_kermeta_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/behavior/BehaviorVisitor.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/behavior/BehaviorVisitor_Aspect_Accept.kmt"

using kermeta::language::structure
using kmt::language::helpers::behavior
using org::kermeta::language::staticsetter
using kermeta::persistence
using kermeta::standard

class StaticSetter
{
	operation lancement() : Void is do
		var repository : EMFRepository init EMFRepository.new
		repository.registerEcoreFile("platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore")
		var unsettedModelResource : Resource init repository.getResource("platform:/resource/org.kermeta.language.resolver/src/tests/results/resultResolved.km")
		stdio.writeln("*********************Setting of : " + unsettedModelResource.uri + "*********************")
       	var unsettedModelingUnit : org::kermeta::language::structure::ModelingUnit 
       	unsettedModelingUnit ?= unsettedModelResource.one
       	stdio.writeln("*********************ModelingUnit : " + unsettedModelingUnit.namespacePrefix + "*********************")
       	  	
       	//settingModelingUnit(unsettedModelingUnit)
       	navigateInModelingUnit(unsettedModelingUnit)
 	end
	
	operation navigateInModelingUnit(aNamedElement : org::kermeta::language::structure::NamedElement) is do
		aNamedElement.eachOwnedElement(function { c : kermeta::standard::Object|
			if (c.isInstanceOf(org::kermeta::language::structure::NamedElement)) then
				navigateInModelingUnit(c.asType(org::kermeta::language::structure::NamedElement))
			end
			if (c.isInstanceOf(org::kermeta::language::behavior::Expression)) then
				navigateExpression(c.asType(org::kermeta::language::behavior::Expression))
			end
		}) 
	end
	
	operation navigateExpression(anExpression : org::kermeta::language::behavior::Expression) is do
		anExpression.eachOwnedElement(function { c : kermeta::standard::Object|
			//here the main traitment
			if (c.isInstanceOf(org::kermeta::language::behavior::Expression)) then
				navigateExpression(c.asType(org::kermeta::language::behavior::Expression))
			end
		})
	end
	
	operation searchInPackages(aPackage : org::kermeta::language::structure::Package, found : set kermeta::standard::Object[0..*]) is do
		aPackage.eachOwnedElement(function { elt : kermeta::standard::Object| 
			if (elt.isInstanceOf(org::kermeta::language::structure::Package)) then
				searchInPackages(elt.asType(org::kermeta::language::structure::Package),found)
			end
			if (elt.isInstanceOf(org::kermeta::language::structure::TypeDefinition)) then
				searchInTypeDefinition(elt.asType(org::kermeta::language::structure::TypeDefinition),found)
			end
		})	
	end
	
	operation searchInTypeDefinition(aTypeDefinition : org::kermeta::language::structure::TypeDefinition, found : set kermeta::standard::Object[0..*]) is do
		found.add(aTypeDefinition)
		aTypeDefinition.eachOwnedElement(function { elt : kermeta::standard::Object| 
			if (elt.isInstanceOf(org::kermeta::language::structure::TypeDefinition)) then
				searchInTypeDefinition(elt.asType(org::kermeta::language::structure::TypeDefinition),found)
			end
			if (elt.isInstanceOf(org::kermeta::language::structure::TypedElement)) then
				searchInTypedElement(elt.asType(org::kermeta::language::structure::TypedElement),found)
			end
		})	
	end
	
	operation searchInTypedElement(aTypedElement : org::kermeta::language::structure::TypedElement, found : set kermeta::standard::Object[0..*]) is do
		found.add(aTypedElement)
		aTypedElement.eachOwnedElement(function { elt : kermeta::standard::Object| 
			if (elt.isInstanceOf(org::kermeta::language::structure::TypedElement)) then
				searchInTypedElement(elt.asType(org::kermeta::language::structure::TypedElement),found)
			end
		})	
	end
}