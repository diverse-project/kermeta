/* $Id:$ 
 * Creation : December 11, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */
package org::kermeta::language::structure;

require kermeta
require "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/structureResolver/ResolverContext_Aspect.kmt"
require "platform:/resource/org.kermeta.language.mdk/src/kmt/language/helpers/structure/MetamodelHelper_structure_aspect.kmt"

using org::kermeta::language::resolver
using kermeta::standard

/**
 * At this point, there should be only one existing ModelTypeDefinition, which is an empty one
 */
aspect class Metamodel {
	operation fillModelTypeDefinitions(ctxt : LanguageVisitorContext) is do
		if ctxt.handlingModelTypes then
			if self.equals(ctxt.currentlyBuiltMetamodel) then
				if self.ownedModelTypeDefinitions.isEmpty() then			
					var newMTD : ModelTypeDefinition init ModelTypeDefinition.new				
					self.ownedModelTypeDefinitions.add(newMTD)
				end
				self.ownedModelTypeDefinitions.each{mtd|
					mtd.typeDefinitions.addAll(self.getAllOwnedModelElementTypeDefinitions())
					mtd.name := self.name
					
					//Weave the getContents transformation
					var t : ModelTransformation init ModelTransformation.new
					t.name := "getContents"
					var type : UnresolvedType init UnresolvedType.new
					type.typeIdentifier := "kermeta::standard::Collection"
					var paramType : UnresolvedType init UnresolvedType.new
					paramType.typeIdentifier := "kermeta::standard::Object"
					type.generics.add(paramType)
					type.containedType.add(paramType)
					var tag : Tag init Tag.new
									
					t.type := type
					t.containedType.add(type)
					
					mtd.ownedTransformations().add(t)
					t.owningModelTypeDefinition := mtd
				}
				
			end
		else
			self.ownedModelTypeDefinitions.clear
		end
	end
}