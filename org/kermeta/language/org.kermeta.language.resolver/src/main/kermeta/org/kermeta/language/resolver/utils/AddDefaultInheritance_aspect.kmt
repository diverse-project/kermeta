/* $Id:$ 
 * Creation : April 26, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */
package org::kermeta::language::structure;

require kermeta
require "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/resource/org.kermeta.language.mdk/src/kmt/language/helpers/eachOwnedElement_kermeta_aspect.kmt"
require "platform:/resource/org.kermeta.language.mdk/src/kmt/language/helpers/structure/GetQualifiedName_structure_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/standard/StringUtils.kmt"

aspect class KermetaModelElement
{
	operation addDefaultInheritance() : Void is do 
		self.eachOwnedElement{e|
			if (e.isInstanceOf(KermetaModelElement)) then
				e.asType(KermetaModelElement).addDefaultInheritance()
			end
			//K1ToScalaCompiler workaround
			e
		}
	end
}

aspect class ModelTypeDefinition
{
	method addDefaultInheritance() : Void is do
		super()
		// use qualified name kermeta::standard::Object instead of a full qualified name like kermeta_standard^kermeta::standard::Object
		// because we aren't sure that we aren't in an extends of the framework
		if self.superType.isEmpty() and (not self.getQualifiedName().endsWith("^kermeta::standard::Object")) then
			var parent : UnresolvedType init UnresolvedType.new
			parent.typeIdentifier := "kermeta::standard::Object"
			self.superType.add(parent)
			self.containedType.add(parent)
		end
	end
}

aspect class ClassDefinition
{
	method addDefaultInheritance() : Void is do
		super()
		// use qualified name kermeta::standard::Object instead of a full qualified name like kermeta_standard^kermeta::standard::Object
		// because we aren't sure that we aren't in an extends of the framework
		if self.superType.isEmpty() and not (self.getQualifiedName().endsWith("^kermeta::standard::Object")) then
			var parent : UnresolvedType init UnresolvedType.new
			parent.typeIdentifier := "kermeta::standard::Object"
			self.superType.add(parent)
			self.containedType.add(parent)
		end
	end
}