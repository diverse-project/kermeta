/* $Id:$ 
 * Creation : November 17, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */

package org::kermeta::language::structure;

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

aspect class Class {
	attribute visitedAsClass : Integer
	operation toBeVisitedAsClass(passNumber : Integer) : Boolean is do
		if visitedAsClass.isVoid() then
			visitedAsClass := 0
		end
		if visitedAsClass < passNumber then
			visitedAsClass := visitedAsClass + 1
			result := true
		else
			result := false
		end
	end
}

aspect class ClassDefinition {
	attribute visitedAsClassDefinition : Integer
	operation toBeVisitedAsClassDefinition(passNumber : Integer) : Boolean is do
		if visitedAsClassDefinition.isVoid() then
			visitedAsClassDefinition := 0
		end
		if visitedAsClassDefinition < passNumber then
			visitedAsClassDefinition := visitedAsClassDefinition + 1
			result := true
		else
			result := false
		end
	end
}

aspect class DataType {
	attribute visitedAsDataType : Integer
	operation toBeVisitedAsDataType(passNumber : Integer) : Boolean is do
		if visitedAsDataType.isVoid() then
			visitedAsDataType := 0
		end
		if visitedAsDataType < passNumber then
			visitedAsDataType := visitedAsDataType + 1
			result := true
		else
			result := false
		end
	end
}

aspect class Enumeration {
	attribute visitedAsEnumeration : Integer
	operation toBeVisitedAsEnumeration(passNumber : Integer) : Boolean is do
		if visitedAsEnumeration.isVoid() then
			visitedAsEnumeration := 0
		end
		if visitedAsEnumeration < passNumber then
			visitedAsEnumeration := visitedAsEnumeration + 1
			result := true
		else
			result := false
		end
	end
}

aspect class FunctionType {
	attribute visitedAsFunctionType : Integer
	operation toBeVisitedAsFunctionType(passNumber : Integer) : Boolean is do
		if visitedAsFunctionType.isVoid() then
			visitedAsFunctionType := 0
		end
		if visitedAsFunctionType < passNumber then
			visitedAsFunctionType := visitedAsFunctionType + 1
			result := true
		else
			result := false
		end
	end
}

aspect class GenericTypeDefinition {
	attribute visitedAsGenericTypeDefinition : Integer
	operation toBeVisitedAsGenericTypeDefinition(passNumber : Integer) : Boolean is do
		if visitedAsGenericTypeDefinition.isVoid() then
			visitedAsGenericTypeDefinition := 0
		end
		if visitedAsGenericTypeDefinition < passNumber then
			visitedAsGenericTypeDefinition := visitedAsGenericTypeDefinition + 1
			result := true
		else
			result := false
		end
	end
}

aspect class Model {
	attribute visitedAsModel : Integer
	operation toBeVisitedAsModel(passNumber : Integer) : Boolean is do
		if visitedAsModel.isVoid() then
			visitedAsModel := 0
		end
		if visitedAsModel < passNumber then
			visitedAsModel := visitedAsModel + 1
			result := true
		else
			result := false
		end
	end
}

aspect class ModelType {
	attribute visitedAsModelType : Integer
	operation toBeVisitedAsModelType(passNumber : Integer) : Boolean is do
		if visitedAsModelType.isVoid() then
			visitedAsModelType := 0
		end
		if visitedAsModelType < passNumber then
			visitedAsModelType := visitedAsModelType + 1
			result := true
		else
			result := false
		end
	end
}

aspect class ModelTypeVariable {
	attribute visitedAsModelTypeVariable : Integer
	operation toBeVisitedAsModelTypeVariable(passNumber : Integer) : Boolean is do
		if visitedAsModelTypeVariable.isVoid() then
			visitedAsModelTypeVariable := 0
		end
		if visitedAsModelTypeVariable < passNumber then
			visitedAsModelTypeVariable := visitedAsModelTypeVariable +1
			result := true
		else
			result := false
		end
	end
}	

aspect class ModelingUnit {
	attribute visitedAsModelingUnit : Integer
	operation toBeVisitedAsModelingUnit(passNumber : Integer) : Boolean is do
		if visitedAsModelingUnit.isVoid() then
			visitedAsModelingUnit := 0
		end
		if visitedAsModelingUnit < passNumber then
			visitedAsModelingUnit := visitedAsModelingUnit + 1
			result := true
		else
			result := false
		end
	end
}	

aspect class MultiplicityElement {
	attribute visitedAsMultiplicityElement : Integer
	operation toBeVisitedAsMultiplicityElement(passNumber : Integer) : Boolean is do
		if visitedAsMultiplicityElement.isVoid() then
			visitedAsMultiplicityElement := 0
		end
		if visitedAsMultiplicityElement < passNumber then
		visitedAsMultiplicityElement := visitedAsMultiplicityElement +1
			result := true
		else
			result := false
		end
	end
}	

aspect class ObjectTypeVariable {
	attribute visitedAsObjectTypeVariable : Integer
	operation toBeVisitedAsObjectTypeVariable(passNumber : Integer) : Boolean is do
		if visitedAsObjectTypeVariable.isVoid() then
			visitedAsObjectTypeVariable := 0
		end
		if visitedAsObjectTypeVariable < passNumber then
			visitedAsObjectTypeVariable:=visitedAsObjectTypeVariable+1
			result := true
		else
			result := false
		end
	end
}	

aspect class Operation {
	attribute visitedAsOperation : Integer
	operation toBeVisitedAsOperation(passNumber : Integer) : Boolean is do
		if visitedAsOperation.isVoid() then
			visitedAsOperation := 0
		end
		if visitedAsOperation < passNumber then
			visitedAsOperation:=visitedAsOperation+1
			result := true
		else
			result := false
		end
	end
}	

aspect class Package {
	attribute visitedAsPackage : Integer
	operation toBeVisitedAsPackage(passNumber : Integer) : Boolean is do
		if visitedAsPackage.isVoid() then
			visitedAsPackage := 0
		end
		if visitedAsPackage < passNumber then
			visitedAsPackage:=visitedAsPackage+1
			result := true
		else
			result := false
		end
	end
}

aspect class Parameter {
	attribute visitedAsParameter : Integer
	operation toBeVisitedAsParameter(passNumber : Integer) : Boolean is do
		if visitedAsParameter.isVoid() then
			visitedAsParameter := 0
		end
		if visitedAsParameter < passNumber then
			visitedAsParameter:=visitedAsParameter+1
			result := true
		else
			result := false
		end
	end
}	

aspect class ParameterizedType {
	attribute visitedAsParameterizedType : Integer
	operation toBeVisitedAsParameterizedType(passNumber : Integer) : Boolean is do
		if visitedAsParameterizedType.isVoid() then
			visitedAsParameterizedType := 0
		end
		if visitedAsParameterizedType < passNumber then
			visitedAsParameterizedType:=visitedAsParameterizedType+1
			result := true
		else
			result := false
		end
	end
}	

aspect class PrimitiveType {
	attribute visitedAsPrimitiveType : Integer
	operation toBeVisitedAsPrimitiveType(passNumber : Integer) : Boolean is do
		if visitedAsPrimitiveType.isVoid() then
			visitedAsPrimitiveType := 0
		end
		if visitedAsPrimitiveType < passNumber then
			visitedAsPrimitiveType:=visitedAsPrimitiveType+1
			result := true
		else
			result := false
		end
	end
}	

aspect class ProductType {
	attribute visitedAsProductType : Integer
	operation toBeVisitedAsProductType(passNumber : Integer) : Boolean is do
		if visitedAsProductType.isVoid() then
			visitedAsProductType := 0
		end
		if visitedAsProductType < passNumber then
			visitedAsProductType := visitedAsProductType+1
			result := true
		else
			result := false
		end
	end
}	

aspect class Property {
	attribute visitedAsProperty : Integer
	operation toBeVisitedAsProperty(passNumber : Integer) : Boolean is do
		if visitedAsProperty.isVoid() then
			visitedAsProperty := 0
		end
		if visitedAsProperty < passNumber then
			visitedAsProperty:=visitedAsProperty+1
			result := true
		else
			result := false
		end
	end
}	

aspect class Require {
	attribute visitedAsRequire : Integer
	operation toBeVisitedAsRequire(passNumber : Integer) : Boolean is do
		if visitedAsRequire.isVoid() then
			visitedAsRequire := 0
		end
		if visitedAsRequire < passNumber then
			visitedAsRequire:=visitedAsRequire+1
			result := true
		else
			result := false
		end
	end
}

//aspect class Resource {
//	attribute visitedAsResource : Integer
//}

//aspect class ResourceGroup {
//	attribute visitedAsResourceGroup : Integer
//}

//aspect class SimpleResource {
//	attribute visitedAsSimpleResource : Integer
//}

aspect class Tag {
	attribute visitedAsTag : Integer
	operation toBeVisitedAsTag(passNumber : Integer) : Boolean is do
		if visitedAsTag.isVoid() then
			visitedAsTag := 0
		end
		if visitedAsTag < passNumber then
			visitedAsTag:=visitedAsTag+1
			result := true
		else
			result := false
		end
	end
}

aspect class Type {
	attribute visitedAsType : Integer
	operation toBeVisitedAsType(passNumber : Integer) : Boolean is do
		if visitedAsType.isVoid() then
			visitedAsType := 0
		end
		if visitedAsType < passNumber then
			visitedAsType:=visitedAsType+1
			result := true
		else
			result := false
		end
	end
}

aspect class TypeContainer {
	attribute visitedAsTypeContainer : Integer
	operation toBeVisitedAsTypeContainer(passNumber : Integer) : Boolean is do
		if visitedAsTypeContainer.isVoid() then
			visitedAsTypeContainer := 0
		end
		if visitedAsTypeContainer < passNumber then
			visitedAsTypeContainer:=visitedAsTypeContainer+1
			result := true
		else
			result := false
		end
	end
}	

aspect class TypeDefinition {
	attribute visitedAsTypeDefinition : Integer
	operation toBeVisitedAsTypeDefinition(passNumber : Integer) : Boolean is do
		if visitedAsTypeDefinition.isVoid() then
			visitedAsTypeDefinition := 0
		end
		if visitedAsTypeDefinition < passNumber then
			visitedAsTypeDefinition:=visitedAsTypeDefinition+1
			result := true
		else
			result := false
		end
	end
}		

aspect class TypeDefinitionContainer {
	attribute visitedAsTypeDefinitionContainer : Integer
	operation toBeVisitedAsTypeDefinitionContainer(passNumber : Integer) : Boolean is do
		if visitedAsTypeDefinitionContainer.isVoid() then
			visitedAsTypeDefinitionContainer := 0
		end
		if visitedAsTypeDefinitionContainer < passNumber then
			visitedAsTypeDefinitionContainer:=visitedAsTypeDefinitionContainer+1
			result := true
		else
			result := false
		end
	end
}	

aspect class TypeMapping {
	attribute visitedAsTypeMapping : Integer
	operation toBeVisitedAsTypeMapping(passNumber : Integer) : Boolean is do
		if visitedAsTypeMapping.isVoid() then
			visitedAsTypeMapping := 0
		end
		if visitedAsTypeMapping < passNumber then
			visitedAsTypeMapping:=visitedAsTypeMapping+1
			result := true
		else
			result := false
		end
	end
}

aspect class TypeVariable {
	attribute visitedAsTypeVariable : Integer
	operation toBeVisitedAsTypeVariable(passNumber : Integer) : Boolean is do
		if visitedAsTypeVariable.isVoid() then
			visitedAsTypeVariable := 0
		end
		if visitedAsTypeVariable < passNumber then
			visitedAsTypeVariable:=visitedAsTypeVariable+1
			result := true
		else
			result := false
		end
	end
}	

aspect class TypeVariableBinding {
	attribute visitedAsTypeVariableBinding : Integer
	operation toBeVisitedAsTypeVariableBinding(passNumber : Integer) : Boolean is do
		if visitedAsTypeVariableBinding.isVoid() then
			visitedAsTypeVariableBinding := 0
		end
		if visitedAsTypeVariableBinding < passNumber then	
			visitedAsTypeVariableBinding:=visitedAsTypeVariableBinding+1
			result := true
		else
			result := false
		end
	end
}

aspect class TypedElement {
	attribute visitedAsTypedElement : Integer
	operation toBeVisitedAsTypedElement(passNumber : Integer) : Boolean is do
		if visitedAsTypedElement.isVoid() then
			visitedAsTypedElement := 0
		end
		if visitedAsTypedElement < passNumber then
			visitedAsTypedElement:=visitedAsTypedElement+1
			result := true
		else
			result := false
		end
	end
}

aspect class Using {
	attribute visitedAsUsing : Integer
	operation toBeVisitedAsUsing(passNumber : Integer) : Boolean is do
		if visitedAsUsing.isVoid() then
			visitedAsUsing := 0
		end
		if visitedAsUsing < passNumber then
			visitedAsUsing:=visitedAsUsing+1
			result := true
		else
			result := false
		end
	end
}

aspect class VirtualType {
	attribute visitedAsVirtualType : Integer
	operation toBeVisitedAsVirtualType(passNumber : Integer) : Boolean is do
		if visitedAsVirtualType.isVoid() then
			visitedAsVirtualType := 0
		end
		if visitedAsVirtualType < passNumber then
			visitedAsVirtualType:=visitedAsVirtualType+1
			result := true
		else
			result := false
		end
	end
}

aspect class VoidType {
	attribute visitedAsVoidType : Integer
	operation toBeVisitedAsVoidType(passNumber : Integer) : Boolean is do
		if visitedAsVoidType.isVoid() then
			visitedAsVoidType := 0
		end
		if visitedAsVoidType < passNumber then
			visitedAsVoidType:=visitedAsVoidType+1
			result := true
		else
			result := false
		end
	end
}