using #kermeta::standard::*
using #org::kermeta::language::structure::*
using #org::kermeta::language::behavior::*
using #kermeta::exceptions::*

package kermeta{
package exceptions{

@CompilerIgnore "true"
/** Super class of all Exceptions in Kermeta. 
 * Unlike in Kermata 1, where is was possible to"raise" any object, 
 * in Kermeta 2 only objects that inherits from this kermeta::exceptions::Exception can be used in a "raise" statement. 
 */
class Exception
{
	/**
	 * Message associated with this exception
	 */
    attribute message : String

	/**
	 * Underlying Exception if this Exception has wrapped another one.
	 */
 	attribute nestedException : Exception
 	
 	/**
 	 * StackTrace of this Exception. 
 	 */
 	attribute stackTrace : String
 
    /**
     * Initialization method used to simplify the construction of new Exception
     * ex: raise kermeta::exceptions::Exception.new.initialize("My custom exception message")
     */
    operation initialize(message: String) : Exception is do
    	result := self
    end
    
    /**
     * Fills the stack trace.
     * Called internally when appropriate.
     * Returns this exception.
     */
    operation fillInStackTrace():Exception is do
    end

    /**
	 * Returns nestedException.
     * Compatibility operation.
	 */
    operation getCause():Exception is do
    end 
    
    /**
     * Alias for getMessage.
     */
    operation getLocalizedMessage():String is do
    end 
    
    /**
     * Returns the message associated with this exception
     */
    operation getMessage():String is do
    end
    
    /**
     * Sets nestedException.
     * Compatibility operation.
     */
    operation initCause(cause:Exception):Void is do
    end
    
    /**
     *  Prints this Exception and its stacktrace to the standard output stream.
     */
    operation printStackTrace():Void is do
    end 
    
    /**
     *  Append this Exception and its stacktrace to buffer.
     */
    operation printStackTrace(buffer:StringBuffer):Void is do
    end
    
    /**
     * Sets the stackTrace.
     */
    operation setStackTrace(s:String):Void is do
    end

    /**
     * Internal operation.
     * Shouldn't be used nor overriden.
     * Use instead the attribute stackTrace.
     * Compatibility operation.
     */
    operation getStackTrace():Void is do
    end
}

@CompilerIgnore "true"
class RuntimeError inherits Exception {
	
	attribute expression : Expression
}

@CompilerIgnore "true"
class CallOnVoidTarget inherits RuntimeError {}

@CompilerIgnore "true"
class TypeCastError inherits RuntimeError {}

@CompilerIgnore "true"
class NotImplementedException inherits RuntimeError {}

@CompilerIgnore "true"
class UpperBoundReachedError inherits RuntimeError {}

@CompilerIgnore "true"
class AbstractClassInstantiationError inherits RuntimeError {}

@CompilerIgnore "true"
class IncompatibleTypeError inherits RuntimeError {}

@CompilerIgnore "true"
class DivisionByZero inherits Exception {}

@CompilerIgnore "true"
class OverflowError inherits Exception {}

@CompilerIgnore "true"
class VoidOperandError inherits Exception {}
 
@CompilerIgnore "true"
class StringIndexOutOfBound inherits Exception {}

@CompilerIgnore "true"
class StringFormatException inherits Exception {}

@CompilerIgnore "true"
class IndexOutOfBound inherits Exception {}

@CompilerIgnore "true"
class EmptyCollection inherits Exception {}

@CompilerIgnore "true"
class IteratorIsOff inherits Exception {}

@CompilerIgnore "true"
class IOException inherits Exception {}

@CompilerIgnore "true"
class FileNotFoundException inherits IOException {}

@CompilerIgnore "true"
/** Special Exception raised when a constraint has been violated.
 */
class ConstraintViolatedException inherits Exception {}

@CompilerIgnore "true"
/** Special Exception raised when a precondition has been violated.
 * This constraint is usually raised when the program is run in a mode where operation precondition check is activated 
 */
class ConstraintViolatedPre inherits ConstraintViolatedException {}

@CompilerIgnore "true"
/** Special Exception raised when a postcondition has been violated.
 * This constraint is usually raised when the program is run in a mode where operation postcondition check is activated 
 */
class ConstraintViolatedPost inherits ConstraintViolatedException {}

@CompilerIgnore "true"
/** Special Exception raised when an invariant has been violated.
 * This constraint is usually raised by one of the following : checkInvariant, checkAllInvariants 
 */
class ConstraintViolatedInv inherits ConstraintViolatedException {}

@CompilerIgnore "true"
class ResourceLoadException inherits Exception { }

@CompilerIgnore "true"
class ResourceSaveException inherits Exception {
}

@CompilerIgnore "true"
class ResourceMixedLevelsException inherits ResourceSaveException { }

@CompilerIgnore "true"
class ResourceCreateException inherits Exception { }

@CompilerIgnore "true"
class ResourceUnconformityException inherits Exception { }

@CompilerIgnore "true"
class UnregisteredMetamodelException inherits Exception { }

@CompilerIgnore "true"
class DynamicExpressionException inherits Exception { }
}}