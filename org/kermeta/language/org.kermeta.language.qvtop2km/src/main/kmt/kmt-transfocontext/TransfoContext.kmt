/* $Id:$ 
 * Creation : March 8, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            xdolques
 */



package root_package;
require kermeta
require "platform:/plugin/org.kermeta.language.mdk/src/kmt/language/extension/SingletonSupport.kmt"
require "platform:/resource/qvt-kermeta/transformation/traceability/TraceRegistry_org.kermeta.traceability.mdk.kmt"


using kermeta::standard
using kermeta::persistence
using org::kermeta::traceability
using kermeta::language::structure


class TransformationContext
{
	//attribute srcModel: Resource
	//attribute tgtModel: Resource
	attribute traceRegistry : TraceRegistry
	
	operation addTrace(source : Object, target : Object, context : Object) : Void is do
		var srcModelRef : ModelReference init ModelReference.new
		srcModelRef.refObject:=source
		var tgtModelRef : ModelReference init ModelReference.new
		tgtModelRef.refObject:=target
		traceRegistry.addTraceFromReferences(srcModelRef,tgtModelRef,context)
		
	end

	
	operation resolveAllTargets(source : Object) : Object[0..*] is do
		result:=OrderedSet<Object>.new
		var srcModelRef : ModelReference init ModelReference.new
		srcModelRef.refObject:=source
		var registrySource : ModelReference
		registrySource ?=traceRegistry.getCorrespondingReference(srcModelRef)
		result.addAll(registrySource.target.collect{trace|
								var registryTarget : ModelReference
								registryTarget ?= trace.targetElem
								registryTarget.refObject})
		end

		
	operation resolveAllSources(target : Object) : Object[0..*] is do
		result:=OrderedSet<Object>.new
		var tgtModelRef : ModelReference init ModelReference.new
		tgtModelRef.refObject:=target
		var registryTarget : ModelReference
		registryTarget ?=traceRegistry.getCorrespondingReference(tgtModelRef)
		result.addAll(registryTarget.source.collect{trace|
								var registrySource : ModelReference
								registrySource ?= trace.sourceElem
								registrySource.refObject})
		end
	
	
}

class ModelParameter {
	
	attribute modelResource : Resource
	
	reference extent : seq Object [0..*]
	
	operation save() : Void is do 
		extent.each{ x|
				if x.container == void then
					modelResource.add(x)
				end
				}
	
	end
	
	operation initialize(initRes : Resource) : Void is do
		modelResource := initRes
		extent.addAll(modelResource.contents)
	end

	operation objects() : Set<Object> is do
		result:=extent.asSet()
	end

	operation objectsOfType(type : Type) : Set<Object> is do
		result:=extent.select{x|x.isInstanceOf(type)}.asSet()
	end

}

/**Exception used to simulate a return operation*/
class ReturnException {
 	attribute returnValue : kermeta::language::structure::Object
 	attribute hasValue : kermeta::standard::Boolean
 	operation returnWithValue(retVal : kermeta::language::structure::Object) : ReturnException is do 
 		returnValue:=retVal
 		hasValue:=true
 		result:=self
 	end

}

/**Exception used to simulate a break operation*/
class BreakException {

}
/**Exception used to simulate a continue exception*/
class ContinueException {

}
/**Exception used for violation of guard condition in a mapping*/
class ViolatedGuardException {
}



