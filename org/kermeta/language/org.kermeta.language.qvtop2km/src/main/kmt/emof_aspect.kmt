package emof;
using root_package
using kermeta::standard
using kermeta::io
using org::kermeta::language

aspect class Class {
	method range2domain(context : Qvt2KermetaContext) : Void from Type  is
		do
			if output.equals(void) then
			StdIO.writeln("Class::range2domain")
				var out : org::kermeta::language::structure::ClassDefinition init org::kermeta::language::structure::ClassDefinition.new
				output := out
				out.name := name
				out.isAbstract := isAbstract
				
				//a classdef should be aspect if it is already defined in the metamodel otherwise if it's an intermediate class it is a nonaspect
				//an intermediate class is a class contained by the _INTERMEDIATE package
				if 	container.isInstanceOf(emof::Package).andThen{x|container.asType(emof::Package).name=="_INTERMEDIATE"}
				then
					out.isAspect:=false
				else
					out.isAspect:=true
				end
				StdIO.writeln("0")
				ownedAttribute.each{etubirttAdenwo | 
						if etubirttAdenwo.isInstanceOf(qvtoperational::ContextualProperty) then
							etubirttAdenwo.range2domain(context)
							var elt : org::kermeta::language::structure::Property
							elt ?= etubirttAdenwo.output
							if elt.isNotEqual(void) then
								out.ownedAttribute.add(elt)						
							end
						end
						
					}
				StdIO.writeln("1")
				superClass.each{ssalCrepus | do
						var elt : org::kermeta::language::structure::Type
						ssalCrepus.range2domain(context)
						elt := ssalCrepus.generateType(context)
						
						if elt.isNotEqual(void) then
							out.superType.add(elt)
							out.containedType.add(elt)						
						end
					end}

			StdIO.writeln("Class::range2domain-end")
			end
		end

method generateType(context : Qvt2KermetaContext) : org::kermeta::language::structure::Type from Type is do 
	//StdIO.writeln("Class::generateType")
	/*if output == void then
		range2domain(context)
	end*/
	//result:= org::kermeta::language::structure::Class.new
	//result.asType(org::kermeta::language::structure::Class).typeDefinition?=output
	result:=structure::UnresolvedType.new.initialize(getQVTID)
	//StdIO.writeln("Class::generateType-end")
end

}

aspect class Operation {

method range2domain(context : Qvt2KermetaContext) : Void from TypedElement is do
StdIO.writeln("Operation::range2domain")


end
}


aspect class Package
{
	/**
		trigger the transformation of nested packages
		and of the typedefinitions of the package
	*/
	method range2domain(context : Qvt2KermetaContext) : Void  from NamedElement is
		do
			if output.equals(void) then
				var out : org::kermeta::language::structure::Package init org::kermeta::language::structure::Package.new
				output := out
				nestedPackage.each{egakcaPdetsen | do
						var elt : org::kermeta::language::structure::Package
						egakcaPdetsen.range2domain(context)
						elt ?= egakcaPdetsen.output
						if elt.isNotEqual(void) then
							out.nestedPackage.add(elt)
						end
					end}
				out.uri := uri
				out.name := name
				ownedType.each{epyTdenwo | 
						var elt : org::kermeta::language::structure::TypeDefinition
						epyTdenwo.range2domain(context)
						elt ?= epyTdenwo.output
						if elt.isNotEqual(void) then
							//StdIO.writeln("add a type definition in package : "+elt.name)
							out.ownedTypeDefinition.add(elt)
						end
					}

			end
		end

}


aspect class PrimitiveType
{
	method range2domain(context : Qvt2KermetaContext) : Void  from DataType is do
		//StdIO.writeln("PrimitiveType::range2domain")
		//root_package::KmtLib.getDefault().asType(root_package::KmtLib).getFromQualifiedName("kermeta::standard::Boolean")
		if output==void then
			var out : structure::PrimitiveType init structure::PrimitiveType.new
			out.name:=name
			output:=out
			
			if self.name=="EString" or self.name=="String" then
						
				
				var stringClass: structure::UnresolvedType init structure::UnresolvedType.new.initialize("kermeta::standard::String")
							
				out.instanceType := stringClass
				out.containedType.add(stringClass)
				
				
			end
			if self.name=="EInt" or self.name=="Integer" or self.name=="UnlimitedNatural" then
				var integerClass: structure::UnresolvedType init structure::UnresolvedType.new.initialize("kermeta::standard::Integer")
				
				out.instanceType := integerClass
				out.containedType.add(integerClass)
			end
			if self.name=="EBoolean" or self.name=="Boolean" then
				
				
				var boolClass: structure::UnresolvedType init structure::UnresolvedType.new.initialize("kermeta::standard::Boolean")
				
				out.instanceType := boolClass
				out.containedType.add(boolClass)
			end
			if self.name=="EFloat" or self.name=="Real" then
				
				var realClass: structure::UnresolvedType init structure::UnresolvedType.new.initialize("kermeta::standard::Float")
				
				out.instanceType := realClass
				out.containedType.add(realClass)

			end
			
			if out.instanceType ==void then
				var anyClass : structure::UnresolvedType init structure::UnresolvedType.new.initialize("kermeta::standard::Object")
				
				out.instanceType := anyClass
				out.containedType.add(anyClass)
			end			
				
			
//			if out==void then
	//			StdIO.writeln("classdefinition generated from a primitive type "+name)
		//		out:=org::kermeta::language::structure::ClassDefinition.new
			//	out.name:=self.name
				//out.addDocumentationTag("generated from a primitive type")
			//end
			
		end
		//StdIO.writeln("PrimitiveType::range2domain-end")
		//root_package::KmtLib.getDefault().asType(root_package::KmtLib).getFromQualifiedName("kermeta::standard::Boolean")
		
	end

method generateType(context : Qvt2KermetaContext) :structure::Type from DataType is do 
	result:=void
	if output == void then
		range2domain(context)
	end
	//result:=output.asType(org::kermeta::language::structure::Type)
	
	if self.name=="EString" or self.name=="String" then
		result:=structure::UnresolvedType.new.initialize("kermeta::standard::String")		 
	end
	if self.name=="EInt" or self.name=="Integer" or self.name=="UnlimitedNatural" then
		result:=structure::UnresolvedType.new.initialize("kermeta::standard::Integer")
	end
	if self.name=="EBoolean" or self.name=="Boolean" then
		result:=structure::UnresolvedType.new.initialize("kermeta::standard::Boolean")
	end
	if self.name=="EFloat" or self.name=="Real" then
		result:=structure::UnresolvedType.new.initialize("kermeta::standard::Float")
	end
	
	if result.isVoid then
		result:= structure::UnresolvedType.new.initialize(self.getQVTID)
	end 
	
end
}

aspect class Property
{
	method range2domain(context : Qvt2KermetaContext) : Void from TypedElement is
		do
			if output.equals(void) then
				StdIO.writeln("Property::range2domain")
				var existing : org::kermeta::language::structure::Property
				StdIO.writeln("0")
				existing ?= context.kmtContext.getFromQualifiedName(getQVTID)
				if existing != void then
					StdIO.writeln("1")
					output:=existing
				else
					StdIO.writeln("2")
					var out : org::kermeta::language::structure::Property init org::kermeta::language::structure::Property.new
					output := out
					out.default := default
					out.isComposite := isComposite
					out.isReadOnly := isReadOnly
					out.isID := isID
					out.isDerived := isDerived
					out.name := name
					out.lower := lower
					out.upper := upper
					
					if opposite.isNotEqual(void) then
						StdIO.writeln("3")
						opposite.range2domain(context)
						out.opposite ?= opposite.output
	
					end
					if type.isNotEqual(void) then
						StdIO.writeln("4")
						out.type := type.generateType(context)
							if (out.type!=void).andThen{x| not out.type.isInstanceOf(structure::PrimitiveType)} then
								out.containedType.add(out.type)
								StdIO.writeln("emof::Property create type "+type.name)
							else
								StdIO.writeln("type not created for "+type.name+ type.isInstanceOf(emof::DataType).toString)
							end
						
					end
					StdIO.writeln("Property::range2domain-end")
				end
			end	
		end

}

aspect class Type{

	method range2domain(context : Qvt2KermetaContext) : Void from NamedElement is do 
	
	
	end
	
	operation generateType(context : Qvt2KermetaContext) : org::kermeta::language::structure::Type  is do 
		StdIO.writeln("Type generateType")
		result:=void
	end
}
