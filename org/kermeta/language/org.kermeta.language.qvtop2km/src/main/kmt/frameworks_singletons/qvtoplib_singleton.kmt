package root_package;
require kermeta
using kermeta::emfpersistence
using kermeta::io
using kermeta::standard
class QvtLib {


reference libs : Resource [0..*]

operation load(lib : Resource ) : Void is do
	libs.add(lib)
end

	/**take a qvt qualified name and look for the corresponding object in the libs*/
	operation getFromQVTID(qvtid : String) : Object is do
		
		var resourcesToSearch : Sequence<Resource> init libs.asSequence
		result:=void
		from var lib : Resource 
		until result != void or resourcesToSearch.isEmpty
		loop
			lib:=resourcesToSearch.first
			resourcesToSearch.removeAt(0)
			
			var toSearch : Sequence<Object> init Sequence<Object>.new
		
			//start looking from the root of the lib
			toSearch.add(lib.getContents().one)
			
			
			from var current : emof::Object //all the content of the libs is supposed to be of type emof::Object  
			until toSearch.empty
			loop
				current?=toSearch.first
				toSearch.removeAt(0)
				
				if current!=void then
					if current.getQVTID!="" then
						
						if (current.getQVTID==qvtid) then
							result:=current
							toSearch.clear
						else
							if (qvtid.contains(current.getQVTID)) then
								//if the current element is on the path to the searched element, prune all the other search branches
								toSearch.clear
								
								//TODO an if -else if syntax would be more readable
								if current.isInstanceOf(emof::Package) then
									current.asType(emof::Package).nestedPackage.each{p|toSearch.add(p)}
									current.asType(emof::Package).ownedType.each{t|toSearch.add(t)}
								end
								if current.isInstanceOf(emof::Class) then
									current.asType(emof::Class).ownedAttribute.each{a|toSearch.add(a)}
									current.asType(emof::Class).ownedOperation.each{o|toSearch.add(o)}
								end
								
								if current.isInstanceOf(emof::Enumeration) then
									current.asType(emof::Enumeration).ownedLiteral.each{l|toSearch.add(l)}
								end
								
								/*var cd : org::kermeta::language::structure::ClassDefinition 
								cd?= current.getMetaClass.typeDefinition
								//stdio.writeln("all attributes "+ cd.allAttribute.size.toString)
								cd.allAttribute.each{att|
									if att.isComposite then
										if att.upper==1 then
											toSearch.add(current.get(att))
										else
											current.get(att).asType(Collection<Object>).each{y|toSearch.add(y)}
										end
									end
									}*/
							end
						end
					end	
				end
			end
		end
		StdIO.writeln("getFromQVTID : "+qvtid+" "+result.toString)
	end
}

