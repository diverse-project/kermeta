

package root_package;


using kermeta::persistence
using kermeta::standard
using kermeta::io
using kermeta::emfpersistence
using kermeta::exceptions
using kermeta::utils
using org::kermeta::language

class Qvt2KermetaContext {
	/**used to create a different id for generated names, must be incremented every time (maybe an operation could do it)*/
	reference generatedID : Integer
	
	reference frameworkOperationMap : Hashtable<String,String>

	reference qvtContext : QvtLib
	
	reference kmtContext : KmtLib
	
	reference tuplePool : TuplePool
	reference rootMU : org::kermeta::language::structure::ModelingUnit
	
	reference transfoContextCD : org::kermeta::language::structure::ClassDefinition

	operation initialize() : Qvt2KermetaContext is do
		generatedID:=0
		qvtContext:=QvtLib.new
		kmtContext:=KmtLib.new
		tuplePool:= TuplePool.new
		result:=self
	
	end

	
}

/**main class of the transformation*/
class Qvt2Kermeta{

reference srcModel : Resource
reference tgtModel : Resource

	operation main() : Void is do
		
		
		var context : Qvt2KermetaContext init Qvt2KermetaContext.new.initialize()
		
		//getMetaClass.typeDefinition.asType(org::kermeta::language::structure::ClassDefinition).defaultObject:=self
		
		StdIO.writeln("qvt->kermeta")
		
		/* load the qvt model*/
		var sourceRepository     : ResourceSet init ResourceSet.new
		
		//srcModel := sourceRepository.createResource("platform:/resource/org.kermeta.language.qvtop2km/tests/transfo-qvt/book2pub1/Book2Publication.qvtoperational", "platform:/resource/org.kermeta.language.qvtop2km/ecore/QVTOperational.ecore")
		//srcModel := sourceRepository.createResource("platform:/resource/org.kermeta.language.qvtop2km/tests/transfo-qvt/book2pub2/Book2Publication2.qvtoperational", "platform:/resource/org.kermeta.language.qvtop2km/ecore/QVTOperational.ecore")
		//srcModel := sourceRepository.createResource("platform:/resource/org.kermeta.language.qvtop2km/tests/transfo-qvt/ecore2emof/Ecore2EMOF.qvtoperational", "platform:/resource/org.kermeta.language.qvtop2km/ecore/QVTOperational.ecore")
		//srcModel := sourceRepository.createResource("platform:/resource/org.kermeta.language.qvtop2km/tests/transfo-qvt/sam2samdynamic/org.topcased.simulation.sam.control.sam2samdynamic.qvtoperational", "platform:/resource/org.kermeta.language.qvtop2km/ecore/QVTOperational.ecore")
		srcModel := sourceRepository.createResource("platform:/resource/org.kermeta.language.qvtop2km/tests/transfo-qvt/initmodel/org.topcased.simulation.sam.qvtsemantics.initmodel.qvtoperational", "platform:/resource/org.kermeta.language.qvtop2km/ecore/QVTOperational.ecore")
		
		srcModel.load(void)
		sourceRepository.resolveAllProxies()
		sourceRepository.getResources().each{r|StdIO.writeln(r.asType(Resource).getURI().toString())}
		
		/*link the resources of the default libraries from qvt to the context of the transformation*/
		context.qvtContext.load(sourceRepository.getResource("platform:/plugin/fr.tm.elibel.smartqvt.qvt/models/essentialocl/oclstdlib.essentialocl",true))
		context.qvtContext.load(sourceRepository.getResource("platform:/plugin/fr.tm.elibel.smartqvt.qvt/model/PrimitiveTypes.emof",true))
		context.qvtContext.load(sourceRepository.getResource("platform:/plugin/fr.tm.elibel.smartqvt.qvt/models/qvtoperational/qvtstdlib.qvtoperational",true))
		context.qvtContext.load(sourceRepository.getResource("platform:/plugin/fr.tm.elibel.smartqvt.external/ecore/ecore.emof",true))
		
		/*create the resource for the target created kermeta model*/
		var targetRepository : ResourceSet init ResourceSet.new
        //tgtModel := targetRepository.createResource("../test/Book2Publication.km" , "http://www.kermeta.org/kermeta/1_2_0//kermeta")
        //tgtModel := targetRepository.createResource("../test/Ecore2EMOF.km" , "http://www.kermeta.org/kermeta/1_2_0//kermeta")
		//tgtModel := targetRepository.createResource("../test/UML2RDBMS.km" , "http://www.kermeta.org/kermeta/1_2_0//kermeta")
		//tgtModel := targetRepository.createResource("platform:/resource/QVTtest/src/main/kmt/ecore2emof.km" , "http://www.kermeta.org/kermeta/2_0_0/")
		//tgtModel := targetRepository.createResource("platform:/resource/QVTtest/src/main/kmt/sam2samdyn.km" , "http://www.kermeta.org/kermeta/2_0_0/")
		tgtModel := targetRepository.createResource("platform:/resource/QVTtest/src/main/kmt/initmodel.km" , "http://www.kermeta.org/kermeta/2_0_0/")

		/*initialize the known mappings between default operations in qvt and their counterpart in kermeta*/
		mapFrameworks(context)
		
		/*start the transformation*/
		transform(context)
		
		/*save the result*/
		tgtModel.save(void)
		StdIO.writeln("done")
	end




operation transform(context : Qvt2KermetaContext) : Void is do
	//declare the final modeling unit
	var kRoot : org::kermeta::language::structure::ModelingUnit
	
	var opTransfo : qvtoperational::OperationalTransformation
	srcModel.getContents().select{x|x.isInstanceOf(qvtoperational::ModelType)}.each{x|StdIO.writeln(x.getMetaClass.typeDefinition.name) x.asType(emof::Object).range2domain(context) tgtModel.getContents().add(x.asType(emof::Object).output)}
	opTransfo?= srcModel.getContents().detect{x|x.isInstanceOf(qvtoperational::OperationalTransformation)}
	opTransfo.range2domain(context)
	kRoot?=opTransfo.output
	context.rootMU :=kRoot
	//generate all class definitions involved in the transfo
	opTransfo.genClassDefinitions(context)
	//transform all mappings
	opTransfo.ownedOperation.each{op| if (op!=void).andThen{x|op.isInstanceOf(qvtoperational::MappingOperation)} then op.range2domain(context) end }
	//transform all helpers
	opTransfo.ownedOperation.each{op| if (op!=void).andThen{x|op.isInstanceOf(qvtoperational::Helper)} then op.range2domain(context) end }
	//transform all EntryOperation (usually only one)
	opTransfo.ownedOperation.each{op| if (op!=void).andThen{x|op.isInstanceOf(qvtoperational::EntryOperation)} then op.range2domain(context) end }
	
	//generate the default primitive types
	var ptPack : org::kermeta::language::structure::Package 
	var emofPtPack : emof::Package
	emofPtPack?=context.qvtContext.getFromQVTID("primitivetypes")
	emofPtPack.range2domain(context)
	ptPack ?=emofPtPack.output
	StdIO.writeln("ptPack "+ptPack.ownedTypeDefinition.size.toString())
	ptPack.ownedTypeDefinition.each{x|StdIO.write(x.name+" "+x.toString+" ")}
	StdIO.writeln("")
	kRoot.packages.add(ptPack)
	
	//transform the package ecore from platform:/plugin/fr.tm.elibel.smartqvt.external/ecore/ecore.emof
	var ecorePack : emof::Package init context.qvtContext.getFromQVTID("ecore").asType(emof::Package)
	ecorePack.range2domain(context)
	kRoot.packages.add(ecorePack.output.asType(org::kermeta::language::structure::Package))
	tgtModel.getContents().add(kRoot)
	
	mergeMU(tgtModel)
	
	removeEmptyClasses(tgtModel)
end

/**empty classes have to be removed as they are badly supported*/
operation removeEmptyClasses(r : Resource) : Void is do
	var mu : structure::ModelingUnit 
	mu?=r.getContents.one
	if mu!=void then
		mu.packages.each{p|p.removeEmptyClasses}
	
	end

end

/**many ModelingUnit may be created in the process, merge them into one unique ModelingUnit*/
operation mergeMU(r : Resource) : Void is do
	var uniqueRoot: org::kermeta::language::structure::ModelingUnit init org::kermeta::language::structure::ModelingUnit.new
	
	tgtModel.getContents().each{x| 
		if x.isInstanceOf(org::kermeta::language::structure::ModelingUnit) 
		then 
			uniqueRoot.packages.addAll(x.asType(org::kermeta::language::structure::ModelingUnit).packages)
			uniqueRoot.requires.addAll(x.asType(org::kermeta::language::structure::ModelingUnit).requires)
		end }
	
	tgtModel.getContents().clear
	tgtModel.getContents().add(uniqueRoot)
	
	
end


/** initialize a map table for all the operations that have exactly the same semantics in QVTOp/OCL and kermeta*/
operation mapFrameworks(context : Qvt2KermetaContext) : Void is do 

	context.frameworkOperationMap := Hashtable<String,String>.new
	
	context.frameworkOperationMap.put("OclLib::String::concat","plus")
	
	context.frameworkOperationMap.put("OclLib::OclAny::=","equals")
	context.frameworkOperationMap.put("OclLib::OclObject::=","equals")
	context.frameworkOperationMap.put("OclLib::OclAny::oclIsKindOf","isInstanceOf")
	context.frameworkOperationMap.put("::QvtLib::OclElement::isKindOf","isInstanceOf" )
	context.frameworkOperationMap.put("::QvtLib::OclElement::asType","asType")
	context.frameworkOperationMap.put("OclLib::OclElement::=","equals")
	
	context.frameworkOperationMap.put("OclLib::Collection::isEmpty","isEmpty")
	context.frameworkOperationMap.put("OclLib::Sequence::asOrderedSet","asOrderedSet")
	context.frameworkOperationMap.put("OclLib::Sequence::first","first")
	context.frameworkOperationMap.put("OclLib::Boolean::and","and")
	context.frameworkOperationMap.put("OclLib::Boolean::not","not")
end


}
/**Exception to be launched if an element of the QVT language known to be not-implemented is encountered*/
class QvtNotImplementedException inherits kermeta::exceptions::Exception {

attribute notImplementedPart : String


	operation initialize(missingPart : String) : QvtNotImplementedException is do
		message:=missingPart + " not yet implemented, wait for the final version."
		result:=self
	end

}

