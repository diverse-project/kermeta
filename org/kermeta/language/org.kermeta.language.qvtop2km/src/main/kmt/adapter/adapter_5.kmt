package essentialocl;
using kermeta::standard
using root_package
aspect class IfExp
{
	method range2domain(context : Qvt2KermetaContext) : Void  is
		do
			if output.equals(void) then
				var out : org::kermeta::language::behavior::Conditional init org::kermeta::language::behavior::Conditional.new
				output := out
				if condition.isNotEqual(void) then
					condition.range2domain(context)
					out.condition ?= condition.output

				end
				if thenExpression.isNotEqual(void) then
					thenExpression.range2domain(context)
					out.thenBody ?= thenExpression.output

				end
				if elseExpression.isNotEqual(void) then
					elseExpression.range2domain(context)
					out.elseBody ?= elseExpression.output

				end

			end
		end

}
aspect class StringLiteralExp
{
	method range2domain(context : Qvt2KermetaContext) : Void  is
		do
			if output.equals(void) then
				var out : org::kermeta::language::behavior::StringLiteral init org::kermeta::language::behavior::StringLiteral.new
				output := out
				out.~value := stringSymbol

			end
		end

}
aspect class BooleanLiteralExp
{
	method range2domain(context : Qvt2KermetaContext) : Void  is
		do
			if output.equals(void) then
				var out : org::kermeta::language::behavior::BooleanLiteral init org::kermeta::language::behavior::BooleanLiteral.new
				output := out
				out.~value := booleanSymbol

			end
		end

}
aspect class IntegerLiteralExp
{
	method range2domain(context : Qvt2KermetaContext) : Void  is
		do
			if output.equals(void) then
				var out : org::kermeta::language::behavior::IntegerLiteral init org::kermeta::language::behavior::IntegerLiteral.new
				output := out
				out.~value := integerSymbol

			end
		end

}
aspect class NullLiteralExp
{
	method range2domain(context : Qvt2KermetaContext) : Void  is
		do
			if output.equals(void) then
				var out : org::kermeta::language::behavior::VoidLiteral init org::kermeta::language::behavior::VoidLiteral.new
				output := out

			end
		end

}
