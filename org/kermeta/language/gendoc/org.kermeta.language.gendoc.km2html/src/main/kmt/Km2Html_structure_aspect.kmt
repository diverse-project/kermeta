using kermeta::standard
using kermeta
using kermeta::io::StdIO => stdio
using org::kermeta::language::structure
using org::kermeta::language::behavior
using kermeta::io
using kermeta::utils::FileIO
using kermeta
using kermeta::standard
using kermeta::standard::String
using org::kermeta::language::structure
using kermeta::emfpersistence
using kermeta::standard
using kermeta::utils
using kermeta::io 
	  
  

package org::kermeta::language::structure{



aspect class ModelingUnit {
	//attribute defaultPath : String init "file:/C:/CodeCamp/Workspace/KermetaDoc/target/beforeCheckingforScopeMERGED.km"
	operation generateHtml( baseFolder : String) : Void is do
		stdio.writeln ("Html file generated Modeling Unit")
		stdio.writeln ("sfs" + self.name)
		var path : String init baseFolder + "/" + self.name + ".html"
		var contents : String init self.createHtml (baseFolder)
		   
		//create Toc page for ModelingUnit page
		self.createTocpage(baseFolder)
		// Create html file
		FileIO.writeTextFile(path.toURI(), contents)
		
	end 
	
	/** Create an html page for Modeling unit */
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new
		html.append("<HTML>" + "<HEAD>"+ "<TITLE>" + self.name +"</TITLE>")
		html.append("</HEAD>")
		html.append("<frameset cols=20%,80%>")
		html.append("<frame src=allclasses-frame.html name= TOC target = Content scrolling=yes>")
		html.append("<frame src=contents.html name= Content scrolling=yes>")
		html.append("</frameset>")
		html.append("</html>")
				
		result := html.toString
	end
	
	
	/**create Toc page for the ModelingUnit page*/
	operation createTocpage(baseFolder:String) : Void is do
		var path : String init baseFolder + "/" + "allclasses-frame.html"
		var contents : StringBuffer init StringBuffer.new
		contents.append("<h3>All Classes </h3>")
		var html : StringBuffer init StringBuffer.new
		contents.append("<html>" + "<body>")
		//create links list of the packages, should add calls to the operations for creating the pages for packages
		packages.each{pack | html.append(pack.createClassesHtml(baseFolder))}
				
		//set package list of the Toc page
		if html.toString != "" then
			contents.append(html.toString)
		end
				
		FileIO.writeTextFile(path.toURI, contents.toString)
	end
}

aspect class TypeDefinition {
	
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		result := ""
		end
	/** Create classes html code */
	operation createClassesHtml (baseFolder:String) : String is do
		result:=""
	end
	/** generate html for contents page */
	operation generateClassesHtml (baseFolder:String, packageName:String) : String is do
		
	end
}


aspect class ClassDefinition{
	/** Create html code */
	operation createClassesHtml (baseFolder:String) : String is do
			var html : String init String.new	
			html := html + " <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>"
			result := html
    end
    
    /** generate html for contents page */
	operation generateClassesHtml (baseFolder:String, packageName : String) : String is do
	
	var path : String init baseFolder + "/" + self.name + ".html"
	var contents : StringBuffer init StringBuffer.new
	contents.append("<html><head><title>" + self.name + "</title></head>\n")
	contents.append("<body BGCOLOR = white>")
		
	
	
	//Start of class data
	contents.append("<H2>\n")
	contents.append("<FONT SIZE=-1>\n")
	contents.append(packageName + "</FONT>\n")
	contents.append("<BR>\n")
	contents.append("Class ")
	if isAbstract == true then
		contents.append("Abstract ")
	end
	if isSingleton == true then
		contents.append("Singleton ")
	end
	contents.append(self.name + "</H2>\n")
	contents.append("<HR>\n")
	
	//specification of classes, get tag properties
	self.kTag.each{tag | 
		if tag.name == "documentation" then
			contents.append(tag.~value + "\n")
		else 
			contents.append("@")
			contents.append(tag.name)
			contents.append ( "\"")
			contents.append(tag.~value)
			contents.append ("\"\n")
		end
	}
	
  	contents.append("<HR>\n")
	// Method Summury
	if ownedOperation.size != 0 then
		contents.append("<A NAME=method_summary><!-- --></A>\n")
		contents.append("<TABLE BORDER=1 WIDTH=100% CELLPADDING=3 CELLSPACING=0 SUMMARY=>\n")
		contents.append("<TR BGCOLOR=#CCCCFF>\n")
		contents.append("<TH ALIGN=left COLSPAN=2><FONT SIZE=+2>\n")
		contents.append("<B>Method Summary</B></FONT></TH>\n")
		contents.append("</TR>\n")
		// list of operations
		ownedOperation.each{oa | contents.append(oa.createCodeHtml(self.name))}
		contents.append("</TABLE>\n")
		
	end
	            
// Field Summury
	if ownedAttribute.size != 0 then
	contents.append("<A NAME=field_summary><!-- --></A>\n")
	contents.append("<TABLE BORDER=1 WIDTH=100% CELLPADDING=3 CELLSPACING=0 SUMMARY=>\n")
	contents.append("<TR BGCOLOR=#CCCCFF>\n")
	contents.append("<TH ALIGN=left COLSPAN=2><FONT SIZE=+2>\n")
	contents.append("<B>Property Summary</B></FONT></TH>\n")
	contents.append("</TR>\n")
	// list of properties
	ownedAttribute.each{oa | contents.append(oa.createCodeHtml(self.name))}
	//end of Field Summury
	contents.append("</TABLE>\n")
	end
			
	if ownedOperation.size !=0 then
		contents.append("<HR>")
		contents.append("<FONT SIZE=+2> <B> Details of properties and operations </B></FONT></TH>\n")
		contents.append("<HR>")
	// list of property detail
		ownedOperation.each{oa | contents.append(oa.createOperationDetail())}
	end
	

	contents.append("</body></html>\n")
	FileIO.writeTextFile(path.toURI(), contents.toString)
	result := ""
end
}

aspect class Type {
	operation gettypeDefinition() : String is do
	
		var s : String init ""
		
		result:= s
	end
}

aspect class ParameterizedType{
	operation gettypeDefinition() : String is do
		var s : String init ""
		
		result:= s
	end
}

aspect class Class {
	
	operation gettypeDefinition() : String is do
		
		result := self.typeDefinition.name
		stdio.writeln(typeDefinition.toString)		
	end
}

aspect class Property{
/** create html code of a property **/
	operation createCodeHtml(className : String) : String is do
		
		var typeString : String init ""
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.gettypeDefinition
		end
		
		var html: StringBuffer init StringBuffer.new
		html.append("<TR BGCOLOR=white CLASS=TableRowColor>\n")
		html.append("<TD ALIGN=right VALIGN=top WIDTH=1%><FONT SIZE=-1>\n")
		html.append("<CODE>\n")
		html.append(typeString)
		html.append("</CODE></FONT></TD>\n")
		
		html.append("<TD><CODE><B><A HREF=" + className +".html#" + self.name + ">")
		html.append("<FONT COLOR=RED> attribute </FONT>")
		if isReadOnly == true then
			html.append("<FONT COLOR=RED> readonly </FONT>")
		end 
		html.append(self.name + "[" + lower.toString + ".." + upper.toString + "]" + "</A></B></CODE>\n")
		html.append("<br>")
		self.kTag.each{tag | 
			
		if tag.name == "documentation" then
			html.append(tag.~value + "\n")
		else 
			html.append("@")
			html.append(tag.name)
			html.append ( "\"\n")
			html.append(tag.~value)
			html.append ("\"\n")
		end
	}
		html.append("<BR>\n")
		html.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\n")
		html.append("</TR>\n")
 		result:= html.toString
	end
	
/** creat html code for property detail field */
	operation createPropertyDetail(): String is do 
		var typeString : String init String.new
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.gettypeDefinition
		end
		var html : StringBuffer init StringBuffer.new
		html.append("<A NAME="+ self.name + "><!-- --></A><H3>\n")
		html.append(self.name +"</H3>\n")
		html.append("<PRE>\n")
		html.append(typeString + "<B> "+ self.name + "</B></PRE>\n")
		html.append(typeString + "<B> " + "isReadOnly </B>: " + self.isReadOnly.toString() + "</PRE>\n")
		html.append("<B> " + "default : </B>" + self.default.toString()+ "</PRE>\n")
		html.append("<B> " + "isComposite: </B>" + self.isComposite.toString()+ "</PRE>\n")
		html.append("<B> " + "isDerived : </B>" + self.isDerived.toString()+ "</PRE>\n")
		html.append("<B> " + "isID : </B>" + self.isID.toString()+ "</PRE>\n")
		html.append("<B> " + "isGetterAbstract :</B>" + self.isGetterAbstract.toString()+ "</PRE>\n")
		html.append("<B> " + "isSetterAbstract :</B>" + self.isSetterAbstract.toString()+ "</PRE>\n")
		html.append("<HR>")
		result:= html.toString
	end	
}

aspect class Operation {
	/** create html code of an Operation **/
	operation createCodeHtml(className : String) : String is do
		var typeString : String init ""
	
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.gettypeDefinition
		end
		
		var html: StringBuffer init StringBuffer.new
		html.append("<TR BGCOLOR=white CLASS=TableRowColor>\n")
		html.append("<TD ALIGN=right VALIGN=top WIDTH=1%><FONT SIZE=-1>\n")
		html.append("<CODE>\n")
		html.append(typeString)
		html.append("</CODE></FONT></TD>\n")
		html.append("<TD><CODE><B><A HREF=" + className +".html#" + self.name + ">") 
		html.append(self.name+ "(")
		ownedParameter.each{op | var paraType : String init String.new
								 if op.type.isVoid then paraType :="<Not Set>"
								 else
									paraType := op.type.gettypeDefinition
								 end
								 html.append(paraType + ",")}
		html.append(")</A></B></CODE>\n")
		
		self.kTag.each{tag | 
		if tag.name == "documentation" then
			html.append(tag.~value + "\n")
		else 
			html.append("@")
			html.append(tag.name)
			html.append ( "\"")
			html.append(tag.~value)
			html.append ("\"")
		end
	}	
		html.append("<BR>\n")
		html.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\n")
		html.append("</TR>\n")
 		result:= html.toString
	end
	
	/** creat html code for Operation detail */
	operation createOperationDetail(): String is do 
		var typeString : String init String.new
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.gettypeDefinition
		end
		var html : StringBuffer init StringBuffer.new
		html.append("<A NAME="+ self.name + "><!-- --></A><H3>\n")
		html.append(self.name +"</H3>\n")
		html.append("<PRE>\n")
		html.append(typeString + "<B> ")
		if isAbstract == true then
		html.append("<FONT COLOR = RED> Abstract </FONT>")
		end
		html.append(self.name + "(")
		ownedParameter.each{op | var paraType : String init String.new
								 if op.type.isVoid then paraType :="<Not Set>"
								 else
									paraType := op.type.gettypeDefinition
								 end
								 html.append(paraType + ",")}
		
	//	invConstraint.each{in | html.append("<FONT COLOR = RED>" + in.stereotype.toString() + " "+ in.name + "</FONT>")}
		
		html.append( ")"+ "</B></PRE>\n")
		html.append("<HR>")
		result:= html.toString
	end	
}

aspect class Constraint {
	/** create html code of an Operation **/
	operation createCodeHtml(className : String) : String is do
		var html: StringBuffer init StringBuffer.new
		html.append("<TR BGCOLOR=white CLASS=TableRowColor>\n")
 		html.append("<TD ALIGN=right VALIGN=top WIDTH=1%><FONT SIZE=-1>\n")
		html.append("<CODE>\n")
		html.append(self.stereotype.toString())
		html.append("</CODE></FONT></TD>\n")
		html.append("<TD><CODE><B><A HREF=" + className +".html#constraint_detail>" + self.name +"</A></B></CODE>\n")
		html.append("<BR>\n")
		html.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\n")
		html.append("</TR>\n")
 
	result:= html.toString
	end
	
	/** creat html code for Operation detail */
	operation createPeropertyDetail(): String is do 
		var html : StringBuffer init StringBuffer.new
		
		result:= html.toString
	end	
}


aspect class ModelType {
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append(" <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>")
		
		result := html.toString
    end
}

aspect class PrimitiveType{
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append(" <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>")
    		
    	result:=html.toString
    end
}

aspect class Enumeration{
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append(" <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>")
    	
    	result:=html.toString
    end
}

aspect class Package{
		
	/** Create html code */
	operation createClassesHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append("<h4>"+self.name+ "</h4>")
			
		ownedTypeDefinition.each{otd | html.append(otd.createClassesHtml(baseFolder))
		otd.generateClassesHtml(baseFolder,self.name)
		}
		nestedPackage.each {subPack | html.append(subPack.createClassesHtml(baseFolder))}
				
		result:=html.toString
    
	end
	 
}
/*
aspect class Package {
	operation generateHtml() : Void is do
		stdio.writeln ("Html file generated Package")
		
	end 

}


aspect class Class  {

	operation generateHtml() : Void is do
		stdio.writeln ("Html file generated Class")
	end 


}

	class MainClass
	{
		operation mainOperation() : Void is do 
			// TODO: implement 'mainOperation' operation
		end
	}
	*/
}