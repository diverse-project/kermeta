/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.kermeta.language.behavior.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.kermeta.language.behavior.util.BehaviorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehaviorItemProviderAdapterFactory extends BehaviorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehaviorItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.Assignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentItemProvider assignmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.Assignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentAdapter() {
		if (assignmentItemProvider == null) {
			assignmentItemProvider = new AssignmentItemProvider(this);
		}

		return assignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.Block} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockItemProvider blockItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.Block}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockAdapter() {
		if (blockItemProvider == null) {
			blockItemProvider = new BlockItemProvider(this);
		}

		return blockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.CallVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallVariableItemProvider callVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.CallVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallVariableAdapter() {
		if (callVariableItemProvider == null) {
			callVariableItemProvider = new CallVariableItemProvider(this);
		}

		return callVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.CallFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallFeatureItemProvider callFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.CallFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallFeatureAdapter() {
		if (callFeatureItemProvider == null) {
			callFeatureItemProvider = new CallFeatureItemProvider(this);
		}

		return callFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.CallSuperOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallSuperOperationItemProvider callSuperOperationItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.CallSuperOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallSuperOperationAdapter() {
		if (callSuperOperationItemProvider == null) {
			callSuperOperationItemProvider = new CallSuperOperationItemProvider(this);
		}

		return callSuperOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.CallResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallResultItemProvider callResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.CallResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallResultAdapter() {
		if (callResultItemProvider == null) {
			callResultItemProvider = new CallResultItemProvider(this);
		}

		return callResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.CallValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallValueItemProvider callValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.CallValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallValueAdapter() {
		if (callValueItemProvider == null) {
			callValueItemProvider = new CallValueItemProvider(this);
		}

		return callValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.Conditional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalItemProvider conditionalItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.Conditional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalAdapter() {
		if (conditionalItemProvider == null) {
			conditionalItemProvider = new ConditionalItemProvider(this);
		}

		return conditionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.Raise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RaiseItemProvider raiseItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.Raise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRaiseAdapter() {
		if (raiseItemProvider == null) {
			raiseItemProvider = new RaiseItemProvider(this);
		}

		return raiseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.Rescue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RescueItemProvider rescueItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.Rescue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRescueAdapter() {
		if (rescueItemProvider == null) {
			rescueItemProvider = new RescueItemProvider(this);
		}

		return rescueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.TypeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeReferenceItemProvider typeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.TypeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeReferenceAdapter() {
		if (typeReferenceItemProvider == null) {
			typeReferenceItemProvider = new TypeReferenceItemProvider(this);
		}

		return typeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.EmptyExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmptyExpressionItemProvider emptyExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.EmptyExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmptyExpressionAdapter() {
		if (emptyExpressionItemProvider == null) {
			emptyExpressionItemProvider = new EmptyExpressionItemProvider(this);
		}

		return emptyExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.JavaStaticCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaStaticCallItemProvider javaStaticCallItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.JavaStaticCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaStaticCallAdapter() {
		if (javaStaticCallItemProvider == null) {
			javaStaticCallItemProvider = new JavaStaticCallItemProvider(this);
		}

		return javaStaticCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.LambdaExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LambdaExpressionItemProvider lambdaExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.LambdaExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLambdaExpressionAdapter() {
		if (lambdaExpressionItemProvider == null) {
			lambdaExpressionItemProvider = new LambdaExpressionItemProvider(this);
		}

		return lambdaExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.LambdaParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LambdaParameterItemProvider lambdaParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.LambdaParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLambdaParameterAdapter() {
		if (lambdaParameterItemProvider == null) {
			lambdaParameterItemProvider = new LambdaParameterItemProvider(this);
		}

		return lambdaParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.IntegerLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerLiteralItemProvider integerLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.IntegerLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerLiteralAdapter() {
		if (integerLiteralItemProvider == null) {
			integerLiteralItemProvider = new IntegerLiteralItemProvider(this);
		}

		return integerLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.StringLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringLiteralItemProvider stringLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.StringLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringLiteralAdapter() {
		if (stringLiteralItemProvider == null) {
			stringLiteralItemProvider = new StringLiteralItemProvider(this);
		}

		return stringLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.BooleanLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanLiteralItemProvider booleanLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.BooleanLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanLiteralAdapter() {
		if (booleanLiteralItemProvider == null) {
			booleanLiteralItemProvider = new BooleanLiteralItemProvider(this);
		}

		return booleanLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.CallTypeLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallTypeLiteralItemProvider callTypeLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.CallTypeLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallTypeLiteralAdapter() {
		if (callTypeLiteralItemProvider == null) {
			callTypeLiteralItemProvider = new CallTypeLiteralItemProvider(this);
		}

		return callTypeLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.VoidLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VoidLiteralItemProvider voidLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.VoidLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVoidLiteralAdapter() {
		if (voidLiteralItemProvider == null) {
			voidLiteralItemProvider = new VoidLiteralItemProvider(this);
		}

		return voidLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.Loop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoopItemProvider loopItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.Loop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoopAdapter() {
		if (loopItemProvider == null) {
			loopItemProvider = new LoopItemProvider(this);
		}

		return loopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.SelfExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelfExpressionItemProvider selfExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.SelfExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelfExpressionAdapter() {
		if (selfExpressionItemProvider == null) {
			selfExpressionItemProvider = new SelfExpressionItemProvider(this);
		}

		return selfExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.VariableDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDeclItemProvider variableDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.VariableDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDeclAdapter() {
		if (variableDeclItemProvider == null) {
			variableDeclItemProvider = new VariableDeclItemProvider(this);
		}

		return variableDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.UnresolvedCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnresolvedCallItemProvider unresolvedCallItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.UnresolvedCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnresolvedCallAdapter() {
		if (unresolvedCallItemProvider == null) {
			unresolvedCallItemProvider = new UnresolvedCallItemProvider(this);
		}

		return unresolvedCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.CallOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallOperationItemProvider callOperationItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.CallOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallOperationAdapter() {
		if (callOperationItemProvider == null) {
			callOperationItemProvider = new CallOperationItemProvider(this);
		}

		return callOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.CallProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallPropertyItemProvider callPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.CallProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallPropertyAdapter() {
		if (callPropertyItemProvider == null) {
			callPropertyItemProvider = new CallPropertyItemProvider(this);
		}

		return callPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.language.behavior.CallEnumLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallEnumLiteralItemProvider callEnumLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.language.behavior.CallEnumLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallEnumLiteralAdapter() {
		if (callEnumLiteralItemProvider == null) {
			callEnumLiteralItemProvider = new CallEnumLiteralItemProvider(this);
		}

		return callEnumLiteralItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (assignmentItemProvider != null) assignmentItemProvider.dispose();
		if (blockItemProvider != null) blockItemProvider.dispose();
		if (callVariableItemProvider != null) callVariableItemProvider.dispose();
		if (callFeatureItemProvider != null) callFeatureItemProvider.dispose();
		if (callSuperOperationItemProvider != null) callSuperOperationItemProvider.dispose();
		if (callResultItemProvider != null) callResultItemProvider.dispose();
		if (callValueItemProvider != null) callValueItemProvider.dispose();
		if (conditionalItemProvider != null) conditionalItemProvider.dispose();
		if (raiseItemProvider != null) raiseItemProvider.dispose();
		if (rescueItemProvider != null) rescueItemProvider.dispose();
		if (typeReferenceItemProvider != null) typeReferenceItemProvider.dispose();
		if (emptyExpressionItemProvider != null) emptyExpressionItemProvider.dispose();
		if (javaStaticCallItemProvider != null) javaStaticCallItemProvider.dispose();
		if (lambdaExpressionItemProvider != null) lambdaExpressionItemProvider.dispose();
		if (lambdaParameterItemProvider != null) lambdaParameterItemProvider.dispose();
		if (integerLiteralItemProvider != null) integerLiteralItemProvider.dispose();
		if (stringLiteralItemProvider != null) stringLiteralItemProvider.dispose();
		if (booleanLiteralItemProvider != null) booleanLiteralItemProvider.dispose();
		if (callTypeLiteralItemProvider != null) callTypeLiteralItemProvider.dispose();
		if (voidLiteralItemProvider != null) voidLiteralItemProvider.dispose();
		if (loopItemProvider != null) loopItemProvider.dispose();
		if (selfExpressionItemProvider != null) selfExpressionItemProvider.dispose();
		if (variableDeclItemProvider != null) variableDeclItemProvider.dispose();
		if (unresolvedCallItemProvider != null) unresolvedCallItemProvider.dispose();
		if (callOperationItemProvider != null) callOperationItemProvider.dispose();
		if (callPropertyItemProvider != null) callPropertyItemProvider.dispose();
		if (callEnumLiteralItemProvider != null) callEnumLiteralItemProvider.dispose();
	}

}
