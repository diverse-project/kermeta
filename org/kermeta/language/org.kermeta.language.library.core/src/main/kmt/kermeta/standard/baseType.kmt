using kermeta::standard
using org::kermeta::language::structure
using kermeta::exceptions


package kermeta{
package standard{

/**
 * TODO : miss operations 
 */
@CompilerIgnore "true"
class Void {
}
/**
 * TODO : miss operations 
 */
@CompilerIgnore "true"
class Long {
}
@CompilerIgnore "true"
class Object
{
	@CompilerIgnore "true"
	operation assert(test : Boolean) is do
	end

	/**
	 * Returns the Class object that is the metaclass of current Object
	 */
	 @CompilerIgnore "true"
	operation getMetaClass() : Class from Object is do
	end

	/**
	 * Returns the Object that contains current Object, void if the Object has
	 * no container
	 */
	@CompilerIgnore "true"
	operation container() : Object from Object is do
	end

	/**
	 * Runs checking of invariants defined for the metaclass of the Object
	 * Also check the multiplicity of attributes (except derived and transient attributes)
	 */
	@CompilerIgnore "true"
	operation checkInvariants() : Void from Object is do
	end
	
	/**
	 * Recursively runs checking of invariants defined for the metaclass of the Object
	 * and its supertypes
	 * Ignores derived attributes. 
	 */	
	@CompilerIgnore "true"
	operation checkAllInvariants() : Void from Object is do
	end

	/**
	 * semantic equality,
	 * if you wish to test for object identity you need to use the method oid
	 * ex: x.oid == y.oid
	 * by default, (ie. if not overloaded), the equals method for class Object implements 
	 * the most discriminating possible equivalence relation on objects; that is, for any non-null 
	 * reference values x and y, this method returns true if and only if x and y refer to the same 
	 * object (x.oid == y.oid has the value true). 
	 *
	 * note1: the operator == is mapped to this 
	 * note2: overloading this operation have some impact on the behavior on collection and hashtable that rely on it
	 */
	@CompilerIgnore "true"
	operation equals(element : Object) : Boolean from Object is do
	end
	
	/**
	 * See kermeta::language::structure::Object.equals(Object)
	 */
	@CompilerIgnore "true"
	operation isNotEqual(element : Object) : Boolean from Object is do
	end		
	
	/**
	 * Returns a Boolean stating whether the current Object is an instance of the given Class
	 * This is the new version of the former isKindOf
	 */
	//@CompilerIgnore "true"
	operation isDirectInstanceOf(cl : Class) : Boolean is do
	end
	
	/** 
	 * Returns the instances of the given property for this Object.
	 *
	 * Example : 
	 * <pre>
	 * class A { reference attr : String }
	 * </pre>
	 * Using A :
	 * <pre>
	 * operation getAProp() is do
	 *    var a : A
	 *    var s : String
	 *    var the_attr : Property init self.getMetaClass.ownedAttribute.one
	 *    s ?= a.get(the_attr)
	 * end
	 * </pre>
	 * The user has to cast
	 * the result of this method according to the type and the upper multiplicity
	 * of this property. If upper multiplicity > 1, than the effective type of the 
	 * result is a Sequence<ThePropertyName>. Otherwise, the type corresponds to 
	 * the name of the given Property (i.e the type of the property instance).
	 */
	@CompilerIgnore "true"
	operation get(~property : Property) : Object from Object is do
	end
	
	/**
	 * Sets the <code>element</code> to the <code>~property</code> of the object 
	 */
	@CompilerIgnore "true"
	operation ~set(~property : Property, element : Object) : Void from Object is do
	end
	
	/**
	 * True if the <code>~property</code> of the object has been set
	 */
	@CompilerIgnore "true"
	operation isSet(~property : Property) : Boolean from Object is do
	end
	
	/**
	 * Remove the element set as the <code>~property</code> of the object.
	 * The <code>isSet(~property)</code> method will then return False
	 */
	@CompilerIgnore "true"
	operation unset(~property : Property) : Void from Object is do
	end
	
	/**
	 * Returns the unique Oid of the Object
	 */
	@CompilerIgnore "true"
	operation oid() : Integer is do
	end
	
	/**
 	 * Implements Object.toString()
 	 * Returns a String of form [qn:oid] where 'qn' is the qualified name of
 	 * the object type, and oid the unique ID of the object
 	 */
	@CompilerIgnore "true"
	operation toString() : String is do
	end

	/**
	 * Returns a Boolean stating whether the Object is currently in a
	 * frozen state
	 */
	@CompilerIgnore "true"
	operation isFrozen() : Boolean is do
	end

	/**
	 * Returns a Boolean stating whether the Object is Void
	 */
	@CompilerIgnore "true"
	operation isVoid() : Boolean is do
	end

	/**
	 * code used in hashtable in order to identify an object in the hashtable keys
	 * This system is similar to the hashcode used in java. Please refer to java documentation
	 * for more information about hashcode
	 */
	@CompilerIgnore "true"
	operation hashcode() : Integer is do		
	end

	/**
	 * Freeze the Object
	 */
	@CompilerIgnore "true"
	operation freeze() : Void is do
	end

	/**
	 * Implementation of OCL like cast. It returns self if the object object conforms to the type given as parameter.
	 */
	@CompilerIgnore "true"
	operation asType(type : Class) : Object is do
	end

	/**
	 * Returns a Boolean stating whether the current Object conforms to given Type
	 * This means: is this object an instance of this type, or is it an instance of its subtype 
	 */
	@CompilerIgnore "true"
	operation isInstanceOf(type : Type) : Boolean is do
	end
	
	/**
	 * Returns the Resource currently containing (directly or indirectly) the Object 
	 * or void if the object belongs to no Resource
	 */
	@CompilerIgnore "true"
	operation containingResource() : kermeta::emfpersistence::Resource is do
	end
	
	@CompilerIgnore "true"
	operation invoke(op:Operation,args:OrderedCollection<Object>) is do
	end
}
@CompilerIgnore "true"
class String {
		@CompilerIgnore "true"
		operation plus(other : Object) : String is do
		end
    
	@CompilerIgnore "true"
         operation equals(arg0:Object) : Boolean is do
          end

        @CompilerIgnore "true"
         operation toString() : String is do
          end

        @CompilerIgnore "true"
         operation hashCode() : Integer is do
          end

        @CompilerIgnore "true"
         operation compareTo(arg0:String) : Integer is do
          end

        @CompilerIgnore "true"
         operation compareTo(arg0:Object) : Integer is do
          end

        @CompilerIgnore "true"
         operation indexOf(arg0:Integer) : Integer is do
          end

        @CompilerIgnore "true"
         operation indexOf(arg0:Integer,arg1:Integer) : Integer is do
          end

        @CompilerIgnore "true"
         operation indexOf(arg0:String) : Integer is do
          end

        @CompilerIgnore "true"
         operation indexOf(arg0:String,arg1:Integer) : Integer is do
          end

        @CompilerIgnore "true"
         operation valueOf(arg0:Object) : String is do
          end

        @CompilerIgnore "true"
         operation valueOf(arg0:Collection<Character>) : String is do
          end

        @CompilerIgnore "true"
         operation valueOf(arg0:Collection<Character>,arg1:Integer,arg2:Integer) : String is do
          end

        @CompilerIgnore "true"
         operation valueOf(arg0:Boolean) : String is do
          end

        @CompilerIgnore "true"
         operation valueOf(arg0:Character) : String is do
          end

        @CompilerIgnore "true"
         operation valueOf(arg0:Integer) : String is do
          end

        @CompilerIgnore "true"
         operation valueOf(arg0:Long) : String is do
          end
        @CompilerIgnore "true"
         operation valueOf(arg0:Float) : String is do
          end
        @CompilerIgnore "true"
         operation valueOf(arg0:Double) : String is do
          end
        @CompilerIgnore "true"
         operation charAt(arg0:Integer) : Character is do

          end
        @CompilerIgnore "true"
         operation codePointAt(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation codePointBefore(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation codePointCount(arg0:Integer,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation compareToIgnoreCase(arg0:String) : Integer is do

          end
        @CompilerIgnore "true"
         operation concat(arg0:String) : String is do

          end
        @CompilerIgnore "true"
         operation contentEquals(arg0:StringBuffer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation copyValueOf(arg0:Collection<Character>,arg1:Integer,arg2:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation copyValueOf(arg0:Collection<Character>) : String is do

          end
        @CompilerIgnore "true"
         operation endsWith(arg0:String) : Boolean is do

          end
        @CompilerIgnore "true"
         operation equalsIgnoreCase(arg0:String) : Boolean is do

          end
        @CompilerIgnore "true"
         operation format(arg0:String,arg1:Collection<Object>) : String is do

          end
        @CompilerIgnore "true"
         operation getChars(arg0:Integer,arg1:Integer,arg2:Collection<Character>,arg3:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation intern() : String is do

          end
        @CompilerIgnore "true"
         operation isEmpty() : Boolean is do

          end
        @CompilerIgnore "true"
         operation lastIndexOf(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation lastIndexOf(arg0:Integer,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation lastIndexOf(arg0:String) : Integer is do

          end
        @CompilerIgnore "true"
         operation lastIndexOf(arg0:String,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation length() : Integer is do

          end
        @CompilerIgnore "true"
         operation matches(arg0:String) : Boolean is do

          end
        @CompilerIgnore "true"
         operation offsetByCodePoints(arg0:Integer,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation regionMatches(arg0:Integer,arg1:String,arg2:Integer,arg3:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation regionMatches(arg0:Boolean,arg1:Integer,arg2:String,arg3:Integer,arg4:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation replace(arg0:Character,arg1:Character) : String is do

          end
        @CompilerIgnore "true"
         operation replaceAll(arg0:String,arg1:String) : String is do

          end
        @CompilerIgnore "true"
         operation replaceFirst(arg0:String,arg1:String) : String is do

          end
        @CompilerIgnore "true"
         operation split(arg0:String,arg1:Integer) : Collection<String> is do

          end
        @CompilerIgnore "true"
         operation split(arg0:String) : Collection<String> is do

          end
        @CompilerIgnore "true"
         operation startsWith(arg0:String,arg1:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation startsWith(arg0:String) : Boolean is do

          end
        @CompilerIgnore "true"
         operation substring(arg0:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation substring(arg0:Integer,arg1:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation toCharArray() : Collection<Character> is do

          end
        @CompilerIgnore "true"
         operation toLowerCase() : String is do

          end
        @CompilerIgnore "true"
         operation toUpperCase() : String is do

          end
        @CompilerIgnore "true"
         operation trim() : String is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long,arg1:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation wait() : Void is do

          end
        @CompilerIgnore "true"
         operation notify() : Void is do

          end
        @CompilerIgnore "true"
         operation notifyAll() : Void is do

          end
}
@CompilerIgnore "true"
class Integer inherits Numeric {        @CompilerIgnore "true"
         operation numberOfLeadingZeros(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation numberOfTrailingZeros(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation bitCount(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation equals(arg0:Object) : Boolean is do

          end
        @CompilerIgnore "true"
         operation toString(arg0:Integer,arg1:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation toString(arg0:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation toString() : String is do

          end
        @CompilerIgnore "true"
         operation hashCode() : Integer is do

          end
        @CompilerIgnore "true"
         operation reverseBytes(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Object) : Integer is do

          end
        @CompilerIgnore "true"
         operation shortValue() : Short is do

          end
        @CompilerIgnore "true"
         operation intValue() : Integer is do

          end
        @CompilerIgnore "true"
         operation longValue() : Long is do

          end
        @CompilerIgnore "true"
         operation floatValue() : Float is do

          end
        @CompilerIgnore "true"
         operation doubleValue() : Double is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:String,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:String) : Integer is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation toHexString(arg0:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation decode(arg0:String) : Integer is do

          end
        @CompilerIgnore "true"
         operation reverse(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation parseInt(arg0:String,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation parseInt(arg0:String) : Integer is do

          end
        @CompilerIgnore "true"
         operation getInteger(arg0:String) : Integer is do

          end
        @CompilerIgnore "true"
         operation getInteger(arg0:String,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation getInteger(arg0:String,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation highestOneBit(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation lowestOneBit(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation rotateLeft(arg0:Integer,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation rotateRight(arg0:Integer,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation signum(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation toBinaryString(arg0:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation toOctalString(arg0:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long,arg1:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation wait() : Void is do

          end
        @CompilerIgnore "true"
         operation notify() : Void is do

          end
        @CompilerIgnore "true"
         operation notifyAll() : Void is do

          end
          
        @CompilerIgnore "true"
         operation times(body : <Integer->Object>) : Void is do

          end
}
@CompilerIgnore "true"
class Boolean {        @CompilerIgnore "true"
         operation equals(arg0:Object) : Boolean is do

          end
        @CompilerIgnore "true"
         operation toString(arg0:Boolean) : String is do

          end
        @CompilerIgnore "true"
         operation toString() : String is do

          end
        @CompilerIgnore "true"
         operation hashCode() : Integer is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Boolean) : Integer is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Object) : Integer is do

          end
        @CompilerIgnore "true"
         operation getBoolean(arg0:String) : Boolean is do

          end
        @CompilerIgnore "true"
         operation booleanValue() : Boolean is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:Boolean) : Boolean is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:String) : Boolean is do

          end
        @CompilerIgnore "true"
         operation parseBoolean(arg0:String) : Boolean is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long,arg1:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation wait() : Void is do

          end
        @CompilerIgnore "true"
         operation notify() : Void is do

          end
        @CompilerIgnore "true"
         operation notifyAll() : Void is do

          end
}
@CompilerIgnore "true"
class Date inherits Comparable {        @CompilerIgnore "true"
         operation equals(arg0:Object) : Boolean is do

          end
        @CompilerIgnore "true"
         operation toString() : String is do

          end
        @CompilerIgnore "true"
         operation hashCode() : Integer is do

          end
        @CompilerIgnore "true"
         operation clone() : Object is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Date) : Integer is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Object) : Integer is do

          end
        @CompilerIgnore "true"
         operation after(arg0:Date) : Boolean is do

          end
        @CompilerIgnore "true"
         operation before(arg0:Date) : Boolean is do

          end
        @CompilerIgnore "true"
         operation parse(arg0:String) : Long is do

          end
        @CompilerIgnore "true"
         operation getDate() : Integer is do

          end
        @CompilerIgnore "true"
         operation getHours() : Integer is do

          end
        @CompilerIgnore "true"
         operation getMinutes() : Integer is do

          end
        @CompilerIgnore "true"
         operation getMonth() : Integer is do

          end
        @CompilerIgnore "true"
         operation getSeconds() : Integer is do

          end
        @CompilerIgnore "true"
         operation getTime() : Long is do

          end
        @CompilerIgnore "true"
         operation getYear() : Integer is do

          end
        @CompilerIgnore "true"
         operation setTime(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation UTC(arg0:Integer,arg1:Integer,arg2:Integer,arg3:Integer,arg4:Integer,arg5:Integer) : Long is do

          end
        @CompilerIgnore "true"
         operation getDay() : Integer is do

          end
        @CompilerIgnore "true"
         operation getTimezoneOffset() : Integer is do

          end
        @CompilerIgnore "true"
         operation setDate(arg0:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation setHours(arg0:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation setMinutes(arg0:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation setMonth(arg0:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation setSeconds(arg0:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation setYear(arg0:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation toGMTString() : String is do

          end
        @CompilerIgnore "true"
         operation toLocaleString() : String is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long,arg1:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation wait() : Void is do

          end
        @CompilerIgnore "true"
         operation notify() : Void is do

          end
        @CompilerIgnore "true"
         operation notifyAll() : Void is do

          end
}
@CompilerIgnore "true"
class Short inherits Numeric {        @CompilerIgnore "true"
         operation equals(arg0:Object) : Boolean is do

          end
        @CompilerIgnore "true"
         operation toString(arg0:Short) : String is do

          end
        @CompilerIgnore "true"
         operation toString() : String is do

          end
        @CompilerIgnore "true"
         operation hashCode() : Integer is do

          end
        @CompilerIgnore "true"
         operation reverseBytes(arg0:Short) : Short is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Short) : Integer is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Object) : Integer is do

          end
        @CompilerIgnore "true"
         operation shortValue() : Short is do

          end
        @CompilerIgnore "true"
         operation intValue() : Integer is do

          end
        @CompilerIgnore "true"
         operation longValue() : Long is do

          end
        @CompilerIgnore "true"
         operation floatValue() : Float is do

          end
        @CompilerIgnore "true"
         operation doubleValue() : Double is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:String,arg1:Integer) : Short is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:String) : Short is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:Short) : Short is do

          end
        @CompilerIgnore "true"
         operation decode(arg0:String) : Short is do

          end
        @CompilerIgnore "true"
         operation parseShort(arg0:String) : Short is do

          end
        @CompilerIgnore "true"
         operation parseShort(arg0:String,arg1:Integer) : Short is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long,arg1:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation wait() : Void is do

          end
        @CompilerIgnore "true"
         operation notify() : Void is do

          end
        @CompilerIgnore "true"
         operation notifyAll() : Void is do

          end
}
@CompilerIgnore "true"
class Double inherits Numeric {        @CompilerIgnore "true"
         operation equals(arg0:Object) : Boolean is do

          end
        @CompilerIgnore "true"
         operation toString(arg0:Double) : String is do

          end
        @CompilerIgnore "true"
         operation toString() : String is do

          end
        @CompilerIgnore "true"
         operation hashCode() : Integer is do

          end
        @CompilerIgnore "true"
         operation doubleToRawLongBits(arg0:Double) : Long is do

          end
        @CompilerIgnore "true"
         operation doubleToLongBits(arg0:Double) : Long is do

          end
        @CompilerIgnore "true"
         operation longBitsToDouble(arg0:Long) : Double is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Double) : Integer is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Object) : Integer is do

          end
        @CompilerIgnore "true"
         operation shortValue() : Short is do

          end
        @CompilerIgnore "true"
         operation intValue() : Integer is do

          end
        @CompilerIgnore "true"
         operation longValue() : Long is do

          end
        @CompilerIgnore "true"
         operation floatValue() : Float is do

          end
        @CompilerIgnore "true"
         operation doubleValue() : Double is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:String) : Double is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:Double) : Double is do

          end
        @CompilerIgnore "true"
         operation toHexString(arg0:Double) : String is do

          end
        @CompilerIgnore "true"
         operation compare(arg0:Double,arg1:Double) : Integer is do

          end
        @CompilerIgnore "true"
         operation isNaN(arg0:Double) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isNaN() : Boolean is do

          end
        @CompilerIgnore "true"
         operation isInfinite(arg0:Double) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isInfinite() : Boolean is do

          end
        @CompilerIgnore "true"
         operation parseDouble(arg0:String) : Double is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long,arg1:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation wait() : Void is do

          end
        @CompilerIgnore "true"
         operation notify() : Void is do

          end
        @CompilerIgnore "true"
         operation notifyAll() : Void is do

          end
}
@CompilerIgnore "true"
class Float inherits Numeric {        @CompilerIgnore "true"
         operation equals(arg0:Object) : Boolean is do

          end
        @CompilerIgnore "true"
         operation toString(arg0:Float) : String is do

          end
        @CompilerIgnore "true"
         operation toString() : String is do

          end
        @CompilerIgnore "true"
         operation hashCode() : Integer is do

          end
        @CompilerIgnore "true"
         operation floatToRawIntBits(arg0:Float) : Integer is do

          end
        @CompilerIgnore "true"
         operation floatToIntBits(arg0:Float) : Integer is do

          end
        @CompilerIgnore "true"
         operation intBitsToFloat(arg0:Integer) : Float is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Float) : Integer is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Object) : Integer is do

          end
        @CompilerIgnore "true"
         operation shortValue() : Short is do

          end
        @CompilerIgnore "true"
         operation intValue() : Integer is do

          end
        @CompilerIgnore "true"
         operation longValue() : Long is do

          end
        @CompilerIgnore "true"
         operation floatValue() : Float is do

          end
        @CompilerIgnore "true"
         operation doubleValue() : Double is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:String) : Float is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:Float) : Float is do

          end
        @CompilerIgnore "true"
         operation toHexString(arg0:Float) : String is do

          end
        @CompilerIgnore "true"
         operation compare(arg0:Float,arg1:Float) : Integer is do

          end
        @CompilerIgnore "true"
         operation isNaN(arg0:Float) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isNaN() : Boolean is do

          end
        @CompilerIgnore "true"
         operation isInfinite(arg0:Float) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isInfinite() : Boolean is do

          end
        @CompilerIgnore "true"
         operation parseFloat(arg0:String) : Float is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long,arg1:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation wait() : Void is do

          end
        @CompilerIgnore "true"
         operation notify() : Void is do

          end
        @CompilerIgnore "true"
         operation notifyAll() : Void is do

          end
}
@CompilerIgnore "true"
class StringBuffer {        @CompilerIgnore "true"
         operation toString() : String is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Object) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:String) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:StringBuffer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Collection<Character>) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Collection<Character>,arg1:Integer,arg2:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Boolean) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Character) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Long) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Float) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Double) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Double) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Float) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Long) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Character) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Boolean) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Collection<Character>,arg1:Integer,arg2:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Collection<Character>) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:StringBuffer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:String) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation append(arg0:Object) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation indexOf(arg0:String) : Integer is do

          end
        @CompilerIgnore "true"
         operation indexOf(arg0:String,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation charAt(arg0:Integer) : Character is do

          end
        @CompilerIgnore "true"
         operation codePointAt(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation codePointBefore(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation codePointCount(arg0:Integer,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation getChars(arg0:Integer,arg1:Integer,arg2:Collection<Character>,arg3:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation lastIndexOf(arg0:String) : Integer is do

          end
        @CompilerIgnore "true"
         operation lastIndexOf(arg0:String,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation length() : Integer is do

          end
        @CompilerIgnore "true"
         operation offsetByCodePoints(arg0:Integer,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation replace(arg0:Integer,arg1:Integer,arg2:String) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation replace(arg0:Integer,arg1:Integer,arg2:String) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation substring(arg0:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation substring(arg0:Integer,arg1:Integer) : String is do

          end
        @CompilerIgnore "true"
         operation appendCodePoint(arg0:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation appendCodePoint(arg0:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation capacity() : Integer is do

          end
        @CompilerIgnore "true"
         operation delete(arg0:Integer,arg1:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation delete(arg0:Integer,arg1:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation deleteCharAt(arg0:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation deleteCharAt(arg0:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation ensureCapacity(arg0:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Collection<Character>,arg2:Integer,arg3:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Object) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:String) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Collection<Character>) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Boolean) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Character) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Long) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Float) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Double) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Double) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Float) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Long) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Character) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Boolean) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Collection<Character>) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:String) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Object) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation insert(arg0:Integer,arg1:Collection<Character>,arg2:Integer,arg3:Integer) : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation reverse() : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation reverse() : StringBuffer is do

          end
        @CompilerIgnore "true"
         operation setCharAt(arg0:Integer,arg1:Character) : Void is do

          end
        @CompilerIgnore "true"
         operation setLength(arg0:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation trimToSize() : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long,arg1:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation wait() : Void is do

          end
        @CompilerIgnore "true"
         operation equals(arg0:Object) : Boolean is do

          end
        @CompilerIgnore "true"
         operation hashCode() : Integer is do

          end
        @CompilerIgnore "true"
         operation notify() : Void is do

          end
        @CompilerIgnore "true"
         operation notifyAll() : Void is do

          end
}
@CompilerIgnore "true"
class Character {        @CompilerIgnore "true"
         operation isJavaIdentifierStart(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isJavaIdentifierStart(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isJavaIdentifierPart(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isJavaIdentifierPart(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation equals(arg0:Object) : Boolean is do

          end
        @CompilerIgnore "true"
         operation toString() : String is do

          end
        @CompilerIgnore "true"
         operation toString(arg0:Character) : String is do

          end
        @CompilerIgnore "true"
         operation hashCode() : Integer is do

          end
        @CompilerIgnore "true"
         operation reverseBytes(arg0:Character) : Character is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Character) : Integer is do

          end
        @CompilerIgnore "true"
         operation compareTo(arg0:Object) : Integer is do

          end
        @CompilerIgnore "true"
         operation charValue() : Character is do

          end
        @CompilerIgnore "true"
         operation valueOf(arg0:Character) : Character is do

          end
        @CompilerIgnore "true"
         operation charCount(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation codePointAt(arg0:Collection<Character>,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation codePointAt(arg0:Collection<Character>,arg1:Integer,arg2:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation codePointBefore(arg0:Collection<Character>,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation codePointBefore(arg0:Collection<Character>,arg1:Integer,arg2:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation codePointCount(arg0:Collection<Character>,arg1:Integer,arg2:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation offsetByCodePoints(arg0:Collection<Character>,arg1:Integer,arg2:Integer,arg3:Integer,arg4:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation toChars(arg0:Integer,arg1:Collection<Character>,arg2:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation toChars(arg0:Integer) : Collection<Character> is do

          end
        @CompilerIgnore "true"
         operation toLowerCase(arg0:Character) : Character is do

          end
        @CompilerIgnore "true"
         operation toLowerCase(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation toUpperCase(arg0:Character) : Character is do

          end
        @CompilerIgnore "true"
         operation toUpperCase(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation getType(arg0:Character) : Integer is do

          end
        @CompilerIgnore "true"
         operation getType(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation isHighSurrogate(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isLowSurrogate(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isValidCodePoint(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation digit(arg0:Character,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation digit(arg0:Integer,arg1:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation forDigit(arg0:Integer,arg1:Integer) : Character is do

          end
        @CompilerIgnore "true"
         operation getNumericValue(arg0:Character) : Integer is do

          end
        @CompilerIgnore "true"
         operation getNumericValue(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation isDefined(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isDefined(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isDigit(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isDigit(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isISOControl(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isISOControl(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isIdentifierIgnorable(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isIdentifierIgnorable(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isJavaLetter(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isJavaLetterOrDigit(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isLetter(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isLetter(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isLetterOrDigit(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isLetterOrDigit(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isLowerCase(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isLowerCase(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isMirrored(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isMirrored(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isSpace(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isSpaceChar(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isSpaceChar(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isSupplementaryCodePoint(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isSurrogatePair(arg0:Character,arg1:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isTitleCase(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isTitleCase(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isUnicodeIdentifierPart(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isUnicodeIdentifierPart(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isUnicodeIdentifierStart(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isUnicodeIdentifierStart(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isUpperCase(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isUpperCase(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isWhitespace(arg0:Character) : Boolean is do

          end
        @CompilerIgnore "true"
         operation isWhitespace(arg0:Integer) : Boolean is do

          end
        @CompilerIgnore "true"
         operation toCodePoint(arg0:Character,arg1:Character) : Integer is do

          end
        @CompilerIgnore "true"
         operation toTitleCase(arg0:Character) : Character is do

          end
        @CompilerIgnore "true"
         operation toTitleCase(arg0:Integer) : Integer is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long) : Void is do

          end
        @CompilerIgnore "true"
         operation wait(arg0:Long,arg1:Integer) : Void is do

          end
        @CompilerIgnore "true"
         operation wait() : Void is do

          end
        @CompilerIgnore "true"
         operation notify() : Void is do

          end
        @CompilerIgnore "true"
         operation notifyAll() : Void is do

          end
}

@CompilerIgnore "true"
abstract class Summable {
	operation plus(other : Summable) : Summable is abstract
	operation minus(other : Summable) : Summable is abstract
	operation mult(other : Summable) : Summable is abstract
	operation div(other : Summable) : Summable is abstract
	operation mod(other : Summable) : Summable is abstract
	operation uminus(other : Summable) : Summable is abstract
}

@CompilerIgnore "true"
abstract class Comparable {
	
	/**
	 * This method should be implemented by any class that inherits
	 * from Comparable.
	 * returns 0 if self = other
	 * returns > 0 if  self > other
	 * returns < 0 if  self < other
	 */
	operation compareTo(other : Object) : Integer is abstract
	
	/**
	 * return true if self > other
	 */
	operation isGreater(other : Object) : Boolean is do
	end
	
	/**
	 * return true if self < other
	 */
	operation isLower(other : Object) : Boolean is do
	end
	
	/**
	 * return true if self <= other
	 */
	operation isLowerOrEqual(other : Object) : Boolean is do
	end
	
	/**
	 * return true if self >= other
	 */
	operation isGreaterOrEqual(other : Object) : Boolean is do
	end
}
@CompilerIgnore "true"
//We propose to put a concrete Numeric in order to allow Numeric.new to create an implicit Float.new
class Numeric inherits Summable,Comparable {
}
}
}

