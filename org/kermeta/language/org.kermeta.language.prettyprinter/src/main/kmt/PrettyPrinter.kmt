/* $Id:$ 
 * Creation : July 6, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cbouhour
 */
/*@mainClass "org::kermeta::language::prettyprinter::PrettyPrinter"
@mainOperation "testMain"*/


package org::kermeta::language::prettyprinter; 

/*require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "PrettyPrinterAspect.kmt"
*/
using kermeta::standard::*
using kermeta::emfpersistence::*
using kermeta::io::*
using kermeta::utils::FileIO::*
class PrettyPrinter
{
	@main ""
	operation testMain(arg: String) : Void is do 
		var repository : ResourceSet init ResourceSet.new
		//var path : String init arg
		StdIO.writeln(arg)
		var folder : String init "platform:/resource/QVTtest/src/main/kmt/"
		var baseFileName : String init "sam2samdyn"
		//var folder : String init "platform:/resource/QVTtest/target/"
		//var baseFileName : String init "beforeResolving"
		
		
		//repository.registerEcoreFile("platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore")
		var theModelResource : Resource init repository.createResource(folder+baseFileName+".km","http://www.kermeta.org/kermeta/2_0_0/")
		//var theModelResource : Resource init repository.createResource(path,"http://www.kermeta.org/kermeta/2_0_0/")
       	theModelResource.load(void)
       	//StdIO.writeln("	********************* " + path + " loaded ************************")
		       	
       	var theModelingUnit : Collection<org::kermeta::language::structure::Metamodel> init OrderedSet<org::kermeta::language::structure::Metamodel>.new
       	theModelResource.getContents.each{ e |	if e.isInstanceOf(org::kermeta::language::structure::Metamodel) then
       			theModelingUnit.add(e.asType(org::kermeta::language::structure::Metamodel))
       		end
       	}
       	FileIO.writeTextFile((folder+baseFileName+".kmt").toURI, prettyPrint(theModelingUnit))
       	//FileIO.writeTextFile((path+"t").toURI, prettyPrint(theModelingUnit))
       	//StdIO.writeln(prettyPrint(theModelingUnit))
       	
	end
	
	operation prettyPrint(aModelingUnit : Collection<org::kermeta::language::structure::Metamodel>) : String is do
		result := aModelingUnit.each{ mm | mm.prettyPrint(0)}
	end
	
	@main ""
	operation prettyPrintFile(inputFileUrl: String, outputFileUrl : String) : Void is do 
		var repository : ResourceSet init ResourceSet.new
		var theModelResource : Resource init repository.createResource(inputFileUrl,"http://www.kermeta.org/kermeta/2_0_0/")
       	theModelResource.load(void)
       	       	
       	var theModelingUnit : Collection<org::kermeta::language::structure::Metamodel>
       	theModelResource.getContents.each{ e |	if e.isInstanceOf(org::kermeta::language::structure::Metamodel) then
       			theModelingUnit.add(e.asType(org::kermeta::language::structure::Metamodel))
       		end
       	}
       	FileIO.writeTextFile(outputFileUrl.toURI, prettyPrint(theModelingUnit))
       	
	end
	
}