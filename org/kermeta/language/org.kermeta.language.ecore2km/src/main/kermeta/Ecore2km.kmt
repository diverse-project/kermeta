/*
 * Creation : November 5, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
@mainClass "org::kermeta::language::ecore2km::Ecore2km"
@mainOperation "foo"
package org::kermeta::language::ecore2km;

require kermeta
require "platform:/lookup/org.kermeta.language.ecore2km/src/main/kermeta/EcoreStructure2kmStructure.kmt"
require "platform:/lookup/org.kermeta.traceability.mdk/src/kermeta/TraceRegistry_org.kermeta.traceability.mdk.kmt"

using kermeta::utils
using ecore
using org::kermeta::language::structure
using org::kermeta::traceability

/**
 * Converts a given ecore model into a kermeta v2 model.
*/
class Ecore2km {
	attribute traceRegistry : TraceRegistry

	operation foo() : Void is do end

	/**
	 * Converts the given ecore package as a Kermeta v2 modeling unit.
	 */
	operation convert(pkg : EPackage, namespacePrefix : String) : ModelingUnit is do
		var ecore2kmStruct : EcoreStructure2kmStructure init EcoreStructure2kmStructure.new

		traceRegistry := TraceRegistry.new
		result := ModelingUnit.new
		result.namespacePrefix := namespacePrefix
		traceRegistry.addTraceFromObjects(pkg, result, void)
		ecore2kmStruct.convert(pkg, getPrimitiveTypeMappings(), result, traceRegistry)
	end
	
	
	/**
	 * The convertion of primitive types requires that their to be also converted in Kermeta.
	 * For instance, a java.lang.Integer Ecore primitive type will be converted as a Kermeta
	 * org::kermeta::language::structure::Integer
	 */
	operation getPrimitiveTypeMappings() : Hashtable<String,String> is do
		result := Hashtable<String,String>.new
		
    	result.put("boolean", "kermeta::standard::Boolean")
    	result.put("Boolean", "kermeta::standard::Boolean")
    	result.put("bool", "kermeta::standard::Boolean")
    	result.put("Bool", "kermeta::standard::Boolean")
		result.put("char", "kermeta::standard::Character")
		result.put("Char", "kermeta::standard::Character")
    	result.put("double", "kermeta::standard::Double")
    	result.put("Double", "kermeta::standard::Double")
    	result.put("float", "kermeta::standard::Float")
    	result.put("Float", "kermeta::standard::Float")
    	result.put("int", "kermeta::standard::Integer")
    	result.put("Int", "kermeta::standard::Integer")
    	result.put("integer", "kermeta::standard::Integer")
    	result.put("Integer", "kermeta::standard::Integer")
    	result.put("long", "kermeta::standard::Long")
    	result.put("Long", "kermeta::standard::Long")
    	result.put("java.lang.Boolean", "kermeta::standard::Boolean")
    	result.put("java.lang.Byte","kermeta::standard::Integer")
    	result.put("java.util.Date", "kermeta::standard::Date")
    	result.put("java.lang.Double", "kermeta::standard::Double")
    	result.put("java.lang.Float", "kermeta::standard::Float")
		result.put("java.lang.Integer", "kermeta::standard::Integer")
		result.put("java.lang.Long", "kermeta::standard::Long")
    	result.put("java.lang.Object", "kermeta::standard::Object")
    	result.put("java.lang.Short","kermeta::standard::Short")
    	result.put("java.lang.String", "kermeta::standard::String")
    	result.put("java.lang.Void","kermeta::standard::Void")
    	result.put("string", "kermeta::standard::String")
    	result.put("String", "kermeta::standard::String")
    	result.put("org.eclipse.emf.ecore.EObject","kermeta::standard::Object")
	end
}

