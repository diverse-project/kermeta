/* $Id:$ 
 * Creation : October 27, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */
@mainClass "org::kermeta::language::checker::MainCheckerV2"
@mainOperation "check"


package org::kermeta::language::checker;

require "platform:/lookup/kermetaV2Checker/src/kermetav2/checkerv2.kmt"
//require kermeta

using kermeta::standard

class MainCheckerV2
{
	operation check() : Void is do 
		
		/*
		// load 		
		var mu : org::kermeta::language::structure::ModelingUnit //init org::kermeta::language::structure::ModelingUnit.new
		
		var inputRep : kermeta::persistence::EMFRepository init kermeta::persistence::EMFRepository.new
		var inputRes : kermeta::persistence::EMFResource
		
		inputRes ?= inputRep.createResource("platform:/resource/kermetaV2Checker/model/test.km",
						"http://www.kermeta.org/kermeta/2_0_0/")
		
		inputRes.load()
		
		mu ?= inputRes.one
		
		stdio.writeln("Loaded modeling unit : " + mu.toString)
		mu.packages.each{p|
			stdio.writeln(" -> package :"  + p.name)
		}
		*/
		
		var a : Integer init 0
		var b : Integer init 1
		
		var c : Boolean init false
	
		
		if ( a != b ) then
			stdio.writeln(" 1 OK")
		end
		
		if not(  a==b ) then
			stdio.writeln(" 2 OK")
		end

		if (not c) then
			stdio.writeln(" 3 OK")
		end


		var d : myObject init myObject.new
		var e : myObject init myObject.new
			
			d.a := 1
			e.a := 1
			
		if e.equals(d) then
			stdio.writeln(" then")
		else
			stdio.writeln(" else")
		end
		
		/*
	
		var myChecker : Checker init Checker.new
		
		// test only packages :
		mu.packages.each{ p | myChecker.checkObject(p) }
		
		*/	
	end
}


class myObject {

	attribute a : Integer
	
	method equals(obj : Object) : Boolean is do
		
		if (obj.isInstanceOf(myObject)) then
			result:= self.a==obj.asType(myObject).a
		else
			result:= self.asType(Object).equals(obj)
		end
		

	end
	

}
