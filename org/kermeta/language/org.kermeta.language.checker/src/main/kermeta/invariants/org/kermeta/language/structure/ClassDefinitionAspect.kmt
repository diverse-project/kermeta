/* $Id:$ 
 * Creation : March 1, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */


package org::kermeta::language::structure;


require kermeta

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

// use Kermeta MDK
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/GetAllSuperTypes_TypeDefinition_aspect.kmt"
// To retrieve a qualified name
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/GetQualifiedName_structure_aspect.kmt"
// To check type equality
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/TypeEquality_structure_aspect.kmt"

using kermeta::utils
using kermeta::standard

aspect class Class {

	operation getSuperTypes() : Sequence<Class> is do
	
		var typeDef : TypeDefinition init self.typeDefinition
		result:= Sequence<Class>.new
		
		typeDef.superType.each{ sType |
			
			var newClass : Class init Class.new
			newClass.typeDefinition:=sType.asType(Class).typeDefinition
			
			
			result.add(newClass)
		}
		
		
	end

}


aspect class ClassDefinition {



	/*
	 * An operation cannot be defined twice in the same class
	 *
	@Scope "RESOLVED"
	inv operation_not_defined_twice is do
	
		var allOperation : Bag<String> init Bag<String>.new
	
		self.ownedOperation.each{ op | allOperation.add(op.uniqueName) }
	
		not self.ownedOperation.exists{ op |
			self.ownedOperation.collect{ opbis |
				opbis.uniqueName.equals(op.uniqueName)			
			}.size > 1 
		}
	end
	*/
	
	operation log(msg : String) : Void is do
		if (self.name=="A")
		then
			stdio.writeln(msg)
		end
	end
	
	/**
	 * Test
	 */
	@Scope "RESOLVED"
	inv type_parameters_consistency_in_heritance_tree is do
		
		var allTypesToBrowse : Sequence<Class> init Sequence<Class>.new
		var allBrowsedTypes : Sequence<Class> init Sequence<Class>.new
		var res : Boolean init true
		log("Checking type parameter consistency for ClassDefinition " + self.name)
		
		// Build the base Class
		var selfClass : Class init Class.new
		selfClass.typeDefinition:=self
		
		self.typeParameter.each{ tp |
			log(" - type parameter : " + tp.toString)
			var binding : TypeVariableBinding init TypeVariableBinding.new
			binding.variable := tp
			binding.type := tp
			selfClass.typeParamBinding.add(binding)
		}
		
		allTypesToBrowse.add(selfClass)
		
		from var currentClass : Class
		until (allTypesToBrowse.isEmpty() or not(res))
		loop
			currentClass := allTypesToBrowse.one
			log("------------------------------\nCurrentClass is " + currentClass.name)
			log("allTypesToBrowse size : " + allTypesToBrowse.size.toString)
			allTypesToBrowse.each{ t | log(" - " + t.name) }
			log("allBrowsedTypes size : " + allBrowsedTypes.size.toString)
			allBrowsedTypes.each{ t | log(" - " + t.name) }
			allTypesToBrowse.remove(currentClass)
			
			if (allBrowsedTypes.exists{c| c.typeDefinition == currentClass.typeDefinition})
			then
				log("Already browsed ! ")
				if (allBrowsedTypes.exists{c | c.typeDefinition == currentClass.typeDefinition and
												c.typeEquals(currentClass)})
				then
					log("result=false!")
					res:=false
				end
			else
				allBrowsedTypes.add(currentClass)
				allTypesToBrowse.addAll(currentClass.getSuperTypes)
			end
		end
		
		// Has this ClassDefinition type parameters ?
		/*if (self.typeParameter.size > 0 )
		then
			var selfClass : Class init Class.new
			
			selfClass.typeDefinition := self
	
	
			if (self.name == "A") then stdio.writeln("The ClassDefinition has type parameters") end
			
			self.typeParameter.each{ tp | 
				if (self.name == "A") then stdio.writeln(" - " + tp.toString) end
				var tpb : TypeVariableBinding init TypeVariableBinding.new
				tpb.variable := tp
				tpb.type := tp
				selfClass.typeParamBinding.add(tpb) 
			}
			
			// supertypes ?
			if (self.superType.size > 0)
			then
				self.superType.each{t|
					// has t already been found in the inheritance tree ?
					if (self.name == "A") then stdio.writeln(" SuperType " + t.toString) end
					allTypesFound.add(t)
					// has t type parameters ?
					if (t.asType(Class).typeDefinition.typeParameter.size > 0)
					then
						t.asType(Class).typeDefinition.typeParameter.each{ tp |
							if (self.name == "A") then stdio.writeln("  - " + tp.toString) end
						}
					end
				}
			else
				if (self.name == "A") then stdio.writeln(" No SuperType...") end
			end
			 
		else
			true
		end
			
		
		/*
		self.getAllSuperTypes().each{ type |
			if (type.isInstanceOf(Class))
			then
				var qName : String init type.asType(Class).typeDefinition.getQualifiedName
				
				then
					stdio.writeln(" super type : " + qName)
				end
			end
		}
		*/
		
		true
	end
	
	/**
	 * A class cannot inherit twice the same generic class with 2 different bindings.
	 * Check the class' inheritance tree.
	 */
	@Scope "RESOLVED"
	inv no_multiple_inheritance_with_different_bindings is do
	
		//stdio.writeln("Checking no_multiple_inheritance_with_different_bindings for " + self.name)
		
		var res : Boolean init true
	
		var typeSet : Set<Type> init Set<Type>.new
		self.getAllSuperTypes().each{ type |
			if (type.isInstanceOf(Class))
			then
				var qName : String init type.asType(Class).typeDefinition.getQualifiedName
				//stdio.writeln("  superType qName is : " + qName)

				if (type.asType(Class).typeParamBinding.size>0)
				then
					//stdio.writeln("   this superType has " + type.asType(Class).typeParamBinding.size.toString + " bindings")
					// is it already in the set ?
					var lType : Type init typeSet.detect{ty|
						ty.asType(Class).typeDefinition.getQualifiedName.equals(qName)}
					//if lType is not null, then we must compare the type of the bindings
					//stdio.writeln("  lType : " + lType.toString)
					if not(lType.isVoid)
					then
						// We have to compare the bindings of type and lType
						// Browse through lType bindings
						lType.asType(Class).typeParamBinding.each{ tpb |
							//there must exist a binding in type with the same variable name for the same type
							var lTpb : TypeVariableBinding init type.asType(Class).typeParamBinding.detect{ tpbBis | tpbBis.variable.name.equals(tpb.variable.name)}
							//stdio.writeln("    lTpb : " + lTpb.toString)
							if (lTpb.isVoid)
							then
								// then there is an error
								//stdio.writeln("Problem with the bindings variable name")
								res:=false
							else
								if (lTpb.type.isInstanceOf(Class) and tpb.type.isInstanceOf(Class))
								then
									//stdio.writeln("    lTpb.type.asType(Class).typeDefinition.getQualifiedName : " + lTpb.type.asType(Class).typeDefinition.getQualifiedName)
									//stdio.writeln("     tpb.type.asType(Class).typeDefinition.getQualifiedName : " + tpb.type.asType(Class).typeDefinition.getQualifiedName)
									// the binding type on the variable must be the same
									if not(lTpb.type.asType(Class).typeDefinition.getQualifiedName.equals(
											tpb.type.asType(Class).typeDefinition.getQualifiedName))
									then
										res:=false
									end
								else
									//stdio.writeln("		One of the typeVaraibleBinding is bound to an ObjectTypeVaraible, no check required")
								end
							end
							
						}
					else
						//stdio.writeln("  lType is Void")
						// add type to the typset
						//stdio.writeln("   adding " + type.asType(Class).typeDefinition.getQualifiedName + " to the Generic Type Set of super types")
						typeSet.add(type)	
					end
				end
			end
		}
		res
	end
	
	
	/**
	  *	if not empty, the supertypes of a ClassDefinition must be Class
	  */
	@Scope "RESOLVED"
	inv super_types_must_be_classes is do

		//stdio.writeln("Evaluating super_types_must_be_classes for " + self.name)
		self.getAllSuperTypes().forAll{ typeDef |
			//stdio.writeln(" - superType : " + typeDef.toString)
			typeDef.isInstanceOf(org::kermeta::language::structure::Class)
		}
	
	end
	
	
	/*
	 * Fake one for testing purposes */
	/*
	@Scope "MERGED"
	inv no_helloworld is do
	
		not (self.name.equals("HelloWorld"))
		
	end
	*/
	
	/*
	 * Bug 1784
	 * In case of multiple inheritance, if there are 2 operations with similar
	 * signature then there must be an operation with this signature in the current
	 * children class 
	 */
	 
	
	 /*
	@Scope "RESOLVED"
	inv multiple_inheritance_operation_redefinition is do
		
		//var allSuperOperations : Hashtable<Operation, Type> init Hashtable<Operation, Type>.new
		var invResult : Boolean init true
		
		var test : Hashtable<String, Set<Type>> init getAllSuperOperationsByType
		
		// Browse operations unique names
		test.keys.each{ opUN |
		
			if (test.getValue(opUN).size > 1)
			then
				// This means that at least 2 super types define the very same operation
				// We must check wether those supertypes have an inheritance link or that
				// self defines the same operation using from.
				var typeSet : Set<Type> init test.getValue(opUN)
				
				var typeSetBis : Set<Type> init Set<Type>.new
				typeSetBis.addAll(typeSet)
				
				typeSet.each{ t |
					typeSetBis.remove(t)
					typeSetBis.each{ tbis |
						if true //not(t.checkInheritanceLink(tbis))
						then
							// self must define the operation using from
							var myOp : Operation init self.ownedOperation.detect{ o | 
																o.uniqueName.equals(opUN) }
							
							if (myOp.isVoid)
							then
								invResult := false
							else
								// The superOperation of the operation must point
								// to one of the two types or to one of their subtypes
								if (myOp.superOperation.isInstanceOf(UnresolvedOperation))
								then
									var myFrom : Type init myOp.superOperation.asType(UnresolvedOperation).~from
									if (not (myFrom.equals(t) or 
											myFrom.equals(tbis) /* or
											myFrom.isSubTypeOf(t) or
											myFrom.isSubTypeOf(tbis)*/ /* ) )
									then
										invResult:=false
									end
								else
									invResult:=false
								end
							
							end

						end
					}
				}
			end
		}
		
		invResult
	end
	
	operation getAllSuperOperationsByType() : Hashtable<String, Set<Type>> is do
	
		var res : Hashtable<String, Set<Type>> init Hashtable<String, Set<Type>>.new
		
		allSuperTypes.each{ supTyp |
		
			if supTyp.isInstanceOf(ParameterizedType)
			then
				if supTyp.asType(ParameterizedType).typeDefinition.isInstanceOf(ClassDefinition)
				then
					supTyp.asType(ParameterizedType).typeDefinition.asType(ClassDefinition).ownedOperation.each{ op |
						if res.containsKey(op.uniqueName)
						then
							res.getValue(op.uniqueName).add(supTyp)
						else
							var setOfTypes : Set<Type> init Set<Type>.new
							setOfTypes.add(supTyp)
							res.put(op.uniqueName, setOfTypes)
						end
					}
				end
			end
		}
		
		result := res
	
	end
	
		operation allSuperTypes() : Set<Type> is do
	 
		var allSuperClasses : Set<Type> init Set<Type>.new
        var superClasses : Set<Type> init Set<Type>.new
        superClasses.addAll(self.superType)
        
        from  not superClasses.isEmpty
        until superClasses.isEmpty
        loop
            allSuperClasses.addAll(superClasses)
            var temp : Set<Type> init Set<Type>.new
             superClasses.each{ s |
             	if s.isInstanceOf(ParameterizedType) then
					if s.asType(ParameterizedType).typeDefinition.isInstanceOf(ClassDefinition) then
                		temp.addAll(s.asType(ParameterizedType).typeDefinition.asType(ClassDefinition).superType)
                	end
                end
             }
             superClasses.clear()
             superClasses.addAll(temp)
        end
        
        result := allSuperClasses
	end
	*/

}
