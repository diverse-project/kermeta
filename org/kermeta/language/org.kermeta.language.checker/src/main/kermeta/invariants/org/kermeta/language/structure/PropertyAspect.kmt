/* $Id:$ 
 * Creation : March 1, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */
package org::kermeta::language::structure;


require kermeta

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.language.checker/src/main/kermeta/helpers/SearchCallResult.kmt"


aspect class Property {
	
	/* SOME OTHER CONSTRAINTS IN PropertyChecker.java from fr.irisa.triskell.kermeta.io */

	/**
	 * derived properties can't have opposites
	 */
	@Scope "RESOLVED"
	inv no_opposite_for_derived_properties is do
		//It seems that the parser does not allow the opposite for
		//a derived property (error message is "`setter' expected but # found")
		//This invariant is therefore pretty useless... 
		if (self.isDerived)
		then
			self.opposite.isVoid
		else
			true
		end
	end

	/**
	 * The attribute's opposite must be a reference
	 */
	@Scope "RESOLVED"
	inv attribute_opposite_must_be_reference is do
		if (self.isComposite)
		then
			if (self.opposite.isVoid())
			then
				// An error will be raised by another invariant
				true
			else
				if (self.opposite.isInstanceOf(Property))
				then
					not(self.opposite.asType(Property).isComposite)
				else
					// Error raised elsewhere for UnresolvedProperty
					true
				end
			end
		else
			true
		end
	end

	/**
	 * The current property's opposite's opposite must be the current property
	 */
	@Scope "RESOLVED"
	inv property_opposite_opposite is do
		
		if (self.opposite.isVoid())
		then
			true
		else
			if (self.opposite.isInstanceOf(Property))
			then
				if (self.opposite.asType(Property).opposite.isVoid)
				then
					false
				else
					self.opposite.asType(Property).opposite.equals(self)
				end
			else
				// Unresolved invariant will fail
				true
			end
		end
		
	end


	/**
	 * A *not* derived property cannot have neither getterBody nor setterBody
	 */ 
	@Scope "MERGED"
	inv not_derived_implies_no_getter_setter is do
		
		self.isDerived or (self.getterBody.isVoid and self.setterBody.isVoid)
	end
	
	/**
	 * A derived property with a readonly cannot define a setter
	 */
	@Scope "MERGED"
	inv derived_and_readonly_implies_no_setter is do
		not(self.isDerived and self.isReadOnly) or self.setterBody.isVoid 
	end
	
	/**
	 * A derived property with a multiplicity greater than 1 cannot define a setter
	 */
	@Scope "MERGED"
	inv derived_and_collection_implies_no_setter is do
		not(self.isDerived and (self.upper>1 or self.upper<0)) or self.setterBody.isVoid
	end
	
	/**
	 * The upper bound cannot be lower than the lower bound
	 */
	@Scope "LOADED"
	inv upper_must_be_greater_than_lower is do
		(self.upper<0) or (self.upper>=self.lower)
	end
	
	/**
	 * The upper bound cannot be zero
	 */
	@Scope "LOADED"
	inv upper_cannot_be_zero is do
		not(self.upper!=0)
	end
	
	
	/**
	 * No CallResult are allowed in a derived property setter
	 */
	@Scope "RESOLVED"
	inv no_call_result_in_setter is do
		//stdio.writeln("no_call_result_in_setter for Property : " + self.name )
		if (self.isDerived)
		then
			if (not(self.setterBody.isVoid))
			then
				not(self.setterBody.searchCallResult)
			else
				true
			end
		else
			true
		end
	end
	
}