/* $Id:$ 
 * Creation : September 14, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */


package org::kermeta::language::structure;

require kermeta

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/GetAllSuperTypes_TypeDefinition_aspect.kmt"

// used to browse through expressions in order to retrieve CallResults
require "platform:/lookup/org.kermeta.language.checker/src/main/kermeta/helpers/SearchCallResult.kmt"

// use Kermeta MDK to retrive qualified names
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/GetQualifiedName_structure_aspect.kmt"

// use Kermeta MDK to compare types
//require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/TypeEquality_structure_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/IsSubtypeOf.kmt"



require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/GetRootContainer_object_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/CreationHelper.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/ModelingUnitHelper_structure_aspect.kmt"

using kermeta::standard
using kermeta::utils
using org::kermeta::language::behavior

aspect class Operation
{

	operation log(msg : String) : Void is do
		if (self.name=="test")
		then
			stdio.writeln(msg)
		end
	end


	/**
	 * The information in the super (or lack of information in super)
	 * must point to one and only one Operation
	 */
	@Scope "MERGED"
	@IsWarning "true"
	inv unresolved_super_must_not_conflict is do
		// TODO
		// To code this this would be probably easier if we reuse part of the code from resolver (using a require ?)
		true
	end
	
	/**
	 * If the from field in UnresolvedOperation points on a generic ClassDefinition
	 * it must contains the generics (from Set<G> and not from Set)
	 */
	@Scope "MERGED"
	@IsWarning "true"
	inv unresolved_generic_super_must_contain_type_parameters is do
		// TODO
		// To code this this would be probably easier if we reuse part of the code from resolver (using a require ?)
		true
	end

	/**
	 * The @main tag is used to declare an operation which can provide a command line
	 * runnable operation. This means that these operations will be correctly typed only 
	 * if they take no parameter, or a series of String or a collection of String.
	 */
	@Scope "RESOLVED"
	inv main_tag_validity is do
	
		var res : Boolean init true
	
		if self.kOwnedTags.exists{ t | t.name.equals("main") }
		then
			//stdio.writeln("Checking main_tag_validity on operation " + self.name)

			var nbParameter : Integer init self.ownedParameter.size
			res:=false
			
			if (nbParameter==0) 
			then
				//stdio.writeln("no parameter -> OK")
				res:=true
			else
				//stdio.writeln("There are " + nbParameter.toString + " parameters ...")
		  		// retrieve the modelingunit and String TypeDefinition
		  		var mm : Metamodel init self.getRootContainer.asType(Metamodel)
		  		var stringTypeDef : TypeDefinition init mm.getTypeDefinitionByQualifiedName("kermeta::standard::String")
		  		
		  		//stdio.writeln("stringTypeDef retrieved : "+ stringTypeDef.toString)
		  		
				res:=self.ownedParameter.forAll{p|
					// All parameters must be kermeta::standard::String
					//stdio.writeln("Checking parameter : " + p.toString)
					if (not p.type.isVoid())
					then
						//stdio.writeln("p.type : " + p.type.toString)
						// Check p.type is a String
						if (p.type.isInstanceOf(ParameterizedType))
						then
							var typeDef : TypeDefinition init p.type.asType(ParameterizedType).typeDefinition.asType(TypeDefinition)
							//stdio.writeln(" -> typeDef : " + typeDef.toString)
							typeDef.equals(stringTypeDef)
							
						else
							false
						end
						
					else
						false
					end				
				}
				
				//stdio.writeln("res="+res.toString)
				
				if (res==false and nbParameter==1)
				then
					//stdio.writeln("checking wether the parameter is Collection<String>")
					// In this case, the parameter must be Collection<String>
					var param : Parameter init self.ownedParameter.one
					if (not(param.containedType.isVoid))
					then
				  		param.containedType.each{ t |
							//stdio.writeln("   t : " + t.toString())
			  				if (t.isInstanceOf(ParameterizedType))
			  				then
								// Check it is a Collection<String>		  				
				  				// build a Collection<String> type
				  				var typeSeq : Sequence<Type> init Sequence<Type>.new
				  				typeSeq.add(Class.new.initializeFromAClassDefinition(stringTypeDef.asType(ClassDefinition)))
				  				var StringCollectionType : Type init Class.new.initializeFromAGenericClassDefinition(
				  								mm.getTypeDefinitionByQualifiedName("kermeta::standard::Collection").asType(ClassDefinition),
				  								typeSeq)

				  				//stdio.writeln("   stringCollType : " + StringCollectionType.toString)
				  				//res:=t.asType(ParameterizedType).typeEquals(StringCollectionType)
				  				res:=t.isSubTypeOf(StringCollectionType/*, Hashtable<TypeVariable, Type>.new*/)
				  				
			  				end 
							
				  		} 
					end
				end
				
			end
			
			//stdio.writeln("final res=" + res.toString)
		end
		
		
		res
	end

	/**
	 * Return value may not be initialized
	 */
	@Scope "RESOLVED"
	@IsWarning "true"
	inv check_callresult is do
		
		// Do not check abstract operations, operations with tag @CompilerIgnore "true"
		// and operations whose owning class are tagged @CompilerIgnore "true" 
		if (not(self.isAbstract) and not(self.kOwnedTags.exists{ t | (t.name.equals("CompilerIgnore") and t.~value.equals("true")) or (t.name.equals("ecore") and t.~value.equals("true")) }
										or self.owningClass.kOwnedTags.exists{t| t.name.equals("CompilerIgnore") and t.~value.equals("true") }))
		then
			var returnType : Type init self.type
			
			if (returnType.isVoid)
			then
				//stdio.writeln("returntype is void")
				true
			else
				//stdio.writeln("qualifiedName : " + returnType.getQualifiedName)
				if (returnType.getQualifiedName.equals("kermeta::standard::Void"))
				then
					// nothing to do
					true
				else
					// There has to be a properly set CallResult in the operation's body
					if (self.body.isVoid)
					then
						false
					else
						self.body.checkCallResults()
					end
				end
			end
		else
			true
		end
		
	end	
	/**
	 * suspecting bug 1979, it is currently impossible to have an operation that uses a name similar to an ecore attribute/reference equals get<AttributeName> or set<AttributeName>
	 */
	@Scope "RESOLVED"
	@IsWarning "true"
	inv bug_1979_ecore_accessor_conflict is do
		if name.startsWith("get") or name.startsWith("set") and not self.kOwnedTags.exists{ t | t.name.equals("ecore")} then
			var searchedClassDef : kermeta::standard::OrderedSet<TypeDefinition> init self.owningClass.getAllSuperTypeDefinitions
			searchedClassDef.add(self.owningClass)
			not searchedClassDef.exists{ td |
				td.asType(ClassDefinition).ownedAttribute.exists{ prop |
					(name.toLowerCase().equals("get"+prop.name.toLowerCase()) or name.toLowerCase().equals("set"+prop.name.toLowerCase())) 
					and prop.kOwnedTags.exists{ t | t.name.equals("ecore")}
				} 
			}
		else
			true
		end
	end
	
	/* 
	 * Test
	 */
	/*@Scope "RESOLVED"
	inv return_type_conformance is do
		
		
		log("Checking return_type_conformance for operation " + self.name + " - isAbstract : " + self.isAbstract.toString())
		
		if (not(self.body.isVoid))
		then
			// Get operation's return type
			var returnType : Type init self.type
			log("- return type : " + returnType.toString)
			log("  -> qualified name : " + returnType.getQualifiedName())
			// Retrieve all the operation's CallResults


			var allCallResults : Collection<CallResult>	init self.body.retrieveAllCallResults
			log("- CallResult found : " + allCallResults.size.toString)
			allCallResults.each{ cr | log(" -> CR:" + cr.toString)}
			//log("End of Checking return_type_conformance for operation " + self.name)
			
			
			// Comparing qualified names is not the best way to do
			// but it is "easier", especially when comparing to Void...
			if (returnType.getQualifiedName.equals("kermeta::standard::Void"))
			then
				// All CallResult must have the same staticType
				log("All CallResult must have the same staticType (kermeta::standard::Void)")
				allCallResults.forAll{ cr | 
					cr.staticType.getQualifiedName.equals("kermeta::standard::Void")
				}
			else
				log("returnType is not instanceOf Void")
				allCallResults.forAll{ cr |
				
					var typeVariableToSet : Hashtable<TypeVariable, Type> init Hashtable<TypeVariable, Type>.new 
					cr.staticType.isSubTypeOf(returnType, typeVariableToSet)

				}
			end
			

			
			//true
		else
			// it means that the operation is abstract
			true
		end
		
	end*/


}	
	
	
	
	
	/*
	 * Check use of deprecated
	 *
	 
	@Scope "MERGED"
	@IsWarning "true"
	inv use_deprecated is do
		// Check return Type of operation
		not (self.type.getMetaClass.typeDefinition.ownedTags.exists{ t | t.name.equals("deprecated") } )
		
		and
		// Check parameter types
		not (self.ownedParameter.exists{ p | p.type.getMetaClass.typeDefinition.ownedTags.exists{ t | t.name.equals("deprecated") } } )
		
	end
	*/
	

