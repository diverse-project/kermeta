/* $Id:$ 
 * Creation : November 23, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */

package org::kermeta::language::behavior;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

using kermeta::standard

aspect class Expression
{
	// This operation checks wether there is at least one CallResult in an operation body
	operation searchCallResult() : Boolean is abstract

	operation retrieveAllCallResults() : Collection<CallResult> is abstract	
	
	// This operation checks wether a CallResult is always reached in an operation
	operation checkCallResults() : Boolean is abstract
}

aspect class Block {
	
	method searchCallResult() : Boolean is do
		
		result := self.statement.exists{ s | s.searchCallResult } or
					self.rescueBlock.exists{ rb | rb.body.exists{ exp | exp.searchCallResult} }
	end
	
	method retrieveAllCallResults() : Collection<CallResult> is do
		var coll : Collection<CallResult> init Sequence<CallResult>.new
		
		self.statement.each{ s |
			coll.addAll(s.retrieveAllCallResults) 
		}
		self.rescueBlock.each{rb|
			rb.body.each{ exp | coll.addAll(exp.retrieveAllCallResults) }
		}
		
		result:=coll
	end
	
	method checkCallResults() : Boolean is do
		
		result:= self.statement.exists{ s | s.checkCallResults }

	end
}

aspect class Conditional {

	method searchCallResult() : Boolean is do
		
		result:=( self.thenBody.searchCallResult or 
					if (not(self.elseBody.isVoid))
					then
						self.elseBody.searchCallResult
					else
						false
					end
				)
	end
	
	method retrieveAllCallResults() : Collection<CallResult> is do
		var coll : Collection<CallResult> init Sequence<CallResult>.new
		coll.addAll(self.thenBody.retrieveAllCallResults)
		if (not(self.elseBody.isVoid))
		then
			coll.addAll(self.elseBody.retrieveAllCallResults)
		end	
		result:=coll
	end
	
	method checkCallResults() : Boolean is do
	
		if (elseBody.isVoid)
		then
			result:=false
		else
			result:= self.thenBody.checkCallResults() and self.elseBody.checkCallResults()
		end
	end
}

aspect class Raise {
	
	method searchCallResult() : Boolean is do
		result:=self.expression.searchCallResult
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		var coll : Collection<CallResult> init Sequence<CallResult>.new
		coll.addAll(self.expression.retrieveAllCallResults)
		result:=coll
	end
	
	method checkCallResults() : Boolean is do
		result:=false
	end
}

aspect class EmptyExpression {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}
aspect class SelfExpression {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}
aspect class Loop {
	
	method searchCallResult() : Boolean is do
		result:=if (not(self.body.isVoid))
		then
			self.body.searchCallResult
		else
			false
		end
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		var coll : Collection<CallResult> init Sequence<CallResult>.new
		if (not(self.body.isVoid))
		then
			coll.addAll(self.body.retrieveAllCallResults)
		end
		result:=coll
	end

	// You cannot be sure that you will get inside the loop ...
	method checkCallResults() : Boolean is do
		result:=false
	end

}
aspect class Assignment {
	
	method searchCallResult() : Boolean is do
		result:=if (not(self.target.isVoid))
				then
					self.target.searchCallResult
				else
					false
				end

	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		var coll : Collection<CallResult> init Sequence<CallResult>.new
		if (not(self.target.isVoid))
		then
			coll.addAll(self.target.retrieveAllCallResults)
		end
		result:=coll
	end
	
	method checkCallResults() : Boolean is do
		result:=if (not(self.target.isVoid))
				then
					self.target.checkCallResults
				else
					false
				end
	end

}
aspect class UnresolvedCall {
	
	method searchCallResult() : Boolean is do
		result:=false
	end
	
	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end
	

}
aspect class CallVariable {
	
	method searchCallResult() : Boolean is do
		result:=false

	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}
aspect class CallResult {
	
	method searchCallResult() : Boolean is do
		result:=true
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		var coll : Collection<CallResult> init Sequence<CallResult>.new
		coll.add(self)
		result:=coll
	end

	method checkCallResults() : Boolean is do
		result:=true
	end

}
aspect class CallEnumLiteral {
	
	method searchCallResult() : Boolean is do
		result:=false
	end
	
	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end


}
aspect class CallFeature {
	
	method searchCallResult() : Boolean is do
		result:=false

	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end
	
	
}
aspect class CallProperty {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}
aspect class CallOperation {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}

aspect class CallSuperOperation {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}

aspect class LambdaExpression {
	
	method searchCallResult() : Boolean is do
		result:=self.body.searchCallResult
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		var coll : Collection<CallResult> init Sequence<CallResult>.new
		coll.addAll(self.body.retrieveAllCallResults)	
		result:=coll
	end
	
	// cannot be sure to reach the body of a lambda expression
	method checkCallResults() : Boolean is do
		result:=false
	end
	
	
}
aspect class JavaStaticCall {
	
	method searchCallResult() : Boolean is do
		result:=self.parameters.exists{p| p.searchCallResult}
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		var coll : Collection<CallResult> init Sequence<CallResult>.new
		self.parameters.each{ p |
			coll.addAll(p.retrieveAllCallResults)
		}
		result:=coll
	end

	method checkCallResults() : Boolean is do
		result:=false
	end
	
	
}
aspect class VariableDecl {
	
	method searchCallResult() : Boolean is do
		//result:=false
		result:= if (not(self.initialization.isVoid)) 
				 then self.initialization.searchCallResult 
				 else false 
				 end
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		var coll : Collection<CallResult> init Sequence<CallResult>.new
		if (not(self.initialization.isVoid))
		then
			coll.addAll(self.initialization.retrieveAllCallResults)
		end
		result:=coll
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}

aspect class IntegerLiteral {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}
aspect class StringLiteral {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}
aspect class VoidLiteral {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}
aspect class BooleanLiteral {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}
aspect class CallTypeLiteral {
	
	method searchCallResult() : Boolean is do
		result:=false
	end

	method retrieveAllCallResults() : Collection<CallResult> is do
		result:=Sequence<CallResult>.new
	end

	method checkCallResults() : Boolean is do
		result:=false
	end

}
