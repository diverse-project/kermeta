/* $Id:$ 
 * Creation : October 27, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */
@mainClass "org::kermeta::language::checker::MainCheckerV2"
@mainOperation "check"


package org::kermeta::language::checker;

require kermeta

//require "platform:/lookup/org.kermeta.language.checker/src/main/kermeta/checker/Checker.kmt"
require "platform:/lookup/org.kermeta.language.checker/src/main/kermeta/checker/OptimizedKermetaChecker.kmt"
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"


using org::kermeta::language::structure
using kermeta::standard

using org::kermeta::diagnostic

class MainCheckerV2
{
	operation check(/*mu:ModelingUnit*/) : Void is do 
		
		
		//org.kermeta.language.api.tests/src/main/resources/KmResolver_Valid/valid_001/001_testHelloWorld_standalone.km
		//var file : String init "platform:/resource/org.kermeta.language.api.tests/src/main/resources/KmResolver_Valid/valid_001/001_testHelloWorld_standalone.km"
		var file : String init "platform:/resource/org.kermeta.language.resolver/src/tests/HelloWorldMiniframework.km"
		
		// load 		
		var inputRep : kermeta::persistence::EMFRepository init kermeta::persistence::EMFRepository.new
		var inputRes : kermeta::persistence::EMFResource
		
		inputRep.registerEcoreFile("platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore")
		
		inputRes ?= inputRep.createResource(file,
						"http://www.kermeta.org/kermeta/2_0_0/")
		
		inputRes.load()
		
		var mms : Set<Metamodel>
		mms ?= inputRes.contents
		
	
		var myChecker : Checker init Checker.new
		
		//myChecker.initialize()
		
		// test mms
		var diagModels : Collection<DiagnosticModel> init OrderedSet<DiagnosticModel>.new
		var diagModel : DiagnosticModel
		var numberFailedConstraints : Integer init 0
		mms.each{mm|
			diagModel := myChecker.checkObject(mm, "MERGER")
			diagModels.add(diagModel)
			numberFailedConstraints := numberFailedConstraints + diagModel.diagnostics.size
		}
		
		
		stdio.writeln("Number of failed constraints : " + numberFailedConstraints.toString)
		
		diagModels.each{dm|
			dm.diagnostics.each{ diag |
				stdio.writeln("------------------------------")
				stdio.writeln("Invariant " + diag.failedConstraint.asType(InvariantProxy).invariantName 
						+ " for Class " + diag.failedConstraint.asType(InvariantProxy).metaclassQualifiedName
						+ " in " + diag.failedConstraint.asType(InvariantProxy).mmUri)
				stdio.writeln(" on object : " + diag.appliesTo.asType(ModelReference).referencedObject.toString)
				
				
			}
		}
		
		// test packages :
		//mu.packages.each{ p | myChecker.checkObject(p) }
		
		
	end

}
