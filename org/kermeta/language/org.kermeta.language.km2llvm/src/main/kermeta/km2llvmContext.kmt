/* $Id:$ 
 * Creation : November 27, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::km2llvm;

require kermeta
require "llvmHelper.kmt"

using kermeta::utils
using kermeta::standard
using org::kermeta::language::llvm
using kermeta::io

class Context{
	attribute llvm : LLVMHelper
	// The llvm code defining all the strings defined in the km.
	attribute strings : StringBuffer
	// This map contains tuples of (name of the variable, string represented)
	// It is useful to know if a string has been already compiled in llvm and to get its variable name.
	attribute stringVars : Hashtable<String, String>
	// The llvm code defining all the types defined in the km.
	attribute types : StringBuffer
	// The constructors	
	attribute constructors : StringBuffer
	// The getters
	attribute getters : StringBuffer
	// The cast operations
	attribute casts : StringBuffer
	// The operations
	attribute operations : StringBuffer
	// Used to count the string constants (to name it).
	attribute cptStrings : Integer
	// Used to have unique ID.
	attribute id : Integer
	
	operation initialise() : Context is do
		llvm := LLVMHelper.new
		strings := StringBuffer.new
		stringVars :=  Hashtable<String, String>.new
		constructors := StringBuffer.new
		types := StringBuffer.new
		getters := StringBuffer.new
		operations := StringBuffer.new
		casts := StringBuffer.new
		cptStrings := 0
		id := 0
		result := self
	end
	
	
	operation nextId() : Integer is do 
		id := id + 1
		result := id
	end
	
	operation llvmCode() : StringBuffer is do
		result := StringBuffer.new
		
		// Loading the lib standard llvm code.
		var f : FileIO init FileIO.new
		
		result.append(f.readTextFile("file:///home/ablouin/workspace/org.kermeta.language.km2llvm/src/main/C/lib_std/lib_std.s"))
		result.append(strings.toString)
		result.append(types.toString)
		result.append(constructors.toString)
		result.append(getters.toString)
		result.append(casts.toString)
		result.append(operations.toString)
	end
	
	// Returns the name of the variable corresponding to the given string.
	// If the variable does not exist, it is created and added to the pool of strings
	// (thus, generated as a string constant in llvm).
	operation getStringVarName(str:String) : String is do
		result := stringVars.getValue(str)

		if(result.isVoid) then
			result := "s"+cptStrings.toString
			stringVars.put(str, result)
			strings.append(llvm.assign(llvm.globalVar(result), "private unnamed_addr constant ["+(str.size+1).toString+" x i8] c\""+str+"\\00\"")).append("\n")
			cptStrings := cptStrings + 1
		end
	end
}
