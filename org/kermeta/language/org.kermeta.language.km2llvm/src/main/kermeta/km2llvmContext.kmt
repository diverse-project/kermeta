/* $Id:$ 
 * Creation : November 27, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::km2llvm;

require kermeta
require "llvmHelper.kmt"
require "./km2llvm_aspectGenerator.kmt"
require "./behaviour/km2llvm_stdlib_calls.kmt"

using kermeta::utils
using kermeta::standard
using org::kermeta::language::llvm
using org::kermeta::language::behavior
using org::kermeta::language::structure
using kermeta::io

class Context{
	attribute llvm : LLVMHelper
	// The llvm code defining all the strings defined in the km.
	attribute strings : StringBuffer
	// This map contains tuples of (name of the variable, string represented)
	// It is useful to know if a string has been already compiled in llvm and to get its variable name.
	attribute stringVars : Hashtable<String, String>
	// The llvm code defining all the types defined in the km.
	attribute types : StringBuffer
	// The constructors	
	attribute constructors : StringBuffer
	// The getters
	attribute getters : StringBuffer
	// The cast operations
	attribute casts : StringBuffer
	// The adapters generated for the dynamic binding.
	attribute adapters : StringBuffer
	// The operations
	attribute operations : StringBuffer
	// The tables of operations used to do the dynamic binding.
	attribute tablesDynBinding : StringBuffer
	// Used to count the string constants (to name it).
	attribute cptStrings : Integer
	// Used to have unique ID.
	attribute id : Integer
	// a counter for generating variables in operations.
	attribute currentVarCpt : Integer
	// The real names of the std library types.
	attribute stdLibName : Hashtable<String, String>
	// The commands to generate simple calls for primitive types
	attribute stdLibCmd : Hashtable<String, CallGeneratorCmd>
	// The object defining the size of the basic elements.
	attribute size : Size
	// The classes generated. Used to generate the cast at the end of the process.
	reference classes : oset ClassDefinition[*]


	operation reinitOperationVar() is do currentVarCpt := 1 end

	// To use for generating variables for operations.
	operation nextOperationVar() : String is do 
		result := llvm.localVar(currentVarCpt.toString)
		currentVarCpt := currentVarCpt + 1
	end
	
	operation nextLabel() : String is do
		result := "llvmlabel"+currentVarCpt.toString
		currentVarCpt := currentVarCpt + 1
	end
	
	
	operation initialise() : Context is do
		stdLibName :=  Hashtable<String, String>.new
		llvm := LLVMHelper.new
		strings := StringBuffer.new
		stringVars :=  Hashtable<String, String>.new
		constructors := StringBuffer.new
		types := StringBuffer.new
		getters := StringBuffer.new
		operations := StringBuffer.new
		casts := StringBuffer.new
		tablesDynBinding := StringBuffer.new
		adapters := StringBuffer.new
		cptStrings := 0
		id := 0
		reinitOperationVar
		size := Size64.new
		result := self
		
		stdLibName.put("kermeta_standard__Void", llvm.~void)
		stdLibName.put("kermeta_standard__String", llvm.i8+"*")
		stdLibName.put("kermeta_standard__Boolean", llvm.i1)
		stdLibName.put("kermeta_standard__Integer", llvm.i32)
		stdLibName.put("kermeta_io__StdIO", "%struct.kermeta_io__StdIO*")
		
		initialiseStdLibHashMap
	end
	
	
	operation initialiseStdLibHashMap() is do
		stdLibCmd := Hashtable<String, CallGeneratorCmd>.new
		stdLibCmd.put("@kermeta_standard__Integer___plus", GenerateIntegerPlusCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___equals", GenerateIntegerEqualsCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___isGreater", GenerateIntegerIsGreaterCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___isGreaterOrEqual", GenerateIntegerIsGreaterOrEqualCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___isLower", GenerateIntegerIsLowerCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___minus", GenerateIntegerMinusCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___isLowerOrEqual", GenerateIntegerIsLowerOrEqualCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___isNotEqual", GenerateIntegerIsNotEqualCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___mult", GenerateIntegerMultCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___div", GenerateIntegerDivCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___mod", GenerateIntegerModCall.new)
		stdLibCmd.put("@kermeta_standard__Integer___umin", GenerateIntegerUminCall.new)
		
		stdLibCmd.put("@kermeta_standard__Boolean___not", GenerateBooleanNotCall.new)
		stdLibCmd.put("@kermeta_standard__Boolean___equals", GenerateBooleanEqualsCall.new)
		stdLibCmd.put("@kermeta_standard__Boolean___and", GenerateBooleanAndCall.new)
		stdLibCmd.put("@kermeta_standard__Boolean___or", GenerateBooleanOrCall.new)
		stdLibCmd.put("@kermeta_standard__Boolean___toString", GenerateBooleanToStringCall.new)
		
		stdLibCmd.put("@kermeta_standard__Object___isVoid", GenerateObjectIsVoidCall.new)
	end
	
	
	operation nextId() : Integer is do 
		id := id + 1
		result := id
	end
	
	operation llvmCode() : StringBuffer is do
		result := StringBuffer.new
		
		// Loading the lib standard llvm code.
		var f : FileIO init FileIO.new
		
		result.append(f.readTextFile("file:///home/ablouin/workspace/org.kermeta.language.km2llvm/src/main/C/lib_std/lib_std.s"))
		result.append(strings.toString)
		result.append(types.toString)
		result.append(tablesDynBinding.toString)
		result.append(constructors.toString)
		result.append(getters.toString)
		// The cast operations must be generated at the end to be sure to have the collection lowerTypes filled.
		classes.each{cl | cl.generateLLVMCast(self)}
		result.append(casts.toString)
		result.append(adapters.toString)
		result.append(operations.toString)
	end
	
	// Returns the name of the variable corresponding to the given string.
	// If the variable does not exist, it is created and added to the pool of strings
	// (thus, generated as a string constant in llvm).
	operation getStringVarName(str:String) : String is do
		result := stringVars.getValue(str)

		if(result.isVoid) then
			result := llvm.globalVar("s"+cptStrings.toString)
			stringVars.put(str, result)
			strings.append(llvm.assign(result, "private unnamed_addr constant ["+(str.size+1).toString+" x i8] c\""+str+"\\00\"")).append("\n")
			cptStrings := cptStrings + 1
		end
	end


	/**
		Generates a cast call from the first given type to the second one. The name of the var to
		cast is varNameToCast.
		It returns the name of the variable containing the casted object.
	*/
	operation generateCastCall(buf:StringBuffer, varNameToCast:String, fromType:String, toType:String) : String is do
		// The result is the new variable containing the cast.
		result := nextOperationVar
		var params:Sequence<LLVMVar> init Sequence<LLVMVar>.new
		
		// The parameter is the object to cast.
		params.add(LLVMVar.new.initialise(llvm.pointer(llvm.localVar(fromType)), varNameToCast))
		// creating a new variable containing the cast
		buf.append(llvm.assign(result, llvm.call(llvm.globalVar("cast_"+fromType+"_"+toType), llvm.pointer(llvm.localVar(toType)), params, void))).append("\n")
		params.clear // cleaning
	end
	
	
	operation generateAdapter(opFrom:Operation, opTo:Operation, ctx:Context) : Operation is do
		reinitOperationVar
		var tmp1 : String init opFrom.name
		var tmp2 : String init opFrom._llvmName
		opFrom.name := opFrom.getLLVMPrototype(ctx)+"_to_"+opTo.getLLVMPrototype(ctx)+"#adapter"
		opFrom.name := opFrom.name.replace("\"", "")
		var proto : String init opFrom.getPrototype(self)
		opFrom._llvmName := void
		result := Operation.new
		result.duplicateHeaderUsing(opFrom, self)

	// Creating the header of the function.	
		var fctAttr: Sequence<FunctionAttr> init  Sequence<FunctionAttr>.new
		fctAttr.add(FunctionAttr.inlinehint)
		var attrs : Sequence<LLVMVar> init  Sequence<LLVMVar>.new
		var typeFrom : String init llvm.pointer(llvm.localVar(opFrom.owningClass.qualifiedNameLLVM))
		var typeTo : String init llvm.pointer(llvm.localVar(opTo.owningClass.qualifiedNameLLVM))

		// Creation of the parameters
		opFrom.ownedParameter.each{param | attrs.add(LLVMVar.new.initialise(param.type.llvmType(self), llvm.localVar(param.name))) }
		// The last parameter is the calling object
		attrs.add(LLVMVar.new.initialise(typeFrom, llvm.localVar("self")))
		
		adapters.append(llvm.define(LinkageType.internal, opTo.type.llvmType(self), opFrom.llvmName(self), attrs, fctAttr)).append("{\n")
	// Casting the variable self into the expected type.
		var v1 : String init generateCastCall(adapters, llvm.localVar("self"), opFrom.owningClass.qualifiedNameLLVM, opTo.owningClass.qualifiedNameLLVM)
	// Calling the decorated method.
	// and returning the value returned by the decorated method.
		var v2 : String init nextOperationVar
		
		attrs.removeAt(attrs.size-1) // Removing the parameter self
		attrs.add(LLVMVar.new.initialise(typeTo, v1)) // to be replaced with the casted object.

		if opTo.type.isVoidType(self) then
			adapters.append(llvm.call(opTo.llvmName(self), opTo.type.llvmType(self), attrs, void)).append("\n")
			adapters.append(llvm.ret(llvm.~void, void)).append("\n")
		else
			adapters.append(llvm.assign(v2, llvm.call(opTo.llvmName(self), opTo.type.llvmType(self), attrs, void))).append("\n")
			adapters.append(llvm.ret(opTo.type.llvmType(self), v2)).append("\n")
		end

		adapters.append("}\n")
		
		opFrom._llvmName := tmp2
		opFrom.name := tmp1
		fctAttr.clear
		attrs.clear
	end
}



abstract class Size {
	operation pointer() : Integer is abstract
	operation int() : Integer is abstract
	operation double() : Integer is abstract
	operation bool() : Integer is do result := 1 end
	operation maxBlock() : Integer is abstract
}


class Size64 inherits Size {
	method pointer() : Integer is do result := 8 end
	method int() : Integer is do result := 4 end
	method double() : Integer is do result := 8 end
	method maxBlock() : Integer is do result := 8 end
}




// This class is a command to execute the LLVM code generation of calls.
abstract class CallGeneratorCmd {
	operation generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is abstract
}


// This class is a 2-tuple used by CallGeneratorCmd as result of the operation generateCall
class GeneratorCmdResult inherits Tuple2<String, Boolean> {
	operation initialise(val:String, callInlined:Boolean) : GeneratorCmdResult is do
		result := self
		v1 := val
		v2 := callInlined
	end
}


// Definition of a 2-tuple
abstract class Tuple2<S, T> {
	reference v1:S
	reference v2:T
}
