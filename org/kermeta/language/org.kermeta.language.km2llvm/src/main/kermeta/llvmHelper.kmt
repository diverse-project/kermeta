/* $Id:$ 
 * Creation : November 28, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::llvm;

require kermeta

using kermeta::utils
using kermeta::standard

class LLVMHelper {
	operation add(type:String, op1:String, op2:String) : String is do
		result := "add " + type + " " + op1 + ", " + op2
	end

	operation label(name:String):String is do result := name+":" end

	operation br_uncond(label:String):String is do result := "br label "+label end

	operation br(cond:String, labelTrue:String, labelFalse:String) : String is do
		result := "br "+i1+" "+cond+", label "+labelTrue+",label "+labelFalse
	end

	operation icmp(cond:IcmpCondition, type:String, v1:String, v2:String) : String is do
		result := "icmp "+cond.name+" "+type+" "+v1+", "+v2		
	end

	operation getStringType(str:String):String is do
		result := "[" + (str.size+1).toString + " x i8]*"  
	end

	operation ~alias(trueName:String, aliasName:String) : String is do
		result := assign(aliasName, "alias " + trueName)
	end

	operation pointerString(str:String, name:String) : String is do
		result := getelementptr("["+(str.size+1).toString+" x i8]*", name, i32, 0, i32, 0, true)
	end

	operation constStruct(type:String, varName:String, attrs:Sequence<LLVMVar>) : String is do
		var buf : StringBuffer init StringBuffer.new
		var size : Integer init attrs.size-1
		buf.append(varName).append(" = constant ").append(type).append("{")
		flatListString(buf, attrs, ", ")
		buf.append("}")
		result := buf.toString
	end

	operation load(type:String, varName:String) : String is do result := "load " + type + " " + varName end

	operation store(typeNew:String, varNew:String, varContainer:String) : String is do
		result := "store " + typeNew + " " + varNew + ", " +  pointer(typeNew) + " " + varContainer
	end

	operation i1() : String is do result := "i1" end
	operation i8() : String is do result := "i8" end
	operation i32() : String is do result := "i32" end
	operation i64() : String is do result := "i64" end
	operation ~void() : String is do result := "void" end
	operation ~true() : String is do result := "true" end
	operation ~false() : String is do result := "false" end

	operation getelementptr(typeVal:String, val:String, type1:String, pos1:Integer, type2:String, pos2:Integer, asFct:Boolean) : String is do
		var sep1 : String
		var sep2 : String
		
		if(asFct) then 
			sep1 := "("
			sep2 := ")"
		else
			sep1 := " "
			sep2 := ""
		end
		result := "getelementptr" + sep1 + typeVal + " " + val + "," + type1 + " " + pos1.toString + "," + type2 + " " + pos2.toString+sep2
	end

	operation call(name:String, return:String, params:Sequence<LLVMVar>) : String is do
		var buf : StringBuffer init StringBuffer.new
		buf.append("call ").append(return).append(" ").append(name).append("(")
		if(not params.isVoid) then
			flatListString(buf, params, ", ")
		end
		buf.append(")")
		result := buf.toString
	end


	operation ret(type:String, val:String):String is do 
		result := "ret " + type
		if not val.isVoid then result := result + " " + val end
	end
	
	
	operation alloca(type:String):String is do result := "alloca "+type end
	
	operation assign(left:String, right:String):String is do result := left+" = "+right end
	
	operation type(varName:String, attributes : Sequence<LLVMVar>) : String is do
		var buf : StringBuffer init StringBuffer.new
		var size : Integer init attributes.size-1
		buf.append(varName).append(" = type {")
		flatListString(buf, attributes, ", ")
		buf.append("}")
		result := buf.toString
	end
	
	
	operation define(linkage:LinkageType, return:String, name:String, params:Sequence<LLVMVar>, fctAttr:Sequence<FunctionAttr>) : String is do
		var buf : StringBuffer init StringBuffer.new
		buf.append("define ")

		if(not linkage.isVoid) then buf.append(linkage.name).append(" ") end

		buf.append(return).append(" ").append(name).append("(")

		if(not params.isVoid) then flatListString(buf, params, ", ") end

		buf.append(")")
		
		if(not fctAttr.isVoid) then	fctAttr.each{attr | buf.append(" ").append(attr.name) } end
		
		result := buf.toString
	end
	
	
	operation flatListString(buf:StringBuffer, list:OrderedCollection<LLVMVar>, sep:String) is do
		if(not list.isVoid) then
			var size : Integer init list.size-1
			from var i : Integer init 0
			until i>=size
			loop
				buf.append(list.elementAt(i).typedName).append(sep)
				i := i + 1
			end
			if(list.size>0) then buf.append(list.elementAt(list.size-1).typedName) end
		end
	end
	

	operation pointer(varName:String) : String is do
		result := varName + "*"
	end
	
	operation localVar(name:String) : String is do
		result := "%" + llvmID(name)
	end
	
	
	operation globalVar(name:String) : String is do
		result := "@" + llvmID(name)
	end
	
	
	operation llvmID(name:String) : String is do
		result := "\"" + name + "\""
	end
}


class LLVMVar {
	attribute name:String
	attribute type:String
	
	operation initialise(llvmType:String, llvmName:String) : LLVMVar is do
		result := self
		if(llvmType.isVoid) then type := "" else type := llvmType end
		if(llvmName.isVoid) then name := "" else name := llvmName end
	end
	
	operation typedName() : String is do 
		if type.size==0 then result := name
		else if name.size==0 then result := type
		else result := type + " " + name end end
	end
}



enumeration IcmpCondition {
eq; ne; ugt; uge; ult; ule; sgt; sge; slt; sle;
}


enumeration FunctionAttr {//FIXME: no lignstack(<n>)
	address_safety; alwaysinline; nonlazybind; inlinehint; naked; noimplicitfloat; noinline; noredzone; noreturn; nounwind; optsize; readnone; ~readonly; 
	returns_twice; ssp; sspreq; uwtable;
}


enumeration LinkageType {
	internal; private; linker_private; linker_private_weak; available_externally; linkonce; weak; common; appending; extern_weak; linkonce_odr; weak_odr;
	linkonce_odr_auto_hide; external; dllimport; dllexport;
}


