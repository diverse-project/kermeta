/* $Id:$ 
 * Creation : November 28, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::llvm;

require kermeta

using kermeta::utils
using kermeta::standard

class LLVMHelper {
	operation store(typeNew:String, varNew:String, varContainer:String) : String is do
		result := "store " + typeNew + " " + varNew + "," +  pointer(typeNew) + " " + varContainer
	end

	operation i32() : String is do result := "i32" end
	operation i64() : String is do result := "i64" end

	operation getelementptr(return:String, val:String, type1:String, pos1:Integer, type2:String, pos2:Integer) : String is do 
		result := "getelementptr " + return + " " + val + "," + type1 + " " + pos1.toString + "," + type2 + " " + pos2.toString
	end

	operation call(name:String, return:String, params:Sequence<String>) : String is do
		var buf : StringBuffer init StringBuffer.new
		buf.append("call ").append(return).append(" ").append(name).append("(")
		flatListString(buf, params, ", ")
		buf.append(")")
		result := buf.toString
	end

	operation return(type:String, val:String):String is do result := "ret " + type + " " + val end
	
	operation alloca(type:String):String is do result := "alloca "+type end
	
	operation assign(left:String, right:String):String is do result := left+" = "+right end
	
	operation type(varName:String, attributes : Sequence<String>) : String is do
		var buf : StringBuffer init StringBuffer.new
		var size : Integer init attributes.size-1
		buf.append(varName).append(" = type {")
		flatListString(buf, attributes, ", ")
		buf.append("}")
		result := buf.toString
	end
	
	
	operation define(linkage:LinkageType, return:String, name:String, params:Sequence<String>, fctAttr:Sequence<FunctionAttr>) : String is do
		var buf : StringBuffer init StringBuffer.new
		buf.append("define ")

		if(not linkage.isVoid) then buf.append(linkage.name).append(" ") end

		buf.append(return).append(" ").append(name).append("(")

		if(not params.isVoid) then flatListString(buf, params, ", ") end

		buf.append(")")
		
		if(not fctAttr.isVoid) then	fctAttr.each{attr | buf.append(" ").append(attr.name) } end
		
		result := buf.toString
	end
	
	
	operation flatListString(buf:StringBuffer, list:OrderedCollection<String>, sep:String) is do
		if(not list.isVoid) then
			var size : Integer init list.size-1
			from var i : Integer init 0
			until i>=size
			loop
				buf.append(list.elementAt(i)).append(sep)
				i := i + 1
			end
			if(list.size>0) then buf.append(list.elementAt(list.size-1)) end
		end
	end
	

	operation pointer(varName:String) : String is do
		result := varName + "*"
	end
	
	operation localVar(name:String) : String is do
		result := "%" + llvmID(name)
	end
	
	
	operation globalVar(name:String) : String is do
		result := "@" + llvmID(name)
	end
	
	
	operation llvmID(name:String) : String is do
		result := "\"" + name + "\""
	end
}


enumeration FunctionAttr {//FIXME: no lignstack(<n>)
	address_safety; alwaysinline; nonlazybind; inlinehint; naked; noimplicitfloat; noinline; noredzone; noreturn; nounwind; optsize; readnone; ~readonly; 
	returns_twice; ssp; sspreq; uwtable;
}


enumeration LinkageType {
	internal; private; linker_private; linker_private_weak; available_externally; linkonce; weak; common; appending; extern_weak; linkonce_odr; weak_odr;
	linkonce_odr_auto_hide; external; dllimport; dllexport;
}


