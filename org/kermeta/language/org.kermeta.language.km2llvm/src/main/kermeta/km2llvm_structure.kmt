/* $Id:$ 
 * Creation : November 27, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::structure;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "km2llvm_aspectGenerator.kmt"

using org::kermeta::language::km2llvm
using kermeta::standard
using org::kermeta::language::llvm

aspect class KermetaModelElement inherits LLVMGenerator{}


aspect class Metamodel {
	method generateLLVM(ctx:Context) is do
		packages.each{pkg | pkg.generateLLVM(ctx)}
	end
	
	method preprocess4LLVM() is do
		packages.each{pkg | pkg.preprocess4LLVM}
	end
}


aspect class Type {
	operation llvmType() : String is abstract
}


aspect class Class {
	method llvmType() : String is do
		result := typeDefinition.qualifiedNameLLVM
	end
}


aspect class Enumeration {
	method llvmType() : String is do
		result := "FIXMEEnum"
	end
	
	method generateLLVM(ctx:Context) is do
		stdio.writeln("FIXME ENUM GENERATE LLVM")
	end
}


aspect class PrimitiveType {
	method llvmType() : String is do
		result := name
		if(container.isKindOf(Package)) then
			result := container.asType(Package).getLLVMQualifiedName + "_" + result
		end
	end
}


aspect class ClassDefinition {
	// Generates the LLVM code
	method generateLLVM(ctx:Context) is do
		generateLLVMType(ctx)
		generateLLVMConstructor(ctx)
		generateLLVMGetters(ctx)
	end
	
	
	operation generateLLVMGetters(ctx:Context) is do
		var params : Sequence<String> init  Sequence<String>.new
		var fctAttr: Sequence<FunctionAttr> init  Sequence<FunctionAttr>.new
		var typeCD : String init ctx.llvm.pointer(ctx.llvm.localVar(qualifiedNameLLVM))
		var selfVar : String init ctx.llvm.localVar("self")
		var returnVar : String init ctx.llvm.localVar("r")
		var getterName : String
		var cpt : Integer init superTypes.size + lowerTypes.size
		var returnType : String
		
		params.add(typeCD + " " + selfVar)
		fctAttr.add(FunctionAttr.~readonly)
		fctAttr.add(FunctionAttr.inlinehint)
		
		ownedAttribute.each{attr |
			returnType := ctx.llvm.pointer(ctx.llvm.pointer(ctx.llvm.localVar(attr.type.llvmType)))
			getterName := ctx.llvm.globalVar(qualifiedNameLLVM + ".#" + attr.name )
			ctx.getters.append(ctx.llvm.define(LinkageType.internal, returnType, getterName, params, fctAttr)).append("{\n")
			ctx.getters.append(ctx.llvm.assign(returnVar, ctx.llvm.getelementptr(typeCD, selfVar, ctx.llvm.i32, 0, ctx.llvm.i32, cpt))).append("\n")
			ctx.getters.append(ctx.llvm.return(returnType, returnVar)).append("\n")
			ctx.getters.append("}\n")
			cpt := cpt + 1
		}
	end
	
	
	// Generates the llvm type corresponding to the class.
	operation generateLLVMType(ctx:Context) is do
//		allSupertypes := getAllSuperTypes
//		allLowertypes := getAllLowerTypes
		
		// Creating the supertype parameters
		var list : Sequence<String> init superTypes.collect{st | ctx.llvm.pointer(ctx.llvm.localVar(st.qualifiedNameLLVM)) }
		// Creating the lowertype parameters
		list.addAll(lowerTypes.collect{st | ctx.llvm.pointer(ctx.llvm.localVar(st.qualifiedNameLLVM))})
		ownedAttribute.each{attr | list.add(ctx.llvm.pointer(ctx.llvm.localVar(attr.type.llvmType))) }
		ctx.types.append(ctx.llvm.type(ctx.llvm.localVar(qualifiedNameLLVM), list)).append("\n")
	end
	
	
	// Generates the contructor of the class.
	operation generateLLVMConstructor(ctx:Context) is do
	 	var typeName : String init ctx.llvm.pointer(ctx.llvm.localVar(qualifiedNameLLVM))
	 	var resultVar : String init "%r"
	 	ctx.constructors.append(ctx.llvm.define(LinkageType.internal, typeName, ctx.llvm.globalVar("create_" + qualifiedNameLLVM), void, void)).append("{\n")
		
		// Creation of the object.
		ctx.constructors.append(ctx.llvm.assign(resultVar, ctx.llvm.alloca(ctx.llvm.localVar(qualifiedNameLLVM)))).append("\n")
		
		// Creation of the super types.
		var i : Integer init 0
		var istr : String
		var ptrSuperType : String
		superTypes.each{st |
			istr := i.toString
			ptrSuperType := ctx.llvm.pointer(ctx.llvm.localVar(st.qualifiedNameLLVM))
			ctx.constructors.append(ctx.llvm.assign("%\""+istr+"\"", ctx.llvm.call("@\"create_"+st.qualifiedNameLLVM+"\"", ptrSuperType, void))).append("\n")
			ctx.constructors.append(ctx.llvm.assign("%\""+istr+istr+"\"",  ctx.llvm.getelementptr(typeName, resultVar, ctx.llvm.i32, 0, ctx.llvm.i32, i))).append("\n")
			ctx.constructors.append(ctx.llvm.store(ptrSuperType, "%\""+istr+"\"", "%\""+istr+istr+"\"")).append("\n")
			i := i + 1
		}

		// Returning the created object.
		ctx.constructors.append(ctx.llvm.return(typeName, resultVar)).append("\n}\n")
	end
}


aspect class Package {
	// Preprocessing useful for the compilation
	operation preprocess4LLVM() is do
		ownedTypeDefinition.each{td | td.preprocess4LLVM}
		nestedPackage.each{pkg | pkg.preprocess4LLVM}
	end

	// Generates the LLVM code
	method generateLLVM(ctx:Context) is do
		ownedTypeDefinition.each{td | td.generateLLVM(ctx)}
		nestedPackage.each{pkg | pkg.generateLLVM(ctx)}
	end
	
	// Returns the qualified name of the package
	operation getLLVMQualifiedName() : String is do
		result := name
		if(not nestingPackage.isVoid) then
			result := nestingPackage.getLLVMQualifiedName + "::" + result
		end
	end
}


aspect class TypeDefinition {
	// The lower types of the class. Computed during pre-processing.
	reference lowerTypes : oset TypeDefinition[*]
	reference superTypes : oset TypeDefinition[*]
	
	// This sequence is useful to keep a trace of the order of the created llvm super-types (in fact attributes
	// of the llvm type). If you want to access in llvm to a super-type, we just have to get the position of 
	// the searched type into that list.
//	reference allSupertypes : OrderedSet<TypeDefinition>
//	reference allLowertypes : OrderedSet<TypeDefinition>
	
	attribute qualifiedNameLLVM : String
	

	operation defineLowerSuperTypes() is do
		var superT : TypeDefinition
		superType.each{st |
			if st.isInstanceOf(Class) then
				superT := st.asType(Class).typeDefinition
				superT.lowerTypes.add(self)	
				superTypes.add(superT)
			end
		}
	end
	
/* 	operation getAllLowerTypes() : OrderedSet<TypeDefinition> is do
		result := OrderedSet<TypeDefinition>.new
		lowerTypes.each{st |
			result.add(st)
			result.addAll(st.getAllLowerTypes)
		}
		var cd : ClassDefinition init self.asType(ClassDefinition)
	end	
	
	
	operation getAllSuperTypes() : OrderedSet<TypeDefinition> is do
		result := OrderedSet<TypeDefinition>.new
		superTypes.each{st |
			result.add(st)
			result.addAll(st.getAllLowerTypes)
		}
	end
*/ 
	operation preprocess4LLVM() is do
		defineLowerSuperTypes
		qualifiedNameLLVM := getLLVMQualifiedName
	end
	
	
	operation getLLVMQualifiedName() : String is do
		result := name
		if(container.isKindOf(Package)) then
			result := container.asType(Package).getLLVMQualifiedName + "_" + result
		end
	end
}
