/* $Id:$ 
 * Creation : January 3, 2013
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::km2llvm;

require kermeta
require "./km2llvm_calls.kmt"

using kermeta::standard
using kermeta::utils
using org::kermeta::language::km2llvm
using org::kermeta::language::llvm
using org::kermeta::language::behavior


// Integer
class GenerateIntegerToStringCall inherits CallGeneratorCmd {
	// Required to cast the given i1 boolean into a i8 Clang boolean.
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		result := GeneratorCmdResult.new.initialise(ctx.llvm.call("@kermeta_standard__Integer___toString", ctx.llvm.pointer(ctx.llvm.i8), params, void), false)
	end
}


// StdIO
class GenerateStdIOWritelnCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		params.removeAt(1) // Removing the callign object.
		result := GeneratorCmdResult.new.initialise(ctx.llvm.call("@puts", ctx.llvm.i32, params, void), false)
	end
}


// Object
class GenerateObjectIsVoidCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		// If the type is a pointer, it can be compared to null.
		if call.target.staticType.isPointer(ctx) then
			result := GeneratorCmdResult.new.initialise(ctx.llvm.icmp(IcmpCondition.eq, call.target.staticType.llvmType(ctx), params.at(0).name, ctx.llvm.null), false)
		else // otherwise, false is returned and the call is inlined.
			result := GeneratorCmdResult.new.initialise("false", true)
		end
	end
}

/* 
class GenerateObjectContainerCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		result := GeneratorCmdResult.new.initialise(ctx.llvm.call("@kermeta_standard__Object___container", "%struct.kermeta_standard__Object*", params, void), false)
	end
}*/



// Boolean
 class GenerateBooleanToStringCall inherits CallGeneratorCmd {
	// // Required to cast the given i1 boolean into a i8 Clang boolean.
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
	//	var varName : String init ctx.nextOperationVar
	//	// Casting i1 to i8
	//	ctx.operations.append(ctx.llvm.assign(varName, ctx.llvm.zext(ctx.llvm.i1, ctx.llvm.i8, params.at(0).name))).append("\n")
		//params.at(0).name := varName
		//params.at(0).type := ctx.llvm.i8
		result := GeneratorCmdResult.new.initialise(ctx.llvm.call("@kermeta_standard__Boolean___toString", ctx.llvm.pointer(ctx.llvm.i8), params, void), false)
	end
}


class GenerateBooleanOrCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		//FIXME: according to the LLVM doc, only i32 is accepted.
		result := GeneratorCmdResult.new.initialise(ctx.llvm.~or(ctx.llvm.i1, params.at(1).name, params.at(0).name), false)
	end
}


class GenerateBooleanAndCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		//FIXME: according to the LLVM doc, only i32 is accepted.
		result := GeneratorCmdResult.new.initialise(ctx.llvm.~and(ctx.llvm.i1, params.at(1).name, params.at(0).name), false)
	end
}


class GenerateBooleanEqualsCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		result := GeneratorCmdResult.new.initialise(ctx.llvm.icmp(IcmpCondition.eq, ctx.llvm.i1, params.at(1).name, params.at(0).name), false)
	end
}


class GenerateBooleanNotCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		result := GeneratorCmdResult.new.initialise(ctx.llvm.xor(ctx.llvm.i1, params.at(0).name, "true"), false)
	end
}


// Numeric
class GenerateNumericUminCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		result := GeneratorCmdResult.new.initialise(ctx.llvm.sub(ctx.llvm.i32, "0", params.at(0).name), false)
	end
}


class GenerateNumericModCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		// The 'modulo' operator is in fact the 'reminder' operator.
		result := GeneratorCmdResult.new.initialise(ctx.llvm.srem(ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
	end
}


class GenerateNumericDivCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		result := GeneratorCmdResult.new.initialise(ctx.llvm.sdiv(ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
	end
}


class GenerateNumericMultCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		result := GeneratorCmdResult.new.initialise(ctx.llvm.mul(ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
	end
}


class GenerateNumericMinusCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		// Numeric has a generic. So, to define if it is an integer operation or something else the static type must be analysed.
		if(call.staticType.llvmType(ctx)==ctx.llvm.i32) then
			result := GeneratorCmdResult.new.initialise(ctx.llvm.sub(ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
		else
			stdio.errorln("FIXME TODO GenerateNumericMinusCall for " + call.staticType.llvmType(ctx))
			result := void
		end
	end
}


// Summable
class GenerateSummablePlusCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		if(call.staticType.llvmType(ctx)==ctx.llvm.i32) then
			result := GeneratorCmdResult.new.initialise(ctx.llvm.add(ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
		else
			stdio.errorln("FIXME TODO GenerateSummablePlusCall for " + call.staticType.llvmType(ctx))
			result := void
		end
	end
} 


// Comparable
class GenerateComparableIsNotEqualCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		if(call.staticType.llvmType(ctx)==ctx.llvm.i32) then
			result := GeneratorCmdResult.new.initialise(ctx.llvm.icmp(IcmpCondition.ne, ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
		else
			stdio.errorln("FIXME TODO GenerateComparableIsNotEqualCall for " + call.staticType.llvmType(ctx))
			result := void
		end
	end
}

class GenerateComparableEqualsCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		if(call.staticType.llvmType(ctx)==ctx.llvm.i32) then
			result := GeneratorCmdResult.new.initialise(ctx.llvm.icmp(IcmpCondition.eq, ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
		else
			stdio.errorln("FIXME TODO GenerateComparableEqualsCall for " + call.staticType.llvmType(ctx))
			result := void
		end
	end
} 

class GenerateComparableIsGreaterOrEqualCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		if(call.staticType.llvmType(ctx)==ctx.llvm.i32) then
			result := GeneratorCmdResult.new.initialise(ctx.llvm.icmp(IcmpCondition.sge, ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
		else
			stdio.errorln("FIXME TODO GenerateComparableIsGreaterOrEqualCall for " + call.staticType.llvmType(ctx))
			result := void
		end
	end
}


class GenerateComparableIsGreaterCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		if(call.staticType.llvmType(ctx)==ctx.llvm.i32) then
			result := GeneratorCmdResult.new.initialise(ctx.llvm.icmp(IcmpCondition.sgt, ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
		else
			stdio.errorln("FIXME TODO GenerateComparableIsGreaterCall for " + call.staticType.llvmType(ctx))
			result := void
		end
	end
} 

class GenerateComparableIsLowerOrEqualCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		if(call.staticType.llvmType(ctx)==ctx.llvm.i32) then
			result := GeneratorCmdResult.new.initialise(ctx.llvm.icmp(IcmpCondition.sle, ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
		else
			stdio.errorln("FIXME TODO GenerateComparableIsLowerOrEqualCall for " + call.staticType.llvmType(ctx))
			result := void
		end
	end
}


class GenerateComparableIsLowerCall inherits CallGeneratorCmd {
	method generateCall(ctx:Context, params:Sequence<LLVMVar>, call:CallOperation) : GeneratorCmdResult is do
		if(call.staticType.llvmType(ctx)==ctx.llvm.i32) then
			result := GeneratorCmdResult.new.initialise(ctx.llvm.icmp(IcmpCondition.slt, ctx.llvm.i32, params.at(1).name, params.at(0).name), false)
		else
			stdio.errorln("FIXME TODO GenerateComparableIsLowerCall for " + call.staticType.llvmType(ctx))
			result := void
		end
	end
}
