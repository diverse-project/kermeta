/* $Id:$ 
 * Creation : November 27, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::behavior;

require kermeta
require "../structure/km2llvm_structure.kmt"

using org::kermeta::language::km2llvm
using kermeta::standard
using kermeta::utils
using org::kermeta::language::llvm
using org::kermeta::language::structure


aspect class CallExpression {
	/**
		Returns the possible identifier of the expression.
		For instance with a CallVariable instance, the name is the variable.
	*/
	operation llvmIdentifier(ctx:Context) : String is do
		result := "FIXME llvmIdentifier: " + self.toString
	end
	
	
	/**
		Returns the type of the expression.
		For instance with a CallVariable instance, the type is the type of the variable.
	*/
	operation llvmType(ctx:Context) : String is do
		result := "FIXME CallExpression::llvmType: " + self.toString
	end
}


aspect class CallProperty {
	method llvmIdentifier(ctx:Context) : String is do
		result := ctx.llvm.localVar(name)
	end


	method llvmType(ctx:Context) : String is do
		result := staticType.llvmType(ctx)
	end


	method generateLLVMNoBuffer(ctx:Context) : String is do
		// The content of the variable (a pointer) is store into a temp var.
		var varName : String init ctx.nextOperationVar
		// The load operation is appended to the string buf while the name of the temp var is returned.
		ctx.operations.append(ctx.llvm.assign(varName, ctx.llvm.load(ctx.llvm.pointer(staticType.llvmType(ctx)), ctx.llvm.localVar(name)))).append("\n")
		result := varName
	end
}


aspect class CallVariable {
	method llvmIdentifier(ctx:Context) : String is do
		result := ctx.llvm.localVar(name)
	end
	
	method llvmType(ctx:Context) : String is do
		result := staticType.llvmType(ctx)
	end


	method generateLLVMNoBuffer(ctx:Context) : String is do
		// The content of the variable (a pointer) is store into a temp var.
		var varName : String init ctx.nextOperationVar
		// The load operation is appended to the string buf while the name of the temp var is returned.
		ctx.operations.append(ctx.llvm.assign(varName, ctx.llvm.load(ctx.llvm.pointer(staticType.llvmType(ctx)), ctx.llvm.localVar(name)))).append("\n")
		result := varName
	end
}
	


aspect class CallSuperOperation {
	method generateLLVMNoBuffer(ctx:Context) : String is do
		// Looking for the super operation.
		var op : Operation init superType.getOperation(staticOperation)
		var attrs : Sequence<LLVMVar> init  Sequence<LLVMVar>.new
		// Getting the variable corresponding to the super type (will be the parameter of the super call).
		var varStr : String init ctx.nextOperationVar // Declaring a local variable.
		attrs.add(LLVMVar.new.initialise(staticType.llvmType(ctx), ctx.llvm.localVar("self"))) // The parameters of the call.
		ctx.operations.append(ctx.llvm.assign(varStr, 
				ctx.llvm.call("@cast_"+staticType.qualifiedNameLLVM+"_"+superType.qualifiedNameLLVM, superType.llvmType(ctx), attrs, void)
				)).append("\n") // Casting self into the super type.
		// Creating the super call.
		attrs.clear
		//TODO: put the other parameters of the operation.
		attrs.add(LLVMVar.new.initialise(superType.llvmType(ctx), varStr)) // The parameters of the call.
		result := ctx.llvm.call(op.llvmName(ctx), staticOperation.type.llvmType(ctx), attrs, void)
	end
}


aspect class CallOperation {
	// Generates the LLVM code corresponding to a call to the operation 'new'.
	operation _generateLLVM4New(ctx:Context) : String is do
		var varName : String init ctx.nextOperationVar
		// The call of the constructor is stored into a temp variable.
		ctx.operations.append(ctx.llvm.assign(varName, ctx.llvm.call(ctx.llvm.globalVar("create_"+staticType.qualifiedNameLLVM), staticType.llvmType(ctx), void, void))).append("\n")
		// The temp variable is returned.
		result := varName
	end


	// Generates the LLVM code corresponding to a standard call of an operation (i.e. not a new, etc.)
	operation _generateLLVM4StdCall(ctx:Context) : String is do
		// Each parameter expression is stored into a variable before the call.
		// The ordered list of these variables are temporary stored into ctx.currentOpCallParams.
		var params : Sequence<LLVMVar> init Sequence<LLVMVar>.new
		var i : Integer init 0
		var llvmVar : LLVMVar

		parameters.each{p|
			llvmVar := LLVMVar.new.initialise(staticOperation.ownedParameter.at(i).type.llvmType(ctx), p.generateLLVMNoBuffer(ctx))
			params.add(llvmVar)
			i := i + 1
		}
		
		var cmd : CallGeneratorCmd init ctx.stdLibCmd.getValue(staticOperation.llvmName(ctx)) // Getting the command from the list.
		// Sometimes a call operation is inlined.
		var isCallInlined : Boolean init false
		// The last parameter is self.
		var clazz : Class init Class.new // Uses a class to get the llvm type name of the class definition owning the operation.
		clazz.typeDefinition := staticOperation.owningClass

		// Generating the llvm code of the target. An identifier and its type are returned as a string to be included in the call as a parameter.
		var strTarget : String init target.generateLLVMNoBuffer(ctx)
		
		// Dynamic binding (ascending): if the target type differs from the operation type, it means that the call is a call to a operation in one
		// of the super classes. So, the target expression has to be casted into the expected super type.
		if (not target.staticType.isVoid and cmd.isVoid).andThen{b|target.staticType.qualifiedNameLLVM!=clazz.qualifiedNameLLVM} then
			// The name of the variable containing the cast is returned.
			strTarget := ctx.generateCastCall(ctx.operations, strTarget, target.staticType.qualifiedNameLLVM, clazz.qualifiedNameLLVM)
		end
		
		params.add(LLVMVar.new.initialise(clazz.llvmType(ctx), strTarget))
		clazz.typeDefinition := void
		
		// Optimisation: some calls handling simple primitive type operations are shortened to their classical llvm use (e.g. operation plus in class Integer)
		if(cmd.isVoid) then // If no command
			// Generating the call.
			result := _generateLLVMDynamicBindingCall(ctx, params)
		else // If one command
			//FIXME: dynamic binding for classes of the std lib.
			var res : GeneratorCmdResult init cmd.generateCall(ctx, params, self) // A 2-tuple is returned
			isCallInlined := res.v2 // To know if the call has been inlined.
			result := res.v1 // The generated cide
		end
		
		// The call is appended to the buffer. If a value is returned, it is stored into a variable which is returned by the operation.
		if staticOperation.type.isVoidType(ctx) then
			ctx.operations.append(result).append("\n")
			result := ""
		else
			//FIXME: if the call is inlined and its container is a block, the llvm code will not compile, e.g. operation foo() is do 1.isVoid end
			if not isCallInlined then // If the call has not been inlined, it is stored into a variable. This variable is returned.
				var varTmp : String init ctx.nextOperationVar
				ctx.operations.append(ctx.llvm.assign(varTmp, result)).append("\n")
				result := varTmp
			end
		end
	end

	
	/**
		Generates the llvm code performing the call operation by supporting the dynamic binding.
	*/
	operation _generateLLVMDynamicBindingCall(ctx:Context, params:Sequence<LLVMVar>) : String is do
		var typeRet : String init staticOperation.type.llvmType(ctx)
		var position : Integer init staticOperation.owningClass.getPositionOperationDynBindTable(staticOperation, ctx)
		var opProtoType : String init staticOperation.getLLVMPrototypeType(ctx)
		var callingObject : LLVMVar init params.at(params.size-1)
		
		// Casting the pointer corresponding to the calling object into the operation type.
		// e.g. %"72" = bitcast %"pkgFoo__B"* %"62" to void (%"pkgFoo__B"*)***
		var var1 : String init ctx.nextOperationVar
		ctx.operations.append(ctx.llvm.assign(var1, ctx.llvm.bitcast(callingObject.type+" "+callingObject.name, ctx.llvm.pointer(ctx.llvm.pointer(opProtoType)), false))).append("\n")
		// Loading the pointer
		// e.g. %"73" = load void (%"pkgFoo__B"*)*** %"72"
		var var2 : String init ctx.nextOperationVar
		ctx.operations.append(ctx.llvm.assign(var2, ctx.llvm.load(ctx.llvm.pointer(ctx.llvm.pointer(opProtoType)), var1))).append("\n")
		// Getting the pointer of the operation
		// e.g. %"74" = getelementptr void (%"pkgFoo__B"*)** %"73", i64 0
		var var3 : String init ctx.nextOperationVar
		ctx.operations.append(ctx.llvm.assign(var3, ctx.llvm.getelementptr(ctx.llvm.pointer(opProtoType), var2, ctx.llvm.i64, position, void, 0, false))).append("\n")
		// Loading the operation
		// e.g. %"75" = load void (%"pkgFoo__B"*)** %"74"
		var var4 : String init ctx.nextOperationVar
		ctx.operations.append(ctx.llvm.assign(var4, ctx.llvm.load(ctx.llvm.pointer(opProtoType), var3))).append("\n")
		// Calling the operation
		result := ctx.llvm.call(var4, typeRet, params, void)
	end


	method generateLLVMNoBuffer(ctx:Context) : String is do
		if(name=="new") then
			result := _generateLLVM4New(ctx)
		else
			result := _generateLLVM4StdCall(ctx)
		end
	end
}



aspect class Block {
	method generateLLVM(ctx:Context) is do
		statement.each{s | s.generateLLVM(ctx)}
	end
}
