/* $Id:$ 
 * Creation : December 23, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::behavior;

require kermeta
require "km2llvm_calls.kmt"
require "km2llvm_cond_statements.kmt"
require "km2llvm_literals.kmt"

using org::kermeta::language::km2llvm
using kermeta::standard
using org::kermeta::language::structure
using org::kermeta::language::llvm


aspect class Expression {
	/**
	* Generates the LLVM code and returns the corresponding line instead of putting it into a string buffer.
	* However, all the LLVM code required for the line to work will ba added to a buffer.
	*/
	operation generateLLVMNoBuffer(ctx:Context) : String is do
		result := "FIXME generateLLVMNoBuffer: "+self.toString
	end
}


aspect class LambdaExpression {
	method generateLLVMNoBuffer(ctx:Context) : String is do
		result := "FIXME LambdaExpression"
	end
}



aspect class VariableDecl {
	method generateLLVM(ctx:Context) is do
		//FIXME must not use alloca but malloc
		// allocating a variable.
		ctx.operations.append(ctx.llvm.assign(ctx.llvm.localVar(identifier), ctx.llvm.alloca(type.type.llvmType(ctx)))).append("\n")
		
		if not initialization.isVoid then
			// The initialisation is an assignment.
			var assign : Assignment init Assignment.new
			var callVar : CallVariable init CallVariable.new
			
			callVar.name := identifier
			callVar.staticType := type.type
			assign.target := callVar
			assign.~value := initialization
			assign.generateLLVM(ctx)
			// Undo changes.
			initialization := assign.~value
		end
	end
}


aspect class Assignment {
	method generateLLVM(ctx:Context) is do
		// Generating the code of the right part of the assignment. The string returned is the variable containing this right part.
		var identifierInit : String init ~value.generateLLVMNoBuffer(ctx)
	
		// If the target type differs from the operation type, it means that the call is a call to a operation in one
		// of the super classes. So, the target expression has to be casted into the expected super type.
		if (not target.staticType.isVoid).andThen{b|target.staticType.qualifiedNameLLVM!=~value.staticType.qualifiedNameLLVM} then
			identifierInit := ctx.generateCastCall(ctx.operations, identifierInit, ~value.staticType.qualifiedNameLLVM, target.staticType.qualifiedNameLLVM)
		end

		// The name of the variable containing the cast is returned.
		ctx.operations.append(ctx.llvm.store(target.llvmType(ctx), identifierInit, target.llvmIdentifier(ctx))).append("\n")
	end
}
