/* $Id:$ 
 * Creation : November 27, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::structure;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "../km2llvmContext.kmt"
require "km2llvm_superLowerTypes.kmt"

using org::kermeta::language::km2llvm
using org::kermeta::language::llvm
using kermeta::standard
using kermeta::utils


aspect class ClassDefinition {
	/** All super classes of the class. */
	reference allSuperClasses : oset ClassDefinition[*]


	// Generates cast functions: one for each super and lower types (direct and undirect).
	operation generateLLVMCast(ctx:Context) is do
		generateLLVMDirectCast(ctx)
	end
	
	
	operation generateLLVMIndirectCast(ctx:Context, types:Sequence<ClassDefinition>, initType:ClassDefinition, superType : Boolean) is do
		if superType then initType.allSuperClasses.add(self) end
		ctx.reinitOperationVar
		// self is the type to cast into the first type (i.e. initType)
		// All the elements of 'types' are the types necessary to incrementally convert self into initType
		var selfVarPtr : String init ctx.llvm.pointer(ctx.llvm.localVar(qualifiedNameLLVM))
		var initVar : String init ctx.llvm.localVar("self")
		var params : Sequence<LLVMVar> init Sequence<LLVMVar>.new
		var fctAttrs : Sequence<FunctionAttr> init Sequence<FunctionAttr>.new

		params.add(LLVMVar.new.initialise(ctx.llvm.pointer(ctx.llvm.localVar(initType.qualifiedNameLLVM)), initVar))
		fctAttrs.add(FunctionAttr.~readonly)
		// e.g. define internal %"A"* @"cast_C_A"(%"C"* %"self") readonly
		ctx.casts.append(ctx.llvm.define(LinkageType.internal, selfVarPtr, 
							ctx.llvm.globalVar("cast_"+initType.qualifiedNameLLVM+"_"+qualifiedNameLLVM), params, fctAttrs)).append("{\n")
		// explore the types to create code
		var prevType : ClassDefinition init initType
		var prevVar : String init initVar
		var currVar : String
		var i : Integer init 1
		
		types.add(self)
		
		types.each{t|
			currVar := ctx.nextOperationVar
			params.clear
			params.add(LLVMVar.new.initialise(ctx.llvm.pointer(ctx.llvm.localVar(prevType.qualifiedNameLLVM)), prevVar))
			//e.g. %"v0" = call %"B"* @"cast_C_B"(%"C"* %"self")
			ctx.casts.append(ctx.llvm.assign(currVar, 
				ctx.llvm.call(ctx.llvm.globalVar("cast_"+prevType.qualifiedNameLLVM+"_"+t.qualifiedNameLLVM), 
				ctx.llvm.pointer(ctx.llvm.localVar(t.qualifiedNameLLVM)), params))).append("\n")
			prevType := t
			prevVar := currVar
			i := i + 1
		}
		//return
		ctx.casts.append(ctx.llvm.ret(selfVarPtr, currVar)).append("\n")
		ctx.casts.append("}\n")
		
		// Generation for the super/lower types.
		if(superType) then
			superClasses.each{st | st.generateLLVMIndirectCast(ctx, types, initType, superType) }
		else
			lowerTypes.each{st | st.asType(ClassDefinition).generateLLVMIndirectCast(ctx, types, initType, superType) }
		end
	end
	
	
	operation generateLLVMDirectCast(ctx:Context) is do
		var params : Sequence<LLVMVar> init Sequence<LLVMVar>.new
		var typeCD : String init ctx.llvm.pointer(ctx.llvm.localVar(qualifiedNameLLVM))
		var selfVar : String init ctx.llvm.localVar("self")
		var fctAttrs : Sequence<FunctionAttr> init Sequence<FunctionAttr>.new
		var alreadyGen:Hashtable<String,String> init Hashtable<String,String>.new
		var i : Integer init 1
		var types : Sequence<ClassDefinition> init Sequence<ClassDefinition>.new
		params.add(LLVMVar.new.initialise(typeCD, selfVar))
		fctAttrs.add(FunctionAttr.~readonly)
		fctAttrs.add(FunctionAttr.inlinehint)
		// Creating a cast function for each direct super type.
		superClasses.each{st |
			ctx.casts.append(_createCastFunctionSuper(ctx, st, params, fctAttrs, typeCD, selfVar, i))
			allSuperClasses.add(st)
			st.superClasses.each{t |
				types.clear
				types.add(st)
				t.generateLLVMIndirectCast(ctx, types, self, true)
			}
			i := i + 1
		}
		// Creating a cast function for each direct lower type.
		var cd : ClassDefinition
		lowerTypes.each{st |
			cd := st.asType(ClassDefinition)
			ctx.casts.append(_createCastFunctionLower(ctx, st, params, fctAttrs, typeCD, selfVar, i))
			cd.lowerTypes.each{t |
				types.clear
				types.add(cd)
				t.asType(ClassDefinition).generateLLVMIndirectCast(ctx, types, self, false)
			}
			i := i + 1
		}
	end


	// A private helper function. See generateLLVMDirectCast
	operation _createCastFunctionLower(ctx:Context, td:TypeDefinition, params:Sequence<LLVMVar>, fctAttrs:Sequence<FunctionAttr>, typeCD:String, selfVar:String, i:Integer):String is do
		ctx.reinitOperationVar
		var v0 : String init ctx.nextOperationVar
		var v1 : String init ctx.nextOperationVar
		var v2 : String init ctx.nextOperationVar
		var i8Ptr : String init ctx.llvm.pointer(ctx.llvm.i8)
		var sizeGap : Integer init ctx.size.pointer*(1+td.superTypes.indexOf(self))
		var buf : StringBuffer init StringBuffer.new
		var tdType : String init ctx.llvm.pointer(ctx.llvm.localVar(td.qualifiedNameLLVM))
		
		// Creating the function header
		buf.append(ctx.llvm.define(LinkageType.internal, tdType, 
							ctx.llvm.globalVar("cast_"+qualifiedNameLLVM+"_"+td.qualifiedNameLLVM), params, fctAttrs)).append("{\n")
		buf.append(ctx.llvm.assign(v0, ctx.llvm.bitcast(ctx.llvm.pointer(ctx.llvm.localVar(qualifiedNameLLVM)) + " " + selfVar, i8Ptr, false))).append("\n")
		buf.append(ctx.llvm.assign(v1, ctx.llvm.getelementptr(i8Ptr, v0, ctx.llvm.i64, -sizeGap, void, 0, false))).append("\n")
		buf.append(ctx.llvm.assign(v2,  ctx.llvm.bitcast(i8Ptr + " " + v1, tdType, false))).append("\n")
		// Returing the value.
		buf.append(ctx.llvm.ret(tdType, v2)).append("\n")
		buf.append("}\n")
		result := buf.toString
	end


	// A private helper function. See generateLLVMDirectCast
	operation _createCastFunctionSuper(ctx:Context, td:TypeDefinition, params:Sequence<LLVMVar>, fctAttrs:Sequence<FunctionAttr>, typeCD:String, selfVar:String, i:Integer):String is do
		ctx.reinitOperationVar
		var v0 : String init ctx.nextOperationVar
		var v1 : String init ctx.nextOperationVar
		var buf : StringBuffer init StringBuffer.new
		var tdType : String init ctx.llvm.pointer(ctx.llvm.localVar(td.qualifiedNameLLVM))
		// Creating the function header
		buf.append(ctx.llvm.define(LinkageType.internal, tdType, 
							ctx.llvm.globalVar("cast_"+qualifiedNameLLVM+"_"+td.qualifiedNameLLVM), params, fctAttrs)).append("{\n")
		// Getting the pointer to the attribute
		buf.append(ctx.llvm.assign(v0, ctx.llvm.getelementptr(typeCD, selfVar, ctx.llvm.i32, 0, ctx.llvm.i32, i, false))).append("\n")
		// loading the value of the pointer
		buf.append(ctx.llvm.assign(v1, ctx.llvm.load(ctx.llvm.pointer(tdType), v0))).append("\n")
		// Returing the value.
		buf.append(ctx.llvm.ret(tdType, v1)).append("\n")
		buf.append("}\n")
		result := buf.toString
	end
}
