/* $Id:$ 
 * Creation : November 27, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::structure;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "../km2llvm_aspectGenerator.kmt"
require "km2llvm_castFunctions.kmt"
require "km2llvm_classDefinition.kmt"
require "km2llvm_operation.kmt"
require "../behaviour/km2llvm_behavior.kmt"

using org::kermeta::language::km2llvm
using kermeta::standard
using kermeta::utils
using org::kermeta::language::llvm

aspect class KermetaModelElement inherits LLVMGenerator{}


aspect class Metamodel {
	method generateLLVM(ctx:Context) is do
		packages.each{pkg | pkg.generateLLVM(ctx)}
	end
	
	operation preprocess4LLVM() is do
		packages.each{pkg | pkg.preprocess4LLVM}
	end
}


aspect class Type {
	operation isPointer(ctx:Context) : Boolean is do result := llvmType(ctx).contains("*") end

	operation isVoidType(ctx:Context) : Boolean is do result := false end

	operation llvmType(ctx:Context) : String is abstract
	
	operation qualifiedNameLLVM() : String is do
		result := "FIXME_qualifiedNameLLVM: "+self.toString
	end
	
	// Returns the operation of the type corresponding to the given prototype.
	// For instance, this operation is useful to get the super operation of a given operation.
	operation getOperation(prototype:Operation) : Operation is do
		result := void
	end
}


aspect class VoidType {
	method isVoidType(ctx:Context) : Boolean is do result := true end
}


aspect class Class {
	method isVoidType(ctx:Context) : Boolean is do result := ctx.stdLibName.getValue(qualifiedNameLLVM)=="void" end
	
	method llvmType(ctx:Context) : String is do
		result := typeDefinition.llvmType(ctx)
	end
	
	
	method qualifiedNameLLVM() : String is do
		result := typeDefinition.qualifiedNameLLVM
	end
	
	
	method getOperation(prototype:Operation) : Operation is do
		result := typeDefinition.getOperation(prototype)
	end
}


aspect class FunctionType {
	method llvmType(ctx:Context) : String is do
		result := "i32"
	end
}


aspect class ObjectTypeVariable {
	method llvmType(ctx:Context) : String is do
		result := "FIXME_ObjectTypeVariable"
	end
}



aspect class Enumeration {
	method llvmType(ctx:Context) : String is do
		result := "%\""+qualifiedNameLLVM+"\""
	end
	
	method generateLLVM(ctx:Context) is do
		// Generating the type of the enumeration
		var attrs : Sequence<LLVMVar> init  Sequence<LLVMVar>.new
		var typeName : String init ctx.llvm.localVar(qualifiedNameLLVM)
		attrs.add(LLVMVar.new.initialise("i8*", void))
		ctx.types.append(ctx.llvm.type(typeName, attrs)).append("\n")
		// For each literal, generating the singleton.
		ownedLiteral.each{lit |
			attrs.clear
			var stringVarName : String init ctx.getStringVarName(lit.name)
			attrs.add(LLVMVar.new.initialise("i8*", ctx.llvm.pointerString(lit.name, stringVarName)))
			ctx.types.append(ctx.llvm.constStruct(typeName, ctx.llvm.globalVar(qualifiedNameLLVM+"#"+lit.name), attrs)).append("\n")
		}
	end
}


aspect class PrimitiveType {
	method llvmType(ctx:Context) : String is do
		result := name
		if(container.isKindOf(Package)) then
			result := container.asType(Package).getLLVMQualifiedName + "_" + result
		end
		result := "%\""+result+"\""
	end
}



aspect class Package  {
	// Preprocessing useful for the compilation
	operation preprocess4LLVM() is do
		ownedTypeDefinition.each{td | td.preprocess4LLVM}
		nestedPackage.each{pkg | pkg.preprocess4LLVM}
	end

	// Generates the LLVM code
	method generateLLVM(ctx:Context) is do
		ownedTypeDefinition.each{td | td.generateLLVM(ctx)}
		nestedPackage.each{pkg | pkg.generateLLVM(ctx)}
	end
}


aspect class TypeDefinition {
	operation llvmType(ctx:Context) : String is do
		result := ctx.stdLibName.getValue(qualifiedNameLLVM)
		
		if(result.isVoid) then
			result := ctx.llvm.pointer(ctx.llvm.localVar(qualifiedNameLLVM))
		end
	end


	// Preprocessing useful for the compilation
	operation preprocess4LLVM() is do
		defineLowerSuperTypes
		qualifiedNameLLVM := getLLVMQualifiedName
	end
	
	
	operation sizeOf(ctx:Context) : Integer is abstract
	
	
	operation getOperation(prototype:Operation) : Operation is do
		result := void
	end
}
