/* $Id:$ 
 * Creation : January 10, 2013
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::structure;

require kermeta
require "km2llvm_structure.kmt"

using org::kermeta::language::km2llvm
using kermeta::standard
using kermeta::utils
using org::kermeta::language::llvm
 
 
aspect class ClassDefinition {
	attribute _toIgnore : Boolean
	
	/** Direct super classes of the class. Derived from superTypes. */
	reference superClasses : oset ClassDefinition[*]
	/** Direct lower classes of the class. Derived from lowerTypes. */
	reference lowerClasses : oset ClassDefinition[*]
	/** The hash map used for the dynamic binding. */
	attribute table : Hashtable<String, Operation>
	attribute _tableList : Sequence<Operation> // The sequence of values of the table.
	

	operation toIgnore() : Boolean is do
		if(_toIgnore.isVoid) then
			_toIgnore := kOwnedTags.exists{t | t.name=="CompilerIgnore" }
		end
		result := _toIgnore
	end
	
	
	method getOperation(prototype:Operation) : Operation is do
		// Looking for the operation.
		// TODO: the current detection is not restrictive enough since the type of the parameters are not checked.
		result := ownedOperation.detect{op | op.name==prototype.name and op.ownedParameter.size==prototype.ownedParameter.size }
	end


	// Generates the LLVM code
	method generateLLVM(ctx:Context) is do
		if(not toIgnore) then
			generateLLVMOperationsTable(ctx)
			generateLLVMType(ctx)
			generateLLVMCast(ctx)
			generateLLVMConstructor(ctx)
			generateLLVMGetters(ctx)
		end
	end
	
	
	/**
		Generates the table of the operations of the class.
		This table will be used by call operations to support the dynamic binding.
	*/
	operation generateLLVMOperationsTable(ctx:Context) is do
		if table.isVoid then
			table := Hashtable<String, Operation>.new
			// Computing the table.
			_computeOperationsTable(table, ctx)
			_tableList := table.values.asSequence
			
			if _tableList.size>0 then
				var i : Integer init 0
				var typeTo : String init ctx.llvm.pointer(ctx.llvm.i8)
				// Generating the llvm type of the operations of the class.
				var params : OrderedCollection<LLVMVar> init _tableList.collect{op |
					LLVMVar.new.initialise(ctx.llvm.bitcast(op.getLLVMPrototype(ctx), typeTo, true), void)
				}

				// Generating a global array containing pointers to the operations of the class.
				ctx.tablesDynBinding.append(ctx.llvm.assign(getTableDynBindingName(ctx), ctx.llvm.global(getTableDynBindingType(ctx), "[")))
				ctx.llvm.flatListString(ctx.tablesDynBinding, params, ", ")
				ctx.tablesDynBinding.append("]\n")
	
				params.clear // Cleaning
			end
		end
	end
	
	/**
		Returns the name of the LLVM variable corresponding to the table dedicated to dynamic binding.
	*/
	operation getTableDynBindingName(ctx:Context) : String is do
		result := ctx.llvm.globalVar(qualifiedNameLLVM+"##dynBind")
	end
	
	
	operation getTableDynBindingType(ctx:Context) : String is do
		if _tableList.isVoid then generateLLVMOperationsTable(ctx) end
		result := ctx.llvm.arrayType(_tableList.size, ctx.llvm.pointer(ctx.llvm.i8))
	end
	
	
	/**
		Helpers for the operation generateLLVMOperationsTable
	*/
	operation _computeOperationsTable(table:Hashtable<String, Operation>, ctx:Context) is do
		superClasses.each{sc | sc._computeOperationsTable(table, ctx) }
		ownedOperation.each{op | table.put(op.getPrototype(ctx), op) }
	end
	
	
	/**
		Returns the position of the given operation into the dynamic binding table.
	*/
	operation getPositionOperationDynBindTable(op:Operation, ctx:Context) : Integer is do
		if _tableList.isVoid then generateLLVMOperationsTable(ctx) end
		result := _tableList.indexOf(table.getValue(op.getPrototype(ctx)))
	end
	
	
	operation generateLLVMGetters(ctx:Context) is do
		var params : Sequence<LLVMVar> init  Sequence<LLVMVar>.new
		var fctAttr: Sequence<FunctionAttr> init  Sequence<FunctionAttr>.new
		var typeCD : String init ctx.llvm.pointer(ctx.llvm.localVar(qualifiedNameLLVM))
		var selfVar : String init ctx.llvm.localVar("self")
		var returnVar : String init ctx.llvm.localVar("r")
		var tmpVar : String init ctx.llvm.localVar("t")
		var getterName : String
		var cpt : Integer init superTypes.size + lowerTypes.size + 1
		var returnType : String
		
		params.add(LLVMVar.new.initialise(typeCD, selfVar))
		fctAttr.add(FunctionAttr.~readonly)
		fctAttr.add(FunctionAttr.inlinehint)
		
		ownedAttribute.each{attr |
			returnType := ctx.llvm.pointer(attr.type.llvmType(ctx))
			getterName := ctx.llvm.globalVar(qualifiedNameLLVM + ".#" + attr.name)
			ctx.getters.append(ctx.llvm.define(LinkageType.internal, returnType, getterName, params, fctAttr)).append("{\n")
			ctx.getters.append(ctx.llvm.assign(tmpVar, ctx.llvm.getelementptr(typeCD, selfVar, ctx.llvm.i32, 0, ctx.llvm.i32, cpt, false))).append("\n")
			ctx.getters.append(ctx.llvm.assign(returnVar, ctx.llvm.load(ctx.llvm.pointer(returnType), tmpVar))).append("\n")
			ctx.getters.append(ctx.llvm.ret(returnType, returnVar)).append("\n")
			ctx.getters.append("}\n")
			cpt := cpt + 1
		}
		
		ownedOperation.each{op | op.generateLLVM(ctx) }
	end
	
	
	// Generates the llvm type corresponding to the class.
	operation generateLLVMType(ctx:Context) is do
		var list : Sequence<LLVMVar> init Sequence<LLVMVar>.new
		// The first element of the type is the dynamic binding table.
		list.add(LLVMVar.new.initialise(ctx.llvm.pointer(ctx.llvm.pointer(ctx.llvm.i8)), void))
		// Creating the supertype parameters
		list.addAll(superTypes.collect{st | LLVMVar.new.initialise(ctx.llvm.pointer(ctx.llvm.localVar(st.qualifiedNameLLVM)), void)})
		// Creating the lowertype parameters
		list.addAll(lowerTypes.collect{st | LLVMVar.new.initialise(ctx.llvm.pointer(ctx.llvm.localVar(st.qualifiedNameLLVM)), void)})
		ownedAttribute.each{attr | list.add(LLVMVar.new.initialise(ctx.llvm.pointer(attr.type.llvmType(ctx)), void)) }
		ctx.types.append(ctx.llvm.type(ctx.llvm.localVar(qualifiedNameLLVM), list)).append("\n")
	end
	
	
	// Generates the contructor of the class.
	operation generateLLVMConstructor(ctx:Context) is do
	 	var typeName : String init ctx.llvm.pointer(ctx.llvm.localVar(qualifiedNameLLVM))
	 	var resultVar : String init "%r"
	 	ctx.constructors.append(ctx.llvm.define(LinkageType.internal, typeName, ctx.llvm.globalVar("create_" + qualifiedNameLLVM), void, void)).append("{\n")
		
		// Creation of the object.
		ctx.constructors.append(ctx.llvm.assign(resultVar, ctx.llvm.alloca(ctx.llvm.localVar(qualifiedNameLLVM)))).append("\n")
		
		// Creation of the super types.
		var i : Integer init 1
		var istr : String
		var ptrSuperType : String
		var varStr1 : String
		var varStr2 : String
		
		superClasses.each{st |
			varStr1 := ctx.nextOperationVar
			varStr2 := ctx.nextOperationVar
			istr := i.toString
			ptrSuperType := ctx.llvm.pointer(ctx.llvm.localVar(st.qualifiedNameLLVM))
			ctx.constructors.append(ctx.llvm.assign(varStr1, ctx.llvm.call("@\"create_"+st.qualifiedNameLLVM+"\"", ptrSuperType, void))).append("\n")
			ctx.constructors.append(ctx.llvm.assign(varStr2,  ctx.llvm.getelementptr(typeName, resultVar, ctx.llvm.i32, 0, ctx.llvm.i32, i, false))).append("\n")
			ctx.constructors.append(ctx.llvm.store(ptrSuperType, varStr1, varStr2)).append("\n")
			i := i + 1
		}

		if _tableList.size>0 and not isAbstract then
			var varStr3 : String init ctx.nextOperationVar
			var tableName : String init getTableDynBindingName(ctx)
			var tableType : String init ctx.llvm.pointer(getTableDynBindingType(ctx))
	
			// Setting the dynamic binding table to the class.
			_generateDynamicBindingTableSetting(ctx, tableType, tableName, varStr3, typeName, resultVar)
			// For all the super types, overriding the table.
			var varStrST : String
			allSuperClasses.each{st |
				varStr3 := ctx.nextOperationVar
				varStrST := ctx.generateCastCall(ctx.constructors, resultVar, qualifiedNameLLVM, st.qualifiedNameLLVM)
				_generateDynamicBindingTableSetting(ctx, tableType, tableName, varStr3, ctx.llvm.pointer(ctx.llvm.localVar(st.qualifiedNameLLVM)), varStrST)
			}
		end

		// Returning the created object.
		ctx.constructors.append(ctx.llvm.ret(typeName, resultVar)).append("\n}\n")
	end
	
	
	operation _generateDynamicBindingTableSetting(ctx:Context, tableType:String, tableName:String, varObjet:String, objectType:String, varContainer:String) is do
		ctx.constructors.append(ctx.llvm.assign(varObjet, ctx.llvm.getelementptr(objectType, varContainer, ctx.llvm.i32, 0, ctx.llvm.i32, 0, false))).append("\n")
		ctx.constructors.append(ctx.llvm.store(ctx.llvm.pointer(ctx.llvm.pointer(ctx.llvm.i8)), 
				ctx.llvm.getelementptr(tableType, tableName, ctx.llvm.i32, 0, ctx.llvm.i32, 0, true), varObjet)).append("\n")
	end
	
	
	method defineLowerSuperTypes() is do
		super
		superTypes.each{st |
			if st.isInstanceOf(ClassDefinition) then
				superClasses.add(st.asType(ClassDefinition))
			end
		}
		lowerTypes.each{st |
			if st.isInstanceOf(ClassDefinition) then
				lowerClasses.add(st.asType(ClassDefinition))
			end
		}
	end
}
