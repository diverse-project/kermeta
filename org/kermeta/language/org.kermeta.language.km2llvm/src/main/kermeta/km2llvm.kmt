/* $Id:$ 
 * Creation : November 27, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
@mainClass "org::kermeta::language::km2llvm::Km2llvm"
@mainOperation "main"

package org::kermeta::language::km2llvm;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "km2llvm_structure.kmt"

using org::kermeta::language::structure
using kermeta::utils
using kermeta::persistence
using kermeta::io

class Km2llvm {
	operation main() is do
		var mm : Metamodel init createKm
		mm.preprocess4LLVM
		var llvmCode : String init compile(mm).toString
		stdio.writeln(llvmCode)
		var f : FileIO init FileIO.new
		f.writeTextFile("../../test/test.ll", llvmCode)
	end

	operation compile(km:Metamodel) : StringBuffer is do
		var ctx : Context init Context.new.initialise
		km.generateLLVM(ctx)
		result := ctx.llvmCode
	end
	
	
	operation getKmModel() : Metamodel is do
   		var repository : EMFRepository init EMFRepository.new
   		var resource : Resource init repository.createResource("../../test/test.km", "../../../../org.kermeta.language.model/src/main/ecore/kermeta.ecore")
       	resource.load
		result ?= resource.one	
	end
	
	operation createKm() : Metamodel is do
		result := Metamodel.new
		var pkg1 : Package init Package.new
		var pkg2 : Package init Package.new
		pkg1.name := "pkg1"
		pkg2.name := "pkg2"
		result.packages.add(pkg1)
		pkg1.nestedPackage.add(pkg2)
		var cd0 : ClassDefinition init ClassDefinition.new
		cd0.name := "Cd0"
		pkg1.ownedTypeDefinition.add(cd0)
		var cd1 : ClassDefinition init ClassDefinition.new
		cd1.name := "Cd1"
		pkg1.ownedTypeDefinition.add(cd1)
		var cd3 : ClassDefinition init ClassDefinition.new
		cd3.name := "Cd3"
		pkg1.ownedTypeDefinition.add(cd3)
		var cd2 : ClassDefinition init ClassDefinition.new
		cd2.name := "Cd2"
		pkg2.ownedTypeDefinition.add(cd2)
		var type1 : Class init Class.new
		type1.typeDefinition := cd1
		cd2.superType.add(type1)
		cd2.containedType.add(type1)
		var type3 : Class init Class.new
		type3.typeDefinition := cd3
		cd2.superType.add(type3)
		cd2.containedType.add(type3)
		var type0 : Class init Class.new
		type0.typeDefinition := cd0
		cd1.superType.add(type0)
		cd1.containedType.add(type0)
		var type0b : Class init Class.new
		type0b.typeDefinition := cd0
		cd3.superType.add(type0b)
		cd3.containedType.add(type0b)
		var prop : Property init Property.new
		prop.name := "attr1"
		var clazz : Class init Class.new
		clazz.typeDefinition := cd2
		prop.type := clazz
		cd1.ownedAttribute.add(prop)
	end
}







