/* $Id:$ 
 * Creation : March 7, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */

package language::helpers::behavior;

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/behavior/BehaviorVisitor_Aspect_Accept.kmt"

using org::kermeta::language::behavior

class BehaviorVisitor
{
	operation visitAssignment(visited : Assignment, ctxt : BehaviorVisitorContext) : Void is do 
		visited.target.accept(self, ctxt)
		visited.~value.accept(self, ctxt)
	end
	
	operation visitBlock(visited : Block, ctxt : BehaviorVisitorContext) : Void is do 
		visited.rescueBlock.each{rB|
			rB.accept(self, ctxt)
		}
		visited.statement.each{s|
			s.accept(self, ctxt)
		}
	end
	
	operation visitBooleanLiteral(visited : BooleanLiteral, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitCallEnumLiteral(visited : CallEnumLiteral, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitCallExpression(visited : CallExpression, ctxt : BehaviorVisitorContext) : Void is do 
		visited.parameters.each{p|
			p.accept(self, ctxt)
		}
	end
		
	operation visitCallFeature(visited : CallFeature, ctxt : BehaviorVisitorContext) : Void is do 
		visited.target.accept(self, ctxt)
	end
	
	operation visitCallOperation(visited : CallOperation, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitCallProperty(visited : CallProperty, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitCallResult(visited : CallResult, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitCallSuperOperation(visited : CallSuperOperation, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
		
	operation visitCallTypeLiteral(visited : CallTypeLiteral, ctxt : BehaviorVisitorContext) : Void is do
		visited.typeref.accept(self, ctxt)
	end
	
	operation visitCallValue(visited : CallValue, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitCallVariable(visited : CallVariable, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitConditional(visited : Conditional, ctxt : BehaviorVisitorContext) : Void is do 
		visited.condition.accept(self, ctxt)
		if (not visited.elseBody.isVoid()) then
			visited.elseBody.accept(self, ctxt)
		end
		visited.thenBody.accept(self, ctxt)
	end
	
	operation visitEmptyExpression(visited : EmptyExpression, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitExpression(visited : Expression, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitIntegerLiteral(visited : IntegerLiteral, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitJavaStaticCall(visited : JavaStaticCall, ctxt : BehaviorVisitorContext) : Void is do 
		visited.parameters.each{p|
			p.accept(self, ctxt)
		}
	end
	
	operation visitLambdaExpression(visited : LambdaExpression, ctxt : BehaviorVisitorContext) : Void is do 
		visited.body.accept(self, ctxt)
		visited.parameters.each{p|
			p.accept(self, ctxt)
		}
	end
	
	operation visitLambdaParameter(visited : LambdaParameter, ctxt : BehaviorVisitorContext) : Void is do
		visited.type.accept(self, ctxt)
	end
	
	operation visitLiteral(visited : Literal, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitLoop(visited : Loop, ctxt : BehaviorVisitorContext) : Void is do
		if (not visited.body.isVoid()) then
			visited.body.accept(self, ctxt)
		end
		if (not visited.initialization.isVoid()) then
			visited.initialization.accept(self, ctxt)
		end
		visited.stopCondition.accept(self, ctxt)
	end
	
	operation visitRaise(visited : Raise, ctxt : BehaviorVisitorContext) : Void is do
		visited.expression.accept(self, ctxt)
	end
	
	operation visitRescue(visited : Rescue, ctxt : BehaviorVisitorContext) : Void is do
		visited.body.each{b|
			b.accept(self, ctxt)
		}
		visited.exceptionType.accept(self, ctxt)
	end
		
	operation visitSelfExpression(visited : SelfExpression, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitStringLiteral(visited : StringLiteral, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitTypeReference(visited : TypeReference, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
	
	operation visitUnresolvedCall(visited : UnresolvedCall, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
		
	operation visitVariableDecl(visited : VariableDecl, ctxt : BehaviorVisitorContext) : Void is do
		if (not visited.initialization.isVoid()) then
			visited.initialization.accept(self, ctxt)
		end
		visited.type.accept(self, ctxt)
	end
	
	operation visitVoidLiteral(visited : VoidLiteral, ctxt : BehaviorVisitorContext) : Void is do 
		
	end
}

class BehaviorVisitorContext
{
}