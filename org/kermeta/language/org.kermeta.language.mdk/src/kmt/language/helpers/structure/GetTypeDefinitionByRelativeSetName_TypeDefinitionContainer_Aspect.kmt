/* $Id:$ 
 * Creation : April 11, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */

package org::kermeta::language::structure;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

using kermeta::standard

/**
 * Retrieve a ModelElementTypeDefinition from a ModelElementTypeDefinitionContainer using its partial qualified name (without "#")
 */

aspect class ModelElementTypeDefinitionContainer
{
	operation getTypeDefinitionByPartialSetName(set_pname : Sequence<String>) : ModelElementTypeDefinition is do
		var foundTypeDef : ModelElementTypeDefinition
		//If set_qname only contains one identifier, the TypeDefinition must be in this container
		if set_pname.size()==1 then
			foundTypeDef := self.ownedTypeDefinition.detect{td|
				td.name == set_pname.at(0)
			}
		end
		result := foundTypeDef
	end
}

aspect class Package
{
	method getTypeDefinitionByPartialSetName(set_pname : Sequence<String>) : ModelElementTypeDefinition is do
		var foundTypeDef : ModelElementTypeDefinition init super(set_pname)
		var nestedP : Package
		//Else the ModelElementTypeDefinition may be referenced by a nested package
		if foundTypeDef.isVoid() then
			nestedP := self.nestedPackage.detect{p|p.name == set_pname.at(0)}
			if (not nestedP.isVoid()) then
				var nextName : Sequence<String> init set_pname
				nextName.removeAt(0)
				foundTypeDef := nestedP.getTypeDefinitionByPartialSetName(nextName)
			end
		end
		result := foundTypeDef
	end
}