/* $Id: ModelingUnitHelper.kmt,v 1.1 2008-12-09 14:26:05 dvojtise Exp $
 * Creation date: May 19, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: 
 *		Cyril Faucher <cfaucher@irisa.fr>
 */
package org::kermeta::language::structure;

require kermeta
require "PackageHelper.kmt"
require "../../../standard/StringUtils.kmt"
require "GetQualifiedName_structure_aspect.kmt"
require "MetamodelCollection_GetTypeDefinitionByName.kmt"
require "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

using kermeta::standard
using kermeta::exceptions
using kermeta::persistence
using kmt::language::helpers::structure


aspect class Metamodel {
	/**
	 * Get a TypeDefinition contained in the current Metamodel by qualifiedName (i.e., containing ^)
	 * Note : this operation uses cache if canUseCachedStructuralTypeDefinitions is set to true
	 */
	operation getTypeDefinitionByQualifiedName( qname : String ) : TypeDefinition is do
	
		if canUseCachedStructuralTypeDefinitions.isVoid then
			canUseCachedStructuralTypeDefinitions := false
		end
		if canUseCachedStructuralTypeDefinitions then
			result := getCachedStructuralTypeDefinitionByQualifiedName(qname)
		else
			if qname.contains("^") then
				var set_qname : Sequence<String> init qname.split("\\^")
				if set_qname.at(0) == self.name then
					set_qname := set_qname.at(1).split("::")
					if set_qname.size()==0 then
						set_qname.add(qname)
					end
					var pack : ModelElementTypeDefinitionContainer init self.packages.detect{ p |
						p.name == set_qname.at(0)
					}
					if not pack.isVoid then
						from var i : Integer init 1
						until i>=(set_qname.size()-1) or pack.isVoid
						loop
							var oldpack : ModelElementTypeDefinitionContainer init pack
							if pack.isInstanceOf(Package) then
								pack := pack.asType(Package).nestedPackage.detect{ p |
									p.name == set_qname.at(i)
								}
							else
								pack:=void
							end
							i := i + 1
						end
						if pack.isVoid then
							// using goes to an unknown package (checker should raise something about that before entering here, anyway I  don't want to crash)
							result := void
						else
							result := pack.ownedTypeDefinition.detect{ c |
								c.name == set_qname.at(set_qname.size()-1)
							}
						end
					end
				else
					//We are looking in the wrong metamodel
					result := void
				end
			else
				stdio.writeln("Metamodel.getTypeDefinitionByQualifiedName expects a qualified name (i.e., qualified name with metamodel name followed by \"^\"), but was called on: " + qname)
				/*stdio.writeln("Creating an exception")
				var e : Exception init Exception.new
				e.message := "getTypeDefinitionByQualifiedName expects a qualified name (i.e., qualified name with metamodel name followed by \"^\"), but was called on: " + qname
				stdio.writeln("Raising the exception")
				raise e*/
			end
		end
	end
	
	/**
	 * Get a TypeDefinition contained in the current Metamodel by qualifiedName
	 * Note : this operation uses cache if canUseCachedStructuralTypeDefinitions is set to true
	 */
	operation getTypeDefinitionByPartialName( pname : String ) : TypeDefinition is do
	
		if canUseCachedStructuralTypeDefinitions.isVoid then
			canUseCachedStructuralTypeDefinitions := false
		end
		if canUseCachedStructuralTypeDefinitions then
			result := getCachedStructuralTypeDefinitionByPartialName(pname)
		else
			if pname.contains("^") then
				stdio.writeln("Metamodel.getTypeDefinitionByPartialName expects a partial qualified name (i.e., qualified name without metamodel name, nor \"^\"), but was called on: " + pname)
				/*stdio.writeln("Creating an exception")
				var e : Exception init Exception.new
				e.message := "getTypeDefinitionByPartialName expects a partial qualified name (i.e., qualified name without metamodel name, nor \"^\"), but was called on: " + pname
				stdio.writeln("Raising the exception")
				raise e*/
			else
				var set_pname : Sequence<String> init pname.split("::")
				if set_pname.size()==0 then
					set_pname.add(pname)
				end
				var pack : ModelElementTypeDefinitionContainer init self.packages.detect{ p |
					p.name == set_pname.at(0)
				}
				if not pack.isVoid then
					from var i : Integer init 1
					until i>=(set_pname.size()-1) or pack.isVoid
					loop
					var oldpack : ModelElementTypeDefinitionContainer init pack
						if pack.isInstanceOf(Package) then
							pack := pack.asType(Package).nestedPackage.detect{ p |
								p.name == set_pname.at(i)
							}
						else
							pack:=void
						end
						i := i + 1
					end
					if pack.isVoid then
						// using goes to an unknown package (checker should raise something about that before entering here, anyway I  don't want to crash)
						result := void
					else
						result := pack.ownedTypeDefinition.detect{ c |
							c.name == set_pname.at(set_pname.size()-1)
						}
					end
				end
			end
		end
	end
	
	/** cache for getCachedStructuralTypeDefinitionByQualifiedName() */
	reference cache : internal::MetamodelCache
	
	/** If this attribute is set to true, then the ModelingUnitCache can be used */
	attribute canUseCachedStructuralTypeDefinitions : Boolean
	
	/** uses a cache in order to retreive TypeDefinitions in the Metamodel using its qualified name (i.e., containing ^)
	 */
	operation getCachedStructuralTypeDefinitionByQualifiedName( qname : String ) : TypeDefinition is do
	
		if cache.isVoid then
			// need to build the cache
			cache := internal::MetamodelCache.new.initialize(self)			
		end
		var typename : String init qname.split("::").last
		var possibleTypeDefs : Set<TypeDefinition> init cache.getTypeDefinitions(typename)
		
		if qname.contains("^") then
			if qname.split("\\^").at(0) == self.name then		
				result := possibleTypeDefs.detect{t| t.getQualifiedName() == qname}
			else
				//We are looking in the wrong metamodel
				result := void
			end
		else
			stdio.writeln("Metamodel.getTypeDefinitionByQualifiedName expects a qualified name (i.e., qualified name with metamodel name followed by \"^\"), but was called on: " + qname)
			/*stdio.writeln("Creating an exception")
			var e : Exception init Exception.new
			e.message := "getTypeDefinitionByQualifiedName expects a qualified name (i.e., qualified name with metamodel name followed by \"^\"), but was called on: " + qname
			stdio.writeln("Raising the exception")
			raise e*/
		end
		
	end
	
	/** uses a cache in order to retreive TypeDefinitions in the Metamodel using its partial name (i.e., without ^)
	 */
	operation getCachedStructuralTypeDefinitionByPartialName( pname : String ) : TypeDefinition is do
	
		if cache.isVoid then
			// need to build the cache
			cache := internal::MetamodelCache.new.initialize(self)
		end
		var typename : String init pname.split("::").last
		var possibleTypeDefs : Set<TypeDefinition> init cache.getTypeDefinitions(typename)
		
		if pname.contains("^") then
			stdio.writeln("Metamodel.getTypeDefinitionByPartialName expects a partial qualified name (i.e., qualified name without metamodel name, nor \"^\"), but was called on: " + pname)
			/*stdio.writeln("Creating an exception")
			var e : Exception init Exception.new
			e.message := "getTypeDefinitionByPartialName expects a partial qualified name (i.e., qualified name without metamodel name, nor \"^\"), but was called on: " + pname
			stdio.writeln("Raising the exception")
			raise e*/
		else
			result := possibleTypeDefs.detect{t| t.getQualifiedName() == self.name+"^"+pname}
		end
	end
		
	/*
	 * Return all the ClassDefinitions which are contained by the Metamodel
	*/
	operation getClassDefinitions() : OrderedSet<org::kermeta::language::structure::ClassDefinition> is do
		var classDefinitions : OrderedSet<org::kermeta::language::structure::ClassDefinition> init OrderedSet<org::kermeta::language::structure::ClassDefinition>.new
		
		getAllPackages.each{p|
			p.ownedTypeDefinition.each{td|
				if td.isInstanceOf(org::kermeta::language::structure::ClassDefinition) then
					classDefinitions.add(td.asType(org::kermeta::language::structure::ClassDefinition))
				end
			}
		}
		result := classDefinitions
	end
	
	/*
	 * Return all the TypeDefinitions which are contained by the Metamodel
	*/
	operation getTypeDefinitions() : Set<org::kermeta::language::structure::ModelElementTypeDefinition> is do
		var typeDefinitions : Set<org::kermeta::language::structure::ModelElementTypeDefinition> init Set<org::kermeta::language::structure::ModelElementTypeDefinition>.new
		
		getAllPackages.each{p|
			typeDefinitions.addAll(p.ownedTypeDefinition)
		}
		result := typeDefinitions
	end
	
	operation getAllPackages() : OrderedSet<Package> is do
		result := OrderedSet<Package>.new()
				
		self.packages.each{ p |
			result.add(p)
			result.addAll(p.getAllSubPackages())
		}

	end
	
	/**
	 * Retrieve a package in the metamodel using its partial name (without its metamodel name)
	 */
	operation retrievePackage( pname : String ) : Package is do
		var set_pname : Sequence<String> init pname.split("::")
		if set_pname.size()==0 then
			set_pname.add(pname)
		end
		
		var pack : Package init self.packages.detect{ p |
			p.name == set_pname.at(0)
		}
		
		from var i : Integer init 1
		until i>=(set_pname.size())
		loop
			pack := pack.nestedPackage.detect{ p |
				p.name == set_pname.at(i)
			}
			i := i + 1
		end
		
		result := pack
	end
	
	/**
	 * returns the list of neighbour metamodels (including self) calculated from the containingResource (if any)
	 * or an empty list
	 */
	operation getNeighbours() : Collection<Metamodel> is do
		result := OrderedSet<Metamodel>.new
		var res : Resource init self.containingResource
		if(not res.isVoid) then
			result := res.select{ o1 | o1.isInstanceOf(Metamodel)}.collect{ o2 | o2.asType(Metamodel)}
		else 
			stdio.errorln("Cannot find neighbours of Metamodel " + self.name + " because it isn't contained in a resource")
		end
	end
}

package internal{
	class MetamodelCache {
		/** cache for getCachedStructuralTypeDefinitionByQualifiedName() */
		reference cachedStructuralTypeDefinitions : kermeta::utils::Hashtable<String,TypeDefinitionCollection>
		operation initialize(mm : Metamodel) : MetamodelCache is do
			// bug in kermeta 1 !?
			//cachedStructuralTypeDefinitions := kermeta::utils::Hashtable<String,Set<TypeDefinition>>.new
			cachedStructuralTypeDefinitions := kermeta::utils::Hashtable<String,TypeDefinitionCollection>.new
			mm.getTypeDefinitions().each{ td |
				put(td)
			} 
			result := self
		end
		
		/**
		 * put this TypeDefinition in the cache
		 */
		operation put(typeDefinition : TypeDefinition) is do
			var typename : String init typeDefinition.name
			var possibleTypeDefs : TypeDefinitionCollection init cachedStructuralTypeDefinitions.getValue(typename)
			if  possibleTypeDefs.isVoid then 
				possibleTypeDefs := TypeDefinitionCollection.new
				cachedStructuralTypeDefinitions.put(typename, possibleTypeDefs)
			end
			possibleTypeDefs.typeDefinitions.add(typeDefinition)
		end
		
		/**
		 * returns the list of TypeDefinition with this name
		 */
		operation getTypeDefinitions(typeName : String) : Set<TypeDefinition> is do
			var tdc : TypeDefinitionCollection init cachedStructuralTypeDefinitions.getValue(typeName)
			if tdc.isVoid then
				result:=void
			else
				result := tdc.typeDefinitions
			end
			if result.isVoid then // always returns at least an empty Set
				result := Set<TypeDefinition>.new
			end
		end
		
		operation printAllTypeDefinitions() : String is do
			var sb : kermeta::utils::StringBuffer init kermeta::utils::StringBuffer.new
			sb.append("{")
			cachedStructuralTypeDefinitions.keys.each{ s | sb.append(s+", ")}
			sb.append("}")
			result := sb.toString
		end
	}
	/**
	 * used to workaround pb of kermeta::utils::Hashtable<String,Set<TypeDefinition>>.new
	 */
	class TypeDefinitionCollection{ 
		reference typeDefinitions : TypeDefinition[0..*]
	}
}