/* $Id:$ 
 * Creation : January 11, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */
package org::kermeta::language::structure;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/TypeEquality_structure_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/standard/StringUtils.kmt"

// use Kermeta MDK to retrive qualified names
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/GetQualifiedName_structure_aspect.kmt"

using kermeta::standard
using kermeta::utils

aspect class Type {

	//if the current type from expectedType is a type variable, then add the binding
	//if not, it's only important if self is a class or a function type
	operation compareToExpectedType(expectedType : Type,  typeVariableToSet : Hashtable<TypeVariable, Type>) is do
		//stdio.writeln("compare a type with something")
			
		if expectedType.isInstanceOf(TypeVariable).andThen{x|typeVariableToSet.containsKey(expectedType.asType(TypeVariable))} then
			typeVariableToSet.put(expectedType.asType(TypeVariable), self)
			
		end
			
	end

	//structural comparison is used when types are supposed to be equals
	operation structurallyCompareToExpectedType(expectedType : Type,  typeVariableToSet : Hashtable<TypeVariable, Type>) is do
		//stdio.writeln("compare a type with something")
			
		if expectedType.isInstanceOf(TypeVariable).andThen{x|
			typeVariableToSet.containsKey(expectedType.asType(TypeVariable))} 
		then
			typeVariableToSet.put(expectedType.asType(TypeVariable), self)
			
		end
			
	end
	
	operation isSubTypeOf(expectedType : Type/*,  typeVariableToSet : Hashtable<TypeVariable, Type>*/) : Boolean is do
		result:=true
	end
	
	/*
	operation resolveBindings(typeVariablesToSet : Hashtable<TypeVariable, Type>) : Type is do
		result:=self
	end
	*/
	
	operation cloneWithBindings ( bindings : OrderedSet<TypeVariableBinding>) : Type is do
		result:=self
	end
	
}

// 1. Pour tout les self, si expectedType = Object, alors true.



aspect class FunctionType
{

	method cloneWithBindings ( bindings : OrderedSet<TypeVariableBinding>) : Type is do
	
		//stdio.writeln("cloneWithBindings for FunctionType ...")
		
		var clone : FunctionType init FunctionType.new
		clone.right:=self.right.cloneWithBindings(bindings)
		
		if not(self.left.isVoid)
		then
			//stdio.writeln(" left not void...")
			clone.left:=self.left.cloneWithBindings(bindings)
		end
		result:=clone
	end

	method isSubTypeOf(expectedType : Type/*,  typeVariableToSet : Hashtable<TypeVariable, Type>*/) : Boolean is do

		/*
		1. si exp=Object -> OK
		2. enum -> false
		3. exp=PrimitiveType, depend de instanceType
		4. exp=functionType, voir dessous
		5. exp=ObjectTypeVariable, même raisonnement que pour Class (recup des bindings etc...)
		6. exp=ProductType, si ProductType.type.size==1 et puis la suite
		7. Faux pour les autres Enumeration, ModelType, VirtualType(?)
		*/
		
		//stdio.writeln("isSubtypeOf for FunctionType ...")
		
		result:=false
		if (expectedType.getQualifiedName.equals("kermeta::standard::Object"))
		then
			result:=true
		else
			if (expectedType.isInstanceOf(PrimitiveType))
			then
				if (not(expectedType.asType(PrimitiveType).instanceType.isVoid))
				then
					result:= self.isSubTypeOf(expectedType.asType(PrimitiveType).instanceType/*, typeVariableToSet*/)
				end
			else
				if (expectedType.isInstanceOf(FunctionType))
				then
					//stdio.writeln("expectedType is a FunctionType ...")
					//( <A->C> inherits <B->D> ) <=> ( ( C inherits D ) and ( B inherits A )
					var expectedFunctionType : FunctionType init expectedType.asType(FunctionType)
					// First, compare return types C->D
					result:= self.right.isSubTypeOf(expectedFunctionType.right/*, typeVariableToSet*/)
					//stdio.writeln("rights result : " + result.toString)
					if (result)
					then
						
						// If true, compare B->A
						if (self.left.isVoid)
						then
							// expected.left must be either void or an empty ProductType
							if not(expectedFunctionType.left.isVoid)
							then // else it is ok, since return types are ok
								if (expectedFunctionType.left.isInstanceOf(ProductType))
								then
									//in this case it mustn't contain any type
									result :=  (expectedFunctionType.left.asType(ProductType).type.size==0)
								else
									result:=false
								end
							end
						else
							// Now, expected.left might be void
							if (expectedFunctionType.isVoid)
							then
								// self.left must be an empty ProductType
								if (self.left.isInstanceOf(ProductType))
								then
									//in this case it mustn't contain any type
									result:= (self.left.asType(ProductType).type.size==0)
								else
									result:=false
								end
							else
								// Now, both ProductTypes are not empty, compare them
								// We must compare them 
								result:=expectedFunctionType.left.isSubTypeOf(self.left)
							end 
						end
					end
				else
					if (expectedType.isInstanceOf(ObjectTypeVariable))
					then
					end
				end
			end
		end

		//stdio.writeln("isSubtypeOf for FunctionType result : " + result.toString)		
	end
	
	/*
	method resolveBindings(typeVariablesToSet : Hashtable<TypeVariable, Type>) : Type is do
		//result:=self
		if not(self.left.isVoid)
		then
			self.left.resolveBindings(typeVariablesToSet)
		end
		self.right.resolveBindings(typeVariablesToSet)
		result:=self
	end
	*/
}

aspect class ProductType {
	
	method cloneWithBindings ( bindings : OrderedSet<TypeVariableBinding>) : Type is do
	
		var clone : ProductType init ProductType.new
		self.type.each{ t |
			clone.type.add(t.cloneWithBindings(bindings))
		}
		result:=clone
		
	end
	
	method isSubTypeOf(expectedType : Type/*,  typeVariableToSet : Hashtable<TypeVariable, Type>*/) : Boolean is do
		//result:=false
		
		/*
		//@TODO : Ne pas faire d'aspect sur ProductType, tout traiter dans FunctionType
		1. si un seul, lancer isSubType dessus.
		2. si <> 1 : expected ne peut être qu'un productType 
		
		*/
		//stdio.writeln(" isSubTypeOf for productType ...")
			
		if(expectedType.isInstanceOf(ProductType))
		then
			// No problem, just compare the types inside both ProductTypes
			// Check the cardinalities...
			var expectedProductType : ProductType init expectedType.asType(ProductType)
			//stdio.writeln("     card self      : " + self.type.size.toString())
			//stdio.writeln("     card expected  : " + expectedProductType.type.size.toString)
			
			if ( self.type.size != expectedProductType.type.size)
			then
				result:=false
			else
				var bool : Boolean init true
				from var i : Integer init 0
				until i == self.type.size
				loop
					//stdio.writeln("      i="+i.toString+", bool=" + bool.toString)
					//stdio.writeln("       self.at(i) : " + self.type.elementAt(i).toString)
					//stdio.writeln("       expe.at(i) : " + expectedProductType.type.elementAt(i).toString)
					bool := ( bool and self.type.elementAt(i).isSubTypeOf(expectedProductType.type.elementAt(i)/*,typeVariableToSet*/) )
    				i := i + 1
				end
				result:=bool
			end
		else
			if (expectedType.getQualifiedName.equals("kermeta::standard::Object"))
			then
				result:=true
			else
				// Special checks in case self with a ProductType with 0 or 1 types inside
				if (self.type.size == 0)
				then
					result:=expectedType.getQualifiedName.endsWith("#kermeta::standard::Void")
				else
					if (self.type.size == 1)
					then
						result:= self.type.elementAt(0).isSubTypeOf(expectedType/*, typeVariableToSet*/)
					else
						result:=false
					end
				end
				
			end 
		end	
	end
	
/*	method resolveBindings(typeVariablesToSet : Hashtable<TypeVariable, Type>) : Type is do
		//result:=self
		self.type.each{type |
			type:=type.resolveBindings(typeVariablesToSet)
		}
		result:=self
	end
	*/
}

aspect class Enumeration
{
/*
	method resolveBindings(typeVariablesToSet : Hashtable<TypeVariable, Type>) : Type is do
		result:=self
	end
*/

	method isSubTypeOf(expectedType : Type/*,  typeVariableToSet : Hashtable<TypeVariable, Type>*/) : Boolean is do
		
		result:=false
		if (expectedType.getQualifiedName.equals("kermeta::standard::Object"))
		then
			result:=true
		else
			if (expectedType.isInstanceOf(Enumeration))
			then
				result:=self.equals(expectedType)
			else
				if (expectedType.isInstanceOf(PrimitiveType))
				then
					if (expectedType.asType(PrimitiveType).instanceType.isVoid)
					then
						result:=false
					else
						result:=self.isSubTypeOf(expectedType.asType(PrimitiveType).instanceType/*, typeVariableToSet*/)
					end
				else
					if (expectedType.isInstanceOf(ObjectTypeVariable))
					then
						// If expectedType is an ObjectTypeVariable, use the bindings HashTable to retrieve
						// the correct Type.
						var reallyExpectedType : Type //init typeVariableToSet.getValue(expectedType.asType(ObjectTypeVariable))
						if (reallyExpectedType.isVoid)
						then
							// It is unlikely to reach this point.
							// Just in case, result:=false
							result:=false
						else
							// Si le binding est égal à l'original, alors il faut retourner false
							//  ( if reallyExpectedType==expectedType ) ...
							if ( reallyExpectedType.equals(expectedType))
							then
								result:=false
							else
								//@TODO ...
								// There might be a problem there if there is a cycle in the bindings
								result:=self.isSubTypeOf(reallyExpectedType/*,typeVariableToSet*/)
							end
						end
					else
						// Other cases are false
						// ProductType can be compared only within
						// FunctionType comparisons
						result:=false
					end
				end
			end
		end
		
		/*
		1. si expe=Object -> OK
		2. si exp=Enumeration, then self==exp
		3. si exp=PrimitiveType, then self==exp.instanceType
		4. si exp=ObjectTypeVariable, same as Class
		5. si exp=ProductType, same as Class
		6. False if expectedType is FunctionType, ModelType and VirtualType(?)
		*/
		
	end
}

aspect class Class
{

	operation getAllTypeVariableBindings() : Sequence<TypeVariableBinding> is do
		result := Sequence<TypeVariableBinding>.new
		
		result.addAll(typeParamBinding)
		
		var localBindings : Hashtable<TypeVariable,Type> init Hashtable<TypeVariable,Type>.new
		
		result.each{ b|
			localBindings.put(b.variable, b.type)	
		}
		
		//get All the inherited bindings
		var inheritedBindings : Sequence<TypeVariableBinding> init Sequence<TypeVariableBinding>.new
		typeDefinition.superType.each{ c|
			if c.isInstanceOf(Class) then
				if c.asType(Class).typeDefinition !=typeDefinition then
					inheritedBindings.addAll(c.asType(Class).getAllTypeVariableBindings())	
				end
			end
		}
		
		//replace the variables in inherited Bindings according to local bindings
		inheritedBindings.each{ b |
			if b.type.isInstanceOf(TypeVariable) then
				if localBindings.containsKey(b.type.asType(TypeVariable)) then
					var tvb : TypeVariableBinding init TypeVariableBinding.new
					tvb.variable:=b.variable
					tvb.type:=localBindings.getValue(b.type.asType(TypeVariable))
					result.add(tvb)
				end
			else
				//if the variable is binded with a formal type, then add it directly to the bindings
				var tvb : TypeVariableBinding init TypeVariableBinding.new
				tvb.variable:=b.variable
				tvb.type:=b.type
				result.add(tvb)
			end
		}
		/* stdio.writeln("Bindings for Class")
		result.each{b |		
			stdio.writeln("["+b.variable.prettyPrint + ", "+b.type.prettyPrint +"]")
		}*/
	end

	/**
	 *	returns the sequence of typedefinition separing self to typeToSearch in the Type hierarchy
	 */
	operation findPathToType(typeToSearch : ClassDefinition, typeDefAlreadyVisited : Sequence<ClassDefinition>) : Sequence<Class> is do
		result:=void
		typeDefAlreadyVisited.add(self.typeDefinition.asType(ClassDefinition))
		
		if ( typeToSearch==self.typeDefinition.asType(ClassDefinition) )
		then 
			result:=Sequence<Class>.new
			result.add(self)
		else
			self.typeDefinition.superType.detect{ t |
				if not typeDefAlreadyVisited.contains(t.asType(Class).typeDefinition.asType(ClassDefinition)) 
				then
					result:= t.asType(Class).findPathToType(typeToSearch,typeDefAlreadyVisited)
					if not result.isVoid then
						result.addAt(0, self)
					end
				end
					//stop condition
				result.isVoid.~not()
				
			}
		end
	end

	/**
	 * returns a clone of the current class but with the type of the different 
	 * bindings replaced according to the parameter bindings
	 */
	method cloneWithBindings ( bindings : OrderedSet<TypeVariableBinding>) : Type is do
	
		//stdio.writeln("cloneWithBindings for class : " + self.toString)
	
		result:= Class.new
		result.asType(Class).typeDefinition:=self.typeDefinition
		
		self.typeParamBinding.each{tvb|
			var newTVB : TypeVariableBinding init TypeVariableBinding.new
			newTVB.variable:=tvb.variable
			if tvb.type.isInstanceOf(TypeVariable) then
				var binding : TypeVariableBinding init bindings.detect{b|b.variable==tvb.type}
				if binding.isVoid.~not then
					//stdio.writeln(" binding detected : " + binding.type.toString)
					newTVB.type:=binding.type
				end
			else 
				if tvb.type.isInstanceOf(Class) then
					newTVB.type:=tvb.type.asType(Class).cloneWithBindings(bindings)
				end
			end
			result.asType(Class).typeParamBinding.add(newTVB)
		}
		//stdio.writeln("cloneWithBindings result : " + result.toString)
	end

	/**
	 * returns a class that is structurally comparable to typeExpected
	 */
	operation getComparableClass(typeExpected : Class) : Class is do 
		
		//stdio.writeln(">> getComparableClass for " + self.typeDefinition.name + ", expected is " + typeExpected.typeDefinition.name)
		
		var inheritancePath : Sequence<Class>
		inheritancePath:=findPathToType(typeExpected.typeDefinition.asType(ClassDefinition), Sequence<ClassDefinition>.new)
		result:=void
		if inheritancePath.isVoid then
			//result remains void, because self cannot be a subtype of typeExpected
			//
		else
			//the supertype of the current Class that is of the same level than typeExpected 
			var selfSuperType : Class init inheritancePath.elementAt(0)
			from var i : Integer init 0
			until i == inheritancePath.size - 1
			loop
				var superSuperType : Class 
				superSuperType:=inheritancePath.elementAt(i+1).cloneWithBindings(selfSuperType.typeParamBinding).asType(Class)
				
				selfSuperType:=superSuperType
				i:=i+1
			end
			result:=selfSuperType
		end
		
		/*stdio.writeln("result:=" + result.toString())
		stdio.writeln("<< getComparableClass")
			*/
	end
	
	
	method isSubTypeOf(expectedType : Type/*,  typeVariableToSet : Hashtable<TypeVariable, Type>*/) : Boolean is do

		//stdio.writeln("ifSubTypeOf for class " + self.typeDefinition.name + ", compare with " + expectedType.toString)
		//TODO : rajouter le cas du expectedType=PrimitiveType
		
		// First of all, check if self is kermeta::standard::void 
		if (self.getQualifiedName.endsWith("#kermeta::standard::Void"))
		then
			result:=true
		else
			result:=true			
			if ( expectedType.isInstanceOf(Class) ) 
			then
				
					
				//stdio.writeln("expectedType isInstanceOf Class")
				var comparableClass : Class init self.getComparableClass(expectedType.asType(Class))
				//comparableClass := self.getComparableClass(expectedType.asType(Class))
				//stdio.writeln("comparableClass="+comparableClass.toString)
			
				if (comparableClass.isVoid)
				then
					result:=false
				else
					result:= comparableClass.typeEquals(expectedType.asType(Class))
				end
			
			else
				//stdio.writeln("expectedType is not InstanceOf Class")
				//Check if the expectedType is a ProductType with just one type
				if ( expectedType.isInstanceOf(ProductType) )
				then
					var expectedProductType : ProductType init expectedType.asType(ProductType)
					if (expectedProductType.type.size != 1)
					then
						result:=false
					else
						// TODO, lancer isSubTypeOf sur le contenu ...
						if (expectedProductType.type.one.isInstanceOf(Class))
						then
							var comparableClass : Class init self.getComparableClass(expectedProductType.type.one.asType(Class))
							if (comparableClass.isVoid)
							then
								result:=false
							else
								result:=comparableClass.typeEquals(expectedProductType.type.one.asType(Class))
							end
						else
							result:=false
						end	
						
					end
				else
					// If expectedType is an ObjectTypeVariable, use the bindings HashTable to retrieve
					// the correct Type.
					if (expectedType.isInstanceOf(ObjectTypeVariable))
					then
						//stdio.writeln(" isSubtypeOf : expectedType is an ObjectTypeVariable : " +expectedType.asType(ObjectTypeVariable).name)
						var reallyExpectedType : Type //init typeVariableToSet.getValue(expectedType.asType(ObjectTypeVariable))
						//result:=
						
						if (reallyExpectedType.isVoid)
						then
							// It is unlikely to reach this point.
							// Just in case, result:=false
							result:=false
							/*
							if (expectedType.asType(ObjectTypeVariable).supertype.isVoid)
							then
								//no borns, result=true
								stdio.writeln("    no born")
								result:=false
							else
								stdio.writeln("    born : " + expectedType.asType(ObjectTypeVariable).supertype.toString)
								result:=self.isSubTypeOf(expectedType.asType(ObjectTypeVariable).supertype, typeVariableToSet)
							end
							*/
						else
							// Si le binding est égal à l'original, alors il faut retourner false
							//  ( if reallyExpectedType==expectedType ) ...
							if ( reallyExpectedType.equals(expectedType))
							then
								result:=false
							else
								//@TODO ...
								// There might be a problem there if there is a cycle in the bindings
								result:=self.isSubTypeOf(reallyExpectedType/*,typeVariableToSet*/)
							end
						end
					else
						result:=false
					end
				end
			end
		end
		//stdio.writeln(" -> result : " + result.toString)
	end

	method structurallyCompareToExpectedType(expectedType : Type,  typeVariableToSet : Hashtable<TypeVariable, Type> ) is do
		
		//stdio.writeln("compare a class with something")
		//stdio.writeln("is it a typeVariable ? "+expectedType.isInstanceOf(TypeVariable).toString)
		// It should not be a typeVariable ...
			
			/*if expectedType.isInstanceOf(TypeVariable).andThen{x| stdio.writeln("is it an operation typeVariable ? "+typeVariableToSet.containsKey(expectedType.asType(TypeVariable)).toString) typeVariableToSet.containsKey(expectedType.asType(TypeVariable))} then
				typeVariableToSet.put(expectedType.asType(TypeVariable), self)
				
			else*/
		
		if expectedType.isInstanceOf(Class) 
		then
			// they are both of type class with the same number of type parameters, then all type parameters should be checked
			// the resolver only try to find the bindings, but it's the checker which will have to tell if the type is different from the expectedType
			if	self.typeParamBinding.size==expectedType.asType(Class).typeParamBinding.size
			then
				from var i : Integer init 0
				until i==self.typeParamBinding.size
				loop
					self.typeParamBinding.elementAt(i).type.structurallyCompareToExpectedType(expectedType.asType(Class).typeParamBinding.elementAt(i).type
																							,typeVariableToSet
																							/*,context*/)
					i:=i+1
				end
			end
							
		end
	end

}

aspect class PrimitiveType {

	method isSubTypeOf(expectedType : Type/*,  typeVariableToSet : Hashtable<TypeVariable, Type>*/) : Boolean is do
		
		if (self.instanceType.isVoid)
		then
			result:=false
		else
			result:=self.instanceType.isSubTypeOf(expectedType/*, typeVariableToSet*/)
		end
		
	end
	
	/*
	method resolveBindings(typeVariableToSet : Hashtable<TypeVariable, Type>) : Type is do
		if (self.instanceType.isVoid)
		then
			result:=self
		else
			result:=self.instanceType.resolveBindings(typeVariableToSet)
		end
	end
	*/
}

aspect class VirtualType {

	method isSubTypeOf(expectedType : Type/*,  typeVariableToSet : Hashtable<TypeVariable, Type>*/) : Boolean is do
		//@TODO pour Clement ;-)
		result:=true
	end
}

aspect class ModelType {

	method isSubTypeOf(expectedType : Type/*,  typeVariableToSet : Hashtable<TypeVariable, Type>*/) : Boolean is do
		//@TODO pour Clement ;-)
		result:=true
	end
	

}


aspect class ObjectTypeVariable {

	method isSubTypeOf(expectedType : Type/*,  typeVariableToSet : Hashtable<TypeVariable, Type>*/) : Boolean is do
		
		/*
		1. si exp=Object -> OK
		2. si pas borne (superType.isVoid)
			- si exp=Class, alors il faut que exp==Object
			- si exp=Enumeration
		
		*/
		if (expectedType.getQualifiedName.equals("kermeta::standard::Object"))
		then
			result:=true
		else
			if (self.equals(expectedType))
			then
				result:=true
			else
				if (self.supertype.isVoid.~not.andThen{ x | (self.supertype.isSubTypeOf(expectedType)) })
				then
					result:=true
				else
					result:=false
				end
			end
		end
	end
	
	method cloneWithBindings ( bindings : OrderedSet<TypeVariableBinding>) : Type is do
		
		//stdio.writeln("cloneWithBindings for ObjectTypeVariable : " + self.name)
		var tvb : TypeVariableBinding init bindings.detect{ x | x.variable.equals(self)}
		if (tvb.isVoid)
		then
			result:=self
		else
			result:=tvb.type
		end
		//stdio.writeln("cloneWithBindings for ObjectTypeVariable result : " + result.toString)
	end	
}
