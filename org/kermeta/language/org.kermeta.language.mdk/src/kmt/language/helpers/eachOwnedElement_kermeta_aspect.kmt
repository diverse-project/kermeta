/* $Id:$ */
/* Generated using /fr.irisa.triskell.kermeta.ecore/src/kermeta/transformations/ContainmentBasedActionPerformerGenerator.kmt */

package org;

require kermeta
require "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

using kermeta::language::structure

package kermeta {

package language {

package behavior {

aspect class Assignment {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		if (not self.target.isVoid) then
			func(self.target.asType(kermeta::standard::Object))
		end
		if (not self.~value.isVoid) then
			func(self.~value.asType(kermeta::standard::Object))
		end
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Expression {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallExpression {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		self.parameters.each{ e |
			func(e)
		}
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Block {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		self.statement.each{ e |
			func(e)
		}
		self.rescueBlock.each{ e |
			func(e)
		}
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallVariable {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::CallExpression is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallFeature {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::CallExpression is do
		super(func)
		if (not self.target.isVoid) then
			func(self.target.asType(kermeta::standard::Object))
		end
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallSuperOperation {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::CallOperation is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallResult {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::CallVariable is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallValue {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::CallExpression is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Conditional {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		if (not self.thenBody.isVoid) then
			func(self.thenBody.asType(kermeta::standard::Object))
		end
		if (not self.elseBody.isVoid) then
			func(self.elseBody.asType(kermeta::standard::Object))
		end
		if (not self.condition.isVoid) then
			func(self.condition.asType(kermeta::standard::Object))
		end
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Raise {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		if (not self.expression.isVoid) then
			func(self.expression.asType(kermeta::standard::Object))
		end
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Rescue {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
		self.body.each{ e |
			func(e)
		}
		if (not self.exceptionType.isVoid) then
			func(self.exceptionType.asType(kermeta::standard::Object))
		end
	end
}

aspect class TypeReference {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::MultiplicityElement is do
		super(func)
	end
}

aspect class Literal {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class EmptyExpression {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class JavaStaticCall {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		self.parameters.each{ e |
			func(e)
		}
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class LambdaExpression {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		self.parameters.each{ e |
			func(e)
		}
		if (not self.body.isVoid) then
			func(self.body.asType(kermeta::standard::Object))
		end
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class LambdaParameter {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
		if (not self.type.isVoid) then
			func(self.type.asType(kermeta::standard::Object))
		end
	end
}

aspect class IntegerLiteral {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Literal is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class StringLiteral {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Literal is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class BooleanLiteral {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Literal is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallTypeLiteral {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Literal is do
		super(func)
		if (not self.typeref.isVoid) then
			func(self.typeref.asType(kermeta::standard::Object))
		end
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class VoidLiteral {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Literal is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Loop {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		if (not self.initialization.isVoid) then
			func(self.initialization.asType(kermeta::standard::Object))
		end
		if (not self.body.isVoid) then
			func(self.body.asType(kermeta::standard::Object))
		end
		if (not self.stopCondition.isVoid) then
			func(self.stopCondition.asType(kermeta::standard::Object))
		end
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class SelfExpression {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class VariableDecl {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::Expression is do
		super(func)
		if (not self.initialization.isVoid) then
			func(self.initialization.asType(kermeta::standard::Object))
		end
		if (not self.type.isVoid) then
			func(self.type.asType(kermeta::standard::Object))
		end
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class UnresolvedCall {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::Unresolved is do
		super(func)
		self.usings.each{ e |
			func(e)
		}
		if (not self.target.isVoid) then
			func(self.target.asType(kermeta::standard::Object))
		end
		self.parameters.each{ e |
			func(e)
		}
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallOperation {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::CallFeature is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallProperty {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::CallFeature is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class CallEnumLiteral {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::behavior::CallExpression is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

}

package structure {



aspect class KermetaModelElement {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
		self.kOwnedTags.each{ e |
			func(e)
		}
	end
}


aspect class Operation {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::MultiplicityElement is do
		super(func)
		self.ownedParameter.each{ e |
			func(e)
		}
		self.~pre.each{ e |
			func(e)
		}
		self.~post.each{ e |
			func(e)
		}
		if (not self.body.isVoid) then
			func(self.body.asType(kermeta::standard::Object))
		end
		self.ownedUnresolvedOperations.each{ e |
			func(e)
		}
	end
}

aspect class Property {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::MultiplicityElement is do
		super(func)
		if (not self.getterBody.isVoid) then
			func(self.getterBody.asType(kermeta::standard::Object))
		end
		if (not self.setterBody.isVoid) then
			func(self.setterBody.asType(kermeta::standard::Object))
		end
		self.ownedUnresolvedProperties.each{ e |
			func(e)
		}
	end
}

aspect class Type {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class TypeContainer {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class EnumerationLiteral {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::NamedElement is do
		super(func)
	end
}

aspect class TypeVariableBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypeContainer is do
		super(func)
	end
}

aspect class MultiplicityElement {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypedElement is do
		super(func)
	end
}

aspect class TypeDefinition {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::NamedElement is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Class {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::ParameterizedType is do
		super(func)
	end
}

aspect class DataType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::Type is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Enumeration {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::DataType is do
		super(func)
		self.ownedLiteral.each{ e |
			func(e)
		}
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class NamedElement {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class Package {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::NamedElement is do
		super(func)
		self.nestedPackage.each{ e |
			func(e)
		}
		self.ownedAdaptationOperators.each{ e |
			func(e)
		}
		self.ownedTypeDefinition.each{ e |
			func(e)
		}
	end
}

aspect class Parameter {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::MultiplicityElement is do
		super(func)
	end
}

aspect class PrimitiveType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::DataType is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class TypedElement {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypeContainer is do
		super(func)
	end
}


aspect class Tag {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class AbstractProperty {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class Constraint {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::NamedElement is do
		super(func)
		if (not self.body.isVoid) then
			func(self.body.asType(kermeta::standard::Object))
		end
	end
}


aspect class ClassDefinition {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::GenericTypeDefinition is do
		super(func)
		self.~inv.each{ e |
			func(e)
		}
		self.ownedAttribute.each{ e |
			func(e)
		}
		self.ownedOperation.each{ e |
			func(e)
		}
		self.containedType.each{ e |
			func(e)
		}
	end
}


aspect class ModelingUnit {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypeDefinitionContainer is do
		super(func)
		self.packages.each{ e |
			func(e)
		}
		self.requires.each{ e |
			func(e)
		}
	end
}

aspect class TypeDefinitionContainer {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::NamedElement is do
		super(func)
		self.ownedTypeDefinition.each{ e |
			func(e)
		}
	end
}

aspect class Require {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class GenericTypeDefinition {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypeDefinition is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class ParameterizedType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::Type is do
		super(func)
		self.virtualTypeBinding.each{ e |
			func(e)
		}
		self.typeParamBinding.each{ e |
			func(e)
		}
	end
}

aspect class TypeVariable {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypeContainer is do
		super(func)
	end
}

aspect class ObjectTypeVariable {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypeVariable is do
		super(func)
	end
}

aspect class ModelType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::Type is do
		super(func)
		self.ownedBindings.each{ e |
			func(e)
		}
		self.ownedPackages.each{ e |
			func(e)
		}
		self.ownedTypeDefinition.each{ e |
			func(e)
		}
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class ModelTypeVariable {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypeVariable is do
		super(func)
	end
}

aspect class VirtualType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::ObjectTypeVariable is do
		super(func)
		self.typeParamBinding.each{ e |
			func(e)
		}
	end
}

aspect class Model {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class AbstractOperation {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class UnresolvedType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::Type is do
		super(func)
		self.usings.each{ e |
			func(e)
		}
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Unresolved {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class UnresolvedProperty {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::AbstractProperty is do
		super(func)
	end
}

aspect class UnresolvedOperation {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::AbstractOperation is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class Using {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class ProductType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypeContainer is do
		super(func)
	end
}

aspect class FunctionType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypeContainer is do
		super(func)
	end
}

aspect class VoidType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::Type is do
		super(func)
	end
}

aspect class UnresolvedInferredType {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::Unresolved is do
		super(func)
	end
}

aspect class UnresolvedTypeVariable {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::Unresolved is do
		super(func)
		self.containedType.each{ e |
			func(e)
		}
	end
}

aspect class ModelTypeBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class SimpleBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::ModelTypeBinding is do
		super(func)
		self.ownedClassDefinitionBindings.each{ e |
			func(e)
		}
		self.ownedEnumerationBindings.each{ e |
			func(e)
		}
	end
}

aspect class AdaptationBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::ModelTypeBinding is do
		super(func)
		self.ownedClassDefinitionBindings.each{ e |
			func(e)
		}
		self.ownedEnumerationBindings.each{ e |
			func(e)
		}
		self.usedAdaptationOperators.each{ e |
			func(e)
		}
	end
}

aspect class ClassDefinitionBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::KermetaModelElement is do
		super(func)
	end
}

aspect class SimpleClassDefinitionBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::ClassDefinitionBinding is do
		super(func)
		self.ownedPropertyBindings.each{ e |
			func(e)
		}
		self.ownedOperationBindings.each{ e |
			func(e)
		}
	end
}

aspect class ComplexClassDefinitionBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::ClassDefinitionBinding is do
		super(func)
		self.ownedPropertyBindings.each{ e |
			func(e)
		}
		self.ownedOperationBindings.each{ e |
			func(e)
		}
	end
}

aspect class EnumerationBinding {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
		self.ownedEnumLiteralBindings.each{ e |
			func(e)
		}
	end
}

aspect class SimpleEnumerationBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::EnumerationBinding is do
		super(func)
	end
}

aspect class ComplexEnumerationBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::EnumerationBinding is do
		super(func)
	end
}

aspect class PropertyBinding {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
	end
}

aspect class OperationBinding {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
	end
}

aspect class SimplePropertyBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::PropertyBinding is do
		super(func)
	end
}

aspect class ComplexPropertyBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::PropertyBinding is do
		super(func)
	end
}

aspect class SimpleOperationBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::OperationBinding is do
		super(func)
		self.ownedParameterBindings.each{ e |
			func(e)
		}
	end
}

aspect class ComplexOperationBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::OperationBinding is do
		super(func)
		self.ownedParameterBindings.each{ e |
			func(e)
		}
	end
}

aspect class ParameterBinding {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
	end
}

aspect class SimpleParameterBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::ParameterBinding is do
		super(func)
	end
}

aspect class ComplexParameterBinding {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::ParameterBinding is do
		super(func)
	end
}

aspect class EnumLiteralbinding {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
	end
}

aspect class AdaptationOperator {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::NamedElement is do
		super(func)
	end
}

aspect class UseAdaptationOperator {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
		self.ownedUnresolved.each{ e |
			func(e)
		}
	end
}

aspect class PropertyAdaptationOperator {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::AdaptationOperator is do
		super(func)
	end
}

aspect class UnresolvedAdaptationOperator {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::AdaptationOperator is do
		super(func)
	end
}

aspect class AdaptationParameter {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::TypedElement is do
		super(func)
	end
}

aspect class OperationAdaptationOperator {
	method eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void from org::kermeta::language::structure::AdaptationOperator is do
		super(func)
	end
}

}

aspect class DummyClass {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
	end
}

}

aspect class DummyClass {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
	end
}

}

aspect class DummyClass {
	operation eachOwnedElement(func : <kermeta::standard::Object -> kermeta::standard::Object>) : Void is do
	end
}

