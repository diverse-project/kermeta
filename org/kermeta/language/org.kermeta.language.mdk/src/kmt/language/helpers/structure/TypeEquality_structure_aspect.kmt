/* $Id: ModelingUnitHelper.kmt,v 1.1 2008-12-09 14:26:05 dvojtise Exp $
 * Creation date: Aug, 2011
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: 
 *		Didier Vojtisek <didier.vojtisek@inria.fr>
 */
package org::kermeta::language::structure;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

using kermeta::standard
using kermeta::utils

class Binding{
	
	reference types : Set<TypeVariable>

}


//TODO
//if 'other' is a PrimitiveType, the test will not work
aspect class Type {

	/**
	 * return true if self and other are similar types, i.e. refereing to the same ClassDefinition including parameters or the same function 
	 */
	operation typeEquals(other : Type ) : Boolean is do
		result := self.typeEquivalence(other,void) // default equality
	end
	
	/**
	* return true if self and other are similar types, 
	* but take into account that some type variables can be equivalent
	*/
	operation typeEquivalence(other : Type, bindings : Sequence<Binding>) : Boolean is do
		result := self == other
	
	end

}


aspect class TypeVariable inherits TypeContainer, Type, NamedElement {

	method typeEquivalence (other : Type, bindings : Sequence<Binding>) : Boolean is do
		result:= self==other
		
		if not bindings.isVoid 
			and not result 
			and other.isInstanceOf(TypeVariable) then
 			bindings.each{equivalentVars|
				if equivalentVars.types.contains(self) then
					result := equivalentVars.types.contains(other.asType(TypeVariable))
				end}

		
		end
	
	end
}

aspect class ParameterizedType inherits Type {
	method typeEquivalence(other : Type, bindings : Sequence<Binding>) : Boolean is do
		if not other.isVoid and other.isInstanceOf(ParameterizedType)  then
			result := self.typeDefinition == other.asType(ParameterizedType).typeDefinition
			
			// Checking typeBindings
			if (self.typeParamBinding().size() == other.asType(ParameterizedType).typeParamBinding().size()) then
				from var i : Integer init 0//self.typeParamBinding().size()
				until i >= self.typeParamBinding().size() or result==false
				loop
					//stdio.writeln("i="+i.toString)
					var t1 : Type init self.typeParamBinding().at(i).type
					var t2 : Type init other.asType(ParameterizedType).typeParamBinding().at(i).type
					result := result and t1.typeEquivalence(t2, bindings) 
					i := i+1
				end
			else result := false
			end 
		else
			result := false 
		end
		
	end
}

aspect class FunctionType inherits Type {
	method typeEquivalence(other : Type,bindings : Sequence<Binding> ) : Boolean is do
		if not other.isVoid and other.isInstanceOf(FunctionType) then			
			var p : FunctionType init  other.asType(FunctionType)
			result := self.left.typeEquivalence(p.left, bindings) and self.right.typeEquivalence( p.right, bindings) 
		else
			result := false 
		end
	end
	
}

aspect class ProductType inherits Type {
	method typeEquivalence(other : Type, bindings : Sequence<Binding> ) : Boolean is do
		if not other.isVoid and other.isInstanceOf(ProductType) then			
			if (self.type.size() == other.asType(ProductType).type.size()) then
				result := true
				from var i : Integer init self.type.size()
				until i >= self.type.size() or result==false
				loop
					var t1 : Type init self.type.at(i)
					var t2 : Type init other.asType(ProductType).type.at(i)
					result := result and t1.typeEquivalence(t2, bindings) 
					i := i+1
				end
			else result := false
			end  
		else
			result := false 
		end
	end
	
	
	
}


aspect class PrimitiveType inherits DataType {

	method typeEquivalence(other : Type,bindings : Sequence<Binding>) : Boolean is do
		result := self.instanceType.typeEquivalence(other, bindings)
	end
}

aspect class UnresolvedType inherits Type, Unresolved, TypeContainer {
	method typeEquivalence(other : Type,bindings : Sequence<Binding>) : Boolean is do
		if not other.isVoid and other.isInstanceOf(UnresolvedType) then
			var otherUT  : UnresolvedType 
			otherUT ?= other
			result := (self.typeIdentifier == otherUT.typeIdentifier)
			// Cannot match UnresolvedType that have usings or generics, (need to be resolved to be sure that the typeIdentifier is ok					
			result := result and not (self.generics.size > 0 )
			result := result and not (self.usings.size > 0 )
			result := result and not (otherUT.generics.size > 0 )
			result := result and not (otherUT.usings.size > 0 )
		else
			result := false
		end
	end
}
