/* $Id:$ 
 * Creation : February 28, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */



package org::kermeta::language::helpers::structure;
require kermeta

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/ModelingUnitHelper_structure_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/CreationHelper.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/GetRootContainer_object_aspect.kmt"


using kermeta::standard
using org::kermeta::language::structure

class TypeCreationHelper 
// See resolver StaticSetterContext.kmt for more ...
{
	
	attribute currentModelingUnit : ModelingUnit
	
	operation createTypeFromQualifiedName(classDefinitionQualifiedName : String) : Type is do
		var cd : ClassDefinition
		cd ?= currentModelingUnit.getTypeDefinitionByQualifiedName(classDefinitionQualifiedName)
		result := Class.new.initializeFromAClassDefinition(cd)
	end


	operation createTypeFromMultiplicityElement(element : MultiplicityElement ) : Type is do
		if (not(element.upper.isVoid))
		then
			currentModelingUnit:=element.getRootContainer.asType(ModelingUnit)
		 	//stdio.writeln("current ModelingUnit is " + currentModelingUnit.name)
		 
			// clone the type of the multiplicity element
			var typeCopy : org::kermeta::language::structure::Type
			typeCopy := element.type
				 
			if element.upper == 0 then
				// the only type valid with upper bound == 0 is Void 
				result := createTypeFromQualifiedName("kermeta::standard::Void")
				//stdio.writeln("createTypeFromMultiplicityElement typeCopy = VOID")
			else if element.upper == 1 then
				result := typeCopy
				//stdio.writeln("createTypeFromMultiplicityElement typeCopy = "+result.toString)
			else
				var typeParams : Sequence<Type> init Sequence<Type>.new
				typeParams.add(typeCopy)
				
				var cd : ClassDefinition
				if (element.isUnique() and element.isOrdered()) then 
					cd ?= currentModelingUnit.getTypeDefinitionByQualifiedName("kermeta::standard::OrderedSet")
					if cd.isVoid then
						//errors.add(ResolverException.new.initialize("Not able to find  kermeta::standard::OrderedSet", element))
						stdio.writeln("TypeCreationHelper.kmt - Not able to find  kermeta::standard::OrderedSet")
					else
						result := Class.new.initializeFromAGenericClassDefinition(cd, typeParams)
					end
					//stdio.writeln("createTypeFromMultiplicityElement typeCopy = OrderedSet<"+result.toString+">")
				else if (element.isUnique() and not element.isOrdered()) then
					cd ?= currentModelingUnit.getTypeDefinitionByQualifiedName("kermeta::standard::Set")
					if cd.isVoid then
						stdio.writeln("TypeCreationHelper.kmt - Not able to find  kermeta::standard::Set")
					else
						result := org::kermeta::language::structure::Class.new.initializeFromAGenericClassDefinition(cd, typeParams)
					end
					//stdio.writeln("createTypeFromMultiplicityElement typeCopy = Set<"+result.toString+">")
				else if ( not element.isUnique() and element.isOrdered()) then
					cd ?= currentModelingUnit.getTypeDefinitionByQualifiedName("kermeta::standard::Sequence")
					if cd.isVoid then
						stdio.writeln("TypeCreationHelper.kmt - Not able to find  kermeta::standard::Sequence")
					else
						result := org::kermeta::language::structure::Class.new.initializeFromAGenericClassDefinition(cd, typeParams)
					end
					//stdio.writeln("createTypeFromMultiplicityElement typeCopy = Sequence<"+result.toString+">")
				else
					cd ?= currentModelingUnit.getTypeDefinitionByQualifiedName("kermeta::standard::Bag")
					if cd.isVoid then
						stdio.writeln("TypeCreationHelper.kmt - Not able to find  kermeta::standard::Bag")
					else
						result := org::kermeta::language::structure::Class.new.initializeFromAGenericClassDefinition(cd, typeParams)
					end
					//stdio.writeln("createTypeFromMultiplicityElement typeCopy = Bag<"+result.toString+">")
				end end end
			end end
		end
	end

}