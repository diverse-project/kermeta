/* $Id: ModelingUnitHelper.kmt,v 1.1 2008-12-09 14:26:05 dvojtise Exp $
 * Creation date: May 19, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: 
 *		Cyril Faucher <cfaucher@irisa.fr>
 */
package org::kermeta::language::structure;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "TypeHelpers_structure_aspect.kmt"

using kermeta::standard


aspect class ClassDefinition {
	
	/**
	 * Get an Operation that can be called from an instance of this ClassDefinition
	 * return void if not found
	 */
	operation getCallableOperationByName( operationName : String ) : Operation is do
		//stdio.writeln("ClassDefinition.getCallableOperationByName=" + operationName)
		result := self.ownedOperation.detect{o| o.name == operationName}		
		if (result.isVoid) then
			// not found locally, look into superclasses
			self.superType.select{t | t.isInstanceOf(Class) }.detect{ cl | 
				//stdio.writeln("cl=" + cl.toString)
				// look into super classes and store possible candidate into result
				result := cl.asType(Class).typeDefinition.asType(ClassDefinition).getCallableOperationByName(operationName)
				not result.isVoid // condition for detect to stop looking in the super classes 
			}
		end	
	end
	
	/**
	 * Get a Property that can be called from an instance of this ClassDefinition
	 * return void if not found
	 */
	operation getCallablePropertyByName( attributeName : String ) : Property is do
		//stdio.writeln("ClassDefinition.getCallablePeropertyByName=" + attributeName)
		result := self.ownedAttribute.detect{o| o.name == attributeName}		
		if (result.isVoid) then
			// not found locally, look into superclasses
			self.superType.select{t | t.isInstanceOf(Class) }.detect{ cl | 
				// look into super classes and store possible candidate into result
				result := cl.asType(Class).typeDefinition.asType(ClassDefinition).getCallablePropertyByName(attributeName)
				not result.isVoid // condition for detect to stop looking in the super classes 
			}
		end	
	end	
}

aspect class Type {
	operation getCallableOperationByName( operationName : String ) : Operation is do
		//stdio.writeln("Type.getCallableOperationByName=" + operationName)
		result := void
	end
	
	operation getCallablePropertyByName( attributeName : String ) : Property is do
		//stdio.writeln("Type.getCallablePeropertyByName=" + attributeName)
		result := void
	end
	
}
aspect class ParameterizedType inherits Type {}

aspect class Class inherits ParameterizedType {
	
	
	
	/**
	 * Get an Operation that can be called from an instance of this Class
	 * return void if not found
	 */
	method getCallableOperationByName( operationName : String ) : Operation is do
		//stdio.writeln("Class.getCallableOperationByName=" + operationName)
		result := self.typeDefinition.asType(ClassDefinition).getCallableOperationByName(operationName)
	end
	
	/**
	 * Get a Property that can be called from an instance of this Class
	 * return void if not found
	 */
	method getCallablePropertyByName( attributeName : String ) : Property is do
		//stdio.writeln("Class.getCallablePeropertyByName=" + attributeName)
		result := self.typeDefinition.asType(ClassDefinition).getCallablePropertyByName(attributeName)
	end	
	
}

