/* $Id:$ 
 * Creation : November 26, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */


package org::kermeta::language::structure;

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

using kermeta::standard


aspect class NamedElement
{
	operation getQualifiedName() : String is do
		var buffer : kermeta::utils::StringBuffer init kermeta::utils::StringBuffer.new
		if (not self.container().isVoid()) then
			if self.container().isInstanceOf(NamedElement) then
				buffer.append(self.container().asType(NamedElement).getQualifiedName())
				buffer.append("::")
			end
		end
		buffer.append(name)
		result := buffer.toString
	end
}

aspect class Type
{
	operation getQualifiedName() : String is do
		
		result := "<TODO "+ self.toString +">"
	end
}

aspect class Class
{
	method getQualifiedName() : String is do	
		var buffer : kermeta::utils::StringBuffer init kermeta::utils::StringBuffer.new
		buffer.append(self.typeDefinition.asType(ClassDefinition).getQualifiedName)
		
		 /* self.typeParamBinding.indexedEach{ tpb, eachContext |
			if eachContext.isFirst then
				buffer.append("<")
			end
			buffer.append(tpb.type.getQualifiedName)
			if eachContext.isLast then
		 		buffer.append(">")
		 	else
		 		buffer.append(", ")
			end
		} */
		// workaround compiler/framework limitation, forget about the "," between elements :-(
		if not self.typeParamBinding.isEmpty then
			buffer.append("<")
		end
		self.typeParamBinding.each{ tpb | 
			buffer.append(tpb.type.getQualifiedName)
		}
		if not self.typeParamBinding.isEmpty then
			buffer.append("<")
		end
		result := buffer.toString
	end
}
aspect class DataType
{
	method getQualifiedName() : String is do
		
		result := super()
	end
}
aspect class ModelType
{
	method getQualifiedName() : String is do
		
		result := super()
	end
}
aspect class TypeVariable
{
	method getQualifiedName() : String from NamedElement is do
		
		result := super()
	end
}