package org::kermeta::language::structure;
using kermeta::standard
using kermeta::utils
using kermeta::io::StdIO => stdio
class SlicerVisitor {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute sliced : Boolean
	
	attribute idPass : Integer

	operation initialiseAttributes(pass : Integer) is do
		self.visitedPass := false
		self.sliced := false
		self.visitedForRelations := false
		self.idPass := pass
	end

	operation visitToAddClasses(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theVisualiserKermetaModel : VisualiserKermetaModel) is do
	end

	operation checkInitialisation(pass : Integer) is do
		if(self.visitedPass.isVoid or self.idPass.isVoid.orElse{b | self.idPass!=pass}) then initialiseAttributes(pass) end
	end
}

aspect class Package {
	method visitToAddClasses(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		checkInitialisation(theVisualiserKermetaModel.idPass)
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			if(not self.sliced) then
				theVisualiserKermetaModel.addedPackages.add(self)
				self.sliced := true
			end
			self.visitedPass := true
			self.nestedPackage.each{thePackage | thePackage.visitToAddClasses(theVisualiserKermetaModel)}
		end
	end
	method visitToAddRelations(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			self.visitedForRelations := true
			self.nestedPackage.each{thePackage | thePackage.visitToAddRelations(theVisualiserKermetaModel)}
		end
	end
}

aspect class ModelingUnit {
	method visitToAddClasses(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		checkInitialisation(theVisualiserKermetaModel.idPass)
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			self.packages.each{thePackage | thePackage.visitToAddClasses(theVisualiserKermetaModel)}
		end
	end
	method visitToAddRelations(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			self.visitedForRelations := true
			self.packages.each{thePackage | thePackage.visitToAddRelations(theVisualiserKermetaModel)}
		end
	end
}

aspect class TypeDefinitionContainer inherits SlicerVisitor {
	method visitToAddClasses(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		checkInitialisation(theVisualiserKermetaModel.idPass)
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			self.ownedTypeDefinition.each{theTypeDefinition | theTypeDefinition.visitToAddClasses(theVisualiserKermetaModel)}
		end
	end
	method visitToAddRelations(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedTypeDefinition.each{theTypeDefinition | theTypeDefinition.visitToAddRelations(theVisualiserKermetaModel)}
		end
	end
}

aspect class TypeDefinition inherits SlicerVisitor {
	method visitToAddClasses(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		checkInitialisation(theVisualiserKermetaModel.idPass)
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			if(theVisualiserKermetaModel.considersuperType) then self.superType.each{theType | theType.visitToAddClasses(theVisualiserKermetaModel)} end
		end
	end
	method visitToAddRelations(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			self.visitedForRelations := true
			if(theVisualiserKermetaModel.considersuperType) then self.superType.each{theType | theType.visitToAddRelations(theVisualiserKermetaModel)} end
		end
	end
}

aspect class Type inherits SlicerVisitor {
}

aspect class ParameterizedType {
	method visitToAddClasses(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		checkInitialisation(theVisualiserKermetaModel.idPass)
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			self.typeDefinition.visitToAddClasses(theVisualiserKermetaModel)
		end
	end
	method visitToAddRelations(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			self.visitedForRelations := true
			self.typeDefinition.visitToAddRelations(theVisualiserKermetaModel)
		end
	end
}

aspect class ClassDefinition {
	method visitToAddClasses(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		checkInitialisation(theVisualiserKermetaModel.idPass)
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			if(not self.sliced) then
				theVisualiserKermetaModel.addedClassDefinitions.add(self)
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theVisualiserKermetaModel : VisualiserKermetaModel) is do
		if(not self.visitedPass) then
			super(theVisualiserKermetaModel)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

