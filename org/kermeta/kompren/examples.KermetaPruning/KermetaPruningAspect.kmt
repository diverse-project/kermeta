package org::kermeta::language::structure;
using org::kermeta::language::behavior
using kermeta::standard
using kermeta::utils
using kermeta::io::StdIO => stdio
class SlicerVisitor {
	reference dup : Object

	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute sliced : Boolean

	attribute idPass : Integer

	operation initialiseAttributes(pass : Integer) is do
		self.visitedPass := false
		self.sliced := false
		self.visitedForRelations := false
		self.idPass := pass
	end

	operation visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theKermetaPruning : KermetaPruning) is do
	end

	operation checkInitialisation(pass : Integer) is do
		if(self.visitedPass.isVoid or self.idPass.isVoid.orElse{b | self.idPass!=pass}) then initialiseAttributes(pass) end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end

	operation createFrom() : Object is abstract
}

aspect class ModelingUnit {
	method createFrom() : Object from TypeDefinitionContainer is do
		var theModelingUnit : ModelingUnit init ModelingUnit.new
		theModelingUnit.~name := self.name
		result := theModelingUnit
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from TypeDefinitionContainer is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.packages.each{thePackage | thePackage.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from TypeDefinitionContainer is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.packages.each{thePackage | thePackage.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and thePackage.sliced) then
					dup.asType(ModelingUnit).packages.add(thePackage.dup.asType(Package))
					theKermetaPruning.addToRoot(thePackage.dup)
				end
			}
		end
	end
}

aspect class Package {
	method createFrom() : Object from TypeDefinitionContainer is do
		var thePackage : Package init Package.new
		thePackage.~name := self.name
		thePackage.~name := self.name
		result := thePackage
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from TypeDefinitionContainer is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.nestedPackage.each{thePackage | thePackage.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from TypeDefinitionContainer is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.nestedPackage.each{thePackage | thePackage.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and thePackage.sliced) then
					dup.asType(Package).nestedPackage.add(thePackage.dup.asType(Package))
					theKermetaPruning.addToRoot(thePackage.dup)
				end
			}
		end
	end
}

aspect class TypeDefinitionContainer {
	method createFrom() : Object is do
		var theTypeDefinitionContainer : TypeDefinitionContainer init TypeDefinitionContainer.new
		theTypeDefinitionContainer.~name := self.name
		result := theTypeDefinitionContainer
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.ownedTypeDefinition.each{theTypeDefinition | theTypeDefinition.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedTypeDefinition.each{theTypeDefinition | theTypeDefinition.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theTypeDefinition.sliced) then
					dup.asType(TypeDefinitionContainer).ownedTypeDefinition.add(theTypeDefinition.dup.asType(TypeDefinition))
					theKermetaPruning.addToRoot(theTypeDefinition.dup)
				end
			}
		end
	end
}

aspect class TypeDefinition {
	method createFrom() : Object from TypeContainer is do
		var theTypeDefinition : TypeDefinition init TypeDefinition.new
		theTypeDefinition.~name := self.name
		result := theTypeDefinition
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from TypeContainer is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.superType.each{theType | theType.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from TypeContainer is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.superType.each{theType | theType.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theType.sliced) then
					dup.asType(TypeDefinition).superType.add(theType.dup.asType(Type))
					theKermetaPruning.addToRoot(theType.dup)
				end
			}
		end
	end
}

aspect class ClassDefinition {
	method createFrom() : Object is do
		var theClassDefinition : ClassDefinition init ClassDefinition.new
		theClassDefinition.~name := self.name
		result := theClassDefinition
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.ownedOperation.each{theOperation | theOperation.visitToAddClasses(theKermetaPruning)}
			self.ownedAttribute.each{theProperty | theProperty.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedOperation.each{theOperation | theOperation.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theOperation.sliced) then
					dup.asType(ClassDefinition).ownedOperation.add(theOperation.dup.asType(Operation))
					theKermetaPruning.addToRoot(theOperation.dup)
				end
			}
			self.ownedAttribute.each{theProperty | theProperty.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theProperty.sliced) then
					dup.asType(ClassDefinition).ownedAttribute.add(theProperty.dup.asType(Property))
					theKermetaPruning.addToRoot(theProperty.dup)
				end
			}
		end
	end
}

aspect class Operation {
	method createFrom() : Object from MultiplicityElement is do
		var theOperation : Operation init Operation.new
		theOperation.~name := self.name
		result := theOperation
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from MultiplicityElement is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.ownedParameter.each{theParameter | theParameter.visitToAddClasses(theKermetaPruning)}
			if(not self.body.isVoid) then self.body.visitToAddClasses(theKermetaPruning) end
			self.~pre.each{theConstraint | theConstraint.visitToAddClasses(theKermetaPruning)}
			self.~post.each{theConstraint | theConstraint.visitToAddClasses(theKermetaPruning)}
			self.ownedParameter.each{theParameter | theParameter.visitToAddClasses(theKermetaPruning)}
			if(not self.owningClass.isVoid) then self.owningClass.visitToAddClasses(theKermetaPruning) end
			self.raisedException.each{theType | theType.visitToAddClasses(theKermetaPruning)}
			if(not self.superOperation.isVoid) then self.superOperation.visitToAddClasses(theKermetaPruning) end
			self.typeParameter.each{theTypeVariable | theTypeVariable.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from MultiplicityElement is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedParameter.each{theParameter | theParameter.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theParameter.sliced) then
					dup.asType(Operation).ownedParameter.add(theParameter.dup.asType(Parameter))
					theKermetaPruning.addToRoot(theParameter.dup)
				end
			}
			if(not self.body.isVoid) then self.body.visitToAddRelations(theKermetaPruning)
			if(self.body.sliced) then
				self.dup.asType(Operation).body := self.body.dup.asType(Expression)
				theKermetaPruning.addToRoot(self.body.dup)
			end
 end
			self.~pre.each{theConstraint | theConstraint.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theConstraint.sliced) then
					dup.asType(Operation).~pre.add(theConstraint.dup.asType(Constraint))
					theKermetaPruning.addToRoot(theConstraint.dup)
				end
			}
			self.~post.each{theConstraint | theConstraint.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theConstraint.sliced) then
					dup.asType(Operation).~post.add(theConstraint.dup.asType(Constraint))
					theKermetaPruning.addToRoot(theConstraint.dup)
				end
			}
			self.ownedParameter.each{theParameter | theParameter.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theParameter.sliced) then
					dup.asType(Operation).ownedParameter.add(theParameter.dup.asType(Parameter))
					theKermetaPruning.addToRoot(theParameter.dup)
				end
			}
			if(not self.owningClass.isVoid) then self.owningClass.visitToAddRelations(theKermetaPruning)
			if(self.owningClass.sliced) then
				self.dup.asType(Operation).owningClass := self.owningClass.dup.asType(ClassDefinition)
				theKermetaPruning.addToRoot(self.owningClass.dup)
			end
 end
			self.raisedException.each{theType | theType.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theType.sliced) then
					dup.asType(Operation).raisedException.add(theType.dup.asType(Type))
					theKermetaPruning.addToRoot(theType.dup)
				end
			}
			if(not self.superOperation.isVoid) then self.superOperation.visitToAddRelations(theKermetaPruning)
			if(self.superOperation.sliced) then
				self.dup.asType(Operation).superOperation := self.superOperation.dup.asType(AbstractOperation)
				theKermetaPruning.addToRoot(self.superOperation.dup)
			end
 end
			self.typeParameter.each{theTypeVariable | theTypeVariable.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theTypeVariable.sliced) then
					dup.asType(Operation).typeParameter.add(theTypeVariable.dup.asType(TypeVariable))
					theKermetaPruning.addToRoot(theTypeVariable.dup)
				end
			}
		end
	end
}

aspect class Parameter {
	method createFrom() : Object is do
		var theParameter : Parameter init Parameter.new
		theParameter.~name := self.name
		result := theParameter
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class TypedElement {
	method visitToAddClasses(theKermetaPruning : KermetaPruning) from TypeContainer is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			if(not self.type.isVoid) then self.type.visitToAddClasses(theKermetaPruning) end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from TypeContainer is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.type.isVoid) then self.type.visitToAddRelations(theKermetaPruning)
			if(self.type.sliced) then
				self.dup.asType(TypedElement).type := self.type.dup.asType(Type)
				theKermetaPruning.addToRoot(self.type.dup)
			end
 end
		end
	end
}

aspect class TypeContainer {
	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.containedType.each{theType | theType.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.containedType.each{theType | theType.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theType.sliced) then
					dup.asType(TypeContainer).containedType.add(theType.dup.asType(Type))
					theKermetaPruning.addToRoot(theType.dup)
				end
			}
		end
	end
}

aspect class ParameterizedType {
	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.typeDefinition.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.typeDefinition.visitToAddRelations(theKermetaPruning)
			if(self.typeDefinition.sliced) then
				self.dup.asType(ParameterizedType).typeDefinition := self.typeDefinition.dup.asType(GenericTypeDefinition)
				theKermetaPruning.addToRoot(self.typeDefinition.dup)
			end

		end
	end
}

aspect class Property {
	method createFrom() : Object from MultiplicityElement is do
		var theProperty : Property init Property.new
		theProperty.~name := self.name
		result := theProperty
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from MultiplicityElement is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from MultiplicityElement is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class Constraint {
	method createFrom() : Object is do
		var theConstraint : Constraint init Constraint.new
		theConstraint.~name := self.name
		result := theConstraint
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.body.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.body.visitToAddRelations(theKermetaPruning)
			if(self.body.sliced) then
				self.dup.asType(Constraint).body := self.body.dup.asType(Expression)
				theKermetaPruning.addToRoot(self.body.dup)
			end

		end
	end
}

aspect class TypeMapping {
	method createFrom() : Object is do
		var theTypeMapping : TypeMapping init TypeMapping.new
		result := theTypeMapping
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.targetType.visitToAddClasses(theKermetaPruning)
			self.sourceType.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.targetType.visitToAddRelations(theKermetaPruning)
			if(self.targetType.sliced) then
				self.dup.asType(TypeMapping).targetType := self.targetType.dup.asType(Type)
				theKermetaPruning.addToRoot(self.targetType.dup)
			end

			self.sourceType.visitToAddRelations(theKermetaPruning)
			if(self.sourceType.sliced) then
				self.dup.asType(TypeMapping).sourceType := self.sourceType.dup.asType(TypeDefinition)
				theKermetaPruning.addToRoot(self.sourceType.dup)
			end

		end
	end
}

aspect class Using {
	method createFrom() : Object is do
		var theUsing : Using init Using.new
		theUsing.~fromQName := self.fromQName
		result := theUsing
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class UnresolvedOperation {
	method createFrom() : Object from AbstractOperation is do
		var theUnresolvedOperation : UnresolvedOperation init UnresolvedOperation.new
		theUnresolvedOperation.~operationIdentifier := self.operationIdentifier
		result := theUnresolvedOperation
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from AbstractOperation is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from AbstractOperation is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class UnresolvedProperty {
	method createFrom() : Object is do
		var theUnresolvedProperty : UnresolvedProperty init UnresolvedProperty.new
		theUnresolvedProperty.~propertyIdentifier := self.propertyIdentifier
		result := theUnresolvedProperty
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class Model {
	method createFrom() : Object is do
		var theModel : Model init Model.new
		result := theModel
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class Require {
	method createFrom() : Object is do
		var theRequire : Require init Require.new
		result := theRequire
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class Tag {
	method createFrom() : Object is do
		var theTag : Tag init Tag.new
		result := theTag
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.object.each{theKermetaModelElement | theKermetaModelElement.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.object.each{theKermetaModelElement | theKermetaModelElement.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theKermetaModelElement.sliced) then
					dup.asType(Tag).object.add(theKermetaModelElement.dup.asType(KermetaModelElement))
					theKermetaPruning.addToRoot(theKermetaModelElement.dup)
				end
			}
		end
	end
}

aspect class MultiplicityElement {
	method createFrom() : Object is do
		var theMultiplicityElement : MultiplicityElement init MultiplicityElement.new
		theMultiplicityElement.~name := self.name
		result := theMultiplicityElement
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class TypeVariableBinding {
	method createFrom() : Object from TypeContainer is do
		var theTypeVariableBinding : TypeVariableBinding init TypeVariableBinding.new
		result := theTypeVariableBinding
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from TypeContainer is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.variable.visitToAddClasses(theKermetaPruning)
			self.type.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from TypeContainer is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.variable.visitToAddRelations(theKermetaPruning)
			if(self.variable.sliced) then
				self.dup.asType(TypeVariableBinding).variable := self.variable.dup.asType(TypeVariable)
				theKermetaPruning.addToRoot(self.variable.dup)
			end

			self.type.visitToAddRelations(theKermetaPruning)
			if(self.type.sliced) then
				self.dup.asType(TypeVariableBinding).type := self.type.dup.asType(Type)
				theKermetaPruning.addToRoot(self.type.dup)
			end

		end
	end
}

aspect class EnumerationLiteral {
	method createFrom() : Object is do
		var theEnumerationLiteral : EnumerationLiteral init EnumerationLiteral.new
		theEnumerationLiteral.~name := self.name
		result := theEnumerationLiteral
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class UnresolvedInferredType {
	method createFrom() : Object is do
		var theUnresolvedInferredType : UnresolvedInferredType init UnresolvedInferredType.new
		result := theUnresolvedInferredType
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class VoidType {
	method createFrom() : Object is do
		var theVoidType : VoidType init VoidType.new
		result := theVoidType
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class FunctionType {
	method createFrom() : Object from Type is do
		var theFunctionType : FunctionType init FunctionType.new
		result := theFunctionType
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from Type is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from Type is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class ProductType {
	method createFrom() : Object from Type is do
		var theProductType : ProductType init ProductType.new
		result := theProductType
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from Type is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from Type is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class UnresolvedType {
	method createFrom() : Object from Type is do
		var theUnresolvedType : UnresolvedType init UnresolvedType.new
		theUnresolvedType.~typeIdentifier := self.typeIdentifier
		result := theUnresolvedType
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from Type is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from Type is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class VirtualType {
	method createFrom() : Object is do
		var theVirtualType : VirtualType init VirtualType.new
		theVirtualType.~name := self.name
		result := theVirtualType
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.classDefinition.visitToAddClasses(theKermetaPruning)
			self.modelType.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
			self.classDefinition.visitToAddRelations(theKermetaPruning)
			if(self.classDefinition.sliced) then
				self.dup.asType(VirtualType).classDefinition := self.classDefinition.dup.asType(ClassDefinition)
				theKermetaPruning.addToRoot(self.classDefinition.dup)
			end

			self.modelType.visitToAddRelations(theKermetaPruning)
			if(self.modelType.sliced) then
				self.dup.asType(VirtualType).modelType := self.modelType.dup.asType(ModelTypeVariable)
				theKermetaPruning.addToRoot(self.modelType.dup)
			end

		end
	end
}

aspect class ModelTypeVariable {
	method createFrom() : Object is do
		var theModelTypeVariable : ModelTypeVariable init ModelTypeVariable.new
		theModelTypeVariable.~name := self.name
		result := theModelTypeVariable
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class ModelType {
	method createFrom() : Object from TypeDefinition is do
		var theModelType : ModelType init ModelType.new
		theModelType.~name := self.name
		result := theModelType
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from TypeDefinition is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from TypeDefinition is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class TypeVariable {
	method createFrom() : Object from Type is abstract
	method visitToAddClasses(theKermetaPruning : KermetaPruning) from Type is abstract
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from Type is abstract
}

aspect class ObjectTypeVariable {
	method createFrom() : Object is do
		var theObjectTypeVariable : ObjectTypeVariable init ObjectTypeVariable.new
		theObjectTypeVariable.~name := self.name
		result := theObjectTypeVariable
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class PrimitiveType {
	method createFrom() : Object is do
		var thePrimitiveType : PrimitiveType init PrimitiveType.new
		thePrimitiveType.~name := self.name
		result := thePrimitiveType
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class Enumeration {
	method createFrom() : Object is do
		var theEnumeration : Enumeration init Enumeration.new
		theEnumeration.~name := self.name
		result := theEnumeration
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}


aspect class DataType {
	method createFrom() : Object from TypeDefinition is abstract
	method visitToAddClasses(theKermetaPruning : KermetaPruning) from TypeDefinition is abstract
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from TypeDefinition is abstract
}

aspect class Class {
	method createFrom() : Object is do
		var theClass : Class init Class.new
		result := theClass
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

aspect class KermetaModelElement inherits SlicerVisitor {
	method createFrom() : Object is do
		var theKermetaModelElement : KermetaModelElement init KermetaModelElement.new
		result := theKermetaModelElement
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.visitedForRelations := true
		end
	end
}

