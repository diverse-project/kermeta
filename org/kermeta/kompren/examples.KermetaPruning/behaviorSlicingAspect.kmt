package org::kermeta::language::behavior;
using kermeta::standard
using org::kermeta::language::structure

aspect class Expression {
	method visitToAddClasses(theKermetaPruning : KermetaPruning) from TypeContainer is abstract
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from TypeContainer is abstract
}


aspect class VariableDecl {
	method createFrom() : Object is do
		var theVariableDecl : VariableDecl init VariableDecl.new
		result := theVariableDecl
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
				theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			self.type.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.type.visitToAddRelations(theKermetaPruning)
			if(self.type.sliced) then
				self.dup.asType(VariableDecl).type := self.type.dup.asType(TypeReference)
			end

		end
	end
}

aspect class TypeReference {
	method createFrom() : Object is do
		var theTypeReference : TypeReference init TypeReference.new
		theTypeReference.name := self.name
		result := theTypeReference
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
				theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class CallTypeLiteral {
	method createFrom() : Object is do
		var theCallTypeLiteral : CallTypeLiteral init CallTypeLiteral.new
		result := theCallTypeLiteral
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
				theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			self.typeref.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.typeref.visitToAddRelations(theKermetaPruning)
			if(self.typeref.sliced) then
				self.dup.asType(CallTypeLiteral).typeref := self.typeref.dup.asType(TypeReference)
			end

		end
	end
}

aspect class LambdaExpression {
	method createFrom() : Object is do
		var theLambdaExpression : LambdaExpression init LambdaExpression.new
		result := theLambdaExpression
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
				theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			self.parameters.each{theLambdaParameter | theLambdaParameter.visitToAddClasses(theKermetaPruning)}
			self.body.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.parameters.each{theLambdaParameter | theLambdaParameter.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theLambdaParameter.sliced) then
					dup.asType(LambdaExpression).parameters.add(theLambdaParameter.dup.asType(LambdaParameter))
					theKermetaPruning.addToRoot(theLambdaParameter.dup)
				end
			}
			self.body.visitToAddRelations(theKermetaPruning)
			if(self.body.sliced) then
				self.dup.asType(LambdaExpression).body := self.body.dup.asType(Expression)
			end

		end
	end
}

aspect class LambdaParameter {
	method createFrom() : Object is do
		var theLambdaParameter : LambdaParameter init LambdaParameter.new
		result := theLambdaParameter
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
				theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			self.type.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.type.visitToAddRelations(theKermetaPruning)
			if(self.type.sliced) then
				self.dup.asType(LambdaParameter).type := self.type.dup.asType(TypeReference)
			end

		end
	end
}

aspect class Conditional {
	method createFrom() : Object is do
		var theConditional : Conditional init Conditional.new
		result := theConditional
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
				theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			self.condition.visitToAddClasses(theKermetaPruning)
			if(not self.elseBody.isVoid) then self.elseBody.visitToAddClasses(theKermetaPruning) end
			self.thenBody.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.condition.visitToAddRelations(theKermetaPruning)
			if(self.condition.sliced) then
				self.dup.asType(Conditional).condition := self.condition.dup.asType(Expression)
			end

			if(not self.elseBody.isVoid) then self.elseBody.visitToAddRelations(theKermetaPruning)
			if(self.elseBody.sliced) then
				self.dup.asType(Conditional).elseBody := self.elseBody.dup.asType(Expression)
			end
 end
			self.thenBody.visitToAddRelations(theKermetaPruning)
			if(self.thenBody.sliced) then
				self.dup.asType(Conditional).thenBody := self.thenBody.dup.asType(Expression)
			end

		end
	end
}

aspect class Raise {
	method createFrom() : Object is do
		var theRaise : Raise init Raise.new
		result := theRaise
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
				theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			self.expression.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.expression.visitToAddRelations(theKermetaPruning)
			if(self.expression.sliced) then
				self.dup.asType(Raise).expression := self.expression.dup.asType(Expression)
			end

		end
	end
}

aspect class Loop {
	method createFrom() : Object is do
		var theLoop : Loop init Loop.new
		result := theLoop
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
				theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			if(not self.initialization.isVoid) then self.initialization.visitToAddClasses(theKermetaPruning) end
			if(not self.body.isVoid) then self.body.visitToAddClasses(theKermetaPruning) end
			self.stopCondition.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			if(not self.initialization.isVoid) then self.initialization.visitToAddRelations(theKermetaPruning)
			if(self.initialization.sliced) then
				self.dup.asType(Loop).initialization := self.initialization.dup.asType(Expression)
			end
 end
			if(not self.body.isVoid) then self.body.visitToAddRelations(theKermetaPruning)
			if(self.body.sliced) then
				self.dup.asType(Loop).body := self.body.dup.asType(Expression)
			end
 end
			self.stopCondition.visitToAddRelations(theKermetaPruning)
			if(self.stopCondition.sliced) then
				self.dup.asType(Loop).stopCondition := self.stopCondition.dup.asType(Expression)
			end

		end
	end
}

aspect class Block {
	method createFrom() : Object is do
		var theBlock : Block init Block.new
		result := theBlock
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			self.statement.each{theExpression | theExpression.visitToAddClasses(theKermetaPruning)}
			self.rescueBlock.each{theRescue | theRescue.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.statement.each{theExpression | theExpression.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theExpression.sliced) then
					dup.asType(Block).statement.add(theExpression.dup.asType(Expression))
					theKermetaPruning.addToRoot(theExpression.dup)
				end
			}
			self.rescueBlock.each{theRescue | theRescue.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theRescue.sliced) then
					dup.asType(Block).rescueBlock.add(theRescue.dup.asType(Rescue))
					theKermetaPruning.addToRoot(theRescue.dup)
				end
			}
		end
	end
}

aspect class CallExpression {
	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			self.visitedPass := true
			self.parameters.each{theExpression | theExpression.visitToAddClasses(theKermetaPruning)}
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.parameters.each{theExpression | theExpression.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theExpression.sliced) then
					dup.asType(CallExpression).parameters.add(theExpression.dup.asType(Expression))
					theKermetaPruning.addToRoot(theExpression.dup)
				end
			}
		end
	end
}

aspect class Assignment {
	method createFrom() : Object is do
		var theAssignment : Assignment init Assignment.new
		result := theAssignment
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			self.target.visitToAddClasses(theKermetaPruning)
			self.~value.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.target.visitToAddRelations(theKermetaPruning)
			if(self.target.sliced) then
				self.dup.asType(Assignment).target := self.target.dup.asType(CallExpression)
			end

			self.~value.visitToAddRelations(theKermetaPruning)
			if(self.~value.sliced) then
				self.dup.asType(Assignment).~value := self.~value.dup.asType(Expression)
			end

		end
	end
}

aspect class CallFeature {
	method createFrom() : Object is do
		var theCallFeature : CallFeature init CallFeature.new
		result := theCallFeature
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			if(not self.target.isVoid) then self.target.visitToAddClasses(theKermetaPruning) end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			if(not self.target.isVoid) then self.target.visitToAddRelations(theKermetaPruning)
			if(self.target.sliced) then
				self.dup.asType(CallFeature).target := self.target.dup.asType(Expression)
			end
 end
		end
	end
}

aspect class Rescue {
	method createFrom() : Object is do
		var theRescue : Rescue init Rescue.new
		result := theRescue
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
			self.visitedPass := true
			self.body.each{theExpression | theExpression.visitToAddClasses(theKermetaPruning)}
			self.exceptionType.visitToAddClasses(theKermetaPruning)
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
			self.body.each{theExpression | theExpression.visitToAddRelations(theKermetaPruning)
				if(not dup.isVoid and theExpression.sliced) then
					dup.asType(Rescue).body.add(theExpression.dup.asType(Expression))
					theKermetaPruning.addToRoot(theExpression.dup)
				end
			}
			self.exceptionType.visitToAddRelations(theKermetaPruning)
			if(self.exceptionType.sliced) then
				self.dup.asType(Rescue).exceptionType := self.exceptionType.dup.asType(TypeReference)
			end

		end
	end
}

aspect class CallEnumLiteral {
	method createFrom() : Object is do
		var theCallEnumLiteral : CallEnumLiteral init CallEnumLiteral.new
		result := theCallEnumLiteral
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class CallProperty {
	method createFrom() : Object is do
		var theCallProperty : CallProperty init CallProperty.new
		result := theCallProperty
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class CallOperation {
	method createFrom() : Object is do
		var theCallOperation : CallOperation init CallOperation.new
		result := theCallOperation
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class UnresolvedCall {
	method createFrom() : Object from CallExpression is do
		var theUnresolvedCall : UnresolvedCall init UnresolvedCall.new
		result := theUnresolvedCall
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) from CallExpression is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) from CallExpression is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class SelfExpression {
	method createFrom() : Object is do
		var theSelfExpression : SelfExpression init SelfExpression.new
		result := theSelfExpression
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class VoidLiteral {
	method createFrom() : Object is do
		var theVoidLiteral : VoidLiteral init VoidLiteral.new
		result := theVoidLiteral
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class BooleanLiteral {
	method createFrom() : Object is do
		var theBooleanLiteral : BooleanLiteral init BooleanLiteral.new
		result := theBooleanLiteral
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class StringLiteral {
	method createFrom() : Object is do
		var theStringLiteral : StringLiteral init StringLiteral.new
		result := theStringLiteral
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class IntegerLiteral {
	method createFrom() : Object is do
		var theIntegerLiteral : IntegerLiteral init IntegerLiteral.new
		result := theIntegerLiteral
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class JavaStaticCall {
	method createFrom() : Object is do
		var theJavaStaticCall : JavaStaticCall init JavaStaticCall.new
		result := theJavaStaticCall
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class EmptyExpression {
	method createFrom() : Object is do
		var theEmptyExpression : EmptyExpression init EmptyExpression.new
		result := theEmptyExpression
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class CallValue {
	method createFrom() : Object is do
		var theCallValue : CallValue init CallValue.new
		result := theCallValue
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class CallResult {
	method createFrom() : Object is do
		var theCallResult : CallResult init CallResult.new
		result := theCallResult
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class CallSuperOperation {
	method createFrom() : Object is do
		var theCallSuperOperation : CallSuperOperation init CallSuperOperation.new
		result := theCallSuperOperation
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

aspect class CallVariable {
	method createFrom() : Object is do
		var theCallVariable : CallVariable init CallVariable.new
		result := theCallVariable
	end

	method visitToAddClasses(theKermetaPruning : KermetaPruning) is do
		checkInitialisation(theKermetaPruning.idPass)
		if(not self.visitedPass) then
			super(theKermetaPruning)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
								theKermetaPruning.addToRoot(self.dup)
			end
		end
	end
	method visitToAddRelations(theKermetaPruning : KermetaPruning) is do
		if(not self.visitedForRelations) then
			super(theKermetaPruning)
			self.visitedForRelations := true
		end
	end
}

