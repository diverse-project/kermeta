/* $Id: ActionToPerformOnEcoreModel.kmt,v 1.1 2008-03-14 10:57:56 cfaucher Exp $
 * Creation date: March 04, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *
 */

package ecore;
 
require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "platform:/lookup/fr.irisa.triskell.kermeta.ecore/src/kermeta/ecore_behavior.kmt"
require "platform:/lookup/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"
require "platform:/lookup/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/ContainmentBasedActionPerformer_Ecore.kmt"
require "BinaryMergerPropertyResolverAspectGenerator.kmt"
require "BinaryMergerGenerator_ecore_common_aspect.kmt"

using ecore
using kermeta::language::structure
using kermeta::standard
using kermeta::utils
using EcoreHelpers
using org::kermeta::binarymerger::generator

/*aspect class EObject {
	operation binaryMergerPropertyResolverAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		result := ""
	end
	
}*/
aspect class EModelElement {
	operation binaryMergerPropertyResolverAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		result := ""
	end
	
}

aspect class EPackage {
	method binaryMergerPropertyResolverAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		var content : StringBuffer init StringBuffer.new
		if not self.container.isVoid() then 
			content.append(context.indentString)
			content.append("package " + self.name + " {")
			context.pushIndent
		end
		
		self.eachOwnedElement{ e |
			content.append(e.binaryMergerPropertyResolverAspectKmtPrinter(context) + "\n")
			e
		}
		
		if not self.container.isVoid() then
			context.popIndent
			content.append(context.indentString)
			content.append("}\n")
		end
		result := content.toString()
	end
	
}

aspect class EClass {
	method binaryMergerPropertyResolverAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		var content : StringBuffer init StringBuffer.new
		content.append(context.indentString)
		content.append("aspect class " + self.name )
		if self.eSuperTypes.size()==0 and not context.isMMReflexiveKermeta then
			content.append(" inherits Mergeable ")
		end
		if self.eSuperTypes.size()>0 then
			content.append(" inherits ")
			self.eSuperTypes.indexedEach{st, eachcontext|
			 	if not eachcontext.isFirst then
			 		content.append(", ")
			 	end
				content.append(context.ecoreHelper.getClassifierQualifiedName(st))
			}
		 /*	if not context.isMMReflexiveKermeta then
				content.append(", Mergeable ")
		 	end */
		end
		content.append(" {")
		
		context.pushIndent
		content.append(context.indentString)
				
		
		if self.eSuperTypes.size()>0 then
			content.append("method")
		else if (context.isMMReflexiveKermeta) then
			// special case of creating  methods on kermeta itself
			if (self.name == "Object") then
				content.append("operation")
			else
				content.append("method")
			end
			
		else
			content.append("operation")
		end end
		
		content.append(" selectUnaryProperty( propertyName: String, primaryValue : kermeta::standard::Object, aspectValue : kermeta::standard::Object) : kermeta::standard::Object")
		
		if self.eSuperTypes.size()>0 then
			 content.append(" from " + context.ecoreHelper.getClassifierQualifiedName(self.eSuperTypes.first))
		end
		
		content.append(" is do")
		context.pushIndent
		
		content.append(context.indentString)
		if self.eSuperTypes.size()>0 then
			if(self.eSuperTypes.first().name == "Object")then
				content.append(context.indentString)
				content.append("// workaround compiler V2 bug, cannot call super on a Class named \"Object\"")
				content.append(context.indentString)
				content.append("// result := super( propertyName, primaryValue, aspectValue)")
				
				appendNonVoidSelection(content, context)
			else
				content.append(context.indentString)
				content.append("result := super( propertyName, primaryValue, aspectValue)")
			end
		else 
			appendNonVoidSelection(content, context)
		end
					
		
		
		context.popIndent
		content.append(context.indentString)
		content.append("end")
		
		context.popIndent
		content.append(context.indentString)
		result := content.append("}").toString()
	end
	
	operation appendNonVoidSelection(content : StringBuffer, context : BinaryMergerGeneratorContext) is do
		content.append(context.indentString)
		content.append("result := primaryValue")
		content.append(context.indentString)
		content.append("// select non void value")
		content.append(context.indentString)
		content.append("if (not aspectValue.isVoid) and (primaryValue.isVoid) then")
		context.pushIndent
		content.append(context.indentString)
		content.append("result := aspectValue")
		context.popIndent
		content.append(context.indentString)
		content.append("end")
	end
	
}


