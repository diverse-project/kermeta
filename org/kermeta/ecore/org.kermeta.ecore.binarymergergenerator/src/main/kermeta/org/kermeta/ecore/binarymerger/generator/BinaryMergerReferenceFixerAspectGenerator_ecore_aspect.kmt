/* $Id: ActionToPerformOnEcoreModel.kmt,v 1.1 2008-03-14 10:57:56 cfaucher Exp $
 * Creation date: March 04, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *
 */

package ecore;
 
require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "platform:/lookup/fr.irisa.triskell.kermeta.ecore/src/kermeta/ecore_behavior.kmt"
require "platform:/lookup/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"
require "platform:/lookup/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/ContainmentBasedActionPerformer_Ecore.kmt"
require "BinaryMergerReferenceFixerAspectGenerator.kmt"
require "BinaryMergerGenerator_ecore_common_aspect.kmt"

using ecore
using kermeta::language::structure
using kermeta::standard
using kermeta::utils
using EcoreHelpers
using org::kermeta::binarymerger::generator

aspect class EObject {
	operation binaryMergerReferenceFixerAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		result := ""
	end
	
}
aspect class EModelElement {
	operation binaryMergerReferenceFixerAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		result := ""
	end
	operation binaryMergerReferenceMergerAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		result := ""
	end
	
}
aspect class EPackage {
	method binaryMergerReferenceFixerAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		var content : StringBuffer init StringBuffer.new
		if not self.container.isVoid() then 
			content.append(context.indentString)
			content.append("package " + self.name + " {")
			context.pushIndent
		end
		
		self.eachOwnedElement{ e |
			content.append(e.binaryMergerReferenceFixerAspectKmtPrinter(context) + "\n")
		}
		
		if not self.container.isVoid() then
			context.popIndent
			content.append(context.indentString)
			content.append("}\n")
		end
		result := content.toString()
	end
}

aspect class EClass {

	method binaryMergerReferenceFixerAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		var content : StringBuffer init StringBuffer.new
		content.append(context.indentString)
		content.append("aspect class " + self.name )
		if self.eSuperTypes.size()==0 and not context.isMMReflexiveKermeta then
			content.append(" inherits Mergeable ")
		end
		if self.eSuperTypes.size()>0 then
			content.append(" inherits ")
			self.eSuperTypes.indexedEach{st, eachcontext|
			 	if not eachcontext.isFirst then
			 		content.append(", ")
			 	end
				content.append(context.ecoreHelper.getClassifierQualifiedName(st))
			}
		 /*	if not context.isMMReflexiveKermeta then
				content.append(", Mergeable ")
		 	end */
		end
		content.append(" {")
		
		context.pushIndent
		content.append(context.indentString) 
		writeFixReferenceOperation(context, content)
		content.append(context.indentString)			
		writeMergeReferenceOperation(context, content)
		context.popIndent
		content.append(context.indentString)
		result := content.append("}").toString()
	end
	operation writeFixReferenceOperation(context : BinaryMergerGeneratorContext, content : StringBuffer) is do
		// adding fixReference operation  (todo : both add method are similar, could be simplier if written using lambda ...)	
		if self.eSuperTypes.size()>0 then
			content.append("method")
		else if (context.isMMReflexiveKermeta) then
			// special case of creating  methods on kermeta itself
			if (self.name == "Object") then
				content.append("operation")
			else
				content.append("method")
			end
			
		else
			content.append("method")
		end end
		
		content.append(" fixReferences( ) : Void")
		
		if self.eSuperTypes.size()>0 then
			 content.append(" from " + context.ecoreHelper.getClassifierQualifiedName(self.eSuperTypes.first))
		end
		
		content.append(" is do")
		context.pushIndent
		content.append(context.indentString)
		content.append("var aspectModelElement : " + context.ecoreHelper.getClassifierQualifiedName(self))
		content.append(context.indentString)
		content.append("aspectModelElement ?= self.similarElementInAspectModel")
		content.append(context.indentString)
		if self.eSuperTypes.size()>0 then
			if(self.eSuperTypes.first().name == "Object")then
				//content.append(context.indentString)
				content.append("// workaround compiler V2 bug, cannot call super on a Class named \"Object\" \n")
				content.append(context.indentString)
				content.append("// super()")
			else
				//content.append(context.indentString)
				content.append("super()")
			end
		end					
		self.eachOwnedElement{ e |
				content.append(e.binaryMergerReferenceFixerAspectKmtPrinter(context))
		}
		if self.eSuperTypes.size()>=1 then
			// must deal with EReference that comes from the other inheritance branch
			var allFirstSuperTypes : Set<EClass> init getAllFirstSuperTypes
			self.eAllSuperTypes.each{ s |
				if (not allFirstSuperTypes.contains(s)) then
					s.eachOwnedElement{ e |
						content.append(e.binaryMergerReferenceFixerAspectKmtPrinter(context))
					}
				else					
					if(self.eSuperTypes.first().name == "Object") then
						content.append(context.indentString)
						content.append("// workaround compiler V2 bug, embed code that should have been called via super \n")
						s.eachOwnedElement{ e |
							content.append(e.binaryMergerReferenceFixerAspectKmtPrinter(context))
						}
					end
				end
			}
		end	
		if self.eSuperTypes.size()==0 then
			// call eachOwnedElement only if there is no super that have already done it
			content.append(context.indentString)
			content.append("// drill down into all contained elements")
			content.append(context.indentString)		
			content.append("self.eachOwnedElement{ e | e")
			if (not context.isMMReflexiveKermeta) then
				content.append(".asType(Mergeable)")
			end
			content.append(".fixReferences()")
			content.append(context.indentString)
			content.append("\tvoid")
			content.append(context.indentString)	
			content.append("}")	
		end	
		context.popIndent
		content.append(context.indentString)
		content.append("end")
	end
	operation writeMergeReferenceOperation(context : BinaryMergerGeneratorContext, content : StringBuffer) is do
		// adding mergeReference operation  (todo : both add method are similar, could be simplier if written using lambda ...)	
		if self.eSuperTypes.size()>0 then
			content.append("method")
		else if (context.isMMReflexiveKermeta) then
			// special case of creating  methods on kermeta itself
			if (self.name == "Object") then
				content.append("operation")
			else
				content.append("method")
			end
			
		else
			content.append("operation")
		end end
		
		content.append(" mergeReferences( ) : Void")
		
		if self.eSuperTypes.size()>0 then
			 content.append(" from " + context.ecoreHelper.getClassifierQualifiedName(self.eSuperTypes.first))
		end
		
		content.append(" is do")
		context.pushIndent
		content.append(context.indentString)
		content.append("var mergedModelElement : " + context.ecoreHelper.getClassifierQualifiedName(self))
		content.append(context.indentString)
		content.append("mergedModelElement ?= self.similarElementInMergedModel")
		content.append(context.indentString)
		if self.eSuperTypes.size()>0 then
			if(self.eSuperTypes.first().name == "Object")then
				//content.append(context.indentString)
				content.append("// workaround compiler V2 bug, cannot call super on a Class named \"Object\" \n")
				content.append(context.indentString)
				content.append("// super()")
			else
				//content.append(context.indentString)
				content.append("super()")
			end
		end					
		self.eachOwnedElement{ e |
				content.append(e.binaryMergerReferenceMergerAspectKmtPrinter(context))
		}
		if self.eSuperTypes.size()>=1 then
			// must deal with EReference that comes from the other inheritance branch
			var allFirstSuperTypes : Set<EClass> init getAllFirstSuperTypes
			self.eAllSuperTypes.each{ s |
				if (not allFirstSuperTypes.contains(s)) then
					s.eachOwnedElement{ e |
						content.append(e.binaryMergerReferenceMergerAspectKmtPrinter(context))
					}
				else					
					if(self.eSuperTypes.first().name == "Object") then
						content.append(context.indentString)
						content.append("// workaround compiler V2 bug, embed code that should have been called via super \n")
						s.eachOwnedElement{ e |
							content.append(e.binaryMergerReferenceMergerAspectKmtPrinter(context))
						}
					end
				end
			}
		end			
		context.popIndent
		content.append(context.indentString)
		content.append("end")
	end
}
aspect class EReference {
	method binaryMergerReferenceFixerAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		var content : StringBuffer init StringBuffer.new
		var mangledName : String init context.ecoreHelper.getMangledIdentifier(self.name)
		var typeName : String init context.ecoreHelper.getClassifierQualifiedName(self.eType) 
		
		var involvedInComposition : Boolean init self.containment
		if not self.eOpposite.isVoid then
			involvedInComposition := involvedInComposition or self.eOpposite.containment
		end
		
		if (not (involvedInComposition or self.derived or self.transient)) then
			if self.upperBound==1 then
				
				content.append(context.indentString)
				content.append("if not self."+mangledName+".isVoid then")
				context.pushIndent
				content.append(context.indentString)
				content.append("if not self."+mangledName+".similarElementInMergedModel.isVoid then")
				context.pushIndent
				content.append(context.indentString)
				content.append("// element pointed by this moved element is still in the unmoved model")
				
				content.append(context.indentString)
				content.append("self."+mangledName+" := self."+mangledName+".similarElementInMergedModel.asType("+typeName+")")	
				context.popIndent
				content.append(context.indentString)
				content.append("end")
				context.popIndent
				content.append(context.indentString)
				content.append("end")
			else
				content.append(context.indentString)
				content.append("// find referenced elements not in merged model")
				if(self.ordered) then
					content.append(context.indentString) 
					content.append("// warning order not ensured, TODO")
				end
				content.append(context.indentString)
				content.append("var "+mangledName+"ToMove : kermeta::standard::Sequence<"+typeName+"> init self."+mangledName+".select{ o | not o.similarElementInMergedModel.isVoid }")
				content.append(context.indentString)
				content.append(mangledName+"ToMove.each{ o |") 
				context.pushIndent
					content.append(context.indentString)
					content.append("\\\\stdio.writeln(\"[fixReferences]replacing \"+o.toString+\" by \"+o.similarElementInMergedModel.toString+\" (referenced by attribute "+mangledName+")\")")
					//content.append("stdio.writeln(\"[fixReferences]moving a \"+o.toString+\" referenced by attribute "+mangledName+"\")")
					content.append(context.indentString)
					content.append("self."+mangledName+".remove(o)")
					content.append(context.indentString)
					content.append("self."+mangledName+".add(o.similarElementInMergedModel.asType("+typeName+"))")
				
				context.popIndent	
				content.append(context.indentString)
				content.append("}")
				content.append(context.indentString)
				
				
				
				
			end			
		end
				

		result := content.toString()
	end
	method binaryMergerReferenceMergerAspectKmtPrinter(context : BinaryMergerGeneratorContext) : String is do
		var content : StringBuffer init StringBuffer.new
		var mangledName : String init context.ecoreHelper.getMangledIdentifier(self.name)
		var typeName : String init context.ecoreHelper.getClassifierQualifiedName(self.eType) 
		
		var involvedInComposition : Boolean init self.containment
		if not self.eOpposite.isVoid then
			involvedInComposition := involvedInComposition or self.eOpposite.containment
		end
		
		if (not (involvedInComposition or self.derived or self.transient)) then
			if self.upperBound==1 then
				//content.append(context.indentString)
				//content.append("if (not mergedModelElement.isVoid) then")
				//context.pushIndent
					content.append(context.indentString)
					content.append("// select value for unary reference (not involved in composition)")
					content.append(context.indentString)
					content.append("mergedModelElement."+mangledName+" ?= mergedModelElement.selectUnaryProperty(\""+mangledName+"\", self."+mangledName+", mergedModelElement."+mangledName+")")					
					content.append(context.indentString)
					content.append("if (not mergedModelElement."+mangledName+".isVoid) then")
					context.pushIndent
						content.append(context.indentString)
						content.append("mergedModelElement."+mangledName+" ?= mergedModelElement."+mangledName+".getElementInMergedModel")
					context.popIndent
					content.append(context.indentString)
					content.append("end")
				//context.popIndent
				//content.append(context.indentString)
				//content.append("end")
			else
				content.append(context.indentString)
				content.append("// merge references from aspect and primary model (not involved in composition)")
				if(self.ordered) then
					content.append(context.indentString) 
					content.append("// TODO warning partial order not ensured")
				end	
				content.append(context.indentString)
				content.append("var "+mangledName+"ToAdd : kermeta::standard::Sequence<"+typeName+">")
				content.append(context.indentString)
				content.append(mangledName+"ToAdd := self."+mangledName+".select{o | ")
				context.pushIndent
					context.pushIndent
						content.append(context.indentString) 
						content.append("// select content in aspect element which aren't in the mergedModel element")
						content.append(context.indentString)
						content.append("not mergedModelElement."+mangledName+".exists{ p | p.localMatch(o)}")
					context.popIndent
					content.append(context.indentString)
					content.append("}.collect{ c |")
					context.pushIndent
						content.append(context.indentString) 
						content.append("// make sure to get the version that is in the merged model")
						content.append(context.indentString)
						content.append("c.getElementInMergedModel().asType("+typeName+")")
					context.popIndent
					content.append(context.indentString)
					content.append("}")
				context.popIndent
				content.append(context.indentString)
				content.append("mergedModelElement."+mangledName+".addAll("+mangledName+"ToAdd)")			
			end			
		end
				

		result := content.toString()
	end
}	
	
