/*
 * Code generated by Kompose Specialization wizard v0.1
 * Kompose 2008 - http://www.kermeta.org/mdk/kompose
 * 
 * author: Freddy Munoz - fmunoz(at)irisa.fr - Triskell Team
 * author: Mickael Clavreul - mclavreu(at)irit.fr - Triskell Team
 *
 * Specialization implemented by
 * author: Cyril Faucher - cyril.faucher(at)gmail.com - L3i, University of La Rochelle
 * 
 */
package uml;

require kermeta

require "platform:/plugin/org.kermeta.kompose.core.model/kermeta/kompose.kmt"

require "http://www.eclipse.org/uml2/2.1.0/UML"

using kermeta::standard
using kermeta::utils
using kermeta::persistence

using uml

// 1) Definition of the specific composer

class UMLComposer inherits kompose::Composer
{   
	method saveModel(model : kompose::Mergeable, uri : kermeta::standard::String) is do
		// FIXME Metamodel URI to be changed by the one dedicated
   		self.saveModelByUri(model, uri, "http://www.eclipse.org/uml2/2.1.0/UML")
   end
   
   /**
    * For a dedicated model, declare an available context for the directive engine
    * to work
   	*/
   method createContext(model : kompose::Mergeable) : kompose::Context is do
   		result := super(model)
   		// FIXME Objects from dedicated metamodel have to be added
   		
   		// Main concepts from metamodel have to be declared
   		// for the directives engine to be able to work on them
   		//result.classes.put("ContextObject", ContextObjectClass)
   		
   		result.classes.put("Model", Model)
   		result.classes.put("PackageableElement", PackageableElement)
   		result.classes.put("Package", Package)
		result.classes.put("Class", Class)
		result.classes.put("PrimitiveType", PrimitiveType)
		result.classes.put("Generalization", Generalization)
		
		 
   end
}

// 2) Definition of specific signature classes

/*
 * These signatures are specific to the Ecore metamodel. 
 * Please redefine your own composition strategy.
 */



// 3) Extentions to the metamodel

/*
 * Following code is specific to the Ecore metamodel. 
 * Please make your own concept "Mergeable" if necessary
 */

aspect class Model inherits kompose::Mergeable
{
	method getSignature() : kompose::Signature from kompose::Mergeable is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := self.name
		result := s
	end
	
	method getStringID() : kermeta::standard::String from kompose::Mergeable is do
		result := self.name
	end
}

aspect class PackageableElement inherits kompose::Mergeable
{
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := self.oid.toString()
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := self.oid.toString()
	end
}

aspect class Package inherits kompose::Mergeable
{
	method getSignature() : kompose::Signature from PackageableElement is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := self.name
		result := s
	end
	
	method getStringID() : kermeta::standard::String from PackageableElement is do
		result := self.name
	end
}

aspect class Class inherits kompose::Mergeable
{
	method getSignature() : kompose::Signature from PackageableElement is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := self.name
		result := s
	end
	
	method getStringID() : kermeta::standard::String from PackageableElement is do
		result := self.name
	end
}

aspect class Generalization inherits kompose::Mergeable {}

aspect class Property inherits kompose::Mergeable
{
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := self.name
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := self.name
	end
}

aspect class PrimitiveType inherits kompose::Mergeable
{
	method getSignature() : kompose::Signature from PackageableElement is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := self.name
		result := s
	end
	
	method getStringID() : kermeta::standard::String from PackageableElement is do
		result := self.name
	end
}

/*** IN PROGRESS
aspect class InstanceSpecification inherits kompose::Mergeable {}

aspect class InstanceValue inherits kompose::Mergeable {}
***/

// 4) the Main
/*
 * This code must not be modified.
 */
class Main inherits kompose::KomposeMain
{
	operation main(uri : kermeta::standard::String) is do
		var c : kompose::Composer init loadComposer(uri,UMLComposer.new,false)
		c.compose
	end
}

