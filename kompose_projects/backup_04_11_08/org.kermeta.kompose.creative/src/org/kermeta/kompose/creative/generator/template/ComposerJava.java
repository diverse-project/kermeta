package org.kermeta.kompose.creative.generator.template;

import org.kermeta.kompose.creative.wizards.SpecializerIntermediateDataContainer;

public class ComposerJava
{
  protected static String nl;
  public static synchronized ComposerJava create(String lineSeparator)
  {
    nl = lineSeparator;
    ComposerJava result = new ComposerJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * code generated by Kompose Specialization wizard v0.1" + NL + " * Kompose 2007 - http://www.kermeta.org/kompose" + NL + " * " + NL + " * author: Freddy Munoz - fmunoz(at)irisa.fr" + NL + " * " + NL + " */" + NL + "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.io.PrintStream;" + NL + "import java.util.Iterator;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.StructuredSelection;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL + "import org.kermeta.kompose.ui.console.KomposeConsole;" + NL + "import org.kermeta.interpreter.api.Interpreter;" + NL + "import org.kermeta.interpreter.api.InterpreterMode;" + NL + "" + NL + "import fr.irisa.triskell.eclipse.console.EclipseConsole;" + NL + "import fr.irisa.triskell.kermeta.exceptions.NotRegisteredURIException;" + NL + "import fr.irisa.triskell.kermeta.exceptions.URIMalformedException;" + NL + "" + NL + "public class Composer implements IObjectActionDelegate, Runnable {" + NL + "" + NL + "\tprotected StructuredSelection currentSelection;" + NL + "    protected IFile komposeFile;" + NL + "    " + NL + "    protected String uri;" + NL + "\t" + NL + "\t/**" + NL + "\t * Constructor for Composer." + NL + "\t */" + NL + "\tpublic Composer() {" + NL + "\t\tsuper();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @see IObjectActionDelegate#setActivePart(IAction, IWorkbenchPart)" + NL + "\t */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @see IActionDelegate#run(IAction)\t" + NL + "\t */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\turi = \"platform:/resource\" + komposeFile.getFullPath().toPortableString();" + NL + "\t\tKomposeConsole.printlnMessage(\"Execute \" + uri, KomposeConsole.INFO);" + NL + "\t\tnew Thread(this).start();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @see IActionDelegate#selectionChanged(IAction, ISelection)" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tif (selection instanceof StructuredSelection)" + NL + "\t\t{" + NL + "\t\t\t// the selection should be a single *.ecore file" + NL + "\t\t\tcurrentSelection = (StructuredSelection)selection;" + NL + "\t\t\tIterator<?> it = currentSelection.iterator();" + NL + "" + NL + "\t\t\twhile(it.hasNext()) {" + NL + "\t\t\t\tkomposeFile = (IFile)it.next();" + NL + "\t\t\t}" + NL + "" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\tpublic void run() {" + NL + "\t\t" + NL + "\t\tSystem.out.println(\"Run Kompose Ecore\");" + NL + "" + NL + "\t\ttry {\t" + NL + "\t\t\tString spath=\"platform:/plugin/org.kermeta.kompose.specialization.ecore.uno/kermeta/Ecore.kmt\";" + NL + "\t\t\t" + NL + "\t\t\tEclipseConsole console = new EclipseConsole(\"Kompose Console\");" + NL + "\t\t\tPrintStream stream = new PrintStream( console.getOutputStream() );" + NL + "\t\t\tString[] params={uri};" + NL + "\t\t\t" + NL + "\t\t\tInterpreter interpreter = new Interpreter(spath, InterpreterMode.RUN, null);" + NL + "\t\t\t" + NL + "\t\t\tinterpreter.setEntryPoint(\"ecore::Main\", \"main\");" + NL + "\t\t\tinterpreter.setParameters(params);\t\t\t\t" + NL + "\t\t\tinterpreter.setInputStream( console.getReader() );" + NL + "\t\t\tinterpreter.setOutputStream(stream);" + NL + "\t\t\tinterpreter.setErrorStream( new PrintStream( console.getOutputStream() ) );" + NL + "" + NL + "\t\t\tstream.println(\"Execute \" + uri);" + NL + "\t\t\t" + NL + "\t\t\tinterpreter.launch();" + NL + "\t\t\t" + NL + "\t\t} catch (NotRegisteredURIException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t} catch (URIMalformedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_3 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     SpecializerIntermediateDataContainer data=(SpecializerIntermediateDataContainer)argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(data.getPopupPackage());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(TEXT_3);
    return stringBuffer.toString();
  }
}
