package org.kermeta.kompose.creative.generator.template;

import org.kermeta.kompose.creative.wizards.SpecializerIntermediateDataContainer;

public class RegisterStartupJava
{
  protected static String nl;
  public static synchronized RegisterStartupJava create(String lineSeparator)
  {
    nl = lineSeparator;
    RegisterStartupJava result = new RegisterStartupJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * code generated by Kompose Specialization wizard v0.1" + NL + " * Kompose 2007 - http://www.kermeta.org/kompose" + NL + " * " + NL + " * author: Freddy Munoz - fmunoz(at)irisa.fr" + NL + " * " + NL + " */" + NL + "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EPackage;" + NL + "import org.eclipse.emf.ecore.EPackage.Registry;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;" + NL + "import org.eclipse.ui.IStartup;" + NL + "" + NL + "public class RegisterStartup implements IStartup {" + NL + "   /*" + NL + "    * This method register all the meta-model packages on startup" + NL + "    */" + NL + "    @SuppressWarnings(\"unchecked\")" + NL + "\tpublic void earlyStartup() {" + NL + "" + NL + "\t\tString strURI = null;" + NL + "\t\tURI mmURI = null;" + NL + "\t\tResource res = null;" + NL + "\t\tResourceSet rs = new ResourceSetImpl();" + NL + "\t\tstrURI = \"platform:/plugin\" + \"/";
  protected final String TEXT_3 = "\" + \"/model/";
  protected final String TEXT_4 = ".ecore\";" + NL + "\t\tmmURI=URI.createURI(strURI);" + NL + "\t\tres = rs.getResource(mmURI, true);" + NL + "\t\tfor(EObject eobj : (List<EObject>)res.getContents()) {" + NL + "\t\t\tif( eobj instanceof EPackage) {" + NL + "\t\t\t\tregisterPackages((EPackage) eobj);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "    @SuppressWarnings(\"unchecked\")" + NL + "\tprivate void registerPackages(EPackage pack) {" + NL + "\t\tif( pack.getNsURI() != null && !pack.getNsURI().equals(\"\") ) {" + NL + "\t\t\tRegistry.INSTANCE.put(pack.getNsURI(), pack);" + NL + "\t\t\tfor(EPackage subPack :(List<EPackage>) pack.getESubpackages()) {" + NL + "\t\t\t\tregisterPackages(subPack);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_5 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     SpecializerIntermediateDataContainer data=(SpecializerIntermediateDataContainer)argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(data.getStartupPackage());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(data.getPackage_name());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(data.getModel_name());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(TEXT_5);
    return stringBuffer.toString();
  }
}
