<%@ jet package="org.kermeta.kompose.specialization_wizard.generator.template"

imports="org.kermeta.kompose.specialization_wizard.wizards.SpecializerIntermediateDataContainer"

class="ComposeKMT"
%>
<% SpecializerIntermediateDataContainer data=(SpecializerIntermediateDataContainer)argument; %>
/*
 * Code generated by Kompose Specialization wizard v0.1
 * Kompose 2007 - http://www.kermeta.org/kompose
 * 
 * author: Freddy Munoz - fmunoz(at)irisa.fr - Triskell Team
 * author: Mickael Clavreul - mclavreu(at)irit.fr - Triskell Team
 * 
 */
package <%=data.getMainKmtPackage()%>;

require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"

require "platform:/plugin/org.kermeta.kompose.model/kermeta/kompose.kmt"

using kermeta::standard
using kermeta::utils
using kermeta::persistence

// 1) Definition of the specific composer

class <%=data.getModel_name()%>Composer inherits kompose::Composer
{   
	method saveModel(model : kompose::Mergeable, uri : String) is do
		// FIXME Metamodel URI to be changed by the one dedicated
   		self.saveModelByUri(model, uri, "http://www.eclipse.org/emf/2002/Ecore")
   end
   
   method createContext(model : kompose::Mergeable) : kompose::Context is do
   		result := super(model)
   		// FIXME Objects from dedicated metamodel have to be added
   		//result.classes.put("ContextObject", ContextObjectClass)
   		
   		/*
   		 * example ecore
   		 */
   		/*
   		result.classes.put("Package", EPackage)
		result.classes.put("Class", EClass)
		result.classes.put("Attribute", EAttribute)
		result.classes.put("Reference", EReference)
		result.classes.put("Operation", EOperation)
		result.classes.put("Parameter", EParameter)
		*/
 
   end
}

// 2) Definition of specific signature classes

/*
 * this lines of code are specific to the Ecore metamodel. Other specializations may mimic this code
 */
/*
class OperationSignature inherits kompose::Signature
{
	reference op : EOperation 
	
	method equals(other : Object ) : Boolean is do
		var othersign : OperationSignature
		othersign ?= other
		if othersign != void then
			result := self.op.name == othersign.op.name 
			
			self.op.eParameters.each{ p1 | 
				if result then
					result := othersign.op.eParameters.select{ p2 | p1.getSignature.equals((p2.getSignature)) }.size == 1
				end
			}
		else
			result := false
		end
	end
	
}

class ParameterSignature inherits kompose::Signature
{
	reference param : EParameter 
	
	method equals(other : Object ) : Boolean is do
		var othersign : ParameterSignature
		othersign ?= other
		if othersign != void then
			result := self.param.name == othersign.param.name and
				self.param.eType.getSignature.equals(othersign.param.eType.getSignature)
		else
			result := false
		end
	end
	
}*/

// 3) Extentions to the metamodel

/*
 * this lines of code are specific to the Ecore metamodel. Other specializations may mimic this code
 */
/*
@aspect "true"
class EModelElement inherits kompose::Mergeable {}

@aspect "true"
class ENamedElement
{
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := name
		result := s
	end
	
	method getStringID() : String is do
		result := name
	end
}

@aspect "true"
class EOperation
{
	method getSignature() : kompose::Signature is do
		var s : OperationSignature init OperationSignature.new
		s.op := self
		result := s
	end
}

@aspect "true"
class EParameter
{
	method getSignature() : kompose::Signature is do
		var s : ParameterSignature init ParameterSignature.new
		s.param := self
		result := s
	end
}
*/

// 4) the Main
/*
 * This code must not be modified.
 */
class Main inherits kompose::KomposeMain
{
	operation main(uri : String) is do
		var c : kompose::Composer init loadComposer(uri,<%=data.getModel_name()%>Composer.new)
		c.compose
	end
}

