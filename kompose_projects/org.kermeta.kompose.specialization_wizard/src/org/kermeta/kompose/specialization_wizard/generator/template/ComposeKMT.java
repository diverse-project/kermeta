package org.kermeta.kompose.specialization_wizard.generator.template;

import org.kermeta.kompose.specialization_wizard.wizards.SpecializerIntermediateDataContainer;

public class ComposeKMT
{
  protected static String nl;
  public static synchronized ComposeKMT create(String lineSeparator)
  {
    nl = lineSeparator;
    ComposeKMT result = new ComposeKMT();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * Code generated by Kompose Specialization wizard v0.1" + NL + " * Kompose 2008 - http://www.kermeta.org/mdk/kompose" + NL + " * " + NL + " * author: Freddy Munoz - fmunoz(at)irisa.fr - Triskell Team" + NL + " * author: Mickael Clavreul - mclavreu(at)irit.fr - Triskell Team" + NL + " * " + NL + " */" + NL + "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "require kermeta" + NL + "require \"http://www.eclipse.org/emf/2002/Ecore\"" + NL + "" + NL + "require \"platform:/plugin/org.kermeta.kompose.core.model/kermeta/kompose.kmt\"" + NL + "" + NL + "using kermeta::standard" + NL + "using kermeta::utils" + NL + "using kermeta::persistence" + NL + "" + NL + "// 1) Definition of the specific composer" + NL + "" + NL + "class ";
  protected final String TEXT_3 = "Composer inherits kompose::Composer" + NL + "{   " + NL + "\tmethod saveModel(model : kompose::Mergeable, uri : kermeta::standard::String) is do" + NL + "\t\t// FIXME Metamodel URI to be changed by the one dedicated" + NL + "   \t\tself.saveModelByUri(model, uri, \"http://www.eclipse.org/emf/2002/Ecore\")" + NL + "   end" + NL + "   " + NL + "   /**" + NL + "    * For a dedicated model, declare an available context for the directive engine" + NL + "    * to work" + NL + "   \t*/" + NL + "   method createContext(model : kompose::Mergeable) : kompose::Context is do" + NL + "   \t\tresult := super(model)" + NL + "   \t\t// FIXME Objects from dedicated metamodel have to be added" + NL + "   \t\t" + NL + "   \t\t// Main concepts from metamodel have to be declared" + NL + "   \t\t// for the directives engine to be able to work on them" + NL + "   \t\t//result.classes.put(\"ContextObject\", ContextObjectClass)" + NL + "   \t\t" + NL + "   \t\t/*" + NL + "   \t\t * example ecore" + NL + "   \t\t */" + NL + "   \t\t/*" + NL + "   \t\tresult.classes.put(\"Package\", EPackage)" + NL + "\t\tresult.classes.put(\"Class\", EClass)" + NL + "\t\tresult.classes.put(\"Attribute\", EAttribute)" + NL + "\t\tresult.classes.put(\"Reference\", EReference)" + NL + "\t\tresult.classes.put(\"Operation\", EOperation)" + NL + "\t\tresult.classes.put(\"Parameter\", EParameter)" + NL + "\t\t*/ " + NL + "   end" + NL + "}" + NL + "" + NL + "// 2) Definition of specific signature classes" + NL + "" + NL + "/*" + NL + " * These signatures are specific to the Ecore metamodel. " + NL + " * Please redefine your own composition strategy." + NL + " */" + NL + "/*" + NL + "class OperationSignature inherits kompose::Signature" + NL + "{" + NL + "\treference op : EOperation " + NL + "\t" + NL + "\tmethod equals(other : Object ) : kermeta::standard::Boolean is do" + NL + "\t\tvar othersign : OperationSignature" + NL + "\t\tothersign ?= other" + NL + "\t\tif othersign != void then" + NL + "\t\t\tresult := self.op.name == othersign.op.name " + NL + "\t\t\t" + NL + "\t\t\tself.op.eParameters.each{ p1 | " + NL + "\t\t\t\tif result then" + NL + "\t\t\t\t\tresult := othersign.op.eParameters.select{ p2 | p1.getSignature.equals((p2.getSignature)) }.size == 1" + NL + "\t\t\t\tend" + NL + "\t\t\t}" + NL + "\t\telse" + NL + "\t\t\tresult := false" + NL + "\t\tend" + NL + "\tend\t" + NL + "}" + NL + "" + NL + "class ParameterSignature inherits kompose::Signature" + NL + "{" + NL + "\treference param : EParameter " + NL + "\t" + NL + "\tmethod equals(other : Object ) : kermeta::standard::Boolean is do" + NL + "\t\tvar othersign : ParameterSignature" + NL + "\t\tothersign ?= other" + NL + "\t\tif othersign != void then" + NL + "\t\t\tresult := self.param.name == othersign.param.name and" + NL + "\t\t\t\tself.param.eType.getSignature.equals(othersign.param.eType.getSignature)" + NL + "\t\telse" + NL + "\t\t\tresult := false" + NL + "\t\tend" + NL + "\tend\t" + NL + "}*/" + NL + "" + NL + "// 3) Extentions to the metamodel" + NL + "" + NL + "/*" + NL + " * Following code is specific to the Ecore metamodel. " + NL + " * Please make your own concept \"Mergeable\" if necessary" + NL + " */" + NL + "/*" + NL + "aspect class EModelElement inherits kompose::Mergeable {}" + NL + "" + NL + "aspect class ENamedElement" + NL + "{" + NL + "\tmethod getSignature() : kompose::Signature is do" + NL + "\t\tvar s : kompose::StringSignature init " + NL + "\t\t\tkompose::StringSignature.new" + NL + "\t\ts.sign := name" + NL + "\t\tresult := s" + NL + "\tend" + NL + "\t" + NL + "\tmethod getStringID() : kermeta::standard::String is do" + NL + "\t\tresult := name" + NL + "\tend" + NL + "}" + NL + "" + NL + "aspect class EOperation" + NL + "{" + NL + "\tmethod getSignature() : kompose::Signature is do" + NL + "\t\tvar s : OperationSignature init OperationSignature.new" + NL + "\t\ts.op := self" + NL + "\t\tresult := s" + NL + "\tend" + NL + "}" + NL + "" + NL + "aspect class EParameter" + NL + "{" + NL + "\tmethod getSignature() : kompose::Signature is do" + NL + "\t\tvar s : ParameterSignature init ParameterSignature.new" + NL + "\t\ts.param := self" + NL + "\t\tresult := s" + NL + "\tend" + NL + "}" + NL + "*/" + NL + "" + NL + "// 4) the Main" + NL + "/*" + NL + " * This code must not be modified." + NL + " */" + NL + "class Main inherits kompose::KomposeMain" + NL + "{" + NL + "\toperation main(uri : kermeta::standard::String) is do" + NL + "\t\tvar c : kompose::Composer init loadComposer(uri,";
  protected final String TEXT_4 = "Composer.new,false)" + NL + "\t\tc.compose" + NL + "\tend" + NL + "}" + NL;
  protected final String TEXT_5 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     SpecializerIntermediateDataContainer data=(SpecializerIntermediateDataContainer)argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(data.getMainKmtPackage());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(data.getModel_name());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(data.getModel_name());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(TEXT_5);
    return stringBuffer.toString();
  }
}
