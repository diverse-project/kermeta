package org.kermeta.kompose.specialization_wizard.generator.template;

import org.kermeta.kompose.specialization_wizard.wizards.SpecializerIntermediateDataContainer;

public class KomposePropertyTesterJava
{
  protected static String nl;
  public static synchronized KomposePropertyTesterJava create(String lineSeparator)
  {
    nl = lineSeparator;
    KomposePropertyTesterJava result = new KomposePropertyTesterJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * Code generated by Kompose Specialization wizard v0.1" + NL + " * Kompose 2008 - http://www.kermeta.org/mdk/kompose" + NL + " * " + NL + " * author: Mickael Clavreul - mclavreu(at)irisa.fr - Triskell Team" + NL + " * " + NL + " */" + NL + "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.io.BufferedReader;" + NL + "import java.io.IOException;" + NL + "import java.io.InputStreamReader;" + NL + "" + NL + "import org.eclipse.core.expressions.PropertyTester;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "" + NL + "public class KomposePropertyTester extends PropertyTester {" + NL + "" + NL + "\tprivate static final String METAMODEL = \"";
  protected final String TEXT_3 = "\";" + NL + "\t" + NL + "\tpublic boolean test(Object receiver, String property, Object[] args," + NL + "\t\t\tObject expectedValue) {" + NL + "\t\tIFile komposeModel = (IFile) receiver;" + NL + "\t\tBufferedReader br = null;" + NL + "\t\tString composerDefinition = \"\";" + NL + "\t\tString composerMetamodel = \"\";" + NL + "\t\tString composerMetamodelTmp = \"\";" + NL + "\t\ttry {" + NL + "\t\t\tbr = new BufferedReader(new InputStreamReader(komposeModel.getContents()));" + NL + "\t\t\tbr.readLine();" + NL + "\t\t\tcomposerDefinition = br.readLine();" + NL + "\t\t\tcomposerMetamodelTmp = composerDefinition.substring(composerDefinition.indexOf(\"metamodelName\"), composerDefinition.indexOf(\">\"));" + NL + "\t\t\tcomposerMetamodel = composerMetamodelTmp.substring(composerMetamodelTmp.indexOf(\"=\")+2, composerMetamodelTmp.lastIndexOf(\"\\\"\"));" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\tSystem.out.println(\"KOMPOSE-ERROR: Impossible to open selected file\");" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t} catch (IOException e) {" + NL + "\t\t\tSystem.out.println(\"KOMPOSE-ERROR: Impossible to read selected file\");" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t\tif (composerMetamodel.equals(METAMODEL))" + NL + "\t\t\treturn true;" + NL + "\t\telse" + NL + "\t\t\treturn false;" + NL + "\t}" + NL + "}";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     SpecializerIntermediateDataContainer data=(SpecializerIntermediateDataContainer)argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(data.getPropertyTesterPackage());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(data.getMetamodelURI());
    stringBuffer.append(TEXT_3);
    return stringBuffer.toString();
  }
}
