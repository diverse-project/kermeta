/*
 * Code generated by Kompose Specialization wizard v0.1
 * Kompose 2008 - http://www.kermeta.org/mdk/kompose
 * 
 * author: Freddy Munoz - fmunoz(at)irisa.fr - Triskell Team
 * author: Mickael Clavreul - mclavreu(at)irit.fr - Triskell Team
 * 
 */
package art;

require kermeta
require "http://art"
require "platform:/plugin/org.kermeta.kompose.core.model/kermeta/kompose.kmt"

using kermeta::standard
using kermeta::utils
using kermeta::persistence

// 1) Definition of the specific composer

class artComposer inherits kompose::Composer
{   
	method saveModel(model : kompose::Mergeable, uri : kermeta::standard::String) is do
		// FIXME Metamodel URI to be changed by the one dedicated
   		self.saveModelByUri(model, uri, "http://art")
   end
   
   /**
    * For a dedicated model, declare an available context for the directive engine
    * to work
   	*/
   method createContext(model : kompose::Mergeable) : kompose::Context is do
   		result := super(model)
   		// FIXME Objects from dedicated metamodel have to be added
   		
   		// Main concepts from metamodel have to be declared
   		// for the directives engine to be able to work on them
   		//result.classes.put("ContextObject", ContextObjectClass)
   		
   		/*
   		 * example ecore
   		 */
   		/*
   		result.classes.put("Package", EPackage)
		result.classes.put("Class", EClass)
		result.classes.put("Attribute", EAttribute)
		result.classes.put("Reference", EReference)
		result.classes.put("Operation", EOperation)
		result.classes.put("Parameter", EParameter)
		*/ 
   end
}

// 2) Definition of specific signature classes

/*
 * These signatures are specific to the Ecore metamodel. 
 * Please redefine your own composition strategy.
 */ 
 
class TransmissionBindingSignature inherits kompose::Signature {

	reference transBinding : instance::TransmissionBinding
	
	method equals(other : Object) : kermeta::standard::Boolean is do
		var othersign : TransmissionBindingSignature
		var test : Boolean init false
		othersign ?= other
		if not othersign.isVoid() then
			if (othersign.transBinding.serverInstance != void) then
				if self.transBinding.serverInstance != void then
					test := othersign.transBinding.serverInstance.getSignature().equals(self.transBinding.serverInstance.getSignature())
				end
			else
				if(self.transBinding.serverInstance == void) then
					test := true
				end
			end
			result := othersign.transBinding.id.equals(self.transBinding.id) and test
		else
			result := false
		end
		stdio.writeln("other "+othersign.transBinding.id)
		stdio.writeln("self "+self.transBinding.id)
		stdio.writeln("test "+test.toString)
		stdio.writeln("result "+result.toString)
	end

}

// 3) Extentions to the metamodel

/*
 * Following code is specific to the Models@Runtime metamodel. 
 * Please make your own concept "Mergeable" if necessary
 */

aspect class NamedElement inherits kompose::Mergeable {
	
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init kompose::StringSignature.new
		s.sign := name
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := name
	end
}

package instance {
aspect class TransmissionBinding inherits kompose::Mergeable {
	method getSignature() : kompose::Signature is do
		var s : TransmissionBindingSignature init TransmissionBindingSignature.new
		s.transBinding := self
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := id
	end
}
}

// 4) the Main
/*
 * This code must not be modified.
 */
class Main inherits kompose::KomposeMain
{
	operation main(uri : kermeta::standard::String) is do
		var c : kompose::Composer init loadComposer(uri,artComposer.new,false)
		c.compose
	end
}

