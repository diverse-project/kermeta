/*
 * Code generated by Kompose Specialization wizard v0.1
 * Kompose 2008 - http://www.kermeta.org/mdk/kompose
 * 
 * author: Freddy Munoz - fmunoz(at)irisa.fr - Triskell Team
 * author: Mickael Clavreul - mclavreu(at)irisa.fr - Triskell Team
 * author: Cyril Faucher - cyril.faucher(at)gmail.com - L3i, University of La Rochelle
 * 
 */
package ecore;


require kermeta

require "ECoreDirectivesSpecialization.kmt"
using kermeta::standard
using kermeta::utils
using kermeta::persistence
using kompose

// 1) Definition of the specific composer
 
class EcoreComposer inherits kompose::Composer
{
   method saveModel(model : Mergeable, uri : kermeta::standard::String) is do
   		self.saveModelByUri(model, uri, "http://www.eclipse.org/emf/2002/Ecore")
   end
   
   method loadModel(path : String) : kompose::Mergeable is do
    	var resource : kermeta::persistence::EMFResource
       	resource ?= repository.getResource(path)
        resource.load
        self.resources.add(resource)
        result ?= resource.instances.select{i|i.isKindOf(ecore::EPackage)}.first
   end
   
   method createContext(model : kompose::Mergeable) : kompose::Context is do
   		result := super(model)
   		result.classes.put("Package", EPackage)
		result.classes.put("Class", EClass)
		result.classes.put("Attribute", EAttribute)
		result.classes.put("Reference", EReference)
		result.classes.put("Operation", EOperation)
		result.classes.put("Parameter", EParameter)
   end
}
// 2) Definition of specific signature classes

class OperationSignature inherits kompose::Signature
{
	reference op : EOperation 
	
	method equals(other : Object ) : kermeta::standard::Boolean is do
		var othersign : OperationSignature
		othersign ?= other
		if othersign != void then
			result := self.op.name == othersign.op.name 
			
			self.op.eParameters.each{ p1 | 
				if result then
					result := othersign.op.eParameters.select{ p2 | p1.getSignature.equals((p2.getSignature)) }.size == 1
				end
			}
		else
			result := false
		end
	end
	
}

class ParameterSignature inherits kompose::Signature
{
	reference param : EParameter 
	
	method equals(other : Object ) : kermeta::standard::Boolean is do
		var othersign : ParameterSignature
		othersign ?= other
		if othersign != void then
			result := self.param.name == othersign.param.name and
				self.param.eType.getSignature.equals(othersign.param.eType.getSignature)
		else
			result := false
		end
	end
	
}

// 3) Extentions to the ecore metamodel

@aspect "true"
class EModelElement inherits kompose::Mergeable {}

@aspect "true"
class EGenericType inherits kompose::Mergeable {

	method getSignature(): kompose::Signature is do
		var s : kompose::StringSignature init 
		kompose::StringSignature.new
		s.sign := eClassifier.name
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := self.eClassifier.name
	end
}

@aspect "true"
class EAnnotation inherits kompose::Mergeable {
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init 
		kompose::StringSignature.new
		s.sign := source
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := source
	end
}

aspect class EStringToStringMapEntry inherits kompose::Mergeable {
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init 
		kompose::StringSignature.new
		s.sign := self.key + "_sep_" + self.~value
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := self.key + "_sep_" + self.~value
	end
}

@aspect "true"
class ENamedElement{
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := name
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := name
	end
}

@aspect "true"
class EOperation
{
	method getSignature() : kompose::Signature is do
		var s : OperationSignature init OperationSignature.new
		s.op := self
		result := s
	end
}

@aspect "true"
class EParameter
{
	method getSignature() : kompose::Signature is do
		var s : ParameterSignature init ParameterSignature.new
		s.param := self
		result := s
	end
}

// 4) the Main

class Main inherits kompose::KomposeMain
{
	operation main(uri : kermeta::standard::String) is do
		var c : kompose::Composer init loadComposer(uri,EcoreComposer.new,false)
		c.compose
	end
}