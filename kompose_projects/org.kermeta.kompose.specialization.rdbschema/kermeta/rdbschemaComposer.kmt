/*
 * code generated by Kompose Specialization wizard v0.1
 * Kompose 2007 - http://www.kermeta.org/kompose
 * 
 * author: Freddy Munoz - fmunoz(at)irisa.fr
 * 
 */
package rdbschema;

require kermeta
require "rdbschemaPrinter.kmt"
require "platform:/plugin/org.kermeta.kompose.core.model/kermeta/kompose.kmt"

using kermeta::language::structure
using kermeta::standard
using kermeta::utils
using kermeta::persistence
using kompose

// 1) Definition of the specific composer

class RDBSchemaComposer inherits kompose::Composer
{

	operation allContents() : Set<Object> is do
		result := Set<Object>.new
		self.getMetaClass.typeDefinition.asType(ClassDefinition).allAttribute.each{ p |
			if p.upper == 1 then 
				result.add(self.get(p))
			else
				self.get(p).asType(Collection<kermeta::language::structure::Object>).each{o | result.add(o) }
			end
		}
	end
   
    method saveModel(model : Mergeable, uri : kermeta::standard::String) is do
   		self.saveModelByUri(model, uri, "http://www.kermeta.org/rdbschema.ecore")
   end

   method createContext(model : kompose::Mergeable) : kompose::Context is do
   		result := super(model)
   		result.classes.put("Table", Table)
		result.classes.put("Column", Column)
		result.classes.put("FKey", FKey)
   end
}

// 2) Definition of specific signature classes

// NONE

// 3) Extentions to the ecore metamodel

@aspect "true"
class NamedElement inherits kompose::Mergeable
{
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := name
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := name
	end
}

@aspect "true"
class FKey inherits kompose::Mergeable
{
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := oid.toString
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := oid.toString
	end
}

@aspect "true"
class RDBMSModel inherits kompose::Mergeable
{
	method getSignature() : kompose::Signature is do
		var s : kompose::StringSignature init 
			kompose::StringSignature.new
		s.sign := ""
		result := s
	end
	
	method getStringID() : kermeta::standard::String is do
		result := ""
	end
}

// 4) the Main

class Main inherits kompose::KomposeMain
{
	operation main(uri : kermeta::standard::String) : kompose::Mergeable is do
		var c : kompose::Composer init loadComposer(uri,RDBSchemaComposer.new)
		result := c.compose
	end
}