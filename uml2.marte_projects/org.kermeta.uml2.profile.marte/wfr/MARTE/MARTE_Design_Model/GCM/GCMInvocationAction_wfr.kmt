/* $Id:$ 
 * Creation : February 24, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */

package MARTE::MARTE_DesignModel::GCM;

require "../../../../model/ecore/MARTE.profile.ecore"
require "platform:/lookup/org.kermeta.uml2.profile.marte/model/kermeta/MARTEStereotypesHelperAspects/FlowPort_UMLAspect.kmt"
require kermeta

aspect class GCMInvocationAction
{

	/** The InvocationAction must reference (via InvocationAction::onPort) exactly one port.
	 * reference MARTE 09-11-02, p167
	 */
	inv references_one_port is do
		not (self.base_InvocationAction.onPort.isVoid)
	end
	
	/** The referenced port must be a non-atomic FlowPort or a feature-based ClientServerPort.
	 * reference MARTE 09-11-02, p167
	 */
	inv port_characteristics is do
		
		self.base_InvocationAction.onPort.getStereotypesByOppositeAspect.exists{st |
			if st.isInstanceOf(MARTE::MARTE_DesignModel::GCM::FlowPort)
			then
				not (st.asType(MARTE::MARTE_DesignModel::GCM::FlowPort).isAtomic)
			else
				if st.isInstanceOf(MARTE::MARTE_DesignModel::GCM::ClientServerPort)
				then
					st.asType(MARTE::MARTE_DesignModel::GCM::ClientServerPort)
						.specificationKind == PortSpecificationKind.featureBased
				end
			end 
		}
	end
	
	/** In the case of a FlowPort, ‘onFeature’ must reference a FlowProperty 
	 * owned by the FlowSpecification specifying the port.
	 * reference MARTE 09-11-02, p167
	 */
	inv flowPort_onFeature_TODO is do
		// FlowSpecification specify interfaces, not ports
		true
	end	 		
	
	/** In the case of a ClientServerPort, ‘onFeature’ must reference a ClientServerFeature 
	 * owned by the ClientServerSpecification specifying the port.
	 * reference MARTE 09-11-02, p167
	 */
	inv clientServerPort_onFeature_TODO is do
		// ClientServerSpecification specify interfaces, not ports
		true
	end	 
	
	/** In the case of a FlowPort, the ‘direction’ of the FlowProperty referenced by ‘feature’ 
	 * must be either out, or inout.
	 * reference MARTE 09-11-02, p167
	 */
	inv flowPort_onFeature_direction is do

		var prop : uml::Property init self.onFeature.asType(uml::Property) 
		
		if (prop.isVoid)
		then
			false
		else
			prop.getStereotypesByOppositeAspect.exists{ st |
				if st.isInstanceOf(FlowProperty) 
				then
					st.asType(FlowProperty).direction == FlowDirectionKind.out or
					st.asType(FlowProperty).direction == FlowDirectionKind.inout
				else
					false
				end
			}
		end
	end	 
	
	/** In the case of a ClientServerPort, the ‘kind’ of the ClientServerFeature referenced 
	 * by ‘feature’ must be either required, or proreq.
	 * reference MARTE 09-11-02, p167
	 */
	inv clientServerPort_onFeature_kind is do

		var prop : uml::Property init self.onFeature.asType(uml::Property) 

		if prop.isVoid
		then
			false
		else
			prop.getStereotypesByOppositeAspect.exists{ st |
				if st.isInstanceOf(ClientServerFeature) 
				then
					st.asType(ClientServerFeature).kind == ClientServerKind.required or
					st.asType(ClientServerFeature).kind == ClientServerKind.proreq
				else
					false
				end
			}
		end
	end

}