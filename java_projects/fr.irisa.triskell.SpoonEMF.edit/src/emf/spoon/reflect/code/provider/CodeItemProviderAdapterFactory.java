/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package emf.spoon.reflect.code.provider;

import emf.spoon.reflect.code.util.CodeAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CodeItemProviderAdapterFactory extends CodeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CodeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtAbstractInvocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtAbstractInvocationItemProvider ctAbstractInvocationItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtAbstractInvocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtAbstractInvocationAdapter() {
		if (ctAbstractInvocationItemProvider == null) {
			ctAbstractInvocationItemProvider = new CtAbstractInvocationItemProvider(this);
		}

		return ctAbstractInvocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtArrayAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtArrayAccessItemProvider ctArrayAccessItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtArrayAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtArrayAccessAdapter() {
		if (ctArrayAccessItemProvider == null) {
			ctArrayAccessItemProvider = new CtArrayAccessItemProvider(this);
		}

		return ctArrayAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtAssert} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtAssertItemProvider ctAssertItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtAssert}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtAssertAdapter() {
		if (ctAssertItemProvider == null) {
			ctAssertItemProvider = new CtAssertItemProvider(this);
		}

		return ctAssertItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtAssignmentItemProvider ctAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtAssignmentAdapter() {
		if (ctAssignmentItemProvider == null) {
			ctAssignmentItemProvider = new CtAssignmentItemProvider(this);
		}

		return ctAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtBinaryOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtBinaryOperatorItemProvider ctBinaryOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtBinaryOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtBinaryOperatorAdapter() {
		if (ctBinaryOperatorItemProvider == null) {
			ctBinaryOperatorItemProvider = new CtBinaryOperatorItemProvider(this);
		}

		return ctBinaryOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtBlockItemProvider ctBlockItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtBlockAdapter() {
		if (ctBlockItemProvider == null) {
			ctBlockItemProvider = new CtBlockItemProvider(this);
		}

		return ctBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtBreak} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtBreakItemProvider ctBreakItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtBreak}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtBreakAdapter() {
		if (ctBreakItemProvider == null) {
			ctBreakItemProvider = new CtBreakItemProvider(this);
		}

		return ctBreakItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtCFlowBreak} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtCFlowBreakItemProvider ctCFlowBreakItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtCFlowBreak}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtCFlowBreakAdapter() {
		if (ctCFlowBreakItemProvider == null) {
			ctCFlowBreakItemProvider = new CtCFlowBreakItemProvider(this);
		}

		return ctCFlowBreakItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtCaseItemProvider ctCaseItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtCaseAdapter() {
		if (ctCaseItemProvider == null) {
			ctCaseItemProvider = new CtCaseItemProvider(this);
		}

		return ctCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtCatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtCatchItemProvider ctCatchItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtCatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtCatchAdapter() {
		if (ctCatchItemProvider == null) {
			ctCatchItemProvider = new CtCatchItemProvider(this);
		}

		return ctCatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtCodeElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtCodeElementItemProvider ctCodeElementItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtCodeElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtCodeElementAdapter() {
		if (ctCodeElementItemProvider == null) {
			ctCodeElementItemProvider = new CtCodeElementItemProvider(this);
		}

		return ctCodeElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtConditional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtConditionalItemProvider ctConditionalItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtConditional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtConditionalAdapter() {
		if (ctConditionalItemProvider == null) {
			ctConditionalItemProvider = new CtConditionalItemProvider(this);
		}

		return ctConditionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtContinue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtContinueItemProvider ctContinueItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtContinue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtContinueAdapter() {
		if (ctContinueItemProvider == null) {
			ctContinueItemProvider = new CtContinueItemProvider(this);
		}

		return ctContinueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtDo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtDoItemProvider ctDoItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtDo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtDoAdapter() {
		if (ctDoItemProvider == null) {
			ctDoItemProvider = new CtDoItemProvider(this);
		}

		return ctDoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtFieldAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtFieldAccessItemProvider ctFieldAccessItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtFieldAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtFieldAccessAdapter() {
		if (ctFieldAccessItemProvider == null) {
			ctFieldAccessItemProvider = new CtFieldAccessItemProvider(this);
		}

		return ctFieldAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtFor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtForItemProvider ctForItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtFor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtForAdapter() {
		if (ctForItemProvider == null) {
			ctForItemProvider = new CtForItemProvider(this);
		}

		return ctForItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtExpressionItemProvider ctExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtExpressionAdapter() {
		if (ctExpressionItemProvider == null) {
			ctExpressionItemProvider = new CtExpressionItemProvider(this);
		}

		return ctExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtForEach} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtForEachItemProvider ctForEachItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtForEach}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtForEachAdapter() {
		if (ctForEachItemProvider == null) {
			ctForEachItemProvider = new CtForEachItemProvider(this);
		}

		return ctForEachItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtIf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtIfItemProvider ctIfItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtIf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtIfAdapter() {
		if (ctIfItemProvider == null) {
			ctIfItemProvider = new CtIfItemProvider(this);
		}

		return ctIfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtInvocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtInvocationItemProvider ctInvocationItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtInvocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtInvocationAdapter() {
		if (ctInvocationItemProvider == null) {
			ctInvocationItemProvider = new CtInvocationItemProvider(this);
		}

		return ctInvocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtLiteralItemProvider ctLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtLiteralAdapter() {
		if (ctLiteralItemProvider == null) {
			ctLiteralItemProvider = new CtLiteralItemProvider(this);
		}

		return ctLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtLocalVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtLocalVariableItemProvider ctLocalVariableItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtLocalVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtLocalVariableAdapter() {
		if (ctLocalVariableItemProvider == null) {
			ctLocalVariableItemProvider = new CtLocalVariableItemProvider(this);
		}

		return ctLocalVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtLoopItemProvider ctLoopItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtLoopAdapter() {
		if (ctLoopItemProvider == null) {
			ctLoopItemProvider = new CtLoopItemProvider(this);
		}

		return ctLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtNewArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtNewArrayItemProvider ctNewArrayItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtNewArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtNewArrayAdapter() {
		if (ctNewArrayItemProvider == null) {
			ctNewArrayItemProvider = new CtNewArrayItemProvider(this);
		}

		return ctNewArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtNewClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtNewClassItemProvider ctNewClassItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtNewClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtNewClassAdapter() {
		if (ctNewClassItemProvider == null) {
			ctNewClassItemProvider = new CtNewClassItemProvider(this);
		}

		return ctNewClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtOperatorAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtOperatorAssignmentItemProvider ctOperatorAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtOperatorAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtOperatorAssignmentAdapter() {
		if (ctOperatorAssignmentItemProvider == null) {
			ctOperatorAssignmentItemProvider = new CtOperatorAssignmentItemProvider(this);
		}

		return ctOperatorAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtReturn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtReturnItemProvider ctReturnItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtReturn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtReturnAdapter() {
		if (ctReturnItemProvider == null) {
			ctReturnItemProvider = new CtReturnItemProvider(this);
		}

		return ctReturnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtStatementItemProvider ctStatementItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtStatementAdapter() {
		if (ctStatementItemProvider == null) {
			ctStatementItemProvider = new CtStatementItemProvider(this);
		}

		return ctStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtStatementList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtStatementListItemProvider ctStatementListItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtStatementList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtStatementListAdapter() {
		if (ctStatementListItemProvider == null) {
			ctStatementListItemProvider = new CtStatementListItemProvider(this);
		}

		return ctStatementListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtSwitch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtSwitchItemProvider ctSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtSwitch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtSwitchAdapter() {
		if (ctSwitchItemProvider == null) {
			ctSwitchItemProvider = new CtSwitchItemProvider(this);
		}

		return ctSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtSynchronized} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtSynchronizedItemProvider ctSynchronizedItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtSynchronized}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtSynchronizedAdapter() {
		if (ctSynchronizedItemProvider == null) {
			ctSynchronizedItemProvider = new CtSynchronizedItemProvider(this);
		}

		return ctSynchronizedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtTargetedExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtTargetedExpressionItemProvider ctTargetedExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtTargetedExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtTargetedExpressionAdapter() {
		if (ctTargetedExpressionItemProvider == null) {
			ctTargetedExpressionItemProvider = new CtTargetedExpressionItemProvider(this);
		}

		return ctTargetedExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtThrow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtThrowItemProvider ctThrowItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtThrow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtThrowAdapter() {
		if (ctThrowItemProvider == null) {
			ctThrowItemProvider = new CtThrowItemProvider(this);
		}

		return ctThrowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtTry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtTryItemProvider ctTryItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtTry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtTryAdapter() {
		if (ctTryItemProvider == null) {
			ctTryItemProvider = new CtTryItemProvider(this);
		}

		return ctTryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtUnaryOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtUnaryOperatorItemProvider ctUnaryOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtUnaryOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtUnaryOperatorAdapter() {
		if (ctUnaryOperatorItemProvider == null) {
			ctUnaryOperatorItemProvider = new CtUnaryOperatorItemProvider(this);
		}

		return ctUnaryOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtVariableAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtVariableAccessItemProvider ctVariableAccessItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtVariableAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtVariableAccessAdapter() {
		if (ctVariableAccessItemProvider == null) {
			ctVariableAccessItemProvider = new CtVariableAccessItemProvider(this);
		}

		return ctVariableAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.code.CtWhile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtWhileItemProvider ctWhileItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.code.CtWhile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtWhileAdapter() {
		if (ctWhileItemProvider == null) {
			ctWhileItemProvider = new CtWhileItemProvider(this);
		}

		return ctWhileItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ctAbstractInvocationItemProvider != null) ctAbstractInvocationItemProvider.dispose();
		if (ctArrayAccessItemProvider != null) ctArrayAccessItemProvider.dispose();
		if (ctAssertItemProvider != null) ctAssertItemProvider.dispose();
		if (ctAssignmentItemProvider != null) ctAssignmentItemProvider.dispose();
		if (ctBinaryOperatorItemProvider != null) ctBinaryOperatorItemProvider.dispose();
		if (ctBlockItemProvider != null) ctBlockItemProvider.dispose();
		if (ctBreakItemProvider != null) ctBreakItemProvider.dispose();
		if (ctCFlowBreakItemProvider != null) ctCFlowBreakItemProvider.dispose();
		if (ctCaseItemProvider != null) ctCaseItemProvider.dispose();
		if (ctCatchItemProvider != null) ctCatchItemProvider.dispose();
		if (ctCodeElementItemProvider != null) ctCodeElementItemProvider.dispose();
		if (ctConditionalItemProvider != null) ctConditionalItemProvider.dispose();
		if (ctContinueItemProvider != null) ctContinueItemProvider.dispose();
		if (ctDoItemProvider != null) ctDoItemProvider.dispose();
		if (ctFieldAccessItemProvider != null) ctFieldAccessItemProvider.dispose();
		if (ctForItemProvider != null) ctForItemProvider.dispose();
		if (ctExpressionItemProvider != null) ctExpressionItemProvider.dispose();
		if (ctForEachItemProvider != null) ctForEachItemProvider.dispose();
		if (ctIfItemProvider != null) ctIfItemProvider.dispose();
		if (ctInvocationItemProvider != null) ctInvocationItemProvider.dispose();
		if (ctLiteralItemProvider != null) ctLiteralItemProvider.dispose();
		if (ctLocalVariableItemProvider != null) ctLocalVariableItemProvider.dispose();
		if (ctLoopItemProvider != null) ctLoopItemProvider.dispose();
		if (ctNewArrayItemProvider != null) ctNewArrayItemProvider.dispose();
		if (ctNewClassItemProvider != null) ctNewClassItemProvider.dispose();
		if (ctOperatorAssignmentItemProvider != null) ctOperatorAssignmentItemProvider.dispose();
		if (ctReturnItemProvider != null) ctReturnItemProvider.dispose();
		if (ctStatementItemProvider != null) ctStatementItemProvider.dispose();
		if (ctStatementListItemProvider != null) ctStatementListItemProvider.dispose();
		if (ctSwitchItemProvider != null) ctSwitchItemProvider.dispose();
		if (ctSynchronizedItemProvider != null) ctSynchronizedItemProvider.dispose();
		if (ctTargetedExpressionItemProvider != null) ctTargetedExpressionItemProvider.dispose();
		if (ctThrowItemProvider != null) ctThrowItemProvider.dispose();
		if (ctTryItemProvider != null) ctTryItemProvider.dispose();
		if (ctUnaryOperatorItemProvider != null) ctUnaryOperatorItemProvider.dispose();
		if (ctVariableAccessItemProvider != null) ctVariableAccessItemProvider.dispose();
		if (ctWhileItemProvider != null) ctWhileItemProvider.dispose();
	}

}
