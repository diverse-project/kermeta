/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package emf.spoon.reflect.reference.provider;

import emf.spoon.reflect.reference.util.ReferenceAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ReferenceItemProviderAdapterFactory extends ReferenceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ReferenceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtArrayTypeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtArrayTypeReferenceItemProvider ctArrayTypeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtArrayTypeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtArrayTypeReferenceAdapter() {
		if (ctArrayTypeReferenceItemProvider == null) {
			ctArrayTypeReferenceItemProvider = new CtArrayTypeReferenceItemProvider(this);
		}

		return ctArrayTypeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtExecutableReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtExecutableReferenceItemProvider ctExecutableReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtExecutableReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtExecutableReferenceAdapter() {
		if (ctExecutableReferenceItemProvider == null) {
			ctExecutableReferenceItemProvider = new CtExecutableReferenceItemProvider(this);
		}

		return ctExecutableReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtFieldReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtFieldReferenceItemProvider ctFieldReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtFieldReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtFieldReferenceAdapter() {
		if (ctFieldReferenceItemProvider == null) {
			ctFieldReferenceItemProvider = new CtFieldReferenceItemProvider(this);
		}

		return ctFieldReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtGenericElementReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtGenericElementReferenceItemProvider ctGenericElementReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtGenericElementReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtGenericElementReferenceAdapter() {
		if (ctGenericElementReferenceItemProvider == null) {
			ctGenericElementReferenceItemProvider = new CtGenericElementReferenceItemProvider(this);
		}

		return ctGenericElementReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtLocalVariableReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtLocalVariableReferenceItemProvider ctLocalVariableReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtLocalVariableReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtLocalVariableReferenceAdapter() {
		if (ctLocalVariableReferenceItemProvider == null) {
			ctLocalVariableReferenceItemProvider = new CtLocalVariableReferenceItemProvider(this);
		}

		return ctLocalVariableReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtPackageReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtPackageReferenceItemProvider ctPackageReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtPackageReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtPackageReferenceAdapter() {
		if (ctPackageReferenceItemProvider == null) {
			ctPackageReferenceItemProvider = new CtPackageReferenceItemProvider(this);
		}

		return ctPackageReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtParameterReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtParameterReferenceItemProvider ctParameterReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtParameterReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtParameterReferenceAdapter() {
		if (ctParameterReferenceItemProvider == null) {
			ctParameterReferenceItemProvider = new CtParameterReferenceItemProvider(this);
		}

		return ctParameterReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtReferenceItemProvider ctReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtReferenceAdapter() {
		if (ctReferenceItemProvider == null) {
			ctReferenceItemProvider = new CtReferenceItemProvider(this);
		}

		return ctReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtTypeParameterReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtTypeParameterReferenceItemProvider ctTypeParameterReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtTypeParameterReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtTypeParameterReferenceAdapter() {
		if (ctTypeParameterReferenceItemProvider == null) {
			ctTypeParameterReferenceItemProvider = new CtTypeParameterReferenceItemProvider(this);
		}

		return ctTypeParameterReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtTypeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtTypeReferenceItemProvider ctTypeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtTypeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtTypeReferenceAdapter() {
		if (ctTypeReferenceItemProvider == null) {
			ctTypeReferenceItemProvider = new CtTypeReferenceItemProvider(this);
		}

		return ctTypeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.reference.CtVariableReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtVariableReferenceItemProvider ctVariableReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.reference.CtVariableReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtVariableReferenceAdapter() {
		if (ctVariableReferenceItemProvider == null) {
			ctVariableReferenceItemProvider = new CtVariableReferenceItemProvider(this);
		}

		return ctVariableReferenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ctArrayTypeReferenceItemProvider != null) ctArrayTypeReferenceItemProvider.dispose();
		if (ctExecutableReferenceItemProvider != null) ctExecutableReferenceItemProvider.dispose();
		if (ctFieldReferenceItemProvider != null) ctFieldReferenceItemProvider.dispose();
		if (ctGenericElementReferenceItemProvider != null) ctGenericElementReferenceItemProvider.dispose();
		if (ctLocalVariableReferenceItemProvider != null) ctLocalVariableReferenceItemProvider.dispose();
		if (ctPackageReferenceItemProvider != null) ctPackageReferenceItemProvider.dispose();
		if (ctParameterReferenceItemProvider != null) ctParameterReferenceItemProvider.dispose();
		if (ctReferenceItemProvider != null) ctReferenceItemProvider.dispose();
		if (ctTypeParameterReferenceItemProvider != null) ctTypeParameterReferenceItemProvider.dispose();
		if (ctTypeReferenceItemProvider != null) ctTypeReferenceItemProvider.dispose();
		if (ctVariableReferenceItemProvider != null) ctVariableReferenceItemProvider.dispose();
	}

}
