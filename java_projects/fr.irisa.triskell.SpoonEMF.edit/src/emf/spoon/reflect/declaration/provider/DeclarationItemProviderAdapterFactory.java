/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package emf.spoon.reflect.declaration.provider;

import emf.spoon.reflect.declaration.util.DeclarationAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DeclarationItemProviderAdapterFactory extends DeclarationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DeclarationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtAnnotationItemProvider ctAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtAnnotationAdapter() {
		if (ctAnnotationItemProvider == null) {
			ctAnnotationItemProvider = new CtAnnotationItemProvider(this);
		}

		return ctAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtAnnotationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtAnnotationTypeItemProvider ctAnnotationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtAnnotationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtAnnotationTypeAdapter() {
		if (ctAnnotationTypeItemProvider == null) {
			ctAnnotationTypeItemProvider = new CtAnnotationTypeItemProvider(this);
		}

		return ctAnnotationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtAnonymousExecutable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtAnonymousExecutableItemProvider ctAnonymousExecutableItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtAnonymousExecutable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtAnonymousExecutableAdapter() {
		if (ctAnonymousExecutableItemProvider == null) {
			ctAnonymousExecutableItemProvider = new CtAnonymousExecutableItemProvider(this);
		}

		return ctAnonymousExecutableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtClassItemProvider ctClassItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtClassAdapter() {
		if (ctClassItemProvider == null) {
			ctClassItemProvider = new CtClassItemProvider(this);
		}
		return ctClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtConstructor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtConstructorItemProvider ctConstructorItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtConstructor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtConstructorAdapter() {
		if (ctConstructorItemProvider == null) {
			ctConstructorItemProvider = new CtConstructorItemProvider(this);
		}

		return ctConstructorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtElementItemProvider ctElementItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtElementAdapter() {
		if (ctElementItemProvider == null) {
			ctElementItemProvider = new CtElementItemProvider(this);
		}

		return ctElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtEnum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtEnumItemProvider ctEnumItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtEnum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtEnumAdapter() {
		if (ctEnumItemProvider == null) {
			ctEnumItemProvider = new CtEnumItemProvider(this);
		}

		return ctEnumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtExecutable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtExecutableItemProvider ctExecutableItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtExecutable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtExecutableAdapter() {
		if (ctExecutableItemProvider == null) {
			ctExecutableItemProvider = new CtExecutableItemProvider(this);
		}

		return ctExecutableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtFieldItemProvider ctFieldItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtFieldAdapter() {
		if (ctFieldItemProvider == null) {
			ctFieldItemProvider = new CtFieldItemProvider(this);
		}

		return ctFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtGenericElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtGenericElementItemProvider ctGenericElementItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtGenericElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtGenericElementAdapter() {
		if (ctGenericElementItemProvider == null) {
			ctGenericElementItemProvider = new CtGenericElementItemProvider(this);
		}

		return ctGenericElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtInterfaceItemProvider ctInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtInterfaceAdapter() {
		if (ctInterfaceItemProvider == null) {
			ctInterfaceItemProvider = new CtInterfaceItemProvider(this);
		}

		return ctInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtMethodItemProvider ctMethodItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtMethodAdapter() {
		if (ctMethodItemProvider == null) {
			ctMethodItemProvider = new CtMethodItemProvider(this);
		}

		return ctMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtModifiable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtModifiableItemProvider ctModifiableItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtModifiable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtModifiableAdapter() {
		if (ctModifiableItemProvider == null) {
			ctModifiableItemProvider = new CtModifiableItemProvider(this);
		}

		return ctModifiableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtNamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtNamedElementItemProvider ctNamedElementItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtNamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtNamedElementAdapter() {
		if (ctNamedElementItemProvider == null) {
			ctNamedElementItemProvider = new CtNamedElementItemProvider(this);
		}

		return ctNamedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtPackageItemProvider ctPackageItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtPackageAdapter() {
		if (ctPackageItemProvider == null) {
			ctPackageItemProvider = new CtPackageItemProvider(this);
		}

		return ctPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtParameterItemProvider ctParameterItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtParameterAdapter() {
		if (ctParameterItemProvider == null) {
			ctParameterItemProvider = new CtParameterItemProvider(this);
		}

		return ctParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtSimpleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtSimpleTypeItemProvider ctSimpleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtSimpleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtSimpleTypeAdapter() {
		if (ctSimpleTypeItemProvider == null) {
			ctSimpleTypeItemProvider = new CtSimpleTypeItemProvider(this);
		}

		return ctSimpleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtTypeItemProvider ctTypeItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtTypeAdapter() {
		if (ctTypeItemProvider == null) {
			ctTypeItemProvider = new CtTypeItemProvider(this);
		}

		return ctTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtTypeParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtTypeParameterItemProvider ctTypeParameterItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtTypeParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtTypeParameterAdapter() {
		if (ctTypeParameterItemProvider == null) {
			ctTypeParameterItemProvider = new CtTypeParameterItemProvider(this);
		}

		return ctTypeParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtTypedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtTypedElementItemProvider ctTypedElementItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtTypedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtTypedElementAdapter() {
		if (ctTypedElementItemProvider == null) {
			ctTypedElementItemProvider = new CtTypedElementItemProvider(this);
		}

		return ctTypedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtVariableItemProvider ctVariableItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtVariableAdapter() {
		if (ctVariableItemProvider == null) {
			ctVariableItemProvider = new CtVariableItemProvider(this);
		}

		return ctVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.SourcePosition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourcePositionItemProvider sourcePositionItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.SourcePosition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSourcePositionAdapter() {
		if (sourcePositionItemProvider == null) {
			sourcePositionItemProvider = new SourcePositionItemProvider(this);
		}

		return sourcePositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.spoon.reflect.declaration.CtAnnotationElementValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CtAnnotationElementValueItemProvider ctAnnotationElementValueItemProvider;

	/**
	 * This creates an adapter for a {@link emf.spoon.reflect.declaration.CtAnnotationElementValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCtAnnotationElementValueAdapter() {
		if (ctAnnotationElementValueItemProvider == null) {
			ctAnnotationElementValueItemProvider = new CtAnnotationElementValueItemProvider(this);
		}

		return ctAnnotationElementValueItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		System.err.println("ComposeableAdapterFactory");
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		System.err.println("dispose");
		if (ctAnnotationItemProvider != null) ctAnnotationItemProvider.dispose();
		if (ctAnnotationTypeItemProvider != null) ctAnnotationTypeItemProvider.dispose();
		if (ctAnonymousExecutableItemProvider != null) ctAnonymousExecutableItemProvider.dispose();
		if (ctClassItemProvider != null) ctClassItemProvider.dispose();
		if (ctConstructorItemProvider != null) ctConstructorItemProvider.dispose();
		if (ctElementItemProvider != null) ctElementItemProvider.dispose();
		if (ctEnumItemProvider != null) ctEnumItemProvider.dispose();
		if (ctExecutableItemProvider != null) ctExecutableItemProvider.dispose();
		if (ctFieldItemProvider != null) ctFieldItemProvider.dispose();
		if (ctGenericElementItemProvider != null) ctGenericElementItemProvider.dispose();
		if (ctInterfaceItemProvider != null) ctInterfaceItemProvider.dispose();
		if (ctMethodItemProvider != null) ctMethodItemProvider.dispose();
		if (ctModifiableItemProvider != null) ctModifiableItemProvider.dispose();
		if (ctNamedElementItemProvider != null) ctNamedElementItemProvider.dispose();
		if (ctPackageItemProvider != null) ctPackageItemProvider.dispose();
		if (ctParameterItemProvider != null) ctParameterItemProvider.dispose();
		if (ctSimpleTypeItemProvider != null) ctSimpleTypeItemProvider.dispose();
		if (ctTypeItemProvider != null) ctTypeItemProvider.dispose();
		if (ctTypeParameterItemProvider != null) ctTypeParameterItemProvider.dispose();
		if (ctTypedElementItemProvider != null) ctTypedElementItemProvider.dispose();
		if (ctVariableItemProvider != null) ctVariableItemProvider.dispose();
		if (sourcePositionItemProvider != null) sourcePositionItemProvider.dispose();
		if (ctAnnotationElementValueItemProvider != null) ctAnnotationElementValueItemProvider.dispose();
	}

}
