package ex::stateMachine;
using kermeta::standard
using kermeta::utils
using kermeta::io::StdIO => stdio
class SlicerVisitor {
	reference dup : Object

	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute sliced : Boolean

	operation initialiseAttributes() is do
		self.visitedPass := false
		self.sliced := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) is do
	end

	operation checkInitialisation() is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end

	operation createFrom() : Object is abstract
}

aspect class OutputState {
	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.outgoingTransitions.each{theTransition | theTransition.visitToAddClasses(theStateMachineSlicer)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.outgoingTransitions.each{theTransition | theTransition.visitToAddRelations(theStateMachineSlicer)
				if(not dup.isVoid and theTransition.sliced) then
					dup.asType(OutputState).outgoingTransitions.add(theTransition.dup.asType(Transition))
					theStateMachineSlicer.addToRoot(theTransition.dup)
				end
			}
			self.visitedPass := false
		end
	end
}

aspect class Transition inherits SlicerVisitor {
	method createFrom() : Object is do
		var theTransition : Transition init Transition.new
		result := theTransition
	end

	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.source.visitToAddClasses(theStateMachineSlicer)
			self.target.visitToAddClasses(theStateMachineSlicer)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.source.visitToAddRelations(theStateMachineSlicer)
			if(self.source.sliced) then
				self.dup.asType(Transition).source := self.source.dup.asType(OutputState)
				theStateMachineSlicer.addToRoot(self.source.dup)
			end

			self.target.visitToAddRelations(theStateMachineSlicer)
			if(self.target.sliced) then
				self.dup.asType(Transition).target := self.target.dup.asType(InputState)
				theStateMachineSlicer.addToRoot(self.target.dup)
			end

			self.visitedPass := false
		end
	end
}

aspect class State inherits SlicerVisitor {
}

aspect class StandardState {
	method createFrom() : Object is do
		var theStandardState : StandardState init StandardState.new
		theStandardState.name := self.name
		theStandardState.name := self.name
		result := theStandardState
	end

	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class InitState {
	method createFrom() : Object is do
		var theInitState : InitState init InitState.new
		theInitState.name := self.name
		result := theInitState
	end

	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class TerminalState {
	method createFrom() : Object is do
		var theTerminalState : TerminalState init TerminalState.new
		theTerminalState.name := self.name
		result := theTerminalState
	end

	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			if(not self.sliced) then
				self.dup := self.createFrom()
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

