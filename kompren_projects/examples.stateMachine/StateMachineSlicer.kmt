package ex::stateMachine;
using kermeta::emfpersistence
using kermeta::standard
using kermeta::utils
using kermeta::io::StdIO => stdio
class StateMachineSlicer {
	reference sliceRoots : Bag<Object>
	attribute idPass : Integer

	reference requiredStates : State[0..*]

	operation initialise(requiredStates : bag State[0..*]) : StateMachineSlicer is do
		result := self
		self.sliceRoots := Bag<Object>.new
		self.requiredStates.clear()
		self.requiredStates.addAll(requiredStates)

		if(idPass.isVoid) then idPass := 0
		else idPass := idPass + 1 end
	end

	operation launch() is do
		onStart()
		self.requiredStates.each{theState | theState.visitToAddClasses(self) }
		self.requiredStates.each{theState | theState.visitToAddRelations(self) }
		onEnd()
	end

	operation onEnd() is do
		var repository : ResourceSet init ResourceSet.new
		var resource : Resource 
 		resource ?= repository.createResource("platform:/resource/examples.stateMachine/slice.xmi",
 											  "platform:/resource/examples.stateMachine/StateMachine.ecore")
 		
 		resource.getContents.addAll(sliceRoots)
 		resource.save(void)
	end
	operation onStart() is do
	end
	operation addToRoot(obj : Object) is do
		var cont : Object init obj.container
		if(cont.isVoid.orElse{b | (not cont.isInstanceOf(SlicerVisitor)).orElse{b2 | 
			(not cont.asType(SlicerVisitor).sliced.isVoid).andThen{b3 | not cont.asType(SlicerVisitor).sliced}}}) then
			sliceRoots.add(obj)
		end
	end
}
