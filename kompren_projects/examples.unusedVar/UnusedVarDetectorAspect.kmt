package org::kermeta::language::behavior;
using org::kermeta::language::structure
using kermeta::standard
using kermeta::utils
using kermeta::io::StdIO => stdio
class SlicerVisitor {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute sliced : Boolean

	operation initialiseAttributes() is do
		self.visitedPass := false
		self.sliced := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
	end

	operation checkInitialisation() is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end
}

aspect class Block {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.statement.each{theExpression | theExpression.visitToAddClasses(theUnusedVarDetector)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.statement.each{theExpression | theExpression.visitToAddRelations(theUnusedVarDetector)}
			self.visitedPass := false
		end
	end
}

aspect class Expression inherits SlicerVisitor {
}

aspect class Conditional {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			if(not self.elseBody.isVoid) then self.elseBody.visitToAddClasses(theUnusedVarDetector) end
			self.thenBody.visitToAddClasses(theUnusedVarDetector)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.elseBody.isVoid) then self.elseBody.visitToAddRelations(theUnusedVarDetector) end
			self.thenBody.visitToAddRelations(theUnusedVarDetector)
			self.visitedPass := false
		end
	end
}

aspect class Raise {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.expression.visitToAddClasses(theUnusedVarDetector)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.expression.visitToAddRelations(theUnusedVarDetector)
			self.visitedPass := false
		end
	end
}

aspect class Loop {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			if(not self.initialization.isVoid) then self.initialization.visitToAddClasses(theUnusedVarDetector) end
			if(not self.body.isVoid) then self.body.visitToAddClasses(theUnusedVarDetector) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.initialization.isVoid) then self.initialization.visitToAddRelations(theUnusedVarDetector) end
			if(not self.body.isVoid) then self.body.visitToAddRelations(theUnusedVarDetector) end
			self.visitedPass := false
		end
	end
}

aspect class LambdaExpression {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.body.visitToAddClasses(theUnusedVarDetector)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.body.visitToAddRelations(theUnusedVarDetector)
			self.visitedPass := false
		end
	end
}

aspect class Rescue inherits SlicerVisitor {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.body.each{theExpression | theExpression.visitToAddClasses(theUnusedVarDetector)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.body.each{theExpression | theExpression.visitToAddRelations(theUnusedVarDetector)}
			self.visitedPass := false
		end
	end
}

aspect class CallExpression {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.parameters.each{theExpression | theExpression.visitToAddClasses(theUnusedVarDetector)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.parameters.each{theExpression | theExpression.visitToAddRelations(theUnusedVarDetector)}
			self.visitedPass := false
		end
	end
}

aspect class Assignment {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.~value.visitToAddClasses(theUnusedVarDetector)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.~value.visitToAddRelations(theUnusedVarDetector)
			self.visitedPass := false
		end
	end
}

aspect class VariableDecl {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			if(not self.sliced) then
				theUnusedVarDetector.addedVariableDecls.add(self)
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class CallVariable {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			if(not self.sliced) then
				theUnusedVarDetector.addedCallVariables.add(self)
				self.sliced := true
			end
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

