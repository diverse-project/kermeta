/*
 * Creation : November 25, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell Team
 * Authors  : Arnaud Blouin
 */
package ex::classModel;

using kermeta::standard::*
using org::kermeta::language::structure::*
using kermeta::emfpersistence::*
using kermeta::io::StdIO => stdio

class Test {
	operation main() : Void is do
		var requiredClazzs : Bag<Clazz> init Bag<Clazz>.new
		var cm : ClassModel init createClassModel(requiredClazzs) //loadModel()
		var clazz : Clazz init cm.classes.one
		
		stdio.writeln(cm.getMetaClass.name + " " + cm.getMetaClass.typeDefinition.container.asType(Package).name +
				" " + cm.getMetaClass.typeDefinition.container.asType(Package).container.asType(Package).name)

		var pruning : InheritanceSlicer init InheritanceSlicer.new.initialise(requiredClazzs)

		pruning.launch()
	end
	
	operation loadModel() : ClassModel is do
   		var repository : ResourceSet init ResourceSet.new
   		var resource : Resource init repository.createResource("platform:/resource/examples.clazz/ClassModel.xmi", "platform:/resource/examples.clazz/ClassModel.ecore")
       	resource.load(void)
       	
       	result := void

		from var it : Iterator<Object> init resource.getContents.iterator
		until it.isOff
		loop
			var next : Object init it.next
			if(next.isInstanceOf(ClassModel)) then                 
				result ?= next
			end
		end
	end
	
	
	operation createClassModel(requiredClazzs : Bag<Clazz>) : ClassModel is do
		result := ClassModel.new
		
		var c1 : Clazz init Clazz.new
		var c2 : Clazz init Clazz.new
		var c3 : Clazz init Clazz.new
		var c4 : Clazz init Clazz.new
		var c5 : Clazz init Clazz.new
		
		c1.name := "c1"
		result.classes.add(c1)
		c2.name := "c2"
		result.classes.add(c2)
		c3.name := "c3"
		result.classes.add(c3)
		c4.name := "c4"
		result.classes.add(c4)
		c5.name := "c5"
		result.classes.add(c5)
		
		c1.superClasses.add(c2)
		c2.superClasses.add(c3)
		c3.superClasses.add(c4)
		c4.superClasses.add(c5)

		requiredClazzs.add(c3)
	end
}
