/*******************************************************************************
 * $Id: FsmModelerProviderAdapterFactory.java,v 1.2 2006-12-22 10:52:44 cfaucher Exp $
 * License: EPL
 * Copyright: IRISA / INRIA / Universite de Rennes 1
 ******************************************************************************/
package fr.irisa.triskell.kermeta.samples.fsm.graphicalEditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;

import fr.irisa.triskell.kermeta.samples.fsm.util.FsmAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class FsmModelerProviderAdapterFactory extends FsmAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.samples.fsm.FSM} instances.
	 * 
	 * @generated
	 */
	private FSMModelerProvider fsmModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.samples.fsm.State} instances.
	 * 
	 * @generated
	 */
	private StateModelerProvider stateModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.samples.fsm.Transition} instances.
	 * 
	 * @generated
	 */
	private TransitionModelerProvider transitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.samples.fsm.FSMException} instances.
	 * 
	 * @generated
	 */
	private FSMExceptionModelerProvider fsmexceptionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.samples.fsm.NonDeterminism} instances.
	 * 
	 * @generated
	 */
	private NonDeterminismModelerProvider nondeterminismModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.samples.fsm.NoTransition} instances.
	 * 
	 * @generated
	 */
	private NoTransitionModelerProvider notransitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.samples.fsm.NoInitialStateException} instances.
	 * 
	 * @generated
	 */
	private NoInitialStateExceptionModelerProvider noinitialstateexceptionModelerProvider;

	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public FsmModelerProviderAdapterFactory() {
		supportedTypes.add(ILabelFeatureProvider.class);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.samples.fsm.FSM}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFSMAdapter() {
		if (fsmModelerProvider == null) {
			fsmModelerProvider = new FSMModelerProvider(this);
		}

		return fsmModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.samples.fsm.State}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStateAdapter() {
		if (stateModelerProvider == null) {
			stateModelerProvider = new StateModelerProvider(this);
		}

		return stateModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.samples.fsm.Transition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTransitionAdapter() {
		if (transitionModelerProvider == null) {
			transitionModelerProvider = new TransitionModelerProvider(this);
		}

		return transitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.samples.fsm.FSMException}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFSMExceptionAdapter() {
		if (fsmexceptionModelerProvider == null) {
			fsmexceptionModelerProvider = new FSMExceptionModelerProvider(this);
		}

		return fsmexceptionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.samples.fsm.NonDeterminism}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createNonDeterminismAdapter() {
		if (nondeterminismModelerProvider == null) {
			nondeterminismModelerProvider = new NonDeterminismModelerProvider(
					this);
		}

		return nondeterminismModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.samples.fsm.NoTransition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createNoTransitionAdapter() {
		if (notransitionModelerProvider == null) {
			notransitionModelerProvider = new NoTransitionModelerProvider(this);
		}

		return notransitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.samples.fsm.NoInitialStateException}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createNoInitialStateExceptionAdapter() {
		if (noinitialstateexceptionModelerProvider == null) {
			noinitialstateexceptionModelerProvider = new NoInitialStateExceptionModelerProvider(
					this);
		}

		return noinitialstateexceptionModelerProvider;
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose() {
		if (fsmModelerProvider != null)
			fsmModelerProvider.dispose();
		if (stateModelerProvider != null)
			stateModelerProvider.dispose();
		if (transitionModelerProvider != null)
			transitionModelerProvider.dispose();
		if (fsmexceptionModelerProvider != null)
			fsmexceptionModelerProvider.dispose();
		if (nondeterminismModelerProvider != null)
			nondeterminismModelerProvider.dispose();
		if (notransitionModelerProvider != null)
			notransitionModelerProvider.dispose();
		if (noinitialstateexceptionModelerProvider != null)
			noinitialstateexceptionModelerProvider.dispose();
	}

}
