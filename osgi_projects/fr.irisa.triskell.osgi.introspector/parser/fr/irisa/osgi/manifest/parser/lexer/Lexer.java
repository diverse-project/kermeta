/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.lexer;

import java.io.*;
import fr.irisa.osgi.manifest.parser.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.MANIFEST_ENTRY;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 33: state = State.DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY1; break;
                                case 35: state = State.BUNDLE_ACTIVATIONPOLICY_STATE; break;
                                case 34: state = State.DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY1; break;
                                case 36: state = State.BUNDLE_ACTIVATIONPOLICY_STATE; break;
                                case 31: state = State.DIRECTIVE_MANDATORY_VALUE; break;
                                case 55: state = State.EXPORT_PACKAGE_STATE; break;
                                case 56: state = State.DIRECTIVE_USES1; break;
                                case 57: state = State.DIRECTIVE_USES; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.ALL_STRING_STATE; break;
                                case 1: state = State.BUNDLE_ACTIVATIONPOLICY_STATE; break;
                                case 2: state = State.BUNDLE_ACTIVATOR_STATE; break;
                                case 6: state = State.BUNDLE_NATIVECODE_STATE; break;
                                case 8: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                                case 9: state = State.BUNDLE_SYMBOLICNAME_STATE; break;
                                case 13: state = State.CLASSPATH_ENTRY_STATE; break;
                                case 15: state = State.DIGEST_ENTRY_STATE; break;
                                case 54: state = State.EXPORT_PACKAGE_STATE; break;
                                case 53: state = State.EXPORT_PACKAGE_STATE; break;
                                case 56: state = State.EXPORT_PACKAGE_STATE; break;
                                case 32: state = State.DYNAMICIMPORT_PACKAGE_STATE; break;
                                case 10: state = State.EXPORT_PACKAGE_STATE; break;
                                case 17: state = State.EXPORT_SERVICE_STATE; break;
                                case 11: state = State.FRAGMENT_HOST_STATE; break;
                                case 12: state = State.IMPORT_PACKAGE_STATE; break;
                                case 16: state = State.IMPORT_SERVICE_STATE; break;
                                case 14: state = State.REQUIRE_BUNDLE_STATE; break;
                                case 4: state = State.SIMPLE_ENTRY_STATE; break;
                                case 5: state = State.URL; break;
                                case 7: state = State.VERSION_STATE; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.ALL_STRING_STATE; break;
                                case 1: state = State.BUNDLE_ACTIVATIONPOLICY_STATE; break;
                                case 2: state = State.BUNDLE_ACTIVATOR_STATE; break;
                                case 6: state = State.BUNDLE_NATIVECODE_STATE; break;
                                case 8: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                                case 9: state = State.BUNDLE_SYMBOLICNAME_STATE; break;
                                case 13: state = State.CLASSPATH_ENTRY_STATE; break;
                                case 15: state = State.DIGEST_ENTRY_STATE; break;
                                case 35: state = State.DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY1; break;
                                case 54: state = State.EXPORT_PACKAGE_STATE; break;
                                case 36: state = State.DIRECTIVE_INCLUDE_ACTIVATIONPOLICY1; break;
                                case 53: state = State.EXPORT_PACKAGE_STATE; break;
                                case 55: state = State.DIRECTIVE_MANDATORY_VALUE; break;
                                case 56: state = State.EXPORT_PACKAGE_STATE; break;
                                case 57: state = State.DIRECTIVE_USES1; break;
                                case 32: state = State.DYNAMICIMPORT_PACKAGE_STATE; break;
                                case 10: state = State.EXPORT_PACKAGE_STATE; break;
                                case 17: state = State.EXPORT_SERVICE_STATE; break;
                                case 11: state = State.FRAGMENT_HOST_STATE; break;
                                case 12: state = State.IMPORT_PACKAGE_STATE; break;
                                case 16: state = State.IMPORT_SERVICE_STATE; break;
                                case 14: state = State.REQUIRE_BUNDLE_STATE; break;
                                case 4: state = State.SIMPLE_ENTRY_STATE; break;
                                case 5: state = State.URL; break;
                                case 7: state = State.VERSION_STATE; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 54: state = State.DIRECTIVE_EXCLUDE_EXPORT_PACKAGE; break;
                                case 53: state = State.DIRECTIVE_INCLUDE_EXPORT_PACKAGE; break;
                                case 56: state = State.DIRECTIVE_USES; break;
                                case 57: state = State.DIRECTIVE_USES1; break;
                                case 32: state = State.DYNAMICIMPORT_PACKAGE_STATE; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BUNDLE_ACTIVATOR_STATE; break;
                                case 6: state = State.BUNDLE_NATIVECODE_STATE; break;
                                case 9: state = State.BUNDLE_SYMBOLICNAME_STATE; break;
                                case 13: state = State.CLASSPATH_ENTRY_STATE; break;
                                case 33: state = State.DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY; break;
                                case 35: state = State.DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY1; break;
                                case 54: state = State.DIRECTIVE_EXCLUDE_EXPORT_PACKAGE; break;
                                case 34: state = State.DIRECTIVE_INCLUDE_ACTIVATIONPOLICY; break;
                                case 36: state = State.DIRECTIVE_INCLUDE_ACTIVATIONPOLICY1; break;
                                case 53: state = State.DIRECTIVE_INCLUDE_EXPORT_PACKAGE; break;
                                case 56: state = State.DIRECTIVE_USES; break;
                                case 57: state = State.DIRECTIVE_USES1; break;
                                case 32: state = State.DYNAMICIMPORT_PACKAGE_STATE; break;
                                case 10: state = State.EXPORT_PACKAGE_STATE; break;
                                case 17: state = State.EXPORT_SERVICE_STATE; break;
                                case 11: state = State.FRAGMENT_HOST_STATE; break;
                                case 12: state = State.IMPORT_PACKAGE_STATE; break;
                                case 16: state = State.IMPORT_SERVICE_STATE; break;
                                case 14: state = State.REQUIRE_BUNDLE_STATE; break;
                                case 7: state = State.VERSION_STATE; break;
                            }
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 27: state = State.SELECTION_FILTER_DIRECTIVE; break;
                            }
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 27: state = State.SELECTION_FILTER_DIRECTIVE; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 27: state = State.SELECTION_FILTER_DIRECTIVE; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 27: state = State.SELECTION_FILTER_DIRECTIVE; break;
                            }
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 27: state = State.SELECTION_FILTER_DIRECTIVE; break;
                            }
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 27: state = State.SELECTION_FILTER_DIRECTIVE; break;
                            }
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 39: state = State.URL; break;
                            }
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 39: state = State.URL; break;
                            }
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 39: state = State.URL; break;
                            }
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BUNDLE_ACTIVATIONPOLICY_STATE; break;
                            }
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BUNDLE_ACTIVATOR_STATE; break;
                            }
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.SIMPLE_ENTRY_STATE; break;
                            }
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.CLASSPATH_ENTRY_STATE; break;
                            }
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.ALL_STRING_STATE; break;
                            }
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.ALL_STRING_STATE; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.ALL_STRING_STATE; break;
                            }
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.URL_STATE; break;
                            }
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.ALL_STRING_STATE; break;
                            }
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.MANIFESTVERSION_STATE; break;
                            }
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.ALL_STRING_STATE; break;
                            }
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                            }
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BUNDLE_SYMBOLICNAME_STATE; break;
                            }
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.URL_STATE; break;
                            }
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.ALL_STRING_STATE; break;
                            }
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.VERSION_STATE; break;
                            }
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.DYNAMICIMPORT_PACKAGE_STATE; break;
                            }
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.EXPORT_PACKAGE_STATE; break;
                            }
                            return token;
                        }
                    case 40:
                        {
                            @SuppressWarnings("hiding") Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.EXPORT_SERVICE_STATE; break;
                            }
                            return token;
                        }
                    case 41:
                        {
                            @SuppressWarnings("hiding") Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.FRAGMENT_HOST_STATE; break;
                            }
                            return token;
                        }
                    case 42:
                        {
                            @SuppressWarnings("hiding") Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.IMPORT_PACKAGE_STATE; break;
                            }
                            return token;
                        }
                    case 43:
                        {
                            @SuppressWarnings("hiding") Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.IMPORT_SERVICE_STATE; break;
                            }
                            return token;
                        }
                    case 44:
                        {
                            @SuppressWarnings("hiding") Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.REQUIRE_BUNDLE_STATE; break;
                            }
                            return token;
                        }
                    case 45:
                        {
                            @SuppressWarnings("hiding") Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.DIGEST_ENTRY_STATE; break;
                            }
                            return token;
                        }
                    case 46:
                        {
                            @SuppressWarnings("hiding") Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.SIMPLE_ENTRY_STATE; break;
                            }
                            return token;
                        }
                    case 47:
                        {
                            @SuppressWarnings("hiding") Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.BUNDLE_ACTIVATIONPOLICY_STATE; break;
                            }
                            return token;
                        }
                    case 48:
                        {
                            @SuppressWarnings("hiding") Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BUNDLE_ACTIVATOR_STATE; break;
                            }
                            return token;
                        }
                    case 49:
                        {
                            @SuppressWarnings("hiding") Token token = new49(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BUNDLE_ACTIVATOR_STATE; break;
                            }
                            return token;
                        }
                    case 50:
                        {
                            @SuppressWarnings("hiding") Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 6: state = State.DIRECTIVE_OSNAME; break;
                            }
                            return token;
                        }
                    case 51:
                        {
                            @SuppressWarnings("hiding") Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 6: state = State.DIRECTIVE_OSVERSION; break;
                            }
                            return token;
                        }
                    case 52:
                        {
                            @SuppressWarnings("hiding") Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 6: state = State.DIRECTIVE_PROCESSOR; break;
                            }
                            return token;
                        }
                    case 53:
                        {
                            @SuppressWarnings("hiding") Token token = new53(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 6: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 54:
                        {
                            @SuppressWarnings("hiding") Token token = new54(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 6: state = State.SELECTION_FILTER_DIRECTIVE; break;
                            }
                            return token;
                        }
                    case 55:
                        {
                            @SuppressWarnings("hiding") Token token = new55(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 8: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                            }
                            return token;
                        }
                    case 56:
                        {
                            @SuppressWarnings("hiding") Token token = new56(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 8: state = State.DIRECTIVE_RESOLUTION_REQUIREDEXECUTION_STATE; break;
                                case 12: state = State.DIRECTIVE_RESOLUTION_IMPORT_STATE; break;
                            }
                            return token;
                        }
                    case 57:
                        {
                            @SuppressWarnings("hiding") Token token = new57(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 10: state = State.DIRECTIVE_USES; break;
                            }
                            return token;
                        }
                    case 58:
                        {
                            @SuppressWarnings("hiding") Token token = new58(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY; break;
                                case 10: state = State.DIRECTIVE_EXCLUDE_EXPORT_PACKAGE; break;
                            }
                            return token;
                        }
                    case 59:
                        {
                            @SuppressWarnings("hiding") Token token = new59(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.DIRECTIVE_INCLUDE_ACTIVATIONPOLICY; break;
                                case 10: state = State.DIRECTIVE_INCLUDE_EXPORT_PACKAGE; break;
                            }
                            return token;
                        }
                    case 60:
                        {
                            @SuppressWarnings("hiding") Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 10: state = State.DIRECTIVE_MANDATORY; break;
                            }
                            return token;
                        }
                    case 61:
                        {
                            @SuppressWarnings("hiding") Token token = new61(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 11: state = State.FRAGMENT_HOST_STATE; break;
                            }
                            return token;
                        }
                    case 62:
                        {
                            @SuppressWarnings("hiding") Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.BUNDLE_ACTIVATIONPOLICY_ATTRIBUT_STATE; break;
                                case 2: state = State.BUNDLE_ACTIVATOR_ATTRIBUT_STATE; break;
                                case 6: state = State.BUNDLE_NATIVECODE_ATTRIBUT_STATE; break;
                                case 8: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_ATTRIBUT_STATE; break;
                                case 9: state = State.BUNDLE_SYMBOLICNAME_ATTRIBUT_STATE; break;
                                case 32: state = State.DYNAMICIMPORT_PACKAGE_ATTRIBUT_STATE; break;
                                case 10: state = State.EXPORT_PACKAGE_ATTRIBUT_STATE; break;
                                case 17: state = State.EXPORT_SERVICE_ATTRIBUT_STATE; break;
                                case 11: state = State.FRAGMENT_HOST_ATTRIBUT_STATE; break;
                                case 12: state = State.IMPORT_PACKAGE_ATTRIBUT_STATE; break;
                                case 16: state = State.IMPORT_SERVICE_ATTRIBUT_STATE; break;
                                case 26: state = State.MANIFESTVERSION_ATTRIBUT_STATE; break;
                                case 14: state = State.REQUIRE_BUNDLE_ATTRIBUT_STATE; break;
                                case 4: state = State.SIMPLE_ENTRY_ATTRIBUT_STATE; break;
                                case 5: state = State.URL_ATTRIBUT; break;
                                case 7: state = State.VERSION_ATTRIBUT_STATE; break;
                            }
                            return token;
                        }
                    case 63:
                        {
                            @SuppressWarnings("hiding") Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 64:
                        {
                            @SuppressWarnings("hiding") Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 65:
                        {
                            @SuppressWarnings("hiding") Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 66:
                        {
                            @SuppressWarnings("hiding") Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 67:
                        {
                            @SuppressWarnings("hiding") Token token = new67(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 68:
                        {
                            @SuppressWarnings("hiding") Token token = new68(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 69:
                        {
                            @SuppressWarnings("hiding") Token token = new69(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 70:
                        {
                            @SuppressWarnings("hiding") Token token = new70(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 71:
                        {
                            @SuppressWarnings("hiding") Token token = new71(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 72:
                        {
                            @SuppressWarnings("hiding") Token token = new72(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 73:
                        {
                            @SuppressWarnings("hiding") Token token = new73(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 74:
                        {
                            @SuppressWarnings("hiding") Token token = new74(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 75:
                        {
                            @SuppressWarnings("hiding") Token token = new75(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 76:
                        {
                            @SuppressWarnings("hiding") Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 18: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 77:
                        {
                            @SuppressWarnings("hiding") Token token = new77(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 78:
                        {
                            @SuppressWarnings("hiding") Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 79:
                        {
                            @SuppressWarnings("hiding") Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 80:
                        {
                            @SuppressWarnings("hiding") Token token = new80(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 81:
                        {
                            @SuppressWarnings("hiding") Token token = new81(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 82:
                        {
                            @SuppressWarnings("hiding") Token token = new82(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 83:
                        {
                            @SuppressWarnings("hiding") Token token = new83(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 84:
                        {
                            @SuppressWarnings("hiding") Token token = new84(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 85:
                        {
                            @SuppressWarnings("hiding") Token token = new85(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 86:
                        {
                            @SuppressWarnings("hiding") Token token = new86(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 87:
                        {
                            @SuppressWarnings("hiding") Token token = new87(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 88:
                        {
                            @SuppressWarnings("hiding") Token token = new88(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 89:
                        {
                            @SuppressWarnings("hiding") Token token = new89(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 90:
                        {
                            @SuppressWarnings("hiding") Token token = new90(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 91:
                        {
                            @SuppressWarnings("hiding") Token token = new91(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 92:
                        {
                            @SuppressWarnings("hiding") Token token = new92(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 93:
                        {
                            @SuppressWarnings("hiding") Token token = new93(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 94:
                        {
                            @SuppressWarnings("hiding") Token token = new94(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 95:
                        {
                            @SuppressWarnings("hiding") Token token = new95(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 96:
                        {
                            @SuppressWarnings("hiding") Token token = new96(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 97:
                        {
                            @SuppressWarnings("hiding") Token token = new97(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 98:
                        {
                            @SuppressWarnings("hiding") Token token = new98(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 99:
                        {
                            @SuppressWarnings("hiding") Token token = new99(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 100:
                        {
                            @SuppressWarnings("hiding") Token token = new100(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 101:
                        {
                            @SuppressWarnings("hiding") Token token = new101(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 20: state = State.BUNDLE_NATIVECODE_STATE; break;
                            }
                            return token;
                        }
                    case 102:
                        {
                            @SuppressWarnings("hiding") Token token = new102(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 21: state = State.DIRECTIVE_VISIBILITY; break;
                            }
                            return token;
                        }
                    case 103:
                        {
                            @SuppressWarnings("hiding") Token token = new103(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 21: state = State.DIRECTIVE_VISIBILITY; break;
                            }
                            return token;
                        }
                    case 104:
                        {
                            @SuppressWarnings("hiding") Token token = new104(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 29: state = State.IMPORT_PACKAGE_STATE; break;
                                case 28: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                            }
                            return token;
                        }
                    case 105:
                        {
                            @SuppressWarnings("hiding") Token token = new105(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 29: state = State.IMPORT_PACKAGE_STATE; break;
                                case 28: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                            }
                            return token;
                        }
                    case 106:
                        {
                            @SuppressWarnings("hiding") Token token = new106(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 23: state = State.DIRECTIVE_EXTENSION; break;
                            }
                            return token;
                        }
                    case 107:
                        {
                            @SuppressWarnings("hiding") Token token = new107(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 23: state = State.DIRECTIVE_EXTENSION; break;
                            }
                            return token;
                        }
                    case 108:
                        {
                            @SuppressWarnings("hiding") Token token = new108(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 24: state = State.DIRECTIVE_FRAGMENT_ATTACHMENT; break;
                            }
                            return token;
                        }
                    case 109:
                        {
                            @SuppressWarnings("hiding") Token token = new109(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 24: state = State.DIRECTIVE_FRAGMENT_ATTACHMENT; break;
                            }
                            return token;
                        }
                    case 110:
                        {
                            @SuppressWarnings("hiding") Token token = new110(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 24: state = State.DIRECTIVE_FRAGMENT_ATTACHMENT; break;
                            }
                            return token;
                        }
                    case 111:
                        {
                            @SuppressWarnings("hiding") Token token = new111(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 25: state = State.DIRECTIVE_SINGLETON; break;
                            }
                            return token;
                        }
                    case 112:
                        {
                            @SuppressWarnings("hiding") Token token = new112(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 25: state = State.DIRECTIVE_SINGLETON; break;
                            }
                            return token;
                        }
                    case 113:
                        {
                            @SuppressWarnings("hiding") Token token = new113(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 26: state = State.MANIFESTVERSION_STATE; break;
                            }
                            return token;
                        }
                    case 114:
                        {
                            @SuppressWarnings("hiding") Token token = new114(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 115:
                        {
                            @SuppressWarnings("hiding") Token token = new115(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.MANIFEST_ENTRY; break;
                                case 1: state = State.MANIFEST_ENTRY; break;
                                case 2: state = State.MANIFEST_ENTRY; break;
                                case 6: state = State.MANIFEST_ENTRY; break;
                                case 8: state = State.MANIFEST_ENTRY; break;
                                case 9: state = State.MANIFEST_ENTRY; break;
                                case 13: state = State.MANIFEST_ENTRY; break;
                                case 15: state = State.MANIFEST_ENTRY; break;
                                case 33: state = State.MANIFEST_ENTRY; break;
                                case 54: state = State.MANIFEST_ENTRY; break;
                                case 23: state = State.MANIFEST_ENTRY; break;
                                case 24: state = State.MANIFEST_ENTRY; break;
                                case 34: state = State.MANIFEST_ENTRY; break;
                                case 53: state = State.MANIFEST_ENTRY; break;
                                case 20: state = State.MANIFEST_ENTRY; break;
                                case 19: state = State.MANIFEST_ENTRY; break;
                                case 18: state = State.MANIFEST_ENTRY; break;
                                case 22: state = State.MANIFEST_ENTRY; break;
                                case 25: state = State.MANIFEST_ENTRY; break;
                                case 56: state = State.MANIFEST_ENTRY; break;
                                case 21: state = State.MANIFEST_ENTRY; break;
                                case 32: state = State.MANIFEST_ENTRY; break;
                                case 10: state = State.MANIFEST_ENTRY; break;
                                case 17: state = State.MANIFEST_ENTRY; break;
                                case 11: state = State.MANIFEST_ENTRY; break;
                                case 12: state = State.MANIFEST_ENTRY; break;
                                case 16: state = State.MANIFEST_ENTRY; break;
                                case 26: state = State.MANIFEST_ENTRY; break;
                                case 0: state = State.MANIFEST_ENTRY; break;
                                case 14: state = State.MANIFEST_ENTRY; break;
                                case 4: state = State.MANIFEST_ENTRY; break;
                                case 5: state = State.MANIFEST_ENTRY; break;
                                case 7: state = State.MANIFEST_ENTRY; break;
                            }
                            return token;
                        }
                    case 116:
                        {
                            @SuppressWarnings("hiding") Token token = new116(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BUNDLE_ACTIVATOR_STATE; break;
                                case 9: state = State.BUNDLE_SYMBOLICNAME_STATE; break;
                                case 33: state = State.DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY; break;
                                case 35: state = State.DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY1; break;
                                case 54: state = State.DIRECTIVE_EXCLUDE_EXPORT_PACKAGE; break;
                                case 34: state = State.DIRECTIVE_INCLUDE_ACTIVATIONPOLICY; break;
                                case 36: state = State.DIRECTIVE_INCLUDE_ACTIVATIONPOLICY1; break;
                                case 53: state = State.DIRECTIVE_INCLUDE_EXPORT_PACKAGE; break;
                                case 56: state = State.DIRECTIVE_USES; break;
                                case 57: state = State.DIRECTIVE_USES1; break;
                                case 32: state = State.DYNAMICIMPORT_PACKAGE_STATE; break;
                                case 10: state = State.EXPORT_PACKAGE_STATE; break;
                                case 17: state = State.EXPORT_SERVICE_STATE; break;
                                case 11: state = State.FRAGMENT_HOST_STATE; break;
                                case 12: state = State.IMPORT_PACKAGE_STATE; break;
                                case 16: state = State.IMPORT_SERVICE_STATE; break;
                                case 14: state = State.REQUIRE_BUNDLE_STATE; break;
                            }
                            return token;
                        }
                    case 117:
                        {
                            @SuppressWarnings("hiding") Token token = new117(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 8: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                            }
                            return token;
                        }
                    case 118:
                        {
                            @SuppressWarnings("hiding") Token token = new118(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 8: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                            }
                            return token;
                        }
                    case 119:
                        {
                            @SuppressWarnings("hiding") Token token = new119(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 15: state = State.DIGEST_ENTRY_STATE; break;
                            }
                            return token;
                        }
                    case 120:
                        {
                            @SuppressWarnings("hiding") Token token = new120(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 37: state = State.BUNDLE_ACTIVATIONPOLICY_STATE; break;
                                case 38: state = State.BUNDLE_ACTIVATOR_STATE; break;
                                case 41: state = State.BUNDLE_NATIVECODE_STATE; break;
                                case 6: state = State.BUNDLE_NATIVECODE_STATE; break;
                                case 43: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                                case 44: state = State.BUNDLE_SYMBOLICNAME_STATE; break;
                                case 13: state = State.CLASSPATH_ENTRY_STATE; break;
                                case 31: state = State.EXPORT_PACKAGE_STATE; break;
                                case 55: state = State.DIRECTIVE_MANDATORY_VALUE; break;
                                case 52: state = State.DYNAMICIMPORT_PACKAGE_STATE; break;
                                case 45: state = State.EXPORT_PACKAGE_STATE; break;
                                case 50: state = State.EXPORT_SERVICE_STATE; break;
                                case 46: state = State.FRAGMENT_HOST_STATE; break;
                                case 47: state = State.IMPORT_PACKAGE_STATE; break;
                                case 49: state = State.IMPORT_SERVICE_STATE; break;
                                case 51: state = State.MANIFESTVERSION_STATE; break;
                                case 48: state = State.REQUIRE_BUNDLE_STATE; break;
                                case 30: state = State.SIMPLE_ENTRY_STATE; break;
                                case 5: state = State.URL; break;
                                case 40: state = State.URL; break;
                                case 42: state = State.VERSION_STATE; break;
                            }
                            return token;
                        }
                    case 121:
                        {
                            @SuppressWarnings("hiding") Token token = new121(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 37: state = State.BUNDLE_ACTIVATIONPOLICY_STATE; break;
                                case 38: state = State.BUNDLE_ACTIVATOR_STATE; break;
                                case 41: state = State.BUNDLE_NATIVECODE_STATE; break;
                                case 43: state = State.BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE; break;
                                case 44: state = State.BUNDLE_SYMBOLICNAME_STATE; break;
                                case 52: state = State.DYNAMICIMPORT_PACKAGE_STATE; break;
                                case 45: state = State.EXPORT_PACKAGE_STATE; break;
                                case 50: state = State.EXPORT_SERVICE_STATE; break;
                                case 46: state = State.FRAGMENT_HOST_STATE; break;
                                case 47: state = State.IMPORT_PACKAGE_STATE; break;
                                case 49: state = State.IMPORT_SERVICE_STATE; break;
                                case 51: state = State.MANIFESTVERSION_STATE; break;
                                case 48: state = State.REQUIRE_BUNDLE_STATE; break;
                                case 30: state = State.SIMPLE_ENTRY_STATE; break;
                                case 40: state = State.URL; break;
                                case 42: state = State.VERSION_STATE; break;
                            }
                            return token;
                        }
                    case 122:
                        {
                            @SuppressWarnings("hiding") Token token = new122(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 4: state = State.SIMPLE_ENTRY_STATE; break;
                            }
                            return token;
                        }
                    case 123:
                        {
                            @SuppressWarnings("hiding") Token token = new123(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.ALL_STRING_STATE; break;
                            }
                            return token;
                        }
                    case 124:
                        {
                            @SuppressWarnings("hiding") Token token = new124(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 7: state = State.VERSION_STATE; break;
                            }
                            return token;
                        }
                    case 125:
                        {
                            @SuppressWarnings("hiding") Token token = new125(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 7: state = State.VERSION_STATE; break;
                            }
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TQuote(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDefinition(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLeftBracket(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRightBracket(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDotdot(line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDoubleAntiSlash(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProtectedString(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPathSep(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOptional(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEquals(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGreaterEquals(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLesserEquals(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGreater(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLess(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNotEquals(line, pos); }
    Token new18(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUrlHttp(text, line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUrlFtp(line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUrlFile(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleActivationpolicy(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleActivator(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleCategory(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleClasspath(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleContactaddress(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleCopyright(text, line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleDescription(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleDocurl(text, line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleLocalization(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleManifestversion(text, line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleName(text, line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleNativecode(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleRequiredexecutionenvironment(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleSymbolicname(text, line, pos); }
    Token new35(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleUpdatelocation(text, line, pos); }
    Token new36(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleVendor(text, line, pos); }
    Token new37(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBundleVersion(text, line, pos); }
    Token new38(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDynamicimportPackage(text, line, pos); }
    Token new39(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExportPackage(text, line, pos); }
    Token new40(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExportService(text, line, pos); }
    Token new41(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFragmentHost(text, line, pos); }
    Token new42(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TImportPackage(text, line, pos); }
    Token new43(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TImportService(text, line, pos); }
    Token new44(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRequireBundle(text, line, pos); }
    Token new45(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEntryDigest(text, line, pos); }
    Token new46(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEntry(text, line, pos); }
    Token new47(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLazy(text, line, pos); }
    Token new48(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSingleton(text, line, pos); }
    Token new49(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFragmentAttachment(text, line, pos); }
    Token new50(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsname(text, line, pos); }
    Token new51(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsversion(text, line, pos); }
    Token new52(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessor(text, line, pos); }
    Token new53(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLanguage(text, line, pos); }
    Token new54(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSelectionFilter(text, line, pos); }
    Token new55(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVisibility(text, line, pos); }
    Token new56(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TResolution(text, line, pos); }
    Token new57(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUses(text, line, pos); }
    Token new58(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExclude(text, line, pos); }
    Token new59(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInclude(text, line, pos); }
    Token new60(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMandatory(text, line, pos); }
    Token new61(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExtension(text, line, pos); }
    Token new62(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAttributeEntry(text, line, pos); }
    Token new63(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessor68k(text, line, pos); }
    Token new64(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorArm(text, line, pos); }
    Token new65(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorAlpha(text, line, pos); }
    Token new66(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorIgnite(text, line, pos); }
    Token new67(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorMips(text, line, pos); }
    Token new68(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorParisc(text, line, pos); }
    Token new69(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorPowerpc(text, line, pos); }
    Token new70(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorSh4(text, line, pos); }
    Token new71(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorSparc(text, line, pos); }
    Token new72(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorS390(text, line, pos); }
    Token new73(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorS390x(text, line, pos); }
    Token new74(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorV850e(text, line, pos); }
    Token new75(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorX86(text, line, pos); }
    Token new76(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProcessorX8664(text, line, pos); }
    Token new77(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameAix(text, line, pos); }
    Token new78(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameDigitalunix(text, line, pos); }
    Token new79(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameEmbos(text, line, pos); }
    Token new80(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameEpoc32(text, line, pos); }
    Token new81(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameFreebsd(text, line, pos); }
    Token new82(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameHpux(text, line, pos); }
    Token new83(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameIrix(text, line, pos); }
    Token new84(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameLinux(text, line, pos); }
    Token new85(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameMacos(text, line, pos); }
    Token new86(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameNetbsd(text, line, pos); }
    Token new87(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameNetware(text, line, pos); }
    Token new88(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameOpenbsd(text, line, pos); }
    Token new89(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameOs2(text, line, pos); }
    Token new90(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameQnx(text, line, pos); }
    Token new91(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameSolaris(text, line, pos); }
    Token new92(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameSunos(text, line, pos); }
    Token new93(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameVxworks(text, line, pos); }
    Token new94(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameWindows95(text, line, pos); }
    Token new95(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameWindows98(text, line, pos); }
    Token new96(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameWindowsnt(text, line, pos); }
    Token new97(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameWindowsce(text, line, pos); }
    Token new98(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameWindows2000(text, line, pos); }
    Token new99(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameWindows2003(text, line, pos); }
    Token new100(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameWindowsxp(text, line, pos); }
    Token new101(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOsnameWindowsvista(text, line, pos); }
    Token new102(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVisibilityPrivate(text, line, pos); }
    Token new103(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVisibilityReexport(text, line, pos); }
    Token new104(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TResolutionMandatory(text, line, pos); }
    Token new105(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TResolutionOptional(text, line, pos); }
    Token new106(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExtensionFramework(text, line, pos); }
    Token new107(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExtensionBootclasspath(text, line, pos); }
    Token new108(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAlways(text, line, pos); }
    Token new109(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNever(text, line, pos); }
    Token new110(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TResolveTime(text, line, pos); }
    Token new111(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTrue(text, line, pos); }
    Token new112(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFalse(text, line, pos); }
    Token new113(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TManifestversion(text, line, pos); }
    Token new114(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEolblank(text, line, pos); }
    Token new115(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEol(text, line, pos); }
    Token new116(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new117(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifierRequiredProfile(text, line, pos); }
    Token new118(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifierRequiredConfiguration(text, line, pos); }
    Token new119(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDigestValue(text, line, pos); }
    Token new120(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUnquotedString(text, line, pos); }
    Token new121(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TQuotedString(text, line, pos); }
    Token new122(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSimpleStringValue(text, line, pos); }
    Token new123(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAllString(text, line, pos); }
    Token new124(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }
    Token new125(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TQualifier(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // MANIFEST_ENTRY
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {45, 45, 7}, {47, 47, 8}, {48, 57, 9}, {58, 58, 10}, {61, 61, 11}, {65, 65, 12}, {66, 66, 13}, {67, 67, 12}, {68, 68, 14}, {69, 69, 15}, {70, 70, 16}, {71, 72, 12}, {73, 73, 17}, {74, 79, 12}, {80, 80, 18}, {81, 81, 12}, {82, 82, 19}, {83, 90, 12}, {91, 91, 20}, {92, 92, 21}, {93, 93, 22}, {95, 95, 23}, {97, 97, 24}, {98, 98, 25}, {99, 99, 24}, {100, 100, 26}, {101, 101, 27}, {102, 102, 28}, {103, 104, 24}, {105, 105, 29}, {106, 111, 24}, {112, 112, 30}, {113, 113, 24}, {114, 114, 31}, {115, 122, 24}, },
            {{9, 32, -2}, },
            {{9, 9, 32}, {32, 32, 33}, },
            {{9, 9, 32}, {10, 10, 34}, {32, 32, 33}, },
            {{9, 32, -2}, },
            {},
            {},
            {{45, 45, 35}, {48, 57, 9}, {58, 58, 36}, {65, 90, 12}, {95, 95, 23}, {97, 122, 24}, },
            {},
            {{45, 122, -9}, },
            {{32, 32, 37}, {61, 61, 38}, },
            {},
            {{45, 122, -9}, },
            {{45, 58, -9}, {65, 84, 12}, {85, 85, 39}, {86, 90, 12}, {95, 95, 23}, {97, 116, 24}, {117, 117, 40}, {118, 122, 24}, },
            {{45, 58, -9}, {65, 88, 12}, {89, 89, 41}, {90, 90, 12}, {95, 95, 23}, {97, 120, 24}, {121, 121, 42}, {122, 122, 24}, },
            {{45, 58, -9}, {65, 87, 12}, {88, 88, 43}, {89, 90, 12}, {95, 95, 23}, {97, 119, 24}, {120, 120, 44}, {121, 122, 24}, },
            {{45, 58, -9}, {65, 81, 12}, {82, 82, 45}, {83, 90, 12}, {95, 95, 23}, {97, 113, 24}, {114, 114, 46}, {115, 122, 24}, },
            {{45, 58, -9}, {65, 76, 12}, {77, 77, 47}, {78, 90, 12}, {95, 95, 23}, {97, 108, 24}, {109, 109, 48}, {110, 122, 24}, },
            {{45, 81, -18}, {82, 82, 49}, {83, 113, -18}, {114, 114, 50}, {115, 122, 24}, },
            {{45, 58, -9}, {65, 68, 12}, {69, 69, 51}, {70, 90, 12}, {95, 95, 23}, {97, 100, 24}, {101, 101, 52}, {102, 122, 24}, },
            {},
            {{34, 34, 53}, {92, 92, 54}, },
            {},
            {{45, 122, -9}, },
            {{45, 122, -9}, },
            {{45, 122, -15}, },
            {{45, 122, -16}, },
            {{45, 122, -17}, },
            {{45, 122, -18}, },
            {{45, 122, -19}, },
            {{45, 122, -20}, },
            {{45, 122, -21}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{45, 58, -9}, {65, 67, 12}, {68, 68, 55}, {69, 90, 12}, {95, 122, -9}, },
            {{32, 32, 56}, },
            {},
            {},
            {{45, 58, -9}, {65, 77, 12}, {78, 78, 57}, {79, 90, 12}, {95, 95, 23}, {97, 109, 24}, {110, 110, 58}, {111, 122, 24}, },
            {{45, 122, -41}, },
            {{45, 77, -41}, {78, 78, 59}, {79, 109, -41}, {110, 110, 60}, {111, 122, 24}, },
            {{45, 122, -43}, },
            {{45, 58, -9}, {65, 79, 12}, {80, 80, 61}, {81, 90, 12}, {95, 95, 23}, {97, 111, 24}, {112, 112, 62}, {113, 122, 24}, },
            {{45, 122, -45}, },
            {{45, 58, -9}, {65, 65, 63}, {66, 90, 12}, {95, 95, 23}, {97, 97, 64}, {98, 122, 24}, },
            {{45, 122, -47}, },
            {{45, 79, -45}, {80, 80, 65}, {81, 111, -45}, {112, 112, 66}, {113, 122, 24}, },
            {{45, 122, -49}, },
            {{45, 58, -9}, {65, 78, 12}, {79, 79, 67}, {80, 90, 12}, {95, 95, 23}, {97, 110, 24}, {111, 111, 68}, {112, 122, 24}, },
            {{45, 122, -51}, },
            {{45, 58, -9}, {65, 80, 12}, {81, 81, 69}, {82, 90, 12}, {95, 95, 23}, {97, 112, 24}, {113, 113, 70}, {114, 122, 24}, },
            {{45, 122, -53}, },
            {},
            {},
            {{45, 95, -9}, {97, 104, 24}, {105, 105, 71}, {106, 122, 24}, },
            {{9, 9, 72}, {32, 32, 73}, },
            {{45, 67, -37}, {68, 68, 74}, {69, 95, -37}, {97, 99, 24}, {100, 100, 75}, {101, 122, 24}, },
            {{45, 122, -59}, },
            {{45, 58, -9}, {65, 65, 76}, {66, 95, -47}, {97, 97, 77}, {98, 122, 24}, },
            {{45, 122, -61}, },
            {{45, 78, -51}, {79, 79, 78}, {80, 110, -51}, {111, 111, 79}, {112, 122, 24}, },
            {{45, 122, -63}, },
            {{45, 58, -9}, {65, 70, 12}, {71, 71, 80}, {72, 90, 12}, {95, 95, 23}, {97, 102, 24}, {103, 103, 81}, {104, 122, 24}, },
            {{45, 122, -65}, },
            {{45, 78, -51}, {79, 79, 82}, {80, 110, -51}, {111, 111, 83}, {112, 122, 24}, },
            {{45, 122, -67}, },
            {{45, 58, -9}, {65, 85, 12}, {86, 86, 84}, {87, 90, 12}, {95, 95, 23}, {97, 117, 24}, {118, 118, 85}, {119, 122, 24}, },
            {{45, 122, -69}, },
            {{45, 84, -15}, {85, 85, 86}, {86, 116, -15}, {117, 117, 87}, {118, 122, 24}, },
            {{45, 122, -71}, },
            {{45, 95, -9}, {97, 102, 24}, {103, 103, 88}, {104, 122, 24}, },
            {{9, 32, -58}, },
            {{9, 32, -58}, },
            {{45, 58, -9}, {65, 75, 12}, {76, 76, 89}, {77, 90, 12}, {95, 95, 23}, {97, 107, 24}, {108, 108, 90}, {109, 122, 24}, },
            {{45, 122, -76}, },
            {{45, 76, -19}, {77, 77, 91}, {78, 108, -19}, {109, 109, 92}, {110, 122, 24}, },
            {{45, 122, -78}, },
            {{45, 81, -18}, {82, 82, 93}, {83, 113, -18}, {114, 114, 94}, {115, 122, 24}, },
            {{45, 122, -80}, },
            {{45, 76, -19}, {77, 77, 95}, {78, 108, -19}, {109, 109, 96}, {110, 122, 24}, },
            {{45, 122, -82}, },
            {{45, 81, -18}, {82, 82, 97}, {83, 113, -18}, {114, 114, 98}, {115, 122, 24}, },
            {{45, 122, -84}, },
            {{45, 58, -9}, {65, 72, 12}, {73, 73, 99}, {74, 90, 12}, {95, 104, -57}, {105, 105, 100}, {106, 122, 24}, },
            {{45, 122, -86}, },
            {{45, 72, -86}, {73, 73, 101}, {74, 104, -86}, {105, 105, 102}, {106, 122, 24}, },
            {{45, 122, -88}, },
            {{45, 95, -9}, {97, 100, 24}, {101, 101, 103}, {102, 122, 24}, },
            {{45, 68, -21}, {69, 69, 104}, {70, 100, -21}, {101, 101, 105}, {102, 122, 24}, },
            {{45, 122, -91}, },
            {{45, 72, -86}, {73, 73, 106}, {74, 104, -86}, {105, 105, 107}, {106, 122, 24}, },
            {{45, 122, -93}, },
            {{45, 58, -9}, {65, 83, 12}, {84, 84, 108}, {85, 90, 12}, {95, 95, 23}, {97, 115, 24}, {116, 116, 109}, {117, 122, 24}, },
            {{45, 122, -95}, },
            {{45, 68, -21}, {69, 69, 110}, {70, 100, -21}, {101, 101, 111}, {102, 122, 24}, },
            {{45, 122, -97}, },
            {{45, 83, -95}, {84, 84, 112}, {85, 115, -95}, {116, 116, 113}, {117, 122, 24}, },
            {{45, 122, -99}, },
            {{45, 67, -37}, {68, 68, 114}, {69, 99, -59}, {100, 100, 115}, {101, 122, 24}, },
            {{45, 122, -101}, },
            {{45, 81, -18}, {82, 82, 116}, {83, 113, -18}, {114, 114, 117}, {115, 122, 24}, },
            {{45, 122, -103}, },
            {{45, 95, -9}, {97, 114, 24}, {115, 115, 118}, {116, 122, 24}, },
            {{45, 45, 119}, {48, 122, -9}, },
            {{45, 122, -106}, },
            {{45, 58, -9}, {65, 66, 12}, {67, 67, 120}, {68, 90, 12}, {95, 95, 23}, {97, 98, 24}, {99, 99, 121}, {100, 122, 24}, },
            {{45, 122, -108}, },
            {{45, 45, 122}, {48, 122, -9}, },
            {{45, 122, -110}, },
            {{45, 77, -41}, {78, 78, 123}, {79, 109, -41}, {110, 110, 124}, {111, 122, 24}, },
            {{45, 122, -112}, },
            {{45, 45, 125}, {48, 122, -9}, },
            {{45, 122, -114}, },
            {{45, 68, -21}, {69, 69, 126}, {70, 100, -21}, {101, 101, 127}, {102, 122, 24}, },
            {{45, 122, -116}, },
            {{45, 68, -21}, {69, 69, 128}, {70, 100, -21}, {101, 101, 129}, {102, 122, 24}, },
            {{45, 122, -118}, },
            {{45, 95, -9}, {97, 115, 24}, {116, 116, 130}, {117, 122, 24}, },
            {{45, 58, -9}, {65, 65, 131}, {66, 66, 12}, {67, 67, 132}, {68, 68, 133}, {69, 75, 12}, {76, 76, 134}, {77, 77, 135}, {78, 78, 136}, {79, 81, 12}, {82, 82, 137}, {83, 83, 138}, {84, 84, 12}, {85, 85, 139}, {86, 86, 140}, {87, 95, -69}, {97, 97, 141}, {98, 98, 24}, {99, 99, 142}, {100, 100, 143}, {101, 107, 24}, {108, 108, 144}, {109, 109, 145}, {110, 110, 146}, {111, 113, 24}, {114, 114, 147}, {115, 115, 148}, {116, 116, 24}, {117, 117, 149}, {118, 118, 150}, {119, 122, 24}, },
            {{45, 72, -86}, {73, 73, 151}, {74, 104, -86}, {105, 105, 152}, {106, 122, 24}, },
            {{45, 122, -122}, },
            {{45, 68, -37}, {69, 79, 12}, {80, 80, 153}, {81, 82, 12}, {83, 83, 154}, {84, 90, 12}, {95, 111, -45}, {112, 112, 155}, {113, 114, 24}, {115, 115, 156}, {116, 122, 24}, },
            {{45, 83, -95}, {84, 84, 157}, {85, 115, -95}, {116, 116, 158}, {117, 122, 24}, },
            {{45, 122, -125}, },
            {{45, 79, -124}, {80, 80, 159}, {81, 82, 12}, {83, 83, 160}, {84, 111, -124}, {112, 112, 161}, {113, 114, 24}, {115, 115, 162}, {116, 122, 24}, },
            {{45, 45, 163}, {48, 122, -9}, },
            {{45, 122, -128}, },
            {{45, 45, 164}, {48, 122, -9}, },
            {{45, 122, -130}, },
            {{45, 57, -9}, {58, 58, 165}, {65, 122, -9}, },
            {{45, 66, -108}, {67, 67, 166}, {68, 98, -108}, {99, 99, 167}, {100, 122, 24}, },
            {{45, 58, -9}, {65, 65, 168}, {66, 75, 12}, {76, 76, 169}, {77, 78, 12}, {79, 79, 170}, {80, 95, -51}, {97, 97, 171}, {98, 107, 24}, {108, 108, 172}, {109, 110, 24}, {111, 111, 173}, {112, 122, 24}, },
            {{45, 68, -21}, {69, 69, 174}, {70, 78, 12}, {79, 79, 175}, {80, 95, -51}, {97, 100, 24}, {101, 101, 176}, {102, 104, 24}, {105, 105, 71}, {106, 110, 24}, {111, 111, 177}, {112, 122, 24}, },
            {{45, 78, -51}, {79, 79, 178}, {80, 110, -51}, {111, 111, 179}, {112, 122, 24}, },
            {{45, 58, -9}, {65, 65, 180}, {66, 95, -47}, {97, 97, 181}, {98, 122, 24}, },
            {{45, 58, -9}, {65, 65, 182}, {66, 95, -47}, {97, 97, 183}, {98, 122, 24}, },
            {{45, 68, -21}, {69, 69, 184}, {70, 100, -21}, {101, 101, 185}, {102, 122, 24}, },
            {{45, 88, -16}, {89, 89, 186}, {90, 120, -16}, {121, 121, 187}, {122, 122, 24}, },
            {{45, 79, -45}, {80, 80, 188}, {81, 111, -45}, {112, 112, 189}, {113, 122, 24}, },
            {{45, 68, -21}, {69, 69, 190}, {70, 100, -21}, {101, 101, 191}, {102, 122, 24}, },
            {{45, 122, -133}, },
            {{45, 122, -134}, },
            {{45, 101, -135}, {102, 110, 24}, {111, 122, -135}, },
            {{45, 122, -136}, },
            {{45, 122, -137}, },
            {{45, 122, -138}, },
            {{45, 122, -139}, },
            {{45, 122, -140}, },
            {{45, 122, -141}, },
            {{45, 122, -142}, },
            {{45, 76, -19}, {77, 77, 192}, {78, 108, -19}, {109, 109, 193}, {110, 122, 24}, },
            {{45, 122, -153}, },
            {{45, 58, -9}, {65, 65, 194}, {66, 95, -47}, {97, 97, 195}, {98, 122, 24}, },
            {{45, 68, -21}, {69, 69, 196}, {70, 100, -21}, {101, 101, 197}, {102, 122, 24}, },
            {{45, 122, -155}, },
            {{45, 122, -156}, },
            {{45, 45, 198}, {48, 122, -9}, },
            {{45, 122, -159}, },
            {{45, 58, -9}, {65, 65, 199}, {66, 95, -47}, {97, 97, 200}, {98, 122, 24}, },
            {{45, 68, -21}, {69, 69, 201}, {70, 100, -21}, {101, 101, 202}, {102, 122, 24}, },
            {{45, 122, -161}, },
            {{45, 122, -162}, },
            {{45, 79, -124}, {80, 80, 203}, {81, 111, -45}, {112, 112, 204}, {113, 122, 24}, },
            {{45, 58, -9}, {65, 65, 12}, {66, 66, 205}, {67, 67, 12}, {68, 95, -37}, {97, 97, 24}, {98, 98, 206}, {99, 122, 24}, },
            {{32, 32, 207}, },
            {{45, 83, -95}, {84, 84, 208}, {85, 115, -95}, {116, 116, 209}, {117, 122, 24}, },
            {{45, 122, -168}, },
            {{45, 83, -95}, {84, 84, 210}, {85, 115, -95}, {116, 116, 211}, {117, 122, 24}, },
            {{45, 58, -9}, {65, 65, 212}, {66, 95, -47}, {97, 97, 213}, {98, 122, 24}, },
            {{45, 77, -41}, {78, 78, 214}, {79, 79, 12}, {80, 80, 215}, {81, 95, -45}, {97, 109, 24}, {110, 110, 216}, {111, 111, 24}, {112, 112, 217}, {113, 122, 24}, },
            {{45, 122, -170}, },
            {{45, 122, -171}, },
            {{45, 122, -172}, },
            {{45, 58, -9}, {65, 82, 12}, {83, 83, 218}, {84, 95, -124}, {97, 114, 24}, {115, 115, 219}, {116, 122, 24}, },
            {{45, 66, -108}, {67, 67, 220}, {68, 98, -108}, {99, 99, 221}, {100, 122, 24}, },
            {{45, 122, -176}, },
            {{45, 122, -177}, },
            {{45, 66, -108}, {67, 67, 222}, {68, 98, -108}, {99, 99, 223}, {100, 122, 24}, },
            {{45, 122, -180}, },
            {{45, 77, -41}, {78, 78, 224}, {79, 109, -41}, {110, 110, 225}, {111, 122, 24}, },
            {{45, 122, -182}, },
            {{45, 76, -19}, {77, 77, 226}, {78, 83, 12}, {84, 84, 227}, {85, 95, -95}, {97, 108, 24}, {109, 109, 228}, {110, 115, 24}, {116, 116, 229}, {117, 122, 24}, },
            {{45, 122, -184}, },
            {{45, 80, -53}, {81, 81, 230}, {82, 112, -53}, {113, 113, 231}, {114, 122, 24}, },
            {{45, 122, -186}, },
            {{45, 76, -19}, {77, 77, 232}, {78, 108, -19}, {109, 109, 233}, {110, 122, 24}, },
            {{45, 122, -188}, },
            {{45, 67, -37}, {68, 68, 234}, {69, 99, -59}, {100, 100, 235}, {101, 122, 24}, },
            {{45, 122, -190}, },
            {{45, 77, -41}, {78, 78, 236}, {79, 81, 12}, {82, 82, 237}, {83, 95, -18}, {97, 109, 24}, {110, 110, 238}, {111, 113, 24}, {114, 114, 239}, {115, 122, 24}, },
            {{45, 122, -192}, },
            {{45, 79, -45}, {80, 80, 240}, {81, 111, -45}, {112, 112, 241}, {113, 122, 24}, },
            {{45, 122, -194}, },
            {{45, 66, -108}, {67, 67, 242}, {68, 98, -108}, {99, 99, 243}, {100, 122, 24}, },
            {{45, 122, -196}, },
            {{45, 81, -18}, {82, 82, 244}, {83, 113, -18}, {114, 114, 245}, {115, 122, 24}, },
            {{45, 122, -198}, },
            {{45, 68, -37}, {69, 71, 12}, {72, 72, 246}, {73, 90, 12}, {95, 95, 23}, {97, 103, 24}, {104, 104, 247}, {105, 122, 24}, },
            {{45, 66, -108}, {67, 67, 248}, {68, 98, -108}, {99, 99, 249}, {100, 122, 24}, },
            {{45, 122, -201}, },
            {{45, 81, -18}, {82, 82, 250}, {83, 113, -18}, {114, 114, 251}, {115, 122, 24}, },
            {{45, 122, -203}, },
            {{45, 58, -9}, {65, 65, 252}, {66, 95, -47}, {97, 97, 253}, {98, 122, 24}, },
            {{45, 122, -205}, },
            {{45, 84, -15}, {85, 85, 254}, {86, 116, -15}, {117, 117, 255}, {118, 122, 24}, },
            {{45, 122, -207}, },
            {{9, 9, 256}, {32, 32, 257}, },
            {{45, 72, -86}, {73, 73, 258}, {74, 104, -86}, {105, 105, 259}, {106, 122, 24}, },
            {{45, 122, -210}, },
            {{45, 68, -21}, {69, 69, 260}, {70, 100, -21}, {101, 101, 261}, {102, 122, 24}, },
            {{45, 122, -212}, },
            {{45, 82, -176}, {83, 83, 262}, {84, 114, -176}, {115, 115, 263}, {116, 122, 24}, },
            {{45, 122, -214}, },
            {{45, 83, -95}, {84, 84, 264}, {85, 115, -95}, {116, 116, 265}, {117, 122, 24}, },
            {{45, 88, -16}, {89, 89, 266}, {90, 120, -16}, {121, 121, 267}, {122, 122, 24}, },
            {{45, 122, -216}, },
            {{45, 122, -217}, },
            {{45, 66, -108}, {67, 67, 268}, {68, 98, -108}, {99, 99, 269}, {100, 122, 24}, },
            {{45, 122, -220}, },
            {{45, 84, -15}, {85, 85, 270}, {86, 116, -15}, {117, 117, 271}, {118, 122, 24}, },
            {{45, 122, -222}, },
            {{45, 58, -9}, {65, 65, 272}, {66, 95, -47}, {97, 97, 273}, {98, 122, 24}, },
            {{45, 122, -224}, },
            {{45, 72, -86}, {73, 73, 274}, {74, 104, -86}, {105, 105, 275}, {106, 122, 24}, },
            {{45, 122, -226}, },
            {{45, 68, -21}, {69, 69, 276}, {70, 100, -21}, {101, 101, 277}, {102, 122, 24}, },
            {{45, 72, -86}, {73, 73, 278}, {74, 104, -86}, {105, 105, 279}, {106, 122, 24}, },
            {{45, 122, -228}, },
            {{45, 122, -229}, },
            {{45, 84, -15}, {85, 85, 280}, {86, 116, -15}, {117, 117, 281}, {118, 122, 24}, },
            {{45, 122, -232}, },
            {{45, 65, -166}, {66, 66, 282}, {67, 90, 12}, {95, 97, -2}, {98, 98, 283}, {99, 122, 24}, },
            {{45, 122, -234}, },
            {{45, 58, -9}, {65, 65, 284}, {66, 95, -47}, {97, 97, 285}, {98, 122, 24}, },
            {{45, 122, -236}, },
            {{45, 67, -37}, {68, 68, 286}, {69, 99, -59}, {100, 100, 287}, {101, 122, 24}, },
            {{45, 82, -176}, {83, 83, 288}, {84, 114, -176}, {115, 115, 289}, {116, 122, 24}, },
            {{45, 122, -238}, },
            {{45, 122, -239}, },
            {{45, 78, -51}, {79, 79, 290}, {80, 110, -51}, {111, 111, 291}, {112, 122, 24}, },
            {{45, 122, -242}, },
            {{45, 58, -9}, {65, 74, 12}, {75, 75, 292}, {76, 90, 12}, {95, 95, 23}, {97, 106, 24}, {107, 107, 293}, {108, 122, 24}, },
            {{45, 122, -244}, },
            {{45, 85, -69}, {86, 86, 294}, {87, 117, -69}, {118, 118, 295}, {119, 122, 24}, },
            {{45, 122, -246}, },
            {{45, 78, -51}, {79, 79, 296}, {80, 110, -51}, {111, 111, 297}, {112, 122, 24}, },
            {{45, 122, -248}, },
            {{45, 74, -244}, {75, 75, 298}, {76, 106, -244}, {107, 107, 299}, {108, 122, 24}, },
            {{45, 122, -250}, },
            {{45, 85, -69}, {86, 86, 300}, {87, 117, -69}, {118, 118, 301}, {119, 122, 24}, },
            {{45, 122, -252}, },
            {{45, 66, -108}, {67, 67, 302}, {68, 98, -108}, {99, 99, 303}, {100, 122, 24}, },
            {{45, 122, -254}, },
            {{45, 77, -41}, {78, 78, 304}, {79, 109, -41}, {110, 110, 305}, {111, 122, 24}, },
            {{45, 122, -256}, },
            {{9, 32, -209}, },
            {{9, 32, -209}, },
            {{45, 85, -69}, {86, 86, 306}, {87, 117, -69}, {118, 118, 307}, {119, 122, 24}, },
            {{45, 122, -260}, },
            {{45, 70, -65}, {71, 71, 308}, {72, 102, -65}, {103, 103, 309}, {104, 122, 24}, },
            {{45, 122, -262}, },
            {{45, 82, -176}, {83, 83, 310}, {84, 114, -176}, {115, 115, 311}, {116, 122, 24}, },
            {{45, 122, -264}, },
            {{45, 58, -9}, {65, 65, 312}, {66, 95, -47}, {97, 97, 313}, {98, 122, 24}, },
            {{45, 122, -266}, },
            {{45, 81, -18}, {82, 82, 314}, {83, 113, -18}, {114, 114, 315}, {115, 122, 24}, },
            {{45, 122, -268}, },
            {{45, 81, -18}, {82, 82, 316}, {83, 113, -18}, {114, 114, 317}, {115, 122, 24}, },
            {{45, 122, -270}, },
            {{45, 81, -18}, {82, 82, 318}, {83, 113, -18}, {114, 114, 319}, {115, 122, 24}, },
            {{45, 122, -272}, },
            {{45, 75, -76}, {76, 76, 320}, {77, 107, -76}, {108, 108, 321}, {109, 122, 24}, },
            {{45, 122, -274}, },
            {{45, 58, -9}, {65, 69, 12}, {70, 70, 322}, {71, 90, 12}, {95, 95, 23}, {97, 101, 24}, {102, 102, 323}, {103, 122, 24}, },
            {{45, 122, -276}, },
            {{45, 57, -9}, {58, 58, 324}, {65, 122, -9}, },
            {{45, 122, -278}, },
            {{45, 85, -69}, {86, 86, 325}, {87, 117, -69}, {118, 118, 326}, {119, 122, 24}, },
            {{45, 122, -280}, },
            {{45, 72, -86}, {73, 73, 327}, {74, 104, -86}, {105, 105, 328}, {106, 122, 24}, },
            {{45, 122, -282}, },
            {{45, 78, -51}, {79, 79, 329}, {80, 110, -51}, {111, 111, 330}, {112, 122, 24}, },
            {{45, 122, -284}, },
            {{45, 83, -95}, {84, 84, 331}, {85, 115, -95}, {116, 116, 332}, {117, 122, 24}, },
            {{45, 122, -286}, },
            {{45, 78, -51}, {79, 79, 333}, {80, 110, -51}, {111, 111, 334}, {112, 122, 24}, },
            {{45, 122, -288}, },
            {{45, 72, -86}, {73, 73, 335}, {74, 104, -86}, {105, 105, 336}, {106, 122, 24}, },
            {{45, 122, -290}, },
            {{45, 81, -18}, {82, 82, 337}, {83, 113, -18}, {114, 114, 338}, {115, 122, 24}, },
            {{45, 122, -292}, },
            {{45, 58, -9}, {65, 65, 339}, {66, 95, -47}, {97, 97, 340}, {98, 122, 24}, },
            {{45, 122, -294}, },
            {{45, 72, -86}, {73, 73, 341}, {74, 104, -86}, {105, 105, 342}, {106, 122, 24}, },
            {{45, 122, -296}, },
            {{45, 82, -176}, {83, 83, 343}, {84, 114, -176}, {115, 115, 344}, {116, 122, 24}, },
            {{45, 122, -298}, },
            {{45, 58, -9}, {65, 65, 345}, {66, 95, -47}, {97, 97, 346}, {98, 122, 24}, },
            {{45, 122, -300}, },
            {{45, 72, -86}, {73, 73, 347}, {74, 104, -86}, {105, 105, 348}, {106, 122, 24}, },
            {{45, 122, -302}, },
            {{45, 74, -244}, {75, 75, 349}, {76, 106, -244}, {107, 107, 350}, {108, 122, 24}, },
            {{45, 122, -304}, },
            {{45, 67, -37}, {68, 68, 351}, {69, 99, -59}, {100, 100, 352}, {101, 122, 24}, },
            {{45, 122, -306}, },
            {{45, 58, -9}, {65, 65, 353}, {66, 95, -47}, {97, 97, 354}, {98, 122, 24}, },
            {{45, 122, -308}, },
            {{45, 78, -51}, {79, 79, 355}, {80, 110, -51}, {111, 111, 356}, {112, 122, 24}, },
            {{45, 122, -310}, },
            {{45, 79, -45}, {80, 80, 357}, {81, 111, -45}, {112, 112, 358}, {113, 122, 24}, },
            {{45, 122, -312}, },
            {{45, 66, -108}, {67, 67, 359}, {68, 98, -108}, {99, 99, 360}, {100, 122, 24}, },
            {{45, 122, -314}, },
            {{45, 72, -86}, {73, 73, 361}, {74, 104, -86}, {105, 105, 362}, {106, 122, 24}, },
            {{45, 122, -316}, },
            {{45, 72, -86}, {73, 73, 363}, {74, 104, -86}, {105, 105, 364}, {106, 122, 24}, },
            {{45, 122, -318}, },
            {{45, 75, -76}, {76, 76, 365}, {77, 107, -76}, {108, 108, 366}, {109, 122, 24}, },
            {{45, 122, -320}, },
            {{45, 72, -86}, {73, 73, 367}, {74, 104, -86}, {105, 105, 368}, {106, 122, 24}, },
            {{45, 122, -322}, },
            {{45, 68, -21}, {69, 69, 369}, {70, 100, -21}, {101, 101, 370}, {102, 122, 24}, },
            {{45, 122, -324}, },
            {{32, 32, 371}, },
            {{45, 68, -21}, {69, 69, 372}, {70, 100, -21}, {101, 101, 373}, {102, 122, 24}, },
            {{45, 122, -327}, },
            {{45, 81, -18}, {82, 82, 374}, {83, 113, -18}, {114, 114, 375}, {115, 122, 24}, },
            {{45, 122, -329}, },
            {{45, 75, -76}, {76, 76, 376}, {77, 107, -76}, {108, 108, 377}, {109, 122, 24}, },
            {{45, 122, -331}, },
            {{45, 68, -21}, {69, 69, 378}, {70, 100, -21}, {101, 101, 379}, {102, 122, 24}, },
            {{45, 122, -333}, },
            {{45, 81, -18}, {82, 82, 380}, {83, 113, -18}, {114, 114, 381}, {115, 122, 24}, },
            {{45, 122, -335}, },
            {{45, 78, -51}, {79, 79, 382}, {80, 110, -51}, {111, 111, 383}, {112, 122, 24}, },
            {{45, 122, -337}, },
            {{45, 83, -95}, {84, 84, 384}, {85, 115, -95}, {116, 116, 385}, {117, 122, 24}, },
            {{45, 122, -339}, },
            {{45, 70, -65}, {71, 71, 386}, {72, 102, -65}, {103, 103, 387}, {104, 122, 24}, },
            {{45, 122, -341}, },
            {{45, 66, -108}, {67, 67, 388}, {68, 98, -108}, {99, 99, 389}, {100, 122, 24}, },
            {{45, 122, -343}, },
            {{45, 83, -95}, {84, 84, 390}, {85, 115, -95}, {116, 116, 391}, {117, 122, 24}, },
            {{45, 122, -345}, },
            {{45, 70, -65}, {71, 71, 392}, {72, 102, -65}, {103, 103, 393}, {104, 122, 24}, },
            {{45, 122, -347}, },
            {{45, 66, -108}, {67, 67, 394}, {68, 98, -108}, {99, 99, 395}, {100, 122, 24}, },
            {{45, 122, -349}, },
            {{45, 58, -9}, {65, 65, 396}, {66, 95, -47}, {97, 97, 397}, {98, 122, 24}, },
            {{45, 122, -351}, },
            {{45, 75, -76}, {76, 76, 398}, {77, 107, -76}, {108, 108, 399}, {109, 122, 24}, },
            {{45, 122, -353}, },
            {{45, 83, -95}, {84, 84, 400}, {85, 115, -95}, {116, 116, 401}, {117, 122, 24}, },
            {{45, 122, -355}, },
            {{45, 81, -18}, {82, 82, 402}, {83, 113, -18}, {114, 114, 403}, {115, 122, 24}, },
            {{45, 122, -357}, },
            {{45, 58, -9}, {65, 65, 404}, {66, 95, -47}, {97, 97, 405}, {98, 122, 24}, },
            {{45, 122, -359}, },
            {{45, 83, -95}, {84, 84, 406}, {85, 115, -95}, {116, 116, 407}, {117, 122, 24}, },
            {{45, 122, -361}, },
            {{45, 70, -65}, {71, 71, 408}, {72, 102, -65}, {103, 103, 409}, {104, 122, 24}, },
            {{45, 122, -363}, },
            {{45, 79, -45}, {80, 80, 410}, {81, 111, -45}, {112, 112, 411}, {113, 122, 24}, },
            {{45, 122, -365}, },
            {{45, 57, -9}, {58, 58, 412}, {65, 122, -9}, },
            {{45, 122, -367}, },
            {{45, 58, -9}, {65, 89, 12}, {90, 90, 413}, {95, 95, 23}, {97, 121, 24}, {122, 122, 414}, },
            {{45, 122, -369}, },
            {{45, 82, -176}, {83, 83, 415}, {84, 114, -176}, {115, 115, 416}, {116, 122, 24}, },
            {{45, 122, -371}, },
            {{9, 9, 417}, {32, 32, 418}, },
            {{45, 66, -108}, {67, 67, 419}, {68, 98, -108}, {99, 99, 420}, {100, 122, 24}, },
            {{45, 122, -374}, },
            {{45, 68, -21}, {69, 69, 421}, {70, 100, -21}, {101, 101, 422}, {102, 122, 24}, },
            {{45, 122, -376}, },
            {{45, 72, -86}, {73, 73, 423}, {74, 104, -86}, {105, 105, 424}, {106, 122, 24}, },
            {{45, 122, -378}, },
            {{45, 75, -76}, {76, 76, 425}, {77, 107, -76}, {108, 108, 426}, {109, 122, 24}, },
            {{45, 122, -380}, },
            {{45, 57, -9}, {58, 58, 427}, {65, 122, -9}, },
            {{45, 122, -382}, },
            {{45, 77, -41}, {78, 78, 428}, {79, 109, -41}, {110, 110, 429}, {111, 122, 24}, },
            {{45, 122, -384}, },
            {{45, 45, 430}, {48, 122, -9}, },
            {{45, 122, -386}, },
            {{45, 68, -21}, {69, 69, 431}, {70, 100, -21}, {101, 101, 432}, {102, 122, 24}, },
            {{45, 122, -388}, },
            {{45, 68, -21}, {69, 69, 433}, {70, 100, -21}, {101, 101, 434}, {102, 122, 24}, },
            {{45, 122, -390}, },
            {{45, 57, -9}, {58, 58, 435}, {65, 122, -9}, },
            {{45, 122, -392}, },
            {{45, 68, -21}, {69, 69, 436}, {70, 100, -21}, {101, 101, 437}, {102, 122, 24}, },
            {{45, 122, -394}, },
            {{45, 68, -21}, {69, 69, 438}, {70, 100, -21}, {101, 101, 439}, {102, 122, 24}, },
            {{45, 122, -396}, },
            {{45, 70, -65}, {71, 71, 440}, {72, 102, -65}, {103, 103, 441}, {104, 122, 24}, },
            {{45, 122, -398}, },
            {{45, 68, -21}, {69, 69, 442}, {70, 100, -21}, {101, 101, 443}, {102, 122, 24}, },
            {{45, 122, -400}, },
            {{45, 72, -86}, {73, 73, 444}, {74, 78, 12}, {79, 79, 445}, {80, 95, -51}, {97, 104, 24}, {105, 105, 446}, {106, 110, 24}, {111, 111, 447}, {112, 122, 24}, },
            {{45, 122, -402}, },
            {{45, 88, -16}, {89, 89, 448}, {90, 120, -16}, {121, 121, 449}, {122, 122, 24}, },
            {{45, 122, -404}, },
            {{45, 83, -95}, {84, 84, 450}, {85, 115, -95}, {116, 116, 451}, {117, 122, 24}, },
            {{45, 122, -406}, },
            {{45, 58, -9}, {65, 65, 452}, {66, 95, -47}, {97, 97, 453}, {98, 122, 24}, },
            {{45, 122, -408}, },
            {{45, 58, -9}, {65, 71, 12}, {72, 72, 454}, {73, 103, -200}, {104, 104, 455}, {105, 122, 24}, },
            {{45, 122, -410}, },
            {{45, 83, -95}, {84, 84, 456}, {85, 115, -95}, {116, 116, 457}, {117, 122, 24}, },
            {{45, 122, -412}, },
            {{32, 32, 458}, },
            {{45, 58, -9}, {65, 65, 459}, {66, 95, -47}, {97, 97, 460}, {98, 122, 24}, },
            {{45, 122, -415}, },
            {{45, 83, -95}, {84, 84, 461}, {85, 115, -95}, {116, 116, 462}, {117, 122, 24}, },
            {{45, 122, -417}, },
            {{9, 32, -373}, },
            {{9, 32, -373}, },
            {{45, 78, -51}, {79, 79, 463}, {80, 110, -51}, {111, 111, 464}, {112, 122, 24}, },
            {{45, 122, -421}, },
            {{45, 67, -37}, {68, 68, 465}, {69, 99, -59}, {100, 100, 466}, {101, 122, 24}, },
            {{45, 122, -423}, },
            {{45, 66, -108}, {67, 67, 467}, {68, 98, -108}, {99, 99, 468}, {100, 122, 24}, },
            {{45, 122, -425}, },
            {{45, 78, -51}, {79, 79, 469}, {80, 110, -51}, {111, 111, 470}, {112, 122, 24}, },
            {{45, 122, -427}, },
            {{32, 32, 471}, },
            {{45, 57, -9}, {58, 58, 472}, {65, 122, -9}, },
            {{45, 122, -430}, },
            {{45, 79, -124}, {80, 80, 473}, {81, 111, -45}, {112, 112, 474}, {113, 122, 24}, },
            {{45, 57, -9}, {58, 58, 475}, {65, 122, -9}, },
            {{45, 122, -433}, },
            {{45, 57, -9}, {58, 58, 476}, {65, 122, -9}, },
            {{45, 122, -435}, },
            {{32, 32, 477}, },
            {{45, 57, -9}, {58, 58, 478}, {65, 122, -9}, },
            {{45, 122, -438}, },
            {{45, 57, -9}, {58, 58, 479}, {65, 122, -9}, },
            {{45, 122, -440}, },
            {{45, 68, -21}, {69, 69, 480}, {70, 100, -21}, {101, 101, 481}, {102, 122, 24}, },
            {{45, 122, -442}, },
            {{45, 57, -9}, {58, 58, 482}, {65, 122, -9}, },
            {{45, 122, -444}, },
            {{45, 78, -51}, {79, 79, 483}, {80, 110, -51}, {111, 111, 484}, {112, 122, 24}, },
            {{45, 81, -18}, {82, 82, 485}, {83, 113, -18}, {114, 114, 486}, {115, 122, 24}, },
            {{45, 122, -446}, },
            {{45, 122, -447}, },
            {{45, 57, -9}, {58, 58, 487}, {65, 122, -9}, },
            {{45, 122, -450}, },
            {{45, 71, -410}, {72, 72, 488}, {73, 103, -200}, {104, 104, 489}, {105, 122, 24}, },
            {{45, 122, -452}, },
            {{45, 67, -37}, {68, 68, 490}, {69, 99, -59}, {100, 100, 491}, {101, 122, 24}, },
            {{45, 122, -454}, },
            {{45, 83, -95}, {84, 84, 492}, {85, 115, -95}, {116, 116, 493}, {117, 122, 24}, },
            {{45, 122, -456}, },
            {{45, 72, -86}, {73, 73, 494}, {74, 104, -86}, {105, 105, 495}, {106, 122, 24}, },
            {{45, 122, -458}, },
            {{9, 9, 496}, {32, 32, 497}, },
            {{45, 83, -95}, {84, 84, 498}, {85, 115, -95}, {116, 116, 499}, {117, 122, 24}, },
            {{45, 122, -461}, },
            {{45, 85, -69}, {86, 86, 500}, {87, 117, -69}, {118, 118, 501}, {119, 122, 24}, },
            {{45, 122, -463}, },
            {{45, 67, -37}, {68, 68, 502}, {69, 99, -59}, {100, 100, 503}, {101, 122, 24}, },
            {{45, 122, -465}, },
            {{45, 68, -21}, {69, 69, 504}, {70, 100, -21}, {101, 101, 505}, {102, 122, 24}, },
            {{45, 122, -467}, },
            {{45, 77, -41}, {78, 78, 506}, {79, 109, -41}, {110, 110, 507}, {111, 122, 24}, },
            {{45, 122, -469}, },
            {{45, 66, -108}, {67, 67, 508}, {68, 98, -108}, {99, 99, 509}, {100, 122, 24}, },
            {{45, 122, -471}, },
            {{9, 9, 510}, {32, 32, 511}, },
            {{32, 32, 512}, },
            {{45, 58, -9}, {65, 65, 513}, {66, 95, -47}, {97, 97, 514}, {98, 122, 24}, },
            {{45, 122, -475}, },
            {{32, 32, 515}, },
            {{32, 32, 516}, },
            {{9, 9, 517}, {32, 32, 518}, },
            {{32, 32, 519}, },
            {{32, 32, 520}, },
            {{45, 57, -9}, {58, 58, 521}, {65, 122, -9}, },
            {{45, 122, -482}, },
            {{32, 32, 522}, },
            {{45, 77, -41}, {78, 78, 523}, {79, 109, -41}, {110, 110, 524}, {111, 122, 24}, },
            {{45, 122, -485}, },
            {{45, 57, -9}, {58, 58, 525}, {65, 122, -9}, },
            {{45, 122, -487}, },
            {{32, 32, 526}, },
            {{45, 57, -9}, {58, 58, 527}, {65, 122, -9}, },
            {{45, 122, -490}, },
            {{45, 67, -37}, {68, 68, 528}, {69, 99, -59}, {100, 100, 529}, {101, 122, 24}, },
            {{45, 122, -492}, },
            {{45, 57, -9}, {58, 58, 530}, {65, 122, -9}, },
            {{45, 122, -494}, },
            {{45, 78, -51}, {79, 79, 531}, {80, 110, -51}, {111, 111, 532}, {112, 122, 24}, },
            {{45, 122, -496}, },
            {{9, 32, -460}, },
            {{9, 32, -460}, },
            {{45, 72, -86}, {73, 73, 533}, {74, 104, -86}, {105, 105, 534}, {106, 122, 24}, },
            {{45, 122, -500}, },
            {{45, 68, -21}, {69, 69, 535}, {70, 100, -21}, {101, 101, 536}, {102, 122, 24}, },
            {{45, 122, -502}, },
            {{45, 68, -21}, {69, 69, 537}, {70, 100, -21}, {101, 101, 538}, {102, 122, 24}, },
            {{45, 122, -504}, },
            {{45, 87, -17}, {88, 88, 539}, {89, 119, -17}, {120, 120, 540}, {121, 122, 24}, },
            {{45, 122, -506}, },
            {{45, 58, -9}, {65, 65, 541}, {66, 95, -47}, {97, 97, 542}, {98, 122, 24}, },
            {{45, 122, -508}, },
            {{45, 58, -9}, {65, 65, 543}, {66, 95, -47}, {97, 97, 544}, {98, 122, 24}, },
            {{45, 122, -510}, },
            {{9, 32, -473}, },
            {{9, 32, -473}, },
            {{9, 9, 545}, {32, 32, 546}, },
            {{45, 66, -108}, {67, 67, 547}, {68, 98, -108}, {99, 99, 548}, {100, 122, 24}, },
            {{45, 122, -515}, },
            {{9, 9, 549}, {32, 32, 550}, },
            {{9, 9, 551}, {32, 32, 552}, },
            {{9, 32, -479}, },
            {{9, 32, -479}, },
            {{9, 9, 553}, {32, 32, 554}, },
            {{9, 9, 555}, {32, 32, 556}, },
            {{32, 32, 557}, },
            {{9, 9, 558}, {32, 32, 559}, },
            {{45, 79, -45}, {80, 80, 560}, {81, 111, -45}, {112, 112, 561}, {113, 122, 24}, },
            {{45, 122, -525}, },
            {{32, 32, 562}, },
            {{9, 9, 563}, {32, 32, 564}, },
            {{32, 32, 565}, },
            {{45, 81, -18}, {82, 82, 566}, {83, 113, -18}, {114, 114, 567}, {115, 122, 24}, },
            {{45, 122, -530}, },
            {{32, 32, 568}, },
            {{45, 77, -41}, {78, 78, 569}, {79, 109, -41}, {110, 110, 570}, {111, 122, 24}, },
            {{45, 122, -533}, },
            {{45, 78, -51}, {79, 79, 571}, {80, 110, -51}, {111, 111, 572}, {112, 122, 24}, },
            {{45, 122, -535}, },
            {{45, 81, -18}, {82, 82, 573}, {83, 113, -18}, {114, 114, 574}, {115, 122, 24}, },
            {{45, 122, -537}, },
            {{45, 57, -9}, {58, 58, 575}, {65, 122, -9}, },
            {{45, 122, -539}, },
            {{45, 68, -21}, {69, 69, 576}, {70, 100, -21}, {101, 101, 577}, {102, 122, 24}, },
            {{45, 122, -541}, },
            {{45, 76, -19}, {77, 77, 578}, {78, 108, -19}, {109, 109, 579}, {110, 122, 24}, },
            {{45, 122, -543}, },
            {{45, 83, -95}, {84, 84, 580}, {85, 115, -95}, {116, 116, 581}, {117, 122, 24}, },
            {{45, 122, -545}, },
            {{9, 32, -514}, },
            {{9, 32, -514}, },
            {{45, 74, -244}, {75, 75, 582}, {76, 106, -244}, {107, 107, 583}, {108, 122, 24}, },
            {{45, 122, -549}, },
            {{9, 32, -517}, },
            {{9, 32, -517}, },
            {{9, 32, -518}, },
            {{9, 32, -518}, },
            {{9, 32, -521}, },
            {{9, 32, -521}, },
            {{9, 32, -522}, },
            {{9, 32, -522}, },
            {{9, 9, 584}, {32, 32, 585}, },
            {{9, 32, -524}, },
            {{9, 32, -524}, },
            {{45, 78, -51}, {79, 79, 586}, {80, 110, -51}, {111, 111, 587}, {112, 122, 24}, },
            {{45, 122, -562}, },
            {{9, 9, 588}, {32, 32, 589}, },
            {{9, 32, -528}, },
            {{9, 32, -528}, },
            {{9, 9, 590}, {32, 32, 591}, },
            {{45, 68, -21}, {69, 69, 592}, {70, 100, -21}, {101, 101, 593}, {102, 122, 24}, },
            {{45, 122, -568}, },
            {{9, 9, 594}, {32, 32, 595}, },
            {{45, 57, -9}, {58, 58, 596}, {65, 122, -9}, },
            {{45, 122, -571}, },
            {{45, 77, -41}, {78, 78, 597}, {79, 109, -41}, {110, 110, 598}, {111, 122, 24}, },
            {{45, 122, -573}, },
            {{45, 82, -176}, {83, 83, 599}, {84, 114, -176}, {115, 115, 600}, {116, 122, 24}, },
            {{45, 122, -575}, },
            {{32, 32, 601}, },
            {{45, 66, -108}, {67, 67, 602}, {68, 98, -108}, {99, 99, 603}, {100, 122, 24}, },
            {{45, 122, -578}, },
            {{45, 68, -21}, {69, 69, 604}, {70, 100, -21}, {101, 101, 605}, {102, 122, 24}, },
            {{45, 122, -580}, },
            {{45, 72, -86}, {73, 73, 606}, {74, 104, -86}, {105, 105, 607}, {106, 122, 24}, },
            {{45, 122, -582}, },
            {{45, 58, -9}, {65, 65, 608}, {66, 95, -47}, {97, 97, 609}, {98, 122, 24}, },
            {{45, 122, -584}, },
            {{9, 32, -559}, },
            {{9, 32, -559}, },
            {{45, 75, -76}, {76, 76, 610}, {77, 107, -76}, {108, 108, 611}, {109, 122, 24}, },
            {{45, 122, -588}, },
            {{9, 32, -564}, },
            {{9, 32, -564}, },
            {{9, 32, -567}, },
            {{9, 32, -567}, },
            {{45, 82, -176}, {83, 83, 612}, {84, 114, -176}, {115, 115, 613}, {116, 122, 24}, },
            {{45, 122, -594}, },
            {{9, 32, -570}, },
            {{9, 32, -570}, },
            {{32, 32, 614}, },
            {{45, 57, -9}, {58, 58, 615}, {65, 122, -9}, },
            {{45, 122, -599}, },
            {{45, 72, -86}, {73, 73, 616}, {74, 104, -86}, {105, 105, 617}, {106, 122, 24}, },
            {{45, 122, -601}, },
            {{9, 9, 618}, {32, 32, 619}, },
            {{45, 84, -15}, {85, 85, 620}, {86, 116, -15}, {117, 117, 621}, {118, 122, 24}, },
            {{45, 122, -604}, },
            {{45, 57, -9}, {58, 58, 622}, {65, 122, -9}, },
            {{45, 122, -606}, },
            {{45, 78, -51}, {79, 79, 623}, {80, 110, -51}, {111, 111, 624}, {112, 122, 24}, },
            {{45, 122, -608}, },
            {{45, 70, -65}, {71, 71, 625}, {72, 102, -65}, {103, 103, 626}, {104, 122, 24}, },
            {{45, 122, -610}, },
            {{45, 72, -86}, {73, 73, 627}, {74, 104, -86}, {105, 105, 628}, {106, 122, 24}, },
            {{45, 122, -612}, },
            {{45, 82, -176}, {83, 83, 629}, {84, 114, -176}, {115, 115, 630}, {116, 122, 24}, },
            {{45, 122, -614}, },
            {{9, 9, 631}, {32, 32, 632}, },
            {{32, 32, 633}, },
            {{45, 78, -51}, {79, 79, 634}, {80, 110, -51}, {111, 111, 635}, {112, 122, 24}, },
            {{45, 122, -618}, },
            {{9, 32, -603}, },
            {{9, 32, -603}, },
            {{45, 83, -95}, {84, 84, 636}, {85, 115, -95}, {116, 116, 637}, {117, 122, 24}, },
            {{45, 122, -622}, },
            {{32, 32, 638}, },
            {{45, 77, -41}, {78, 78, 639}, {79, 109, -41}, {110, 110, 640}, {111, 122, 24}, },
            {{45, 122, -625}, },
            {{45, 68, -21}, {69, 69, 641}, {70, 100, -21}, {101, 101, 642}, {102, 122, 24}, },
            {{45, 122, -627}, },
            {{45, 66, -108}, {67, 67, 643}, {68, 98, -108}, {99, 99, 644}, {100, 122, 24}, },
            {{45, 122, -629}, },
            {{45, 57, -9}, {58, 58, 645}, {65, 122, -9}, },
            {{45, 122, -631}, },
            {{9, 32, -616}, },
            {{9, 32, -616}, },
            {{9, 9, 646}, {32, 32, 647}, },
            {{45, 77, -41}, {78, 78, 648}, {79, 109, -41}, {110, 110, 649}, {111, 122, 24}, },
            {{45, 122, -636}, },
            {{45, 72, -86}, {73, 73, 650}, {74, 104, -86}, {105, 105, 651}, {106, 122, 24}, },
            {{45, 122, -638}, },
            {{9, 9, 652}, {32, 32, 653}, },
            {{45, 57, -9}, {58, 58, 654}, {65, 122, -9}, },
            {{45, 122, -641}, },
            {{45, 57, -9}, {58, 58, 655}, {65, 122, -9}, },
            {{45, 122, -643}, },
            {{45, 88, -16}, {89, 89, 656}, {90, 120, -16}, {121, 121, 657}, {122, 122, 24}, },
            {{45, 122, -645}, },
            {{32, 32, 658}, },
            {{9, 32, -635}, },
            {{9, 32, -635}, },
            {{45, 57, -9}, {58, 58, 659}, {65, 122, -9}, },
            {{45, 122, -650}, },
            {{45, 78, -51}, {79, 79, 660}, {80, 110, -51}, {111, 111, 661}, {112, 122, 24}, },
            {{45, 122, -652}, },
            {{9, 32, -640}, },
            {{9, 32, -640}, },
            {{32, 32, 662}, },
            {{32, 32, 663}, },
            {{45, 57, -9}, {58, 58, 664}, {65, 122, -9}, },
            {{45, 122, -658}, },
            {{9, 9, 665}, {32, 32, 666}, },
            {{32, 32, 667}, },
            {{45, 77, -41}, {78, 78, 668}, {79, 109, -41}, {110, 110, 669}, {111, 122, 24}, },
            {{45, 122, -662}, },
            {{9, 9, 670}, {32, 32, 671}, },
            {{9, 9, 672}, {32, 32, 673}, },
            {{32, 32, 674}, },
            {{9, 32, -660}, },
            {{9, 32, -660}, },
            {{9, 9, 675}, {32, 32, 676}, },
            {{45, 68, -21}, {69, 69, 677}, {70, 100, -21}, {101, 101, 678}, {102, 122, 24}, },
            {{45, 122, -670}, },
            {{9, 32, -664}, },
            {{9, 32, -664}, },
            {{9, 32, -665}, },
            {{9, 32, -665}, },
            {{9, 9, 679}, {32, 32, 680}, },
            {{9, 32, -669}, },
            {{9, 32, -669}, },
            {{45, 77, -41}, {78, 78, 681}, {79, 109, -41}, {110, 110, 682}, {111, 122, 24}, },
            {{45, 122, -679}, },
            {{9, 32, -676}, },
            {{9, 32, -676}, },
            {{45, 85, -69}, {86, 86, 683}, {87, 117, -69}, {118, 118, 684}, {119, 122, 24}, },
            {{45, 122, -683}, },
            {{45, 72, -86}, {73, 73, 685}, {74, 104, -86}, {105, 105, 686}, {106, 122, 24}, },
            {{45, 122, -685}, },
            {{45, 81, -18}, {82, 82, 687}, {83, 113, -18}, {114, 114, 688}, {115, 122, 24}, },
            {{45, 122, -687}, },
            {{45, 78, -51}, {79, 79, 689}, {80, 110, -51}, {111, 111, 690}, {112, 122, 24}, },
            {{45, 122, -689}, },
            {{45, 77, -41}, {78, 78, 691}, {79, 109, -41}, {110, 110, 692}, {111, 122, 24}, },
            {{45, 122, -691}, },
            {{45, 76, -19}, {77, 77, 693}, {78, 108, -19}, {109, 109, 694}, {110, 122, 24}, },
            {{45, 122, -693}, },
            {{45, 68, -21}, {69, 69, 695}, {70, 100, -21}, {101, 101, 696}, {102, 122, 24}, },
            {{45, 122, -695}, },
            {{45, 77, -41}, {78, 78, 697}, {79, 109, -41}, {110, 110, 698}, {111, 122, 24}, },
            {{45, 122, -697}, },
            {{45, 83, -95}, {84, 84, 699}, {85, 115, -95}, {116, 116, 700}, {117, 122, 24}, },
            {{45, 122, -699}, },
            {{45, 57, -9}, {58, 58, 701}, {65, 122, -9}, },
            {{45, 122, -701}, },
            {{32, 32, 702}, },
            {{9, 9, 703}, {32, 32, 704}, },
            {{9, 32, -704}, },
            {{9, 32, -704}, },
        }
        { // BUNDLE_ACTIVATIONPOLICY_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {59, 59, 12}, {60, 60, 5}, {61, 61, 13}, {62, 90, 5}, {91, 91, 14}, {92, 92, 15}, {93, 93, 16}, {94, 100, 5}, {101, 101, 17}, {102, 104, 5}, {105, 105, 18}, {106, 107, 5}, {108, 108, 19}, {109, 127, 5}, },
            {{9, 13, -2}, {32, 32, 20}, {44, 44, 8}, {59, 59, 12}, },
            {{9, 9, 21}, {32, 32, 22}, },
            {{9, 9, 21}, {10, 10, 23}, {32, 32, 22}, },
            {{9, 9, 24}, {10, 13, -2}, {32, 32, 25}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 10}, {58, 58, 26}, {59, 60, -2}, {61, 61, 27}, {62, 127, 5}, },
            {{9, 9, 28}, {32, 32, 29}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 30}, {32, 32, 31}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 28}, {32, 32, 32}, {33, 60, -7}, {61, 61, 33}, {62, 127, 5}, },
            {{9, 9, 34}, {32, 32, 35}, },
            {},
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 36}, {35, 61, -7}, {62, 91, 5}, {92, 92, 37}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 61, -7}, {62, 119, 5}, {120, 120, 38}, {121, 127, 5}, },
            {{9, 61, -7}, {62, 109, 5}, {110, 110, 39}, {111, 127, 5}, },
            {{9, 61, -7}, {62, 96, 5}, {97, 97, 40}, {98, 127, 5}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 41}, {44, 44, 8}, {58, 58, 42}, {59, 59, 12}, {61, 61, 27}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 43}, {62, 127, 5}, },
            {{9, 9, 44}, {32, 32, 45}, },
            {{9, 9, 28}, {32, 32, 46}, {58, 58, 42}, {61, 61, 27}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -29}, },
            {{9, 32, -14}, },
            {{9, 32, -14}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -7}, {62, 98, 5}, {99, 99, 47}, {100, 127, 5}, },
            {{9, 98, -40}, {99, 99, 48}, {100, 127, 5}, },
            {{9, 61, -7}, {62, 121, 5}, {122, 122, 49}, {123, 127, 5}, },
            {{9, 61, -26}, },
            {{61, 61, 50}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 61, -30}, },
            {{9, 61, -7}, {62, 107, 5}, {108, 108, 51}, {109, 127, 5}, },
            {{9, 107, -49}, {108, 108, 52}, {109, 127, 5}, },
            {{9, 61, -7}, {62, 120, 5}, {121, 121, 53}, {122, 127, 5}, },
            {{9, 32, -29}, },
            {{9, 61, -7}, {62, 116, 5}, {117, 117, 54}, {118, 127, 5}, },
            {{9, 116, -53}, {117, 117, 55}, {118, 127, 5}, },
            {{9, 9, 56}, {32, 32, 57}, {33, 127, -7}, },
            {{9, 61, -7}, {62, 99, 5}, {100, 100, 58}, {101, 127, 5}, },
            {{9, 99, -56}, {100, 100, 59}, {101, 127, 5}, },
            {{9, 9, 56}, {32, 32, 60}, {58, 61, -30}, },
            {{9, 127, -55}, },
            {{9, 61, -7}, {62, 100, 5}, {101, 101, 61}, {102, 127, 5}, },
            {{9, 100, -60}, {101, 101, 62}, {102, 127, 5}, },
            {{9, 61, -58}, },
            {{9, 9, 63}, {32, 32, 64}, {33, 57, -7}, {58, 58, 65}, {60, 60, 5}, {61, 61, 66}, {62, 127, 5}, },
            {{9, 9, 67}, {32, 32, 68}, {33, 57, -7}, {58, 58, 69}, {60, 60, 5}, {61, 61, 70}, {62, 127, 5}, },
            {{9, 9, 63}, {32, 32, 71}, {58, 58, 72}, {61, 61, 66}, },
            {{9, 127, -63}, },
            {{9, 60, -7}, {61, 61, 73}, {62, 127, 5}, },
            {{9, 9, 74}, {32, 32, 75}, },
            {{9, 9, 67}, {32, 32, 76}, {58, 58, 77}, {61, 61, 70}, },
            {{9, 127, -64}, },
            {{9, 60, -7}, {61, 61, 78}, {62, 127, 5}, },
            {{9, 9, 79}, {32, 32, 80}, },
            {{9, 61, -65}, },
            {{61, 61, 81}, },
            {{9, 32, -68}, },
            {{9, 32, -68}, },
            {{9, 32, -68}, },
            {{9, 61, -69}, },
            {{61, 61, 82}, },
            {{9, 32, -72}, },
            {{9, 32, -72}, },
            {{9, 32, -72}, },
            {{9, 32, -68}, },
            {{9, 32, -72}, },
        }
        { // BUNDLE_ACTIVATOR_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 64, 5}, {65, 90, 15}, {91, 91, 16}, {92, 92, 17}, {93, 93, 18}, {94, 96, 5}, {97, 101, 19}, {102, 102, 20}, {103, 114, 19}, {115, 115, 21}, {116, 122, 19}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 22}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 23}, {32, 32, 24}, },
            {{9, 9, 23}, {10, 10, 25}, {32, 32, 24}, },
            {{9, 9, 26}, {10, 13, -2}, {32, 32, 27}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 28}, {59, 60, -2}, {61, 61, 29}, {62, 127, 5}, },
            {{9, 9, 30}, {32, 32, 31}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 32}, {32, 32, 33}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 30}, {32, 32, 34}, {33, 60, -7}, {61, 61, 35}, {62, 127, 5}, },
            {{9, 9, 36}, {32, 32, 37}, },
            {{9, 9, 38}, {32, 32, 39}, },
            {{9, 33, -7}, {35, 35, 5}, {36, 36, 40}, {37, 43, 5}, {45, 45, 41}, {46, 47, 5}, {48, 57, 42}, {58, 61, -7}, {62, 64, 5}, {65, 90, 43}, {91, 94, 5}, {95, 95, 44}, {96, 96, 5}, {97, 122, 45}, {123, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 46}, {35, 61, -7}, {62, 91, 5}, {92, 92, 47}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -17}, },
            {{9, 96, -17}, {97, 113, 45}, {114, 114, 48}, {115, 122, 45}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 104, 45}, {105, 105, 49}, {106, 122, 45}, {123, 127, 5}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 50}, {44, 44, 8}, {58, 58, 51}, {59, 59, 13}, {61, 61, 29}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 52}, {62, 127, 5}, },
            {{9, 9, 53}, {32, 32, 54}, },
            {{9, 9, 30}, {32, 32, 55}, {58, 58, 51}, {61, 61, 29}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 9, 56}, {32, 32, 57}, },
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {{9, 32, -16}, },
            {{9, 32, -16}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {},
            {{9, 127, -7}, },
            {{9, 96, -17}, {97, 97, 58}, {98, 122, 45}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 109, 45}, {110, 110, 59}, {111, 122, 45}, {123, 127, 5}, },
            {{9, 61, -28}, },
            {{61, 61, 60}, },
            {{9, 32, -31}, },
            {{9, 32, -31}, },
            {{9, 32, -31}, },
            {{9, 61, -32}, },
            {{9, 32, -37}, },
            {{9, 32, -37}, },
            {{9, 96, -17}, {97, 102, 45}, {103, 103, 61}, {104, 122, 45}, {123, 127, 5}, },
            {{9, 102, -60}, {103, 103, 62}, {104, 127, -60}, },
            {{9, 32, -31}, },
            {{9, 96, -17}, {97, 108, 45}, {109, 109, 63}, {110, 122, 45}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 107, 45}, {108, 108, 64}, {109, 122, 45}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 100, 45}, {101, 101, 65}, {102, 122, 45}, {123, 127, 5}, },
            {{9, 100, -65}, {101, 101, 66}, {102, 127, -65}, },
            {{9, 109, -51}, {110, 110, 67}, {111, 127, -51}, },
            {{9, 96, -17}, {97, 115, 45}, {116, 116, 68}, {117, 122, 45}, {123, 127, 5}, },
            {{9, 115, -68}, {116, 116, 69}, {117, 127, -68}, },
            {{9, 96, -17}, {97, 110, 45}, {111, 111, 70}, {112, 122, 45}, {123, 127, 5}, },
            {{9, 43, -17}, {45, 45, 71}, {46, 127, -17}, },
            {{9, 109, -51}, {110, 110, 72}, {111, 127, -51}, },
            {{9, 96, -17}, {97, 97, 73}, {98, 127, -50}, },
            {{9, 9, 74}, {32, 32, 75}, {33, 57, -17}, {58, 58, 76}, {60, 60, 5}, {61, 61, 77}, {62, 127, -17}, },
            {{9, 115, -68}, {116, 116, 78}, {117, 127, -68}, },
            {{9, 9, 74}, {32, 32, 79}, {58, 58, 80}, {61, 61, 77}, },
            {{9, 33, -74}, {35, 57, -7}, {58, 61, -74}, {62, 127, 5}, },
            {{9, 60, -7}, {61, 61, 81}, {62, 127, 5}, },
            {{9, 9, 82}, {32, 32, 83}, },
            {{9, 115, -68}, {116, 116, 84}, {117, 127, -68}, },
            {{9, 61, -76}, },
            {{61, 61, 85}, },
            {{9, 32, -79}, },
            {{9, 32, -79}, },
            {{9, 32, -79}, },
            {{9, 96, -17}, {97, 97, 86}, {98, 127, -50}, },
            {{9, 32, -79}, },
            {{9, 96, -17}, {97, 98, 45}, {99, 99, 87}, {100, 122, 45}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 103, 45}, {104, 104, 88}, {105, 122, 45}, {123, 127, 5}, },
            {{9, 108, -63}, {109, 109, 89}, {110, 127, -63}, },
            {{9, 100, -65}, {101, 101, 90}, {102, 127, -65}, },
            {{9, 109, -51}, {110, 110, 91}, {111, 127, -51}, },
            {{9, 115, -68}, {116, 116, 92}, {117, 127, -68}, },
            {{9, 9, 30}, {32, 32, 93}, {33, 127, -17}, },
            {{9, 61, -7}, {62, 97, 5}, {98, 98, 94}, {99, 127, 5}, },
            {{9, 61, -7}, {62, 107, 5}, {108, 108, 95}, {109, 127, 5}, },
            {{9, 61, -7}, {62, 96, 5}, {97, 97, 96}, {98, 127, 5}, },
            {{9, 61, -7}, {62, 109, 5}, {110, 110, 97}, {111, 127, 5}, },
            {{9, 61, -7}, {62, 106, 5}, {107, 107, 98}, {108, 127, 5}, },
            {{9, 57, -7}, {58, 58, 99}, {60, 60, 5}, {61, 61, 100}, {62, 101, 5}, {102, 102, 101}, {103, 127, 5}, },
            {{9, 60, -7}, {61, 61, 102}, {62, 127, 5}, },
            {{9, 32, -37}, },
            {{9, 61, -7}, {62, 113, 5}, {114, 114, 103}, {115, 127, 5}, },
            {{9, 32, -37}, },
            {{9, 96, -97}, {97, 97, 104}, {98, 127, 5}, },
            {{9, 61, -7}, {62, 102, 5}, {103, 103, 105}, {104, 127, 5}, },
            {{9, 61, -7}, {62, 108, 5}, {109, 109, 106}, {110, 127, 5}, },
            {{9, 61, -7}, {62, 100, 5}, {101, 101, 107}, {102, 127, 5}, },
            {{9, 109, -98}, {110, 110, 108}, {111, 127, 5}, },
            {{9, 61, -7}, {62, 115, 5}, {116, 116, 109}, {117, 127, 5}, },
            {{9, 43, -7}, {45, 45, 110}, {46, 47, 5}, {48, 127, -7}, },
            {{9, 96, -97}, {97, 97, 111}, {98, 127, 5}, },
            {{9, 115, -110}, {116, 116, 112}, {117, 127, 5}, },
            {{9, 115, -110}, {116, 116, 113}, {117, 127, 5}, },
            {{9, 96, -97}, {97, 97, 114}, {98, 127, 5}, },
            {{9, 61, -7}, {62, 98, 5}, {99, 99, 115}, {100, 127, 5}, },
            {{9, 61, -7}, {62, 103, 5}, {104, 104, 116}, {105, 127, 5}, },
            {{9, 108, -107}, {109, 109, 117}, {110, 127, 5}, },
            {{9, 100, -108}, {101, 101, 118}, {102, 127, 5}, },
            {{9, 109, -98}, {110, 110, 119}, {111, 127, 5}, },
            {{9, 115, -110}, {116, 116, 120}, {117, 127, 5}, },
            {{9, 33, -94}, {35, 127, -7}, },
        }
        { // ALL_STRING_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 46, 5}, {47, 47, 9}, {48, 57, 5}, {58, 58, 10}, {59, 59, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, {44, 44, 17}, {59, 59, 18}, },
            {{9, 9, 19}, {32, 32, 20}, },
            {{9, 9, 19}, {10, 10, 21}, {32, 32, 20}, },
            {{9, 33, -2}, {35, 43, 5}, {44, 44, 8}, {45, 58, 5}, {59, 59, 11}, {60, 127, 5}, },
            {{32, 33, 5}, {35, 127, 5}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{9, 9, 22}, {32, 32, 23}, {33, 33, 5}, {35, 127, 5}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 33, 5}, {35, 60, 5}, {61, 61, 25}, {62, 127, 5}, },
            {{9, 9, 26}, {32, 32, 27}, {33, 127, -10}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 28}, {35, 91, 5}, {92, 92, 29}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 59, -3}, },
            {{9, 9, 22}, {32, 32, 30}, },
            {{9, 9, 26}, {32, 32, 31}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -19}, },
            {{9, 127, -10}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{9, 32, -20}, },
            {{9, 127, -13}, },
            {},
            {{32, 127, -7}, },
            {{9, 32, -19}, },
            {{9, 32, -20}, },
        }
        { // SIMPLE_ENTRY_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {59, 59, 12}, {60, 60, 5}, {61, 61, 13}, {62, 90, 5}, {91, 91, 14}, {92, 92, 15}, {93, 93, 16}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 17}, {44, 44, 8}, {59, 59, 12}, },
            {{9, 9, 18}, {32, 32, 19}, },
            {{9, 9, 18}, {10, 10, 20}, {32, 32, 19}, },
            {{9, 9, 21}, {10, 13, -2}, {32, 32, 22}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 10}, {58, 58, 23}, {59, 60, -2}, {61, 61, 24}, {62, 127, 5}, },
            {{9, 9, 25}, {32, 32, 26}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 27}, {32, 32, 28}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 25}, {32, 32, 29}, {33, 60, -7}, {61, 61, 30}, {62, 127, 5}, },
            {{9, 9, 31}, {32, 32, 32}, },
            {{32, 33, 33}, {35, 43, 33}, {45, 58, 33}, {60, 127, 33}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 34}, {35, 61, -7}, {62, 91, 5}, {92, 92, 35}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 36}, {44, 44, 8}, {58, 58, 37}, {59, 59, 12}, {61, 61, 38}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 39}, {62, 127, 5}, },
            {{9, 9, 40}, {32, 32, 41}, {33, 33, 33}, {35, 127, -15}, },
            {{9, 9, 25}, {32, 32, 42}, {58, 58, 37}, {61, 61, 38}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 127, -26}, },
            {{9, 32, -14}, },
            {{9, 32, -14}, },
            {{32, 127, -15}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -23}, },
            {{61, 61, 43}, },
            {{9, 9, 40}, {32, 32, 44}, },
            {{9, 127, -26}, },
            {{9, 32, -40}, },
            {{9, 127, -26}, },
            {{9, 61, -27}, },
            {{9, 32, -40}, },
            {{9, 32, -40}, },
        }
        { // URL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {59, 59, 12}, {60, 60, 5}, {61, 61, 13}, {62, 90, 5}, {91, 91, 14}, {92, 92, 15}, {93, 93, 16}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 17}, {44, 44, 8}, {59, 59, 12}, },
            {{9, 9, 18}, {32, 32, 19}, },
            {{9, 9, 18}, {10, 10, 20}, {32, 32, 19}, },
            {{9, 9, 21}, {10, 13, -2}, {32, 32, 22}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 10}, {58, 58, 23}, {59, 60, -2}, {61, 61, 24}, {62, 127, 5}, },
            {{9, 9, 25}, {32, 32, 26}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 27}, {32, 32, 28}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 25}, {32, 32, 29}, {33, 60, -7}, {61, 61, 30}, {62, 127, 5}, },
            {{9, 9, 31}, {32, 32, 32}, },
            {},
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 33}, {35, 61, -7}, {62, 91, 5}, {92, 92, 34}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 35}, {44, 44, 8}, {58, 58, 36}, {59, 59, 12}, {61, 61, 24}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 37}, {62, 127, 5}, },
            {{9, 9, 38}, {32, 32, 39}, },
            {{9, 9, 25}, {32, 32, 40}, {58, 58, 36}, {61, 61, 24}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -26}, },
            {{9, 32, -14}, },
            {{9, 32, -14}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -23}, },
            {{61, 61, 41}, },
            {{9, 32, -26}, },
            {{9, 32, -26}, },
            {{9, 32, -26}, },
            {{9, 61, -27}, },
            {{9, 32, -26}, },
        }
        { // BUNDLE_NATIVECODE_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 90, 5}, {91, 91, 15}, {92, 92, 16}, {93, 93, 17}, {94, 107, 5}, {108, 108, 18}, {109, 110, 5}, {111, 111, 19}, {112, 112, 20}, {113, 114, 5}, {115, 115, 21}, {116, 127, 5}, },
            {{9, 13, -2}, {32, 32, 22}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 23}, {32, 32, 24}, },
            {{9, 9, 23}, {10, 10, 25}, {32, 32, 24}, },
            {{9, 9, 26}, {10, 13, -2}, {32, 32, 27}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 28}, {59, 60, -2}, {61, 61, 29}, {62, 127, 5}, },
            {{9, 9, 30}, {32, 32, 31}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 32}, {32, 32, 33}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 30}, {32, 32, 34}, {33, 60, -7}, {61, 61, 35}, {62, 127, 5}, },
            {{9, 9, 36}, {32, 32, 37}, },
            {},
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 38}, {35, 61, -7}, {62, 91, 5}, {92, 92, 39}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 61, -7}, {62, 96, 5}, {97, 97, 40}, {98, 127, 5}, },
            {{9, 61, -7}, {62, 114, 5}, {115, 115, 41}, {116, 127, 5}, },
            {{9, 61, -7}, {62, 113, 5}, {114, 114, 42}, {115, 127, 5}, },
            {{9, 61, -7}, {62, 100, 5}, {101, 101, 43}, {102, 127, 5}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 44}, {44, 44, 8}, {58, 58, 45}, {59, 59, 13}, {61, 61, 29}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 46}, {62, 127, 5}, },
            {{9, 9, 47}, {32, 32, 48}, },
            {{9, 9, 30}, {32, 32, 49}, {58, 58, 45}, {61, 61, 29}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -31}, },
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -7}, {62, 109, 5}, {110, 110, 50}, {111, 127, 5}, },
            {{9, 109, -42}, {110, 110, 51}, {111, 117, 5}, {118, 118, 52}, {119, 127, 5}, },
            {{9, 61, -7}, {62, 110, 5}, {111, 111, 53}, {112, 127, 5}, },
            {{9, 61, -7}, {62, 107, 5}, {108, 108, 54}, {109, 127, 5}, },
            {{9, 61, -28}, },
            {{61, 61, 55}, },
            {{9, 32, -31}, },
            {{9, 32, -31}, },
            {{9, 32, -31}, },
            {{9, 61, -32}, },
            {{9, 61, -7}, {62, 102, 5}, {103, 103, 56}, {104, 127, 5}, },
            {{9, 96, -20}, {97, 97, 57}, {98, 127, 5}, },
            {{9, 100, -23}, {101, 101, 58}, {102, 127, 5}, },
            {{9, 61, -7}, {62, 98, 5}, {99, 99, 59}, {100, 127, 5}, },
            {{9, 100, -23}, {101, 101, 60}, {102, 127, 5}, },
            {{9, 32, -31}, },
            {{9, 61, -7}, {62, 116, 5}, {117, 117, 61}, {118, 127, 5}, },
            {{9, 61, -7}, {62, 108, 5}, {109, 109, 62}, {110, 127, 5}, },
            {{9, 113, -22}, {114, 114, 63}, {115, 127, 5}, },
            {{9, 100, -23}, {101, 101, 64}, {102, 127, 5}, },
            {{9, 98, -55}, {99, 99, 65}, {100, 127, 5}, },
            {{9, 96, -20}, {97, 97, 66}, {98, 127, 5}, },
            {{9, 100, -23}, {101, 101, 67}, {102, 127, 5}, },
            {{9, 114, -21}, {115, 115, 68}, {116, 127, 5}, },
            {{9, 114, -21}, {115, 115, 69}, {116, 127, 5}, },
            {{9, 61, -7}, {62, 115, 5}, {116, 116, 70}, {117, 127, 5}, },
            {{9, 102, -52}, {103, 103, 71}, {104, 127, 5}, },
            {{9, 9, 72}, {32, 32, 73}, {33, 57, -7}, {58, 58, 74}, {60, 60, 5}, {61, 61, 75}, {62, 127, 5}, },
            {{9, 61, -7}, {62, 104, 5}, {105, 105, 76}, {106, 127, 5}, },
            {{9, 114, -21}, {115, 115, 77}, {116, 127, 5}, },
            {{9, 104, -70}, {105, 105, 78}, {106, 127, 5}, },
            {{9, 100, -23}, {101, 101, 79}, {102, 127, 5}, },
            {{9, 9, 72}, {32, 32, 80}, {58, 58, 81}, {61, 61, 75}, },
            {{9, 127, -69}, },
            {{9, 60, -7}, {61, 61, 82}, {62, 127, 5}, },
            {{9, 9, 83}, {32, 32, 84}, },
            {{9, 110, -44}, {111, 111, 85}, {112, 127, 5}, },
            {{9, 110, -44}, {111, 111, 86}, {112, 127, 5}, },
            {{9, 110, -44}, {111, 111, 87}, {112, 127, 5}, },
            {{9, 9, 88}, {32, 32, 89}, {33, 57, -7}, {58, 58, 90}, {60, 60, 5}, {61, 61, 91}, {62, 127, 5}, },
            {{9, 61, -74}, },
            {{61, 61, 92}, },
            {{9, 32, -77}, },
            {{9, 32, -77}, },
            {{9, 32, -77}, },
            {{9, 109, -42}, {110, 110, 93}, {111, 127, 5}, },
            {{9, 113, -22}, {114, 114, 94}, {115, 127, 5}, },
            {{9, 109, -42}, {110, 110, 95}, {111, 127, 5}, },
            {{9, 9, 88}, {32, 32, 96}, {58, 58, 97}, {61, 61, 91}, },
            {{9, 127, -81}, },
            {{9, 60, -7}, {61, 61, 98}, {62, 127, 5}, },
            {{9, 9, 99}, {32, 32, 100}, },
            {{9, 32, -77}, },
            {{9, 9, 101}, {32, 32, 102}, {33, 57, -7}, {58, 58, 103}, {60, 60, 5}, {61, 61, 104}, {62, 127, 5}, },
            {{9, 9, 105}, {32, 32, 106}, {33, 57, -7}, {58, 58, 107}, {60, 60, 5}, {61, 61, 108}, {62, 127, 5}, },
            {{9, 43, -7}, {45, 45, 109}, {46, 47, 5}, {48, 127, -7}, },
            {{9, 61, -90}, },
            {{61, 61, 110}, },
            {{9, 32, -93}, },
            {{9, 32, -93}, },
            {{9, 32, -93}, },
            {{9, 9, 101}, {32, 32, 111}, {58, 58, 112}, {61, 61, 104}, },
            {{9, 127, -95}, },
            {{9, 60, -7}, {61, 61, 113}, {62, 127, 5}, },
            {{9, 9, 114}, {32, 32, 115}, },
            {{9, 9, 105}, {32, 32, 116}, {58, 58, 117}, {61, 61, 108}, },
            {{9, 127, -96}, },
            {{9, 60, -7}, {61, 61, 118}, {62, 127, 5}, },
            {{9, 9, 119}, {32, 32, 120}, },
            {{9, 61, -7}, {62, 101, 5}, {102, 102, 121}, {103, 127, 5}, },
            {{9, 32, -93}, },
            {{9, 61, -103}, },
            {{61, 61, 122}, },
            {{9, 32, -106}, },
            {{9, 32, -106}, },
            {{9, 32, -106}, },
            {{9, 61, -107}, },
            {{61, 61, 123}, },
            {{9, 32, -110}, },
            {{9, 32, -110}, },
            {{9, 32, -110}, },
            {{9, 104, -70}, {105, 105, 124}, {106, 127, 5}, },
            {{9, 32, -106}, },
            {{9, 32, -110}, },
            {{9, 107, -45}, {108, 108, 125}, {109, 127, 5}, },
            {{9, 115, -67}, {116, 116, 126}, {117, 127, 5}, },
            {{9, 100, -23}, {101, 101, 127}, {102, 127, 5}, },
            {{9, 113, -22}, {114, 114, 128}, {115, 127, 5}, },
            {{9, 9, 129}, {32, 32, 130}, {33, 57, -7}, {58, 58, 131}, {60, 60, 5}, {61, 61, 132}, {62, 127, 5}, },
            {{9, 9, 129}, {32, 32, 133}, {58, 58, 134}, {61, 61, 132}, },
            {{9, 127, -130}, },
            {{9, 60, -7}, {61, 61, 135}, {62, 127, 5}, },
            {{9, 9, 136}, {32, 32, 137}, },
            {{9, 61, -131}, },
            {{61, 61, 138}, },
            {{9, 32, -134}, },
            {{9, 32, -134}, },
            {{9, 32, -134}, },
            {{9, 32, -134}, },
        }
        { // VERSION_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 9}, {46, 46, 10}, {47, 47, 11}, {48, 57, 12}, {58, 58, 13}, {59, 59, 14}, {60, 60, 5}, {61, 61, 15}, {62, 64, 5}, {65, 90, 16}, {91, 91, 17}, {92, 92, 18}, {93, 93, 19}, {94, 94, 5}, {95, 95, 20}, {96, 96, 5}, {97, 122, 21}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 22}, {44, 44, 8}, {59, 59, 14}, },
            {{9, 9, 23}, {32, 32, 24}, },
            {{9, 9, 23}, {10, 10, 25}, {32, 32, 24}, },
            {{9, 9, 26}, {10, 13, -2}, {32, 32, 27}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 28}, {58, 58, 29}, {59, 60, -2}, {61, 61, 30}, {62, 127, 5}, },
            {{9, 9, 31}, {32, 32, 32}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 33}, {32, 32, 34}, },
            {{9, 43, -7}, {45, 45, 9}, {46, 47, 5}, {48, 57, 35}, {58, 61, -7}, {62, 90, -2}, {91, 94, 5}, {95, 127, -2}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 47, -11}, {48, 57, 12}, {58, 127, -11}, },
            {{9, 9, 31}, {32, 32, 36}, {33, 60, -7}, {61, 61, 37}, {62, 127, 5}, },
            {{9, 9, 38}, {32, 32, 39}, },
            {},
            {{9, 127, -11}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 40}, {35, 61, -7}, {62, 91, 5}, {92, 92, 41}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -11}, },
            {{9, 127, -11}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 42}, {44, 44, 8}, {58, 58, 43}, {59, 59, 14}, {61, 61, 30}, },
            {{9, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 60, -7}, {61, 61, 44}, {62, 127, 5}, },
            {{9, 9, 45}, {32, 32, 46}, },
            {{9, 9, 31}, {32, 32, 47}, {58, 58, 43}, {61, 61, 30}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -11}, },
            {{9, 127, -7}, },
            {{9, 32, -32}, },
            {{9, 32, -16}, },
            {{9, 32, -16}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -28}, },
            {{61, 61, 48}, },
            {{9, 32, -32}, },
            {{9, 32, -32}, },
            {{9, 32, -32}, },
            {{9, 61, -33}, },
            {{9, 32, -32}, },
        }
        { // BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 9}, {46, 46, 10}, {47, 47, 11}, {48, 57, 12}, {58, 58, 13}, {59, 59, 14}, {60, 60, 5}, {61, 61, 15}, {62, 64, 5}, {65, 90, 16}, {91, 91, 17}, {92, 92, 18}, {93, 93, 19}, {94, 94, 5}, {95, 95, 20}, {96, 96, 5}, {97, 113, 21}, {114, 114, 22}, {115, 117, 21}, {118, 118, 23}, {119, 122, 21}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 24}, {44, 44, 8}, {59, 59, 14}, },
            {{9, 9, 25}, {32, 32, 26}, },
            {{9, 9, 25}, {10, 10, 27}, {32, 32, 26}, },
            {{9, 9, 28}, {10, 13, -2}, {32, 32, 29}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 30}, {58, 58, 31}, {59, 60, -2}, {61, 61, 32}, {62, 127, 5}, },
            {{9, 9, 33}, {32, 32, 34}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 35}, {32, 32, 36}, },
            {{9, 43, -7}, {45, 46, -2}, {47, 47, 37}, {48, 57, 12}, {58, 61, -7}, {62, 90, -2}, {91, 94, 5}, {95, 96, -2}, {97, 122, 21}, {123, 127, 5}, },
            {{9, 127, -11}, },
            {{9, 127, -7}, },
            {{9, 127, -11}, },
            {{9, 9, 33}, {32, 32, 38}, {33, 60, -7}, {61, 61, 39}, {62, 127, 5}, },
            {{9, 9, 40}, {32, 32, 41}, },
            {},
            {{9, 127, -11}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 42}, {35, 61, -7}, {62, 91, 5}, {92, 92, 43}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -11}, },
            {{9, 127, -11}, },
            {{9, 96, -11}, {97, 100, 21}, {101, 101, 44}, {102, 122, 21}, {123, 127, 5}, },
            {{9, 96, -11}, {97, 104, 21}, {105, 105, 45}, {106, 122, 21}, {123, 127, 5}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 46}, {44, 44, 8}, {58, 58, 47}, {59, 59, 14}, {61, 61, 32}, },
            {{9, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 60, -7}, {61, 61, 48}, {62, 127, 5}, },
            {{9, 9, 49}, {32, 32, 50}, },
            {{9, 9, 33}, {32, 32, 51}, {58, 58, 47}, {61, 61, 32}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 32, -34}, },
            {{9, 32, -16}, },
            {{9, 32, -16}, },
            {},
            {{9, 127, -7}, },
            {{9, 96, -11}, {97, 114, 21}, {115, 115, 52}, {116, 122, 21}, {123, 127, 5}, },
            {{9, 114, -46}, {115, 115, 53}, {116, 127, -46}, },
            {{9, 61, -30}, },
            {{61, 61, 54}, },
            {{9, 32, -34}, },
            {{9, 32, -34}, },
            {{9, 32, -34}, },
            {{9, 61, -35}, },
            {{9, 96, -11}, {97, 110, 21}, {111, 111, 55}, {112, 122, 21}, {123, 127, 5}, },
            {{9, 104, -25}, {105, 105, 56}, {106, 127, -25}, },
            {{9, 32, -34}, },
            {{9, 96, -11}, {97, 107, 21}, {108, 108, 57}, {109, 122, 21}, {123, 127, 5}, },
            {{9, 96, -11}, {97, 97, 21}, {98, 98, 58}, {99, 122, 21}, {123, 127, 5}, },
            {{9, 96, -11}, {97, 116, 21}, {117, 117, 59}, {118, 122, 21}, {123, 127, 5}, },
            {{9, 104, -25}, {105, 105, 60}, {106, 127, -25}, },
            {{9, 96, -11}, {97, 115, 21}, {116, 116, 61}, {117, 122, 21}, {123, 127, 5}, },
            {{9, 107, -57}, {108, 108, 62}, {109, 127, -57}, },
            {{9, 104, -25}, {105, 105, 63}, {106, 127, -25}, },
            {{9, 104, -25}, {105, 105, 64}, {106, 127, -25}, },
            {{9, 110, -54}, {111, 111, 65}, {112, 127, -54}, },
            {{9, 115, -61}, {116, 116, 66}, {117, 127, -61}, },
            {{9, 96, -11}, {97, 109, 21}, {110, 110, 67}, {111, 122, 21}, {123, 127, 5}, },
            {{9, 96, -11}, {97, 120, 21}, {121, 121, 68}, {122, 122, 21}, {123, 127, 5}, },
            {{9, 9, 69}, {32, 32, 70}, {33, 57, -11}, {58, 58, 71}, {60, 60, 5}, {61, 61, 72}, {62, 127, -11}, },
            {{9, 9, 73}, {32, 32, 74}, {33, 57, -11}, {58, 58, 75}, {60, 60, 5}, {61, 61, 76}, {62, 127, -11}, },
            {{9, 9, 69}, {32, 32, 77}, {58, 58, 78}, {61, 61, 72}, },
            {{9, 43, -69}, {45, 57, -6}, {58, 61, -69}, {62, 127, 5}, },
            {{9, 60, -7}, {61, 61, 79}, {62, 127, 5}, },
            {{9, 9, 80}, {32, 32, 81}, },
            {{9, 9, 73}, {32, 32, 82}, {58, 58, 83}, {61, 61, 76}, },
            {{9, 43, -70}, {45, 57, -6}, {58, 61, -70}, {62, 127, 5}, },
            {{9, 60, -7}, {61, 61, 84}, {62, 127, 5}, },
            {{9, 9, 85}, {32, 32, 86}, },
            {{9, 61, -71}, },
            {{61, 61, 87}, },
            {{9, 32, -74}, },
            {{9, 32, -74}, },
            {{9, 32, -74}, },
            {{9, 61, -75}, },
            {{61, 61, 88}, },
            {{9, 32, -78}, },
            {{9, 32, -78}, },
            {{9, 32, -78}, },
            {{9, 32, -74}, },
            {{9, 32, -78}, },
        }
        { // BUNDLE_SYMBOLICNAME_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 64, 5}, {65, 90, 15}, {91, 91, 16}, {92, 92, 17}, {93, 93, 18}, {94, 96, 5}, {97, 122, 19}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 20}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 21}, {32, 32, 22}, },
            {{9, 9, 21}, {10, 10, 23}, {32, 32, 22}, },
            {{9, 9, 24}, {10, 13, -2}, {32, 32, 25}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 26}, {59, 60, -2}, {61, 61, 27}, {62, 127, 5}, },
            {{9, 9, 28}, {32, 32, 29}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 30}, {32, 32, 31}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 28}, {32, 32, 32}, {33, 60, -7}, {61, 61, 33}, {62, 127, 5}, },
            {{9, 9, 34}, {32, 32, 35}, },
            {},
            {{9, 33, -7}, {35, 35, 5}, {36, 36, 36}, {37, 43, 5}, {45, 45, 37}, {46, 47, 5}, {48, 57, 38}, {58, 61, -7}, {62, 64, 5}, {65, 90, 39}, {91, 94, 5}, {95, 95, 40}, {96, 96, 5}, {97, 122, 41}, {123, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 42}, {35, 61, -7}, {62, 91, 5}, {92, 92, 43}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -17}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 44}, {44, 44, 8}, {58, 58, 45}, {59, 59, 13}, {61, 61, 27}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 46}, {62, 127, 5}, },
            {{9, 9, 47}, {32, 32, 48}, },
            {{9, 9, 28}, {32, 32, 49}, {58, 58, 45}, {61, 61, 27}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -29}, },
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -26}, },
            {{61, 61, 50}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 61, -30}, },
            {{9, 32, -29}, },
        }
        { // EXPORT_PACKAGE_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 64, 5}, {65, 90, 15}, {91, 91, 16}, {92, 92, 17}, {93, 93, 18}, {94, 96, 5}, {97, 100, 19}, {101, 101, 20}, {102, 104, 19}, {105, 105, 21}, {106, 108, 19}, {109, 109, 22}, {110, 116, 19}, {117, 117, 23}, {118, 122, 19}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 24}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 25}, {32, 32, 26}, },
            {{9, 9, 25}, {10, 10, 27}, {32, 32, 26}, },
            {{9, 9, 28}, {10, 13, -2}, {32, 32, 29}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 30}, {59, 60, -2}, {61, 61, 31}, {62, 127, 5}, },
            {{9, 9, 32}, {32, 32, 33}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 34}, {32, 32, 35}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 32}, {32, 32, 36}, {33, 60, -7}, {61, 61, 37}, {62, 127, 5}, },
            {{9, 9, 38}, {32, 32, 39}, },
            {},
            {{9, 33, -7}, {35, 35, 5}, {36, 36, 40}, {37, 43, 5}, {45, 45, 41}, {46, 47, 5}, {48, 57, 42}, {58, 61, -7}, {62, 64, 5}, {65, 90, 43}, {91, 94, 5}, {95, 95, 44}, {96, 96, 5}, {97, 122, 45}, {123, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 46}, {35, 61, -7}, {62, 91, 5}, {92, 92, 47}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -17}, },
            {{9, 96, -17}, {97, 119, 45}, {120, 120, 48}, {121, 122, 45}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 109, 45}, {110, 110, 49}, {111, 122, 45}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 97, 50}, {98, 122, 45}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 114, 45}, {115, 115, 51}, {116, 122, 45}, {123, 127, 5}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 52}, {44, 44, 8}, {58, 58, 53}, {59, 59, 13}, {61, 61, 31}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 54}, {62, 127, 5}, },
            {{9, 9, 55}, {32, 32, 56}, },
            {{9, 9, 32}, {32, 32, 57}, {58, 58, 53}, {61, 61, 31}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -33}, },
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {},
            {{9, 127, -7}, },
            {{9, 96, -17}, {97, 98, 45}, {99, 99, 58}, {100, 122, 45}, {123, 127, 5}, },
            {{9, 98, -50}, {99, 99, 59}, {100, 127, -50}, },
            {{9, 109, -23}, {110, 110, 60}, {111, 127, -23}, },
            {{9, 96, -17}, {97, 100, 45}, {101, 101, 61}, {102, 122, 45}, {123, 127, 5}, },
            {{9, 61, -30}, },
            {{61, 61, 62}, },
            {{9, 32, -33}, },
            {{9, 32, -33}, },
            {{9, 32, -33}, },
            {{9, 61, -34}, },
            {{9, 96, -17}, {97, 107, 45}, {108, 108, 63}, {109, 122, 45}, {123, 127, 5}, },
            {{9, 107, -60}, {108, 108, 64}, {109, 127, -60}, },
            {{9, 96, -17}, {97, 99, 45}, {100, 100, 65}, {101, 122, 45}, {123, 127, 5}, },
            {{9, 114, -25}, {115, 115, 66}, {116, 127, -25}, },
            {{9, 32, -33}, },
            {{9, 96, -17}, {97, 116, 45}, {117, 117, 67}, {118, 122, 45}, {123, 127, 5}, },
            {{9, 116, -65}, {117, 117, 68}, {118, 127, -65}, },
            {{9, 96, -17}, {97, 97, 69}, {98, 127, -24}, },
            {{9, 9, 70}, {32, 32, 71}, {33, 57, -17}, {58, 58, 72}, {60, 60, 5}, {61, 61, 73}, {62, 127, -17}, },
            {{9, 99, -62}, {100, 100, 74}, {101, 127, -62}, },
            {{9, 99, -62}, {100, 100, 75}, {101, 127, -62}, },
            {{9, 96, -17}, {97, 115, 45}, {116, 116, 76}, {117, 122, 45}, {123, 127, 5}, },
            {{9, 9, 70}, {32, 32, 77}, {58, 58, 78}, {61, 61, 73}, },
            {{9, 33, -68}, {35, 57, -7}, {58, 61, -68}, {62, 127, 5}, },
            {{9, 60, -7}, {61, 61, 79}, {62, 127, 5}, },
            {{9, 9, 80}, {32, 32, 81}, },
            {{9, 100, -53}, {101, 101, 82}, {102, 127, -53}, },
            {{9, 100, -53}, {101, 101, 83}, {102, 127, -53}, },
            {{9, 96, -17}, {97, 110, 45}, {111, 111, 84}, {112, 122, 45}, {123, 127, 5}, },
            {{9, 61, -72}, },
            {{61, 61, 85}, },
            {{9, 32, -75}, },
            {{9, 32, -75}, },
            {{9, 32, -75}, },
            {{9, 9, 86}, {32, 32, 87}, {33, 57, -17}, {58, 58, 88}, {60, 60, 5}, {61, 61, 89}, {62, 127, -17}, },
            {{9, 9, 90}, {32, 32, 91}, {33, 57, -17}, {58, 58, 92}, {60, 60, 5}, {61, 61, 93}, {62, 127, -17}, },
            {{9, 96, -17}, {97, 113, 45}, {114, 114, 94}, {115, 122, 45}, {123, 127, 5}, },
            {{9, 32, -75}, },
            {{9, 9, 86}, {32, 32, 95}, {58, 58, 96}, {61, 61, 89}, },
            {{9, 33, -84}, {35, 57, -7}, {58, 61, -84}, {62, 127, 5}, },
            {{9, 60, -7}, {61, 61, 97}, {62, 127, 5}, },
            {{9, 9, 98}, {32, 32, 99}, },
            {{9, 9, 90}, {32, 32, 100}, {58, 58, 101}, {61, 61, 93}, },
            {{9, 33, -85}, {35, 57, -7}, {58, 61, -85}, {62, 127, 5}, },
            {{9, 60, -7}, {61, 61, 102}, {62, 127, 5}, },
            {{9, 9, 103}, {32, 32, 104}, },
            {{9, 96, -17}, {97, 120, 45}, {121, 121, 105}, {122, 122, 45}, {123, 127, 5}, },
            {{9, 61, -88}, },
            {{61, 61, 106}, },
            {{9, 32, -91}, },
            {{9, 32, -91}, },
            {{9, 32, -91}, },
            {{9, 61, -92}, },
            {{61, 61, 107}, },
            {{9, 32, -95}, },
            {{9, 32, -95}, },
            {{9, 32, -95}, },
            {{9, 9, 108}, {32, 32, 109}, {33, 57, -17}, {58, 58, 110}, {60, 60, 5}, {61, 61, 111}, {62, 127, -17}, },
            {{9, 32, -91}, },
            {{9, 32, -95}, },
            {{9, 9, 108}, {32, 32, 112}, {58, 58, 113}, {61, 61, 111}, },
            {{9, 33, -107}, {35, 57, -7}, {58, 61, -107}, {62, 127, 5}, },
            {{9, 60, -7}, {61, 61, 114}, {62, 127, 5}, },
            {{9, 9, 115}, {32, 32, 116}, },
            {{9, 61, -110}, },
            {{61, 61, 117}, },
            {{9, 32, -113}, },
            {{9, 32, -113}, },
            {{9, 32, -113}, },
            {{9, 32, -113}, },
        }
        { // FRAGMENT_HOST_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 64, 5}, {65, 90, 15}, {91, 91, 16}, {92, 92, 17}, {93, 93, 18}, {94, 96, 5}, {97, 100, 19}, {101, 101, 20}, {102, 122, 19}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 21}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 22}, {32, 32, 23}, },
            {{9, 9, 22}, {10, 10, 24}, {32, 32, 23}, },
            {{9, 9, 25}, {10, 13, -2}, {32, 32, 26}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 27}, {59, 60, -2}, {61, 61, 28}, {62, 127, 5}, },
            {{9, 9, 29}, {32, 32, 30}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 31}, {32, 32, 32}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 29}, {32, 32, 33}, {33, 60, -7}, {61, 61, 34}, {62, 127, 5}, },
            {{9, 9, 35}, {32, 32, 36}, },
            {},
            {{9, 33, -7}, {35, 35, 5}, {36, 36, 37}, {37, 43, 5}, {45, 45, 38}, {46, 47, 5}, {48, 57, 39}, {58, 61, -7}, {62, 64, 5}, {65, 90, 40}, {91, 94, 5}, {95, 95, 41}, {96, 96, 5}, {97, 122, 42}, {123, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 43}, {35, 61, -7}, {62, 91, 5}, {92, 92, 44}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -17}, },
            {{9, 96, -17}, {97, 119, 42}, {120, 120, 45}, {121, 122, 42}, {123, 127, 5}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 46}, {44, 44, 8}, {58, 58, 47}, {59, 59, 13}, {61, 61, 28}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 48}, {62, 127, 5}, },
            {{9, 9, 49}, {32, 32, 50}, },
            {{9, 9, 29}, {32, 32, 51}, {58, 58, 47}, {61, 61, 28}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -30}, },
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {},
            {{9, 127, -7}, },
            {{9, 96, -17}, {97, 115, 42}, {116, 116, 52}, {117, 122, 42}, {123, 127, 5}, },
            {{9, 61, -27}, },
            {{61, 61, 53}, },
            {{9, 32, -30}, },
            {{9, 32, -30}, },
            {{9, 32, -30}, },
            {{9, 61, -31}, },
            {{9, 96, -17}, {97, 100, 42}, {101, 101, 54}, {102, 122, 42}, {123, 127, 5}, },
            {{9, 32, -30}, },
            {{9, 96, -17}, {97, 109, 42}, {110, 110, 55}, {111, 122, 42}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 114, 42}, {115, 115, 56}, {116, 122, 42}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 104, 42}, {105, 105, 57}, {106, 122, 42}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 110, 42}, {111, 111, 58}, {112, 122, 42}, {123, 127, 5}, },
            {{9, 109, -56}, {110, 110, 59}, {111, 127, -56}, },
            {{9, 9, 60}, {32, 32, 61}, {33, 57, -17}, {58, 58, 62}, {60, 60, 5}, {61, 61, 63}, {62, 127, -17}, },
            {{9, 9, 60}, {32, 32, 64}, {58, 58, 65}, {61, 61, 63}, },
            {{9, 33, -61}, {35, 57, -7}, {58, 61, -61}, {62, 127, 5}, },
            {{9, 60, -7}, {61, 61, 66}, {62, 127, 5}, },
            {{9, 9, 67}, {32, 32, 68}, },
            {{9, 61, -62}, },
            {{61, 61, 69}, },
            {{9, 32, -65}, },
            {{9, 32, -65}, },
            {{9, 32, -65}, },
            {{9, 32, -65}, },
        }
        { // IMPORT_PACKAGE_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 64, 5}, {65, 90, 15}, {91, 91, 16}, {92, 92, 17}, {93, 93, 18}, {94, 96, 5}, {97, 113, 19}, {114, 114, 20}, {115, 122, 19}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 21}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 22}, {32, 32, 23}, },
            {{9, 9, 22}, {10, 10, 24}, {32, 32, 23}, },
            {{9, 9, 25}, {10, 13, -2}, {32, 32, 26}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 27}, {59, 60, -2}, {61, 61, 28}, {62, 127, 5}, },
            {{9, 9, 29}, {32, 32, 30}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 31}, {32, 32, 32}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 29}, {32, 32, 33}, {33, 60, -7}, {61, 61, 34}, {62, 127, 5}, },
            {{9, 9, 35}, {32, 32, 36}, },
            {},
            {{9, 33, -7}, {35, 35, 5}, {36, 36, 37}, {37, 43, 5}, {45, 45, 38}, {46, 47, 5}, {48, 57, 39}, {58, 61, -7}, {62, 64, 5}, {65, 90, 40}, {91, 94, 5}, {95, 95, 41}, {96, 96, 5}, {97, 122, 42}, {123, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 43}, {35, 61, -7}, {62, 91, 5}, {92, 92, 44}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -17}, },
            {{9, 96, -17}, {97, 100, 42}, {101, 101, 45}, {102, 122, 42}, {123, 127, 5}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 46}, {44, 44, 8}, {58, 58, 47}, {59, 59, 13}, {61, 61, 28}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 48}, {62, 127, 5}, },
            {{9, 9, 49}, {32, 32, 50}, },
            {{9, 9, 29}, {32, 32, 51}, {58, 58, 47}, {61, 61, 28}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -30}, },
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {},
            {{9, 127, -7}, },
            {{9, 96, -17}, {97, 114, 42}, {115, 115, 52}, {116, 122, 42}, {123, 127, 5}, },
            {{9, 61, -27}, },
            {{61, 61, 53}, },
            {{9, 32, -30}, },
            {{9, 32, -30}, },
            {{9, 32, -30}, },
            {{9, 61, -31}, },
            {{9, 96, -17}, {97, 110, 42}, {111, 111, 54}, {112, 122, 42}, {123, 127, 5}, },
            {{9, 32, -30}, },
            {{9, 96, -17}, {97, 107, 42}, {108, 108, 55}, {109, 122, 42}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 116, 42}, {117, 117, 56}, {118, 122, 42}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 115, 42}, {116, 116, 57}, {117, 122, 42}, {123, 127, 5}, },
            {{9, 96, -17}, {97, 104, 42}, {105, 105, 58}, {106, 122, 42}, {123, 127, 5}, },
            {{9, 110, -54}, {111, 111, 59}, {112, 127, -54}, },
            {{9, 96, -17}, {97, 109, 42}, {110, 110, 60}, {111, 122, 42}, {123, 127, 5}, },
            {{9, 9, 61}, {32, 32, 62}, {33, 57, -17}, {58, 58, 63}, {60, 60, 5}, {61, 61, 64}, {62, 127, -17}, },
            {{9, 9, 61}, {32, 32, 65}, {58, 58, 66}, {61, 61, 64}, },
            {{9, 33, -62}, {35, 57, -7}, {58, 61, -62}, {62, 127, 5}, },
            {{9, 60, -7}, {61, 61, 67}, {62, 127, 5}, },
            {{9, 9, 68}, {32, 32, 69}, },
            {{9, 61, -63}, },
            {{61, 61, 70}, },
            {{9, 32, -66}, },
            {{9, 32, -66}, },
            {{9, 32, -66}, },
            {{9, 32, -66}, },
        }
        { // CLASSPATH_ENTRY_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 90, 5}, {91, 91, 15}, {92, 92, 16}, {93, 93, 17}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 18}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 19}, {32, 32, 20}, },
            {{9, 9, 19}, {10, 10, 21}, {32, 32, 20}, },
            {{9, 33, -2}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 5}, {59, 60, -2}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 43, 5}, {45, 58, -6}, {60, 127, -6}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{9, 9, 22}, {32, 32, 23}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 43, -6}, {45, 60, -7}, {61, 61, 25}, {62, 127, 5}, },
            {{9, 9, 26}, {32, 32, 27}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 28}, {35, 60, -7}, {62, 91, 5}, {92, 92, 29}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{32, 127, -7}, },
            {},
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {},
            {{32, 127, -7}, },
        }
        { // REQUIRE_BUNDLE_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 64, 5}, {65, 90, 15}, {91, 91, 16}, {92, 92, 17}, {93, 93, 18}, {94, 96, 5}, {97, 122, 19}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 20}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 21}, {32, 32, 22}, },
            {{9, 9, 21}, {10, 10, 23}, {32, 32, 22}, },
            {{9, 9, 24}, {10, 13, -2}, {32, 32, 25}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 26}, {59, 60, -2}, {61, 61, 27}, {62, 127, 5}, },
            {{9, 9, 28}, {32, 32, 29}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 30}, {32, 32, 31}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 28}, {32, 32, 32}, {33, 60, -7}, {61, 61, 33}, {62, 127, 5}, },
            {{9, 9, 34}, {32, 32, 35}, },
            {},
            {{9, 33, -7}, {35, 35, 5}, {36, 36, 36}, {37, 43, 5}, {45, 45, 37}, {46, 47, 5}, {48, 57, 38}, {58, 61, -7}, {62, 64, 5}, {65, 90, 39}, {91, 94, 5}, {95, 95, 40}, {96, 96, 5}, {97, 122, 41}, {123, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 42}, {35, 61, -7}, {62, 91, 5}, {92, 92, 43}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -17}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 44}, {44, 44, 8}, {58, 58, 45}, {59, 59, 13}, {61, 61, 27}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 46}, {62, 127, 5}, },
            {{9, 9, 47}, {32, 32, 48}, },
            {{9, 9, 28}, {32, 32, 49}, {58, 58, 45}, {61, 61, 27}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -29}, },
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -26}, },
            {{61, 61, 50}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 61, -30}, },
            {{9, 32, -29}, },
        }
        { // DIGEST_ENTRY_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 46, 5}, {47, 47, 9}, {48, 57, 5}, {58, 58, 10}, {59, 59, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, {44, 44, 17}, {59, 59, 18}, },
            {{9, 9, 19}, {32, 32, 20}, },
            {{9, 9, 19}, {10, 10, 21}, {32, 32, 20}, },
            {{9, 32, -2}, {33, 43, 5}, {44, 44, 8}, {45, 58, 5}, {59, 59, 11}, {60, 127, 5}, },
            {{32, 127, 5}, },
            {{32, 127, 5}, },
            {{32, 127, 5}, },
            {{9, 9, 22}, {32, 32, 23}, {33, 127, 5}, },
            {{32, 127, 5}, },
            {{32, 32, 24}, {33, 60, 5}, {61, 61, 25}, {62, 127, 5}, },
            {{9, 9, 26}, {32, 32, 27}, {33, 127, 5}, },
            {{32, 127, 5}, },
            {{32, 127, 5}, },
            {{32, 33, 5}, {34, 34, 28}, {35, 91, 5}, {92, 92, 29}, {93, 127, 5}, },
            {{32, 127, 5}, },
            {{9, 59, -3}, },
            {{9, 9, 22}, {32, 32, 30}, },
            {{9, 9, 26}, {32, 32, 31}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -19}, },
            {{9, 127, -10}, },
            {{32, 127, 5}, },
            {{32, 127, 5}, },
            {{9, 32, -20}, },
            {{9, 127, -13}, },
            {{32, 127, 5}, },
            {{32, 127, 5}, },
            {{9, 32, -19}, },
            {{9, 32, -20}, },
        }
        { // IMPORT_SERVICE_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 64, 5}, {65, 90, 15}, {91, 91, 16}, {92, 92, 17}, {93, 93, 18}, {94, 96, 5}, {97, 122, 19}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 20}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 21}, {32, 32, 22}, },
            {{9, 9, 21}, {10, 10, 23}, {32, 32, 22}, },
            {{9, 9, 24}, {10, 13, -2}, {32, 32, 25}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 26}, {59, 60, -2}, {61, 61, 27}, {62, 127, 5}, },
            {{9, 9, 28}, {32, 32, 29}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 30}, {32, 32, 31}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 28}, {32, 32, 32}, {33, 60, -7}, {61, 61, 33}, {62, 127, 5}, },
            {{9, 9, 34}, {32, 32, 35}, },
            {},
            {{9, 33, -7}, {35, 35, 5}, {36, 36, 36}, {37, 43, 5}, {45, 45, 37}, {46, 47, 5}, {48, 57, 38}, {58, 61, -7}, {62, 64, 5}, {65, 90, 39}, {91, 94, 5}, {95, 95, 40}, {96, 96, 5}, {97, 122, 41}, {123, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 42}, {35, 61, -7}, {62, 91, 5}, {92, 92, 43}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -17}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 44}, {44, 44, 8}, {58, 58, 45}, {59, 59, 13}, {61, 61, 27}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 46}, {62, 127, 5}, },
            {{9, 9, 47}, {32, 32, 48}, },
            {{9, 9, 28}, {32, 32, 49}, {58, 58, 45}, {61, 61, 27}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -29}, },
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -26}, },
            {{61, 61, 50}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 61, -30}, },
            {{9, 32, -29}, },
        }
        { // EXPORT_SERVICE_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {44, 44, 8}, {45, 45, 5}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 5}, {61, 61, 14}, {62, 64, 5}, {65, 90, 15}, {91, 91, 16}, {92, 92, 17}, {93, 93, 18}, {94, 96, 5}, {97, 122, 19}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 20}, {44, 44, 8}, {59, 59, 13}, },
            {{9, 9, 21}, {32, 32, 22}, },
            {{9, 9, 21}, {10, 10, 23}, {32, 32, 22}, },
            {{9, 9, 24}, {10, 13, -2}, {32, 32, 25}, {33, 33, 5}, {35, 43, 5}, {44, 44, 8}, {45, 47, 5}, {48, 57, 11}, {58, 58, 26}, {59, 60, -2}, {61, 61, 27}, {62, 127, 5}, },
            {{9, 9, 28}, {32, 32, 29}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 30}, {32, 32, 31}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 28}, {32, 32, 32}, {33, 60, -7}, {61, 61, 33}, {62, 127, 5}, },
            {{9, 9, 34}, {32, 32, 35}, },
            {},
            {{9, 33, -7}, {35, 35, 5}, {36, 36, 36}, {37, 43, 5}, {45, 45, 37}, {46, 47, 5}, {48, 57, 38}, {58, 61, -7}, {62, 64, 5}, {65, 90, 39}, {91, 94, 5}, {95, 95, 40}, {96, 96, 5}, {97, 122, 41}, {123, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 42}, {35, 61, -7}, {62, 91, 5}, {92, 92, 43}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -17}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 44}, {44, 44, 8}, {58, 58, 45}, {59, 59, 13}, {61, 61, 27}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 46}, {62, 127, 5}, },
            {{9, 9, 47}, {32, 32, 48}, },
            {{9, 9, 28}, {32, 32, 49}, {58, 58, 45}, {61, 61, 27}, },
            {{9, 127, -7}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {{9, 127, -7}, },
            {{9, 32, -29}, },
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {{9, 127, -17}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -26}, },
            {{61, 61, 50}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 32, -29}, },
            {{9, 61, -30}, },
            {{9, 32, -29}, },
        }
        { // DIRECTIVE_PROCESSOR
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {54, 54, 9}, {58, 58, 10}, {61, 61, 11}, {65, 65, 12}, {73, 73, 13}, {77, 77, 14}, {80, 80, 15}, {83, 83, 16}, {86, 86, 17}, {91, 91, 18}, {92, 92, 19}, {93, 93, 20}, {120, 120, 21}, },
            {{9, 32, -2}, },
            {{9, 9, 22}, {32, 32, 23}, },
            {{9, 9, 22}, {10, 10, 24}, {32, 32, 23}, },
            {{9, 32, -2}, },
            {{54, 54, 25}, {65, 65, 26}, {73, 73, 27}, {77, 77, 28}, {80, 80, 29}, {83, 83, 30}, {86, 86, 31}, {120, 120, 32}, },
            {},
            {},
            {},
            {{56, 56, 33}, },
            {{32, 32, 34}, {61, 61, 35}, },
            {},
            {{82, 82, 36}, {108, 108, 37}, },
            {{103, 103, 38}, },
            {{105, 105, 39}, },
            {{65, 65, 40}, {111, 111, 41}, },
            {{51, 51, 42}, {104, 104, 43}, {112, 112, 44}, },
            {{56, 56, 45}, },
            {},
            {{34, 34, 46}, {92, 92, 47}, },
            {},
            {{56, 56, 48}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{56, 56, 49}, },
            {{82, 82, 50}, {108, 108, 51}, },
            {{103, 103, 52}, },
            {{105, 105, 53}, },
            {{65, 65, 54}, {111, 111, 55}, },
            {{51, 51, 56}, {104, 104, 57}, {112, 112, 58}, },
            {{56, 56, 59}, },
            {{56, 56, 60}, },
            {{107, 107, 61}, },
            {},
            {},
            {{77, 77, 62}, },
            {{112, 112, 63}, },
            {{110, 110, 64}, },
            {{112, 112, 65}, },
            {{114, 114, 66}, },
            {{119, 119, 67}, },
            {{57, 57, 68}, },
            {{52, 52, 69}, },
            {{97, 97, 70}, },
            {{53, 53, 71}, },
            {},
            {},
            {{54, 54, 72}, },
            {{107, 107, 73}, },
            {{77, 77, 74}, },
            {{112, 112, 75}, },
            {{110, 110, 76}, },
            {{112, 112, 77}, },
            {{114, 114, 78}, },
            {{119, 119, 79}, },
            {{57, 57, 80}, },
            {{52, 52, 81}, },
            {{97, 97, 82}, },
            {{53, 53, 83}, },
            {{54, 54, 84}, },
            {{9, 9, 85}, {32, 32, 86}, },
            {{9, 9, 87}, {32, 32, 88}, },
            {{104, 104, 89}, },
            {{105, 105, 90}, },
            {{115, 115, 91}, },
            {{105, 105, 92}, },
            {{101, 101, 93}, },
            {{48, 48, 94}, },
            {{9, 9, 95}, {32, 32, 96}, },
            {{114, 114, 97}, },
            {{48, 48, 98}, },
            {{9, 9, 99}, {32, 32, 100}, {45, 45, 101}, },
            {{34, 34, 102}, },
            {{34, 34, 103}, },
            {{104, 104, 104}, },
            {{105, 105, 105}, },
            {{115, 115, 106}, },
            {{105, 105, 107}, },
            {{101, 101, 108}, },
            {{48, 48, 109}, },
            {{34, 34, 110}, },
            {{114, 114, 111}, },
            {{48, 48, 112}, },
            {{34, 34, 113}, {45, 45, 114}, },
            {{9, 32, -63}, },
            {{9, 32, -63}, },
            {{9, 32, -64}, },
            {{9, 32, -64}, },
            {{97, 97, 115}, },
            {{116, 116, 116}, },
            {{9, 9, 117}, {32, 32, 118}, },
            {{115, 115, 119}, },
            {{114, 114, 120}, },
            {{9, 9, 121}, {32, 32, 122}, {120, 120, 123}, },
            {{9, 32, -71}, },
            {{9, 32, -71}, },
            {{99, 99, 124}, },
            {{69, 69, 125}, },
            {{9, 32, -74}, },
            {{9, 32, -74}, },
            {{54, 54, 126}, },
            {{9, 32, -63}, },
            {{9, 32, -64}, },
            {{97, 97, 127}, },
            {{116, 116, 128}, },
            {{34, 34, 129}, },
            {{115, 115, 130}, },
            {{114, 114, 131}, },
            {{34, 34, 132}, {120, 120, 133}, },
            {{9, 32, -71}, },
            {{99, 99, 134}, },
            {{69, 69, 135}, },
            {{9, 32, -74}, },
            {{54, 54, 136}, },
            {{9, 9, 137}, {32, 32, 138}, },
            {{101, 101, 139}, },
            {{9, 32, -93}, },
            {{9, 32, -93}, },
            {{99, 99, 140}, },
            {{80, 80, 141}, },
            {{9, 32, -96}, },
            {{9, 32, -96}, },
            {{9, 9, 142}, {32, 32, 143}, },
            {{9, 9, 144}, {32, 32, 145}, },
            {{9, 9, 146}, {32, 32, 147}, },
            {{52, 52, 148}, },
            {{34, 34, 149}, },
            {{101, 101, 150}, },
            {{9, 32, -93}, },
            {{99, 99, 151}, },
            {{80, 80, 152}, },
            {{9, 32, -96}, },
            {{34, 34, 153}, },
            {{34, 34, 154}, },
            {{34, 34, 155}, },
            {{52, 52, 156}, },
            {{9, 32, -117}, },
            {{9, 32, -117}, },
            {{9, 9, 157}, {32, 32, 158}, },
            {{9, 9, 159}, {32, 32, 160}, },
            {{67, 67, 161}, },
            {{9, 32, -125}, },
            {{9, 32, -125}, },
            {{9, 32, -126}, },
            {{9, 32, -126}, },
            {{9, 32, -127}, },
            {{9, 32, -127}, },
            {{9, 9, 162}, {32, 32, 163}, },
            {{9, 32, -117}, },
            {{34, 34, 164}, },
            {{34, 34, 165}, },
            {{67, 67, 166}, },
            {{9, 32, -125}, },
            {{9, 32, -126}, },
            {{9, 32, -127}, },
            {{34, 34, 167}, },
            {{9, 32, -141}, },
            {{9, 32, -141}, },
            {{9, 32, -142}, },
            {{9, 32, -142}, },
            {{9, 9, 168}, {32, 32, 169}, },
            {{9, 32, -150}, },
            {{9, 32, -150}, },
            {{9, 32, -141}, },
            {{9, 32, -142}, },
            {{34, 34, 170}, },
            {{9, 32, -150}, },
            {{9, 32, -163}, },
            {{9, 32, -163}, },
            {{9, 32, -163}, },
        }
        { // DIRECTIVE_OSVERSION
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {47, 47, 7}, {58, 58, 8}, {61, 61, 9}, {91, 91, 10}, {92, 92, 11}, {93, 93, 12}, },
            {{9, 32, -2}, },
            {{9, 9, 13}, {32, 32, 14}, },
            {{9, 9, 13}, {10, 10, 15}, {32, 32, 14}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {{32, 32, 16}, {61, 61, 17}, },
            {},
            {},
            {{34, 34, 18}, {92, 92, 19}, },
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
        }
        { // DIRECTIVE_OSNAME
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {58, 58, 9}, {61, 61, 10}, {65, 65, 11}, {68, 68, 12}, {69, 69, 13}, {70, 70, 14}, {72, 72, 15}, {73, 73, 16}, {76, 76, 17}, {77, 77, 18}, {78, 78, 19}, {79, 79, 20}, {81, 81, 21}, {83, 83, 22}, {86, 86, 23}, {87, 87, 24}, {91, 91, 25}, {92, 92, 26}, {93, 93, 27}, {97, 97, 28}, {100, 100, 29}, {101, 101, 30}, {102, 102, 31}, {104, 104, 32}, {105, 105, 33}, {108, 108, 34}, {109, 109, 35}, {110, 110, 36}, {111, 111, 37}, {113, 113, 38}, {115, 115, 39}, {118, 118, 40}, {119, 119, 41}, },
            {{9, 32, -2}, },
            {{9, 9, 42}, {32, 32, 43}, },
            {{9, 9, 42}, {10, 10, 44}, {32, 32, 43}, },
            {{9, 32, -2}, },
            {{65, 65, 45}, {68, 68, 46}, {69, 69, 47}, {70, 70, 48}, {72, 72, 49}, {73, 73, 50}, {76, 76, 51}, {77, 77, 52}, {78, 78, 53}, {79, 79, 54}, {81, 81, 55}, {83, 83, 56}, {86, 86, 57}, {87, 87, 58}, {97, 97, 59}, {100, 100, 60}, {101, 101, 61}, {102, 102, 62}, {104, 104, 63}, {105, 105, 64}, {108, 108, 65}, {109, 109, 66}, {110, 110, 67}, {111, 111, 68}, {113, 113, 69}, {115, 115, 70}, {118, 118, 71}, {119, 119, 72}, },
            {},
            {},
            {},
            {{32, 32, 73}, {61, 61, 74}, },
            {},
            {{73, 73, 75}, },
            {{105, 105, 76}, },
            {{109, 109, 77}, {112, 112, 78}, },
            {{114, 114, 79}, },
            {{80, 80, 80}, },
            {{82, 82, 81}, },
            {{105, 105, 82}, },
            {{97, 97, 83}, },
            {{101, 101, 84}, },
            {{83, 83, 85}, {112, 112, 86}, },
            {{78, 78, 87}, },
            {{111, 111, 88}, {117, 117, 89}, },
            {{120, 120, 90}, },
            {{105, 105, 91}, },
            {},
            {{34, 34, 92}, {92, 92, 93}, },
            {},
            {{105, 105, 94}, },
            {{105, 105, 95}, },
            {{109, 109, 96}, {112, 112, 97}, },
            {{114, 114, 98}, },
            {{112, 112, 99}, },
            {{114, 114, 100}, },
            {{105, 105, 101}, },
            {{97, 97, 102}, },
            {{101, 101, 103}, },
            {{112, 112, 104}, {115, 115, 105}, },
            {{110, 110, 106}, },
            {{111, 111, 107}, {117, 117, 108}, },
            {{120, 120, 109}, },
            {{105, 105, 110}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{73, 73, 111}, },
            {{105, 105, 112}, },
            {{109, 109, 113}, {112, 112, 114}, },
            {{114, 114, 115}, },
            {{80, 80, 116}, },
            {{82, 82, 117}, },
            {{105, 105, 118}, },
            {{97, 97, 119}, },
            {{101, 101, 120}, },
            {{83, 83, 121}, {112, 112, 122}, },
            {{78, 78, 123}, },
            {{111, 111, 124}, {117, 117, 125}, },
            {{120, 120, 126}, },
            {{105, 105, 127}, },
            {{105, 105, 128}, },
            {{105, 105, 129}, },
            {{109, 109, 130}, {112, 112, 131}, },
            {{114, 114, 132}, },
            {{112, 112, 133}, },
            {{114, 114, 134}, },
            {{105, 105, 135}, },
            {{97, 97, 136}, },
            {{101, 101, 137}, },
            {{112, 112, 138}, {115, 115, 139}, },
            {{110, 110, 140}, },
            {{111, 111, 141}, {117, 117, 142}, },
            {{120, 120, 143}, },
            {{105, 105, 144}, },
            {},
            {},
            {{88, 88, 145}, },
            {{103, 103, 146}, },
            {{98, 98, 147}, },
            {{111, 111, 148}, },
            {{101, 101, 149}, },
            {{85, 85, 150}, },
            {{73, 73, 151}, },
            {{110, 110, 152}, },
            {{99, 99, 153}, },
            {{116, 116, 154}, },
            {{50, 50, 155}, },
            {{101, 101, 156}, },
            {{88, 88, 157}, },
            {{108, 108, 158}, },
            {{110, 110, 159}, },
            {{87, 87, 160}, },
            {{110, 110, 161}, },
            {},
            {},
            {{120, 120, 162}, },
            {{103, 103, 163}, },
            {{98, 98, 164}, },
            {{111, 111, 165}, },
            {{101, 101, 166}, },
            {{117, 117, 167}, },
            {{105, 105, 168}, },
            {{110, 110, 169}, },
            {{99, 99, 170}, },
            {{116, 116, 171}, },
            {{101, 101, 172}, },
            {{50, 50, 173}, },
            {{120, 120, 174}, },
            {{108, 108, 175}, },
            {{110, 110, 176}, },
            {{119, 119, 177}, },
            {{110, 110, 178}, },
            {{88, 88, 179}, },
            {{103, 103, 180}, },
            {{98, 98, 181}, },
            {{111, 111, 182}, },
            {{101, 101, 183}, },
            {{85, 85, 184}, },
            {{73, 73, 185}, },
            {{110, 110, 186}, },
            {{99, 99, 187}, },
            {{116, 116, 188}, },
            {{50, 50, 189}, },
            {{101, 101, 190}, },
            {{88, 88, 191}, },
            {{108, 108, 192}, },
            {{110, 110, 193}, },
            {{87, 87, 194}, },
            {{110, 110, 195}, },
            {{120, 120, 196}, },
            {{103, 103, 197}, },
            {{98, 98, 198}, },
            {{111, 111, 199}, },
            {{101, 101, 200}, },
            {{117, 117, 201}, },
            {{105, 105, 202}, },
            {{110, 110, 203}, },
            {{99, 99, 204}, },
            {{116, 116, 205}, },
            {{101, 101, 206}, },
            {{50, 50, 207}, },
            {{120, 120, 208}, },
            {{108, 108, 209}, },
            {{110, 110, 210}, },
            {{119, 119, 211}, },
            {{110, 110, 212}, },
            {{9, 9, 213}, {32, 32, 214}, },
            {{105, 105, 215}, },
            {{111, 111, 216}, },
            {{99, 99, 217}, },
            {{101, 101, 218}, },
            {{88, 88, 219}, },
            {{88, 88, 220}, },
            {{117, 117, 221}, },
            {{79, 79, 222}, },
            {{66, 66, 223}, {119, 119, 224}, },
            {{9, 9, 225}, {32, 32, 226}, },
            {{110, 110, 227}, },
            {{9, 9, 228}, {32, 32, 229}, },
            {{97, 97, 230}, },
            {{79, 79, 231}, },
            {{111, 111, 232}, },
            {{100, 100, 233}, },
            {{9, 32, -147}, },
            {{105, 105, 234}, },
            {{111, 111, 235}, },
            {{99, 99, 236}, },
            {{101, 101, 237}, },
            {{120, 120, 238}, },
            {{120, 120, 239}, },
            {{117, 117, 240}, },
            {{111, 111, 241}, },
            {{98, 98, 242}, {119, 119, 243}, },
            {{110, 110, 244}, },
            {{9, 32, -157}, },
            {{9, 32, -159}, },
            {{97, 97, 245}, },
            {{111, 111, 246}, },
            {{111, 111, 247}, },
            {{100, 100, 248}, },
            {{34, 34, 249}, },
            {{105, 105, 250}, },
            {{111, 111, 251}, },
            {{99, 99, 252}, },
            {{101, 101, 253}, },
            {{88, 88, 254}, },
            {{88, 88, 255}, },
            {{117, 117, 256}, },
            {{79, 79, 257}, },
            {{66, 66, 258}, {119, 119, 259}, },
            {{34, 34, 260}, },
            {{110, 110, 261}, },
            {{34, 34, 262}, },
            {{97, 97, 263}, },
            {{79, 79, 264}, },
            {{111, 111, 265}, },
            {{100, 100, 266}, },
            {{34, 34, 249}, },
            {{105, 105, 267}, },
            {{111, 111, 268}, },
            {{99, 99, 269}, },
            {{101, 101, 270}, },
            {{120, 120, 271}, },
            {{120, 120, 272}, },
            {{117, 117, 273}, },
            {{111, 111, 274}, },
            {{98, 98, 275}, {119, 119, 276}, },
            {{110, 110, 277}, },
            {{34, 34, 260}, },
            {{34, 34, 262}, },
            {{97, 97, 278}, },
            {{111, 111, 279}, },
            {{111, 111, 280}, },
            {{100, 100, 281}, },
            {{9, 32, -147}, },
            {{9, 32, -147}, },
            {{116, 116, 282}, },
            {{115, 115, 283}, },
            {{51, 51, 284}, },
            {{66, 66, 285}, },
            {{9, 9, 286}, {32, 32, 287}, },
            {{9, 9, 288}, {32, 32, 289}, },
            {{120, 120, 290}, },
            {{83, 83, 291}, },
            {{83, 83, 292}, },
            {{97, 97, 293}, },
            {{9, 32, -157}, },
            {{9, 32, -157}, },
            {{66, 66, 294}, },
            {{9, 32, -159}, },
            {{9, 32, -159}, },
            {{114, 114, 295}, },
            {{83, 83, 296}, },
            {{114, 114, 297}, },
            {{111, 111, 298}, },
            {{116, 116, 299}, },
            {{115, 115, 300}, },
            {{51, 51, 301}, },
            {{98, 98, 302}, },
            {{9, 32, -221}, },
            {{9, 32, -222}, },
            {{120, 120, 303}, },
            {{115, 115, 304}, },
            {{115, 115, 305}, },
            {{97, 97, 306}, },
            {{98, 98, 307}, },
            {{114, 114, 308}, },
            {{115, 115, 309}, },
            {{114, 114, 310}, },
            {{111, 111, 311}, },
            {{9, 32, -147}, },
            {{116, 116, 312}, },
            {{115, 115, 313}, },
            {{51, 51, 314}, },
            {{66, 66, 315}, },
            {{34, 34, 316}, },
            {{34, 34, 317}, },
            {{120, 120, 318}, },
            {{83, 83, 319}, },
            {{83, 83, 320}, },
            {{97, 97, 321}, },
            {{9, 32, -157}, },
            {{66, 66, 322}, },
            {{9, 32, -159}, },
            {{114, 114, 323}, },
            {{83, 83, 324}, },
            {{114, 114, 325}, },
            {{111, 111, 326}, },
            {{116, 116, 327}, },
            {{115, 115, 328}, },
            {{51, 51, 329}, },
            {{98, 98, 330}, },
            {{34, 34, 316}, },
            {{34, 34, 317}, },
            {{120, 120, 331}, },
            {{115, 115, 332}, },
            {{115, 115, 333}, },
            {{97, 97, 334}, },
            {{98, 98, 335}, },
            {{114, 114, 336}, },
            {{115, 115, 337}, },
            {{114, 114, 338}, },
            {{111, 111, 339}, },
            {{97, 97, 340}, },
            {{9, 9, 341}, {32, 32, 342}, },
            {{50, 50, 343}, },
            {{83, 83, 344}, },
            {{9, 32, -221}, },
            {{9, 32, -221}, },
            {{9, 32, -222}, },
            {{9, 32, -222}, },
            {{9, 9, 345}, {32, 32, 346}, },
            {{9, 9, 347}, {32, 32, 348}, },
            {{68, 68, 349}, },
            {{114, 114, 350}, },
            {{83, 83, 351}, },
            {{105, 105, 352}, },
            {{9, 9, 353}, {32, 32, 354}, },
            {{107, 107, 355}, },
            {{119, 119, 356}, },
            {{105, 105, 357}, },
            {{9, 32, -285}, },
            {{50, 50, 358}, },
            {{115, 115, 359}, },
            {{9, 32, -292}, },
            {{9, 32, -293}, },
            {{100, 100, 360}, },
            {{114, 114, 361}, },
            {{115, 115, 362}, },
            {{105, 105, 363}, },
            {{9, 32, -298}, },
            {{107, 107, 364}, },
            {{119, 119, 365}, },
            {{97, 97, 366}, },
            {{34, 34, 367}, },
            {{50, 50, 368}, },
            {{83, 83, 369}, },
            {{9, 32, -221}, },
            {{9, 32, -222}, },
            {{34, 34, 370}, },
            {{34, 34, 371}, },
            {{68, 68, 372}, },
            {{114, 114, 373}, },
            {{83, 83, 374}, },
            {{105, 105, 375}, },
            {{34, 34, 376}, },
            {{107, 107, 377}, },
            {{119, 119, 378}, },
            {{105, 105, 379}, },
            {{34, 34, 367}, },
            {{50, 50, 380}, },
            {{115, 115, 381}, },
            {{34, 34, 370}, },
            {{34, 34, 371}, },
            {{100, 100, 382}, },
            {{114, 114, 383}, },
            {{115, 115, 384}, },
            {{105, 105, 385}, },
            {{34, 34, 376}, },
            {{107, 107, 386}, },
            {{119, 119, 387}, },
            {{108, 108, 388}, },
            {{9, 32, -285}, },
            {{9, 32, -285}, },
            {{9, 9, 389}, {32, 32, 390}, },
            {{68, 68, 391}, },
            {{9, 32, -292}, },
            {{9, 32, -292}, },
            {{9, 32, -293}, },
            {{9, 32, -293}, },
            {{9, 9, 392}, {32, 32, 393}, },
            {{101, 101, 394}, },
            {{68, 68, 395}, },
            {{115, 115, 396}, },
            {{9, 32, -298}, },
            {{9, 32, -298}, },
            {{115, 115, 397}, },
            {{115, 115, 398}, },
            {{97, 97, 399}, },
            {{9, 32, -345}, },
            {{100, 100, 400}, },
            {{9, 32, -351}, },
            {{101, 101, 401}, },
            {{100, 100, 402}, },
            {{115, 115, 403}, },
            {{115, 115, 404}, },
            {{115, 115, 405}, },
            {{108, 108, 406}, },
            {{9, 32, -285}, },
            {{34, 34, 407}, },
            {{68, 68, 408}, },
            {{9, 32, -292}, },
            {{9, 32, -293}, },
            {{34, 34, 409}, },
            {{101, 101, 410}, },
            {{68, 68, 411}, },
            {{115, 115, 412}, },
            {{9, 32, -298}, },
            {{115, 115, 413}, },
            {{115, 115, 414}, },
            {{97, 97, 415}, },
            {{34, 34, 407}, },
            {{100, 100, 416}, },
            {{34, 34, 409}, },
            {{101, 101, 417}, },
            {{100, 100, 418}, },
            {{115, 115, 419}, },
            {{115, 115, 420}, },
            {{115, 115, 421}, },
            {{85, 85, 422}, },
            {{9, 32, -345}, },
            {{9, 32, -345}, },
            {{9, 9, 423}, {32, 32, 424}, },
            {{9, 32, -351}, },
            {{9, 32, -351}, },
            {{9, 9, 425}, {32, 32, 426}, },
            {{9, 9, 427}, {32, 32, 428}, },
            {{9, 9, 429}, {32, 32, 430}, },
            {{9, 9, 431}, {32, 32, 432}, },
            {{32, 32, 433}, {50, 50, 434}, {57, 57, 435}, {67, 67, 436}, {78, 78, 437}, {86, 86, 438}, {88, 88, 439}, },
            {{108, 108, 440}, },
            {{9, 32, -393}, },
            {{9, 32, -396}, },
            {{9, 32, -397}, },
            {{9, 32, -398}, },
            {{9, 32, -399}, },
            {{50, 50, 441}, {57, 57, 442}, {99, 99, 443}, {110, 110, 444}, {118, 118, 445}, {120, 120, 446}, },
            {{85, 85, 447}, },
            {{9, 32, -345}, },
            {{34, 34, 448}, },
            {{9, 32, -351}, },
            {{34, 34, 449}, },
            {{34, 34, 450}, },
            {{34, 34, 451}, },
            {{34, 34, 452}, },
            {{32, 32, 453}, {50, 50, 454}, {57, 57, 455}, {67, 67, 456}, {78, 78, 457}, {86, 86, 458}, {88, 88, 459}, },
            {{108, 108, 460}, },
            {{34, 34, 448}, },
            {{34, 34, 449}, },
            {{34, 34, 450}, },
            {{34, 34, 451}, },
            {{34, 34, 452}, },
            {{50, 50, 461}, {57, 57, 462}, {99, 99, 463}, {110, 110, 464}, {118, 118, 465}, {120, 120, 466}, },
            {{110, 110, 467}, },
            {{9, 32, -393}, },
            {{9, 32, -393}, },
            {{9, 32, -396}, },
            {{9, 32, -396}, },
            {{9, 32, -397}, },
            {{9, 32, -397}, },
            {{9, 32, -398}, },
            {{9, 32, -398}, },
            {{9, 32, -399}, },
            {{9, 32, -399}, },
            {{50, 50, 468}, {57, 57, 469}, {67, 67, 470}, {78, 78, 471}, {86, 86, 472}, {88, 88, 473}, },
            {{48, 48, 474}, },
            {{53, 53, 475}, {56, 56, 476}, },
            {{69, 69, 477}, },
            {{84, 84, 478}, },
            {{105, 105, 479}, },
            {{80, 80, 480}, },
            {{117, 117, 481}, },
            {{48, 48, 482}, },
            {{53, 53, 483}, {56, 56, 484}, },
            {{101, 101, 485}, },
            {{116, 116, 486}, },
            {{105, 105, 487}, },
            {{112, 112, 488}, },
            {{110, 110, 489}, },
            {{9, 32, -393}, },
            {{9, 32, -396}, },
            {{9, 32, -397}, },
            {{9, 32, -398}, },
            {{9, 32, -399}, },
            {{50, 50, 490}, {57, 57, 491}, {67, 67, 492}, {78, 78, 493}, {86, 86, 494}, {88, 88, 495}, },
            {{48, 48, 496}, },
            {{53, 53, 497}, {56, 56, 498}, },
            {{69, 69, 499}, },
            {{84, 84, 500}, },
            {{105, 105, 501}, },
            {{80, 80, 502}, },
            {{117, 117, 503}, },
            {{48, 48, 504}, },
            {{53, 53, 505}, {56, 56, 506}, },
            {{101, 101, 507}, },
            {{116, 116, 508}, },
            {{105, 105, 509}, },
            {{112, 112, 510}, },
            {{105, 105, 511}, },
            {{48, 48, 512}, },
            {{53, 53, 513}, {56, 56, 514}, },
            {{69, 69, 515}, },
            {{84, 84, 516}, },
            {{105, 105, 517}, },
            {{80, 80, 518}, },
            {{48, 48, 519}, },
            {{9, 9, 520}, {32, 32, 521}, },
            {{9, 9, 522}, {32, 32, 523}, },
            {{9, 9, 524}, {32, 32, 525}, },
            {{9, 9, 526}, {32, 32, 527}, },
            {{115, 115, 528}, },
            {{9, 9, 529}, {32, 32, 530}, },
            {{110, 110, 531}, },
            {{48, 48, 532}, },
            {{9, 32, -477}, },
            {{9, 32, -478}, },
            {{9, 32, -479}, },
            {{9, 32, -480}, },
            {{115, 115, 533}, },
            {{9, 32, -482}, },
            {{105, 105, 534}, },
            {{48, 48, 535}, },
            {{53, 53, 536}, {56, 56, 537}, },
            {{69, 69, 538}, },
            {{84, 84, 539}, },
            {{105, 105, 540}, },
            {{80, 80, 541}, },
            {{48, 48, 542}, },
            {{34, 34, 543}, },
            {{34, 34, 544}, },
            {{34, 34, 545}, },
            {{34, 34, 546}, },
            {{115, 115, 547}, },
            {{34, 34, 548}, },
            {{110, 110, 549}, },
            {{48, 48, 550}, },
            {{34, 34, 543}, },
            {{34, 34, 544}, },
            {{34, 34, 545}, },
            {{34, 34, 546}, },
            {{115, 115, 551}, },
            {{34, 34, 548}, },
            {{120, 120, 552}, },
            {{48, 48, 553}, },
            {{9, 32, -477}, },
            {{9, 32, -478}, },
            {{9, 32, -479}, },
            {{9, 32, -480}, },
            {{115, 115, 554}, },
            {{9, 32, -482}, },
            {{48, 48, 555}, {51, 51, 556}, },
            {{9, 32, -477}, },
            {{9, 32, -477}, },
            {{9, 32, -478}, },
            {{9, 32, -478}, },
            {{9, 32, -479}, },
            {{9, 32, -479}, },
            {{9, 32, -480}, },
            {{9, 32, -480}, },
            {{116, 116, 557}, },
            {{9, 32, -482}, },
            {{9, 32, -482}, },
            {{105, 105, 558}, },
            {{48, 48, 559}, {51, 51, 560}, },
            {{116, 116, 561}, },
            {{120, 120, 562}, },
            {{48, 48, 563}, },
            {{34, 34, 543}, },
            {{34, 34, 544}, },
            {{34, 34, 545}, },
            {{34, 34, 546}, },
            {{115, 115, 564}, },
            {{34, 34, 548}, },
            {{48, 48, 565}, {51, 51, 566}, },
            {{9, 32, -477}, },
            {{9, 32, -478}, },
            {{9, 32, -479}, },
            {{9, 32, -480}, },
            {{116, 116, 567}, },
            {{9, 32, -482}, },
            {{105, 105, 568}, },
            {{48, 48, 569}, {51, 51, 570}, },
            {{116, 116, 571}, },
            {{9, 9, 572}, {32, 32, 573}, },
            {{48, 48, 574}, {51, 51, 575}, },
            {{116, 116, 576}, },
            {{9, 9, 577}, {32, 32, 578}, },
            {{9, 9, 579}, {32, 32, 580}, },
            {{97, 97, 581}, },
            {{120, 120, 582}, },
            {{9, 32, -557}, },
            {{9, 32, -558}, },
            {{97, 97, 583}, },
            {{34, 34, 584}, },
            {{48, 48, 585}, {51, 51, 586}, },
            {{116, 116, 587}, },
            {{34, 34, 588}, },
            {{34, 34, 589}, },
            {{97, 97, 590}, },
            {{120, 120, 591}, },
            {{34, 34, 588}, },
            {{34, 34, 589}, },
            {{97, 97, 592}, },
            {{9, 32, -554}, },
            {{9, 32, -554}, },
            {{9, 32, -557}, },
            {{9, 32, -558}, },
            {{97, 97, 593}, },
            {{9, 32, -557}, },
            {{9, 32, -557}, },
            {{9, 32, -558}, },
            {{9, 32, -558}, },
            {{9, 9, 594}, {32, 32, 595}, },
            {{9, 32, -554}, },
            {{9, 32, -583}, },
            {{9, 32, -554}, },
            {{34, 34, 588}, },
            {{34, 34, 589}, },
            {{97, 97, 596}, },
            {{9, 32, -557}, },
            {{9, 32, -558}, },
            {{34, 34, 597}, },
            {{34, 34, 584}, },
            {{34, 34, 597}, },
            {{9, 32, -583}, },
            {{9, 32, -583}, },
            {{9, 32, -583}, },
            {{34, 34, 597}, },
            {{9, 32, -583}, },
        }
        { // DIRECTIVE_VISIBILITY
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {58, 58, 9}, {61, 61, 10}, {91, 91, 11}, {92, 92, 12}, {93, 93, 13}, {112, 112, 14}, {114, 114, 15}, },
            {{9, 32, -2}, },
            {{9, 9, 16}, {32, 32, 17}, },
            {{9, 9, 16}, {10, 10, 18}, {32, 32, 17}, },
            {{9, 32, -2}, },
            {{112, 112, 19}, {114, 114, 20}, },
            {},
            {},
            {},
            {{32, 32, 21}, {61, 61, 22}, },
            {},
            {},
            {{34, 34, 23}, {92, 92, 24}, },
            {},
            {{114, 114, 25}, },
            {{101, 101, 26}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{114, 114, 27}, },
            {{101, 101, 28}, },
            {},
            {},
            {},
            {},
            {{105, 105, 29}, },
            {{101, 101, 30}, },
            {{105, 105, 31}, },
            {{101, 101, 32}, },
            {{118, 118, 33}, },
            {{120, 120, 34}, },
            {{118, 118, 35}, },
            {{120, 120, 36}, },
            {{97, 97, 37}, },
            {{112, 112, 38}, },
            {{97, 97, 39}, },
            {{112, 112, 40}, },
            {{116, 116, 41}, },
            {{111, 111, 42}, },
            {{116, 116, 43}, },
            {{111, 111, 44}, },
            {{101, 101, 45}, },
            {{114, 114, 46}, },
            {{101, 101, 47}, },
            {{114, 114, 48}, },
            {{9, 9, 49}, {32, 32, 50}, },
            {{116, 116, 51}, },
            {{34, 34, 52}, },
            {{116, 116, 53}, },
            {{9, 32, -47}, },
            {{9, 32, -47}, },
            {{9, 9, 54}, {32, 32, 55}, },
            {{9, 32, -47}, },
            {{34, 34, 56}, },
            {{9, 32, -53}, },
            {{9, 32, -53}, },
            {{9, 32, -53}, },
        }
        { // DIRECTIVE_RESOLUTION
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {47, 47, 7}, {58, 58, 8}, {61, 61, 9}, {91, 91, 10}, {92, 92, 11}, {93, 93, 12}, },
            {{9, 32, -2}, },
            {{9, 9, 13}, {32, 32, 14}, },
            {{9, 9, 13}, {10, 10, 15}, {32, 32, 14}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {{32, 32, 16}, {61, 61, 17}, },
            {},
            {},
            {{34, 34, 18}, {92, 92, 19}, },
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
        }
        { // DIRECTIVE_EXTENSION
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {58, 58, 9}, {61, 61, 10}, {91, 91, 11}, {92, 92, 12}, {93, 93, 13}, {98, 98, 14}, {102, 102, 15}, },
            {{9, 32, -2}, },
            {{9, 9, 16}, {32, 32, 17}, },
            {{9, 9, 16}, {10, 10, 18}, {32, 32, 17}, },
            {{9, 32, -2}, },
            {{98, 98, 19}, {102, 102, 20}, },
            {},
            {},
            {},
            {{32, 32, 21}, {61, 61, 22}, },
            {},
            {},
            {{34, 34, 23}, {92, 92, 24}, },
            {},
            {{111, 111, 25}, },
            {{114, 114, 26}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{111, 111, 27}, },
            {{114, 114, 28}, },
            {},
            {},
            {},
            {},
            {{111, 111, 29}, },
            {{97, 97, 30}, },
            {{111, 111, 31}, },
            {{97, 97, 32}, },
            {{116, 116, 33}, },
            {{109, 109, 34}, },
            {{116, 116, 35}, },
            {{109, 109, 36}, },
            {{99, 99, 37}, },
            {{101, 101, 38}, },
            {{99, 99, 39}, },
            {{101, 101, 40}, },
            {{108, 108, 41}, },
            {{119, 119, 42}, },
            {{108, 108, 43}, },
            {{119, 119, 44}, },
            {{97, 97, 45}, },
            {{111, 111, 46}, },
            {{97, 97, 47}, },
            {{111, 111, 48}, },
            {{115, 115, 49}, },
            {{114, 114, 50}, },
            {{115, 115, 51}, },
            {{114, 114, 52}, },
            {{115, 115, 53}, },
            {{107, 107, 54}, },
            {{115, 115, 55}, },
            {{107, 107, 56}, },
            {{112, 112, 57}, },
            {{9, 9, 58}, {32, 32, 59}, },
            {{112, 112, 60}, },
            {{34, 34, 61}, },
            {{97, 97, 62}, },
            {{9, 32, -56}, },
            {{9, 32, -56}, },
            {{97, 97, 63}, },
            {{9, 32, -56}, },
            {{116, 116, 64}, },
            {{116, 116, 65}, },
            {{104, 104, 66}, },
            {{104, 104, 67}, },
            {{9, 9, 68}, {32, 32, 69}, },
            {{34, 34, 70}, },
            {{9, 32, -68}, },
            {{9, 32, -68}, },
            {{9, 32, -68}, },
        }
        { // DIRECTIVE_FRAGMENT_ATTACHMENT
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {58, 58, 9}, {61, 61, 10}, {91, 91, 11}, {92, 92, 12}, {93, 93, 13}, {97, 97, 14}, {110, 110, 15}, {114, 114, 16}, },
            {{9, 32, -2}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 32, -2}, },
            {{97, 97, 20}, {110, 110, 21}, {114, 114, 22}, },
            {},
            {},
            {},
            {{32, 32, 23}, {61, 61, 24}, },
            {},
            {},
            {{34, 34, 25}, {92, 92, 26}, },
            {},
            {{108, 108, 27}, },
            {{101, 101, 28}, },
            {{101, 101, 29}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{108, 108, 30}, },
            {{101, 101, 31}, },
            {{101, 101, 32}, },
            {},
            {},
            {},
            {},
            {{119, 119, 33}, },
            {{118, 118, 34}, },
            {{115, 115, 35}, },
            {{119, 119, 36}, },
            {{118, 118, 37}, },
            {{115, 115, 38}, },
            {{97, 97, 39}, },
            {{101, 101, 40}, },
            {{111, 111, 41}, },
            {{97, 97, 42}, },
            {{101, 101, 43}, },
            {{111, 111, 44}, },
            {{121, 121, 45}, },
            {{114, 114, 46}, },
            {{108, 108, 47}, },
            {{121, 121, 48}, },
            {{114, 114, 49}, },
            {{108, 108, 50}, },
            {{115, 115, 51}, },
            {{9, 9, 52}, {32, 32, 53}, },
            {{118, 118, 54}, },
            {{115, 115, 55}, },
            {{34, 34, 56}, },
            {{118, 118, 57}, },
            {{9, 9, 58}, {32, 32, 59}, },
            {{9, 32, -48}, },
            {{9, 32, -48}, },
            {{101, 101, 60}, },
            {{34, 34, 61}, },
            {{9, 32, -48}, },
            {{101, 101, 62}, },
            {{9, 32, -53}, },
            {{9, 32, -53}, },
            {{45, 45, 63}, },
            {{9, 32, -53}, },
            {{45, 45, 64}, },
            {{116, 116, 65}, },
            {{116, 116, 66}, },
            {{105, 105, 67}, },
            {{105, 105, 68}, },
            {{109, 109, 69}, },
            {{109, 109, 70}, },
            {{101, 101, 71}, },
            {{101, 101, 72}, },
            {{9, 9, 73}, {32, 32, 74}, },
            {{34, 34, 75}, },
            {{9, 32, -73}, },
            {{9, 32, -73}, },
            {{9, 32, -73}, },
        }
        { // DIRECTIVE_SINGLETON
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {58, 58, 9}, {61, 61, 10}, {91, 91, 11}, {92, 92, 12}, {93, 93, 13}, {102, 102, 14}, {116, 116, 15}, },
            {{9, 32, -2}, },
            {{9, 9, 16}, {32, 32, 17}, },
            {{9, 9, 16}, {10, 10, 18}, {32, 32, 17}, },
            {{9, 32, -2}, },
            {{102, 102, 19}, {116, 116, 20}, },
            {},
            {},
            {},
            {{32, 32, 21}, {61, 61, 22}, },
            {},
            {},
            {{34, 34, 23}, {92, 92, 24}, },
            {},
            {{97, 97, 25}, },
            {{114, 114, 26}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{97, 97, 27}, },
            {{114, 114, 28}, },
            {},
            {},
            {},
            {},
            {{108, 108, 29}, },
            {{117, 117, 30}, },
            {{108, 108, 31}, },
            {{117, 117, 32}, },
            {{115, 115, 33}, },
            {{101, 101, 34}, },
            {{115, 115, 35}, },
            {{101, 101, 36}, },
            {{101, 101, 37}, },
            {{9, 9, 38}, {32, 32, 39}, },
            {{101, 101, 40}, },
            {{34, 34, 41}, },
            {{9, 9, 42}, {32, 32, 43}, },
            {{9, 32, -36}, },
            {{9, 32, -36}, },
            {{34, 34, 44}, },
            {{9, 32, -36}, },
            {{9, 32, -39}, },
            {{9, 32, -39}, },
            {{9, 32, -39}, },
        }
        { // MANIFESTVERSION_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 43, 5}, {45, 46, 5}, {47, 47, 8}, {48, 48, 9}, {49, 49, 10}, {50, 50, 11}, {51, 57, 9}, {58, 58, 12}, {60, 60, 5}, {61, 61, 13}, {62, 90, 5}, {91, 91, 14}, {92, 92, 15}, {93, 93, 16}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 17}, },
            {{9, 9, 18}, {32, 32, 19}, },
            {{9, 9, 18}, {10, 10, 20}, {32, 32, 19}, },
            {{9, 9, 21}, {10, 13, -2}, {32, 32, 22}, {33, 33, 5}, {35, 43, 5}, {45, 47, 5}, {48, 57, 9}, {58, 58, 23}, {60, 60, 5}, {61, 61, 24}, {62, 127, 5}, },
            {{9, 9, 25}, {32, 32, 26}, {33, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 25}, {32, 32, 27}, {33, 60, -6}, {61, 61, 28}, {62, 127, 5}, },
            {},
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 29}, {35, 61, -6}, {62, 91, 5}, {92, 92, 30}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 31}, {58, 58, 32}, {61, 61, 24}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 33}, {62, 127, 5}, },
            {{9, 9, 34}, {32, 32, 35}, },
            {{9, 9, 25}, {32, 32, 36}, {58, 61, -23}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 32, -26}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -23}, },
            {{61, 61, 37}, },
            {{9, 32, -26}, },
            {{9, 32, -26}, },
            {{9, 32, -26}, },
            {{9, 61, -27}, },
            {{9, 32, -26}, },
        }
        { // SELECTION_FILTER_DIRECTIVE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {58, 58, 9}, {60, 60, 10}, {61, 61, 11}, {62, 62, 12}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, },
            {{9, 32, -2}, },
            {{9, 9, 16}, {32, 32, 17}, },
            {{9, 9, 16}, {10, 10, 18}, {32, 32, 17}, },
            {{9, 32, -2}, },
            {{61, 61, 19}, },
            {},
            {},
            {},
            {{32, 32, 20}, {61, 61, 21}, },
            {{61, 61, 22}, },
            {},
            {{61, 61, 23}, },
            {},
            {{34, 34, 24}, {92, 92, 25}, },
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
        }
        { // DIRECTIVE_RESOLUTION_REQUIREDEXECUTION_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {58, 58, 9}, {61, 61, 10}, {91, 91, 11}, {92, 92, 12}, {93, 93, 13}, {109, 109, 14}, {111, 111, 15}, },
            {{9, 32, -2}, },
            {{9, 9, 16}, {32, 32, 17}, },
            {{9, 9, 16}, {10, 10, 18}, {32, 32, 17}, },
            {{9, 32, -2}, },
            {{109, 109, 19}, {111, 111, 20}, },
            {},
            {},
            {},
            {{32, 32, 21}, {61, 61, 22}, },
            {},
            {},
            {{34, 34, 23}, {92, 92, 24}, },
            {},
            {{97, 97, 25}, },
            {{112, 112, 26}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{97, 97, 27}, },
            {{112, 112, 28}, },
            {},
            {},
            {},
            {},
            {{110, 110, 29}, },
            {{116, 116, 30}, },
            {{110, 110, 31}, },
            {{116, 116, 32}, },
            {{100, 100, 33}, },
            {{105, 105, 34}, },
            {{100, 100, 35}, },
            {{105, 105, 36}, },
            {{97, 97, 37}, },
            {{111, 111, 38}, },
            {{97, 97, 39}, },
            {{111, 111, 40}, },
            {{116, 116, 41}, },
            {{110, 110, 42}, },
            {{116, 116, 43}, },
            {{110, 110, 44}, },
            {{111, 111, 45}, },
            {{97, 97, 46}, },
            {{111, 111, 47}, },
            {{97, 97, 48}, },
            {{114, 114, 49}, },
            {{108, 108, 50}, },
            {{114, 114, 51}, },
            {{108, 108, 52}, },
            {{121, 121, 53}, },
            {{9, 9, 54}, {32, 32, 55}, },
            {{121, 121, 56}, },
            {{34, 34, 57}, },
            {{9, 9, 58}, {32, 32, 59}, },
            {{9, 32, -52}, },
            {{9, 32, -52}, },
            {{34, 34, 60}, },
            {{9, 32, -52}, },
            {{9, 32, -55}, },
            {{9, 32, -55}, },
            {{9, 32, -55}, },
        }
        { // DIRECTIVE_RESOLUTION_IMPORT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {58, 58, 9}, {61, 61, 10}, {91, 91, 11}, {92, 92, 12}, {93, 93, 13}, {109, 109, 14}, {111, 111, 15}, },
            {{9, 32, -2}, },
            {{9, 9, 16}, {32, 32, 17}, },
            {{9, 9, 16}, {10, 10, 18}, {32, 32, 17}, },
            {{9, 32, -2}, },
            {{109, 109, 19}, {111, 111, 20}, },
            {},
            {},
            {},
            {{32, 32, 21}, {61, 61, 22}, },
            {},
            {},
            {{34, 34, 23}, {92, 92, 24}, },
            {},
            {{97, 97, 25}, },
            {{112, 112, 26}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{97, 97, 27}, },
            {{112, 112, 28}, },
            {},
            {},
            {},
            {},
            {{110, 110, 29}, },
            {{116, 116, 30}, },
            {{110, 110, 31}, },
            {{116, 116, 32}, },
            {{100, 100, 33}, },
            {{105, 105, 34}, },
            {{100, 100, 35}, },
            {{105, 105, 36}, },
            {{97, 97, 37}, },
            {{111, 111, 38}, },
            {{97, 97, 39}, },
            {{111, 111, 40}, },
            {{116, 116, 41}, },
            {{110, 110, 42}, },
            {{116, 116, 43}, },
            {{110, 110, 44}, },
            {{111, 111, 45}, },
            {{97, 97, 46}, },
            {{111, 111, 47}, },
            {{97, 97, 48}, },
            {{114, 114, 49}, },
            {{108, 108, 50}, },
            {{114, 114, 51}, },
            {{108, 108, 52}, },
            {{121, 121, 53}, },
            {{9, 9, 54}, {32, 32, 55}, },
            {{121, 121, 56}, },
            {{34, 34, 57}, },
            {{9, 9, 58}, {32, 32, 59}, },
            {{9, 32, -52}, },
            {{9, 32, -52}, },
            {{34, 34, 60}, },
            {{9, 32, -52}, },
            {{9, 32, -55}, },
            {{9, 32, -55}, },
            {{9, 32, -55}, },
        }
        { // SIMPLE_ENTRY_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // DIRECTIVE_MANDATORY
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {},
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 20}, {33, 60, -6}, {61, 61, 21}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 22}, {35, 60, -6}, {62, 91, 5}, {92, 92, 23}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
        }
        { // DYNAMICIMPORT_PACKAGE_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 42, 8}, {43, 43, 5}, {44, 44, 9}, {45, 45, 5}, {46, 46, 10}, {47, 47, 11}, {48, 57, 12}, {58, 58, 13}, {59, 59, 14}, {60, 60, 5}, {61, 61, 15}, {62, 64, 5}, {65, 90, 16}, {91, 91, 17}, {92, 92, 18}, {93, 93, 19}, {94, 96, 5}, {97, 122, 20}, {123, 127, 5}, },
            {{9, 13, -2}, {32, 32, 21}, {44, 44, 9}, {59, 59, 14}, },
            {{9, 9, 22}, {32, 32, 23}, },
            {{9, 9, 22}, {10, 10, 24}, {32, 32, 23}, },
            {{9, 9, 25}, {10, 13, -2}, {32, 32, 26}, {33, 33, 5}, {35, 43, 5}, {44, 44, 9}, {45, 47, 5}, {48, 57, 12}, {58, 58, 27}, {59, 60, -2}, {61, 61, 28}, {62, 127, 5}, },
            {{9, 9, 29}, {32, 32, 30}, {33, 43, -6}, {45, 58, -6}, {60, 127, -6}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 31}, {32, 32, 32}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 127, -7}, },
            {{9, 9, 29}, {32, 32, 33}, {33, 60, -7}, {61, 61, 34}, {62, 127, 5}, },
            {{9, 9, 35}, {32, 32, 36}, },
            {},
            {{9, 33, -7}, {35, 35, 5}, {36, 36, 37}, {37, 43, 5}, {45, 45, 38}, {46, 47, 5}, {48, 57, 39}, {58, 61, -7}, {62, 64, 5}, {65, 90, 40}, {91, 94, 5}, {95, 95, 41}, {96, 96, 5}, {97, 122, 42}, {123, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 33, -7}, {34, 34, 43}, {35, 61, -7}, {62, 91, 5}, {92, 92, 44}, {93, 127, 5}, },
            {{9, 127, -7}, },
            {{9, 127, -18}, },
            {{9, 59, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 13, -6}, {32, 32, 45}, {44, 44, 9}, {58, 58, 46}, {59, 59, 14}, {61, 61, 28}, },
            {{9, 127, -6}, },
            {{9, 60, -7}, {61, 61, 47}, {62, 127, 5}, },
            {{9, 9, 48}, {32, 32, 49}, },
            {{9, 9, 29}, {32, 32, 50}, {58, 58, 46}, {61, 61, 28}, },
            {{9, 127, -7}, },
            {{9, 32, -11}, },
            {{9, 32, -11}, },
            {{9, 127, -7}, },
            {{9, 32, -30}, },
            {{9, 32, -16}, },
            {{9, 32, -16}, },
            {{9, 127, -18}, },
            {{9, 127, -18}, },
            {{9, 127, -18}, },
            {{9, 127, -18}, },
            {{9, 127, -18}, },
            {{9, 127, -18}, },
            {},
            {{9, 127, -7}, },
            {{9, 61, -27}, },
            {{61, 61, 51}, },
            {{9, 32, -30}, },
            {{9, 32, -30}, },
            {{9, 32, -30}, },
            {{9, 61, -31}, },
            {{9, 32, -30}, },
        }
        { // DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {46, 46, 8}, {47, 47, 9}, {58, 58, 10}, {61, 61, 11}, {65, 90, 12}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {97, 122, 16}, },
            {{9, 32, -2}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {},
            {},
            {{32, 32, 20}, {61, 61, 21}, },
            {},
            {{36, 36, 22}, {45, 45, 23}, {48, 57, 24}, {65, 90, 25}, {95, 95, 26}, {97, 122, 27}, },
            {},
            {{34, 34, 28}, {92, 92, 29}, },
            {},
            {{36, 122, -14}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {},
            {},
        }
        { // DIRECTIVE_INCLUDE_ACTIVATIONPOLICY
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {46, 46, 8}, {47, 47, 9}, {58, 58, 10}, {61, 61, 11}, {65, 90, 12}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {97, 122, 16}, },
            {{9, 32, -2}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {},
            {},
            {{32, 32, 20}, {61, 61, 21}, },
            {},
            {{36, 36, 22}, {45, 45, 23}, {48, 57, 24}, {65, 90, 25}, {95, 95, 26}, {97, 122, 27}, },
            {},
            {{34, 34, 28}, {92, 92, 29}, },
            {},
            {{36, 122, -14}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {{36, 122, -14}, },
            {},
            {},
        }
        { // DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY1
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {44, 44, 8}, {46, 46, 9}, {47, 47, 10}, {58, 58, 11}, {61, 61, 12}, {65, 90, 13}, {91, 91, 14}, {92, 92, 15}, {93, 93, 16}, {97, 122, 17}, },
            {{9, 32, -2}, {44, 44, 8}, },
            {{9, 9, 18}, {32, 32, 19}, },
            {{9, 9, 18}, {10, 10, 20}, {32, 32, 19}, },
            {{9, 44, -3}, },
            {},
            {},
            {},
            {{9, 9, 21}, {32, 32, 22}, },
            {},
            {},
            {{32, 32, 23}, {61, 61, 24}, },
            {},
            {{36, 36, 25}, {45, 45, 26}, {48, 57, 27}, {65, 90, 28}, {95, 95, 29}, {97, 122, 30}, },
            {},
            {{34, 34, 31}, {92, 92, 32}, },
            {},
            {{36, 122, -15}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {},
            {},
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {},
            {},
        }
        { // DIRECTIVE_INCLUDE_ACTIVATIONPOLICY1
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {44, 44, 8}, {46, 46, 9}, {47, 47, 10}, {58, 58, 11}, {61, 61, 12}, {65, 90, 13}, {91, 91, 14}, {92, 92, 15}, {93, 93, 16}, {97, 122, 17}, },
            {{9, 32, -2}, {44, 44, 8}, },
            {{9, 9, 18}, {32, 32, 19}, },
            {{9, 9, 18}, {10, 10, 20}, {32, 32, 19}, },
            {{9, 44, -3}, },
            {},
            {},
            {},
            {{9, 9, 21}, {32, 32, 22}, },
            {},
            {},
            {{32, 32, 23}, {61, 61, 24}, },
            {},
            {{36, 36, 25}, {45, 45, 26}, {48, 57, 27}, {65, 90, 28}, {95, 95, 29}, {97, 122, 30}, },
            {},
            {{34, 34, 31}, {92, 92, 32}, },
            {},
            {{36, 122, -15}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {},
            {},
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {{36, 122, -15}, },
            {},
            {},
        }
        { // BUNDLE_ACTIVATIONPOLICY_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // BUNDLE_ACTIVATOR_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // URL_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {47, 47, 7}, {58, 58, 8}, {61, 61, 9}, {91, 91, 10}, {92, 92, 11}, {93, 93, 12}, {102, 102, 13}, {104, 104, 14}, },
            {{9, 32, -2}, },
            {{9, 9, 15}, {32, 32, 16}, },
            {{9, 9, 15}, {10, 10, 17}, {32, 32, 16}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {{32, 32, 18}, {61, 61, 19}, },
            {},
            {},
            {{34, 34, 20}, {92, 92, 21}, },
            {},
            {{105, 105, 22}, {116, 116, 23}, },
            {{116, 116, 24}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{108, 108, 25}, },
            {{112, 112, 26}, },
            {{116, 116, 27}, },
            {{101, 101, 28}, },
            {{58, 58, 29}, },
            {{112, 112, 30}, },
            {{58, 58, 31}, },
            {{47, 47, 32}, },
            {{58, 58, 33}, {115, 115, 34}, },
            {{47, 47, 35}, },
            {{47, 47, 36}, },
            {{47, 47, 37}, },
            {{58, 58, 38}, },
            {{47, 47, 39}, },
            {},
            {{47, 47, 40}, },
            {{47, 47, 41}, },
            {{47, 47, 42}, },
            {},
            {{47, 47, 43}, },
            {},
            {},
        }
        { // URL_ATTRIBUT
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // BUNDLE_NATIVECODE_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // VERSION_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // BUNDLE_REQUIREDEXECUTIONENVIRONMENT_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // BUNDLE_SYMBOLICNAME_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // EXPORT_PACKAGE_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // FRAGMENT_HOST_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // IMPORT_PACKAGE_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // REQUIRE_BUNDLE_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // IMPORT_SERVICE_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // EXPORT_SERVICE_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // MANIFESTVERSION_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // DYNAMICIMPORT_PACKAGE_ATTRIBUT_STATE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {45, 46, 5}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {60, 60, 5}, {61, 61, 12}, {62, 90, 5}, {91, 91, 13}, {92, 92, 14}, {93, 93, 15}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 16}, },
            {{9, 9, 17}, {32, 32, 18}, },
            {{9, 9, 17}, {10, 10, 19}, {32, 32, 18}, },
            {{9, 33, -2}, {35, 43, 5}, {45, 47, 5}, {48, 57, 10}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 127, -6}, },
            {{32, 33, 20}, {34, 34, 21}, {35, 47, 20}, {48, 57, 22}, {58, 91, 20}, {92, 92, 23}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 24}, {33, 60, -6}, {61, 61, 25}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 26}, {35, 60, -6}, {62, 91, 5}, {92, 92, 27}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 32, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{32, 127, -8}, },
            {},
            {{32, 127, -8}, },
            {{32, 33, 20}, {34, 34, 28}, {35, 91, -8}, {92, 92, 29}, {93, 127, 20}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
            {{32, 127, -8}, },
            {{32, 127, -25}, },
        }
        { // DIRECTIVE_INCLUDE_EXPORT_PACKAGE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {42, 42, 7}, {44, 44, 8}, {46, 46, 9}, {47, 47, 10}, {58, 58, 11}, {59, 59, 12}, {61, 61, 13}, {65, 90, 14}, {91, 91, 15}, {92, 92, 16}, {93, 93, 17}, {97, 122, 18}, },
            {{9, 32, -2}, {44, 44, 8}, {59, 59, 12}, },
            {{9, 9, 19}, {32, 32, 20}, },
            {{9, 9, 19}, {10, 10, 21}, {32, 32, 20}, },
            {{9, 59, -3}, },
            {},
            {},
            {},
            {{9, 9, 22}, {32, 32, 23}, },
            {},
            {},
            {{32, 32, 24}, {61, 61, 25}, },
            {{9, 9, 26}, {32, 32, 27}, },
            {},
            {{36, 36, 28}, {45, 45, 29}, {48, 57, 30}, {65, 90, 31}, {95, 95, 32}, {97, 122, 33}, },
            {},
            {{34, 34, 34}, {92, 92, 35}, },
            {},
            {{36, 122, -16}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {},
            {},
            {{9, 32, -14}, },
            {{9, 32, -14}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {},
            {},
        }
        { // DIRECTIVE_EXCLUDE_EXPORT_PACKAGE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {42, 42, 7}, {44, 44, 8}, {46, 46, 9}, {47, 47, 10}, {58, 58, 11}, {59, 59, 12}, {61, 61, 13}, {65, 90, 14}, {91, 91, 15}, {92, 92, 16}, {93, 93, 17}, {97, 122, 18}, },
            {{9, 32, -2}, {44, 44, 8}, {59, 59, 12}, },
            {{9, 9, 19}, {32, 32, 20}, },
            {{9, 9, 19}, {10, 10, 21}, {32, 32, 20}, },
            {{9, 59, -3}, },
            {},
            {},
            {},
            {{9, 9, 22}, {32, 32, 23}, },
            {},
            {},
            {{32, 32, 24}, {61, 61, 25}, },
            {{9, 9, 26}, {32, 32, 27}, },
            {},
            {{36, 36, 28}, {45, 45, 29}, {48, 57, 30}, {65, 90, 31}, {95, 95, 32}, {97, 122, 33}, },
            {},
            {{34, 34, 34}, {92, 92, 35}, },
            {},
            {{36, 122, -16}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -10}, },
            {{9, 32, -10}, },
            {},
            {},
            {{9, 32, -14}, },
            {{9, 32, -14}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {},
            {},
        }
        { // DIRECTIVE_MANDATORY_VALUE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 39, 5}, {40, 40, 7}, {41, 41, 8}, {42, 43, 5}, {44, 44, 9}, {45, 46, 5}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {60, 60, 5}, {61, 61, 13}, {62, 90, 5}, {91, 91, 14}, {92, 92, 15}, {93, 93, 16}, {94, 127, 5}, },
            {{9, 13, -2}, {32, 32, 17}, {44, 44, 9}, },
            {{9, 9, 18}, {32, 32, 19}, },
            {{9, 9, 18}, {10, 10, 20}, {32, 32, 19}, },
            {{9, 33, -2}, {35, 43, 5}, {44, 44, 9}, {45, 47, 5}, {48, 57, 11}, {58, 58, 5}, {60, 60, 5}, {62, 127, 5}, },
            {{32, 33, 5}, {35, 43, 5}, {45, 127, -6}, },
            {},
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{9, 9, 21}, {32, 32, 22}, },
            {{32, 127, -7}, },
            {{32, 127, -7}, },
            {{32, 32, 23}, {33, 43, -6}, {45, 60, -6}, {61, 61, 24}, {62, 127, 5}, },
            {},
            {{32, 127, -7}, },
            {{32, 33, 5}, {34, 34, 25}, {35, 60, -7}, {62, 91, 5}, {92, 92, 26}, {93, 127, 5}, },
            {{32, 127, -7}, },
            {{9, 44, -3}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -11}, },
            {{9, 32, -11}, },
            {{32, 127, -7}, },
            {},
            {},
            {{32, 127, -7}, },
        }
        { // DIRECTIVE_USES
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {42, 42, 8}, {44, 44, 9}, {46, 46, 10}, {47, 47, 11}, {58, 58, 12}, {59, 59, 13}, {61, 61, 14}, {65, 90, 15}, {91, 91, 16}, {92, 92, 17}, {93, 93, 18}, {97, 122, 19}, },
            {{9, 32, -2}, {44, 44, 9}, {59, 59, 13}, },
            {{9, 9, 20}, {32, 32, 21}, },
            {{9, 9, 20}, {10, 10, 22}, {32, 32, 21}, },
            {{9, 59, -3}, },
            {},
            {},
            {},
            {},
            {{9, 9, 23}, {32, 32, 24}, },
            {},
            {},
            {{32, 32, 25}, {61, 61, 26}, },
            {{9, 9, 27}, {32, 32, 28}, },
            {},
            {{36, 36, 29}, {45, 45, 30}, {48, 57, 31}, {65, 90, 32}, {95, 95, 33}, {97, 122, 34}, },
            {},
            {{34, 34, 35}, {92, 92, 36}, },
            {},
            {{36, 122, -17}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -11}, },
            {{9, 32, -11}, },
            {},
            {},
            {{9, 32, -15}, },
            {{9, 32, -15}, },
            {{36, 122, -17}, },
            {{36, 122, -17}, },
            {{36, 122, -17}, },
            {{36, 122, -17}, },
            {{36, 122, -17}, },
            {{36, 122, -17}, },
            {},
            {},
        }
        { // DIRECTIVE_USES1
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {42, 42, 8}, {44, 44, 9}, {46, 46, 10}, {47, 47, 11}, {58, 58, 12}, {61, 61, 13}, {65, 90, 14}, {91, 91, 15}, {92, 92, 16}, {93, 93, 17}, {97, 122, 18}, },
            {{9, 32, -2}, {44, 44, 9}, },
            {{9, 9, 19}, {32, 32, 20}, },
            {{9, 9, 19}, {10, 10, 21}, {32, 32, 20}, },
            {{9, 44, -3}, },
            {},
            {},
            {},
            {},
            {{9, 9, 22}, {32, 32, 23}, },
            {},
            {},
            {{32, 32, 24}, {61, 61, 25}, },
            {},
            {{36, 36, 26}, {45, 45, 27}, {48, 57, 28}, {65, 90, 29}, {95, 95, 30}, {97, 122, 31}, },
            {},
            {{34, 34, 32}, {92, 92, 33}, },
            {},
            {{36, 122, -16}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -11}, },
            {{9, 32, -11}, },
            {},
            {},
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {{36, 122, -16}, },
            {},
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // MANIFEST_ENTRY
        {-1, -1, 115, 115, -1, 2, 3, -1, 7, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 7, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 114, 114, 115, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 5, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 36, 37, -1, -1, 39, 40, 41, 41, 42, 43, -1, 44, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 37, -1, -1, 39, 39, 40, 40, 42, 42, 43, 43, 39, 44, 44, -1, -1, 22, 23, 23, 24, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 39, -1, -1, 22, 22, 24, 24, -1, -1, 26, 26, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, 32, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 29, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, 29, 29, -1, -1, -1, -1, 34, 34, -1, -1, -1, -1, 25, -1, -1, -1, 35, 38, -1, 25, 25, 30, -1, -1, 35, 35, 38, 38, 21, 30, 30, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 33, 33, },
        // BUNDLE_ACTIVATIONPOLICY_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 7, -1, -1, 8, 1, 2, 7, 3, -1, -1, -1, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 6, 5, -1, -1, -1, -1, -1, 62, 62, 62, -1, -1, -1, -1, 62, -1, -1, 47, -1, -1, 47, 47, -1, -1, 47, -1, -1, -1, -1, -1, 58, -1, -1, -1, 59, -1, -1, 58, 58, 58, -1, -1, 59, 59, 59, 58, 59, },
        // BUNDLE_ACTIVATOR_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 11, 7, -1, -1, 8, 1, 116, 2, 7, 3, 116, 116, 116, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 49, 49, 116, 116, 116, 116, 116, 116, 6, 5, 116, 116, -1, -1, 62, 62, 62, -1, 49, 49, 116, 116, 62, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, -1, -1, -1, 48, 116, -1, -1, 48, 48, 48, 116, 48, 116, 116, 116, 116, 116, 116, 116, -1, -1, -1, -1, -1, -1, -1, 49, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, },
        // ALL_STRING_STATE
        {-1, -1, 115, 115, 123, 123, 2, 3, 9, 7, 123, 8, 1, 2, 7, 3, -1, 9, 8, 114, 114, 115, 9, 9, 4, 1, 8, 8, 6, 5, 9, 8, },
        // SIMPLE_ENTRY_STATE
        {-1, -1, 115, 115, 122, 122, 2, 3, 9, 7, 122, 122, 8, 1, 2, 7, 3, -1, 114, 114, 115, -1, 122, 122, 62, -1, 122, 9, 9, 4, 1, 8, 8, 122, 6, 5, -1, -1, 62, 62, 62, 62, -1, 62, 62, },
        // URL
        {-1, -1, 115, 115, 120, 120, 2, 3, 9, 7, 120, 120, 8, 1, 2, 7, 3, -1, 114, 114, 115, -1, 120, 120, 62, -1, 120, 9, 9, 4, 1, 8, 8, 6, 5, -1, -1, 62, 62, 62, -1, 62, },
        // BUNDLE_NATIVECODE_STATE
        {-1, -1, 115, 115, 120, 120, 2, 3, 9, 11, 7, 120, 120, 8, 1, 2, 7, 3, 120, 120, 120, 120, -1, 114, 114, 115, -1, 120, 120, 62, -1, 120, 9, 9, 4, 1, 8, 8, 6, 5, 120, 120, 120, 120, -1, -1, 62, 62, 62, -1, 120, 120, 120, 120, 120, 62, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, -1, 120, 120, 50, 120, 120, 120, 120, -1, -1, 50, 50, 50, 120, 120, 120, -1, 120, 120, 53, 50, 120, 120, 120, -1, -1, 53, 53, 53, -1, 120, 120, 51, -1, 120, 120, 52, 120, 53, -1, -1, 51, 51, 51, -1, -1, 52, 52, 52, 120, 51, 52, 120, 120, 120, 120, 120, -1, 120, 120, 54, -1, -1, 54, 54, 54, 54, },
        // VERSION_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 125, 11, 7, 124, -1, 8, 1, 125, 2, 7, 3, 125, 125, -1, 114, 114, 115, -1, -1, -1, -1, 62, -1, -1, 9, 9, 125, 4, 1, 8, 8, 6, 5, -1, -1, 62, 62, 62, -1, 62, },
        // BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 117, 117, 7, 117, -1, 8, 1, 117, 2, 7, 3, 117, 117, 117, 117, -1, 114, 114, 115, -1, -1, -1, -1, 62, -1, -1, 9, 9, 118, 4, 1, 8, 8, 6, 5, 117, 117, -1, -1, 62, 62, 62, -1, 117, 117, 62, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, -1, -1, -1, 56, -1, -1, -1, 55, -1, -1, 56, 56, 56, -1, -1, 55, 55, 55, 56, 55, },
        // BUNDLE_SYMBOLICNAME_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 11, 7, -1, -1, 8, 1, 116, 2, 7, 3, 116, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, -1, -1, 62, 62, 62, -1, 62, },
        // EXPORT_PACKAGE_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 11, 7, -1, -1, 8, 1, 116, 2, 7, 3, 116, 116, 116, 116, 116, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, 116, 116, 116, 116, -1, -1, 62, 62, 62, -1, 116, 116, 116, 116, 62, 116, 116, 116, 116, 116, 116, 116, -1, -1, -1, 57, 116, 116, 116, -1, -1, 57, 57, 57, 116, 116, 116, 57, -1, -1, -1, 58, -1, -1, -1, 59, 116, -1, -1, 58, 58, 58, -1, -1, 59, 59, 59, 116, 58, 59, -1, -1, -1, 60, -1, -1, 60, 60, 60, 60, },
        // FRAGMENT_HOST_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 11, 7, -1, -1, 8, 1, 116, 2, 7, 3, 116, 116, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, 116, -1, -1, 62, 62, 62, -1, 116, 62, 116, 116, 116, 116, 116, 116, -1, -1, -1, 61, -1, -1, 61, 61, 61, 61, },
        // IMPORT_PACKAGE_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 11, 7, -1, -1, 8, 1, 116, 2, 7, 3, 116, 116, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, 116, -1, -1, 62, 62, 62, -1, 116, 62, 116, 116, 116, 116, 116, 116, 116, -1, -1, -1, 56, -1, -1, 56, 56, 56, 56, },
        // CLASSPATH_ENTRY_STATE
        {-1, -1, 115, 115, 120, 120, 2, 3, 9, 11, 7, 120, 120, 8, 1, 2, 7, 3, -1, 114, 114, 115, 9, 9, 4, 1, 8, 8, 6, 5, },
        // REQUIRE_BUNDLE_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 11, 7, -1, -1, 8, 1, 116, 2, 7, 3, 116, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, -1, -1, 62, 62, 62, -1, 62, },
        // DIGEST_ENTRY_STATE
        {-1, -1, 115, 115, 119, 119, 2, 3, 9, 7, 119, 8, 1, 2, 7, 3, -1, 9, 8, 114, 114, 115, 9, 9, 4, 1, 8, 8, 6, 5, 9, 8, },
        // IMPORT_SERVICE_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 11, 7, -1, -1, 8, 1, 116, 2, 7, 3, 116, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, -1, -1, 62, 62, 62, -1, 62, },
        // EXPORT_SERVICE_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 9, 11, 7, -1, -1, 8, 1, 116, 2, 7, 3, 116, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, -1, -1, 62, 62, 62, -1, 62, },
        // DIRECTIVE_PROCESSOR
        {-1, -1, 115, 115, -1, -1, 2, 3, 7, -1, -1, 1, -1, -1, -1, -1, -1, -1, 2, 7, 3, -1, 114, 114, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 64, -1, -1, -1, -1, -1, -1, 70, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, 64, 64, -1, -1, 67, -1, -1, 72, 70, 70, -1, -1, 75, 75, -1, 63, 64, -1, -1, -1, -1, -1, -1, 70, -1, -1, 75, -1, 65, -1, 67, 67, -1, -1, 72, 72, 73, 71, 74, -1, -1, -1, 67, -1, -1, 72, -1, -1, -1, -1, 65, 65, 66, 68, -1, 73, 73, 71, 71, 74, 74, 76, 65, -1, -1, -1, 73, 71, 74, -1, 66, 66, 68, 68, 69, 76, 76, 66, 68, -1, 76, 69, 69, 69, },
        // DIRECTIVE_OSVERSION
        {-1, -1, 115, 115, -1, 2, 3, 7, -1, 1, 2, 7, 3, 114, 114, 115, 4, 1, 6, 5, },
        // DIRECTIVE_OSNAME
        {-1, -1, 115, 115, -1, -1, 2, 3, 7, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 7, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 114, 114, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, -1, 90, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, 82, 83, -1, -1, -1, -1, 89, 89, -1, 90, 90, -1, -1, -1, -1, -1, -1, -1, -1, 82, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, 82, 82, 83, 83, 84, 85, -1, -1, -1, -1, 92, -1, -1, -1, 79, -1, -1, 84, 85, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, 82, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, 79, 80, -1, 84, 84, 85, 85, 86, -1, -1, -1, 92, 92, -1, -1, -1, 80, -1, 86, -1, -1, -1, -1, -1, -1, 79, -1, -1, 84, 85, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 80, 81, 86, 86, 87, 88, 91, 93, -1, -1, 81, 87, 88, 91, 93, -1, -1, 80, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 87, 87, 88, 88, 91, 91, 93, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 87, 88, 91, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, 95, 97, 96, -1, 100, -1, -1, 94, 95, 97, 96, -1, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, 95, 97, 96, -1, 100, -1, 94, 94, 95, 95, 97, 97, 96, 96, -1, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, 95, 97, 96, -1, 100, -1, -1, -1, 78, -1, -1, 98, 99, -1, -1, 98, 99, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 78, 98, 99, -1, 98, 98, 99, 99, 101, 78, 101, 78, -1, -1, -1, 98, 99, -1, -1, -1, 101, 101, 101, -1, 101, },
        // DIRECTIVE_VISIBILITY
        {-1, -1, 115, 115, -1, -1, 2, 3, 7, -1, 1, 2, 7, 3, -1, -1, 114, 114, 115, -1, -1, 4, 1, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, -1, -1, -1, 102, 102, 103, 102, -1, 103, 103, 103, },
        // DIRECTIVE_RESOLUTION
        {-1, -1, 115, 115, -1, 2, 3, 7, -1, 1, 2, 7, 3, 114, 114, 115, 4, 1, 6, 5, },
        // DIRECTIVE_EXTENSION
        {-1, -1, 115, 115, -1, -1, 2, 3, 7, -1, 1, 2, 7, 3, -1, -1, 114, 114, 115, -1, -1, 4, 1, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 106, -1, -1, -1, 106, 106, -1, 106, -1, -1, -1, -1, 107, -1, 107, 107, 107, },
        // DIRECTIVE_FRAGMENT_ATTACHMENT
        {-1, -1, 115, 115, -1, -1, 2, 3, 7, -1, 1, 2, 7, 3, -1, -1, -1, 114, 114, 115, -1, -1, -1, 4, 1, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 109, -1, -1, -1, -1, 108, 109, 109, -1, -1, 109, -1, 108, 108, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, 110, 110, 110, },
        // DIRECTIVE_SINGLETON
        {-1, -1, 115, 115, -1, -1, 2, 3, 7, -1, 1, 2, 7, 3, -1, -1, 114, 114, 115, -1, -1, 4, 1, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, -1, -1, 112, 111, 111, -1, 111, 112, 112, 112, },
        // MANIFESTVERSION_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 7, -1, 113, 113, -1, 1, 2, 7, 3, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 4, 1, 6, 5, -1, -1, 62, 62, 62, -1, 62, },
        // SELECTION_FILTER_DIRECTIVE
        {-1, -1, -1, -1, -1, -1, 2, 3, 7, -1, 16, 1, 15, 2, 7, 3, 114, 114, -1, 17, 4, 1, 14, 13, 6, 5, },
        // DIRECTIVE_RESOLUTION_REQUIREDEXECUTION_STATE
        {-1, -1, -1, -1, -1, -1, 2, 3, 7, -1, 1, 2, 7, 3, -1, -1, 114, 114, -1, -1, -1, 4, 1, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 105, -1, -1, 104, 105, 105, -1, 105, 104, 104, 104, },
        // DIRECTIVE_RESOLUTION_IMPORT_STATE
        {-1, -1, -1, -1, -1, -1, 2, 3, 7, -1, 1, 2, 7, 3, -1, -1, 114, 114, -1, -1, -1, 4, 1, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 105, -1, -1, 104, 105, 105, -1, 105, 104, 104, 104, },
        // SIMPLE_ENTRY_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // DIRECTIVE_MANDATORY
        {-1, -1, -1, -1, 120, 120, 0, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, 4, 1, 6, 5, },
        // DYNAMICIMPORT_PACKAGE_STATE
        {-1, -1, 115, 115, -1, -1, 2, 3, 10, 9, 11, 7, -1, -1, 8, 1, 116, 2, 7, 3, 116, -1, 114, 114, 115, -1, -1, -1, 62, -1, -1, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, -1, -1, 62, 62, 62, -1, 62, },
        // DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY
        {-1, -1, 115, 115, -1, 0, 2, 3, 11, 7, -1, 1, 116, 2, 7, 3, 116, 114, 114, 115, 4, 1, 116, 116, 116, 116, 116, 116, 6, 5, },
        // DIRECTIVE_INCLUDE_ACTIVATIONPOLICY
        {-1, -1, 115, 115, -1, 0, 2, 3, 11, 7, -1, 1, 116, 2, 7, 3, 116, 114, 114, 115, 4, 1, 116, 116, 116, 116, 116, 116, 6, 5, },
        // DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY1
        {-1, -1, -1, -1, -1, 0, 2, 3, 9, 11, 7, -1, 1, 116, 2, 7, 3, 116, 114, 114, -1, 9, 9, 4, 1, 116, 116, 116, 116, 116, 116, 6, 5, },
        // DIRECTIVE_INCLUDE_ACTIVATIONPOLICY1
        {-1, -1, -1, -1, -1, 0, 2, 3, 9, 11, 7, -1, 1, 116, 2, 7, 3, 116, 114, 114, -1, 9, 9, 4, 1, 116, 116, 116, 116, 116, 116, 6, 5, },
        // BUNDLE_ACTIVATIONPOLICY_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // BUNDLE_ACTIVATOR_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // URL_STATE
        {-1, -1, -1, -1, -1, 2, 3, 7, -1, 1, 2, 7, 3, -1, -1, 114, 114, -1, 4, 1, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, 19, -1, -1, -1, 18, -1, 20, 18, },
        // URL_ATTRIBUT
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // BUNDLE_NATIVECODE_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // VERSION_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // BUNDLE_REQUIREDEXECUTIONENVIRONMENT_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // BUNDLE_SYMBOLICNAME_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // EXPORT_PACKAGE_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // FRAGMENT_HOST_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // IMPORT_PACKAGE_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // REQUIRE_BUNDLE_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // IMPORT_SERVICE_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // EXPORT_SERVICE_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // MANIFESTVERSION_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // DYNAMICIMPORT_PACKAGE_ATTRIBUT_STATE
        {-1, -1, -1, -1, 120, 120, -1, 2, 3, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, -1, 121, -1, -1, 4, 1, 6, 5, 121, -1, },
        // DIRECTIVE_INCLUDE_EXPORT_PACKAGE
        {-1, -1, 115, 115, -1, 2, 3, 10, 9, 11, 7, -1, 8, 1, 116, 2, 7, 3, 116, 114, 114, 115, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, },
        // DIRECTIVE_EXCLUDE_EXPORT_PACKAGE
        {-1, -1, 115, 115, -1, 2, 3, 10, 9, 11, 7, -1, 8, 1, 116, 2, 7, 3, 116, 114, 114, 115, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, },
        // DIRECTIVE_MANDATORY_VALUE
        {-1, -1, -1, -1, 120, 120, 0, 2, 3, 9, 7, 120, 120, 1, 2, 7, 3, -1, 114, 114, -1, 9, 9, 4, 1, 6, 5, },
        // DIRECTIVE_USES
        {-1, -1, 115, 115, -1, 0, 2, 3, 10, 9, 11, 7, -1, 8, 1, 116, 2, 7, 3, 116, 114, 114, 115, 9, 9, 4, 1, 8, 8, 116, 116, 116, 116, 116, 116, 6, 5, },
        // DIRECTIVE_USES1
        {-1, -1, -1, -1, -1, 0, 2, 3, 10, 9, 11, 7, -1, 1, 116, 2, 7, 3, 116, 114, 114, -1, 9, 9, 4, 1, 116, 116, 116, 116, 116, 116, 6, 5, },

    };*/

    public static class State
    {
        public final static State MANIFEST_ENTRY = new State(0);
        public final static State BUNDLE_ACTIVATIONPOLICY_STATE = new State(1);
        public final static State BUNDLE_ACTIVATOR_STATE = new State(2);
        public final static State ALL_STRING_STATE = new State(3);
        public final static State SIMPLE_ENTRY_STATE = new State(4);
        public final static State URL = new State(5);
        public final static State BUNDLE_NATIVECODE_STATE = new State(6);
        public final static State VERSION_STATE = new State(7);
        public final static State BUNDLE_REQUIREDEXECUTIONENVIRONMENT_STATE = new State(8);
        public final static State BUNDLE_SYMBOLICNAME_STATE = new State(9);
        public final static State EXPORT_PACKAGE_STATE = new State(10);
        public final static State FRAGMENT_HOST_STATE = new State(11);
        public final static State IMPORT_PACKAGE_STATE = new State(12);
        public final static State CLASSPATH_ENTRY_STATE = new State(13);
        public final static State REQUIRE_BUNDLE_STATE = new State(14);
        public final static State DIGEST_ENTRY_STATE = new State(15);
        public final static State IMPORT_SERVICE_STATE = new State(16);
        public final static State EXPORT_SERVICE_STATE = new State(17);
        public final static State DIRECTIVE_PROCESSOR = new State(18);
        public final static State DIRECTIVE_OSVERSION = new State(19);
        public final static State DIRECTIVE_OSNAME = new State(20);
        public final static State DIRECTIVE_VISIBILITY = new State(21);
        public final static State DIRECTIVE_RESOLUTION = new State(22);
        public final static State DIRECTIVE_EXTENSION = new State(23);
        public final static State DIRECTIVE_FRAGMENT_ATTACHMENT = new State(24);
        public final static State DIRECTIVE_SINGLETON = new State(25);
        public final static State MANIFESTVERSION_STATE = new State(26);
        public final static State SELECTION_FILTER_DIRECTIVE = new State(27);
        public final static State DIRECTIVE_RESOLUTION_REQUIREDEXECUTION_STATE = new State(28);
        public final static State DIRECTIVE_RESOLUTION_IMPORT_STATE = new State(29);
        public final static State SIMPLE_ENTRY_ATTRIBUT_STATE = new State(30);
        public final static State DIRECTIVE_MANDATORY = new State(31);
        public final static State DYNAMICIMPORT_PACKAGE_STATE = new State(32);
        public final static State DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY = new State(33);
        public final static State DIRECTIVE_INCLUDE_ACTIVATIONPOLICY = new State(34);
        public final static State DIRECTIVE_EXCLUDE_ACTIVATIONPOLICY1 = new State(35);
        public final static State DIRECTIVE_INCLUDE_ACTIVATIONPOLICY1 = new State(36);
        public final static State BUNDLE_ACTIVATIONPOLICY_ATTRIBUT_STATE = new State(37);
        public final static State BUNDLE_ACTIVATOR_ATTRIBUT_STATE = new State(38);
        public final static State URL_STATE = new State(39);
        public final static State URL_ATTRIBUT = new State(40);
        public final static State BUNDLE_NATIVECODE_ATTRIBUT_STATE = new State(41);
        public final static State VERSION_ATTRIBUT_STATE = new State(42);
        public final static State BUNDLE_REQUIREDEXECUTIONENVIRONMENT_ATTRIBUT_STATE = new State(43);
        public final static State BUNDLE_SYMBOLICNAME_ATTRIBUT_STATE = new State(44);
        public final static State EXPORT_PACKAGE_ATTRIBUT_STATE = new State(45);
        public final static State FRAGMENT_HOST_ATTRIBUT_STATE = new State(46);
        public final static State IMPORT_PACKAGE_ATTRIBUT_STATE = new State(47);
        public final static State REQUIRE_BUNDLE_ATTRIBUT_STATE = new State(48);
        public final static State IMPORT_SERVICE_ATTRIBUT_STATE = new State(49);
        public final static State EXPORT_SERVICE_ATTRIBUT_STATE = new State(50);
        public final static State MANIFESTVERSION_ATTRIBUT_STATE = new State(51);
        public final static State DYNAMICIMPORT_PACKAGE_ATTRIBUT_STATE = new State(52);
        public final static State DIRECTIVE_INCLUDE_EXPORT_PACKAGE = new State(53);
        public final static State DIRECTIVE_EXCLUDE_EXPORT_PACKAGE = new State(54);
        public final static State DIRECTIVE_MANDATORY_VALUE = new State(55);
        public final static State DIRECTIVE_USES = new State(56);
        public final static State DIRECTIVE_USES1 = new State(57);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
