/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import java.util.*;
import fr.irisa.osgi.manifest.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFragmentHostEntryValue extends PFragmentHostEntryValue
{
    private PUniqueName _uniqueName_;
    private final LinkedList<PFragmentHostParameter> _fragmentHostParameter_ = new LinkedList<PFragmentHostParameter>();

    public AFragmentHostEntryValue()
    {
        // Constructor
    }

    public AFragmentHostEntryValue(
        @SuppressWarnings("hiding") PUniqueName _uniqueName_,
        @SuppressWarnings("hiding") List<PFragmentHostParameter> _fragmentHostParameter_)
    {
        // Constructor
        setUniqueName(_uniqueName_);

        setFragmentHostParameter(_fragmentHostParameter_);

    }

    @Override
    public Object clone()
    {
        return new AFragmentHostEntryValue(
            cloneNode(this._uniqueName_),
            cloneList(this._fragmentHostParameter_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFragmentHostEntryValue(this);
    }

    public PUniqueName getUniqueName()
    {
        return this._uniqueName_;
    }

    public void setUniqueName(PUniqueName node)
    {
        if(this._uniqueName_ != null)
        {
            this._uniqueName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._uniqueName_ = node;
    }

    public LinkedList<PFragmentHostParameter> getFragmentHostParameter()
    {
        return this._fragmentHostParameter_;
    }

    public void setFragmentHostParameter(List<PFragmentHostParameter> list)
    {
        this._fragmentHostParameter_.clear();
        this._fragmentHostParameter_.addAll(list);
        for(PFragmentHostParameter e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._uniqueName_)
            + toString(this._fragmentHostParameter_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._uniqueName_ == child)
        {
            this._uniqueName_ = null;
            return;
        }

        if(this._fragmentHostParameter_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._uniqueName_ == oldChild)
        {
            setUniqueName((PUniqueName) newChild);
            return;
        }

        for(ListIterator<PFragmentHostParameter> i = this._fragmentHostParameter_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFragmentHostParameter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
