/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.analysis;

import java.util.*;
import fr.irisa.osgi.manifest.parser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPManifest().apply(this);
        outStart(node);
    }

    public void inAManifest(AManifest node)
    {
        defaultIn(node);
    }

    public void outAManifest(AManifest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManifest(AManifest node)
    {
        inAManifest(node);
        {
            List<PManifestcontent> copy = new ArrayList<PManifestcontent>(node.getManifestcontent());
            Collections.reverse(copy);
            for(PManifestcontent e : copy)
            {
                e.apply(this);
            }
        }
        outAManifest(node);
    }

    public void inAManifestcontent(AManifestcontent node)
    {
        defaultIn(node);
    }

    public void outAManifestcontent(AManifestcontent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManifestcontent(AManifestcontent node)
    {
        inAManifestcontent(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEol());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getManifestentry() != null)
        {
            node.getManifestentry().apply(this);
        }
        outAManifestcontent(node);
    }

    public void inABundleActivationpolicyEntryManifestentry(ABundleActivationpolicyEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleActivationpolicyEntryManifestentry(ABundleActivationpolicyEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleActivationpolicyEntryManifestentry(ABundleActivationpolicyEntryManifestentry node)
    {
        inABundleActivationpolicyEntryManifestentry(node);
        if(node.getBundleActivationpolicyEntry() != null)
        {
            node.getBundleActivationpolicyEntry().apply(this);
        }
        outABundleActivationpolicyEntryManifestentry(node);
    }

    public void inABundleActivatorEntryManifestentry(ABundleActivatorEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleActivatorEntryManifestentry(ABundleActivatorEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleActivatorEntryManifestentry(ABundleActivatorEntryManifestentry node)
    {
        inABundleActivatorEntryManifestentry(node);
        if(node.getBundleActivatorEntry() != null)
        {
            node.getBundleActivatorEntry().apply(this);
        }
        outABundleActivatorEntryManifestentry(node);
    }

    public void inABundleCategoryEntryManifestentry(ABundleCategoryEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleCategoryEntryManifestentry(ABundleCategoryEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleCategoryEntryManifestentry(ABundleCategoryEntryManifestentry node)
    {
        inABundleCategoryEntryManifestentry(node);
        if(node.getBundleCategoryEntry() != null)
        {
            node.getBundleCategoryEntry().apply(this);
        }
        outABundleCategoryEntryManifestentry(node);
    }

    public void inABundleClasspathEntryManifestentry(ABundleClasspathEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleClasspathEntryManifestentry(ABundleClasspathEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleClasspathEntryManifestentry(ABundleClasspathEntryManifestentry node)
    {
        inABundleClasspathEntryManifestentry(node);
        if(node.getBundleClasspathEntry() != null)
        {
            node.getBundleClasspathEntry().apply(this);
        }
        outABundleClasspathEntryManifestentry(node);
    }

    public void inABundleContactaddressEntryManifestentry(ABundleContactaddressEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleContactaddressEntryManifestentry(ABundleContactaddressEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleContactaddressEntryManifestentry(ABundleContactaddressEntryManifestentry node)
    {
        inABundleContactaddressEntryManifestentry(node);
        if(node.getBundleContactaddressEntry() != null)
        {
            node.getBundleContactaddressEntry().apply(this);
        }
        outABundleContactaddressEntryManifestentry(node);
    }

    public void inABundleCopyrightEntryManifestentry(ABundleCopyrightEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleCopyrightEntryManifestentry(ABundleCopyrightEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleCopyrightEntryManifestentry(ABundleCopyrightEntryManifestentry node)
    {
        inABundleCopyrightEntryManifestentry(node);
        if(node.getBundleCopyrightEntry() != null)
        {
            node.getBundleCopyrightEntry().apply(this);
        }
        outABundleCopyrightEntryManifestentry(node);
    }

    public void inABundleDescriptionEntryManifestentry(ABundleDescriptionEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleDescriptionEntryManifestentry(ABundleDescriptionEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleDescriptionEntryManifestentry(ABundleDescriptionEntryManifestentry node)
    {
        inABundleDescriptionEntryManifestentry(node);
        if(node.getBundleDescriptionEntry() != null)
        {
            node.getBundleDescriptionEntry().apply(this);
        }
        outABundleDescriptionEntryManifestentry(node);
    }

    public void inABundleDocurlEntryManifestentry(ABundleDocurlEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleDocurlEntryManifestentry(ABundleDocurlEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleDocurlEntryManifestentry(ABundleDocurlEntryManifestentry node)
    {
        inABundleDocurlEntryManifestentry(node);
        if(node.getBundleDocurlEntry() != null)
        {
            node.getBundleDocurlEntry().apply(this);
        }
        outABundleDocurlEntryManifestentry(node);
    }

    public void inABundleLocalizationEntryManifestentry(ABundleLocalizationEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleLocalizationEntryManifestentry(ABundleLocalizationEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleLocalizationEntryManifestentry(ABundleLocalizationEntryManifestentry node)
    {
        inABundleLocalizationEntryManifestentry(node);
        if(node.getBundleLocalizationEntry() != null)
        {
            node.getBundleLocalizationEntry().apply(this);
        }
        outABundleLocalizationEntryManifestentry(node);
    }

    public void inABundleManifestversionEntryManifestentry(ABundleManifestversionEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleManifestversionEntryManifestentry(ABundleManifestversionEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleManifestversionEntryManifestentry(ABundleManifestversionEntryManifestentry node)
    {
        inABundleManifestversionEntryManifestentry(node);
        if(node.getBundleManifestversionEntry() != null)
        {
            node.getBundleManifestversionEntry().apply(this);
        }
        outABundleManifestversionEntryManifestentry(node);
    }

    public void inABundleNativecodeEntryManifestentry(ABundleNativecodeEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleNativecodeEntryManifestentry(ABundleNativecodeEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleNativecodeEntryManifestentry(ABundleNativecodeEntryManifestentry node)
    {
        inABundleNativecodeEntryManifestentry(node);
        if(node.getBundleNativecodeEntry() != null)
        {
            node.getBundleNativecodeEntry().apply(this);
        }
        outABundleNativecodeEntryManifestentry(node);
    }

    public void inABundleRequiredexecutionenvironmentEntryManifestentry(ABundleRequiredexecutionenvironmentEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleRequiredexecutionenvironmentEntryManifestentry(ABundleRequiredexecutionenvironmentEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleRequiredexecutionenvironmentEntryManifestentry(ABundleRequiredexecutionenvironmentEntryManifestentry node)
    {
        inABundleRequiredexecutionenvironmentEntryManifestentry(node);
        if(node.getBundleRequiredexecutionenvironmentEntry() != null)
        {
            node.getBundleRequiredexecutionenvironmentEntry().apply(this);
        }
        outABundleRequiredexecutionenvironmentEntryManifestentry(node);
    }

    public void inABundleSymbolicnameEntryManifestentry(ABundleSymbolicnameEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleSymbolicnameEntryManifestentry(ABundleSymbolicnameEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleSymbolicnameEntryManifestentry(ABundleSymbolicnameEntryManifestentry node)
    {
        inABundleSymbolicnameEntryManifestentry(node);
        if(node.getBundleSymbolicnameEntry() != null)
        {
            node.getBundleSymbolicnameEntry().apply(this);
        }
        outABundleSymbolicnameEntryManifestentry(node);
    }

    public void inABundleUpdatelocationEntryManifestentry(ABundleUpdatelocationEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleUpdatelocationEntryManifestentry(ABundleUpdatelocationEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleUpdatelocationEntryManifestentry(ABundleUpdatelocationEntryManifestentry node)
    {
        inABundleUpdatelocationEntryManifestentry(node);
        if(node.getBundleUpdatelocationEntry() != null)
        {
            node.getBundleUpdatelocationEntry().apply(this);
        }
        outABundleUpdatelocationEntryManifestentry(node);
    }

    public void inABundleVendorEntryManifestentry(ABundleVendorEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleVendorEntryManifestentry(ABundleVendorEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleVendorEntryManifestentry(ABundleVendorEntryManifestentry node)
    {
        inABundleVendorEntryManifestentry(node);
        if(node.getBundleVendorEntry() != null)
        {
            node.getBundleVendorEntry().apply(this);
        }
        outABundleVendorEntryManifestentry(node);
    }

    public void inABundleVersionEntryManifestentry(ABundleVersionEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleVersionEntryManifestentry(ABundleVersionEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleVersionEntryManifestentry(ABundleVersionEntryManifestentry node)
    {
        inABundleVersionEntryManifestentry(node);
        if(node.getBundleVersionEntry() != null)
        {
            node.getBundleVersionEntry().apply(this);
        }
        outABundleVersionEntryManifestentry(node);
    }

    public void inADynamicimportPackageEntryManifestentry(ADynamicimportPackageEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outADynamicimportPackageEntryManifestentry(ADynamicimportPackageEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADynamicimportPackageEntryManifestentry(ADynamicimportPackageEntryManifestentry node)
    {
        inADynamicimportPackageEntryManifestentry(node);
        if(node.getDynamicimportPackageEntry() != null)
        {
            node.getDynamicimportPackageEntry().apply(this);
        }
        outADynamicimportPackageEntryManifestentry(node);
    }

    public void inAExportPackageEntryManifestentry(AExportPackageEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outAExportPackageEntryManifestentry(AExportPackageEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportPackageEntryManifestentry(AExportPackageEntryManifestentry node)
    {
        inAExportPackageEntryManifestentry(node);
        if(node.getExportPackageEntry() != null)
        {
            node.getExportPackageEntry().apply(this);
        }
        outAExportPackageEntryManifestentry(node);
    }

    public void inAExportServiceEntryManifestentry(AExportServiceEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outAExportServiceEntryManifestentry(AExportServiceEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportServiceEntryManifestentry(AExportServiceEntryManifestentry node)
    {
        inAExportServiceEntryManifestentry(node);
        if(node.getExportServiceEntry() != null)
        {
            node.getExportServiceEntry().apply(this);
        }
        outAExportServiceEntryManifestentry(node);
    }

    public void inAFragmentHostEntryManifestentry(AFragmentHostEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outAFragmentHostEntryManifestentry(AFragmentHostEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFragmentHostEntryManifestentry(AFragmentHostEntryManifestentry node)
    {
        inAFragmentHostEntryManifestentry(node);
        if(node.getFragmentHostEntry() != null)
        {
            node.getFragmentHostEntry().apply(this);
        }
        outAFragmentHostEntryManifestentry(node);
    }

    public void inAImportPackageEntryManifestentry(AImportPackageEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outAImportPackageEntryManifestentry(AImportPackageEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportPackageEntryManifestentry(AImportPackageEntryManifestentry node)
    {
        inAImportPackageEntryManifestentry(node);
        if(node.getImportPackageEntry() != null)
        {
            node.getImportPackageEntry().apply(this);
        }
        outAImportPackageEntryManifestentry(node);
    }

    public void inAImportServiceEntryManifestentry(AImportServiceEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outAImportServiceEntryManifestentry(AImportServiceEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportServiceEntryManifestentry(AImportServiceEntryManifestentry node)
    {
        inAImportServiceEntryManifestentry(node);
        if(node.getImportServiceEntry() != null)
        {
            node.getImportServiceEntry().apply(this);
        }
        outAImportServiceEntryManifestentry(node);
    }

    public void inARequireBundleEntryManifestentry(ARequireBundleEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outARequireBundleEntryManifestentry(ARequireBundleEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequireBundleEntryManifestentry(ARequireBundleEntryManifestentry node)
    {
        inARequireBundleEntryManifestentry(node);
        if(node.getRequireBundleEntry() != null)
        {
            node.getRequireBundleEntry().apply(this);
        }
        outARequireBundleEntryManifestentry(node);
    }

    public void inABundleNameEntryManifestentry(ABundleNameEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outABundleNameEntryManifestentry(ABundleNameEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleNameEntryManifestentry(ABundleNameEntryManifestentry node)
    {
        inABundleNameEntryManifestentry(node);
        if(node.getBundleNameEntry() != null)
        {
            node.getBundleNameEntry().apply(this);
        }
        outABundleNameEntryManifestentry(node);
    }

    public void inAOtherEntryManifestentry(AOtherEntryManifestentry node)
    {
        defaultIn(node);
    }

    public void outAOtherEntryManifestentry(AOtherEntryManifestentry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherEntryManifestentry(AOtherEntryManifestentry node)
    {
        inAOtherEntryManifestentry(node);
        if(node.getOtherEntry() != null)
        {
            node.getOtherEntry().apply(this);
        }
        outAOtherEntryManifestentry(node);
    }

    public void inABundleNameEntry(ABundleNameEntry node)
    {
        defaultIn(node);
    }

    public void outABundleNameEntry(ABundleNameEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleNameEntry(ABundleNameEntry node)
    {
        inABundleNameEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAllString() != null)
        {
            node.getAllString().apply(this);
        }
        if(node.getBundleName() != null)
        {
            node.getBundleName().apply(this);
        }
        outABundleNameEntry(node);
    }

    public void inASimpleEntryOtherEntry(ASimpleEntryOtherEntry node)
    {
        defaultIn(node);
    }

    public void outASimpleEntryOtherEntry(ASimpleEntryOtherEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleEntryOtherEntry(ASimpleEntryOtherEntry node)
    {
        inASimpleEntryOtherEntry(node);
        if(node.getSimpleEntry() != null)
        {
            node.getSimpleEntry().apply(this);
        }
        outASimpleEntryOtherEntry(node);
    }

    public void inADigestEntryOtherEntry(ADigestEntryOtherEntry node)
    {
        defaultIn(node);
    }

    public void outADigestEntryOtherEntry(ADigestEntryOtherEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADigestEntryOtherEntry(ADigestEntryOtherEntry node)
    {
        inADigestEntryOtherEntry(node);
        if(node.getDigestEntry() != null)
        {
            node.getDigestEntry().apply(this);
        }
        outADigestEntryOtherEntry(node);
    }

    public void inADigestEntry(ADigestEntry node)
    {
        defaultIn(node);
    }

    public void outADigestEntry(ADigestEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADigestEntry(ADigestEntry node)
    {
        inADigestEntry(node);
        if(node.getDigestValue() != null)
        {
            node.getDigestValue().apply(this);
        }
        if(node.getEntryDigest() != null)
        {
            node.getEntryDigest().apply(this);
        }
        outADigestEntry(node);
    }

    public void inASimpleEntry(ASimpleEntry node)
    {
        defaultIn(node);
    }

    public void outASimpleEntry(ASimpleEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleEntry(ASimpleEntry node)
    {
        inASimpleEntry(node);
        if(node.getSimpleEntryValue() != null)
        {
            node.getSimpleEntryValue().apply(this);
        }
        if(node.getEntry() != null)
        {
            node.getEntry().apply(this);
        }
        outASimpleEntry(node);
    }

    public void inASimpleEntryValue(ASimpleEntryValue node)
    {
        defaultIn(node);
    }

    public void outASimpleEntryValue(ASimpleEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleEntryValue(ASimpleEntryValue node)
    {
        inASimpleEntryValue(node);
        {
            List<POtherEntryValueNext> copy = new ArrayList<POtherEntryValueNext>(node.getOtherEntryValueNext());
            Collections.reverse(copy);
            for(POtherEntryValueNext e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOtherEntryValue() != null)
        {
            node.getOtherEntryValue().apply(this);
        }
        outASimpleEntryValue(node);
    }

    public void inAOtherEntryValueNext(AOtherEntryValueNext node)
    {
        defaultIn(node);
    }

    public void outAOtherEntryValueNext(AOtherEntryValueNext node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherEntryValueNext(AOtherEntryValueNext node)
    {
        inAOtherEntryValueNext(node);
        if(node.getOtherEntryValue() != null)
        {
            node.getOtherEntryValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAOtherEntryValueNext(node);
    }

    public void inAOtherEntryValue(AOtherEntryValue node)
    {
        defaultIn(node);
    }

    public void outAOtherEntryValue(AOtherEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherEntryValue(AOtherEntryValue node)
    {
        inAOtherEntryValue(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<POtherValue> copy = new ArrayList<POtherValue>(node.getOtherValue());
            Collections.reverse(copy);
            for(POtherValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSimpleStringValue() != null)
        {
            node.getSimpleStringValue().apply(this);
        }
        outAOtherEntryValue(node);
    }

    public void inAOtherValue(AOtherValue node)
    {
        defaultIn(node);
    }

    public void outAOtherValue(AOtherValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherValue(AOtherValue node)
    {
        inAOtherValue(node);
        if(node.getSimpleStringValue() != null)
        {
            node.getSimpleStringValue().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAOtherValue(node);
    }

    public void inABundleActivationpolicyEntry(ABundleActivationpolicyEntry node)
    {
        defaultIn(node);
    }

    public void outABundleActivationpolicyEntry(ABundleActivationpolicyEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleActivationpolicyEntry(ABundleActivationpolicyEntry node)
    {
        inABundleActivationpolicyEntry(node);
        if(node.getBundleActivationpolicyEntryValue() != null)
        {
            node.getBundleActivationpolicyEntryValue().apply(this);
        }
        if(node.getBundleActivationpolicy() != null)
        {
            node.getBundleActivationpolicy().apply(this);
        }
        outABundleActivationpolicyEntry(node);
    }

    public void inABundleActivationpolicyEntryValue(ABundleActivationpolicyEntryValue node)
    {
        defaultIn(node);
    }

    public void outABundleActivationpolicyEntryValue(ABundleActivationpolicyEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleActivationpolicyEntryValue(ABundleActivationpolicyEntryValue node)
    {
        inABundleActivationpolicyEntryValue(node);
        {
            List<PActivationpolicyOptions> copy = new ArrayList<PActivationpolicyOptions>(node.getActivationpolicyOptions());
            Collections.reverse(copy);
            for(PActivationpolicyOptions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getActivationpolicyValue() != null)
        {
            node.getActivationpolicyValue().apply(this);
        }
        outABundleActivationpolicyEntryValue(node);
    }

    public void inAActivationpolicyValue(AActivationpolicyValue node)
    {
        defaultIn(node);
    }

    public void outAActivationpolicyValue(AActivationpolicyValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActivationpolicyValue(AActivationpolicyValue node)
    {
        inAActivationpolicyValue(node);
        if(node.getLazy() != null)
        {
            node.getLazy().apply(this);
        }
        outAActivationpolicyValue(node);
    }

    public void inADirectiveActivationpolicyOptions(ADirectiveActivationpolicyOptions node)
    {
        defaultIn(node);
    }

    public void outADirectiveActivationpolicyOptions(ADirectiveActivationpolicyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirectiveActivationpolicyOptions(ADirectiveActivationpolicyOptions node)
    {
        inADirectiveActivationpolicyOptions(node);
        if(node.getActivationpolicyDirective() != null)
        {
            node.getActivationpolicyDirective().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADirectiveActivationpolicyOptions(node);
    }

    public void inAAttributeActivationpolicyOptions(AAttributeActivationpolicyOptions node)
    {
        defaultIn(node);
    }

    public void outAAttributeActivationpolicyOptions(AAttributeActivationpolicyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributeActivationpolicyOptions(AAttributeActivationpolicyOptions node)
    {
        inAAttributeActivationpolicyOptions(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAAttributeActivationpolicyOptions(node);
    }

    public void inAIncludeActivationpolicyDirective(AIncludeActivationpolicyDirective node)
    {
        defaultIn(node);
    }

    public void outAIncludeActivationpolicyDirective(AIncludeActivationpolicyDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludeActivationpolicyDirective(AIncludeActivationpolicyDirective node)
    {
        inAIncludeActivationpolicyDirective(node);
        if(node.getActivationPolicyExcludeIncludeValue() != null)
        {
            node.getActivationPolicyExcludeIncludeValue().apply(this);
        }
        if(node.getInclude() != null)
        {
            node.getInclude().apply(this);
        }
        outAIncludeActivationpolicyDirective(node);
    }

    public void inAExcludeActivationpolicyDirective(AExcludeActivationpolicyDirective node)
    {
        defaultIn(node);
    }

    public void outAExcludeActivationpolicyDirective(AExcludeActivationpolicyDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludeActivationpolicyDirective(AExcludeActivationpolicyDirective node)
    {
        inAExcludeActivationpolicyDirective(node);
        if(node.getActivationPolicyExcludeIncludeValue() != null)
        {
            node.getActivationPolicyExcludeIncludeValue().apply(this);
        }
        if(node.getExclude() != null)
        {
            node.getExclude().apply(this);
        }
        outAExcludeActivationpolicyDirective(node);
    }

    public void inAExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue(AExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue node)
    {
        defaultIn(node);
    }

    public void outAExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue(AExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue(AExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue node)
    {
        inAExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        {
            List<PActivationPolicyExcludeIncludeIdentifier> copy = new ArrayList<PActivationPolicyExcludeIncludeIdentifier>(node.getActivationPolicyExcludeIncludeIdentifier());
            Collections.reverse(copy);
            for(PActivationPolicyExcludeIncludeIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPackageName() != null)
        {
            node.getPackageName().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue(node);
    }

    public void inAExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue(AExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue node)
    {
        defaultIn(node);
    }

    public void outAExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue(AExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue(AExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue node)
    {
        inAExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue(node);
        if(node.getPackageName() != null)
        {
            node.getPackageName().apply(this);
        }
        outAExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue(node);
    }

    public void inAActivationPolicyExcludeIncludeIdentifier(AActivationPolicyExcludeIncludeIdentifier node)
    {
        defaultIn(node);
    }

    public void outAActivationPolicyExcludeIncludeIdentifier(AActivationPolicyExcludeIncludeIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActivationPolicyExcludeIncludeIdentifier(AActivationPolicyExcludeIncludeIdentifier node)
    {
        inAActivationPolicyExcludeIncludeIdentifier(node);
        if(node.getPackageName() != null)
        {
            node.getPackageName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAActivationPolicyExcludeIncludeIdentifier(node);
    }

    public void inABundleActivatorEntry(ABundleActivatorEntry node)
    {
        defaultIn(node);
    }

    public void outABundleActivatorEntry(ABundleActivatorEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleActivatorEntry(ABundleActivatorEntry node)
    {
        inABundleActivatorEntry(node);
        if(node.getBundleActivatorEntryValue() != null)
        {
            node.getBundleActivatorEntryValue().apply(this);
        }
        if(node.getBundleActivator() != null)
        {
            node.getBundleActivator().apply(this);
        }
        outABundleActivatorEntry(node);
    }

    public void inABundleActivatorEntryValue(ABundleActivatorEntryValue node)
    {
        defaultIn(node);
    }

    public void outABundleActivatorEntryValue(ABundleActivatorEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleActivatorEntryValue(ABundleActivatorEntryValue node)
    {
        inABundleActivatorEntryValue(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUniqueName() != null)
        {
            node.getUniqueName().apply(this);
        }
        outABundleActivatorEntryValue(node);
    }

    public void inABundleCategoryEntry(ABundleCategoryEntry node)
    {
        defaultIn(node);
    }

    public void outABundleCategoryEntry(ABundleCategoryEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleCategoryEntry(ABundleCategoryEntry node)
    {
        inABundleCategoryEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBundleCategoryEntryValue() != null)
        {
            node.getBundleCategoryEntryValue().apply(this);
        }
        if(node.getBundleCategory() != null)
        {
            node.getBundleCategory().apply(this);
        }
        outABundleCategoryEntry(node);
    }

    public void inABundleCategoryEntryValue(ABundleCategoryEntryValue node)
    {
        defaultIn(node);
    }

    public void outABundleCategoryEntryValue(ABundleCategoryEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleCategoryEntryValue(ABundleCategoryEntryValue node)
    {
        inABundleCategoryEntryValue(node);
        {
            List<PCategoryValue> copy = new ArrayList<PCategoryValue>(node.getCategoryValue());
            Collections.reverse(copy);
            for(PCategoryValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStringEntryValue() != null)
        {
            node.getStringEntryValue().apply(this);
        }
        outABundleCategoryEntryValue(node);
    }

    public void inACategoryValue(ACategoryValue node)
    {
        defaultIn(node);
    }

    public void outACategoryValue(ACategoryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACategoryValue(ACategoryValue node)
    {
        inACategoryValue(node);
        if(node.getStringEntryValue() != null)
        {
            node.getStringEntryValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACategoryValue(node);
    }

    public void inABundleClasspathEntry(ABundleClasspathEntry node)
    {
        defaultIn(node);
    }

    public void outABundleClasspathEntry(ABundleClasspathEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleClasspathEntry(ABundleClasspathEntry node)
    {
        inABundleClasspathEntry(node);
        if(node.getBundleClasspathEntryValue() != null)
        {
            node.getBundleClasspathEntryValue().apply(this);
        }
        if(node.getBundleClasspath() != null)
        {
            node.getBundleClasspath().apply(this);
        }
        outABundleClasspathEntry(node);
    }

    public void inABundleClasspathEntryValue(ABundleClasspathEntryValue node)
    {
        defaultIn(node);
    }

    public void outABundleClasspathEntryValue(ABundleClasspathEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleClasspathEntryValue(ABundleClasspathEntryValue node)
    {
        inABundleClasspathEntryValue(node);
        {
            List<PClasspathValue> copy = new ArrayList<PClasspathValue>(node.getClasspathValue());
            Collections.reverse(copy);
            for(PClasspathValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClasspathEntry() != null)
        {
            node.getClasspathEntry().apply(this);
        }
        outABundleClasspathEntryValue(node);
    }

    public void inAClasspathValue(AClasspathValue node)
    {
        defaultIn(node);
    }

    public void outAClasspathValue(AClasspathValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasspathValue(AClasspathValue node)
    {
        inAClasspathValue(node);
        if(node.getClasspathEntry() != null)
        {
            node.getClasspathEntry().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAClasspathValue(node);
    }

    public void inAClasspathEntry(AClasspathEntry node)
    {
        defaultIn(node);
    }

    public void outAClasspathEntry(AClasspathEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasspathEntry(AClasspathEntry node)
    {
        inAClasspathEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PClasspathEntryValue> copy = new ArrayList<PClasspathEntryValue>(node.getClasspathEntryValue());
            Collections.reverse(copy);
            for(PClasspathEntryValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        outAClasspathEntry(node);
    }

    public void inAClasspathEntryValue(AClasspathEntryValue node)
    {
        defaultIn(node);
    }

    public void outAClasspathEntryValue(AClasspathEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasspathEntryValue(AClasspathEntryValue node)
    {
        inAClasspathEntryValue(node);
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAClasspathEntryValue(node);
    }

    public void inABundleContactaddressEntry(ABundleContactaddressEntry node)
    {
        defaultIn(node);
    }

    public void outABundleContactaddressEntry(ABundleContactaddressEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleContactaddressEntry(ABundleContactaddressEntry node)
    {
        inABundleContactaddressEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAllString() != null)
        {
            node.getAllString().apply(this);
        }
        if(node.getBundleContactaddress() != null)
        {
            node.getBundleContactaddress().apply(this);
        }
        outABundleContactaddressEntry(node);
    }

    public void inABundleCopyrightEntry(ABundleCopyrightEntry node)
    {
        defaultIn(node);
    }

    public void outABundleCopyrightEntry(ABundleCopyrightEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleCopyrightEntry(ABundleCopyrightEntry node)
    {
        inABundleCopyrightEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAllString() != null)
        {
            node.getAllString().apply(this);
        }
        if(node.getBundleCopyright() != null)
        {
            node.getBundleCopyright().apply(this);
        }
        outABundleCopyrightEntry(node);
    }

    public void inABundleDescriptionEntry(ABundleDescriptionEntry node)
    {
        defaultIn(node);
    }

    public void outABundleDescriptionEntry(ABundleDescriptionEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleDescriptionEntry(ABundleDescriptionEntry node)
    {
        inABundleDescriptionEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAllString() != null)
        {
            node.getAllString().apply(this);
        }
        if(node.getBundleDescription() != null)
        {
            node.getBundleDescription().apply(this);
        }
        outABundleDescriptionEntry(node);
    }

    public void inABundleDocurlEntry(ABundleDocurlEntry node)
    {
        defaultIn(node);
    }

    public void outABundleDocurlEntry(ABundleDocurlEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleDocurlEntry(ABundleDocurlEntry node)
    {
        inABundleDocurlEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUrlValue() != null)
        {
            node.getUrlValue().apply(this);
        }
        if(node.getBundleDocurl() != null)
        {
            node.getBundleDocurl().apply(this);
        }
        outABundleDocurlEntry(node);
    }

    public void inABundleLocalizationEntry(ABundleLocalizationEntry node)
    {
        defaultIn(node);
    }

    public void outABundleLocalizationEntry(ABundleLocalizationEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleLocalizationEntry(ABundleLocalizationEntry node)
    {
        inABundleLocalizationEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAllString() != null)
        {
            node.getAllString().apply(this);
        }
        if(node.getBundleLocalization() != null)
        {
            node.getBundleLocalization().apply(this);
        }
        outABundleLocalizationEntry(node);
    }

    public void inABundleManifestversionEntry(ABundleManifestversionEntry node)
    {
        defaultIn(node);
    }

    public void outABundleManifestversionEntry(ABundleManifestversionEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleManifestversionEntry(ABundleManifestversionEntry node)
    {
        inABundleManifestversionEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getManifestversion() != null)
        {
            node.getManifestversion().apply(this);
        }
        if(node.getBundleManifestversion() != null)
        {
            node.getBundleManifestversion().apply(this);
        }
        outABundleManifestversionEntry(node);
    }

    public void inABundleNativecodeEntry(ABundleNativecodeEntry node)
    {
        defaultIn(node);
    }

    public void outABundleNativecodeEntry(ABundleNativecodeEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleNativecodeEntry(ABundleNativecodeEntry node)
    {
        inABundleNativecodeEntry(node);
        if(node.getBundleNativecodeEntryValue() != null)
        {
            node.getBundleNativecodeEntryValue().apply(this);
        }
        if(node.getBundleNativecode() != null)
        {
            node.getBundleNativecode().apply(this);
        }
        outABundleNativecodeEntry(node);
    }

    public void inABundleNativecodeEntryValue(ABundleNativecodeEntryValue node)
    {
        defaultIn(node);
    }

    public void outABundleNativecodeEntryValue(ABundleNativecodeEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleNativecodeEntryValue(ABundleNativecodeEntryValue node)
    {
        inABundleNativecodeEntryValue(node);
        if(node.getNativecodeOptional() != null)
        {
            node.getNativecodeOptional().apply(this);
        }
        {
            List<PNativecodeValue> copy = new ArrayList<PNativecodeValue>(node.getNativecodeValue());
            Collections.reverse(copy);
            for(PNativecodeValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNativecodeEntry() != null)
        {
            node.getNativecodeEntry().apply(this);
        }
        outABundleNativecodeEntryValue(node);
    }

    public void inANativecodeOptional(ANativecodeOptional node)
    {
        defaultIn(node);
    }

    public void outANativecodeOptional(ANativecodeOptional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativecodeOptional(ANativecodeOptional node)
    {
        inANativecodeOptional(node);
        if(node.getOptional() != null)
        {
            node.getOptional().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outANativecodeOptional(node);
    }

    public void inANativecodeValue(ANativecodeValue node)
    {
        defaultIn(node);
    }

    public void outANativecodeValue(ANativecodeValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativecodeValue(ANativecodeValue node)
    {
        inANativecodeValue(node);
        if(node.getNativecodeEntry() != null)
        {
            node.getNativecodeEntry().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outANativecodeValue(node);
    }

    public void inANativecodeEntry(ANativecodeEntry node)
    {
        defaultIn(node);
    }

    public void outANativecodeEntry(ANativecodeEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativecodeEntry(ANativecodeEntry node)
    {
        inANativecodeEntry(node);
        {
            List<PNativecodeParameter> copy = new ArrayList<PNativecodeParameter>(node.getNativecodeParameter());
            Collections.reverse(copy);
            for(PNativecodeParameter e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PNativecodeEntryValue> copy = new ArrayList<PNativecodeEntryValue>(node.getNativecodeEntryValue());
            Collections.reverse(copy);
            for(PNativecodeEntryValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        outANativecodeEntry(node);
    }

    public void inANativecodeEntryValue(ANativecodeEntryValue node)
    {
        defaultIn(node);
    }

    public void outANativecodeEntryValue(ANativecodeEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativecodeEntryValue(ANativecodeEntryValue node)
    {
        inANativecodeEntryValue(node);
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANativecodeEntryValue(node);
    }

    public void inANativecodeDirectiveNativecodeParameter(ANativecodeDirectiveNativecodeParameter node)
    {
        defaultIn(node);
    }

    public void outANativecodeDirectiveNativecodeParameter(ANativecodeDirectiveNativecodeParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativecodeDirectiveNativecodeParameter(ANativecodeDirectiveNativecodeParameter node)
    {
        inANativecodeDirectiveNativecodeParameter(node);
        if(node.getNativecodeDirective() != null)
        {
            node.getNativecodeDirective().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANativecodeDirectiveNativecodeParameter(node);
    }

    public void inANativecodeAttributeNativecodeParameter(ANativecodeAttributeNativecodeParameter node)
    {
        defaultIn(node);
    }

    public void outANativecodeAttributeNativecodeParameter(ANativecodeAttributeNativecodeParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativecodeAttributeNativecodeParameter(ANativecodeAttributeNativecodeParameter node)
    {
        inANativecodeAttributeNativecodeParameter(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outANativecodeAttributeNativecodeParameter(node);
    }

    public void inAOsnameDirectiveNativecodeDirective(AOsnameDirectiveNativecodeDirective node)
    {
        defaultIn(node);
    }

    public void outAOsnameDirectiveNativecodeDirective(AOsnameDirectiveNativecodeDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameDirectiveNativecodeDirective(AOsnameDirectiveNativecodeDirective node)
    {
        inAOsnameDirectiveNativecodeDirective(node);
        if(node.getOsnameDirective() != null)
        {
            node.getOsnameDirective().apply(this);
        }
        outAOsnameDirectiveNativecodeDirective(node);
    }

    public void inAOsversionDirectiveNativecodeDirective(AOsversionDirectiveNativecodeDirective node)
    {
        defaultIn(node);
    }

    public void outAOsversionDirectiveNativecodeDirective(AOsversionDirectiveNativecodeDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsversionDirectiveNativecodeDirective(AOsversionDirectiveNativecodeDirective node)
    {
        inAOsversionDirectiveNativecodeDirective(node);
        if(node.getOsversionDirective() != null)
        {
            node.getOsversionDirective().apply(this);
        }
        outAOsversionDirectiveNativecodeDirective(node);
    }

    public void inAProcessorDirectiveNativecodeDirective(AProcessorDirectiveNativecodeDirective node)
    {
        defaultIn(node);
    }

    public void outAProcessorDirectiveNativecodeDirective(AProcessorDirectiveNativecodeDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorDirectiveNativecodeDirective(AProcessorDirectiveNativecodeDirective node)
    {
        inAProcessorDirectiveNativecodeDirective(node);
        if(node.getProcessorDirective() != null)
        {
            node.getProcessorDirective().apply(this);
        }
        outAProcessorDirectiveNativecodeDirective(node);
    }

    public void inALanguageDirectiveNativecodeDirective(ALanguageDirectiveNativecodeDirective node)
    {
        defaultIn(node);
    }

    public void outALanguageDirectiveNativecodeDirective(ALanguageDirectiveNativecodeDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALanguageDirectiveNativecodeDirective(ALanguageDirectiveNativecodeDirective node)
    {
        inALanguageDirectiveNativecodeDirective(node);
        if(node.getLanguageDirective() != null)
        {
            node.getLanguageDirective().apply(this);
        }
        outALanguageDirectiveNativecodeDirective(node);
    }

    public void inASelectionFilterDirectiveNativecodeDirective(ASelectionFilterDirectiveNativecodeDirective node)
    {
        defaultIn(node);
    }

    public void outASelectionFilterDirectiveNativecodeDirective(ASelectionFilterDirectiveNativecodeDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectionFilterDirectiveNativecodeDirective(ASelectionFilterDirectiveNativecodeDirective node)
    {
        inASelectionFilterDirectiveNativecodeDirective(node);
        if(node.getSelectionFilterDirective() != null)
        {
            node.getSelectionFilterDirective().apply(this);
        }
        outASelectionFilterDirectiveNativecodeDirective(node);
    }

    public void inAOsnameDirective(AOsnameDirective node)
    {
        defaultIn(node);
    }

    public void outAOsnameDirective(AOsnameDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameDirective(AOsnameDirective node)
    {
        inAOsnameDirective(node);
        if(node.getOsnameValue() != null)
        {
            node.getOsnameValue().apply(this);
        }
        if(node.getOsname() != null)
        {
            node.getOsname().apply(this);
        }
        outAOsnameDirective(node);
    }

    public void inAOsversionDirective(AOsversionDirective node)
    {
        defaultIn(node);
    }

    public void outAOsversionDirective(AOsversionDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsversionDirective(AOsversionDirective node)
    {
        inAOsversionDirective(node);
        if(node.getVersionRange() != null)
        {
            node.getVersionRange().apply(this);
        }
        if(node.getOsversion() != null)
        {
            node.getOsversion().apply(this);
        }
        outAOsversionDirective(node);
    }

    public void inAProcessorDirective(AProcessorDirective node)
    {
        defaultIn(node);
    }

    public void outAProcessorDirective(AProcessorDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorDirective(AProcessorDirective node)
    {
        inAProcessorDirective(node);
        if(node.getProcessorValue() != null)
        {
            node.getProcessorValue().apply(this);
        }
        if(node.getProcessor() != null)
        {
            node.getProcessor().apply(this);
        }
        outAProcessorDirective(node);
    }

    public void inALanguageDirective(ALanguageDirective node)
    {
        defaultIn(node);
    }

    public void outALanguageDirective(ALanguageDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALanguageDirective(ALanguageDirective node)
    {
        inALanguageDirective(node);
        if(node.getLanguageValue() != null)
        {
            node.getLanguageValue().apply(this);
        }
        if(node.getLanguage() != null)
        {
            node.getLanguage().apply(this);
        }
        outALanguageDirective(node);
    }

    public void inASelectionFilterDirective(ASelectionFilterDirective node)
    {
        defaultIn(node);
    }

    public void outASelectionFilterDirective(ASelectionFilterDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectionFilterDirective(ASelectionFilterDirective node)
    {
        inASelectionFilterDirective(node);
        if(node.getSelectionFilterValue() != null)
        {
            node.getSelectionFilterValue().apply(this);
        }
        if(node.getSelectionFilter() != null)
        {
            node.getSelectionFilter().apply(this);
        }
        outASelectionFilterDirective(node);
    }

    public void inABundleRequiredexecutionenvironmentEntry(ABundleRequiredexecutionenvironmentEntry node)
    {
        defaultIn(node);
    }

    public void outABundleRequiredexecutionenvironmentEntry(ABundleRequiredexecutionenvironmentEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleRequiredexecutionenvironmentEntry(ABundleRequiredexecutionenvironmentEntry node)
    {
        inABundleRequiredexecutionenvironmentEntry(node);
        if(node.getBundleRequiredexecutionenvironmentEntryValue() != null)
        {
            node.getBundleRequiredexecutionenvironmentEntryValue().apply(this);
        }
        if(node.getBundleRequiredexecutionenvironment() != null)
        {
            node.getBundleRequiredexecutionenvironment().apply(this);
        }
        outABundleRequiredexecutionenvironmentEntry(node);
    }

    public void inABundleRequiredexecutionenvironmentEntryValue(ABundleRequiredexecutionenvironmentEntryValue node)
    {
        defaultIn(node);
    }

    public void outABundleRequiredexecutionenvironmentEntryValue(ABundleRequiredexecutionenvironmentEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleRequiredexecutionenvironmentEntryValue(ABundleRequiredexecutionenvironmentEntryValue node)
    {
        inABundleRequiredexecutionenvironmentEntryValue(node);
        {
            List<PRequiredexecutionenvironmentValue> copy = new ArrayList<PRequiredexecutionenvironmentValue>(node.getRequiredexecutionenvironmentValue());
            Collections.reverse(copy);
            for(PRequiredexecutionenvironmentValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRequiredexecutionenvironment() != null)
        {
            node.getRequiredexecutionenvironment().apply(this);
        }
        outABundleRequiredexecutionenvironmentEntryValue(node);
    }

    public void inARequiredexecutionenvironmentValue(ARequiredexecutionenvironmentValue node)
    {
        defaultIn(node);
    }

    public void outARequiredexecutionenvironmentValue(ARequiredexecutionenvironmentValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequiredexecutionenvironmentValue(ARequiredexecutionenvironmentValue node)
    {
        inARequiredexecutionenvironmentValue(node);
        if(node.getRequiredexecutionenvironment() != null)
        {
            node.getRequiredexecutionenvironment().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outARequiredexecutionenvironmentValue(node);
    }

    public void inARequiredexecutionenvironment(ARequiredexecutionenvironment node)
    {
        defaultIn(node);
    }

    public void outARequiredexecutionenvironment(ARequiredexecutionenvironment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequiredexecutionenvironment(ARequiredexecutionenvironment node)
    {
        inARequiredexecutionenvironment(node);
        if(node.getIdentifierRequiredProfile() != null)
        {
            node.getIdentifierRequiredProfile().apply(this);
        }
        if(node.getIdentifierRequiredConfiguration() != null)
        {
            node.getIdentifierRequiredConfiguration().apply(this);
        }
        outARequiredexecutionenvironment(node);
    }

    public void inABundleSymbolicnameEntry(ABundleSymbolicnameEntry node)
    {
        defaultIn(node);
    }

    public void outABundleSymbolicnameEntry(ABundleSymbolicnameEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleSymbolicnameEntry(ABundleSymbolicnameEntry node)
    {
        inABundleSymbolicnameEntry(node);
        {
            List<PSymbolicnameOption> copy = new ArrayList<PSymbolicnameOption>(node.getSymbolicnameOption());
            Collections.reverse(copy);
            for(PSymbolicnameOption e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUniqueName() != null)
        {
            node.getUniqueName().apply(this);
        }
        if(node.getBundleSymbolicname() != null)
        {
            node.getBundleSymbolicname().apply(this);
        }
        outABundleSymbolicnameEntry(node);
    }

    public void inASymbolicnameDirectiveSymbolicnameOption(ASymbolicnameDirectiveSymbolicnameOption node)
    {
        defaultIn(node);
    }

    public void outASymbolicnameDirectiveSymbolicnameOption(ASymbolicnameDirectiveSymbolicnameOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolicnameDirectiveSymbolicnameOption(ASymbolicnameDirectiveSymbolicnameOption node)
    {
        inASymbolicnameDirectiveSymbolicnameOption(node);
        if(node.getSymbolicnameDirective() != null)
        {
            node.getSymbolicnameDirective().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASymbolicnameDirectiveSymbolicnameOption(node);
    }

    public void inASymbolicnameAttributeSymbolicnameOption(ASymbolicnameAttributeSymbolicnameOption node)
    {
        defaultIn(node);
    }

    public void outASymbolicnameAttributeSymbolicnameOption(ASymbolicnameAttributeSymbolicnameOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolicnameAttributeSymbolicnameOption(ASymbolicnameAttributeSymbolicnameOption node)
    {
        inASymbolicnameAttributeSymbolicnameOption(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outASymbolicnameAttributeSymbolicnameOption(node);
    }

    public void inASingletonSymbolicnameDirective(ASingletonSymbolicnameDirective node)
    {
        defaultIn(node);
    }

    public void outASingletonSymbolicnameDirective(ASingletonSymbolicnameDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingletonSymbolicnameDirective(ASingletonSymbolicnameDirective node)
    {
        inASingletonSymbolicnameDirective(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        if(node.getSingleton() != null)
        {
            node.getSingleton().apply(this);
        }
        outASingletonSymbolicnameDirective(node);
    }

    public void inAFragmentAttachmentSymbolicnameDirective(AFragmentAttachmentSymbolicnameDirective node)
    {
        defaultIn(node);
    }

    public void outAFragmentAttachmentSymbolicnameDirective(AFragmentAttachmentSymbolicnameDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFragmentAttachmentSymbolicnameDirective(AFragmentAttachmentSymbolicnameDirective node)
    {
        inAFragmentAttachmentSymbolicnameDirective(node);
        if(node.getFragmentAttachmentValue() != null)
        {
            node.getFragmentAttachmentValue().apply(this);
        }
        if(node.getFragmentAttachment() != null)
        {
            node.getFragmentAttachment().apply(this);
        }
        outAFragmentAttachmentSymbolicnameDirective(node);
    }

    public void inABundleUpdatelocationEntry(ABundleUpdatelocationEntry node)
    {
        defaultIn(node);
    }

    public void outABundleUpdatelocationEntry(ABundleUpdatelocationEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleUpdatelocationEntry(ABundleUpdatelocationEntry node)
    {
        inABundleUpdatelocationEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUrlValue() != null)
        {
            node.getUrlValue().apply(this);
        }
        if(node.getBundleUpdatelocation() != null)
        {
            node.getBundleUpdatelocation().apply(this);
        }
        outABundleUpdatelocationEntry(node);
    }

    public void inABundleVendorEntry(ABundleVendorEntry node)
    {
        defaultIn(node);
    }

    public void outABundleVendorEntry(ABundleVendorEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleVendorEntry(ABundleVendorEntry node)
    {
        inABundleVendorEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAllString() != null)
        {
            node.getAllString().apply(this);
        }
        if(node.getBundleVendor() != null)
        {
            node.getBundleVendor().apply(this);
        }
        outABundleVendorEntry(node);
    }

    public void inABundleVersionEntry(ABundleVersionEntry node)
    {
        defaultIn(node);
    }

    public void outABundleVersionEntry(ABundleVersionEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABundleVersionEntry(ABundleVersionEntry node)
    {
        inABundleVersionEntry(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMajorVersionEntry() != null)
        {
            node.getMajorVersionEntry().apply(this);
        }
        if(node.getBundleVersion() != null)
        {
            node.getBundleVersion().apply(this);
        }
        outABundleVersionEntry(node);
    }

    public void inAVersionIntervalVersionRange(AVersionIntervalVersionRange node)
    {
        defaultIn(node);
    }

    public void outAVersionIntervalVersionRange(AVersionIntervalVersionRange node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVersionIntervalVersionRange(AVersionIntervalVersionRange node)
    {
        inAVersionIntervalVersionRange(node);
        if(node.getVersionInterval() != null)
        {
            node.getVersionInterval().apply(this);
        }
        outAVersionIntervalVersionRange(node);
    }

    public void inAVersionAtleastVersionRange(AVersionAtleastVersionRange node)
    {
        defaultIn(node);
    }

    public void outAVersionAtleastVersionRange(AVersionAtleastVersionRange node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVersionAtleastVersionRange(AVersionAtleastVersionRange node)
    {
        inAVersionAtleastVersionRange(node);
        if(node.getVersionAtleast() != null)
        {
            node.getVersionAtleast().apply(this);
        }
        outAVersionAtleastVersionRange(node);
    }

    public void inAVersionInterval(AVersionInterval node)
    {
        defaultIn(node);
    }

    public void outAVersionInterval(AVersionInterval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVersionInterval(AVersionInterval node)
    {
        inAVersionInterval(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getMaxVersion() != null)
        {
            node.getMaxVersion().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMinVersion() != null)
        {
            node.getMinVersion().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        outAVersionInterval(node);
    }

    public void inAVersionAtleast(AVersionAtleast node)
    {
        defaultIn(node);
    }

    public void outAVersionAtleast(AVersionAtleast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVersionAtleast(AVersionAtleast node)
    {
        inAVersionAtleast(node);
        if(node.getMajorVersionEntry() != null)
        {
            node.getMajorVersionEntry().apply(this);
        }
        outAVersionAtleast(node);
    }

    public void inAQuotedVersionMajorVersionEntry(AQuotedVersionMajorVersionEntry node)
    {
        defaultIn(node);
    }

    public void outAQuotedVersionMajorVersionEntry(AQuotedVersionMajorVersionEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuotedVersionMajorVersionEntry(AQuotedVersionMajorVersionEntry node)
    {
        inAQuotedVersionMajorVersionEntry(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMajorVersion() != null)
        {
            node.getMajorVersion().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAQuotedVersionMajorVersionEntry(node);
    }

    public void inAUnquotedVersionMajorVersionEntry(AUnquotedVersionMajorVersionEntry node)
    {
        defaultIn(node);
    }

    public void outAUnquotedVersionMajorVersionEntry(AUnquotedVersionMajorVersionEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnquotedVersionMajorVersionEntry(AUnquotedVersionMajorVersionEntry node)
    {
        inAUnquotedVersionMajorVersionEntry(node);
        if(node.getMajorVersion() != null)
        {
            node.getMajorVersion().apply(this);
        }
        outAUnquotedVersionMajorVersionEntry(node);
    }

    public void inAMajorVersion(AMajorVersion node)
    {
        defaultIn(node);
    }

    public void outAMajorVersion(AMajorVersion node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMajorVersion(AMajorVersion node)
    {
        inAMajorVersion(node);
        if(node.getMinorVersion() != null)
        {
            node.getMinorVersion().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAMajorVersion(node);
    }

    public void inAMinorVersion(AMinorVersion node)
    {
        defaultIn(node);
    }

    public void outAMinorVersion(AMinorVersion node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinorVersion(AMinorVersion node)
    {
        inAMinorVersion(node);
        if(node.getMicroVersion() != null)
        {
            node.getMicroVersion().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMinorVersion(node);
    }

    public void inAMicroVersion(AMicroVersion node)
    {
        defaultIn(node);
    }

    public void outAMicroVersion(AMicroVersion node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMicroVersion(AMicroVersion node)
    {
        inAMicroVersion(node);
        if(node.getQualifierVersion() != null)
        {
            node.getQualifierVersion().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMicroVersion(node);
    }

    public void inAQualifierQualifierVersion(AQualifierQualifierVersion node)
    {
        defaultIn(node);
    }

    public void outAQualifierQualifierVersion(AQualifierQualifierVersion node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQualifierQualifierVersion(AQualifierQualifierVersion node)
    {
        inAQualifierQualifierVersion(node);
        if(node.getQualifier() != null)
        {
            node.getQualifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAQualifierQualifierVersion(node);
    }

    public void inANumberQualifierVersion(ANumberQualifierVersion node)
    {
        defaultIn(node);
    }

    public void outANumberQualifierVersion(ANumberQualifierVersion node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberQualifierVersion(ANumberQualifierVersion node)
    {
        inANumberQualifierVersion(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outANumberQualifierVersion(node);
    }

    public void inADynamicimportPackageEntry(ADynamicimportPackageEntry node)
    {
        defaultIn(node);
    }

    public void outADynamicimportPackageEntry(ADynamicimportPackageEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADynamicimportPackageEntry(ADynamicimportPackageEntry node)
    {
        inADynamicimportPackageEntry(node);
        if(node.getDynamicimportPackageEntryValue() != null)
        {
            node.getDynamicimportPackageEntryValue().apply(this);
        }
        if(node.getDynamicimportPackage() != null)
        {
            node.getDynamicimportPackage().apply(this);
        }
        outADynamicimportPackageEntry(node);
    }

    public void inADynamicimportPackageEntryValue(ADynamicimportPackageEntryValue node)
    {
        defaultIn(node);
    }

    public void outADynamicimportPackageEntryValue(ADynamicimportPackageEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADynamicimportPackageEntryValue(ADynamicimportPackageEntryValue node)
    {
        inADynamicimportPackageEntryValue(node);
        {
            List<PDynamicimportPackageValue> copy = new ArrayList<PDynamicimportPackageValue>(node.getDynamicimportPackageValue());
            Collections.reverse(copy);
            for(PDynamicimportPackageValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDynamicDescription() != null)
        {
            node.getDynamicDescription().apply(this);
        }
        outADynamicimportPackageEntryValue(node);
    }

    public void inADynamicDescription(ADynamicDescription node)
    {
        defaultIn(node);
    }

    public void outADynamicDescription(ADynamicDescription node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADynamicDescription(ADynamicDescription node)
    {
        inADynamicDescription(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDynamicimportPackageNames> copy = new ArrayList<PDynamicimportPackageNames>(node.getDynamicimportPackageNames());
            Collections.reverse(copy);
            for(PDynamicimportPackageNames e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPackageNameWildcard() != null)
        {
            node.getPackageNameWildcard().apply(this);
        }
        outADynamicDescription(node);
    }

    public void inADynamicimportPackageNames(ADynamicimportPackageNames node)
    {
        defaultIn(node);
    }

    public void outADynamicimportPackageNames(ADynamicimportPackageNames node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADynamicimportPackageNames(ADynamicimportPackageNames node)
    {
        inADynamicimportPackageNames(node);
        if(node.getPackageNameWildcard() != null)
        {
            node.getPackageNameWildcard().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADynamicimportPackageNames(node);
    }

    public void inADynamicimportPackageValue(ADynamicimportPackageValue node)
    {
        defaultIn(node);
    }

    public void outADynamicimportPackageValue(ADynamicimportPackageValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADynamicimportPackageValue(ADynamicimportPackageValue node)
    {
        inADynamicimportPackageValue(node);
        if(node.getDynamicDescription() != null)
        {
            node.getDynamicDescription().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outADynamicimportPackageValue(node);
    }

    public void inAExportPackageEntry(AExportPackageEntry node)
    {
        defaultIn(node);
    }

    public void outAExportPackageEntry(AExportPackageEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportPackageEntry(AExportPackageEntry node)
    {
        inAExportPackageEntry(node);
        if(node.getExportPackageEntryValue1() != null)
        {
            node.getExportPackageEntryValue1().apply(this);
        }
        if(node.getExportPackage() != null)
        {
            node.getExportPackage().apply(this);
        }
        outAExportPackageEntry(node);
    }

    public void inAExportPackageEntryValue1(AExportPackageEntryValue1 node)
    {
        defaultIn(node);
    }

    public void outAExportPackageEntryValue1(AExportPackageEntryValue1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportPackageEntryValue1(AExportPackageEntryValue1 node)
    {
        inAExportPackageEntryValue1(node);
        {
            List<PExportPackageValue> copy = new ArrayList<PExportPackageValue>(node.getExportPackageValue());
            Collections.reverse(copy);
            for(PExportPackageValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExportPackageEntryValue() != null)
        {
            node.getExportPackageEntryValue().apply(this);
        }
        outAExportPackageEntryValue1(node);
    }

    public void inAExportPackageValue(AExportPackageValue node)
    {
        defaultIn(node);
    }

    public void outAExportPackageValue(AExportPackageValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportPackageValue(AExportPackageValue node)
    {
        inAExportPackageValue(node);
        if(node.getExportPackageEntryValue() != null)
        {
            node.getExportPackageEntryValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExportPackageValue(node);
    }

    public void inAExportPackageEntryValue(AExportPackageEntryValue node)
    {
        defaultIn(node);
    }

    public void outAExportPackageEntryValue(AExportPackageEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportPackageEntryValue(AExportPackageEntryValue node)
    {
        inAExportPackageEntryValue(node);
        {
            List<PExportPackageParameter> copy = new ArrayList<PExportPackageParameter>(node.getExportPackageParameter());
            Collections.reverse(copy);
            for(PExportPackageParameter e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PPackageNames> copy = new ArrayList<PPackageNames>(node.getPackageNames());
            Collections.reverse(copy);
            for(PPackageNames e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPackageName() != null)
        {
            node.getPackageName().apply(this);
        }
        outAExportPackageEntryValue(node);
    }

    public void inAPackageNames(APackageNames node)
    {
        defaultIn(node);
    }

    public void outAPackageNames(APackageNames node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPackageNames(APackageNames node)
    {
        inAPackageNames(node);
        if(node.getPackageName() != null)
        {
            node.getPackageName().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPackageNames(node);
    }

    public void inAExportPackageDirectiveExportPackageParameter(AExportPackageDirectiveExportPackageParameter node)
    {
        defaultIn(node);
    }

    public void outAExportPackageDirectiveExportPackageParameter(AExportPackageDirectiveExportPackageParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportPackageDirectiveExportPackageParameter(AExportPackageDirectiveExportPackageParameter node)
    {
        inAExportPackageDirectiveExportPackageParameter(node);
        if(node.getExportPackageDirective() != null)
        {
            node.getExportPackageDirective().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAExportPackageDirectiveExportPackageParameter(node);
    }

    public void inAExportPackageAttributeExportPackageParameter(AExportPackageAttributeExportPackageParameter node)
    {
        defaultIn(node);
    }

    public void outAExportPackageAttributeExportPackageParameter(AExportPackageAttributeExportPackageParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportPackageAttributeExportPackageParameter(AExportPackageAttributeExportPackageParameter node)
    {
        inAExportPackageAttributeExportPackageParameter(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAExportPackageAttributeExportPackageParameter(node);
    }

    public void inAUsesExportPackageDirective(AUsesExportPackageDirective node)
    {
        defaultIn(node);
    }

    public void outAUsesExportPackageDirective(AUsesExportPackageDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUsesExportPackageDirective(AUsesExportPackageDirective node)
    {
        inAUsesExportPackageDirective(node);
        if(node.getExportPackageUseExcludeIncludeValue() != null)
        {
            node.getExportPackageUseExcludeIncludeValue().apply(this);
        }
        if(node.getUses() != null)
        {
            node.getUses().apply(this);
        }
        outAUsesExportPackageDirective(node);
    }

    public void inAIncludeExportPackageDirective(AIncludeExportPackageDirective node)
    {
        defaultIn(node);
    }

    public void outAIncludeExportPackageDirective(AIncludeExportPackageDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludeExportPackageDirective(AIncludeExportPackageDirective node)
    {
        inAIncludeExportPackageDirective(node);
        if(node.getExportPackageUseExcludeIncludeValue() != null)
        {
            node.getExportPackageUseExcludeIncludeValue().apply(this);
        }
        if(node.getInclude() != null)
        {
            node.getInclude().apply(this);
        }
        outAIncludeExportPackageDirective(node);
    }

    public void inAExcludeExportPackageDirective(AExcludeExportPackageDirective node)
    {
        defaultIn(node);
    }

    public void outAExcludeExportPackageDirective(AExcludeExportPackageDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludeExportPackageDirective(AExcludeExportPackageDirective node)
    {
        inAExcludeExportPackageDirective(node);
        if(node.getExportPackageUseExcludeIncludeValue() != null)
        {
            node.getExportPackageUseExcludeIncludeValue().apply(this);
        }
        if(node.getExclude() != null)
        {
            node.getExclude().apply(this);
        }
        outAExcludeExportPackageDirective(node);
    }

    public void inAMandatoryExportPackageDirective(AMandatoryExportPackageDirective node)
    {
        defaultIn(node);
    }

    public void outAMandatoryExportPackageDirective(AMandatoryExportPackageDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMandatoryExportPackageDirective(AMandatoryExportPackageDirective node)
    {
        inAMandatoryExportPackageDirective(node);
        if(node.getMandatoryValue() != null)
        {
            node.getMandatoryValue().apply(this);
        }
        if(node.getMandatory() != null)
        {
            node.getMandatory().apply(this);
        }
        outAMandatoryExportPackageDirective(node);
    }

    public void inAUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue(AUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue node)
    {
        defaultIn(node);
    }

    public void outAUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue(AUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue(AUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue node)
    {
        inAUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        {
            List<PExportPackageUseExcludeIncludeIdentifier> copy = new ArrayList<PExportPackageUseExcludeIncludeIdentifier>(node.getExportPackageUseExcludeIncludeIdentifier());
            Collections.reverse(copy);
            for(PExportPackageUseExcludeIncludeIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUniqueNameWildcard() != null)
        {
            node.getUniqueNameWildcard().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue(node);
    }

    public void inAUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue(AUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue node)
    {
        defaultIn(node);
    }

    public void outAUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue(AUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue(AUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue node)
    {
        inAUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue(node);
        if(node.getUniqueNameWildcard() != null)
        {
            node.getUniqueNameWildcard().apply(this);
        }
        outAUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue(node);
    }

    public void inAExportPackageUseExcludeIncludeIdentifier(AExportPackageUseExcludeIncludeIdentifier node)
    {
        defaultIn(node);
    }

    public void outAExportPackageUseExcludeIncludeIdentifier(AExportPackageUseExcludeIncludeIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportPackageUseExcludeIncludeIdentifier(AExportPackageUseExcludeIncludeIdentifier node)
    {
        inAExportPackageUseExcludeIncludeIdentifier(node);
        if(node.getUniqueNameWildcard() != null)
        {
            node.getUniqueNameWildcard().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExportPackageUseExcludeIncludeIdentifier(node);
    }

    public void inAMandatoryManyAttributesMandatoryValue(AMandatoryManyAttributesMandatoryValue node)
    {
        defaultIn(node);
    }

    public void outAMandatoryManyAttributesMandatoryValue(AMandatoryManyAttributesMandatoryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMandatoryManyAttributesMandatoryValue(AMandatoryManyAttributesMandatoryValue node)
    {
        inAMandatoryManyAttributesMandatoryValue(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        {
            List<PMandatoryString> copy = new ArrayList<PMandatoryString>(node.getMandatoryString());
            Collections.reverse(copy);
            for(PMandatoryString e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUnquotedString() != null)
        {
            node.getUnquotedString().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMandatoryManyAttributesMandatoryValue(node);
    }

    public void inAMandatoryOneAttributeMandatoryValue(AMandatoryOneAttributeMandatoryValue node)
    {
        defaultIn(node);
    }

    public void outAMandatoryOneAttributeMandatoryValue(AMandatoryOneAttributeMandatoryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMandatoryOneAttributeMandatoryValue(AMandatoryOneAttributeMandatoryValue node)
    {
        inAMandatoryOneAttributeMandatoryValue(node);
        if(node.getUnquotedString() != null)
        {
            node.getUnquotedString().apply(this);
        }
        outAMandatoryOneAttributeMandatoryValue(node);
    }

    public void inAMandatoryString(AMandatoryString node)
    {
        defaultIn(node);
    }

    public void outAMandatoryString(AMandatoryString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMandatoryString(AMandatoryString node)
    {
        inAMandatoryString(node);
        if(node.getUnquotedString() != null)
        {
            node.getUnquotedString().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMandatoryString(node);
    }

    public void inAFragmentHostEntry(AFragmentHostEntry node)
    {
        defaultIn(node);
    }

    public void outAFragmentHostEntry(AFragmentHostEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFragmentHostEntry(AFragmentHostEntry node)
    {
        inAFragmentHostEntry(node);
        if(node.getFragmentHostEntryValue() != null)
        {
            node.getFragmentHostEntryValue().apply(this);
        }
        if(node.getFragmentHost() != null)
        {
            node.getFragmentHost().apply(this);
        }
        outAFragmentHostEntry(node);
    }

    public void inAFragmentHostEntryValue(AFragmentHostEntryValue node)
    {
        defaultIn(node);
    }

    public void outAFragmentHostEntryValue(AFragmentHostEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFragmentHostEntryValue(AFragmentHostEntryValue node)
    {
        inAFragmentHostEntryValue(node);
        {
            List<PFragmentHostParameter> copy = new ArrayList<PFragmentHostParameter>(node.getFragmentHostParameter());
            Collections.reverse(copy);
            for(PFragmentHostParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUniqueName() != null)
        {
            node.getUniqueName().apply(this);
        }
        outAFragmentHostEntryValue(node);
    }

    public void inAFragmentHostDirectiveFragmentHostParameter(AFragmentHostDirectiveFragmentHostParameter node)
    {
        defaultIn(node);
    }

    public void outAFragmentHostDirectiveFragmentHostParameter(AFragmentHostDirectiveFragmentHostParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFragmentHostDirectiveFragmentHostParameter(AFragmentHostDirectiveFragmentHostParameter node)
    {
        inAFragmentHostDirectiveFragmentHostParameter(node);
        if(node.getFragmentHostDirective() != null)
        {
            node.getFragmentHostDirective().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFragmentHostDirectiveFragmentHostParameter(node);
    }

    public void inAFragmentHostAttributeFragmentHostParameter(AFragmentHostAttributeFragmentHostParameter node)
    {
        defaultIn(node);
    }

    public void outAFragmentHostAttributeFragmentHostParameter(AFragmentHostAttributeFragmentHostParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFragmentHostAttributeFragmentHostParameter(AFragmentHostAttributeFragmentHostParameter node)
    {
        inAFragmentHostAttributeFragmentHostParameter(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAFragmentHostAttributeFragmentHostParameter(node);
    }

    public void inAFragmentHostDirective(AFragmentHostDirective node)
    {
        defaultIn(node);
    }

    public void outAFragmentHostDirective(AFragmentHostDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFragmentHostDirective(AFragmentHostDirective node)
    {
        inAFragmentHostDirective(node);
        if(node.getExtensionValue() != null)
        {
            node.getExtensionValue().apply(this);
        }
        if(node.getExtension() != null)
        {
            node.getExtension().apply(this);
        }
        outAFragmentHostDirective(node);
    }

    public void inAImportPackageEntry(AImportPackageEntry node)
    {
        defaultIn(node);
    }

    public void outAImportPackageEntry(AImportPackageEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportPackageEntry(AImportPackageEntry node)
    {
        inAImportPackageEntry(node);
        if(node.getImportPackageEntryValue1() != null)
        {
            node.getImportPackageEntryValue1().apply(this);
        }
        if(node.getImportPackage() != null)
        {
            node.getImportPackage().apply(this);
        }
        outAImportPackageEntry(node);
    }

    public void inAImportPackageEntryValue1(AImportPackageEntryValue1 node)
    {
        defaultIn(node);
    }

    public void outAImportPackageEntryValue1(AImportPackageEntryValue1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportPackageEntryValue1(AImportPackageEntryValue1 node)
    {
        inAImportPackageEntryValue1(node);
        {
            List<PImportPackageValue> copy = new ArrayList<PImportPackageValue>(node.getImportPackageValue());
            Collections.reverse(copy);
            for(PImportPackageValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getImportPackageEntryValue() != null)
        {
            node.getImportPackageEntryValue().apply(this);
        }
        outAImportPackageEntryValue1(node);
    }

    public void inAImportPackageValue(AImportPackageValue node)
    {
        defaultIn(node);
    }

    public void outAImportPackageValue(AImportPackageValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportPackageValue(AImportPackageValue node)
    {
        inAImportPackageValue(node);
        if(node.getImportPackageEntryValue() != null)
        {
            node.getImportPackageEntryValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAImportPackageValue(node);
    }

    public void inAImportPackageEntryValue(AImportPackageEntryValue node)
    {
        defaultIn(node);
    }

    public void outAImportPackageEntryValue(AImportPackageEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportPackageEntryValue(AImportPackageEntryValue node)
    {
        inAImportPackageEntryValue(node);
        {
            List<PImportPackageParameter> copy = new ArrayList<PImportPackageParameter>(node.getImportPackageParameter());
            Collections.reverse(copy);
            for(PImportPackageParameter e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PPackageNames> copy = new ArrayList<PPackageNames>(node.getPackageNames());
            Collections.reverse(copy);
            for(PPackageNames e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPackageName() != null)
        {
            node.getPackageName().apply(this);
        }
        outAImportPackageEntryValue(node);
    }

    public void inAImportPackageDirectiveImportPackageParameter(AImportPackageDirectiveImportPackageParameter node)
    {
        defaultIn(node);
    }

    public void outAImportPackageDirectiveImportPackageParameter(AImportPackageDirectiveImportPackageParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportPackageDirectiveImportPackageParameter(AImportPackageDirectiveImportPackageParameter node)
    {
        inAImportPackageDirectiveImportPackageParameter(node);
        if(node.getImportPackageDirective() != null)
        {
            node.getImportPackageDirective().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAImportPackageDirectiveImportPackageParameter(node);
    }

    public void inAImportPackageAttributeImportPackageParameter(AImportPackageAttributeImportPackageParameter node)
    {
        defaultIn(node);
    }

    public void outAImportPackageAttributeImportPackageParameter(AImportPackageAttributeImportPackageParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportPackageAttributeImportPackageParameter(AImportPackageAttributeImportPackageParameter node)
    {
        inAImportPackageAttributeImportPackageParameter(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAImportPackageAttributeImportPackageParameter(node);
    }

    public void inAImportPackageDirective(AImportPackageDirective node)
    {
        defaultIn(node);
    }

    public void outAImportPackageDirective(AImportPackageDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportPackageDirective(AImportPackageDirective node)
    {
        inAImportPackageDirective(node);
        if(node.getResolutionValue() != null)
        {
            node.getResolutionValue().apply(this);
        }
        if(node.getResolution() != null)
        {
            node.getResolution().apply(this);
        }
        outAImportPackageDirective(node);
    }

    public void inAImportServiceEntry(AImportServiceEntry node)
    {
        defaultIn(node);
    }

    public void outAImportServiceEntry(AImportServiceEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportServiceEntry(AImportServiceEntry node)
    {
        inAImportServiceEntry(node);
        if(node.getImportServiceEntryValue() != null)
        {
            node.getImportServiceEntryValue().apply(this);
        }
        if(node.getImportService() != null)
        {
            node.getImportService().apply(this);
        }
        outAImportServiceEntry(node);
    }

    public void inAImportServiceEntryValue(AImportServiceEntryValue node)
    {
        defaultIn(node);
    }

    public void outAImportServiceEntryValue(AImportServiceEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportServiceEntryValue(AImportServiceEntryValue node)
    {
        inAImportServiceEntryValue(node);
        {
            List<PServiceValue> copy = new ArrayList<PServiceValue>(node.getServiceValue());
            Collections.reverse(copy);
            for(PServiceValue e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUniqueName() != null)
        {
            node.getUniqueName().apply(this);
        }
        outAImportServiceEntryValue(node);
    }

    public void inAServiceValue(AServiceValue node)
    {
        defaultIn(node);
    }

    public void outAServiceValue(AServiceValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAServiceValue(AServiceValue node)
    {
        inAServiceValue(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUniqueName() != null)
        {
            node.getUniqueName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAServiceValue(node);
    }

    public void inAExportServiceEntry(AExportServiceEntry node)
    {
        defaultIn(node);
    }

    public void outAExportServiceEntry(AExportServiceEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportServiceEntry(AExportServiceEntry node)
    {
        inAExportServiceEntry(node);
        if(node.getExportServiceEntryValue() != null)
        {
            node.getExportServiceEntryValue().apply(this);
        }
        if(node.getExportService() != null)
        {
            node.getExportService().apply(this);
        }
        outAExportServiceEntry(node);
    }

    public void inAExportServiceEntryValue(AExportServiceEntryValue node)
    {
        defaultIn(node);
    }

    public void outAExportServiceEntryValue(AExportServiceEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportServiceEntryValue(AExportServiceEntryValue node)
    {
        inAExportServiceEntryValue(node);
        {
            List<PServiceValue> copy = new ArrayList<PServiceValue>(node.getServiceValue());
            Collections.reverse(copy);
            for(PServiceValue e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            Collections.reverse(copy);
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUniqueName() != null)
        {
            node.getUniqueName().apply(this);
        }
        outAExportServiceEntryValue(node);
    }

    public void inARequireBundleEntry(ARequireBundleEntry node)
    {
        defaultIn(node);
    }

    public void outARequireBundleEntry(ARequireBundleEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequireBundleEntry(ARequireBundleEntry node)
    {
        inARequireBundleEntry(node);
        if(node.getRequireBundleEntryValue() != null)
        {
            node.getRequireBundleEntryValue().apply(this);
        }
        if(node.getRequireBundle() != null)
        {
            node.getRequireBundle().apply(this);
        }
        outARequireBundleEntry(node);
    }

    public void inARequireBundleEntryValue(ARequireBundleEntryValue node)
    {
        defaultIn(node);
    }

    public void outARequireBundleEntryValue(ARequireBundleEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequireBundleEntryValue(ARequireBundleEntryValue node)
    {
        inARequireBundleEntryValue(node);
        {
            List<PRequireBundleValue> copy = new ArrayList<PRequireBundleValue>(node.getRequireBundleValue());
            Collections.reverse(copy);
            for(PRequireBundleValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRequireBundleSymbolicname() != null)
        {
            node.getRequireBundleSymbolicname().apply(this);
        }
        outARequireBundleEntryValue(node);
    }

    public void inARequireBundleSymbolicname(ARequireBundleSymbolicname node)
    {
        defaultIn(node);
    }

    public void outARequireBundleSymbolicname(ARequireBundleSymbolicname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequireBundleSymbolicname(ARequireBundleSymbolicname node)
    {
        inARequireBundleSymbolicname(node);
        {
            List<PRequireBundleOptions> copy = new ArrayList<PRequireBundleOptions>(node.getRequireBundleOptions());
            Collections.reverse(copy);
            for(PRequireBundleOptions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUniqueName() != null)
        {
            node.getUniqueName().apply(this);
        }
        outARequireBundleSymbolicname(node);
    }

    public void inARequireBundleValue(ARequireBundleValue node)
    {
        defaultIn(node);
    }

    public void outARequireBundleValue(ARequireBundleValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequireBundleValue(ARequireBundleValue node)
    {
        inARequireBundleValue(node);
        if(node.getRequireBundleSymbolicname() != null)
        {
            node.getRequireBundleSymbolicname().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outARequireBundleValue(node);
    }

    public void inARequireBundleDirectiveRequireBundleOptions(ARequireBundleDirectiveRequireBundleOptions node)
    {
        defaultIn(node);
    }

    public void outARequireBundleDirectiveRequireBundleOptions(ARequireBundleDirectiveRequireBundleOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequireBundleDirectiveRequireBundleOptions(ARequireBundleDirectiveRequireBundleOptions node)
    {
        inARequireBundleDirectiveRequireBundleOptions(node);
        if(node.getRequireBundleDirective() != null)
        {
            node.getRequireBundleDirective().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outARequireBundleDirectiveRequireBundleOptions(node);
    }

    public void inARequireBundleAttributeRequireBundleOptions(ARequireBundleAttributeRequireBundleOptions node)
    {
        defaultIn(node);
    }

    public void outARequireBundleAttributeRequireBundleOptions(ARequireBundleAttributeRequireBundleOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequireBundleAttributeRequireBundleOptions(ARequireBundleAttributeRequireBundleOptions node)
    {
        inARequireBundleAttributeRequireBundleOptions(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outARequireBundleAttributeRequireBundleOptions(node);
    }

    public void inAVisibilityDirectiveRequireBundleDirective(AVisibilityDirectiveRequireBundleDirective node)
    {
        defaultIn(node);
    }

    public void outAVisibilityDirectiveRequireBundleDirective(AVisibilityDirectiveRequireBundleDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVisibilityDirectiveRequireBundleDirective(AVisibilityDirectiveRequireBundleDirective node)
    {
        inAVisibilityDirectiveRequireBundleDirective(node);
        if(node.getVisibilityValue() != null)
        {
            node.getVisibilityValue().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        outAVisibilityDirectiveRequireBundleDirective(node);
    }

    public void inAResolutionDirectiveRequireBundleDirective(AResolutionDirectiveRequireBundleDirective node)
    {
        defaultIn(node);
    }

    public void outAResolutionDirectiveRequireBundleDirective(AResolutionDirectiveRequireBundleDirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResolutionDirectiveRequireBundleDirective(AResolutionDirectiveRequireBundleDirective node)
    {
        inAResolutionDirectiveRequireBundleDirective(node);
        if(node.getResolutionValue() != null)
        {
            node.getResolutionValue().apply(this);
        }
        if(node.getResolution() != null)
        {
            node.getResolution().apply(this);
        }
        outAResolutionDirectiveRequireBundleDirective(node);
    }

    public void inAAlwaysFragmentAttachmentValue(AAlwaysFragmentAttachmentValue node)
    {
        defaultIn(node);
    }

    public void outAAlwaysFragmentAttachmentValue(AAlwaysFragmentAttachmentValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlwaysFragmentAttachmentValue(AAlwaysFragmentAttachmentValue node)
    {
        inAAlwaysFragmentAttachmentValue(node);
        if(node.getAlways() != null)
        {
            node.getAlways().apply(this);
        }
        outAAlwaysFragmentAttachmentValue(node);
    }

    public void inANeverFragmentAttachmentValue(ANeverFragmentAttachmentValue node)
    {
        defaultIn(node);
    }

    public void outANeverFragmentAttachmentValue(ANeverFragmentAttachmentValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeverFragmentAttachmentValue(ANeverFragmentAttachmentValue node)
    {
        inANeverFragmentAttachmentValue(node);
        if(node.getNever() != null)
        {
            node.getNever().apply(this);
        }
        outANeverFragmentAttachmentValue(node);
    }

    public void inAResolveTimeFragmentAttachmentValue(AResolveTimeFragmentAttachmentValue node)
    {
        defaultIn(node);
    }

    public void outAResolveTimeFragmentAttachmentValue(AResolveTimeFragmentAttachmentValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResolveTimeFragmentAttachmentValue(AResolveTimeFragmentAttachmentValue node)
    {
        inAResolveTimeFragmentAttachmentValue(node);
        if(node.getResolveTime() != null)
        {
            node.getResolveTime().apply(this);
        }
        outAResolveTimeFragmentAttachmentValue(node);
    }

    public void inAProcessor68kProcessorValue(AProcessor68kProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessor68kProcessorValue(AProcessor68kProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessor68kProcessorValue(AProcessor68kProcessorValue node)
    {
        inAProcessor68kProcessorValue(node);
        if(node.getProcessor68k() != null)
        {
            node.getProcessor68k().apply(this);
        }
        outAProcessor68kProcessorValue(node);
    }

    public void inAProcessorArmProcessorValue(AProcessorArmProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorArmProcessorValue(AProcessorArmProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorArmProcessorValue(AProcessorArmProcessorValue node)
    {
        inAProcessorArmProcessorValue(node);
        if(node.getProcessorArm() != null)
        {
            node.getProcessorArm().apply(this);
        }
        outAProcessorArmProcessorValue(node);
    }

    public void inAProcessorAlphaProcessorValue(AProcessorAlphaProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorAlphaProcessorValue(AProcessorAlphaProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorAlphaProcessorValue(AProcessorAlphaProcessorValue node)
    {
        inAProcessorAlphaProcessorValue(node);
        if(node.getProcessorAlpha() != null)
        {
            node.getProcessorAlpha().apply(this);
        }
        outAProcessorAlphaProcessorValue(node);
    }

    public void inAProcessorIgniteProcessorValue(AProcessorIgniteProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorIgniteProcessorValue(AProcessorIgniteProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorIgniteProcessorValue(AProcessorIgniteProcessorValue node)
    {
        inAProcessorIgniteProcessorValue(node);
        if(node.getProcessorIgnite() != null)
        {
            node.getProcessorIgnite().apply(this);
        }
        outAProcessorIgniteProcessorValue(node);
    }

    public void inAProcessorMipsProcessorValue(AProcessorMipsProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorMipsProcessorValue(AProcessorMipsProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorMipsProcessorValue(AProcessorMipsProcessorValue node)
    {
        inAProcessorMipsProcessorValue(node);
        if(node.getProcessorMips() != null)
        {
            node.getProcessorMips().apply(this);
        }
        outAProcessorMipsProcessorValue(node);
    }

    public void inAProcessorPariscProcessorValue(AProcessorPariscProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorPariscProcessorValue(AProcessorPariscProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorPariscProcessorValue(AProcessorPariscProcessorValue node)
    {
        inAProcessorPariscProcessorValue(node);
        if(node.getProcessorParisc() != null)
        {
            node.getProcessorParisc().apply(this);
        }
        outAProcessorPariscProcessorValue(node);
    }

    public void inAProcessorPowerpcProcessorValue(AProcessorPowerpcProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorPowerpcProcessorValue(AProcessorPowerpcProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorPowerpcProcessorValue(AProcessorPowerpcProcessorValue node)
    {
        inAProcessorPowerpcProcessorValue(node);
        if(node.getProcessorPowerpc() != null)
        {
            node.getProcessorPowerpc().apply(this);
        }
        outAProcessorPowerpcProcessorValue(node);
    }

    public void inAProcessorSh4ProcessorValue(AProcessorSh4ProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorSh4ProcessorValue(AProcessorSh4ProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorSh4ProcessorValue(AProcessorSh4ProcessorValue node)
    {
        inAProcessorSh4ProcessorValue(node);
        if(node.getProcessorSh4() != null)
        {
            node.getProcessorSh4().apply(this);
        }
        outAProcessorSh4ProcessorValue(node);
    }

    public void inAProcessorSparcProcessorValue(AProcessorSparcProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorSparcProcessorValue(AProcessorSparcProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorSparcProcessorValue(AProcessorSparcProcessorValue node)
    {
        inAProcessorSparcProcessorValue(node);
        if(node.getProcessorSparc() != null)
        {
            node.getProcessorSparc().apply(this);
        }
        outAProcessorSparcProcessorValue(node);
    }

    public void inAProcessorS390ProcessorValue(AProcessorS390ProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorS390ProcessorValue(AProcessorS390ProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorS390ProcessorValue(AProcessorS390ProcessorValue node)
    {
        inAProcessorS390ProcessorValue(node);
        if(node.getProcessorS390() != null)
        {
            node.getProcessorS390().apply(this);
        }
        outAProcessorS390ProcessorValue(node);
    }

    public void inAProcessorS390xProcessorValue(AProcessorS390xProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorS390xProcessorValue(AProcessorS390xProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorS390xProcessorValue(AProcessorS390xProcessorValue node)
    {
        inAProcessorS390xProcessorValue(node);
        if(node.getProcessorS390x() != null)
        {
            node.getProcessorS390x().apply(this);
        }
        outAProcessorS390xProcessorValue(node);
    }

    public void inAProcessorV850eProcessorValue(AProcessorV850eProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorV850eProcessorValue(AProcessorV850eProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorV850eProcessorValue(AProcessorV850eProcessorValue node)
    {
        inAProcessorV850eProcessorValue(node);
        if(node.getProcessorV850e() != null)
        {
            node.getProcessorV850e().apply(this);
        }
        outAProcessorV850eProcessorValue(node);
    }

    public void inAProcessorX86ProcessorValue(AProcessorX86ProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorX86ProcessorValue(AProcessorX86ProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorX86ProcessorValue(AProcessorX86ProcessorValue node)
    {
        inAProcessorX86ProcessorValue(node);
        if(node.getProcessorX86() != null)
        {
            node.getProcessorX86().apply(this);
        }
        outAProcessorX86ProcessorValue(node);
    }

    public void inAProcessorX8664ProcessorValue(AProcessorX8664ProcessorValue node)
    {
        defaultIn(node);
    }

    public void outAProcessorX8664ProcessorValue(AProcessorX8664ProcessorValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcessorX8664ProcessorValue(AProcessorX8664ProcessorValue node)
    {
        inAProcessorX8664ProcessorValue(node);
        if(node.getProcessorX8664() != null)
        {
            node.getProcessorX8664().apply(this);
        }
        outAProcessorX8664ProcessorValue(node);
    }

    public void inAOsnameAixOsnameValue(AOsnameAixOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameAixOsnameValue(AOsnameAixOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameAixOsnameValue(AOsnameAixOsnameValue node)
    {
        inAOsnameAixOsnameValue(node);
        if(node.getOsnameAix() != null)
        {
            node.getOsnameAix().apply(this);
        }
        outAOsnameAixOsnameValue(node);
    }

    public void inAOsnameDigitalunixOsnameValue(AOsnameDigitalunixOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameDigitalunixOsnameValue(AOsnameDigitalunixOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameDigitalunixOsnameValue(AOsnameDigitalunixOsnameValue node)
    {
        inAOsnameDigitalunixOsnameValue(node);
        if(node.getOsnameDigitalunix() != null)
        {
            node.getOsnameDigitalunix().apply(this);
        }
        outAOsnameDigitalunixOsnameValue(node);
    }

    public void inAOsnameEmbosOsnameValue(AOsnameEmbosOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameEmbosOsnameValue(AOsnameEmbosOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameEmbosOsnameValue(AOsnameEmbosOsnameValue node)
    {
        inAOsnameEmbosOsnameValue(node);
        if(node.getOsnameEmbos() != null)
        {
            node.getOsnameEmbos().apply(this);
        }
        outAOsnameEmbosOsnameValue(node);
    }

    public void inAOsnameEpoc32OsnameValue(AOsnameEpoc32OsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameEpoc32OsnameValue(AOsnameEpoc32OsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameEpoc32OsnameValue(AOsnameEpoc32OsnameValue node)
    {
        inAOsnameEpoc32OsnameValue(node);
        if(node.getOsnameEpoc32() != null)
        {
            node.getOsnameEpoc32().apply(this);
        }
        outAOsnameEpoc32OsnameValue(node);
    }

    public void inAOsnameFreebsdOsnameValue(AOsnameFreebsdOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameFreebsdOsnameValue(AOsnameFreebsdOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameFreebsdOsnameValue(AOsnameFreebsdOsnameValue node)
    {
        inAOsnameFreebsdOsnameValue(node);
        if(node.getOsnameFreebsd() != null)
        {
            node.getOsnameFreebsd().apply(this);
        }
        outAOsnameFreebsdOsnameValue(node);
    }

    public void inAOsnameHpuxOsnameValue(AOsnameHpuxOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameHpuxOsnameValue(AOsnameHpuxOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameHpuxOsnameValue(AOsnameHpuxOsnameValue node)
    {
        inAOsnameHpuxOsnameValue(node);
        if(node.getOsnameHpux() != null)
        {
            node.getOsnameHpux().apply(this);
        }
        outAOsnameHpuxOsnameValue(node);
    }

    public void inAOsnameIrixOsnameValue(AOsnameIrixOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameIrixOsnameValue(AOsnameIrixOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameIrixOsnameValue(AOsnameIrixOsnameValue node)
    {
        inAOsnameIrixOsnameValue(node);
        if(node.getOsnameIrix() != null)
        {
            node.getOsnameIrix().apply(this);
        }
        outAOsnameIrixOsnameValue(node);
    }

    public void inAOsnameLinuxOsnameValue(AOsnameLinuxOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameLinuxOsnameValue(AOsnameLinuxOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameLinuxOsnameValue(AOsnameLinuxOsnameValue node)
    {
        inAOsnameLinuxOsnameValue(node);
        if(node.getOsnameLinux() != null)
        {
            node.getOsnameLinux().apply(this);
        }
        outAOsnameLinuxOsnameValue(node);
    }

    public void inAOsnameMacosOsnameValue(AOsnameMacosOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameMacosOsnameValue(AOsnameMacosOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameMacosOsnameValue(AOsnameMacosOsnameValue node)
    {
        inAOsnameMacosOsnameValue(node);
        if(node.getOsnameMacos() != null)
        {
            node.getOsnameMacos().apply(this);
        }
        outAOsnameMacosOsnameValue(node);
    }

    public void inAOsnameNetbsdOsnameValue(AOsnameNetbsdOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameNetbsdOsnameValue(AOsnameNetbsdOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameNetbsdOsnameValue(AOsnameNetbsdOsnameValue node)
    {
        inAOsnameNetbsdOsnameValue(node);
        if(node.getOsnameNetbsd() != null)
        {
            node.getOsnameNetbsd().apply(this);
        }
        outAOsnameNetbsdOsnameValue(node);
    }

    public void inAOsnameNetwareOsnameValue(AOsnameNetwareOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameNetwareOsnameValue(AOsnameNetwareOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameNetwareOsnameValue(AOsnameNetwareOsnameValue node)
    {
        inAOsnameNetwareOsnameValue(node);
        if(node.getOsnameNetware() != null)
        {
            node.getOsnameNetware().apply(this);
        }
        outAOsnameNetwareOsnameValue(node);
    }

    public void inAOsnameOpenbsdOsnameValue(AOsnameOpenbsdOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameOpenbsdOsnameValue(AOsnameOpenbsdOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameOpenbsdOsnameValue(AOsnameOpenbsdOsnameValue node)
    {
        inAOsnameOpenbsdOsnameValue(node);
        if(node.getOsnameOpenbsd() != null)
        {
            node.getOsnameOpenbsd().apply(this);
        }
        outAOsnameOpenbsdOsnameValue(node);
    }

    public void inAOsnameOs2OsnameValue(AOsnameOs2OsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameOs2OsnameValue(AOsnameOs2OsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameOs2OsnameValue(AOsnameOs2OsnameValue node)
    {
        inAOsnameOs2OsnameValue(node);
        if(node.getOsnameOs2() != null)
        {
            node.getOsnameOs2().apply(this);
        }
        outAOsnameOs2OsnameValue(node);
    }

    public void inAOsnameQnxOsnameValue(AOsnameQnxOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameQnxOsnameValue(AOsnameQnxOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameQnxOsnameValue(AOsnameQnxOsnameValue node)
    {
        inAOsnameQnxOsnameValue(node);
        if(node.getOsnameQnx() != null)
        {
            node.getOsnameQnx().apply(this);
        }
        outAOsnameQnxOsnameValue(node);
    }

    public void inAOsnameSolarisOsnameValue(AOsnameSolarisOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameSolarisOsnameValue(AOsnameSolarisOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameSolarisOsnameValue(AOsnameSolarisOsnameValue node)
    {
        inAOsnameSolarisOsnameValue(node);
        if(node.getOsnameSolaris() != null)
        {
            node.getOsnameSolaris().apply(this);
        }
        outAOsnameSolarisOsnameValue(node);
    }

    public void inAOsnameSunosOsnameValue(AOsnameSunosOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameSunosOsnameValue(AOsnameSunosOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameSunosOsnameValue(AOsnameSunosOsnameValue node)
    {
        inAOsnameSunosOsnameValue(node);
        if(node.getOsnameSunos() != null)
        {
            node.getOsnameSunos().apply(this);
        }
        outAOsnameSunosOsnameValue(node);
    }

    public void inAOsnameVxworksOsnameValue(AOsnameVxworksOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameVxworksOsnameValue(AOsnameVxworksOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameVxworksOsnameValue(AOsnameVxworksOsnameValue node)
    {
        inAOsnameVxworksOsnameValue(node);
        if(node.getOsnameVxworks() != null)
        {
            node.getOsnameVxworks().apply(this);
        }
        outAOsnameVxworksOsnameValue(node);
    }

    public void inAOsnameWindows95OsnameValue(AOsnameWindows95OsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameWindows95OsnameValue(AOsnameWindows95OsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameWindows95OsnameValue(AOsnameWindows95OsnameValue node)
    {
        inAOsnameWindows95OsnameValue(node);
        if(node.getOsnameWindows95() != null)
        {
            node.getOsnameWindows95().apply(this);
        }
        outAOsnameWindows95OsnameValue(node);
    }

    public void inAOsnameWindows98OsnameValue(AOsnameWindows98OsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameWindows98OsnameValue(AOsnameWindows98OsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameWindows98OsnameValue(AOsnameWindows98OsnameValue node)
    {
        inAOsnameWindows98OsnameValue(node);
        if(node.getOsnameWindows98() != null)
        {
            node.getOsnameWindows98().apply(this);
        }
        outAOsnameWindows98OsnameValue(node);
    }

    public void inAOsnameWindowsntOsnameValue(AOsnameWindowsntOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameWindowsntOsnameValue(AOsnameWindowsntOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameWindowsntOsnameValue(AOsnameWindowsntOsnameValue node)
    {
        inAOsnameWindowsntOsnameValue(node);
        if(node.getOsnameWindowsnt() != null)
        {
            node.getOsnameWindowsnt().apply(this);
        }
        outAOsnameWindowsntOsnameValue(node);
    }

    public void inAOsnameWindowsceOsnameValue(AOsnameWindowsceOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameWindowsceOsnameValue(AOsnameWindowsceOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameWindowsceOsnameValue(AOsnameWindowsceOsnameValue node)
    {
        inAOsnameWindowsceOsnameValue(node);
        if(node.getOsnameWindowsce() != null)
        {
            node.getOsnameWindowsce().apply(this);
        }
        outAOsnameWindowsceOsnameValue(node);
    }

    public void inAOsnameWindows2000OsnameValue(AOsnameWindows2000OsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameWindows2000OsnameValue(AOsnameWindows2000OsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameWindows2000OsnameValue(AOsnameWindows2000OsnameValue node)
    {
        inAOsnameWindows2000OsnameValue(node);
        if(node.getOsnameWindows2000() != null)
        {
            node.getOsnameWindows2000().apply(this);
        }
        outAOsnameWindows2000OsnameValue(node);
    }

    public void inAOsnameWindows2003OsnameValue(AOsnameWindows2003OsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameWindows2003OsnameValue(AOsnameWindows2003OsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameWindows2003OsnameValue(AOsnameWindows2003OsnameValue node)
    {
        inAOsnameWindows2003OsnameValue(node);
        if(node.getOsnameWindows2003() != null)
        {
            node.getOsnameWindows2003().apply(this);
        }
        outAOsnameWindows2003OsnameValue(node);
    }

    public void inAOsnameWindowsxpOsnameValue(AOsnameWindowsxpOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameWindowsxpOsnameValue(AOsnameWindowsxpOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameWindowsxpOsnameValue(AOsnameWindowsxpOsnameValue node)
    {
        inAOsnameWindowsxpOsnameValue(node);
        if(node.getOsnameWindowsxp() != null)
        {
            node.getOsnameWindowsxp().apply(this);
        }
        outAOsnameWindowsxpOsnameValue(node);
    }

    public void inAOsnameWindowsvistaOsnameValue(AOsnameWindowsvistaOsnameValue node)
    {
        defaultIn(node);
    }

    public void outAOsnameWindowsvistaOsnameValue(AOsnameWindowsvistaOsnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOsnameWindowsvistaOsnameValue(AOsnameWindowsvistaOsnameValue node)
    {
        inAOsnameWindowsvistaOsnameValue(node);
        if(node.getOsnameWindowsvista() != null)
        {
            node.getOsnameWindowsvista().apply(this);
        }
        outAOsnameWindowsvistaOsnameValue(node);
    }

    public void inALanguageValue(ALanguageValue node)
    {
        defaultIn(node);
    }

    public void outALanguageValue(ALanguageValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALanguageValue(ALanguageValue node)
    {
        inALanguageValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALanguageValue(node);
    }

    public void inAEqualsBooleanComparator(AEqualsBooleanComparator node)
    {
        defaultIn(node);
    }

    public void outAEqualsBooleanComparator(AEqualsBooleanComparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsBooleanComparator(AEqualsBooleanComparator node)
    {
        inAEqualsBooleanComparator(node);
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        outAEqualsBooleanComparator(node);
    }

    public void inAGreaterEqualsBooleanComparator(AGreaterEqualsBooleanComparator node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualsBooleanComparator(AGreaterEqualsBooleanComparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualsBooleanComparator(AGreaterEqualsBooleanComparator node)
    {
        inAGreaterEqualsBooleanComparator(node);
        if(node.getGreaterEquals() != null)
        {
            node.getGreaterEquals().apply(this);
        }
        outAGreaterEqualsBooleanComparator(node);
    }

    public void inALesserEqualsBooleanComparator(ALesserEqualsBooleanComparator node)
    {
        defaultIn(node);
    }

    public void outALesserEqualsBooleanComparator(ALesserEqualsBooleanComparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALesserEqualsBooleanComparator(ALesserEqualsBooleanComparator node)
    {
        inALesserEqualsBooleanComparator(node);
        if(node.getLesserEquals() != null)
        {
            node.getLesserEquals().apply(this);
        }
        outALesserEqualsBooleanComparator(node);
    }

    public void inAGreaterBooleanComparator(AGreaterBooleanComparator node)
    {
        defaultIn(node);
    }

    public void outAGreaterBooleanComparator(AGreaterBooleanComparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterBooleanComparator(AGreaterBooleanComparator node)
    {
        inAGreaterBooleanComparator(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterBooleanComparator(node);
    }

    public void inALessBooleanComparator(ALessBooleanComparator node)
    {
        defaultIn(node);
    }

    public void outALessBooleanComparator(ALessBooleanComparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessBooleanComparator(ALessBooleanComparator node)
    {
        inALessBooleanComparator(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessBooleanComparator(node);
    }

    public void inANotEqualsBooleanComparator(ANotEqualsBooleanComparator node)
    {
        defaultIn(node);
    }

    public void outANotEqualsBooleanComparator(ANotEqualsBooleanComparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualsBooleanComparator(ANotEqualsBooleanComparator node)
    {
        inANotEqualsBooleanComparator(node);
        if(node.getNotEquals() != null)
        {
            node.getNotEquals().apply(this);
        }
        outANotEqualsBooleanComparator(node);
    }

    public void inASelectionFilterValue(ASelectionFilterValue node)
    {
        defaultIn(node);
    }

    public void outASelectionFilterValue(ASelectionFilterValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectionFilterValue(ASelectionFilterValue node)
    {
        inASelectionFilterValue(node);
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        if(node.getBooleanComparator() != null)
        {
            node.getBooleanComparator().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outASelectionFilterValue(node);
    }

    public void inAVisibilityPrivateVisibilityValue(AVisibilityPrivateVisibilityValue node)
    {
        defaultIn(node);
    }

    public void outAVisibilityPrivateVisibilityValue(AVisibilityPrivateVisibilityValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVisibilityPrivateVisibilityValue(AVisibilityPrivateVisibilityValue node)
    {
        inAVisibilityPrivateVisibilityValue(node);
        if(node.getVisibilityPrivate() != null)
        {
            node.getVisibilityPrivate().apply(this);
        }
        outAVisibilityPrivateVisibilityValue(node);
    }

    public void inAVisibilityReexportVisibilityValue(AVisibilityReexportVisibilityValue node)
    {
        defaultIn(node);
    }

    public void outAVisibilityReexportVisibilityValue(AVisibilityReexportVisibilityValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVisibilityReexportVisibilityValue(AVisibilityReexportVisibilityValue node)
    {
        inAVisibilityReexportVisibilityValue(node);
        if(node.getVisibilityReexport() != null)
        {
            node.getVisibilityReexport().apply(this);
        }
        outAVisibilityReexportVisibilityValue(node);
    }

    public void inAResolutionMandatoryResolutionValue(AResolutionMandatoryResolutionValue node)
    {
        defaultIn(node);
    }

    public void outAResolutionMandatoryResolutionValue(AResolutionMandatoryResolutionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResolutionMandatoryResolutionValue(AResolutionMandatoryResolutionValue node)
    {
        inAResolutionMandatoryResolutionValue(node);
        if(node.getResolutionMandatory() != null)
        {
            node.getResolutionMandatory().apply(this);
        }
        outAResolutionMandatoryResolutionValue(node);
    }

    public void inAResolutionOptionalResolutionValue(AResolutionOptionalResolutionValue node)
    {
        defaultIn(node);
    }

    public void outAResolutionOptionalResolutionValue(AResolutionOptionalResolutionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResolutionOptionalResolutionValue(AResolutionOptionalResolutionValue node)
    {
        inAResolutionOptionalResolutionValue(node);
        if(node.getResolutionOptional() != null)
        {
            node.getResolutionOptional().apply(this);
        }
        outAResolutionOptionalResolutionValue(node);
    }

    public void inAExtensionFrameworkExtensionValue(AExtensionFrameworkExtensionValue node)
    {
        defaultIn(node);
    }

    public void outAExtensionFrameworkExtensionValue(AExtensionFrameworkExtensionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtensionFrameworkExtensionValue(AExtensionFrameworkExtensionValue node)
    {
        inAExtensionFrameworkExtensionValue(node);
        if(node.getExtensionFramework() != null)
        {
            node.getExtensionFramework().apply(this);
        }
        outAExtensionFrameworkExtensionValue(node);
    }

    public void inAExtensionBootclasspathExtensionValue(AExtensionBootclasspathExtensionValue node)
    {
        defaultIn(node);
    }

    public void outAExtensionBootclasspathExtensionValue(AExtensionBootclasspathExtensionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtensionBootclasspathExtensionValue(AExtensionBootclasspathExtensionValue node)
    {
        inAExtensionBootclasspathExtensionValue(node);
        if(node.getExtensionBootclasspath() != null)
        {
            node.getExtensionBootclasspath().apply(this);
        }
        outAExtensionBootclasspathExtensionValue(node);
    }

    public void inATrueBoolean(ATrueBoolean node)
    {
        defaultIn(node);
    }

    public void outATrueBoolean(ATrueBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBoolean(ATrueBoolean node)
    {
        inATrueBoolean(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBoolean(node);
    }

    public void inAFalseBoolean(AFalseBoolean node)
    {
        defaultIn(node);
    }

    public void outAFalseBoolean(AFalseBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBoolean(AFalseBoolean node)
    {
        inAFalseBoolean(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBoolean(node);
    }

    public void inAPathUnquotedPath(APathUnquotedPath node)
    {
        defaultIn(node);
    }

    public void outAPathUnquotedPath(APathUnquotedPath node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathUnquotedPath(APathUnquotedPath node)
    {
        inAPathUnquotedPath(node);
        if(node.getPathUnquoted() != null)
        {
            node.getPathUnquoted().apply(this);
        }
        outAPathUnquotedPath(node);
    }

    public void inAPathQuotedPath(APathQuotedPath node)
    {
        defaultIn(node);
    }

    public void outAPathQuotedPath(APathQuotedPath node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathQuotedPath(APathQuotedPath node)
    {
        inAPathQuotedPath(node);
        if(node.getPathQuoted() != null)
        {
            node.getPathQuoted().apply(this);
        }
        outAPathQuotedPath(node);
    }

    public void inAPathSepOnlyPathUnquoted(APathSepOnlyPathUnquoted node)
    {
        defaultIn(node);
    }

    public void outAPathSepOnlyPathUnquoted(APathSepOnlyPathUnquoted node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathSepOnlyPathUnquoted(APathSepOnlyPathUnquoted node)
    {
        inAPathSepOnlyPathUnquoted(node);
        if(node.getPathSep() != null)
        {
            node.getPathSep().apply(this);
        }
        outAPathSepOnlyPathUnquoted(node);
    }

    public void inAPathSeptelementPathUnquoted(APathSeptelementPathUnquoted node)
    {
        defaultIn(node);
    }

    public void outAPathSeptelementPathUnquoted(APathSeptelementPathUnquoted node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathSeptelementPathUnquoted(APathSeptelementPathUnquoted node)
    {
        inAPathSeptelementPathUnquoted(node);
        {
            List<PPathSuffix> copy = new ArrayList<PPathSuffix>(node.getPathSuffix());
            Collections.reverse(copy);
            for(PPathSuffix e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPathElement() != null)
        {
            node.getPathElement().apply(this);
        }
        if(node.getPathSep() != null)
        {
            node.getPathSep().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAPathSeptelementPathUnquoted(node);
    }

    public void inAPathElement(APathElement node)
    {
        defaultIn(node);
    }

    public void outAPathElement(APathElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathElement(APathElement node)
    {
        inAPathElement(node);
        if(node.getUnquotedString() != null)
        {
            node.getUnquotedString().apply(this);
        }
        outAPathElement(node);
    }

    public void inAPathSuffix(APathSuffix node)
    {
        defaultIn(node);
    }

    public void outAPathSuffix(APathSuffix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathSuffix(APathSuffix node)
    {
        inAPathSuffix(node);
        if(node.getPathElement() != null)
        {
            node.getPathElement().apply(this);
        }
        if(node.getPathSep() != null)
        {
            node.getPathSep().apply(this);
        }
        outAPathSuffix(node);
    }

    public void inAPathQuoted(APathQuoted node)
    {
        defaultIn(node);
    }

    public void outAPathQuoted(APathQuoted node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathQuoted(APathQuoted node)
    {
        inAPathQuoted(node);
        if(node.getRightquote() != null)
        {
            node.getRightquote().apply(this);
        }
        if(node.getPathUnquoted() != null)
        {
            node.getPathUnquoted().apply(this);
        }
        if(node.getLeftquote() != null)
        {
            node.getLeftquote().apply(this);
        }
        outAPathQuoted(node);
    }

    public void inAHttpUnquotedUrl(AHttpUnquotedUrl node)
    {
        defaultIn(node);
    }

    public void outAHttpUnquotedUrl(AHttpUnquotedUrl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHttpUnquotedUrl(AHttpUnquotedUrl node)
    {
        inAHttpUnquotedUrl(node);
        if(node.getPathUnquoted() != null)
        {
            node.getPathUnquoted().apply(this);
        }
        if(node.getUrlHttp() != null)
        {
            node.getUrlHttp().apply(this);
        }
        outAHttpUnquotedUrl(node);
    }

    public void inAFileUnquotedUrl(AFileUnquotedUrl node)
    {
        defaultIn(node);
    }

    public void outAFileUnquotedUrl(AFileUnquotedUrl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFileUnquotedUrl(AFileUnquotedUrl node)
    {
        inAFileUnquotedUrl(node);
        if(node.getPathUnquoted() != null)
        {
            node.getPathUnquoted().apply(this);
        }
        if(node.getUrlFile() != null)
        {
            node.getUrlFile().apply(this);
        }
        outAFileUnquotedUrl(node);
    }

    public void inAFtpUnquotedUrl(AFtpUnquotedUrl node)
    {
        defaultIn(node);
    }

    public void outAFtpUnquotedUrl(AFtpUnquotedUrl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFtpUnquotedUrl(AFtpUnquotedUrl node)
    {
        inAFtpUnquotedUrl(node);
        if(node.getPathUnquoted() != null)
        {
            node.getPathUnquoted().apply(this);
        }
        if(node.getUrlFtp() != null)
        {
            node.getUrlFtp().apply(this);
        }
        outAFtpUnquotedUrl(node);
    }

    public void inAQuotedUrl(AQuotedUrl node)
    {
        defaultIn(node);
    }

    public void outAQuotedUrl(AQuotedUrl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuotedUrl(AQuotedUrl node)
    {
        inAQuotedUrl(node);
        if(node.getRightquote() != null)
        {
            node.getRightquote().apply(this);
        }
        if(node.getUnquotedUrl() != null)
        {
            node.getUnquotedUrl().apply(this);
        }
        if(node.getLeftquote() != null)
        {
            node.getLeftquote().apply(this);
        }
        outAQuotedUrl(node);
    }

    public void inAUniqueNameWildcard(AUniqueNameWildcard node)
    {
        defaultIn(node);
    }

    public void outAUniqueNameWildcard(AUniqueNameWildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUniqueNameWildcard(AUniqueNameWildcard node)
    {
        inAUniqueNameWildcard(node);
        {
            List<PUniqueNameWildcardSuffix> copy = new ArrayList<PUniqueNameWildcardSuffix>(node.getUniqueNameWildcardSuffix());
            Collections.reverse(copy);
            for(PUniqueNameWildcardSuffix e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUniqueNameWildcardCommons() != null)
        {
            node.getUniqueNameWildcardCommons().apply(this);
        }
        outAUniqueNameWildcard(node);
    }

    public void inAIdentifierUniqueNameWildcardSuffix(AIdentifierUniqueNameWildcardSuffix node)
    {
        defaultIn(node);
    }

    public void outAIdentifierUniqueNameWildcardSuffix(AIdentifierUniqueNameWildcardSuffix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierUniqueNameWildcardSuffix(AIdentifierUniqueNameWildcardSuffix node)
    {
        inAIdentifierUniqueNameWildcardSuffix(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAIdentifierUniqueNameWildcardSuffix(node);
    }

    public void inAOptionalUniqueNameWildcardSuffix(AOptionalUniqueNameWildcardSuffix node)
    {
        defaultIn(node);
    }

    public void outAOptionalUniqueNameWildcardSuffix(AOptionalUniqueNameWildcardSuffix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalUniqueNameWildcardSuffix(AOptionalUniqueNameWildcardSuffix node)
    {
        inAOptionalUniqueNameWildcardSuffix(node);
        if(node.getOptional() != null)
        {
            node.getOptional().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAOptionalUniqueNameWildcardSuffix(node);
    }

    public void inAIdentifierUniqueNameWildcardCommons(AIdentifierUniqueNameWildcardCommons node)
    {
        defaultIn(node);
    }

    public void outAIdentifierUniqueNameWildcardCommons(AIdentifierUniqueNameWildcardCommons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierUniqueNameWildcardCommons(AIdentifierUniqueNameWildcardCommons node)
    {
        inAIdentifierUniqueNameWildcardCommons(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierUniqueNameWildcardCommons(node);
    }

    public void inAOptionalUniqueNameWildcardCommons(AOptionalUniqueNameWildcardCommons node)
    {
        defaultIn(node);
    }

    public void outAOptionalUniqueNameWildcardCommons(AOptionalUniqueNameWildcardCommons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalUniqueNameWildcardCommons(AOptionalUniqueNameWildcardCommons node)
    {
        inAOptionalUniqueNameWildcardCommons(node);
        if(node.getOptional() != null)
        {
            node.getOptional().apply(this);
        }
        outAOptionalUniqueNameWildcardCommons(node);
    }

    public void inAPackageNameWildcard(APackageNameWildcard node)
    {
        defaultIn(node);
    }

    public void outAPackageNameWildcard(APackageNameWildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPackageNameWildcard(APackageNameWildcard node)
    {
        inAPackageNameWildcard(node);
        if(node.getUniqueNameWildcard() != null)
        {
            node.getUniqueNameWildcard().apply(this);
        }
        outAPackageNameWildcard(node);
    }

    public void inAPathTarget(APathTarget node)
    {
        defaultIn(node);
    }

    public void outAPathTarget(APathTarget node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathTarget(APathTarget node)
    {
        inAPathTarget(node);
        if(node.getPath() != null)
        {
            node.getPath().apply(this);
        }
        outAPathTarget(node);
    }

    public void inADotTarget(ADotTarget node)
    {
        defaultIn(node);
    }

    public void outADotTarget(ADotTarget node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADotTarget(ADotTarget node)
    {
        inADotTarget(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outADotTarget(node);
    }

    public void inAUnquotedUrlValue(AUnquotedUrlValue node)
    {
        defaultIn(node);
    }

    public void outAUnquotedUrlValue(AUnquotedUrlValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnquotedUrlValue(AUnquotedUrlValue node)
    {
        inAUnquotedUrlValue(node);
        if(node.getUnquotedUrl() != null)
        {
            node.getUnquotedUrl().apply(this);
        }
        outAUnquotedUrlValue(node);
    }

    public void inAQuotedUrlValue(AQuotedUrlValue node)
    {
        defaultIn(node);
    }

    public void outAQuotedUrlValue(AQuotedUrlValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuotedUrlValue(AQuotedUrlValue node)
    {
        inAQuotedUrlValue(node);
        if(node.getQuotedUrl() != null)
        {
            node.getQuotedUrl().apply(this);
        }
        outAQuotedUrlValue(node);
    }

    public void inAParameter(AParameter node)
    {
        defaultIn(node);
    }

    public void outAParameter(AParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameter(AParameter node)
    {
        inAParameter(node);
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAParameter(node);
    }

    public void inAAttribute(AAttribute node)
    {
        defaultIn(node);
    }

    public void outAAttribute(AAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttribute(AAttribute node)
    {
        inAAttribute(node);
        if(node.getStringEntryValue() != null)
        {
            node.getStringEntryValue().apply(this);
        }
        if(node.getAttributeEntry() != null)
        {
            node.getAttributeEntry().apply(this);
        }
        outAAttribute(node);
    }

    public void inAUnquotedStringStringEntryValue(AUnquotedStringStringEntryValue node)
    {
        defaultIn(node);
    }

    public void outAUnquotedStringStringEntryValue(AUnquotedStringStringEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnquotedStringStringEntryValue(AUnquotedStringStringEntryValue node)
    {
        inAUnquotedStringStringEntryValue(node);
        if(node.getUnquotedString() != null)
        {
            node.getUnquotedString().apply(this);
        }
        outAUnquotedStringStringEntryValue(node);
    }

    public void inAQuotedStringStringEntryValue(AQuotedStringStringEntryValue node)
    {
        defaultIn(node);
    }

    public void outAQuotedStringStringEntryValue(AQuotedStringStringEntryValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuotedStringStringEntryValue(AQuotedStringStringEntryValue node)
    {
        inAQuotedStringStringEntryValue(node);
        if(node.getQuotedString() != null)
        {
            node.getQuotedString().apply(this);
        }
        outAQuotedStringStringEntryValue(node);
    }

    public void inAGoodPackageNamePackageName(AGoodPackageNamePackageName node)
    {
        defaultIn(node);
    }

    public void outAGoodPackageNamePackageName(AGoodPackageNamePackageName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGoodPackageNamePackageName(AGoodPackageNamePackageName node)
    {
        inAGoodPackageNamePackageName(node);
        if(node.getUniqueName() != null)
        {
            node.getUniqueName().apply(this);
        }
        outAGoodPackageNamePackageName(node);
    }

    public void inAMustNotAppearsPackageName(AMustNotAppearsPackageName node)
    {
        defaultIn(node);
    }

    public void outAMustNotAppearsPackageName(AMustNotAppearsPackageName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMustNotAppearsPackageName(AMustNotAppearsPackageName node)
    {
        inAMustNotAppearsPackageName(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMustNotAppearsPackageName(node);
    }

    public void inAUniqueName(AUniqueName node)
    {
        defaultIn(node);
    }

    public void outAUniqueName(AUniqueName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUniqueName(AUniqueName node)
    {
        inAUniqueName(node);
        {
            List<PUniqueNameSuffix> copy = new ArrayList<PUniqueNameSuffix>(node.getUniqueNameSuffix());
            Collections.reverse(copy);
            for(PUniqueNameSuffix e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAUniqueName(node);
    }

    public void inAUniqueNameSuffix(AUniqueNameSuffix node)
    {
        defaultIn(node);
    }

    public void outAUniqueNameSuffix(AUniqueNameSuffix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUniqueNameSuffix(AUniqueNameSuffix node)
    {
        inAUniqueNameSuffix(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAUniqueNameSuffix(node);
    }
}
