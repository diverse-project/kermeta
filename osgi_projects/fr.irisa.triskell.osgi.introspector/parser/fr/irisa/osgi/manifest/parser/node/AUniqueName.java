/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import fr.irisa.osgi.manifest.parser.analysis.Analysis;

@SuppressWarnings("nls")
public final class AUniqueName extends PUniqueName {
	private TIdentifier _identifier_;
	private final LinkedList<PUniqueNameSuffix> _uniqueNameSuffix_ = new LinkedList<PUniqueNameSuffix>();

	public AUniqueName() {
		// Constructor
	}

	public AUniqueName(@SuppressWarnings("hiding")
	TIdentifier _identifier_, @SuppressWarnings("hiding")
	List<PUniqueNameSuffix> _uniqueNameSuffix_) {
		// Constructor
		setIdentifier(_identifier_);

		setUniqueNameSuffix(_uniqueNameSuffix_);

	}

	@Override
	public Object clone() {
		return new AUniqueName(cloneNode(this._identifier_),
				cloneList(this._uniqueNameSuffix_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseAUniqueName(this);
	}

	public TIdentifier getIdentifier() {
		return this._identifier_;
	}

	public void setIdentifier(TIdentifier node) {
		if (this._identifier_ != null) {
			this._identifier_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._identifier_ = node;
	}

	public LinkedList<PUniqueNameSuffix> getUniqueNameSuffix() {
		return this._uniqueNameSuffix_;
	}

	public void setUniqueNameSuffix(List<PUniqueNameSuffix> list) {
		this._uniqueNameSuffix_.clear();
		this._uniqueNameSuffix_.addAll(list);
		for (PUniqueNameSuffix e : list) {
			if (e.parent() != null) {
				e.parent().removeChild(e);
			}

			e.parent(this);
		}
	}

	@Override
	public String toString() {
		return "" + toString(this._identifier_)
				+ toString(this._uniqueNameSuffix_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._identifier_ == child) {
			this._identifier_ = null;
			return;
		}

		if (this._uniqueNameSuffix_.remove(child)) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._identifier_ == oldChild) {
			setIdentifier((TIdentifier) newChild);
			return;
		}

		for (ListIterator<PUniqueNameSuffix> i = this._uniqueNameSuffix_
				.listIterator(); i.hasNext();) {
			if (i.next() == oldChild) {
				if (newChild != null) {
					i.set((PUniqueNameSuffix) newChild);
					newChild.parent(this);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		throw new RuntimeException("Not a child.");
	}
}
