/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import fr.irisa.osgi.manifest.parser.analysis.*;

@SuppressWarnings("nls")
public final class ABundleCopyrightEntryManifestentry extends PManifestentry
{
    private PBundleCopyrightEntry _bundleCopyrightEntry_;

    public ABundleCopyrightEntryManifestentry()
    {
        // Constructor
    }

    public ABundleCopyrightEntryManifestentry(
        @SuppressWarnings("hiding") PBundleCopyrightEntry _bundleCopyrightEntry_)
    {
        // Constructor
        setBundleCopyrightEntry(_bundleCopyrightEntry_);

    }

    @Override
    public Object clone()
    {
        return new ABundleCopyrightEntryManifestentry(
            cloneNode(this._bundleCopyrightEntry_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABundleCopyrightEntryManifestentry(this);
    }

    public PBundleCopyrightEntry getBundleCopyrightEntry()
    {
        return this._bundleCopyrightEntry_;
    }

    public void setBundleCopyrightEntry(PBundleCopyrightEntry node)
    {
        if(this._bundleCopyrightEntry_ != null)
        {
            this._bundleCopyrightEntry_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bundleCopyrightEntry_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._bundleCopyrightEntry_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._bundleCopyrightEntry_ == child)
        {
            this._bundleCopyrightEntry_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._bundleCopyrightEntry_ == oldChild)
        {
            setBundleCopyrightEntry((PBundleCopyrightEntry) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
