/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import java.util.*;
import fr.irisa.osgi.manifest.parser.analysis.*;

@SuppressWarnings("nls")
public final class ANativecodeEntry extends PNativecodeEntry
{
    private PTarget _target_;
    private final LinkedList<PNativecodeEntryValue> _nativecodeEntryValue_ = new LinkedList<PNativecodeEntryValue>();
    private final LinkedList<PNativecodeParameter> _nativecodeParameter_ = new LinkedList<PNativecodeParameter>();

    public ANativecodeEntry()
    {
        // Constructor
    }

    public ANativecodeEntry(
        @SuppressWarnings("hiding") PTarget _target_,
        @SuppressWarnings("hiding") List<PNativecodeEntryValue> _nativecodeEntryValue_,
        @SuppressWarnings("hiding") List<PNativecodeParameter> _nativecodeParameter_)
    {
        // Constructor
        setTarget(_target_);

        setNativecodeEntryValue(_nativecodeEntryValue_);

        setNativecodeParameter(_nativecodeParameter_);

    }

    @Override
    public Object clone()
    {
        return new ANativecodeEntry(
            cloneNode(this._target_),
            cloneList(this._nativecodeEntryValue_),
            cloneList(this._nativecodeParameter_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANativecodeEntry(this);
    }

    public PTarget getTarget()
    {
        return this._target_;
    }

    public void setTarget(PTarget node)
    {
        if(this._target_ != null)
        {
            this._target_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._target_ = node;
    }

    public LinkedList<PNativecodeEntryValue> getNativecodeEntryValue()
    {
        return this._nativecodeEntryValue_;
    }

    public void setNativecodeEntryValue(List<PNativecodeEntryValue> list)
    {
        this._nativecodeEntryValue_.clear();
        this._nativecodeEntryValue_.addAll(list);
        for(PNativecodeEntryValue e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PNativecodeParameter> getNativecodeParameter()
    {
        return this._nativecodeParameter_;
    }

    public void setNativecodeParameter(List<PNativecodeParameter> list)
    {
        this._nativecodeParameter_.clear();
        this._nativecodeParameter_.addAll(list);
        for(PNativecodeParameter e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._target_)
            + toString(this._nativecodeEntryValue_)
            + toString(this._nativecodeParameter_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._target_ == child)
        {
            this._target_ = null;
            return;
        }

        if(this._nativecodeEntryValue_.remove(child))
        {
            return;
        }

        if(this._nativecodeParameter_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._target_ == oldChild)
        {
            setTarget((PTarget) newChild);
            return;
        }

        for(ListIterator<PNativecodeEntryValue> i = this._nativecodeEntryValue_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNativecodeEntryValue) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PNativecodeParameter> i = this._nativecodeParameter_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNativecodeParameter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
