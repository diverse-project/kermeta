/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import fr.irisa.osgi.manifest.parser.analysis.Analysis;

@SuppressWarnings("nls")
public final class ADynamicimportPackageNames extends
		PDynamicimportPackageNames {
	private TSemicolon _semicolon_;
	private PPackageNameWildcard _packageNameWildcard_;

	public ADynamicimportPackageNames() {
		// Constructor
	}

	public ADynamicimportPackageNames(@SuppressWarnings("hiding")
	TSemicolon _semicolon_, @SuppressWarnings("hiding")
	PPackageNameWildcard _packageNameWildcard_) {
		// Constructor
		setSemicolon(_semicolon_);

		setPackageNameWildcard(_packageNameWildcard_);

	}

	@Override
	public Object clone() {
		return new ADynamicimportPackageNames(cloneNode(this._semicolon_),
				cloneNode(this._packageNameWildcard_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseADynamicimportPackageNames(this);
	}

	public TSemicolon getSemicolon() {
		return this._semicolon_;
	}

	public void setSemicolon(TSemicolon node) {
		if (this._semicolon_ != null) {
			this._semicolon_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._semicolon_ = node;
	}

	public PPackageNameWildcard getPackageNameWildcard() {
		return this._packageNameWildcard_;
	}

	public void setPackageNameWildcard(PPackageNameWildcard node) {
		if (this._packageNameWildcard_ != null) {
			this._packageNameWildcard_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._packageNameWildcard_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._semicolon_)
				+ toString(this._packageNameWildcard_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._semicolon_ == child) {
			this._semicolon_ = null;
			return;
		}

		if (this._packageNameWildcard_ == child) {
			this._packageNameWildcard_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._semicolon_ == oldChild) {
			setSemicolon((TSemicolon) newChild);
			return;
		}

		if (this._packageNameWildcard_ == oldChild) {
			setPackageNameWildcard((PPackageNameWildcard) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
