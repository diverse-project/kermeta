/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import java.util.*;
import fr.irisa.osgi.manifest.parser.analysis.*;

@SuppressWarnings("nls")
public final class AUniqueNameWildcard extends PUniqueNameWildcard
{
    private PUniqueNameWildcardCommons _uniqueNameWildcardCommons_;
    private final LinkedList<PUniqueNameWildcardSuffix> _uniqueNameWildcardSuffix_ = new LinkedList<PUniqueNameWildcardSuffix>();

    public AUniqueNameWildcard()
    {
        // Constructor
    }

    public AUniqueNameWildcard(
        @SuppressWarnings("hiding") PUniqueNameWildcardCommons _uniqueNameWildcardCommons_,
        @SuppressWarnings("hiding") List<PUniqueNameWildcardSuffix> _uniqueNameWildcardSuffix_)
    {
        // Constructor
        setUniqueNameWildcardCommons(_uniqueNameWildcardCommons_);

        setUniqueNameWildcardSuffix(_uniqueNameWildcardSuffix_);

    }

    @Override
    public Object clone()
    {
        return new AUniqueNameWildcard(
            cloneNode(this._uniqueNameWildcardCommons_),
            cloneList(this._uniqueNameWildcardSuffix_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUniqueNameWildcard(this);
    }

    public PUniqueNameWildcardCommons getUniqueNameWildcardCommons()
    {
        return this._uniqueNameWildcardCommons_;
    }

    public void setUniqueNameWildcardCommons(PUniqueNameWildcardCommons node)
    {
        if(this._uniqueNameWildcardCommons_ != null)
        {
            this._uniqueNameWildcardCommons_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._uniqueNameWildcardCommons_ = node;
    }

    public LinkedList<PUniqueNameWildcardSuffix> getUniqueNameWildcardSuffix()
    {
        return this._uniqueNameWildcardSuffix_;
    }

    public void setUniqueNameWildcardSuffix(List<PUniqueNameWildcardSuffix> list)
    {
        this._uniqueNameWildcardSuffix_.clear();
        this._uniqueNameWildcardSuffix_.addAll(list);
        for(PUniqueNameWildcardSuffix e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._uniqueNameWildcardCommons_)
            + toString(this._uniqueNameWildcardSuffix_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._uniqueNameWildcardCommons_ == child)
        {
            this._uniqueNameWildcardCommons_ = null;
            return;
        }

        if(this._uniqueNameWildcardSuffix_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._uniqueNameWildcardCommons_ == oldChild)
        {
            setUniqueNameWildcardCommons((PUniqueNameWildcardCommons) newChild);
            return;
        }

        for(ListIterator<PUniqueNameWildcardSuffix> i = this._uniqueNameWildcardSuffix_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PUniqueNameWildcardSuffix) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
