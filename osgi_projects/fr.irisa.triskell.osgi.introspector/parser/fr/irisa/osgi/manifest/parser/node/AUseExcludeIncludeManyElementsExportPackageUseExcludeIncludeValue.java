/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import fr.irisa.osgi.manifest.parser.analysis.Analysis;

@SuppressWarnings("nls")
public final class AUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue
		extends PExportPackageUseExcludeIncludeValue {
	private TQuote _left_;
	private PUniqueNameWildcard _uniqueNameWildcard_;
	private final LinkedList<PExportPackageUseExcludeIncludeIdentifier> _exportPackageUseExcludeIncludeIdentifier_ = new LinkedList<PExportPackageUseExcludeIncludeIdentifier>();
	private TQuote _right_;

	public AUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue() {
		// Constructor
	}

	public AUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue(
			@SuppressWarnings("hiding")
			TQuote _left_,
			@SuppressWarnings("hiding")
			PUniqueNameWildcard _uniqueNameWildcard_,
			@SuppressWarnings("hiding")
			List<PExportPackageUseExcludeIncludeIdentifier> _exportPackageUseExcludeIncludeIdentifier_,
			@SuppressWarnings("hiding")
			TQuote _right_) {
		// Constructor
		setLeft(_left_);

		setUniqueNameWildcard(_uniqueNameWildcard_);

		setExportPackageUseExcludeIncludeIdentifier(_exportPackageUseExcludeIncludeIdentifier_);

		setRight(_right_);

	}

	@Override
	public Object clone() {
		return new AUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue(
				cloneNode(this._left_), cloneNode(this._uniqueNameWildcard_),
				cloneList(this._exportPackageUseExcludeIncludeIdentifier_),
				cloneNode(this._right_));
	}

	public void apply(Switch sw) {
		((Analysis) sw)
				.caseAUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue(this);
	}

	public TQuote getLeft() {
		return this._left_;
	}

	public void setLeft(TQuote node) {
		if (this._left_ != null) {
			this._left_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._left_ = node;
	}

	public PUniqueNameWildcard getUniqueNameWildcard() {
		return this._uniqueNameWildcard_;
	}

	public void setUniqueNameWildcard(PUniqueNameWildcard node) {
		if (this._uniqueNameWildcard_ != null) {
			this._uniqueNameWildcard_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._uniqueNameWildcard_ = node;
	}

	public LinkedList<PExportPackageUseExcludeIncludeIdentifier> getExportPackageUseExcludeIncludeIdentifier() {
		return this._exportPackageUseExcludeIncludeIdentifier_;
	}

	public void setExportPackageUseExcludeIncludeIdentifier(
			List<PExportPackageUseExcludeIncludeIdentifier> list) {
		this._exportPackageUseExcludeIncludeIdentifier_.clear();
		this._exportPackageUseExcludeIncludeIdentifier_.addAll(list);
		for (PExportPackageUseExcludeIncludeIdentifier e : list) {
			if (e.parent() != null) {
				e.parent().removeChild(e);
			}

			e.parent(this);
		}
	}

	public TQuote getRight() {
		return this._right_;
	}

	public void setRight(TQuote node) {
		if (this._right_ != null) {
			this._right_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._right_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._left_) + toString(this._uniqueNameWildcard_)
				+ toString(this._exportPackageUseExcludeIncludeIdentifier_)
				+ toString(this._right_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._left_ == child) {
			this._left_ = null;
			return;
		}

		if (this._uniqueNameWildcard_ == child) {
			this._uniqueNameWildcard_ = null;
			return;
		}

		if (this._exportPackageUseExcludeIncludeIdentifier_.remove(child)) {
			return;
		}

		if (this._right_ == child) {
			this._right_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._left_ == oldChild) {
			setLeft((TQuote) newChild);
			return;
		}

		if (this._uniqueNameWildcard_ == oldChild) {
			setUniqueNameWildcard((PUniqueNameWildcard) newChild);
			return;
		}

		for (ListIterator<PExportPackageUseExcludeIncludeIdentifier> i = this._exportPackageUseExcludeIncludeIdentifier_
				.listIterator(); i.hasNext();) {
			if (i.next() == oldChild) {
				if (newChild != null) {
					i.set((PExportPackageUseExcludeIncludeIdentifier) newChild);
					newChild.parent(this);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		if (this._right_ == oldChild) {
			setRight((TQuote) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
