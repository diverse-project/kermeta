/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import java.util.*;
import fr.irisa.osgi.manifest.parser.analysis.*;

@SuppressWarnings("nls")
public final class AClasspathEntry extends PClasspathEntry {
	private PTarget _target_;
	private final LinkedList<PClasspathEntryValue> _classpathEntryValue_ = new LinkedList<PClasspathEntryValue>();
	private final LinkedList<PParameter> _parameter_ = new LinkedList<PParameter>();

	public AClasspathEntry() {
		// Constructor
	}

	public AClasspathEntry(@SuppressWarnings("hiding")
	PTarget _target_, @SuppressWarnings("hiding")
	List<PClasspathEntryValue> _classpathEntryValue_,
			@SuppressWarnings("hiding")
			List<PParameter> _parameter_) {
		// Constructor
		setTarget(_target_);

		setClasspathEntryValue(_classpathEntryValue_);

		setParameter(_parameter_);

	}

	@Override
	public Object clone() {
		return new AClasspathEntry(cloneNode(this._target_),
				cloneList(this._classpathEntryValue_),
				cloneList(this._parameter_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseAClasspathEntry(this);
	}

	public PTarget getTarget() {
		return this._target_;
	}

	public void setTarget(PTarget node) {
		if (this._target_ != null) {
			this._target_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._target_ = node;
	}

	public LinkedList<PClasspathEntryValue> getClasspathEntryValue() {
		return this._classpathEntryValue_;
	}

	public void setClasspathEntryValue(List<PClasspathEntryValue> list) {
		this._classpathEntryValue_.clear();
		this._classpathEntryValue_.addAll(list);
		for (PClasspathEntryValue e : list) {
			if (e.parent() != null) {
				e.parent().removeChild(e);
			}

			e.parent(this);
		}
	}

	public LinkedList<PParameter> getParameter() {
		return this._parameter_;
	}

	public void setParameter(List<PParameter> list) {
		this._parameter_.clear();
		this._parameter_.addAll(list);
		for (PParameter e : list) {
			if (e.parent() != null) {
				e.parent().removeChild(e);
			}

			e.parent(this);
		}
	}

	@Override
	public String toString() {
		return "" + toString(this._target_)
				+ toString(this._classpathEntryValue_)
				+ toString(this._parameter_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._target_ == child) {
			this._target_ = null;
			return;
		}

		if (this._classpathEntryValue_.remove(child)) {
			return;
		}

		if (this._parameter_.remove(child)) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._target_ == oldChild) {
			setTarget((PTarget) newChild);
			return;
		}

		for (ListIterator<PClasspathEntryValue> i = this._classpathEntryValue_
				.listIterator(); i.hasNext();) {
			if (i.next() == oldChild) {
				if (newChild != null) {
					i.set((PClasspathEntryValue) newChild);
					newChild.parent(this);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		for (ListIterator<PParameter> i = this._parameter_.listIterator(); i
				.hasNext();) {
			if (i.next() == oldChild) {
				if (newChild != null) {
					i.set((PParameter) newChild);
					newChild.parent(this);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		throw new RuntimeException("Not a child.");
	}
}
