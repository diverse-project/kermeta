/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import fr.irisa.osgi.manifest.parser.analysis.Analysis;

@SuppressWarnings("nls")
public final class AProcessorDirective extends PProcessorDirective {
	private TProcessor _processor_;
	private PProcessorValue _processorValue_;

	public AProcessorDirective() {
		// Constructor
	}

	public AProcessorDirective(@SuppressWarnings("hiding")
	TProcessor _processor_, @SuppressWarnings("hiding")
	PProcessorValue _processorValue_) {
		// Constructor
		setProcessor(_processor_);

		setProcessorValue(_processorValue_);

	}

	@Override
	public Object clone() {
		return new AProcessorDirective(cloneNode(this._processor_),
				cloneNode(this._processorValue_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseAProcessorDirective(this);
	}

	public TProcessor getProcessor() {
		return this._processor_;
	}

	public void setProcessor(TProcessor node) {
		if (this._processor_ != null) {
			this._processor_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._processor_ = node;
	}

	public PProcessorValue getProcessorValue() {
		return this._processorValue_;
	}

	public void setProcessorValue(PProcessorValue node) {
		if (this._processorValue_ != null) {
			this._processorValue_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._processorValue_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._processor_)
				+ toString(this._processorValue_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._processor_ == child) {
			this._processor_ = null;
			return;
		}

		if (this._processorValue_ == child) {
			this._processorValue_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._processor_ == oldChild) {
			setProcessor((TProcessor) newChild);
			return;
		}

		if (this._processorValue_ == oldChild) {
			setProcessorValue((PProcessorValue) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
