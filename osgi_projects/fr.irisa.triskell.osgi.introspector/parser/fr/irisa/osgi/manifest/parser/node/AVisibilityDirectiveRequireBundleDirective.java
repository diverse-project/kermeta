/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import fr.irisa.osgi.manifest.parser.analysis.*;

@SuppressWarnings("nls")
public final class AVisibilityDirectiveRequireBundleDirective extends PRequireBundleDirective
{
    private TVisibility _visibility_;
    private PVisibilityValue _visibilityValue_;

    public AVisibilityDirectiveRequireBundleDirective()
    {
        // Constructor
    }

    public AVisibilityDirectiveRequireBundleDirective(
        @SuppressWarnings("hiding") TVisibility _visibility_,
        @SuppressWarnings("hiding") PVisibilityValue _visibilityValue_)
    {
        // Constructor
        setVisibility(_visibility_);

        setVisibilityValue(_visibilityValue_);

    }

    @Override
    public Object clone()
    {
        return new AVisibilityDirectiveRequireBundleDirective(
            cloneNode(this._visibility_),
            cloneNode(this._visibilityValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVisibilityDirectiveRequireBundleDirective(this);
    }

    public TVisibility getVisibility()
    {
        return this._visibility_;
    }

    public void setVisibility(TVisibility node)
    {
        if(this._visibility_ != null)
        {
            this._visibility_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._visibility_ = node;
    }

    public PVisibilityValue getVisibilityValue()
    {
        return this._visibilityValue_;
    }

    public void setVisibilityValue(PVisibilityValue node)
    {
        if(this._visibilityValue_ != null)
        {
            this._visibilityValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._visibilityValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._visibility_)
            + toString(this._visibilityValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._visibility_ == child)
        {
            this._visibility_ = null;
            return;
        }

        if(this._visibilityValue_ == child)
        {
            this._visibilityValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._visibility_ == oldChild)
        {
            setVisibility((TVisibility) newChild);
            return;
        }

        if(this._visibilityValue_ == oldChild)
        {
            setVisibilityValue((PVisibilityValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
