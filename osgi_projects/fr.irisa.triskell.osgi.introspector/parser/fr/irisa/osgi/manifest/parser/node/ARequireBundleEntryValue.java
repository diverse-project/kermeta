/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import java.util.*;
import fr.irisa.osgi.manifest.parser.analysis.*;

@SuppressWarnings("nls")
public final class ARequireBundleEntryValue extends PRequireBundleEntryValue {
	private PRequireBundleSymbolicname _requireBundleSymbolicname_;
	private final LinkedList<PRequireBundleValue> _requireBundleValue_ = new LinkedList<PRequireBundleValue>();

	public ARequireBundleEntryValue() {
		// Constructor
	}

	public ARequireBundleEntryValue(@SuppressWarnings("hiding")
	PRequireBundleSymbolicname _requireBundleSymbolicname_,
			@SuppressWarnings("hiding")
			List<PRequireBundleValue> _requireBundleValue_) {
		// Constructor
		setRequireBundleSymbolicname(_requireBundleSymbolicname_);

		setRequireBundleValue(_requireBundleValue_);

	}

	@Override
	public Object clone() {
		return new ARequireBundleEntryValue(
				cloneNode(this._requireBundleSymbolicname_),
				cloneList(this._requireBundleValue_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseARequireBundleEntryValue(this);
	}

	public PRequireBundleSymbolicname getRequireBundleSymbolicname() {
		return this._requireBundleSymbolicname_;
	}

	public void setRequireBundleSymbolicname(PRequireBundleSymbolicname node) {
		if (this._requireBundleSymbolicname_ != null) {
			this._requireBundleSymbolicname_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._requireBundleSymbolicname_ = node;
	}

	public LinkedList<PRequireBundleValue> getRequireBundleValue() {
		return this._requireBundleValue_;
	}

	public void setRequireBundleValue(List<PRequireBundleValue> list) {
		this._requireBundleValue_.clear();
		this._requireBundleValue_.addAll(list);
		for (PRequireBundleValue e : list) {
			if (e.parent() != null) {
				e.parent().removeChild(e);
			}

			e.parent(this);
		}
	}

	@Override
	public String toString() {
		return "" + toString(this._requireBundleSymbolicname_)
				+ toString(this._requireBundleValue_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._requireBundleSymbolicname_ == child) {
			this._requireBundleSymbolicname_ = null;
			return;
		}

		if (this._requireBundleValue_.remove(child)) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._requireBundleSymbolicname_ == oldChild) {
			setRequireBundleSymbolicname((PRequireBundleSymbolicname) newChild);
			return;
		}

		for (ListIterator<PRequireBundleValue> i = this._requireBundleValue_
				.listIterator(); i.hasNext();) {
			if (i.next() == oldChild) {
				if (newChild != null) {
					i.set((PRequireBundleValue) newChild);
					newChild.parent(this);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		throw new RuntimeException("Not a child.");
	}
}
