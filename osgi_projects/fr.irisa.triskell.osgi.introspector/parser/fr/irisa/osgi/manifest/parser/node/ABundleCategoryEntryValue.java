/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.osgi.manifest.parser.node;

import java.util.*;
import fr.irisa.osgi.manifest.parser.analysis.*;

@SuppressWarnings("nls")
public final class ABundleCategoryEntryValue extends PBundleCategoryEntryValue
{
    private TSimpleStringValue _simpleStringValue_;
    private final LinkedList<PParameter> _parameter_ = new LinkedList<PParameter>();
    private final LinkedList<PCategoryValue> _categoryValue_ = new LinkedList<PCategoryValue>();

    public ABundleCategoryEntryValue()
    {
        // Constructor
    }

    public ABundleCategoryEntryValue(
        @SuppressWarnings("hiding") TSimpleStringValue _simpleStringValue_,
        @SuppressWarnings("hiding") List<PParameter> _parameter_,
        @SuppressWarnings("hiding") List<PCategoryValue> _categoryValue_)
    {
        // Constructor
        setSimpleStringValue(_simpleStringValue_);

        setParameter(_parameter_);

        setCategoryValue(_categoryValue_);

    }

    @Override
    public Object clone()
    {
        return new ABundleCategoryEntryValue(
            cloneNode(this._simpleStringValue_),
            cloneList(this._parameter_),
            cloneList(this._categoryValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABundleCategoryEntryValue(this);
    }

    public TSimpleStringValue getSimpleStringValue()
    {
        return this._simpleStringValue_;
    }

    public void setSimpleStringValue(TSimpleStringValue node)
    {
        if(this._simpleStringValue_ != null)
        {
            this._simpleStringValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleStringValue_ = node;
    }

    public LinkedList<PParameter> getParameter()
    {
        return this._parameter_;
    }

    public void setParameter(List<PParameter> list)
    {
        this._parameter_.clear();
        this._parameter_.addAll(list);
        for(PParameter e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PCategoryValue> getCategoryValue()
    {
        return this._categoryValue_;
    }

    public void setCategoryValue(List<PCategoryValue> list)
    {
        this._categoryValue_.clear();
        this._categoryValue_.addAll(list);
        for(PCategoryValue e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleStringValue_)
            + toString(this._parameter_)
            + toString(this._categoryValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleStringValue_ == child)
        {
            this._simpleStringValue_ = null;
            return;
        }

        if(this._parameter_.remove(child))
        {
            return;
        }

        if(this._categoryValue_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleStringValue_ == oldChild)
        {
            setSimpleStringValue((TSimpleStringValue) newChild);
            return;
        }

        for(ListIterator<PParameter> i = this._parameter_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParameter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PCategoryValue> i = this._categoryValue_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCategoryValue) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
