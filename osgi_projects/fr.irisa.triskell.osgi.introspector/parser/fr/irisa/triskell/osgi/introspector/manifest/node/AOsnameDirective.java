/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.triskell.osgi.introspector.manifest.node;

import fr.irisa.triskell.osgi.introspector.manifest.analysis.*;

@SuppressWarnings("nls")
public final class AOsnameDirective extends POsnameDirective {
	private TOsname _osname_;
	private POsnameValue _osnameValue_;

	public AOsnameDirective() {
		// Constructor
	}

	public AOsnameDirective(@SuppressWarnings("hiding")
	TOsname _osname_, @SuppressWarnings("hiding")
	POsnameValue _osnameValue_) {
		// Constructor
		setOsname(_osname_);

		setOsnameValue(_osnameValue_);

	}

	@Override
	public Object clone() {
		return new AOsnameDirective(cloneNode(this._osname_),
				cloneNode(this._osnameValue_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseAOsnameDirective(this);
	}

	public TOsname getOsname() {
		return this._osname_;
	}

	public void setOsname(TOsname node) {
		if (this._osname_ != null) {
			this._osname_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._osname_ = node;
	}

	public POsnameValue getOsnameValue() {
		return this._osnameValue_;
	}

	public void setOsnameValue(POsnameValue node) {
		if (this._osnameValue_ != null) {
			this._osnameValue_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._osnameValue_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._osname_) + toString(this._osnameValue_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._osname_ == child) {
			this._osname_ = null;
			return;
		}

		if (this._osnameValue_ == child) {
			this._osnameValue_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._osname_ == oldChild) {
			setOsname((TOsname) newChild);
			return;
		}

		if (this._osnameValue_ == oldChild) {
			setOsnameValue((POsnameValue) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
