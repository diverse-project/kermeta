/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.triskell.osgi.introspector.manifest.node;

import fr.irisa.triskell.osgi.introspector.manifest.analysis.*;

@SuppressWarnings("nls")
public final class AOsversionDirective extends POsversionDirective {
	private TOsversion _osversion_;
	private PVersionRange _versionRange_;

	public AOsversionDirective() {
		// Constructor
	}

	public AOsversionDirective(@SuppressWarnings("hiding")
	TOsversion _osversion_, @SuppressWarnings("hiding")
	PVersionRange _versionRange_) {
		// Constructor
		setOsversion(_osversion_);

		setVersionRange(_versionRange_);

	}

	@Override
	public Object clone() {
		return new AOsversionDirective(cloneNode(this._osversion_),
				cloneNode(this._versionRange_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseAOsversionDirective(this);
	}

	public TOsversion getOsversion() {
		return this._osversion_;
	}

	public void setOsversion(TOsversion node) {
		if (this._osversion_ != null) {
			this._osversion_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._osversion_ = node;
	}

	public PVersionRange getVersionRange() {
		return this._versionRange_;
	}

	public void setVersionRange(PVersionRange node) {
		if (this._versionRange_ != null) {
			this._versionRange_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._versionRange_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._osversion_) + toString(this._versionRange_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._osversion_ == child) {
			this._osversion_ = null;
			return;
		}

		if (this._versionRange_ == child) {
			this._versionRange_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._osversion_ == oldChild) {
			setOsversion((TOsversion) newChild);
			return;
		}

		if (this._versionRange_ == oldChild) {
			setVersionRange((PVersionRange) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
