/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.triskell.osgi.introspector.manifest.analysis;

import java.util.*;
import fr.irisa.triskell.osgi.introspector.manifest.node.*;

public class AnalysisAdapter implements Analysis {
	private Hashtable<Node, Object> in;
	private Hashtable<Node, Object> out;

	public Object getIn(Node node) {
		if (this.in == null) {
			return null;
		}

		return this.in.get(node);
	}

	public void setIn(Node node, Object o) {
		if (this.in == null) {
			this.in = new Hashtable<Node, Object>(1);
		}

		if (o != null) {
			this.in.put(node, o);
		} else {
			this.in.remove(node);
		}
	}

	public Object getOut(Node node) {
		if (this.out == null) {
			return null;
		}

		return this.out.get(node);
	}

	public void setOut(Node node, Object o) {
		if (this.out == null) {
			this.out = new Hashtable<Node, Object>(1);
		}

		if (o != null) {
			this.out.put(node, o);
		} else {
			this.out.remove(node);
		}
	}

	public void caseStart(Start node) {
		defaultCase(node);
	}

	public void caseAManifest(AManifest node) {
		defaultCase(node);
	}

	public void caseAManifestcontent(AManifestcontent node) {
		defaultCase(node);
	}

	public void caseABundleActivationpolicyEntryManifestentry(
			ABundleActivationpolicyEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleActivatorEntryManifestentry(
			ABundleActivatorEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleCategoryEntryManifestentry(
			ABundleCategoryEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleClasspathEntryManifestentry(
			ABundleClasspathEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleContactaddressEntryManifestentry(
			ABundleContactaddressEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleCopyrightEntryManifestentry(
			ABundleCopyrightEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleDescriptionEntryManifestentry(
			ABundleDescriptionEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleDocurlEntryManifestentry(
			ABundleDocurlEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleLocalizationEntryManifestentry(
			ABundleLocalizationEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleManifestversionEntryManifestentry(
			ABundleManifestversionEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleNativecodeEntryManifestentry(
			ABundleNativecodeEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleRequiredexecutionenvironmentEntryManifestentry(
			ABundleRequiredexecutionenvironmentEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleSymbolicnameEntryManifestentry(
			ABundleSymbolicnameEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleUpdatelocationEntryManifestentry(
			ABundleUpdatelocationEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleVendorEntryManifestentry(
			ABundleVendorEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleVersionEntryManifestentry(
			ABundleVersionEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseADynamicimportPackageEntryManifestentry(
			ADynamicimportPackageEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseAExportPackageEntryManifestentry(
			AExportPackageEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseAExportServiceEntryManifestentry(
			AExportServiceEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseAFragmentHostEntryManifestentry(
			AFragmentHostEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseAImportPackageEntryManifestentry(
			AImportPackageEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseAImportServiceEntryManifestentry(
			AImportServiceEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseARequireBundleEntryManifestentry(
			ARequireBundleEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleNameEntryManifestentry(
			ABundleNameEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseAOtherEntryManifestentry(AOtherEntryManifestentry node) {
		defaultCase(node);
	}

	public void caseABundleNameEntry(ABundleNameEntry node) {
		defaultCase(node);
	}

	public void caseASimpleEntryOtherEntry(ASimpleEntryOtherEntry node) {
		defaultCase(node);
	}

	public void caseADigestEntryOtherEntry(ADigestEntryOtherEntry node) {
		defaultCase(node);
	}

	public void caseADigestEntry(ADigestEntry node) {
		defaultCase(node);
	}

	public void caseASimpleEntry(ASimpleEntry node) {
		defaultCase(node);
	}

	public void caseASimpleEntryValue(ASimpleEntryValue node) {
		defaultCase(node);
	}

	public void caseAOtherEntryValueNext(AOtherEntryValueNext node) {
		defaultCase(node);
	}

	public void caseAOtherEntryValue(AOtherEntryValue node) {
		defaultCase(node);
	}

	public void caseAOtherValue(AOtherValue node) {
		defaultCase(node);
	}

	public void caseABundleActivationpolicyEntry(
			ABundleActivationpolicyEntry node) {
		defaultCase(node);
	}

	public void caseABundleActivationpolicyEntryValue(
			ABundleActivationpolicyEntryValue node) {
		defaultCase(node);
	}

	public void caseAActivationpolicyValue(AActivationpolicyValue node) {
		defaultCase(node);
	}

	public void caseADirectiveActivationpolicyOptions(
			ADirectiveActivationpolicyOptions node) {
		defaultCase(node);
	}

	public void caseAAttributeActivationpolicyOptions(
			AAttributeActivationpolicyOptions node) {
		defaultCase(node);
	}

	public void caseAIncludeActivationpolicyDirective(
			AIncludeActivationpolicyDirective node) {
		defaultCase(node);
	}

	public void caseAExcludeActivationpolicyDirective(
			AExcludeActivationpolicyDirective node) {
		defaultCase(node);
	}

	public void caseAExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue(
			AExcludeIncludeManyPackagesActivationPolicyExcludeIncludeValue node) {
		defaultCase(node);
	}

	public void caseAExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue(
			AExcludeIncludeOnePackageActivationPolicyExcludeIncludeValue node) {
		defaultCase(node);
	}

	public void caseAActivationPolicyExcludeIncludeIdentifier(
			AActivationPolicyExcludeIncludeIdentifier node) {
		defaultCase(node);
	}

	public void caseABundleActivatorEntry(ABundleActivatorEntry node) {
		defaultCase(node);
	}

	public void caseABundleActivatorEntryValue(ABundleActivatorEntryValue node) {
		defaultCase(node);
	}

	public void caseABundleCategoryEntry(ABundleCategoryEntry node) {
		defaultCase(node);
	}

	public void caseABundleCategoryEntryValue(ABundleCategoryEntryValue node) {
		defaultCase(node);
	}

	public void caseACategoryValue(ACategoryValue node) {
		defaultCase(node);
	}

	public void caseABundleClasspathEntry(ABundleClasspathEntry node) {
		defaultCase(node);
	}

	public void caseABundleClasspathEntryValue(ABundleClasspathEntryValue node) {
		defaultCase(node);
	}

	public void caseAClasspathValue(AClasspathValue node) {
		defaultCase(node);
	}

	public void caseAClasspathEntry(AClasspathEntry node) {
		defaultCase(node);
	}

	public void caseAClasspathEntryValue(AClasspathEntryValue node) {
		defaultCase(node);
	}

	public void caseABundleContactaddressEntry(ABundleContactaddressEntry node) {
		defaultCase(node);
	}

	public void caseABundleCopyrightEntry(ABundleCopyrightEntry node) {
		defaultCase(node);
	}

	public void caseABundleDescriptionEntry(ABundleDescriptionEntry node) {
		defaultCase(node);
	}

	public void caseABundleDocurlEntry(ABundleDocurlEntry node) {
		defaultCase(node);
	}

	public void caseABundleLocalizationEntry(ABundleLocalizationEntry node) {
		defaultCase(node);
	}

	public void caseABundleManifestversionEntry(ABundleManifestversionEntry node) {
		defaultCase(node);
	}

	public void caseABundleNativecodeEntry(ABundleNativecodeEntry node) {
		defaultCase(node);
	}

	public void caseABundleNativecodeEntryValue(ABundleNativecodeEntryValue node) {
		defaultCase(node);
	}

	public void caseANativecodeOptional(ANativecodeOptional node) {
		defaultCase(node);
	}

	public void caseANativecodeValue(ANativecodeValue node) {
		defaultCase(node);
	}

	public void caseANativecodeEntry(ANativecodeEntry node) {
		defaultCase(node);
	}

	public void caseANativecodeEntryValue(ANativecodeEntryValue node) {
		defaultCase(node);
	}

	public void caseANativecodeDirectiveNativecodeParameter(
			ANativecodeDirectiveNativecodeParameter node) {
		defaultCase(node);
	}

	public void caseANativecodeAttributeNativecodeParameter(
			ANativecodeAttributeNativecodeParameter node) {
		defaultCase(node);
	}

	public void caseAOsnameDirectiveNativecodeDirective(
			AOsnameDirectiveNativecodeDirective node) {
		defaultCase(node);
	}

	public void caseAOsversionDirectiveNativecodeDirective(
			AOsversionDirectiveNativecodeDirective node) {
		defaultCase(node);
	}

	public void caseAProcessorDirectiveNativecodeDirective(
			AProcessorDirectiveNativecodeDirective node) {
		defaultCase(node);
	}

	public void caseALanguageDirectiveNativecodeDirective(
			ALanguageDirectiveNativecodeDirective node) {
		defaultCase(node);
	}

	public void caseASelectionFilterDirectiveNativecodeDirective(
			ASelectionFilterDirectiveNativecodeDirective node) {
		defaultCase(node);
	}

	public void caseAOsnameDirective(AOsnameDirective node) {
		defaultCase(node);
	}

	public void caseAOsversionDirective(AOsversionDirective node) {
		defaultCase(node);
	}

	public void caseAProcessorDirective(AProcessorDirective node) {
		defaultCase(node);
	}

	public void caseALanguageDirective(ALanguageDirective node) {
		defaultCase(node);
	}

	public void caseASelectionFilterDirective(ASelectionFilterDirective node) {
		defaultCase(node);
	}

	public void caseABundleRequiredexecutionenvironmentEntry(
			ABundleRequiredexecutionenvironmentEntry node) {
		defaultCase(node);
	}

	public void caseABundleRequiredexecutionenvironmentEntryValue(
			ABundleRequiredexecutionenvironmentEntryValue node) {
		defaultCase(node);
	}

	public void caseARequiredexecutionenvironmentValue(
			ARequiredexecutionenvironmentValue node) {
		defaultCase(node);
	}

	public void caseARequiredexecutionenvironment(
			ARequiredexecutionenvironment node) {
		defaultCase(node);
	}

	public void caseABundleSymbolicnameEntry(ABundleSymbolicnameEntry node) {
		defaultCase(node);
	}

	public void caseASymbolicnameDirectiveSymbolicnameOption(
			ASymbolicnameDirectiveSymbolicnameOption node) {
		defaultCase(node);
	}

	public void caseASymbolicnameAttributeSymbolicnameOption(
			ASymbolicnameAttributeSymbolicnameOption node) {
		defaultCase(node);
	}

	public void caseASingletonSymbolicnameDirective(
			ASingletonSymbolicnameDirective node) {
		defaultCase(node);
	}

	public void caseAFragmentAttachmentSymbolicnameDirective(
			AFragmentAttachmentSymbolicnameDirective node) {
		defaultCase(node);
	}

	public void caseABundleUpdatelocationEntry(ABundleUpdatelocationEntry node) {
		defaultCase(node);
	}

	public void caseABundleVendorEntry(ABundleVendorEntry node) {
		defaultCase(node);
	}

	public void caseABundleVersionEntry(ABundleVersionEntry node) {
		defaultCase(node);
	}

	public void caseAVersionIntervalVersionRange(
			AVersionIntervalVersionRange node) {
		defaultCase(node);
	}

	public void caseAVersionAtleastVersionRange(AVersionAtleastVersionRange node) {
		defaultCase(node);
	}

	public void caseAVersionInterval(AVersionInterval node) {
		defaultCase(node);
	}

	public void caseAVersionAtleast(AVersionAtleast node) {
		defaultCase(node);
	}

	public void caseAQuotedVersionMajorVersionEntry(
			AQuotedVersionMajorVersionEntry node) {
		defaultCase(node);
	}

	public void caseAUnquotedVersionMajorVersionEntry(
			AUnquotedVersionMajorVersionEntry node) {
		defaultCase(node);
	}

	public void caseAMajorVersion(AMajorVersion node) {
		defaultCase(node);
	}

	public void caseAMinorVersion(AMinorVersion node) {
		defaultCase(node);
	}

	public void caseAMicroVersion(AMicroVersion node) {
		defaultCase(node);
	}

	public void caseAQualifierQualifierVersion(AQualifierQualifierVersion node) {
		defaultCase(node);
	}

	public void caseANumberQualifierVersion(ANumberQualifierVersion node) {
		defaultCase(node);
	}

	public void caseADynamicimportPackageEntry(ADynamicimportPackageEntry node) {
		defaultCase(node);
	}

	public void caseADynamicimportPackageEntryValue(
			ADynamicimportPackageEntryValue node) {
		defaultCase(node);
	}

	public void caseADynamicDescription(ADynamicDescription node) {
		defaultCase(node);
	}

	public void caseADynamicimportPackageNames(ADynamicimportPackageNames node) {
		defaultCase(node);
	}

	public void caseADynamicimportPackageValue(ADynamicimportPackageValue node) {
		defaultCase(node);
	}

	public void caseAExportPackageEntry(AExportPackageEntry node) {
		defaultCase(node);
	}

	public void caseAExportPackageEntryValue1(AExportPackageEntryValue1 node) {
		defaultCase(node);
	}

	public void caseAExportPackageValue(AExportPackageValue node) {
		defaultCase(node);
	}

	public void caseAExportPackageEntryValue(AExportPackageEntryValue node) {
		defaultCase(node);
	}

	public void caseAPackageNames(APackageNames node) {
		defaultCase(node);
	}

	public void caseAExportPackageDirectiveExportPackageParameter(
			AExportPackageDirectiveExportPackageParameter node) {
		defaultCase(node);
	}

	public void caseAExportPackageAttributeExportPackageParameter(
			AExportPackageAttributeExportPackageParameter node) {
		defaultCase(node);
	}

	public void caseAUsesExportPackageDirective(AUsesExportPackageDirective node) {
		defaultCase(node);
	}

	public void caseAIncludeExportPackageDirective(
			AIncludeExportPackageDirective node) {
		defaultCase(node);
	}

	public void caseAExcludeExportPackageDirective(
			AExcludeExportPackageDirective node) {
		defaultCase(node);
	}

	public void caseAMandatoryExportPackageDirective(
			AMandatoryExportPackageDirective node) {
		defaultCase(node);
	}

	public void caseAUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue(
			AUseExcludeIncludeManyElementsExportPackageUseExcludeIncludeValue node) {
		defaultCase(node);
	}

	public void caseAUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue(
			AUseExcludeIncludeOneElementExportPackageUseExcludeIncludeValue node) {
		defaultCase(node);
	}

	public void caseAExportPackageUseExcludeIncludeIdentifier(
			AExportPackageUseExcludeIncludeIdentifier node) {
		defaultCase(node);
	}

	public void caseAMandatoryManyAttributesMandatoryValue(
			AMandatoryManyAttributesMandatoryValue node) {
		defaultCase(node);
	}

	public void caseAMandatoryOneAttributeMandatoryValue(
			AMandatoryOneAttributeMandatoryValue node) {
		defaultCase(node);
	}

	public void caseAMandatoryString(AMandatoryString node) {
		defaultCase(node);
	}

	public void caseAFragmentHostEntry(AFragmentHostEntry node) {
		defaultCase(node);
	}

	public void caseAFragmentHostEntryValue(AFragmentHostEntryValue node) {
		defaultCase(node);
	}

	public void caseAFragmentHostDirectiveFragmentHostParameter(
			AFragmentHostDirectiveFragmentHostParameter node) {
		defaultCase(node);
	}

	public void caseAFragmentHostAttributeFragmentHostParameter(
			AFragmentHostAttributeFragmentHostParameter node) {
		defaultCase(node);
	}

	public void caseAFragmentHostDirective(AFragmentHostDirective node) {
		defaultCase(node);
	}

	public void caseAImportPackageEntry(AImportPackageEntry node) {
		defaultCase(node);
	}

	public void caseAImportPackageEntryValue1(AImportPackageEntryValue1 node) {
		defaultCase(node);
	}

	public void caseAImportPackageValue(AImportPackageValue node) {
		defaultCase(node);
	}

	public void caseAImportPackageEntryValue(AImportPackageEntryValue node) {
		defaultCase(node);
	}

	public void caseAImportPackageDirectiveImportPackageParameter(
			AImportPackageDirectiveImportPackageParameter node) {
		defaultCase(node);
	}

	public void caseAImportPackageAttributeImportPackageParameter(
			AImportPackageAttributeImportPackageParameter node) {
		defaultCase(node);
	}

	public void caseAImportPackageDirective(AImportPackageDirective node) {
		defaultCase(node);
	}

	public void caseAImportServiceEntry(AImportServiceEntry node) {
		defaultCase(node);
	}

	public void caseAImportServiceEntryValue(AImportServiceEntryValue node) {
		defaultCase(node);
	}

	public void caseAServiceValue(AServiceValue node) {
		defaultCase(node);
	}

	public void caseAExportServiceEntry(AExportServiceEntry node) {
		defaultCase(node);
	}

	public void caseAExportServiceEntryValue(AExportServiceEntryValue node) {
		defaultCase(node);
	}

	public void caseARequireBundleEntry(ARequireBundleEntry node) {
		defaultCase(node);
	}

	public void caseARequireBundleEntryValue(ARequireBundleEntryValue node) {
		defaultCase(node);
	}

	public void caseARequireBundleSymbolicname(ARequireBundleSymbolicname node) {
		defaultCase(node);
	}

	public void caseARequireBundleValue(ARequireBundleValue node) {
		defaultCase(node);
	}

	public void caseARequireBundleDirectiveRequireBundleOptions(
			ARequireBundleDirectiveRequireBundleOptions node) {
		defaultCase(node);
	}

	public void caseARequireBundleAttributeRequireBundleOptions(
			ARequireBundleAttributeRequireBundleOptions node) {
		defaultCase(node);
	}

	public void caseAVisibilityDirectiveRequireBundleDirective(
			AVisibilityDirectiveRequireBundleDirective node) {
		defaultCase(node);
	}

	public void caseAResolutionDirectiveRequireBundleDirective(
			AResolutionDirectiveRequireBundleDirective node) {
		defaultCase(node);
	}

	public void caseAAlwaysFragmentAttachmentValue(
			AAlwaysFragmentAttachmentValue node) {
		defaultCase(node);
	}

	public void caseANeverFragmentAttachmentValue(
			ANeverFragmentAttachmentValue node) {
		defaultCase(node);
	}

	public void caseAResolveTimeFragmentAttachmentValue(
			AResolveTimeFragmentAttachmentValue node) {
		defaultCase(node);
	}

	public void caseAProcessor68kProcessorValue(AProcessor68kProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorArmProcessorValue(AProcessorArmProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorAlphaProcessorValue(
			AProcessorAlphaProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorIgniteProcessorValue(
			AProcessorIgniteProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorMipsProcessorValue(
			AProcessorMipsProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorPariscProcessorValue(
			AProcessorPariscProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorPowerpcProcessorValue(
			AProcessorPowerpcProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorSh4ProcessorValue(AProcessorSh4ProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorSparcProcessorValue(
			AProcessorSparcProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorS390ProcessorValue(
			AProcessorS390ProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorS390xProcessorValue(
			AProcessorS390xProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorV850eProcessorValue(
			AProcessorV850eProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorX86ProcessorValue(AProcessorX86ProcessorValue node) {
		defaultCase(node);
	}

	public void caseAProcessorX8664ProcessorValue(
			AProcessorX8664ProcessorValue node) {
		defaultCase(node);
	}

	public void caseAOsnameAixOsnameValue(AOsnameAixOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameDigitalunixOsnameValue(
			AOsnameDigitalunixOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameEmbosOsnameValue(AOsnameEmbosOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameEpoc32OsnameValue(AOsnameEpoc32OsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameFreebsdOsnameValue(AOsnameFreebsdOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameHpuxOsnameValue(AOsnameHpuxOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameIrixOsnameValue(AOsnameIrixOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameLinuxOsnameValue(AOsnameLinuxOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameMacosOsnameValue(AOsnameMacosOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameNetbsdOsnameValue(AOsnameNetbsdOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameNetwareOsnameValue(AOsnameNetwareOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameOpenbsdOsnameValue(AOsnameOpenbsdOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameOs2OsnameValue(AOsnameOs2OsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameQnxOsnameValue(AOsnameQnxOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameSolarisOsnameValue(AOsnameSolarisOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameSunosOsnameValue(AOsnameSunosOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameVxworksOsnameValue(AOsnameVxworksOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameWindows95OsnameValue(AOsnameWindows95OsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameWindows98OsnameValue(AOsnameWindows98OsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameWindowsntOsnameValue(AOsnameWindowsntOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameWindowsceOsnameValue(AOsnameWindowsceOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameWindows2000OsnameValue(
			AOsnameWindows2000OsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameWindows2003OsnameValue(
			AOsnameWindows2003OsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameWindowsxpOsnameValue(AOsnameWindowsxpOsnameValue node) {
		defaultCase(node);
	}

	public void caseAOsnameWindowsvistaOsnameValue(
			AOsnameWindowsvistaOsnameValue node) {
		defaultCase(node);
	}

	public void caseALanguageValue(ALanguageValue node) {
		defaultCase(node);
	}

	public void caseAEqualsBooleanComparator(AEqualsBooleanComparator node) {
		defaultCase(node);
	}

	public void caseAGreaterEqualsBooleanComparator(
			AGreaterEqualsBooleanComparator node) {
		defaultCase(node);
	}

	public void caseALesserEqualsBooleanComparator(
			ALesserEqualsBooleanComparator node) {
		defaultCase(node);
	}

	public void caseAGreaterBooleanComparator(AGreaterBooleanComparator node) {
		defaultCase(node);
	}

	public void caseALessBooleanComparator(ALessBooleanComparator node) {
		defaultCase(node);
	}

	public void caseANotEqualsBooleanComparator(ANotEqualsBooleanComparator node) {
		defaultCase(node);
	}

	public void caseASelectionFilterValue(ASelectionFilterValue node) {
		defaultCase(node);
	}

	public void caseAVisibilityPrivateVisibilityValue(
			AVisibilityPrivateVisibilityValue node) {
		defaultCase(node);
	}

	public void caseAVisibilityReexportVisibilityValue(
			AVisibilityReexportVisibilityValue node) {
		defaultCase(node);
	}

	public void caseAResolutionMandatoryResolutionValue(
			AResolutionMandatoryResolutionValue node) {
		defaultCase(node);
	}

	public void caseAResolutionOptionalResolutionValue(
			AResolutionOptionalResolutionValue node) {
		defaultCase(node);
	}

	public void caseAExtensionFrameworkExtensionValue(
			AExtensionFrameworkExtensionValue node) {
		defaultCase(node);
	}

	public void caseAExtensionBootclasspathExtensionValue(
			AExtensionBootclasspathExtensionValue node) {
		defaultCase(node);
	}

	public void caseATrueBoolean(ATrueBoolean node) {
		defaultCase(node);
	}

	public void caseAFalseBoolean(AFalseBoolean node) {
		defaultCase(node);
	}

	public void caseAPathUnquotedPath(APathUnquotedPath node) {
		defaultCase(node);
	}

	public void caseAPathQuotedPath(APathQuotedPath node) {
		defaultCase(node);
	}

	public void caseAPathSepOnlyPathUnquoted(APathSepOnlyPathUnquoted node) {
		defaultCase(node);
	}

	public void caseAPathSeptelementPathUnquoted(
			APathSeptelementPathUnquoted node) {
		defaultCase(node);
	}

	public void caseAPathElement(APathElement node) {
		defaultCase(node);
	}

	public void caseAPathSuffix(APathSuffix node) {
		defaultCase(node);
	}

	public void caseAPathQuoted(APathQuoted node) {
		defaultCase(node);
	}

	public void caseAHttpUnquotedUrl(AHttpUnquotedUrl node) {
		defaultCase(node);
	}

	public void caseAFileUnquotedUrl(AFileUnquotedUrl node) {
		defaultCase(node);
	}

	public void caseAFtpUnquotedUrl(AFtpUnquotedUrl node) {
		defaultCase(node);
	}

	public void caseAQuotedUrl(AQuotedUrl node) {
		defaultCase(node);
	}

	public void caseAUniqueNameWildcard(AUniqueNameWildcard node) {
		defaultCase(node);
	}

	public void caseAIdentifierUniqueNameWildcardSuffix(
			AIdentifierUniqueNameWildcardSuffix node) {
		defaultCase(node);
	}

	public void caseAOptionalUniqueNameWildcardSuffix(
			AOptionalUniqueNameWildcardSuffix node) {
		defaultCase(node);
	}

	public void caseAIdentifierUniqueNameWildcardCommons(
			AIdentifierUniqueNameWildcardCommons node) {
		defaultCase(node);
	}

	public void caseAOptionalUniqueNameWildcardCommons(
			AOptionalUniqueNameWildcardCommons node) {
		defaultCase(node);
	}

	public void caseAPackageNameWildcard(APackageNameWildcard node) {
		defaultCase(node);
	}

	public void caseAPathTarget(APathTarget node) {
		defaultCase(node);
	}

	public void caseADotTarget(ADotTarget node) {
		defaultCase(node);
	}

	public void caseAUnquotedUrlValue(AUnquotedUrlValue node) {
		defaultCase(node);
	}

	public void caseAQuotedUrlValue(AQuotedUrlValue node) {
		defaultCase(node);
	}

	public void caseAParameter(AParameter node) {
		defaultCase(node);
	}

	public void caseAAttribute(AAttribute node) {
		defaultCase(node);
	}

	public void caseAUnquotedStringStringEntryValue(
			AUnquotedStringStringEntryValue node) {
		defaultCase(node);
	}

	public void caseAQuotedStringStringEntryValue(
			AQuotedStringStringEntryValue node) {
		defaultCase(node);
	}

	public void caseAGoodPackageNamePackageName(AGoodPackageNamePackageName node) {
		defaultCase(node);
	}

	public void caseAMustNotAppearsPackageName(AMustNotAppearsPackageName node) {
		defaultCase(node);
	}

	public void caseAUniqueName(AUniqueName node) {
		defaultCase(node);
	}

	public void caseAUniqueNameSuffix(AUniqueNameSuffix node) {
		defaultCase(node);
	}

	public void caseTQuote(TQuote node) {
		defaultCase(node);
	}

	public void caseTDefinition(TDefinition node) {
		defaultCase(node);
	}

	public void caseTLeftBracket(TLeftBracket node) {
		defaultCase(node);
	}

	public void caseTRightBracket(TRightBracket node) {
		defaultCase(node);
	}

	public void caseTDotdot(TDotdot node) {
		defaultCase(node);
	}

	public void caseTDoubleAntiSlash(TDoubleAntiSlash node) {
		defaultCase(node);
	}

	public void caseTProtectedString(TProtectedString node) {
		defaultCase(node);
	}

	public void caseTPathSep(TPathSep node) {
		defaultCase(node);
	}

	public void caseTSemicolon(TSemicolon node) {
		defaultCase(node);
	}

	public void caseTComma(TComma node) {
		defaultCase(node);
	}

	public void caseTOptional(TOptional node) {
		defaultCase(node);
	}

	public void caseTDot(TDot node) {
		defaultCase(node);
	}

	public void caseTEquals(TEquals node) {
		defaultCase(node);
	}

	public void caseTGreaterEquals(TGreaterEquals node) {
		defaultCase(node);
	}

	public void caseTLesserEquals(TLesserEquals node) {
		defaultCase(node);
	}

	public void caseTGreater(TGreater node) {
		defaultCase(node);
	}

	public void caseTLess(TLess node) {
		defaultCase(node);
	}

	public void caseTNotEquals(TNotEquals node) {
		defaultCase(node);
	}

	public void caseTUrlHttp(TUrlHttp node) {
		defaultCase(node);
	}

	public void caseTUrlFtp(TUrlFtp node) {
		defaultCase(node);
	}

	public void caseTUrlFile(TUrlFile node) {
		defaultCase(node);
	}

	public void caseTBundleActivationpolicy(TBundleActivationpolicy node) {
		defaultCase(node);
	}

	public void caseTBundleActivator(TBundleActivator node) {
		defaultCase(node);
	}

	public void caseTBundleCategory(TBundleCategory node) {
		defaultCase(node);
	}

	public void caseTBundleClasspath(TBundleClasspath node) {
		defaultCase(node);
	}

	public void caseTBundleContactaddress(TBundleContactaddress node) {
		defaultCase(node);
	}

	public void caseTBundleCopyright(TBundleCopyright node) {
		defaultCase(node);
	}

	public void caseTBundleDescription(TBundleDescription node) {
		defaultCase(node);
	}

	public void caseTBundleDocurl(TBundleDocurl node) {
		defaultCase(node);
	}

	public void caseTBundleLocalization(TBundleLocalization node) {
		defaultCase(node);
	}

	public void caseTBundleManifestversion(TBundleManifestversion node) {
		defaultCase(node);
	}

	public void caseTBundleName(TBundleName node) {
		defaultCase(node);
	}

	public void caseTBundleNativecode(TBundleNativecode node) {
		defaultCase(node);
	}

	public void caseTBundleRequiredexecutionenvironment(
			TBundleRequiredexecutionenvironment node) {
		defaultCase(node);
	}

	public void caseTBundleSymbolicname(TBundleSymbolicname node) {
		defaultCase(node);
	}

	public void caseTBundleUpdatelocation(TBundleUpdatelocation node) {
		defaultCase(node);
	}

	public void caseTBundleVendor(TBundleVendor node) {
		defaultCase(node);
	}

	public void caseTBundleVersion(TBundleVersion node) {
		defaultCase(node);
	}

	public void caseTDynamicimportPackage(TDynamicimportPackage node) {
		defaultCase(node);
	}

	public void caseTExportPackage(TExportPackage node) {
		defaultCase(node);
	}

	public void caseTExportService(TExportService node) {
		defaultCase(node);
	}

	public void caseTFragmentHost(TFragmentHost node) {
		defaultCase(node);
	}

	public void caseTImportPackage(TImportPackage node) {
		defaultCase(node);
	}

	public void caseTImportService(TImportService node) {
		defaultCase(node);
	}

	public void caseTRequireBundle(TRequireBundle node) {
		defaultCase(node);
	}

	public void caseTEntryDigest(TEntryDigest node) {
		defaultCase(node);
	}

	public void caseTEntry(TEntry node) {
		defaultCase(node);
	}

	public void caseTLazy(TLazy node) {
		defaultCase(node);
	}

	public void caseTSingleton(TSingleton node) {
		defaultCase(node);
	}

	public void caseTFragmentAttachment(TFragmentAttachment node) {
		defaultCase(node);
	}

	public void caseTOsname(TOsname node) {
		defaultCase(node);
	}

	public void caseTOsversion(TOsversion node) {
		defaultCase(node);
	}

	public void caseTProcessor(TProcessor node) {
		defaultCase(node);
	}

	public void caseTLanguage(TLanguage node) {
		defaultCase(node);
	}

	public void caseTSelectionFilter(TSelectionFilter node) {
		defaultCase(node);
	}

	public void caseTVisibility(TVisibility node) {
		defaultCase(node);
	}

	public void caseTResolution(TResolution node) {
		defaultCase(node);
	}

	public void caseTUses(TUses node) {
		defaultCase(node);
	}

	public void caseTExclude(TExclude node) {
		defaultCase(node);
	}

	public void caseTInclude(TInclude node) {
		defaultCase(node);
	}

	public void caseTMandatory(TMandatory node) {
		defaultCase(node);
	}

	public void caseTExtension(TExtension node) {
		defaultCase(node);
	}

	public void caseTAttributeEntry(TAttributeEntry node) {
		defaultCase(node);
	}

	public void caseTProcessor68k(TProcessor68k node) {
		defaultCase(node);
	}

	public void caseTProcessorArm(TProcessorArm node) {
		defaultCase(node);
	}

	public void caseTProcessorAlpha(TProcessorAlpha node) {
		defaultCase(node);
	}

	public void caseTProcessorIgnite(TProcessorIgnite node) {
		defaultCase(node);
	}

	public void caseTProcessorMips(TProcessorMips node) {
		defaultCase(node);
	}

	public void caseTProcessorParisc(TProcessorParisc node) {
		defaultCase(node);
	}

	public void caseTProcessorPowerpc(TProcessorPowerpc node) {
		defaultCase(node);
	}

	public void caseTProcessorSh4(TProcessorSh4 node) {
		defaultCase(node);
	}

	public void caseTProcessorSparc(TProcessorSparc node) {
		defaultCase(node);
	}

	public void caseTProcessorS390(TProcessorS390 node) {
		defaultCase(node);
	}

	public void caseTProcessorS390x(TProcessorS390x node) {
		defaultCase(node);
	}

	public void caseTProcessorV850e(TProcessorV850e node) {
		defaultCase(node);
	}

	public void caseTProcessorX86(TProcessorX86 node) {
		defaultCase(node);
	}

	public void caseTProcessorX8664(TProcessorX8664 node) {
		defaultCase(node);
	}

	public void caseTOsnameAix(TOsnameAix node) {
		defaultCase(node);
	}

	public void caseTOsnameDigitalunix(TOsnameDigitalunix node) {
		defaultCase(node);
	}

	public void caseTOsnameEmbos(TOsnameEmbos node) {
		defaultCase(node);
	}

	public void caseTOsnameEpoc32(TOsnameEpoc32 node) {
		defaultCase(node);
	}

	public void caseTOsnameFreebsd(TOsnameFreebsd node) {
		defaultCase(node);
	}

	public void caseTOsnameHpux(TOsnameHpux node) {
		defaultCase(node);
	}

	public void caseTOsnameIrix(TOsnameIrix node) {
		defaultCase(node);
	}

	public void caseTOsnameLinux(TOsnameLinux node) {
		defaultCase(node);
	}

	public void caseTOsnameMacos(TOsnameMacos node) {
		defaultCase(node);
	}

	public void caseTOsnameNetbsd(TOsnameNetbsd node) {
		defaultCase(node);
	}

	public void caseTOsnameNetware(TOsnameNetware node) {
		defaultCase(node);
	}

	public void caseTOsnameOpenbsd(TOsnameOpenbsd node) {
		defaultCase(node);
	}

	public void caseTOsnameOs2(TOsnameOs2 node) {
		defaultCase(node);
	}

	public void caseTOsnameQnx(TOsnameQnx node) {
		defaultCase(node);
	}

	public void caseTOsnameSolaris(TOsnameSolaris node) {
		defaultCase(node);
	}

	public void caseTOsnameSunos(TOsnameSunos node) {
		defaultCase(node);
	}

	public void caseTOsnameVxworks(TOsnameVxworks node) {
		defaultCase(node);
	}

	public void caseTOsnameWindows95(TOsnameWindows95 node) {
		defaultCase(node);
	}

	public void caseTOsnameWindows98(TOsnameWindows98 node) {
		defaultCase(node);
	}

	public void caseTOsnameWindowsnt(TOsnameWindowsnt node) {
		defaultCase(node);
	}

	public void caseTOsnameWindowsce(TOsnameWindowsce node) {
		defaultCase(node);
	}

	public void caseTOsnameWindows2000(TOsnameWindows2000 node) {
		defaultCase(node);
	}

	public void caseTOsnameWindows2003(TOsnameWindows2003 node) {
		defaultCase(node);
	}

	public void caseTOsnameWindowsxp(TOsnameWindowsxp node) {
		defaultCase(node);
	}

	public void caseTOsnameWindowsvista(TOsnameWindowsvista node) {
		defaultCase(node);
	}

	public void caseTVisibilityPrivate(TVisibilityPrivate node) {
		defaultCase(node);
	}

	public void caseTVisibilityReexport(TVisibilityReexport node) {
		defaultCase(node);
	}

	public void caseTResolutionMandatory(TResolutionMandatory node) {
		defaultCase(node);
	}

	public void caseTResolutionOptional(TResolutionOptional node) {
		defaultCase(node);
	}

	public void caseTExtensionFramework(TExtensionFramework node) {
		defaultCase(node);
	}

	public void caseTExtensionBootclasspath(TExtensionBootclasspath node) {
		defaultCase(node);
	}

	public void caseTAlways(TAlways node) {
		defaultCase(node);
	}

	public void caseTNever(TNever node) {
		defaultCase(node);
	}

	public void caseTResolveTime(TResolveTime node) {
		defaultCase(node);
	}

	public void caseTTrue(TTrue node) {
		defaultCase(node);
	}

	public void caseTFalse(TFalse node) {
		defaultCase(node);
	}

	public void caseTManifestversion(TManifestversion node) {
		defaultCase(node);
	}

	public void caseTEolblank(TEolblank node) {
		defaultCase(node);
	}

	public void caseTEol(TEol node) {
		defaultCase(node);
	}

	public void caseTIdentifier(TIdentifier node) {
		defaultCase(node);
	}

	public void caseTIdentifierRequiredProfile(TIdentifierRequiredProfile node) {
		defaultCase(node);
	}

	public void caseTIdentifierRequiredConfiguration(
			TIdentifierRequiredConfiguration node) {
		defaultCase(node);
	}

	public void caseTDigestValue(TDigestValue node) {
		defaultCase(node);
	}

	public void caseTUnquotedString(TUnquotedString node) {
		defaultCase(node);
	}

	public void caseTQuotedString(TQuotedString node) {
		defaultCase(node);
	}

	public void caseTSimpleStringValue(TSimpleStringValue node) {
		defaultCase(node);
	}

	public void caseTAllString(TAllString node) {
		defaultCase(node);
	}

	public void caseTNumber(TNumber node) {
		defaultCase(node);
	}

	public void caseTQualifier(TQualifier node) {
		defaultCase(node);
	}

	public void caseEOF(EOF node) {
		defaultCase(node);
	}

	public void defaultCase(@SuppressWarnings("unused")
	Node node) {
		// do nothing
	}
}
