/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.triskell.osgi.introspector.manifest.node;

import fr.irisa.triskell.osgi.introspector.manifest.analysis.*;

@SuppressWarnings("nls")
public final class AFtpUnquotedUrl extends PUnquotedUrl {
	private TUrlFtp _urlFtp_;
	private PPathUnquoted _pathUnquoted_;

	public AFtpUnquotedUrl() {
		// Constructor
	}

	public AFtpUnquotedUrl(@SuppressWarnings("hiding")
	TUrlFtp _urlFtp_, @SuppressWarnings("hiding")
	PPathUnquoted _pathUnquoted_) {
		// Constructor
		setUrlFtp(_urlFtp_);

		setPathUnquoted(_pathUnquoted_);

	}

	@Override
	public Object clone() {
		return new AFtpUnquotedUrl(cloneNode(this._urlFtp_),
				cloneNode(this._pathUnquoted_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseAFtpUnquotedUrl(this);
	}

	public TUrlFtp getUrlFtp() {
		return this._urlFtp_;
	}

	public void setUrlFtp(TUrlFtp node) {
		if (this._urlFtp_ != null) {
			this._urlFtp_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._urlFtp_ = node;
	}

	public PPathUnquoted getPathUnquoted() {
		return this._pathUnquoted_;
	}

	public void setPathUnquoted(PPathUnquoted node) {
		if (this._pathUnquoted_ != null) {
			this._pathUnquoted_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._pathUnquoted_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._urlFtp_) + toString(this._pathUnquoted_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._urlFtp_ == child) {
			this._urlFtp_ = null;
			return;
		}

		if (this._pathUnquoted_ == child) {
			this._pathUnquoted_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._urlFtp_ == oldChild) {
			setUrlFtp((TUrlFtp) newChild);
			return;
		}

		if (this._pathUnquoted_ == oldChild) {
			setPathUnquoted((PPathUnquoted) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
