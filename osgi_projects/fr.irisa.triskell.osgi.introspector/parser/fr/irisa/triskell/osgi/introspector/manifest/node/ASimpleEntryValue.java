/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.irisa.triskell.osgi.introspector.manifest.node;

import java.util.*;
import fr.irisa.triskell.osgi.introspector.manifest.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleEntryValue extends PSimpleEntryValue {
	private POtherEntryValue _otherEntryValue_;
	private final LinkedList<POtherEntryValueNext> _otherEntryValueNext_ = new LinkedList<POtherEntryValueNext>();

	public ASimpleEntryValue() {
		// Constructor
	}

	public ASimpleEntryValue(@SuppressWarnings("hiding")
	POtherEntryValue _otherEntryValue_, @SuppressWarnings("hiding")
	List<POtherEntryValueNext> _otherEntryValueNext_) {
		// Constructor
		setOtherEntryValue(_otherEntryValue_);

		setOtherEntryValueNext(_otherEntryValueNext_);

	}

	@Override
	public Object clone() {
		return new ASimpleEntryValue(cloneNode(this._otherEntryValue_),
				cloneList(this._otherEntryValueNext_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseASimpleEntryValue(this);
	}

	public POtherEntryValue getOtherEntryValue() {
		return this._otherEntryValue_;
	}

	public void setOtherEntryValue(POtherEntryValue node) {
		if (this._otherEntryValue_ != null) {
			this._otherEntryValue_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._otherEntryValue_ = node;
	}

	public LinkedList<POtherEntryValueNext> getOtherEntryValueNext() {
		return this._otherEntryValueNext_;
	}

	public void setOtherEntryValueNext(List<POtherEntryValueNext> list) {
		this._otherEntryValueNext_.clear();
		this._otherEntryValueNext_.addAll(list);
		for (POtherEntryValueNext e : list) {
			if (e.parent() != null) {
				e.parent().removeChild(e);
			}

			e.parent(this);
		}
	}

	@Override
	public String toString() {
		return "" + toString(this._otherEntryValue_)
				+ toString(this._otherEntryValueNext_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused")
	Node child) {
		// Remove child
		if (this._otherEntryValue_ == child) {
			this._otherEntryValue_ = null;
			return;
		}

		if (this._otherEntryValueNext_.remove(child)) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused")
	Node oldChild, @SuppressWarnings("unused")
	Node newChild) {
		// Replace child
		if (this._otherEntryValue_ == oldChild) {
			setOtherEntryValue((POtherEntryValue) newChild);
			return;
		}

		for (ListIterator<POtherEntryValueNext> i = this._otherEntryValueNext_
				.listIterator(); i.hasNext();) {
			if (i.next() == oldChild) {
				if (newChild != null) {
					i.set((POtherEntryValueNext) newChild);
					newChild.parent(this);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		throw new RuntimeException("Not a child.");
	}
}
