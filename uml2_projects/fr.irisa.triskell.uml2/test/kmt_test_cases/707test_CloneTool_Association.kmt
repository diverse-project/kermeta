/* $Id: 707test_CloneTool_Association.kmt,v 1.1 2006-07-18 15:10:45 vmahe Exp $
 * Creation date: July 6, 2006
 * License:
 * Copyright:
 * Authors:
 */

package tools_tests;


require kermeta
require "../../src/kermeta/transformations/UmlCloneFactory.kmt"

using uml2
using uml2::transformations

class ToolCloneAssociationTestCase inherits kermeta::kunit::TestCase
{
	reference orig : Association
	reference clone : Association
	reference prop0 : Property
	reference prop1 : Property
	
	method setUp() is do
		//creating needed instances
		orig := Association.new
		orig.name := "pack"
		orig.visibility := VisibilityKind.private
		orig.isDerived := true
		prop0 := Property.new
		prop0.name := "prop0"
		prop1 := Property.new
		prop1.name := "prop1"
		orig.memberEnd.addAt(0, prop0)
		orig.memberEnd.addAt(1, prop1)
		orig.ownedEnd.add(prop0)
		
		var factory : UmlCloneFactory init UmlCloneFactory.new
		clone := factory.cloneAssociation(orig)
	end
	
	method tearDown() is do
		// We don't need to tearDown anything in this test case.
	end
    
    operation test_CloneTool_Association() is do
    	assertTrueWithMsg(clone != void,
    		"the cloneAssociation() method must return something")
    	assertTrueWithMsg(Association.isInstance(clone),
    		"the object returned by cloneAssociation() method must be a Association")
    	assertTrueWithMsg(clone != orig,
    		"the clone object must be different than the original")
    end
    operation test_CloneTool_AssociationProperties() is do
    	assertTrueWithMsg(clone.name == orig.name,
    		"the clone must be have the same name than the original")
    	assertTrueWithMsg(clone.visibility == VisibilityKind.private,
    		"the clone must be have the same visibility than the original")
    	assertTrueWithMsg(clone.isDerived == true,
    		"the clone must be have the same visibility than the original")
    end
    operation test_CloneTool_AssociationEnds() is do
    
    //DEBUG
    stdio.writeln("DEBUG - test assoc : clone.memberEnd.size = "+clone.memberEnd.size.toString)
    
    	assertTrueWithMsg(clone.memberEnd.size == 2,
    		"the clone must be have the same number of ends than the original")
    	assertTrueWithMsg(clone.memberEnd.elementAt(0) == prop0
    		and clone.memberEnd.elementAt(1) == prop1,
    		"the clone must be have the same ends instances than the original")
    	assertTrueWithMsg(clone.ownedEnd.size == 1,
    		"the clone must be have the same number of owned ends than the original")
    	assertTrueWithMsg(clone.ownedEnd.elementAt(0) == prop0,
    		"the clone must be have the same owned ends instances than the original")
    end
}