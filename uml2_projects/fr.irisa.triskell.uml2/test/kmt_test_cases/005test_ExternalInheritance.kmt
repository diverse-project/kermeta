@mainClass "root_package::ExternalInheritanceTestCase"
@mainOperation "main"

package uml2_tests;

require kermeta
require "ClassDiagram.kmt"

using kermeta::standard
using ClassDiagram

class ExternalInheritanceTestCase inherits kermeta::kunit::TestCase
{
	attribute dClass : DClass
	attribute eClass : ExternClassDiagram::EClass
	
	method setUp() is do
    	dClass := DClass.new
end
	
	method tearDown() is do
		// We don't need to tearDown anything in this test case.
	end
    
    // the DClass of the UML model must exist
    operation testUsedClasses() is do
    	assertTrueWithMsg(dClass != void,
    		"An BClass must exist in ClassDiagram.kmt")
    end
    
    // thz DClass has a eProperty, inherited from external EClass
    operation testDExternalInheritedProperty() is do
    	dClass.eProperty := "test"
    	assertTrueWithMsg(dClass.eProperty == "test",
    		"The DClass must inherit a eProperty attribute in code")
    end
    
    // test if the eOperation is OK in DClass
    operation testDExternalInheritedOperation() is do
    	dClass.eOperation()
    	// if passed
    	assertTrueWithMsg(true,
    		"An eOperation must be inherited by DClass from EClass")
    rescue
    	// if failed
    	assertTrueWithMsg(false,
    		"An eOperation must be inherited by DClass from EClass")
    end
    // the DClass must have a composition of FClasses, inherited from External EClass
    operation testDExternalInheritedComposition() is do
    	var f1 : ExternClassDiagram::FClass init ExternClassDiagram::FClass.new
    	dClass.has.add(f1)
    	assertTrueWithMsg(dClass.has.size == 1,
    		"The DClass must inherit a composition of FClasses")
    	var f2 : ExternClassDiagram::FClass init ExternClassDiagram::FClass.new
    	dClass.has.add(f2)
    	assertTrueWithMsg(dClass.has.size == 2,
    		"The DClass must inherit a composition of numerous FClasses")
    end
}