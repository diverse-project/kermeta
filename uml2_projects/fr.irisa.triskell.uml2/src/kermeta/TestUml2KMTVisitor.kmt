@mainClass "uml2kmt_visitor::TestUml2KMTVisitor"
@mainOperation "main"

package uml2kmt_visitor;


require kermeta
//require "../ecore/UML2.ecore"

using kermeta::standard
using kermeta::language::structure

class TestUml2KMTVisitor
{
    attribute kmtFile : kermeta::io::StdIO
    
    attribute modelMembers : Set<Object>
    
    operation initialize(uri : String, mm_uri : String) : Set<Object> is do
    	kmtFile := stdio
    	
    	// load the given model
    	var repository : kermeta::persistence::EMFRepository init kermeta::persistence::EMFRepository.new
    	var resource : kermeta::persistence::EMFResource
    	resource ?= repository.createResource(uri, mm_uri)
    	resource.load()
    	modelMembers := resource.instances
    end
    
    operation uml2kmt() is do
    	kmtFile := stdio
    		// realise the code of the whole .kmt file
    		kmtFile.writeln("/*\n * Autogenerated Kermeta code file")
    		kmtFile.writeln(" * from an UML2 model with Uml2KMT tool.")
    		kmtFile.writeln(" */ \n")
    		
    		kmtFile.writeln("package xxxxxx;\n")
    		
    		kmtFile.writeln("require kermeta")
    		kmtFile.writeln("require \"Uml2.kmt\"")
    		kmtFile.writeln("")
    		kmtFile.writeln("using kermeta::standard")
    		kmtFile.writeln("using uml2")
    		kmtFile.writeln("")
    		
    end
    
    /**
     * this method exists for testing purposes
     */
    operation main() is do
    	stdio.writeln(">>>>-------------> initializing the model !")
    	initialize("../../test/kmt_test_cases/uml2/ClassDiagram.uml2", "../ecore/UML2.ecore")
    	stdio.writeln(">>>>-------------> running uml2kmt tool !")
    	uml2kmt()
    	stdio.writeln("<-------------<<<< end of the programm.")
    end
}