package uml2kmt_visitor;


require kermeta
require "Uml2.kmt"
require "TopDownVisitor.kmt"

using kermeta

class Uml2KMTVisitor inherits topdown_visitor::TopDownVisitor
{
    attribute currentIndentLevel : Integer
    attribute indentValue : String
    
    attribute kmtFile : StdIO
    
    operation initialize() is do
    	// TODO : inits that which must be initialized
    	currentIndentLevel := 0
    	indentValue := "	"
    	kmtFile := stdio.new
    end
    
    /**
     * Give the caller the desired indentation,
     * to be inserted at the beginning of the code line
     */
    operation indent() : String is do
    	var s : String init ""
    	from var i : Integer init 0
    	until i < currentIndentLevel
    	loop
    		s := s + indentValue
    		i := i + 1
    	end
    	result := s
    end
    
    operation begin(model : kermeta::persistence::EMFResource) is do
    	// TODO : being able to load an uml2 model
    	
    	// the first member must be the root package
    	var  model.ownedMember.first
    end
    
    method visitComment(visitable : uml2::Comment) is do
    	kmtFile.writeln(indent() + "/* " + visitable.body + " */")
    	super()
    end
    
    method visitClass(visitable : uml2::Class) is do
    	// declares the class ...
    	if visitable.~abstract then
	    	kmtFile.write(indent() + "abstract class " + visitable.name)
	    else
	    	kmtFile.write(indent() + "class " + visitable.name)
	    end
	    // ... and extracts the inheritage(s) of the class
	    var generalizationNum : Integer init 0
		visitable.generalization.each{e | do
				generalizationNum := generalizationNum + 1
				if generalizationNum == 1 then
					kmtFile.write("inherits " + e.general.name)
				else
					kmtFile.write(", " + e.general.name)
				end
			end}
    	kmtFile.writeln("")
	    
	    // realizes the bloc of the class
    	kmtFile.writeln(indent() + "{")
    	currentIndentLevel := currentIndentLevel + 1
    	super()
    	currentIndentLevel := currentIndentLevel - 1
    	kmtFile.writeln(indent() + "}")
    end
    
    method visitOperation(visitable : uml2::Operation) is do
    	// TODO
    end
    
    method visitParameter(visitable : uml2::Parameter) is do
    	// TODO
    end
    
    method visitPackage(visitable : uml2::Package) is do
    	// TODO
    end
    
    method visitDataType(visitable : uml2::Comment) is do
    	// TODO
    end
    
    method visitClassifier(visitable : uml2::Classifier) is do
    	// TODO
    end
    
/*    method visitLitteralUnlimitedNatural(visitable : uml2::LitteralUnlimitedNatural) is do
    	// TODO
    end */
    
    /**
     * this method must not be implemented because generalization should
     * be integrated in the declaration of a class, not in its code block
     */
    method visitGeneralization(visitable : uml2::Generalization) is do
    	// nothing to be done
    end
    
    method visitAssociation(visitable : uml2::Association) is do
    	// TODO
    end
}