package ecore;
 
//require kermeta

/** This class refers to any EDataType feature*/
class EAttribute inherits EStructuralFeature
{
	attribute iD : EBoolean
	property eAttributeType : EDataType[1..1]
		getter is do
			result ?= eType
		end
		setter is do
			//TODO: implement setter for derived property eAttributeType
			raise kermeta::exceptions::NotImplementedException.new 
		end
}
class EAnnotation inherits EModelElement
{
	attribute source : EString
	attribute details : EStringToStringMapEntry[0..*]
	reference eModelElement : EModelElement#eAnnotations
	attribute contents : EObject[0..*]
	reference references : EObject[0..*]
}
class EClass inherits EClassifier
{
	attribute ~abstract : EBoolean
	attribute interface : EBoolean
	attribute eStructuralFeatures : EStructuralFeature[0..*]#eContainingClass
	reference eSuperTypes : EClass[0..*]
	attribute eOperations : EOperation[0..*]#eContainingClass
	
	property readonly eAllAttributes : EAttribute[0..*]
		getter is do 
	 		result := kermeta::standard::OrderedSet<EAttribute>.new
			self.eAllSuperTypes.each{ t | result.addAll(t.eAttributes) }
		end
		
	property readonly eAllReferences : EReference[0..*]
		getter is do	 		
	 		result := kermeta::standard::OrderedSet<EReference>.new 
			self.eAllSuperTypes.each{ t | result.addAll(t.eReferences) }
		end
		
	property readonly eReferences : EReference[0..*]
		getter is do
			result := kermeta::standard::OrderedSet<EReference>.new
			self.eStructuralFeatures.each { f | if EReference.isInstance(f) then var a : EReference a ?= f result.add(a) end }
		end

	property readonly eAttributes : EAttribute[0..*]
		getter is do
			result := kermeta::standard::OrderedSet<EAttribute>.new
			self.eStructuralFeatures.each { f | if EAttribute.isInstance(f) then var a : EAttribute a ?= f result.add(a) end }
		end
		
	property eAllContainments : EReference[0..*]
		getter is do
	 		result := kermeta::standard::OrderedSet<EReference>.new 
	 		stdio.writeln("contaimnet : " + self.eAllReferences.one.containment.toString)
	 		result.addAll(self.eAllReferences.select { r | r.containment == true } )
		end
		setter is do		
			//TODO: implement setter for derived property eAllContainments
			raise kermeta::exceptions::NotImplementedException.new 
		end
		
	property readonly eAllOperations : EOperation[0..*]
		getter is do
	 		result := kermeta::standard::OrderedSet<EOperation>.new 
	 		result.addAll(eOperations)
			self.eAllSuperTypes.each{ t | result.addAll(t.eOperations) }
		end

	property readonly eAllStructuralFeatures : EStructuralFeature[0..*]
		getter is do
	 		result := kermeta::standard::OrderedSet<EStructuralFeature>.new
	 		if (eStructuralFeatures != void) then result.addAll(eStructuralFeatures) end
			self.eAllSuperTypes.each{ t | result.addAll(t.eStructuralFeatures) }
		end
		
	property eAllSuperTypes : EClass[0..*]
		getter is do
			result := kermeta::standard::OrderedSet<EClass>.new 
			result.addAll(self.eSuperTypes)
			self.eSuperTypes.each { t | result.addAll(t.eAllSuperTypes) }
		end
		setter is do
			//TODO: implement setter for derived property eAllSuperTypes
			raise kermeta::exceptions::NotImplementedException.new 
		end

	property eIDAttribute : EAttribute
		getter is do
			//TODO: implement getter for derived property eIDAttribute
			raise kermeta::exceptions::NotImplementedException.new 
		end
		setter is do
			//TODO: implement setter for derived property eIDAttribute
			raise kermeta::exceptions::NotImplementedException.new 
		end

	operation isSuperTypeOf(someClass : EClass) : EBoolean is do
		result := someClass.eAllSuperTypes.detect { t | t == self } != void
	end
	
	operation getFeatureCount() : EInt is do
		result := self.eAllStructuralFeatures.size
	end
	
	/** Get a structural feature among AllStructuralFeatures */
	operation getEStructuralFeature(featureID : EInt) : EStructuralFeature is do
		result := self.eAllStructuralFeatures.detect{ e | e.getFeatureID() == featureID }
	end
	
	/** Return the position of the feature in the list of AllStructuralFeatures */
	operation getFeatureID(feature : EStructuralFeature) : EInt is do
		result := -1
		from var i : EInt init 0 until i == eAllStructuralFeatures.size or result != -1
		loop
			if (feature == eAllStructuralFeatures.elementAt(i) ) then result == i end
			i := i + 1
		end
	end
	
	operation getEStructuralFeature2(featureName : EString) : EStructuralFeature is do
		result := self.eAllStructuralFeatures.detect{ e | e.name == featureName }
	end
}
abstract class EClassifier inherits ENamedElement
{
	attribute instanceClassName : EString
	attribute instanceClass : EJavaClass
	attribute defaultValue : EJavaObject
	reference ePackage : EPackage#eClassifiers
	operation isInstance(object : EJavaObject) : EBoolean is do
		//TODO: implement operation isInstance
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation getClassifierID() : EInt is do
		//TODO: implement operation getClassifierID
		raise kermeta::exceptions::NotImplementedException.new 
	end
}
class EDataType inherits EClassifier
{
	attribute serializable : EBoolean
}
class EEnum inherits EDataType
{
	attribute eLiterals : EEnumLiteral[0..*]#eEnum
	/** returns the enum literal which name is name */
	operation getEEnumLiteral(name : EString) : EEnumLiteral is do
		result := eLiterals.detect { e | e.name == name }
	end
	/** returns the enum literal which value is value */
	operation getEEnumLiteral2(~value : EInt) : EEnumLiteral is do
		result := eLiterals.detect { e | e.~value == ~value } 
	end
}
class EEnumLiteral inherits ENamedElement
{
	attribute ~value : EInt
	attribute instance : EEnumerator
	reference eEnum : EEnum#eLiterals
}

class EFactory inherits EModelElement
{
	reference ePackage : EPackage[1..1]#eFactoryInstance
	operation create(eClass : EClass) : EObject is do
		// result := eClass.new result.setMetaClass...
		//TODO: implement operation create
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation createFromString(eDataType : EDataType, literalValue : EString) : EJavaObject is do
		//TODO: implement operation createFromString
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation convertToString(eDataType : EDataType, instanceValue : EJavaObject) : EString is do
		//TODO: implement operation convertToString
		raise kermeta::exceptions::NotImplementedException.new 
	end
}
abstract class EModelElement inherits EObject
{
	attribute eAnnotations : EAnnotation[0..*]#eModelElement
	operation getEAnnotation(source : EString) : EAnnotation is do
		result := eAnnotations.detect { a | a.source == source }
	end
}

abstract class ENamedElement inherits EModelElement
{
	attribute name : EString
}
class EObject
{
	operation eClass() : EClass is do
		result ?= extern fr::irisa::triskell::kermeta::ecore::wrapper::EObjectWrapper.eClass(self)
	end
	operation eIsProxy() : EBoolean is do
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eResource() : EResource is do
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eContainer() : EObject is do
		result ?= self.container
	end
	operation eContainingFeature() : EStructuralFeature is do
		// result ?= extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eContainingFeature(self)
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eContainmentFeature() : EReference is do
		// result ?= extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eContainmentFeature(self)
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eContents() : EEList is do
		// result := extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eContents(self)
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eAllContents() : ETreeIterator is do
		// result := extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eContents(self) 
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eCrossReferences() : EEList is do
		//result := extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eCrossReferences(self)
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eGet(feature : EStructuralFeature) : EJavaObject is do
		// result := extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eGet(self, feature)		
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eGet2(feature : EStructuralFeature, resolve : EBoolean) : EJavaObject is do
		// result := extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eGet2(self, feature, resolve)		
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eSet(feature : EStructuralFeature, newValue : EJavaObject) : kermeta::standard::~Void is do
		// extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eSet(self, feature, newValue)		
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eIsSet(feature : EStructuralFeature) : EBoolean is do
		// result ?= extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eIsSet(self, feature)		
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation eUnset(feature : EStructuralFeature) : kermeta::standard::~Void is do
		// extern fr::irisa::triskell::ecore::wrapper::EObjectWrapper.eUnSet(self, feature)
		raise kermeta::exceptions::NotImplementedException.new 
	end
}
class EOperation inherits ETypedElement
{
	reference eContainingClass : EClass#eOperations
	attribute eParameters : EParameter[0..*]#eOperation
	reference eExceptions : EClassifier[0..*]
}
class EPackage inherits ENamedElement
{
	attribute nsURI : EString
	attribute nsPrefix : EString
	reference eFactoryInstance : EFactory[1..1]#ePackage
	attribute eClassifiers : EClassifier[0..*]#ePackage
	attribute eSubpackages : EPackage[0..*]#eSuperPackage
	reference eSuperPackage : EPackage#eSubpackages
	operation getEClassifier(name : EString) : EClassifier is do
		//TODO: implement operation getEClassifier
		raise kermeta::exceptions::NotImplementedException.new 
	end
}
class EParameter inherits ETypedElement
{
	reference eOperation : EOperation#eParameters
}
class EReference inherits EStructuralFeature
{
	attribute containment : EBoolean
	attribute container : EBoolean	// conflicts with Object.container() reflection
	attribute resolveProxies : EBoolean
	reference eOpposite : EReference
	property eReferenceType : EClass[1..1]
		getter is do
			//TODO: implement getter for derived property eReferenceType
			raise kermeta::exceptions::NotImplementedException.new 
		end
		setter is do
			//TODO: implement setter for derived property eReferenceType
			raise kermeta::exceptions::NotImplementedException.new 
		end
    
    // due to inner reflction problems with Object.container(), the
    // 'container' property can only be accessed through a getter
	operation getContainerValue() : EBoolean is do
		var cls : kermeta::reflection::ClassDefinition
		cls ?= self.getMetaClass.typeDefinition
		result ?= self.get(cls.ownedAttribute.detect{p | p.name == "container"})
	end
	operation setContainerValue(booleanValue  : EBoolean) is do
		var cls : kermeta::reflection::ClassDefinition
		cls ?= self.getMetaClass.typeDefinition
		self.~set(cls.ownedAttribute.detect{p | p.name == "container"}, booleanValue)
	end
}
abstract class EStructuralFeature inherits ETypedElement
{
	attribute changeable : EBoolean
	attribute volatile : EBoolean
	attribute transient : EBoolean
	attribute defaultValueLiteral : EString
	attribute defaultValue : EJavaObject
	attribute unsettable : EBoolean
	attribute derived : EBoolean
	reference eContainingClass : EClass#eStructuralFeatures
	operation getFeatureID() : EInt is do
		//TODO: implement operation getFeatureID
		raise kermeta::exceptions::NotImplementedException.new 
	end
	operation getContainerClass() : EJavaClass is do
		//TODO: implement operation getContainerClass
		raise kermeta::exceptions::NotImplementedException.new 
	end
}
abstract class ETypedElement inherits ENamedElement
{
	attribute ordered : EBoolean
	attribute unique : EBoolean
	attribute lowerBound : EInt
	attribute upperBound : EInt
	attribute many : EBoolean
	attribute required : EBoolean
	reference eType : EClassifier
}
class EStringToStringMapEntry
{
	attribute key : EString
	attribute ~value : EString
}
alias EBigDecimal : kermeta::language::structure::Object;
alias EBigInteger : kermeta::language::structure::Object;
alias EBoolean : kermeta::standard::Boolean;
alias EBooleanObject : kermeta::standard::Boolean;
alias EByte : kermeta::language::structure::Object;
alias EByteArray : kermeta::language::structure::Object;
alias EByteObject : kermeta::language::structure::Object;
alias EChar : kermeta::language::structure::Object;
alias ECharacterObject : kermeta::language::structure::Object;
alias EDate : kermeta::language::structure::Object;
alias EDiagnosticChain : kermeta::language::structure::Object;
alias EDouble : kermeta::language::structure::Object;
alias EDoubleObject : kermeta::language::structure::Object;
alias EEList : kermeta::language::structure::Object;
alias EEnumerator : kermeta::language::structure::Object;
alias EFeatureMap : kermeta::language::structure::Object;
alias EFeatureMapEntry : kermeta::language::structure::Object;
alias EFloat : kermeta::language::structure::Object;
alias EFloatObject : kermeta::language::structure::Object;
alias EInt : kermeta::standard::Integer;
alias EIntegerObject : kermeta::standard::Integer;
alias EJavaClass : kermeta::language::structure::Object;
alias EJavaObject : kermeta::language::structure::Object;
alias ELong : kermeta::language::structure::Object;
alias ELongObject : kermeta::language::structure::Object;
alias EMap : kermeta::language::structure::Object;
alias EResource : kermeta::language::structure::Object;
alias EResourceSet : kermeta::language::structure::Object;
alias EShort : kermeta::language::structure::Object;
alias EShortObject : kermeta::language::structure::Object;
alias EString : kermeta::standard::String;
alias ETreeIterator : kermeta::language::structure::Object;
