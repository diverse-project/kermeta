@mainClass "uml2km::Main"
@mainOperation "main"


package uml2km;


require kermeta
require "Uml2.kmt"
require "Pass1_Uml2KMTVisitor.kmt"
require "Pass2_Uml2KMTVisitor.kmt"
require "Uml2KMTPrinter.kmt"

using kermeta::standard
using uml2kmt_visitors

/**
 * Root of the UML2 to KM transformation tool.
 */
class Main
{
    reference mainModel : uml2::Package
    reference allModels : Set<uml2::Package>
    reference rootPackage : uml2::Package
    reference objectsStore : kermeta::utils::Hashtable<uml2::Element, Object>
    
    operation initialize(input_uri : String, input_mm_uri : String) is do
    	// load the given UML2 resource
    	var inputRepository : kermeta::persistence::EMFRepository init kermeta::persistence::EMFRepository.new
    	var inputResource : kermeta::persistence::EMFResource
    	inputResource ?= inputRepository.createResource(input_uri, input_mm_uri)
    	inputResource.load()
    	
    	// we get the main package for the targeted code tree
    	mainModel ?= inputResource.instances.one
    	
    	// we must parse all the included models, for extra models references
    	allModels := Set<uml2::Package>.new
    	inputResource.allRootContents.each{ o |
    		var p : uml2::Package
    		p ?= o
	    	if not p.isVoid then allModels.add(p) end
    	}
    	
    	// creates the Kermeta objects' storage
	    objectsStore := kermeta::utils::Hashtable<uml2::Element, Object>.new
	    rootPackage ?= mainModel.ownedMember.one
    end
    
    operation main() : Void is do 
    	stdio.writeln("\n>>>>-------------> initializing the model !\n")
        // the UML2 model to be transformed
        initialize("../../test/kmt_test_cases/uml2/ClassDiagram.uml2", "../ecore/UML2.ecore")
//        initialize("../../test/kmt_test_cases/uml2/simpleModel.uml2", "../ecore/UML2.ecore")
        
    	stdio.writeln("\n>>>>-------------> running Pass 1 !\n")
        // the first Pass creates the KM objects
        var pass1 : Pass1_Uml2KMTVisitor init Pass1_Uml2KMTVisitor.new
        pass1.initialize(objectsStore)
        // we pass all the model, for creating all references
		allModels.each{ p |
			pass1.visitPackage(p)
		}
        
    	stdio.writeln("\n>>>>-------------> running Pass 2 !\n")
        // the second Pass links the KM objects
        var pass2 : Pass2_Uml2KMTVisitor init Pass2_Uml2KMTVisitor.new
        pass2.initialize(objectsStore)
		allModels.each{ p |
			pass2.visitPackage(p)
		}
        
        // DEBUG
/*      var tree : kermeta::language::structure::Package
		tree ?= objectsStore.getValue(rootPackage)
    	var resRepository : kermeta::persistence::EMFRepository init kermeta::persistence::EMFRepository.new
    	var resResource : kermeta::persistence::EMFResource
    	resResource ?= resRepository.createResource("../../test/kmt_test_cases/uml2/ClassDiagramOutput.km", "../ecore/kermeta.ecore")
    	resResource.instances.add(tree)
    	resResource.save()
*/
        // the Kermeta PrettyPrinter transforms the KM tree to code
    	stdio.writeln("\n>>>>-------------> running Km2Kmt pretty printer !\n")
        var upp : uml2::Uml2KMTPrinter init uml2::Uml2KMTPrinter.new
        upp.initialize()
		var tree : kermeta::language::structure::Package
		tree ?= objectsStore.getValue(rootPackage)
	    stdio.writeln(upp.visitRootPackage(tree, 0))
	    
	   	stdio.writeln("\n<-------------<<<< end of the programm.\n")
     end
}