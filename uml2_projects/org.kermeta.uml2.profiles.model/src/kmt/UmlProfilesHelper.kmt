/* $Id: UmlProfilesHelper.kmt,v 1.1 2007-06-20 08:33:50 ftanguy Exp $
 * Creation date: June 19, 2007
 * License:
 * Copyright:
 * Authors:
 */
@mainClass "umlProfiles::Main"
@mainOperation "main"


package umlProfiles;


require kermeta
require "platform:/plugin/org.kermeta.uml2.profiles.model/model/ecore/Ecore.profile.ecore"
require "platform:/plugin/org.kermeta.uml2.profiles.model/model/ecore/Standard.profile.ecore"


using kermeta::persistence
using kermeta::standard

using ecore
using uml

class UMLHelper {
	
	reference profilResource : Resource

	reference modelResource : Resource

	/**
	 * Stereotypes Instances coming from the uml model.
	 */
	reference stereotypeInstances : Set <kermeta::language::structure::Object>

	/**
	 * Stereotypes coming from the profil.
	 */
	reference stereotypes : Set <ecore::EClass>


	operation initialize( modelResource : Resource, profilResource : Resource ) is do
		self.profilResource := profilResource
		self.modelResource := modelResource
		stereotypeInstances := Set <Object>.new
		stereotypes := Set <ecore::EClass>.new
		getStereotypeInstances()
	end
		
		
	operation getStereotypesFor( object : Object ) : Set <Object> is do
	
		var stereotypes : Set <Object> init Set <Object>.new
	 
		stereotypeInstances.each { instance |
		 		 
		 	var prop : kermeta::reflection::Property init getProperty( "base_Class", instance )	 
		 
		 	var base_Class : uml::Class
			base_Class ?= instance.get( prop )
			 			 
			if ( (base_Class != void) and (base_Class.equals(object) ) ) then
			
				stereotypes.add( instance )
			
			end
		
		}
		
		result := stereotypes
	
	end
		
	
	/**
	 * Getting the property with the given name for the given object.
	 */	
	operation getProperty( name : String, object : Object ) : kermeta::reflection::Property is do
	
		var classDefinition : kermeta::language::structure::ClassDefinition 
		classDefinition ?= object.getMetaClass.typeDefinition
		result := classDefinition.ownedAttribute.detect { o | o.name.equals( name ) }
	
	end	
			
	 
	operation getStereotypes() is do
	
		var p : EPackage 
		p ?= profilResource.instances.one
		p.eClassifiers.each { classifier |
		
			if ( classifier.isInstanceOf(ecore::EClass) ) then
			
				var c : ecore::EClass
				c ?= classifier
				stereotypes.add( c )
			
			end
		
		}
	
	end
	
	
	operation getStereotypeInstances() is do
	
		stereotypeInstances.addAll( modelResource.instances.select{ instance | not instance.isInstanceOf(uml::Model) } ) 
	
	end
	
	/**
	 * The content root of a uml model is composed of a model element and possibly several stereotypes instances.
	 */
	operation getModel() : uml::Model is do
	
		result ?= modelResource.instances.detect{ instance | instance.isInstanceOf(uml::Model) }
	
	end

}