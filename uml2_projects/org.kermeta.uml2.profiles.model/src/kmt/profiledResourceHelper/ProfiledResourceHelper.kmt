/* $Id: ProfiledResourceHelper.kmt,v 1.10 2009-01-06 13:15:08 dvojtise Exp $
 * Creation date: June 19, 2007
 * License: EPL
 * Copyright: IRISA/INRIA
 * Authors:
 * 		Francois Tanguy
 *		Didier Vojtisek
 */


package profiledResourceHelper;


require kermeta
require "platform:/plugin/org.kermeta.uml2.profiles.model/model/ecore/Ecore.profile.ecore"
require "platform:/plugin/org.kermeta.uml2.profiles.model/model/ecore/Standard.profile.ecore"
//require "platform:/resource/org.kermeta.uml2.profiles.model/model/ecore/Ecore.profile.ecore"
//require "platform:/resource/org.kermeta.uml2.profiles.model/model/ecore/Standard.profile.ecore"


using kermeta::persistence
using kermeta::standard

using ecore
using uml

/**
 * This class is an helper for resources containing an UML model with profiles
 * It provides several operations that will search for stereotypes in the resource 
 * this is needed because of the special implementation of stereotypes and profiles in UML2
 */
class ProfilesHelper {
	
	reference profilResource : Resource


	reference modelResource : Resource

	/**
	 * Stereotypes Instances coming from the uml model.
	 */
	reference stereotypeInstances : Set <kermeta::language::structure::Object>

	/**
	 * Stereotypes coming from the profile.
	 */
	reference stereotypes : Set <ecore::EClass>


	/**
	 * A call to this operation is mandatory for a correct use of this class
	 * It takes 2 resources, in case the profile resource is different of the uml model resource.
	 * However, in most situations you can use the same resource for both parameter
	 */
	operation initialize( modelResource : Resource, profileResource : Resource ) : ProfilesHelper is do
		self.profilResource := profilResource
		self.modelResource := modelResource
		stereotypeInstances := Set <Object>.new
		stereotypes := Set <ecore::EClass>.new
		getStereotypeInstances()
		result := self
	end
		
	/**
	 * Retreives all the stereotypes that decorate the given object 
	 */
	operation getStereotypesFor( object : Object ) : Set <Object> is do
	
		var stereotypes : Set <Object> init Set <Object>.new
	 
		stereotypeInstances.each { instance |
						
			var base_Object : Object init getBase(instance)
			if ( (base_Object != void) and (base_Object.equals(object) ) ) then
				stereotypes.add( instance )
		 	//else
		 	//	stdio.writeln("Stereotype doesn't apply to " + object.toString + " but to " + getBase(instance).toString)
			end
		}
		
		result := stereotypes
	
	end
		
	
	/**
	 * Gets the property with the given name for the given object.
	 */	
	operation getProperty( name : String, object : Object ) : kermeta::language::structure::Property is do
	
		var classDefinition : kermeta::language::structure::ClassDefinition 
		classDefinition ?= object.getMetaClass.typeDefinition
		result := classDefinition.allAttribute.detect { o | o.name.equals( name ) }
	
	end
	/**
	 * tells weither this object has a base_ property.
	 */	
	operation hasBaseProperty( object : Object ) : Boolean is do
	
		var classDefinition : kermeta::language::structure::ClassDefinition 
		classDefinition ?= object.getMetaClass.typeDefinition
		result := classDefinition.allAttribute.exists { o | if o.name.size >=5 then o.name.substring(0,5).equals("base_")
														 else false
														 end
													}
	
	end	
	
	/**
	 * return the base_ value associated to the stereotype
	 */
	operation getBase(object : Object) : uml::Element is do
		result := void // default result value
		var classDefinition : kermeta::language::structure::ClassDefinition 
		classDefinition ?= object.getMetaClass.typeDefinition
		classDefinition.allAttribute.select { o | 
				if o.name.size >=5 then o.name.substring(0,5).equals("base_")
				else 
					false
				end
			}.each{att | 
					var base_value : Object init object.get(att)
					if not base_value.isVoid then
						result ?= base_value
					end
				}		
	end
	
	/**
	 * determine if the object is an UML stereotype (ie. it declares a base_ to an uml element
	 */
	operation isStereotype(object : Object) : kermeta::standard::Boolean is do
		result := false
		var metaclassName : String init object.getMetaClass.name
		var classDefinition : kermeta::language::structure::ClassDefinition 
		classDefinition ?= object.getMetaClass.typeDefinition
		if not classDefinition.isVoid then
			if classDefinition.allAttribute.exists{ att |
					var  propType : kermeta::language::structure::Class
					propType ?= att.type
					//stdio.writeln("   " + att.name + "  matches " +propType.classDefinition.name + "?")
					if not propType.isVoid then 
						if att.name.equals("base_" +propType.classDefinition.name) then 
							true
						else
							false
						end
					else
						false
					end
		 		} then
		 		result := true
		 	end
		end	
		//stdio.writeln("  isStereotype returns "+ result.toString)
	end
			
	/**
	 * Fills the internal set 'stereotypes'
	 * (called by the initialize() operation, user is not supposed to call it directly)
	 */
	operation getStereotypes() is do
	
		var p : EPackage 
		p ?= profilResource.instances.one
		p.eClassifiers.each { classifier |
		
			if ( classifier.isInstanceOf(ecore::EClass) ) then
			
				var c : ecore::EClass
				c ?= classifier
				stereotypes.add( c )
			
			end
		
		}
	
	end
	
	
	operation getStereotypeInstances() is do
		if not modelResource.isVoid() then
			stereotypeInstances.addAll( 
				modelResource.instances.select{ instance | 										
					not instance.isInstanceOf(uml::Element) 
					and ( hasBaseProperty(instance)
					
							/* getProperty( "base_Class", instance ) != void
						or getProperty( "base_Package", instance ) != void
						or getProperty( "base_Property", instance ) != void */
					)
				} 
			) 
		end
		//stdio.writeln("stereotypes to add : " + modelResource.instances.size.toString)
		/*stereotypeInstances.addAll(modelResource.contents.select{ instance | instance.isInstanceOf(uml::Stereotype) })
		stereotypeInstances.each{i| stdio.writeln(i.asType(uml::Stereotype).name)}
		stdio.writeln("stereotypes instances " + stereotypeInstances.size.toString)*/
	end
	
	/**
	 * The content root of a uml model is composed of a model element and possibly several stereotypes instances.
	 */
	operation getModel() : uml::Model is do
	
		result ?= modelResource.instances.detect{ instance | instance.isInstanceOf(uml::Model) }
	
	end

}

/**
 * Exception used to report errors in UML stereotypes
 */
class InvalidUMLStereotype inherits kermeta::exceptions::Exception {

}