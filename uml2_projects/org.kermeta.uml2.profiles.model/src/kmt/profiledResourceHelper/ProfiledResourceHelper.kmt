/* $Id: ProfiledResourceHelper.kmt,v 1.3 2008-02-11 15:04:46 dvojtise Exp $
 * Creation date: June 19, 2007
 * License: EPL
 * Copyright:
 * Authors:
 * 		François Tanguy
 */


package profiledResourceHelper;


require kermeta
require "platform:/plugin/org.kermeta.uml2.profiles.model/model/ecore/Ecore.profile.ecore"
require "platform:/plugin/org.kermeta.uml2.profiles.model/model/ecore/Standard.profile.ecore"
//require "platform:/resource/org.kermeta.uml2.profiles.model/model/ecore/Ecore.profile.ecore"
//require "platform:/resource/org.kermeta.uml2.profiles.model/model/ecore/Standard.profile.ecore"


using kermeta::persistence
using kermeta::standard

using ecore
using uml

/**
 * This class is an helper for resources containing an UML model with profiles
 * It provides several operations that will search for stereotypes in the resource 
 * this is needed because of the special implementation of stereotypes and profiles in UML2
 */
class ProfilesHelper {
	
	reference profilResource : Resource


	reference modelResource : Resource

	/**
	 * Stereotypes Instances coming from the uml model.
	 */
	reference stereotypeInstances : Set <kermeta::language::structure::Object>

	/**
	 * Stereotypes coming from the profile.
	 */
	reference stereotypes : Set <ecore::EClass>


	/**
	 * A call to this operation is mandatory for a correct use of this class
	 * It takes 2 resources, in case the profile resource is different of the uml model resource.
	 * However, in most situations you can use the same resource for both parameter
	 */
	operation initialize( modelResource : Resource, profileResource : Resource ) : ProfilesHelper is do
		self.profilResource := profilResource
		self.modelResource := modelResource
		stereotypeInstances := Set <Object>.new
		stereotypes := Set <ecore::EClass>.new
		getStereotypeInstances()
		result := self
	end
		
	/**
	 * Retreives all the stereotypes that decorate the given object 
	 */
	operation getStereotypesFor( object : Object ) : Set <Object> is do
	
		var stereotypes : Set <Object> init Set <Object>.new
	 
		stereotypeInstances.each { instance |
		 		 
		 	var prop : kermeta::reflection::Property init getProperty( "base_Class", instance )	 
		 
		 	var base_Class : uml::Class
			base_Class ?= instance.get( prop )
			 			 
			if ( (base_Class != void) and (base_Class.equals(object) ) ) then
			
				stereotypes.add( instance )
			
			end
		
		}
		
		result := stereotypes
	
	end
		
	
	/**
	 * Getting the property with the given name for the given object.
	 */	
	operation getProperty( name : String, object : Object ) : kermeta::reflection::Property is do
	
		var classDefinition : kermeta::language::structure::ClassDefinition 
		classDefinition ?= object.getMetaClass.typeDefinition
		result := classDefinition.ownedAttribute.detect { o | o.name.equals( name ) }
	
	end	
			
	/**
	 * Fills the internal set 'stereotypes'
	 * (called by the initialize() operation, user is not supposed to call it directly)
	 */
	operation getStereotypes() is do
	
		var p : EPackage 
		p ?= profilResource.instances.one
		p.eClassifiers.each { classifier |
		
			if ( classifier.isInstanceOf(ecore::EClass) ) then
			
				var c : ecore::EClass
				c ?= classifier
				stereotypes.add( c )
			
			end
		
		}
	
	end
	
	
	operation getStereotypeInstances() is do
	
		stereotypeInstances.addAll( modelResource.instances.select{ instance | not instance.isInstanceOf(uml::Model) } ) 
	
	end
	
	/**
	 * The content root of a uml model is composed of a model element and possibly several stereotypes instances.
	 */
	operation getModel() : uml::Model is do
	
		result ?= modelResource.instances.detect{ instance | instance.isInstanceOf(uml::Model) }
	
	end

}