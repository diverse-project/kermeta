/* $Id: UMLProfile2Ecore.kmt,v 1.2 2008-02-06 15:44:10 dvojtise Exp $
 * Creation date: November 29, 2007
 * License: EPL
 * Copyright:
 * Authors: 
 *		Gilles Perrouin
 *		Didier Vojtisek
 */
@mainClass "UMLProfileUtils::Main"
@mainOperation "standaloneTestMain" 


package UMLProfileUtils;

require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "../UMLUtils/UMLProfilesUtils.kmt"
require "Profile.kmt"
require "ToEcore.kmt"
require "UMLProfile2EcoreTrace.kmt"
require "../utils/KLog.kmt"

// generated Ecore form the UML model via EMF to bootstrap MARTE.profile.uml loading for kermeta
//require "platform:/resource/org.kermeta.uml2.profiles.model/model/ecore/MARTE_Library.ecore" 
//require "platform:/resource/org.kermeta.uml2.profiles.model/model/ecore/MARTE.ecore"

//require "platform:/resource/org.kermeta.uml2.profiles.model/test/instances/Standard.profile.ecore"
//require "platform:/resource/org.kermeta.uml2.profiles.model/test/instances/Ecore.profile.ecore"

using ecore
using kermeta::persistence
using kermeta::standard
using kermeta::exceptions
using UMLProfileUtils
 
@aspect "true"
class Main
{
 
 	operation standaloneTestMain() : Void is do
 		main("platform:/resource/org.kermeta.uml2.profiles.model/model/uml/bootstrapMARTE/MARTE.profile.uml",
 			"platform:/resource/org.kermeta.uml2.profiles.model/test/instances/MARTE_test.profile.ecore")
 	end
 	
	operation main(input : String, output : String) : Void is do 
	
	// source model and metamodel
	var srcModelURI: String init  input
	var srcMetamodelURI: String init "http://www.eclipse.org/uml2/2.1.0/UML"
	
	// target model and metamodel
	var tgtModelURI: String init output
	var tgtMetamodelURI: String init "http://www.eclipse.org/emf/2002/Ecore"
	
	var srcEmf_res : EMFResource
	var tgtEmf_res: EMFResource
	  
	var util : UMLProfileUtils::LoadStoreMM
	util := UMLProfileUtils::LoadStoreMM.new
	
	var log : UMLProfileUtils::KLogger
	log := UMLProfileUtils::KLogger.new
	log.enableLog(true) 
	
	// Load the UML profile
	log.print("UML Profile loading...") 
   	srcEmf_res := util.load(srcModelURI,srcMetamodelURI)
	log.print("UML profile loaded")	
	log.print("============================================")
	// Prepare the Ecore representation
	var tgtEmf_store : EMFRepository init EMFRepository.new
	tgtEmf_res ?= tgtEmf_store.createResource(tgtModelURI,tgtMetamodelURI)
	
	/* stdio.writeln("Displaying contents:")
	stdio.writeln("============================================")
	stdio.writeln("size of the profile model: "+ srcEmf_res.contents.size.toString)
	srcEmf_res.contents.each { e | util.printMM(e,0)} */
	    
	// transforming the UML profile
	do 
	// initializing trace
	var trace: UMLProfileUtils::UMLProfile2EcoreTrace init UMLProfileUtils::UMLProfile2EcoreTrace.new
	trace.initRep(tgtEmf_store)
	trace.initTables  
	trace.initializeLog(true) 
	// Converting UML elements...  
	log.print("////////////////// First pass ////////////////// ")
	//log.print("size of MARTE : " + srcEmf_res.contents.select{e|e.isInstanceOf(uml::ToEcore)}.size.toString)
	srcEmf_res.contents.select{e|e.isInstanceOf(uml::ToEcore)}.each {e| 
		tgtEmf_res.add(e.asType(uml::ToEcore).toEcorePass1(trace))}
	log.print("////////////////// Second pass ////////////////// ")
	srcEmf_res.contents.select{e|e.isInstanceOf(uml::ToEcore)}.each {e| 
		e.asType(uml::ToEcore).toEcorePass2(trace)}
	//rescue (e: Exception )
	//stdio.writeln("Sorry Transformation for "+ e.stackTrace + " not supported yet...")
	end
	// store the Ecore representation
	log.print("////////////////// Serializing the new Ecore ////////////////// ") 
	util.store(tgtModelURI,tgtEmf_res)
	end
}