/* $Id: 708test_CloneTool_DataType.main.kmt,v 1.4 2007-12-14 12:29:22 vmahe Exp $
 * Creation date: Summer 2006
 * License:		Eclipse Public License
 * Copyright:	INRIA
 * Authors:		Vincent MAHE <vmahe@irisa.fr>
 */
@mainClass "tools_tests::ToolCloneDataTypeTestCase"
@mainOperation "main"


package tools_tests;


require kermeta
require "platform:/plugin/org.kermeta.uml2/src/kermeta/transformations/UmlCloneFactory.kmt"

using uml
using uml::transformations

class ToolCloneDataTypeTestCase inherits kermeta::kunit::TestCase
{
	operation main() : Void is do 
		var tr : kermeta::kunit::TestRunner init kermeta::kunit::TestRunner.new
		tr.run(ToolCloneDataTypeTestCase)
		tr.printTestResult		
	end

	reference orig : DataType
	reference clone : DataType
	reference InClass : Class
	reference InOutClass : Class
	reference OutClass : Class
	reference ReturnClass : Class
	reference ExcClass : uml::Type
	
	method setUp() is do
		//creating needed instances
		orig := DataType.new
		orig.name := "String"
		orig.visibility := VisibilityKind.public
		
		var factory : UmlCloneFactory init UmlCloneFactory.new
		factory.initialize
		clone := factory.cloneDataType(orig)
	end
	
	method tearDown() is do
		// We don't need to tearDown anything in this test case.
	end
    
    operation test_CloneTool_DataType() is do
    	assertTrueWithMsg(clone != void,
    		"the cloneDataType() method must return something")
    	assertTrueWithMsg(DataType.isInstance(clone),
    		"the object returned by cloneDataType() method must be a DataType")
    	assertTrueWithMsg(clone != orig,
    		"the clone object must be different than the original")
    end
    operation test_CloneTool_DataTypeProperties() is do
    	assertTrueWithMsg(clone.name == orig.name,
    		"the clone must be have the same name than the original")
    	assertTrueWithMsg(clone.visibility == VisibilityKind.public,
    		"the clone must be have the same visibility than the original")
    end
}