/* $Id: 702test_CloneTool_Class.main.kmt,v 1.4 2007-12-14 12:29:22 vmahe Exp $
 * Creation date: Summer 2006
 * License:		Eclipse Public License
 * Copyright:	INRIA
 * Authors:		Vincent MAHE <vmahe@irisa.fr>
 */
@mainClass "tools_tests::ToolCloneClassTestCase"
@mainOperation "main"


package tools_tests;


require kermeta
require "platform:/plugin/org.kermeta.uml2/src/kermeta/transformations/UmlCloneFactory.kmt"

using uml
using uml::transformations

class ToolCloneClassTestCase inherits kermeta::kunit::TestCase
{
	operation main() : Void is do 
		var tr : kermeta::kunit::TestRunner init kermeta::kunit::TestRunner.new
		tr.run(ToolCloneClassTestCase)
		tr.printTestResult		
	end

	reference orig : Class
	reference clone : Class
	
	method setUp() is do
		//creating needed instances
		orig := Class.new
		orig.name := "pack"
		orig.visibility := VisibilityKind.private
		var op : Operation init Operation.new
		op.name := "op"
		var attr : Property init Property.new
		attr.name := "attr"
		orig.ownedOperation.add(op)
		orig.ownedAttribute.add(attr)
		
		var factory : UmlCloneFactory init UmlCloneFactory.new
		factory.initialize
		clone := factory.cloneClass(orig)
	end
	
	method tearDown() is do
		// We don't need to tearDown anything in this test case.
	end
    
    operation test_CloneTool_Class() is do
    	assertTrueWithMsg(clone != void,
    		"the cloneClass() method must return something")
    	assertTrueWithMsg(Class.isInstance(clone),
    		"the object returned by cloneClass() method must be a Class")
    	assertTrueWithMsg(clone != orig,
    		"the clone object must be different than the original")
    end
    operation test_CloneTool_ClassProperties() is do
    	assertTrueWithMsg(clone.name.equals(orig.name),
    		"the clone must be have the same name than the original")
    	assertTrueWithMsg(clone.visibility == VisibilityKind.private,
    		"the clone must be have the same visibility than the original")
    end
    operation test_CloneTool_ClassOperations() is do
    	assertTrueWithMsg(clone.ownedOperation.size == 1,
    		"the clone must have the operations of the original")
    	assertTrueWithMsg(clone.ownedOperation.one.name.equals("op"),
    		"the clone operations must have the same name than the original ones")
    end
    operation test_CloneTool_ClassAttributes() is do
    	assertTrueWithMsg(clone.ownedAttribute.size == 1,
    		"the clone must have the attributes of the original")
    	assertTrueWithMsg(clone.ownedAttribute.one.name == "attr",
    		"the clone attributes must have the same name than the original ones")
    end
}