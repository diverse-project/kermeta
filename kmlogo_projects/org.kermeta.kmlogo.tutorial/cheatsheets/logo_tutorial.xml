<?xml version="1.0" encoding="UTF-8"?>
<compositeCheatsheet name="kmLogo Tutorial">
   <taskGroup kind="set" name="Building kmLogo DSL using Kermeta" skip="false">
      <intro>
         <b>Introduction</b><br/>
This cheatsheet wil guide you through the logo tutorial : from the installation of the necessary files to the analysis of the different part of the code.<br/>
This sample demonstrates how to build integrated tools with kermeta.
      </intro>
      <onCompletion>
         <b>Conclusion</b><br/>
By reproducing the code and process you&apos;ve seen in this tutorial, you should be able to create your own DSL environment.
      </onCompletion>
      <task kind="cheatsheet" name="Installation of the tutorial files" skip="true">
         <intro>
            <b>Introduction</b><br/>
In this task you&apos;ll learn how to install the predefined logo environment, create and run a runtime workbench, intall the predefined logo samples.
         </intro>
         <onCompletion>
            <b>Conclusion</b><br/>
Now, that you have all the necessary files, you can proceed to :<br/>
- analyse the structure of logo environment<br/>
- or simply use the deployed logo environment and play the the samples<br/>
         </onCompletion>
         <param name="path" value="tutorial_installation.xml">
         </param>
      </task>
      <task kind="cheatsheet" name="ASM structure analysis" skip="false">
         <intro>
            <b>Introduction</b><br/>
This task will show you the core of the Logo DSL : its Abstract Syntax Model
         </intro>
         <onCompletion>
            <b>Conclusion</b><br/>
Now, that you know the base of the Logo DSL, you can have a look to how you can weave additional feature to it in order to build an environment for this DSL.
         </onCompletion>
         <param name="path" value="ASM_analysis.xml">
         </param>
      </task>
      <task kind="cheatsheet" name="Operational semantics =&gt; an interpreter for logo" skip="false">
         <intro>
            <b>Introduction</b><br/>
This sheet will show you how an operational semantics has been added to the Logo DSL.<br/>
This comes to the task of weaving an interpreter to the ASM.
         </intro>
         <onCompletion>
            <b>Conclusion</b>
         </onCompletion>
         <param name="path" value="interpreter.xml">
         </param>
      </task>
      <taskGroup kind="set" name="Operational semantics extra" skip="false">
         <intro>
            <b>Introduction</b><br/>
This sheet will show you how some extra feature has been implemented in the operational sematics.<br/>
It will explain how to call some java code to implement extra features.
         </intro>
         <onCompletion>
            <b>Conclusion</b><br/>
By using these code as samples, you should be able to add some call to java code into your kermeta code when needed.<br/>
<b>Be careful</b> to not use this feature unless you know that there is no other way in pure Kermeta.
         </onCompletion>
         <task kind="cheatsheet" name="Call to java.Math" skip="false">
            <intro>
               <b>Introduction</b><br/>
This task will show you how a call to java may workaround some missing feature in Kermeta. Here, it shows how to call java.lang.Math.
            </intro>
            <onCompletion>
               <b>Conclusion</b>
            </onCompletion>
            <param name="path" value="interpreter_extra_math.xml">
            </param>
         </task>
         <task kind="cheatsheet" name="Implementing a graphical output for the turtle" skip="false">
            <intro>
               <b>Introduction</b>
This task will guide you through the code of the implementation of a graphical interface for the logo turtle.
            </intro>
            <onCompletion>
               <b>Conclusion</b>
            </onCompletion>
            <param name="path" value="interpreter_extra_gui.xml">
            </param>
         </task>
      </taskGroup>
      <task kind="cheatsheet" name="Translational semantics =&gt; a compiler for logo" skip="false">
         <intro>
            <b>Introduction</b><br/>
This sheet will show you how a translational semantics has been added to the Logo DSL.<br/>
This comes to the task of weaving a compiler to the ASM.
         </intro>
         <onCompletion>
            <b>Conclusion</b>
         </onCompletion>
         <param name="path" value="compiler.xml">
         </param>
      </task>
      <taskGroup kind="set" name="Building editors for Logo" skip="false">
         <intro>
            <b>Introduction</b>
         </intro>
         <onCompletion>
            <b>Conclusion</b>
         </onCompletion>
         <task kind="cheatsheet" name="Building a tree model editor using EMF" skip="false">
            <intro>
               <b>Introduction</b><br/>
This task briefly introduces the code of the EMF Tree editor for the ASM.
            </intro>
            <onCompletion>
               <b>Conclusion</b>
            </onCompletion>
            <param name="path" value="tree_editor.xml">
            </param>
         </task>
         <task kind="cheatsheet" name="Building a textual editor with Sintaks" skip="false">
            <intro>
               <b>Introduction</b><br/>
This task briefly introduces the sources of the textual editor for the ASM.<br/> 
This is done using Sintaks.
            </intro>
            <onCompletion>
               <b>Conclusion</b>
            </onCompletion>
            <param name="path" value="sintaks_textual_editor.xml">
            </param>
         </task>
      </taskGroup>
      <task kind="cheatsheet" name="Deployment of Kermeta code in Eclipse GUI" skip="false">
         <intro>
            <b>Introduction</b><br/>
This task briefly introduces the code needed to deploy a Kermeta code for a end user.<br/>
It will use the interpreter as sample.
         </intro>
         <onCompletion>
            <b>Conclusion</b>
         </onCompletion>
         <param name="path" value="interpreter_eclipse_UI.xml">
         </param>
      </task>
      <task kind="cheatsheet" name="Using the deployed DSL environment" skip="false">
         <intro>
            <b>Introduction</b><br/>
This task will guide you through the actions in the deployed workbench.<br/>
For example, using the text2model, using the Logo interpreter and the Logo compiler.
         </intro>
         <onCompletion>
            <b>Conclusion</b>
         </onCompletion>
      </task>
   </taskGroup>
</compositeCheatsheet>
