/* $Id: LogoDynSemantics.kmt,v 1.1 2007-09-14 08:18:28 ffleurey Exp $
 * Creation date: May 30, 2007
 * License:
 * Copyright:
 * Authors:
 */

package kmLogo;

require kermeta
require "ASMLogo.ecore"
require "LogoVMSemantics.kmt"

using kermeta::standard
using kermeta::utils


class Bindings inherits Hashtable<String,Integer> {}

class Context  {
	attribute stack : Stack<Bindings> 
	reference turtle : VM::Turtle
	
	operation reset() is do
		stack := Stack<Bindings>.new()
		turtle := VM::Turtle.new()
		turtle.reset
	end
	
	operation pushFrame (frame : Bindings) is do
		stack.push(frame)
	end
	
	operation popFrame() : Bindings is do
		result := stack.pop
	end
	
	operation peekFrame() : Bindings is do
		result := stack.peek
	end
}


/**
 * Implementation of the Abstract Syntactic Model
 */
package ASM {

	@aspect "true"
	class Instruction 
	{
		operation eval(context : Context) : Integer is do
			result := 0
		end
	}
	
	@aspect "true"
	class Constant
	{
		operation eval(context : Context) : Integer is do 
			result := integerValue
		end 
	}
	
	@aspect "true"
	class ParameterCall
	{
		operation eval(context : Context) : Integer is do 
			result := context.peekFrame.getValue(parameter.name)
		end 
	}
	
	@aspect "true"
	class Plus
	{
		operation eval(context : Context) : Integer is do 
			result := lhs.eval(context) + rhs.eval(context)
		end
	}
	
	@aspect "true"
	class Minus
	{
		operation eval(context : Context) : Integer is do 
			result := lhs.eval(context) - rhs.eval(context)
		end
	}
	
	@aspect "true"
	class Mult
	{
		operation eval(context : Context) : Integer is do 
			result := lhs.eval(context) * rhs.eval(context)
		end
	}
	
	@aspect "true"
	class Div
	{
		operation eval(context : Context) : Integer is do 
			result := lhs.eval(context) / rhs.eval(context)
		end
	}
	
	@aspect "true"
	class Equals
	{
		operation eval(context : Context) : Integer is do 
			result := if lhs.eval(context) == rhs.eval(context) then 1 else 0 end
		end
	}
	
	@aspect "true"
	class Greater
	{
		operation eval(context : Context) : Integer is do 
			result := if lhs.eval(context) > rhs.eval(context) then 1 else 0 end
		end
	}
	
	@aspect "true"
	class Lower
	{
		operation eval(context : Context) : Integer is do 
			result := if lhs.eval(context) < rhs.eval(context) then 1 else 0 end
		end
	}
	
	@aspect "true"
	class Block
	{
		operation eval(context : Context) : Integer is do 
			instructions.each{instruction  | result := instruction.eval(context)}
		end 
	}
	
	
	@aspect "true"
	class ProcCall
	{
		operation eval(context : Context) : Integer is do 
			// create a new stack frame
			var frame : Bindings init Bindings.new
			// for each formal arg, create a binding with actual value
			from var i : Integer init 0
			until i >= actualArgs.size
			loop			
				var actualValue : Integer init actualArgs.elementAt(i).eval(context) 
				frame.put(declaration.args.elementAt(i).name, actualValue)
				i := i + 1
			end
			// push it on the stack
			context.pushFrame(frame)
			// transfert control to procedure body
			result := declaration.block.eval(context)
			// pop stack frame
			context.popFrame
		end
	
	}
	
	
	@aspect "true"
	class If
	{
		operation eval(context : Context) : Integer is do 
			if condition.eval(context) != 0 then
				result := thenPart.eval(context)
			else
				result := elsePart.eval(context)
			end						
		end 
	}
	
	@aspect "true"
	class While
	{
		operation eval(context : Context) : Integer is do 
			var cond : Integer
			from cond := condition.eval(context)
			until cond == 0
			loop
				result := block.eval(context)
				cond := condition.eval(context)
			end			
		end 
	}
	@aspect "true"
	class Repeat
	{
		operation eval(context : Context) : Integer is do 
			from var i : Integer init condition.eval(context)
			until i < 1
			loop
				result := block.eval(context)
				i := i - 1
			end
		end 
	}
	
	/*
	* The semantics of the primitive constructs
	*/
	@aspect "true"
	class Back
	{
		operation eval(context : Context) : Integer is do 
			context.turtle.forward(-steps.eval(context))
		end
	}
	@aspect "true"
	class Forward
	{
		operation eval(context : Context) : Integer is do 
			context.turtle.forward(steps.eval(context))
		end
	}
	@aspect "true"
	class Left
	{
		operation eval(context : Context) : Integer is do 
			context.turtle.rotate(-angle.eval(context))
		end
	}
	@aspect "true"
	class Right
	{
		operation eval(context : Context) : Integer is do 
			context.turtle.rotate(angle.eval(context))
		end
	}
	@aspect "true"
	class PenDown
	{
		operation eval(context : Context) : Integer is do 
			context.turtle.setPenUp(false)
		end
	}
	@aspect "true"
	class PenUp
	{
		operation eval(context : Context) : Integer is do 
			context.turtle.setPenUp(true)
		end
	}
	@aspect "true"
	class Clear
	{
		operation eval(context : Context) : Integer is do 
			context.turtle.reset()
		end
	}
	
}
