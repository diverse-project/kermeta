@mainClass "sample::Main"
@mainOperation "main"
package sample;
require "./cs.ecore"
require kermeta
using kermeta::standard
using kermeta::persistence  
using kermeta::interpreter
using kermeta::utils   

class Main 
{
	reference resource : EMFResource
	reference repository : EMFRepository
	operation initialize(uri : String, mm_uri : String) : Set<Object> is do
		/* Initialize the EMF repository */
		repository    := EMFRepository.new
		/* Create an EMF Resource */
		self.resource := repository.createResource(uri, mm_uri)
		/* Load the resource : this loads all the instances contained in the EMF model */
		self.resource.load()
		/* Get the loaded instances (a Set<Object>) */
		result := resource.instances
	end
 
	operation main() is do
		// Visit and save a model -- visitor adds a new object inside
		var csvisitor : CSVisitorHandler init CSVisitorHandler.new 
		var instances : Set<Object> init self.initialize("Test_1.cs", "cs.ecore")//"cs.ecore")
		stdio.writeln("resource!"+resource.toString)
		csvisitor.initialize(resource, instances)
		csvisitor.visitInstances()
		resource.saveWithNewURI("testsauvegarde.cs")
		
		// New model from scratch
		var test : TestAddToResource init TestAddToResource.new
		test.createNewEMFModelFromScratch(repository)
		
		// Remove an element
		test.removeTemplateFromRoot(repository)
		
	end
}

/**
 * Contains a set of methods-use cases that add elements to the loaded EMF Model
*/
class TestAddToResource
{
 	/** tested! */
	operation addTemplateToRoot(root : cs::Root, resource : Resource) is do
		// add a template?
		var mytemplate : cs::Template init cs::Template.new
		mytemplate.name := "mytemplate est nouveau"
		mytemplate.content := "plorep"
		mytemplate.decision.add(cs::Decision.new)
 		root.template.add(mytemplate)  
  		stdio.writeln("resource size :"+ resource.instances.size.toString)

 	end
 	
 	/** tested!  */
 	operation removeTemplateFromRoot(repository : EMFRepository) is do
 		var resource : EMFResource 
	 	resource := repository.createResource("./KMTest_remove.cs", "./cs.ecore")
	 	var root : cs::Root init self.createTestModelToSave()
	 	var t : cs::Template init root.template.one
	 	// print t if we want to know it's the correct one that was removed
	 	stdio.writeln("Je me prepare à jeter ce template : "+ t.name)
	 	stdio.writeln("Je me prepare à jeter ce template : "+ root.template.size.toString)
	 	// note : if this instruction is put after resource.add(root),
	 	// it yet does not have any effect
	 	resource.instances.add(root)
	 	root.template.remove(t) 
 		resource.save() 
 	end
 	
 	/** tested! */
 	operation createNewEMFModelFromScratch(repository : EMFRepository) is do
	 	var resource : EMFResource
	 	resource := repository.createResource("./KMTest_0.cs", "./cs.ecore")
	 	// Define a Root ...
	 	var root : cs::Root init self.createTestModelToSave()
	 	resource.instances.add(root)
	 	resource.save()
 	end
 	
 	operation createTestModelToSave() : cs::Root is do
 		 	// Define a Root ...
	 	var root : cs::Root init cs::Root.new

	 	// And, for example, 2 templates, and a Decision in one of them
	 	var t1 : cs::Template init cs::Template.new
	 	var t2 : cs::Template init cs::Template.new
	 	var t3 : cs::Template init cs::Template.new
	 	var t4 : cs::Template init cs::Template.new
	 	t1.name := "template numero 1"
	 	t2.name := "toi tais toi"
	 	t4.name := "quatrieme"
	 	t3.name := "toto"
	 	root.template := OrderedSet<cs::Template>.new
	 	root.template.add(t2)
	 	root.template.add(t1)
	 	root.template.add(t3)
	 	root.template.add(t4)
	 	result := root
 	end
}



/**
 * I use here Set<Object> instead of Object because I cannot define a formal 
 * Parameter of type 'Object' (kermeta::standard::Object??)
 */
class BasicCSVisitor
{
	reference root : cs::Root
	reference template : cs::Template
//	attribute decision : cs::Decision
	reference value : cs::Value
	
	operation visitRoot(v : Set<Object>, r : Resource) : String is do
		result := " "
		root ?= v.one 
		
		result := "root : " + root.toString
		result.append("\n    { template list : ")
		result.append(iterate(root.template.iterator))
		result.append(" }\n")
		var testMethods : TestAddToResource init TestAddToResource.new
		testMethods.addTemplateToRoot(root, r)  

	end
	
	operation visitDecision(v : Set<Object>, r : Resource) : String is do
		var decision : cs::Decision 
		decision ?= v.one
		decision.name := "Je me suis modifie tout les noms de decision!!!!"
		result := "decision : " + decision.toString
		result.append("\n   {  name : " + decision.name + " }" )
		result.append("\n   {  source : " + decision.source.toString + " }" )
		result.append("\n   {  targets : " + iterate(decision.target.iterator)+ "}\n ")
		
	end
	
	operation visitTemplate(v : Set<Object>, r : Resource) : String is do
		template ?= v.one
		template.name := "Template sans nom" 
		result := "template : " + template.toString

		result.append("\n   { content :" + template.content + " }" )
		result.append("\n   { name :" + template.name + " }" )
		result.append("\n   { decision :" + iterate(template.decision.iterator) + " }" ) 
		result.append("\n   { referer : " + template.referer.toString + " }")
		result.append("\n   { root : " + template.root.toString + " }\n")
		// Add a decision to the list of decisions?
		
	end
	
	// FIXME : we should be able
	operation visitValue(v : Set<Object>, r : Resource) : String is do
		result := "value->"
		result.append(visitDecision(v, r))
		var value : cs::Value
		value ?= v.one 
		value.name := "J'ai modifie toutes les valeureuses"

	end
	
	operation iterate<T>(pit : Iterator<T>) : String is do
		result := ""
		from var it : Iterator<T> init pit
		until it.isOff
		loop
			result.append(it.next.toString)
			if (it.hasNext)  then result.append(", ") end
		end
	end
	
	/** Iteration -> Decision */
	operation visitIteration(v : Set<Object>, r : Resource) : String is do
		result := "iteration->"
		result.append(visitDecision(v, r))
	end
}

/**
 * This is a manually written class to illustrate the loading of an EMF model in Kermeta, with
 * examples from cs.ecore metamodel.
 * This visitor does not respect the pattern visitor.
 * The pattern visitor could be implemented in the following steps :
 *     - allow dynamic code programming, in order to add an accept() abstract method to the meta-model's
 *       types.
 *     - [to complete]
*/
class CSVisitorHandler
{
	/**
	 *   Hashtable that contains the classes of the CS meta-model 
	 */
	reference metaclasses : kermeta::utils::Hashtable<String, kermeta::reflection::Class>
	reference instances : Set<Object>
	reference resource : Resource

	operation initialize(resource : EMFResource, instances : Set<Object>) is do
		//self.resource := EMFResource.clone(resource)
		self.resource := resource
		self.instances := resource.instances
		//self.instances := instances
		self.metaclasses := kermeta::utils::Hashtable<String, kermeta::reflection::Class>.new
		self.setMetaClasses
	end

	/** 
	 * Loop in the instances of the loaded EMF resource and call a visitor on each
	 * of its elements.
	*/
	operation visitInstances() is do
		from var it : Iterator<Object> init instances.iterator
		until it.isOff
		loop
			self.accept(it.next)
		end
	end
	
	/**
	 * A pseudo accept method...
	 * 
	 */
	operation accept(instance : Object) is do
		// Get all the available types of Objects
		// 2 methods are possible :
		// 	   1/ We can create a reference to the Ecore loaded meta model in the resource that
		//        manages the EMF model (using xmlns:metamodel_prefix in the EMF model)
		//     2/ We can find all the available classes in the model by reflexive method (this method
		// we choose)
		 
		// Loop in the list of existing meta classes
		
		from var it : Iterator<String> init metaclasses.keyIterator
		until it.isOff
		loop
			var claz_name : String init it.next
			var claz : kermeta::reflection::Class init metaclasses.getValue(claz_name)
			// FIXME : for inherited classes, this method is really bad (we should code
			// a kind of "isExactInstance")
			if (claz_name.equals(instance.getMetaClass.classDefinition.qualifiedName)) then
				// Wrap instance (FIXME : patch)
				var setinstance : Set<Object> init Set<Object>.new
				setinstance.add(instance)
				var str : String 
				// invoke "visit"+"claz.
				// TODO : find the pmore specialised class for the given object!
				str := self.invoke(claz.classDefinition.name, setinstance, resource)
				stdio.writeln(str)
			end
		end
	end
	
	/**
	 * Invoke the visit method according to the type of the visitable Object
	*/
	operation invoke(cname : String, visitable : Object, resource : Resource) : String is do
	
		var de : DynamicExpression init DynamicExpression.new
		de.initializeDefaults
		de.formalParameters.put("v", Set<Object>)
		de.formalParameters.put("r", Resource) 
		de.parse("sample::BasicCSVisitor.new.visit"+cname+"(v, r)")
		var params : Hashtable<String, Object> init Hashtable<String, Object>.new
		params.put("v", visitable)
//		var ores : Object 
//		ores := resource 
		params.put("r", resource) 
		// todo : "context" (of tyep Object) instead of Resource when we will create
		// a generic visitor

		result := de.execute(void, params).toString
		 
	end
	
	/**
	 * Traverse the collection of instances and add any new meta class created in the hashtable
	 * <metaclasses>
	*/
	operation setMetaClasses() is do
		from var it : Iterator<Object> init instances.iterator
		until it.isOff
		loop
			var o : Object init it.next
			// Get the name of the class of o
			var qname : String init o.getMetaClass.classDefinition.qualifiedName
			// Is it in the hashtable?
			if (metaclasses.getValue(qname) == void) then
				metaclasses.put(qname, o.getMetaClass)
			end
		end
	end

}




/**
 * This class generates a generic Visitor for an EMF model according to its metamodel
 * Completely uncomplete. This class is just an idea. 
*/
class EMFVisitorGenerator 
{
	attribute mm_uri : String
	/** URI of the instance to visit */
	attribute uri : String
	attribute resource : kermeta::persistence::EMFResource
	/** The content of the generated code for EMF visitor */
	attribute visitorString : String

	//  todo : a constructor with resource already loaded?
	 
	/**
	 * Pseudo constructor. It does the following initialisations :
	 *  - the meta model uri (later we will try to find it in the information NS_URI contained in the model)
	 *  - the model uri
	 *  - the EMF resource (we also load it)
	 */
	operation initialize(p_uri : String, p_mm_uri : String) is do
		mm_uri := p_mm_uri
		uri    := p_uri
		/* Initialize the EMF repository */
		var repository    : EMFRepository init EMFRepository.new
		/* Create an EMF Resource */
		var resource : EMFResource init repository.createResource(uri, mm_uri)
		/* Load the resource : this loads all the instances contained in the EMF model */
		resource.load()
		/* Get the loaded instances (a Set<Object>) */
		var instances : Object init resource.instances

	end
	
	
	/**
	 * visit the instances loaded in the resource, by calling, for each of them, an accept method.
	*/
	operation createMainOperation() : String is do
	
		var prefix : String init "    "
		visitorString := ""
		visitorString.append(
			"\n" +
			"operation visitInstances(instances : Set<Object>) : Object is do")
			
		// the body
		visitorString.append(
			"\n" + 
			"from var it : Iterator<Object> init instances.iterator " +
			"until it.isOff" +
			"loop" +
			"    self.accept(it.next)" +
			"end" 
		)
			
		visitorString.append(
			"\nend")
	
	end
}













