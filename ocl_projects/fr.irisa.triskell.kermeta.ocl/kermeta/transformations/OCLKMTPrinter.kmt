/* $Id: OCLKMTPrinter.kmt,v 1.3 2007-07-23 15:20:41 barais Exp $
 * File : Visitors.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Authors :  Olivier Brais, Mark Skipper
 * 
 */
 
/* This package contains operations code for Visitor Patterns
 You should use Patterns4Ecore.kmt operations for applying Patterns */
package OCLKMTPrinter;

require kermeta
//require "../ecore.kmt"
require "../helpers/OCLHelper.kmt"
require "../../mmodel/oclcstvisitor.kmt"
require "ocl2kmtVisitor.kmt"  
//require "Tools.kmt"  
//require "platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"
 
 
using kermeta::standard
using kermeta::persistence
using ocl::cst
using ocl2kmt

class OCLKMTPrinter 
{ 
	attribute repository: EMFRepository
	attribute modelURI: String
    reference helper : OCLHelpers::OCLHelper
    reference mhelper : EcoreHelpers::EcoreHelper 
    attribute visitor :Ocl2kmtVisitor 
    attribute model : Set<Object> 
    
    operation main(): Void is
		do
				self.generateOCL("../../model/ASMLogoStaticSemantics.xmi","../../ocl/ASMLogo.ecore", "test.output")
	    end
	    
	    operation generateOCL(modelURI : String, metamodelURI : String,Outputfilnename : String): Void is
		do
					
			    
			repository := EMFRepository.new
			helper := OCLHelpers::OCLHelper.new
	    	visitor := Ocl2kmtVisitor.new
	     	visitor.initialize
	     	
	     	model  := helper.loadOCLModel(repository, modelURI)
		    visitor.setMetamodelURI(metamodelURI) 
		    visitor.ecoreFileName :=metamodelURI
	     	//stdio.writeln("metamodel loaded")
			helper.getPackageDeclaration(model).accept(visitor)
			var f : kermeta::io::FileIO init kermeta::io::FileIO.new
			var io : StringWriter
			io ?= visitor.getIo
			if (io != void) then
			//		Outputfilnename
				f.writeTextFile(Outputfilnename,io.s)
			end
	    end
	    

}