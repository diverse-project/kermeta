/* $Id: QualifiedName.kmt,v 1.4 2008-10-31 22:00:05 barais Exp $
 * Creation date: August 13, 2007
 * License:
 * Copyright:
 * Authors:
 */
@mainClass "qualifiedNames::QualifiedName"
@mainOperation "main"
package qualifiedNames;
require kermeta
using kermeta::standard

class QualifiedName inherits Sequence<String>
{
	attribute __separator: String
	attribute displayCache: String
	
	operation separator(): String is
		do
			if __separator == void then
				result := "::" // default separator
			else
				result := __separator
			end
		end
	
	operation fromSequence(stringSeq: Sequence<String>): QualifiedName is
		do 
			self.addAll(stringSeq)
			result := self
		end
		
	operation fromString(name: String) : QualifiedName is
		do
			self.add(name)
			result := self
		end
		
	operation setSeparator(sep: String): Void is
		do
			self.__separator := sep
		end
		
	method toString():String is
		do
			/*if displayCache == void then
				displayCache := join(self)
			end
			result := displayCache*/
			var it : Iterator<String> init self.iterator
			from
        		result := it.next
    		until
    			it.isOff
    		loop
    			result := result + separator + it.next
    		end
		end
		
	/*operation join(qn: QualifiedName): String is
		do
			var it : Iterator<String> init qn.iterator
			from
        		result := it.next
    		until
    			it.isOff
    		loop
    			result := result + separator + it.next
    		end
		end
		*/
	/**
	 ** Returns a new qualified name composed of self :: names
	 **/
	operation appendString(names: String): QualifiedName is
		do
    		result := QualifiedName.new
    		self.each{ n | result.add(n) }
    		var pos : Integer
    		from pos:= names.indexOf(separator)
    		until (pos==-1)
    		loop
    			var name : String init names.substring(0,pos)
    			result.add(name)
    			names := names.substring(pos + separator.size, names.size)
    			pos := names.indexOf(separator)
    		end
    		result.add(names)
		end
		
	/**
	 ** Returns a new qualified name composed of self :: names
	 **/
	operation prependString(names: String): QualifiedName is
		do
    		result := QualifiedName.new
    		var pos : Integer
    		from pos:= names.indexOf(separator)
    		until (pos==-1)
    		loop
    			var name : String init names.substring(0,pos)
    			result.add(name)
    			names := names.substring(pos + separator.size, names.size)
    			pos := names.indexOf(separator)
    		end
    		result.add(names)
    		self.each{ n | result.add(n) }
		end
		
	/**
	 ** Projects the last name
	 **/
	operation typeName(): String is
		do
			result := self.last
		end
		
	/** 
	 ** Projects all but the last name
	 **/
	operation packageName(): QualifiedName is
		do
			result := QualifiedName.new
			result.addAll(self)
			result.remove(result.last)
		end
		
	operation main(): Void is
		do
			var qn : QualifiedName init QualifiedName.new.appendString("This::that::theother")
			stdio.writeln(qn.toString)
			stdio.writeln( qn.prependString("here::and::now").toString)
		end
		
	/**
	 ** Returns a new qualified name composed of self:: other
	 **/
	operation concat(other: QualifiedName): QualifiedName is
		do
			result := QualifiedName.new.fromSequence(self) 
			result.addAll(other)
		end
}