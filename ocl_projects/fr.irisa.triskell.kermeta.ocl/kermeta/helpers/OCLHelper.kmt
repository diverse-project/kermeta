/* $Id: OCLHelper.kmt,v 1.7 2007-05-24 14:53:39 barais Exp $
 * File : EcoreHelper.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Sep 08, 2005
 * Authors : 
 *  Didier Vojtisek <dvojtise@irisa.fr>
 *  Damien Pollet   <dpollet@irisa.fr>
 * 
 */
//@mainClass "OCLHelpers::OCLHelper"
//@mainOperation "main"


package OCLHelpers;
 
require kermeta
require "../../mmodel/oclcstvisitor.kmt" 
 require "platform:/resource/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"
 
using ocl::cst
using kermeta::standard
using kermeta::persistence
using kermeta::exceptions

/** This class provides some helper methods to load/save Ecore models
    Plus some other useful navigation methods
 */
class OCLHelper
{
	attribute ecoreOCLMetamodel : String
	attribute ecoreMetamodel : String
	
	operation initialize(eMetamodel:String): Void is
		do
			if ecoreOCLMetamodel == void then
				ecoreOCLMetamodel := "../../mmodel/OCLCST.ecore"
			end
			if ecoreMetamodel == void then
				ecoreMetamodel := eMetamodel
			end
		end
    
    operation loadOCLModel(repository : EMFRepository, modelUri : String) : Set<Object> is 
	    do
	    	//initialize
	    	var resource : Resource init repository.createResource(modelUri , ecoreOCLMetamodel)
	    	resource.load
	    	var instances : Set<Object> init resource.instances
	    	result := instances
	    end
    
    operation getPackageDeclaration(os : Set<Object>): ocl::cst::PackageDeclarationCS is
	    do
	    	result ?= os.detect{ o |
	    			var packageDeclaration: ocl::cst::PackageDeclarationCS
		     	   packageDeclaration ?= o
		     	   packageDeclaration != void
	    		}
	    end
	    
	operation getInvExpression(os: Set<Object>): ocl::cst::OCLExpressionCS is
		do
			var invariant : InvCS 
			invariant ?= os.detect{ o |
				var expression : ocl::cst::InvCS
				expression ?= o
				expression != void
			}
			result := invariant.expressionCS
		end
		
		operation loadMetaModel() : EcoreHelpers::EcoreHelper is do 
			var  ecoreMetamodelHelper : EcoreHelpers::EcoreHelper init EcoreHelpers::EcoreHelper.new
			ecoreMetamodelHelper.initialize
			ecoreMetamodelHelper.loadMetaModel(ecoreMetamodel)
			result := ecoreMetamodelHelper
//			ecoreMetamodelHelper.
			
		end

  }
  
