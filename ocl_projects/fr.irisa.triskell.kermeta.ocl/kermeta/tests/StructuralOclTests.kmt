/* $Id: StructuralOclTests.kmt,v 1.7 2007-05-30 16:55:42 bitterjug Exp $
 * Creation date: March 6, 2007
 * License:
 * Copyright:
 * Authors:
 */
 
@mainClass "oclTests::StructuralOclTests"
@mainOperation "main"

package oclTests;

require kermeta
require "../../../someUnit/src/newUnit.kmt"
require "../transformations/ocl2kmtVisitor.kmt" 
require "../helpers/OCLHelper.kmt" 
    
using newUnit
using kermeta::standard
using kermeta::persistence
using kermeta::interpreter 
using ocl2kmt

class  StructuralOclTests  inherits TestCase
{
	attribute repository: EMFRepository
    attribute helper : OCLHelpers::OCLHelper
    attribute visitor :Ocl2kmtVisitor 
    attribute model : Set<Object> 
	//attribute de : DynamicExpression 

				    
	method setUp() is
		do
			repository := EMFRepository.new		
			helper := OCLHelpers::OCLHelper.new
	    	visitor := Ocl2kmtVisitor.new
	    	visitor.initialize
			//de := DynamicExpression.new
			//de.initializeDefaults
		end
		
	 operation visitOclXmi(filename: String): String is
        do
            var sourceFileName : String init "../../model/" + filename + ".xmi"
            var io : StringWriter init StringWriter.new
            visitor.setIo(io)
		    visitor.setMetamodelURI("../../ocl/sample.ecore")
            model  := helper.loadOCLModel(repository, sourceFileName)
            helper.getPackageDeclaration(model).accept(visitor)
            result := io.s
        end
		
		
	operation test01(): Void is
	// test class @aspect class { ... inv ... } generation
		do
			var kmt : String  init  visitOclXmi("01-booleanLiteralTrue")
			var expected : String init "package sample; require kermeta require \"sample.ecore\" using kermeta::standard @aspect \"true\" class A{ inv invariant1 is do true end } " 
			assertEqual(expected, kmt)
		end
		
	operation test02(): Void is
	// test class @aspect class { operation def } generation
		do
			var kmt : String  init  visitOclXmi("definition")
			assertEqual("package sample @aspect \"true\" class A{ operation test():Boolean is do result := true end} ", kmt)
		end

	operation test03(): Void is
	// test pre and post generation
		do
			var kmt : String  init  visitOclXmi("preAndPost")
			assertEqual("package sample @aspect \"true\" class Y{ @overloadable \"true\" operation getB(a : Integer, b:Boolean):B pre pre1 is do a.isGreater(0) end pre pre2 is do true end post post3 is do ~result.equals(self.ab) end is do var e: Exception init NotImplementedException.new e.message := \"OCL pre/post/body: Y.foo\" raise e end } ", kmt)
		end
		
	operation main() : Void is 
	  do 
			var testRunner : TestRunner init TestRunner.new
			var suite : TestSuite init TestSuite.new.addAllTestCasesFrom(StructuralOclTests)
			testRunner.runTest(suite)
			testRunner.printLogs
  	end
}
