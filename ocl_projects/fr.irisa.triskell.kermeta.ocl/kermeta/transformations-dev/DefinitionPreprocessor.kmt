 /* $Id: DefinitionPreprocessor.kmt,v 1.6 2008-10-28 15:19:45 barais Exp $
 * Creation date: August 20, 2007
 * License: EPL
 * Copyright: IRISA/INRIA
 * Authors: 
 *          Mark Skipper
 *          Olivier Barais
 *          Didier Vojtisek
 */



package ocl2kmt;
//require "platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"
require "EcoreHelper.kmt" 
require "TypeSystemMixin.kmt" 
require "../helpers/QualifiedName.kmt"
 
using EcoreHelpers   
using ocl::cst 
using kermeta::standard
//using qualifiedNames 
using kermeta::persistence
using kermeta::exceptions
 
class DefinitionPreprocessor inherits ocl::cst::visitors::Visitor  
{ 

	attribute packageFQN: qualifiedNames::QualifiedName
	attribute classifierQN: qualifiedNames::QualifiedName 
	reference classifier : ecore::EClass
	reference newOperation: ecore::EOperation
	
	operation getPrimitiveType(name: String): ecore::EClassifier is
		do
			result := ecore::EDataType.new
			result.name := name
		end
		 
	attribute helper: EcoreHelper
	
	operation setEcoreHelper(eh: EcoreHelper) : Void is
		do
			helper := eh
		end
	
	method visitCSTNode(visitable : CSTNode) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting CSTNode")
		end

	method visitPackageDeclarationCS(visitable : PackageDeclarationCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting package declaration")
			if visitable.isVoid then
				var e : UserError init UserError.new
				e.message := "Missing package declaration"
				raise e
			end
			if visitable.pathNameCS.isVoid then
				var e : UserError init UserError.new
				e.message := "Missing package declaration"
				raise e
			end
			stdio.writeln(visitable.toString)
			
			packageFQN := qualifiedNames::QualifiedName.new.fromSequence( visitable.pathNameCS.sequenceOfNames.asSequence()) 
			stdio.writeln("   got package: " + packageFQN.toString)
			visitable.contextDecls.each{ cd | cd.accept(self) }
        end
 
	method visitPropertyContextCS(visitable : PropertyContextCS) : kermeta::standard::~Void is
		do 
		end
 
	method visitClassifierContextDeclCS(visitable : ClassifierContextDeclCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting classifier context")
			classifierQN := qualifiedNames::QualifiedName.new.fromSequence( visitable.pathNameCS.sequenceOfNames.asSequence()	)
			var fqn : qualifiedNames::QualifiedName init packageFQN.concat(classifierQN)
			classifier ?= helper.getClassifierByFQN(fqn) 			  
			if classifier == void then
				raise TypeError.new.setMessageReflexive( "Cannot retreive class [" + fqn.toString+ "]. Please check that you have used the correct metamodel")
			else
    			stdio.writeln("   got classifier : "+ classifier.name)
			end
			visitable.invOrDefCS.accept(self)
    	end

	method visitOperationContextDeclCS(visitable : OperationContextDeclCS) : kermeta::standard::~Void is
		do
		end

	method visitPrePostOrBodyDeclCS(visitable : PrePostOrBodyDeclCS) : kermeta::standard::~Void is
		do
		end

	method visitOperationCS(visitable : OperationCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting method ")
			newOperation := ecore::EOperation.new
			newOperation.name := visitable.simpleNameCS.~value
			visitable.typeCS.accept(self)
			if newOperation.eType == void then
				var e : Exception init Exception.new
				e.message := "Can't find type for method: " + newOperation.name
				raise e
			end
			classifier.eOperations.add(newOperation)
			stdio.writeln("    Added new method : " + newOperation.name + " : " + newOperation.eType.name)
		end

	method visitInitOrDerValueCS(visitable : InitOrDerValueCS) : kermeta::standard::~Void is
		do
		end

	method visitDerValueCS(visitable : DerValueCS) : kermeta::standard::~Void is
		do
		end

	method visitInitValueCS(visitable : InitValueCS) : kermeta::standard::~Void is
		do
		end

	method visitInvCS(visitable : InvCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting invariant ")
		end

	method visitDefCS(visitable : DefCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting definition ")
			visitable.defExpressionCS.accept(self)
		end

	method visitDefExpressionCS(visitable : DefExpressionCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting definition expression")
			visitable.operationCS.accept(self)
		end

	method visitPathNameCS(visitable : PathNameCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting path name (type)")
			var typeName: qualifiedNames::QualifiedName init qualifiedNames::QualifiedName.new.fromSequence(visitable.sequenceOfNames.asSequence())
			stdio.writeln("   got:" + typeName.toString)
			newOperation.eType := helper.findClassifierRelativeOrAbsolute(packageFQN, typeName)
		end

	method visitVariableExpCS(visitable : VariableExpCS) : kermeta::standard::~Void is
		do
		end

	method visitSimpleNameCS(visitable : SimpleNameCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting simpleName ")
		end

	method visitTypeCS(visitable : TypeCS) : kermeta::standard::~Void is
		do
		end
 
	method visitPrimitiveTypeCS(visitable : PrimitiveTypeCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting primitive type ")
			stdio.writeln("   got: " +visitable.~value.toString)
			newOperation.eType := getPrimitiveType(visitable.~value)
		end

	method visitTupleTypeCS(visitable : TupleTypeCS) : kermeta::standard::~Void is
		do
		end

	method visitCollectionTypeCS(visitable : CollectionTypeCS) : kermeta::standard::~Void is
		do
		end

	method visitOCLExpressionCS(visitable : OCLExpressionCS) : kermeta::standard::~Void is
		do
		end

	method visitLetExpCS(visitable : LetExpCS) : kermeta::standard::~Void is
		do
		end

	method visitIfExpCS(visitable : IfExpCS) : kermeta::standard::~Void is
		do
		end

	method visitMessageExpCS(visitable : MessageExpCS) : kermeta::standard::~Void is
		do
		end

	method visitOCLMessageArgCS(visitable : OCLMessageArgCS) : kermeta::standard::~Void is
		do
		end

	method visitVariableCS(visitable : VariableCS) : kermeta::standard::~Void is
		do
			stdio.writeln("Visiting variable ")
		end

	method visitLiteralExpCS(visitable : LiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitEnumLiteralExpCS(visitable : EnumLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitCollectionLiteralExpCS(visitable : CollectionLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitTupleLiteralExpCS(visitable : TupleLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitPrimitiveLiteralExpCS(visitable : PrimitiveLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitIntegerLiteralExpCS(visitable : IntegerLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitRealLiteralExpCS(visitable : RealLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitStringLiteralExpCS(visitable : StringLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitBooleanLiteralExpCS(visitable : BooleanLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitNullLiteralExpCS(visitable : NullLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitInvalidLiteralExpCS(visitable : InvalidLiteralExpCS) : kermeta::standard::~Void is
		do
		end

	method visitCollectionLiteralPartCS(visitable : CollectionLiteralPartCS) : kermeta::standard::~Void is
		do
		end

	method visitCollectionRangeCS(visitable : CollectionRangeCS) : kermeta::standard::~Void is
		do
		end

	method visitCallExpCS(visitable : CallExpCS) : kermeta::standard::~Void is
		do
		end

	method visitLoopExpCS(visitable : LoopExpCS) : kermeta::standard::~Void is
		do
		end

	method visitIteratorExpCS(visitable : IteratorExpCS) : kermeta::standard::~Void is
		do
		end

	method visitIterateExpCS(visitable : IterateExpCS) : kermeta::standard::~Void is
		do
		end

	method visitFeatureCallExpCS(visitable : FeatureCallExpCS) : kermeta::standard::~Void is
		do
		end

	method visitOperationCallExpCS(visitable : OperationCallExpCS) : kermeta::standard::~Void is
		do
		end

	method visitIsMarkedPreCS(visitable : IsMarkedPreCS) : kermeta::standard::~Void is
		do
		end

	method visitStateExpCS(visitable : StateExpCS) : kermeta::standard::~Void is
		do
		end

}
    