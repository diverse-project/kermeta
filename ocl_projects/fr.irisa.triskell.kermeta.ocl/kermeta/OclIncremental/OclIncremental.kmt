/* $Id:$ 
 * Creation : February 9, 2009
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            Mohammed-Said Belaid
 */
@mainClass "oclincremental::Main"
@mainOperation "main"


package oclincremental;


require kermeta
//require "platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"
//require "platform:/resource/fr.irisa.triskell.kermeta.ocl/mmodel/OCLCST.ecore"
require "TypeSystemMixin.kmt"
require "oclMark.kmt"
require "OclPVEs.kmt"

using kermeta::utils
using kermeta::standard
using kermeta::persistence
using ocl::cst
using EcoreHelpers
using ocl2kmt

class Main
{
	operation main() : Void is do 
		 	var repository : EMFRepository init EMFRepository.new
 			var resource : EMFResource
 			var	oclFileName : String init "1.xmi"
 			resource ?= repository.createResource("platform:/resource/fr.irisa.triskell.kermeta.ocl/xmi/"+ oclFileName, "platform:/resource/fr.irisa.triskell.kermeta.ocl/mmodel/OCLCST.ecore")
 			resource.load
 			resource.each{e|e.asType(PackageDeclarationCS).marks := kermeta::standard::Set<MARKTYPE>.new}
 			resource.each{e|e.asType(PackageDeclarationCS).marks.add(MARKTYPE.UND)}
  			var typemixin : TypeSystemMixin init TypeSystemMixin.new
			var ecorehelp : EcoreHelper init EcoreHelper.new
 			ecorehelp.loadMetamodel("platform:/resource/fr.irisa.triskell.kermeta.ocl/mmodel/company.ecore")
			typemixin.setEcoreHelper(ecorehelp)
			var context:TypeSystemMixin init typemixin			 			
 			resource.each{e|e.asType(PackageDeclarationCS).typeCheck(context)}
			resource.each{e|e.asType(PackageDeclarationCS).mark()}
			resource.each{e|e.asType(PackageDeclarationCS).getEvents()}
			stdio.writeln("  ____________________________________________________")
			stdio.writeln(" /                                                    \\")
			var str:String
			resource.each{e|e.asType(PackageDeclarationCS).eventsInv.each{s|
					stdio.writeln("|   Invariant : " + s.invariantName)
					s.each{ss| str := ss.toString 
							stdio.writeln("|       " + str)
					}}}
			stdio.writeln(" \\____________________________________________________/")

	end
}