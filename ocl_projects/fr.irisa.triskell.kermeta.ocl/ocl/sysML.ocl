package sysml

context Block  

	inv BlockTypedProperties :
		self.ownedattr1ibute->forAll(attr1 | (Set{attr1}->intersection(self.ownedPort)->isEmpty() and attr1.type->notEmpty() and attr1.type.oclIsTypeOf(Block)) implies attr1.association->notEmpty())

context BlockProperty
	inv BlockType :
		self.isComposite
		implies (self.type->notEmpty() and self.type.oclIsTypeOf(Block))

context Unit
	inv noUnit : 
		self.unit->isEmpty()

context Dimension 
	inv noUnitAndNoDimension :
		self.unit->isEmpty() and self.dimension->isEmpty()

context ValueType
	inv unitMatching :
		self.unit->notEmpty() implies self.dimension = self.unit.dimension

context FlowPort
    inv typeValidation :
		self.validateType()

context FlowPort
	inv ConnectedPortsCompatibility :
		self.validateConnectedPortsCompatibility()

context FlowProperty 
	inv typeValidation :
		self.validateType()

	
context FlowSpecification 
	inv noOperations :
		self.ownedOperation->isEmpty()

context ItemFlow 
	inv assignation :
		self.realizingConnector->size() < 2 and self.realization->size() < 2 
		and (self.realization->size() = 1 implies self.realizingConnector->size() = 0)

context ItemFlow 	
	inv itemPropertyType1 : 
		self.itemProperty->notEmpty() implies
		(self.itemProperty.type->notEmpty() and (self.itemProperty.type.oclIsTypeOf(Block) or self.itemProperty.type.oclIsTypeOf(ValueType)))
	
context ItemFlow 
	inv :
		self.itemProperty->notEmpty() and self.realizingConnector->size() = 1 and self.realizingConnector->asSequence()->first().owner.oclIsTypeOf(Block)
    	implies self.realizingConnector->asSequence()->first().owner.oclAsType(Block)->ownedattr1ibute->includes(self.itemProperty)

context ItemFlow 
	inv itemPropertyType2: 
		self.itemProperty->notEmpty() implies self.conveyed->forAll(cl | cl = self.itemProperty.type) --or self.itemProperty.type.general->includes(cl))
    
context ItemFlow 
	inv itemPropertyMultiplicity :
		self.realization->size() > 0 implies self.itemProperty->isEmpty()

context Copy 
	inv sourceAndTargetAreRequirements :
		self.client->forAll(src | src.oclIsTypeOf(Requirement)) and self.supplier->forAll(tgt | tgt.oclIsTypeOf(Requirement))

context Copy 
	inv subRqts :	
		self.supplier->forAll(req | req.oclIsTypeOf(Requirement) 
			implies req.oclAsType(Requirement).nestedClassifier->forAll(
				nested | nested.oclIsTypeOf(Requirement) implies 
				(self.client->forAll(cli | cli.oclIsTypeOf(Requirement)) and
				self.client.oclAsType(Requirement).nestedClassifier->exists(cl | cl.oclIsTypeOf(Requirement)
					and cl.oclAsType(Requirement).master = nested))))

	
context DeriveReqt 
	inv clientType :
		self.client->forAll(c | c.oclIsTypeOf(Requirement))
context DeriveReqt 
	inv supplierType :
		self.supplier->forAll(s | s.oclIsTypeOf(Requirement))

context Requirement 
	inv isAbstract :
		self.isAbstract

context Requirement 
	inv noOwnedOperations : 
		self.ownedOperation->isEmpty()	

context Requirement 
	inv noOwnedattr1ibutes : 
		self.ownedattribute->isEmpty()	

context Requirement 
		inv noGeneralizations :
		self.generalization->isEmpty()

context Requirement 
		inv nestedClassifiersAreRequirements :
		self.nestedClassifier->forAll(cl | cl.oclIsTypeOf(Requirement))

context Satisfy
	inv supplierType :
		self.supplier->forAll(s | s.oclIsKindOf(Requirement))

context Verify 
	inv supplierType :
		self.supplier->forAll(s | s.oclIsKindOf(Requirement))

context Verify 
	inv clientType :
		self.client->forAll(c | c.oclIsTypeOf(TestCase))
		
endpackage