package ocl;

require "Ecore.ecore"
 
package cst
{
	abstract class CSTNode inherits cst::visitors::Visitable
	{
		attribute startOffset : ecore::EInt

		attribute endOffset : ecore::EInt

		operation accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void is
			result := visitor.visitCSTNode(self)

	}
	class PackageDeclarationCS inherits CSTNode
	{
		reference pathNameCS : PathNameCS

		reference contextDecls : ContextDeclCS[0..*]

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitPackageDeclarationCS(self)

	}
	abstract class ContextDeclCS inherits CSTNode
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitContextDeclCS(self)

	}
	class PropertyContextCS inherits ContextDeclCS
	{
		reference pathNameCS : PathNameCS

		reference simpleNameCS : SimpleNameCS

		reference typeCS : TypeCS

		reference initOrDerValueCS : InitOrDerValueCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::ContextDeclCS is
			result := visitor.visitPropertyContextCS(self)

	}
	class ClassifierContextDeclCS inherits ContextDeclCS
	{
		reference pathNameCS : PathNameCS

		reference invOrDefCS : InvOrDefCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::ContextDeclCS is
			result := visitor.visitClassifierContextDeclCS(self)

	}
	class OperationContextDeclCS inherits ContextDeclCS
	{
		reference operationCS : OperationCS

		reference prePostOrBodyDecls : PrePostOrBodyDeclCS[1..*]

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::ContextDeclCS is
			result := visitor.visitOperationContextDeclCS(self)

	}
	class PrePostOrBodyDeclCS inherits CSTNode
	{
		attribute kind : PrePostOrBodyEnum

		reference simpleNameCS : SimpleNameCS

		reference expressionCS : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitPrePostOrBodyDeclCS(self)

	}
	enumeration PrePostOrBodyEnum
	{
		~pre;
		~post;
		body;
	}
	class OperationCS inherits CSTNode
	{
		reference pathNameCS : PathNameCS

		reference simpleNameCS : SimpleNameCS

		reference parameters : VariableCS[0..*]

		reference typeCS : TypeCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitOperationCS(self)

	}
	abstract class InitOrDerValueCS inherits CSTNode
	{
		reference initOrDerValueCS : InitOrDerValueCS

		reference expressionCS : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitInitOrDerValueCS(self)

	}
	class DerValueCS inherits InitOrDerValueCS
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::InitOrDerValueCS is
			result := visitor.visitDerValueCS(self)

	}
	class InitValueCS inherits InitOrDerValueCS
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::InitOrDerValueCS is
			result := visitor.visitInitValueCS(self)

	}
	abstract class InvOrDefCS inherits CSTNode
	{
		reference simpleNameCS : SimpleNameCS

		reference invOrDefCS : InvOrDefCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitInvOrDefCS(self)

	}
	class InvCS inherits InvOrDefCS
	{
		reference expressionCS : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::InvOrDefCS is
			result := visitor.visitInvCS(self)

	}
	class DefCS inherits InvOrDefCS
	{
		reference defExpressionCS : DefExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::InvOrDefCS is
			result := visitor.visitDefCS(self)

	}
	class DefExpressionCS inherits CSTNode
	{
		reference operationCS : OperationCS

		reference variableCS : VariableCS

		reference expressionCS : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitDefExpressionCS(self)

	}
	class PathNameCS inherits TypeCS
	{
		attribute sequenceOfNames : ecore::EString[0..*]

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::TypeCS is
			result := visitor.visitPathNameCS(self)

	}
	class VariableExpCS inherits OCLExpressionCS
	{
		reference arguments : OCLExpressionCS[0..*]

		reference simpleNameCS : SimpleNameCS

		reference isMarkedPreCS : IsMarkedPreCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::OCLExpressionCS is
			result := visitor.visitVariableExpCS(self)

	}
	class SimpleNameCS inherits OCLExpressionCS
	{
		attribute ~value : ecore::EString

		attribute type : SimpleTypeEnum

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::OCLExpressionCS is
			result := visitor.visitSimpleNameCS(self)

	}
	enumeration SimpleTypeEnum
	{
		identifier;
		~self;
		Integer;
		String;
		Real;
		Boolean;
		OclAny;
		OclVoid;
		Invalid;
		OclMessage;
		keyword;
	}
	abstract class TypeCS inherits OCLExpressionCS
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::OCLExpressionCS is
			result := visitor.visitTypeCS(self)

	}
	class PrimitiveTypeCS inherits SimpleNameCS, TypeCS
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::SimpleNameCS is
			result := visitor.visitPrimitiveTypeCS(self)

	}
	class TupleTypeCS inherits TypeCS
	{
		reference variables : VariableCS[1..*]

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::TypeCS is
			result := visitor.visitTupleTypeCS(self)

	}
	class CollectionTypeCS inherits TypeCS
	{
		attribute collectionTypeIdentifier : CollectionTypeIdentifierEnum

		reference typeCS : TypeCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::TypeCS is
			result := visitor.visitCollectionTypeCS(self)

	}
	enumeration CollectionTypeIdentifierEnum
	{
		Set;
		Bag;
		Sequence;
		Collection;
		OrderedSet;
	}
	abstract class OCLExpressionCS inherits CSTNode
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitOCLExpressionCS(self)

	}
	class LetExpCS inherits OCLExpressionCS
	{
		reference variables : VariableCS[1..*]

		reference inExpression : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::OCLExpressionCS is
			result := visitor.visitLetExpCS(self)

	}
	class IfExpCS inherits OCLExpressionCS
	{
		attribute thenExpression : OCLExpressionCS[1..1]

		attribute elseExpression : OCLExpressionCS[1..1]

		attribute condition : OCLExpressionCS[1..1]

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::OCLExpressionCS is
			result := visitor.visitIfExpCS(self)

	}
	class MessageExpCS inherits OCLExpressionCS
	{
		attribute target : OCLExpressionCS

		attribute kind : MessageExpKind

		reference simpleNameCS : SimpleNameCS

		attribute arguments : OCLMessageArgCS[0..*]

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::OCLExpressionCS is
			result := visitor.visitMessageExpCS(self)

	}
	class OCLMessageArgCS inherits CSTNode
	{
		reference typeCS : TypeCS

		reference expression : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitOCLMessageArgCS(self)

	}
	class VariableCS inherits CSTNode
	{
		attribute name : ecore::EString

		reference typeCS : TypeCS

		reference initExpression : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitVariableCS(self)

	}
	abstract class LiteralExpCS inherits OCLExpressionCS
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::OCLExpressionCS is
			result := visitor.visitLiteralExpCS(self)

	}
	class EnumLiteralExpCS inherits LiteralExpCS
	{
		reference pathNameCS : PathNameCS

		reference simpleNameCS : SimpleNameCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::LiteralExpCS is
			result := visitor.visitEnumLiteralExpCS(self)

	}
	class CollectionLiteralExpCS inherits LiteralExpCS
	{
		attribute collectionType : CollectionTypeIdentifierEnum

		reference collectionLiteralParts : CollectionLiteralPartCS[0..*]

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::LiteralExpCS is
			result := visitor.visitCollectionLiteralExpCS(self)

	}
	class TupleLiteralExpCS inherits LiteralExpCS
	{
		reference variables : VariableCS[0..*]

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::LiteralExpCS is
			result := visitor.visitTupleLiteralExpCS(self)

	}
	class PrimitiveLiteralExpCS inherits LiteralExpCS
	{
		attribute symbol : ecore::EString

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::LiteralExpCS is
			result := visitor.visitPrimitiveLiteralExpCS(self)

	}
	class IntegerLiteralExpCS inherits PrimitiveLiteralExpCS
	{
		attribute integerSymbol : ecore::EIntegerObject

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::PrimitiveLiteralExpCS is
			result := visitor.visitIntegerLiteralExpCS(self)

	}
	class RealLiteralExpCS inherits PrimitiveLiteralExpCS
	{
		attribute realSymbol : ecore::EDoubleObject

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::PrimitiveLiteralExpCS is
			result := visitor.visitRealLiteralExpCS(self)

	}
	class StringLiteralExpCS inherits PrimitiveLiteralExpCS
	{
		attribute stringSymbol : ecore::EString

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::PrimitiveLiteralExpCS is
			result := visitor.visitStringLiteralExpCS(self)

	}
	class BooleanLiteralExpCS inherits PrimitiveLiteralExpCS
	{
		attribute booleanSymbol : ecore::EBooleanObject

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::PrimitiveLiteralExpCS is
			result := visitor.visitBooleanLiteralExpCS(self)

	}
	class NullLiteralExpCS inherits LiteralExpCS
	{
		attribute symbol : ecore::EString

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::LiteralExpCS is
			result := visitor.visitNullLiteralExpCS(self)

	}
	class InvalidLiteralExpCS inherits LiteralExpCS
	{
		attribute symbol : ecore::EString

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::LiteralExpCS is
			result := visitor.visitInvalidLiteralExpCS(self)

	}
	class CollectionLiteralPartCS inherits CSTNode
	{
		reference expressionCS : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitCollectionLiteralPartCS(self)

	}
	class CollectionRangeCS inherits CollectionLiteralPartCS
	{
		reference lastExpressionCS : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CollectionLiteralPartCS is
			result := visitor.visitCollectionRangeCS(self)

	}
	class CallExpCS inherits OCLExpressionCS
	{
		reference source : OCLExpressionCS

		attribute accessor : DotOrArrowEnum

		reference simpleNameCS : SimpleNameCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::OCLExpressionCS is
			result := visitor.visitCallExpCS(self)

	}
	class LoopExpCS inherits CallExpCS
	{
		reference variable1 : VariableCS

		reference variable2 : VariableCS

		reference body : OCLExpressionCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CallExpCS is
			result := visitor.visitLoopExpCS(self)

	}
	class IteratorExpCS inherits LoopExpCS
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::LoopExpCS is
			result := visitor.visitIteratorExpCS(self)

	}
	class IterateExpCS inherits LoopExpCS
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::LoopExpCS is
			result := visitor.visitIterateExpCS(self)

	}
	class FeatureCallExpCS inherits CallExpCS
	{
		reference arguments : OCLExpressionCS[0..*]

		reference isMarkedPreCS : IsMarkedPreCS

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CallExpCS is
			result := visitor.visitFeatureCallExpCS(self)

	}
	enumeration DotOrArrowEnum
	{
		none;
		dot;
		arrow;
	}
	class OperationCallExpCS inherits FeatureCallExpCS
	{
		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::FeatureCallExpCS is
			result := visitor.visitOperationCallExpCS(self)

	}
	class IsMarkedPreCS inherits CSTNode
	{
		attribute ~pre : ecore::EBoolean

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::CSTNode is
			result := visitor.visitIsMarkedPreCS(self)

	}
	class StateExpCS inherits TypeCS
	{
		attribute sequenceOfNames : ecore::EString[0..*]

		method accept(visitor : cst::visitors::Visitor) : kermeta::standard::~Void from ocl::cst::TypeCS is
			result := visitor.visitStateExpCS(self)

	}
	enumeration MessageExpKind
	{
		hasSent;
		sent;
	}
	package visitors
	{
		abstract class Visitable
		{
		}
		abstract class Visitor
		{
			operation visitCSTNode(visitable : cst::CSTNode) : kermeta::standard::~Void is
				abstract

			operation visitPackageDeclarationCS(visitable : cst::PackageDeclarationCS) : kermeta::standard::~Void is
				abstract

			operation visitContextDeclCS(visitable : cst::ContextDeclCS) : kermeta::standard::~Void is
				abstract

			operation visitPropertyContextCS(visitable : cst::PropertyContextCS) : kermeta::standard::~Void is
				abstract

			operation visitClassifierContextDeclCS(visitable : cst::ClassifierContextDeclCS) : kermeta::standard::~Void is
				abstract

			operation visitOperationContextDeclCS(visitable : cst::OperationContextDeclCS) : kermeta::standard::~Void is
				abstract

			operation visitPrePostOrBodyDeclCS(visitable : cst::PrePostOrBodyDeclCS) : kermeta::standard::~Void is
				abstract

			operation visitOperationCS(visitable : cst::OperationCS) : kermeta::standard::~Void is
				abstract

			operation visitInitOrDerValueCS(visitable : cst::InitOrDerValueCS) : kermeta::standard::~Void is
				abstract

			operation visitDerValueCS(visitable : cst::DerValueCS) : kermeta::standard::~Void is
				abstract

			operation visitInitValueCS(visitable : cst::InitValueCS) : kermeta::standard::~Void is
				abstract

			operation visitInvOrDefCS(visitable : cst::InvOrDefCS) : kermeta::standard::~Void is
				abstract

			operation visitInvCS(visitable : cst::InvCS) : kermeta::standard::~Void is
				abstract

			operation visitDefCS(visitable : cst::DefCS) : kermeta::standard::~Void is
				abstract

			operation visitDefExpressionCS(visitable : cst::DefExpressionCS) : kermeta::standard::~Void is
				abstract

			operation visitPathNameCS(visitable : cst::PathNameCS) : kermeta::standard::~Void is
				abstract

			operation visitVariableExpCS(visitable : cst::VariableExpCS) : kermeta::standard::~Void is
				abstract

			operation visitSimpleNameCS(visitable : cst::SimpleNameCS) : kermeta::standard::~Void is
				abstract

			operation visitTypeCS(visitable : cst::TypeCS) : kermeta::standard::~Void is
				abstract

			operation visitPrimitiveTypeCS(visitable : cst::PrimitiveTypeCS) : kermeta::standard::~Void is
				abstract

			operation visitTupleTypeCS(visitable : cst::TupleTypeCS) : kermeta::standard::~Void is
				abstract

			operation visitCollectionTypeCS(visitable : cst::CollectionTypeCS) : kermeta::standard::~Void is
				abstract

			operation visitOCLExpressionCS(visitable : cst::OCLExpressionCS) : kermeta::standard::~Void is
				abstract

			operation visitLetExpCS(visitable : cst::LetExpCS) : kermeta::standard::~Void is
				abstract

			operation visitIfExpCS(visitable : cst::IfExpCS) : kermeta::standard::~Void is
				abstract

			operation visitMessageExpCS(visitable : cst::MessageExpCS) : kermeta::standard::~Void is
				abstract

			operation visitOCLMessageArgCS(visitable : cst::OCLMessageArgCS) : kermeta::standard::~Void is
				abstract

			operation visitVariableCS(visitable : cst::VariableCS) : kermeta::standard::~Void is
				abstract

			operation visitLiteralExpCS(visitable : cst::LiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitEnumLiteralExpCS(visitable : cst::EnumLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitCollectionLiteralExpCS(visitable : cst::CollectionLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitTupleLiteralExpCS(visitable : cst::TupleLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitPrimitiveLiteralExpCS(visitable : cst::PrimitiveLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitIntegerLiteralExpCS(visitable : cst::IntegerLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitRealLiteralExpCS(visitable : cst::RealLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitStringLiteralExpCS(visitable : cst::StringLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitBooleanLiteralExpCS(visitable : cst::BooleanLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitNullLiteralExpCS(visitable : cst::NullLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitInvalidLiteralExpCS(visitable : cst::InvalidLiteralExpCS) : kermeta::standard::~Void is
				abstract

			operation visitCollectionLiteralPartCS(visitable : cst::CollectionLiteralPartCS) : kermeta::standard::~Void is
				abstract

			operation visitCollectionRangeCS(visitable : cst::CollectionRangeCS) : kermeta::standard::~Void is
				abstract

			operation visitCallExpCS(visitable : cst::CallExpCS) : kermeta::standard::~Void is
				abstract

			operation visitLoopExpCS(visitable : cst::LoopExpCS) : kermeta::standard::~Void is
				abstract

			operation visitIteratorExpCS(visitable : cst::IteratorExpCS) : kermeta::standard::~Void is
				abstract

			operation visitIterateExpCS(visitable : cst::IterateExpCS) : kermeta::standard::~Void is
				abstract

			operation visitFeatureCallExpCS(visitable : cst::FeatureCallExpCS) : kermeta::standard::~Void is
				abstract

			operation visitOperationCallExpCS(visitable : cst::OperationCallExpCS) : kermeta::standard::~Void is
				abstract

			operation visitIsMarkedPreCS(visitable : cst::IsMarkedPreCS) : kermeta::standard::~Void is
				abstract

			operation visitStateExpCS(visitable : cst::StateExpCS) : kermeta::standard::~Void is
				abstract

		}
	}

}
}

