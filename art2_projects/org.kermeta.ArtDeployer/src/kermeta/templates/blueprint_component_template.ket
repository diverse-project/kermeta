<%@ket
package="org::kermeta::art::generator"
require="platform:/resource/org.kermeta.art.model/metamodel/art.ecore"
using=""
isAspectClass="false"
class="ComponentInstanceGenerator"
ismethod="false"operation="generate"
parameters="c : art2::ComponentInstance"
%>
<?xml version="1.0" encoding="UTF-8"?>
<!-- Powered by KET: Kermeta Emitter Template. See http://www.kermeta.org -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
    http://www.osgi.org/xmlns/blueprint/v1.0.0 
    http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	<!-- create hosted ports -->
<%c.hostedPorts.each{ hp | %>
	<%if hp.portTypeRef.ref.interface.isKindOf(art2::OSGiScrDataType) then%>
	
		<bean id="<%=hp.portTypeRef.name%>" class="<%=hp.portTypeRef.ref.bean%>">
			<property name="container" ref="<%=c.name%>" />
		</bean>
	
		<service ref="<%=hp.portTypeRef.name%>" interface="<%=hp.portTypeRef.ref.interface.asType(art2::OSGiScrDataType).interfaceImpl%>">
			<service-properties>
				<entry key="artPorttyperefName" value="<%=hp.portTypeRef.name%>" />
				<entry key="artComponentinstanceName" value="<%=c.name%>" />
			</service-properties>
		</service>
	<%end%>
<%}%>


	<!-- create needed port binding -->
<%c.requirePorts.each{np | %>
	<%if np.portTypeRef.ref.interface.isKindOf(art2::OSGiScrDataType) then%>
	
	<% var portBinding : art2::Binding init void %>
	<% c.container.asType(art2::ContainerNode).bindings.each{b| %>
		<% b.ports.each{ p | %>
			<%if(p.name.equals(np.name)) then portBinding := b  end%>
		<%}%>
	<%}%>
	<%  var remoteComponentInstanceName : String init portBinding.ports.select{ p | not(p.name.equals(np.name)) }.first.container.asType(art2::NamedElement).name   %>
	<%  var remotePortTypeName : String init portBinding.ports.select{ p | not(p.name.equals(np.name)) }.first.asType(art2::Port).portTypeRef.name   %>
<reference id="<%=np.portTypeRef.name%>" interface="<%=np.portTypeRef.ref.interface.asType(art2::OSGiScrDataType).interfaceImpl%>" filter="&amp;(artComponentinstanceName=<%=remoteComponentInstanceName%>)(artPorttyperefName=<%=remotePortTypeName%>)" />	
	<%end%>
<%}%>
	

	<!-- create the bean -->
	<bean id="<%=c.name%>" class="<%=c.componentType.bean%>" init-method="init" destroy-method="stop">
	
		<!-- property -->
		<property name="dictionary">
			<props>
				<prop key="art.name"><%=c.name%></prop>
			</props>
		</property>
		<!-- end property -->
	
		<!-- inject hosted ports -->
<%c.hostedPorts.each{ hp | %>
	<%if hp.portTypeRef.ref.interface.isKindOf(art2::OSGiScrDataType) then%>	
		<property name="<%=hp.portTypeRef.name%>" ref="<%=hp.portTypeRef.name%>" />
	<%end%>
<%}%>


		<!-- inject needed ports -->
		<%c.requirePorts.each{np | %>
			<%if np.portTypeRef.ref.interface.isKindOf(art2::OSGiScrDataType) then%>
				<property name="<%=np.portTypeRef.name%>" ref="<%=np.portTypeRef.name%>" />
			<%end%>
		<%}%>
	</bean>
</blueprint>