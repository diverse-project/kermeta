<%@ket
package="org::kermeta::art::generator"
require="platform:/resource/org.kermeta.art.model/metamodel/art.ecore"
require="platform:/resource/org.kermeta.ArtKomparator/src/kermeta/DerivePropertyArtAspect.kmt"
using=""
isAspectClass="false"
class="ComponentInstanceGenerator"
ismethod="false"operation="generate"
parameters="c : art2::ComponentInstance"
%>
<?xml version="1.0" encoding="UTF-8"?>
<!-- Powered by KET: Kermeta Emitter Template. See http://www.kermeta.org -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:osgi="http://www.springframework.org/schema/osgi"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
    
    <!-- Create ActiveMQ Camel component instance -->
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="brokerURL" value="vm://default"/>
    </bean>

	<!-- create hosted ports -->
<%c.hostedPorts.each{ hp | %>
	<% var interfaceImpl : String init "" %>
	<%if hp.portTypeRef.ref.interface.isKindOf(art2::ServiceDataType) then%>
	<% interfaceImpl := hp.portTypeRef.ref.interface.asType(art2::ServiceDataType).interface %>
	<%else%>
	<% interfaceImpl := "org.kermeta.art2.framework.MessagePort"  %>
	<%end%>
	
	<!-- Port Bean -->
		<bean id="<%=hp.portTypeRef.name%>" class="<%=hp.portTypeRef.ref.bean%>">
			<property name="component" ref="<%=c.name%>" />
			<property name="name" value="<%=hp.portTypeRef.name%>" />
		</bean>
	
	<!-- Export Bean via osgi -->
		<osgi:service ref="<%=hp.portTypeRef.name%>" interface="<%=interfaceImpl%>">
			<osgi:service-properties>
				<entry key="artPorttyperefName" value="<%=hp.portTypeRef.name%>" />
				<entry key="artComponentinstanceName" value="<%=c.name%>" />
			</osgi:service-properties>
		</osgi:service>
		
<%}%>


	<!-- create needed port binding -->
<%c.requirePorts.each{np | %>
	<% var interfaceImpl : String init "" %>
	<%if np.portTypeRef.ref.interface.isKindOf(art2::ServiceDataType) then%>
	<% interfaceImpl := np.portTypeRef.ref.interface.asType(art2::ServiceDataType).interface %>
	<%else%>
	<% interfaceImpl := "org.kermeta.art2.framework.MessagePort"  %>
	<%end%>

		<% var portBinding : art2::Binding init void %>
		<% var remoteNode : art2::ContainerNode init void %>
		<% c.container.container.asType(art2::ContainerRoot).bindings.each{b | %>
			<%if(b.isUsingPort(np)) then %>
				<% portBinding := b %>
				<% remoteNode := b.opositePort(np).container.container.asType(art2::ContainerNode) %>
			<%end%>
		<%}%>
		<%  var remoteComponentInstanceName : String init portBinding.ports.select{ p | not(p.name.equals(np.name)) }.first.container.asType(art2::NamedElement).name   %>
		<%  var remotePortTypeName : String init portBinding.ports.select{ p | not(p.name.equals(np.name)) }.first.asType(art2::Port).portTypeRef.name   %>

		<%if remoteNode.name.equals(c.container.asType(art2::ContainerNode).name ) then%>
			<osgi:reference id="<%=np.portTypeRef.name%>" interface="<%=interfaceImpl%>" filter="(&amp;(artComponentinstanceName=<%=remoteComponentInstanceName%>)(artPorttyperefName=<%=remotePortTypeName%>))" cardinality="1..1" />
		<%end%>
<%}%>

<camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring">
<%c.hostedPorts.each{ hp | %>
	<% var interfaceImpl : String init "" %>
	<%if hp.portTypeRef.ref.interface.isKindOf(art2::ServiceDataType) then%>
	<% interfaceImpl := hp.portTypeRef.ref.interface.asType(art2::ServiceDataType).interface %>
	<%else%>
	<% interfaceImpl := "org.kermeta.art2.framework.MessagePort"  %>
	<%end%>
	<!-- Export Bean via Camel/ActiveMQ -->
	<camel:export id="<%=hp.portTypeRef.name%>Proxy" uri="activemq:queue:<%=c.name%>.<%=hp.portTypeRef.name%>?durableSubscriptionName=<%=c.name%>" serviceRef="<%=hp.portTypeRef.name%>" serviceInterface="<%=interfaceImpl%>"/>
<%}%>

<!-- create needed port binding -->
<%c.requirePorts.each{np | %>
	<% var interfaceImpl : String init "" %>
	<%if np.portTypeRef.ref.interface.isKindOf(art2::ServiceDataType) then%>
	<% interfaceImpl := np.portTypeRef.ref.interface.asType(art2::ServiceDataType).interface %>
	<%else%>
	<% interfaceImpl := "org.kermeta.art2.framework.MessagePort"  %>
	<%end%>
	<% var portBinding : art2::Binding init void %>
	<% var remoteNode : art2::ContainerNode init void %>
	<% c.container.container.asType(art2::ContainerRoot).bindings.each{b | %>
		<% b.ports.each{ p | %>
			<%if(p.name.equals(np.name)) then%>
				<% portBinding := b %>
				<% remoteNode := p.container.container.asType(art2::ContainerNode)  %>
			<%end%>
		<%}%>
	<%}%>
	<%  var remoteComponentInstanceName : String init portBinding.ports.select{ p | not(p.name.equals(np.name)) }.first.container.asType(art2::NamedElement).name   %>
	<%  var remotePortTypeName : String init portBinding.ports.select{ p | not(p.name.equals(np.name)) }.first.asType(art2::Port).portTypeRef.name   %>

<camel:proxy id="<%=np.portTypeRef.name%>" serviceInterface="<%=interfaceImpl%>" serviceUrl="activemq:queue:<%=remoteComponentInstanceName%>.<%=remotePortTypeName%>"/>
<%}%>
</camelContext>
	

	<!-- create the bean -->
	<bean id="<%=c.name%>" class="<%=c.componentType.bean%>" init-method="init" destroy-method="stop">
		<!-- property -->
		<property name="dictionary">
			<props>
				<prop key="art.name"><%=c.name%></prop>
			</props>
		</property>
		<!-- end property -->
	
<!-- inject hosted ports -->
<property name="hostedPorts">
<map>	
<%c.hostedPorts.each{ hp | %>
<entry key="<%=hp.portTypeRef.name%>">
<ref bean="<%=hp.portTypeRef.name%>" />
</entry>
<%}%>
</map>
</property>

<!-- inject hosted ports -->
<property name="neededPorts">
<map>	
<%c.requirePorts.each{ np | %>
<entry key="<%=np.portTypeRef.name%>">
<ref bean="<%=np.portTypeRef.name%>" />
</entry>
<%}%>
</map>
</property>

	</bean>
</beans>