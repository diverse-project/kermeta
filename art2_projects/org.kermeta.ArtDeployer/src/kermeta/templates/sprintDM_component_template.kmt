package org::kermeta::art::generator;
require kermeta
require "platform:/resource/org.kermeta.art.model/metamodel/art.ecore"
using kermeta::standard
using kermeta::utils
class BluePrintGenerator{
operation generate(c : art2::ComponentInstance):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Powered by KET: Kermeta Emitter Template. See http://www.kermeta.org -->\n<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"\n    http://www.osgi.org/xmlns/blueprint/v1.0.0 \n    http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\">\n\n\t<!-- create hosted ports -->\n")
c.hostedPorts.each{ hp | 
_res.append("")
if hp.portTypeRef.ref.interface.isKindOf(art2::OSGiScrDataType) then
_res.append("\t\n\t\t<bean id=\"")
_res.append(hp.portTypeRef.name)
_res.append("\" class=\"")
_res.append(hp.portTypeRef.ref.bean)
_res.append("\">\n\t\t\t<property name=\"container\" ref=\"")
_res.append(c.name)
_res.append("\" />\n\t\t</bean>\n\t\n\t\t<service ref=\"")
_res.append(hp.portTypeRef.name)
_res.append("\" interface=\"")
_res.append(hp.portTypeRef.ref.interface.asType(art2::OSGiScrDataType).interfaceImpl)
_res.append("\">\n\t\t\t<service-properties>\n\t\t\t\t<entry key=\"artPorttyperefName\" value=\"")
_res.append(hp.portTypeRef.name)
_res.append("\" />\n\t\t\t\t<entry key=\"artComponentinstanceName\" value=\"")
_res.append(c.name)
_res.append("\" />\n\t\t\t</service-properties>\n\t\t</service>\n")
end
_res.append("")
}
_res.append("\n\n\t<!-- create needed port binding -->\n")
c.requirePorts.each{np | 
_res.append("")
if np.portTypeRef.ref.interface.isKindOf(art2::OSGiScrDataType) then
_res.append("\t\n")
 var portBinding : art2::Binding init void 
_res.append("")
 c.container.asType(art2::ContainerNode).bindings.each{b| 
_res.append("")
 b.ports.each{ p | 
_res.append("")
if(p.name.equals(np.name)) then portBinding := b  end
_res.append("")
}
_res.append("")
}
_res.append("")
  var remoteComponentInstanceName : String init portBinding.ports.select{ p | not(p.name.equals(np.name)) }.first.container.asType(art2::NamedElement).name   
_res.append("")
  var remotePortTypeName : String init portBinding.ports.select{ p | not(p.name.equals(np.name)) }.first.asType(art2::Port).portTypeRef.name   
_res.append("<reference id=\"")
_res.append(np.portTypeRef.name)
_res.append("\" interface=\"")
_res.append(np.portTypeRef.ref.interface.asType(art2::OSGiScrDataType).interfaceImpl)
_res.append("\" filter=\"&amp;(artComponentinstanceName=")
_res.append(remoteComponentInstanceName)
_res.append(")(artPorttyperefName=")
_res.append(remotePortTypeName)
_res.append(")\" />\t\n")
end
_res.append("")
}
_res.append("\t\n\n\t<!-- create the bean -->\n\t<bean id=\"")
_res.append(c.name)
_res.append("\" class=\"")
_res.append(c.componentType.bean)
_res.append("\" init-method=\"init\" destroy-method=\"stop\">\n\t\n\t\t<!-- property -->\n\t\t<property name=\"dictionary\">\n\t\t\t<props>\n\t\t\t\t<prop key=\"art.name\">")
_res.append(c.name)
_res.append("</prop>\n\t\t\t</props>\n\t\t</property>\n\t\t<!-- end property -->\n\t\n\t\t<!-- inject hosted ports -->\n")
c.hostedPorts.each{ hp | 
_res.append("")
if hp.portTypeRef.ref.interface.isKindOf(art2::OSGiScrDataType) then
_res.append("\t\t<property name=\"")
_res.append(hp.portTypeRef.name)
_res.append("\" ref=\"")
_res.append(hp.portTypeRef.name)
_res.append("\" />\n")
end
_res.append("")
}
_res.append("\n\n\t\t<!-- inject needed ports -->\n")
c.requirePorts.each{np | 
_res.append("")
if np.portTypeRef.ref.interface.isKindOf(art2::OSGiScrDataType) then
_res.append("\t\t\t\t<property name=\"")
_res.append(np.portTypeRef.name)
_res.append("\" ref=\"")
_res.append(np.portTypeRef.name)
_res.append("\" />\n")
end
_res.append("")
}
_res.append("\t</bean>\n</blueprint>")
result := _res.toString
end
}
