/* $Id:$ 
 * Creation : February 4, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ffouquet
 */
@mainClass "org::kermeta::komparator::Komparator"
@mainOperation "kompare"


package org::kermeta::komparator;


require kermeta
require "platform:/resource/org.kermeta.art.model/metamodel/art.ecore"
require "platform:/resource/org.kermeta.ArtDeployer/src/kermeta/AbstractArtDeployCommand.kmt"
require "DerivePropertyArtAspect.kmt"

using kermeta::persistence
using kermeta::standard
using kermeta::io
using art2
using org::kermeta::art::deployer

class Komparator
{
	operation kompare(runtimeModel : art2::ContainerRoot, updateModel : art2::ContainerRoot , deployNodeName : String , factory : org::kermeta::art::deployer::AbtractCommandFactory) : OrderedSet<org::kermeta::art::deployer::Command>  is do 
	
		result := OrderedSet<org::kermeta::art::deployer::Command>.new

		
		if(runtimeModel.isVoid)
		then 
			//VOID MODEL USE CASE
			if(updateModel.isVoid)
				then stdio.writeln("KOMPARATOR INFO : Both input model are void , nothing to do")
			else
			updateModel.nodes.each{node|
				if(node.name.equals(deployNodeName)) 
				then 
					result.addAll(initNode(node,factory))
				end
			}
			end
		else
			//STEP 0 - FOUND LOCAL NODE
			var actualRuntimeLocalNodes : Sequence<art2::ContainerNode> init runtimeModel.nodes.select{c| c.name.equals(deployNodeName) } 
			var actualUpdateLocalNodes : Sequence<art2::ContainerNode> init updateModel.nodes.select{c| c.name.equals(deployNodeName) }
			
			if( (actualRuntimeLocalNodes.size == 0) and (actualUpdateLocalNodes.size > 0))
			then 
				//STOP ALL PREVIOUS THINGS RUNNING ON NODE
				//TODO
				//INIT NODE
				result.addAll(initNode(actualUpdateLocalNodes.first,factory))
			end
			if( (actualRuntimeLocalNodes.size > 0) and (actualUpdateLocalNodes.size > 0))
			then
				//PERFORM DIF
				result.addAll(updateNode(actualRuntimeLocalNodes.first,actualUpdateLocalNodes.first,factory))
			end
		end
	end
	
	operation initNode(node : ContainerNode,factory : AbtractCommandFactory) : OrderedSet<org::kermeta::art::deployer::Command> is do
		result := OrderedSet<org::kermeta::art::deployer::Command>.new
		stdio.writeln("DEBUG : INIT NODE : "+node.name)
		
		var alreadyDeployComponentType : Set<ComponentType> init Set<ComponentType>.new
		
		node.components.each{c|
			var ct : ComponentType init c.componentType
			if(not(node.containByName(ct,alreadyDeployComponentType)))
			then 
				stdio.writeln("DEBUG : PROCESS "+ct.name)
				alreadyDeployComponentType.add(ct)
				result.add(factory.createCommandAddComponentType(ct))
			end	
		}
		
		node.components.each{c|
			result.add(factory.createCommandAddComponentInstance(c))
		}
	end
	
	operation updateNode(runtimeNode : ContainerNode, updateNode : ContainerNode, factory : AbtractCommandFactory) : OrderedSet<org::kermeta::art::deployer::Command> is do
		result := OrderedSet<org::kermeta::art::deployer::Command>.new
		stdio.writeln("DEBUG : UPDATE NODE : "+updateNode.name)
		
		
		var runtimeComponentType : Set<ComponentType> init Set<ComponentType>.new
		var alreadyTestedUpdateComponentType : Set<ComponentType> init Set<ComponentType>.new
		
		//COMPONENT TYPE STEP
		runtimeNode.componentTypes.each{ rct |
			var similarComponentType : ComponentType init void
			//SEARCH SIMILAR COMPONENT TYPE IN UPDATE MODEL
			updateNode.componentTypes.each{ uct | 
				if(uct.equals(rct)) then similarComponentType := uct end
			}
			if(similarComponentType == void)
			then
				//NOT FOUND , UNDEPLOY COMPONENT TYPE
				result.add(factory.createCommandRemoveComponentType(rct))
			end
		}
		
		updateNode.componentTypes.each{ uct |
			var similarComponentType : ComponentType init void
			runtimeNode.componentTypes.each{ rct | 
				if(rct.equals(uct)) then similarComponentType := uct end
			}
			if(similarComponentType == void)
			then
				//NOT FOUDN DEPLOY COMPONENT TYPE
				result.add(factory.createCommandAddComponentType(uct))
			end
		}
		
		//COMPONENT INSTANCE STEP
		runtimeNode.components.each{ rc |
			var similarComponent : ComponentInstance init void
			//SEARCH SIMILAR COMPONENT IN UPDATE MODEL
			updateNode.components.each{ uc | 
				if(uc.equals(rc)) then similarComponent := uc end
			}
			if(similarComponent == void)
			then
				//NOT FOUND , UNDEPLOY COMPONENT
				result.add(factory.createCommandRemoveComponentInstance(rc))
			else
				//UPDATE COMPONENT INSTANCE
				if(rc.isUpdated(similarComponent))
				then
					result.add(factory.createCommandUpdateComponentInstance(similarComponent))
				else
					//DO NOTHING
				end
			end
		}
		
		updateNode.components.each{ uc |
			var similarComponent : ComponentInstance init void
			runtimeNode.components.each{ rc | 
				if(rc.equals(uc)) then similarComponent := uc end
			}
			if(similarComponent == void)
			then
				//NOT FOUDN DEPLOY COMPONENT TYPE
				result.add(factory.createCommandAddComponentInstance(uc))
			end
		}		

		
		
	end
	
	
}






