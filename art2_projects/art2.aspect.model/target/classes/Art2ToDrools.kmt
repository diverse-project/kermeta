/* $Id:$ 
 * Creation : June 24, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            bmorin
 */
@mainClass "main::resources::Main"
@mainOperation "main"


package art2;


require kermeta
require "platform:/resource/org.kermeta.art2.model/metamodel/art.ecore"


using kermeta::standard
using kermeta::persistence
using kermeta::utils


class Context
{
	reference res : StringBuffer
	reference cache : Hashtable<Object,String>
	
	attribute i : Integer
	
	operation getNextIndex() : Integer is
	do
		if (i.isVoid) then 
			i := 0
		else
			i := i+1 
		end
		result := i
	end
	
	operation generateName(o : Object):String is do	
		if cache.getValue(o) != void then
			result := cache.getValue(o)
		else
			result :="var"+ getNextIndex().toString
			cache.put(o,result)
		end	
	end
}

aspect class ContainerRoot
{
	operation generateAdvice(ctx : Context) : Void is
	do
	
	end
}

aspect class ComponentType
{
	operation pointcutToDrools(ctx : Context) : Void is
	do
		var varName : String init "\t$"+ctx.generateName(self)
		var i : Integer init 0
		
		self.provided.each{p | p.pointcutToDrools(ctx)}
		self.required.each{r | r.pointcutToDrools(ctx)}
		
		ctx.res.append(varName)
		ctx.res.append(": art2.ComponentType(")
		
		if(self.name != void) then
			ctx.res.append("name == \""+name+"\"")
			i := i+1
		end
		
		stdio.errorln("self.provided.size = "+self.provided.size.toString)
		if(self.provided.size > 0) then
			var j : Integer init 0
			if i > 0 then
				ctx.res.append(", ")
			end
			self.provided.each{p |
				if j>0 then ctx.res.append(", ") end
				ctx.res.append("provided contains $"+ctx.cache.getValue(p))
				j := j+1
			}
			i := i+1
		end
		
		stdio.errorln("self.required.size = "+self.required.size.toString)
		if(required.size > 0) then
			var j : Integer init 0
			if i > 0 then
				ctx.res.append(", ")
			end
			self.required.each{p |
				if j>0 then ctx.res.append(", ") end
				ctx.res.append("required contains $"+ctx.cache.getValue(p))
				j := j+1
			}
			i := i+1
		end
		
		ctx.res.append(")\n")
	end
}

aspect class PortType
{
	attribute alreadyVisited : Boolean

	operation pointcutToDrools(ctx : Context) : Void is
	do
		if((alreadyVisited == void).orElse{b | not alreadyVisited}) then
			alreadyVisited := true
	
			var varName : String init "\t$"+ctx.generateName(self)
			ctx.res.append(varName)
			ctx.res.append(": art2.PortType(")
		
			if(self.name != void) then
				ctx.res.append("name == \""+name+"\"")
			end
		
			ctx.res.append(")\n")
		end
	end	
}

aspect class PortTypeRef
{
	operation pointcutToDrools(ctx : Context) : Void is
	do
		var varName : String init "\t$"+ctx.generateName(self)
		var i : Integer init 0
		
		ctx.res.append(varName)
		ctx.res.append(": art2.PortTypeRef(")
		
		if(self.name != void) then
			ctx.res.append("name == \""+name+"\"")
			i := i+1
		end
		
		if(self.ref != void) then
			if(i>0) then
				ctx.res.append(", ")
			end
			ctx.res.append("ref == "+"$"+ctx.cache.getValue(self.ref))
		end
		
		ctx.res.append(")\n")		
	end	
}