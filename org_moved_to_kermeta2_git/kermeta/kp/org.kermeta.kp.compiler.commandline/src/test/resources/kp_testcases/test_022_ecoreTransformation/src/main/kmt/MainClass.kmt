using kermeta_standard^kermeta::standard::*
using kermeta_standard^kermeta::emfpersistence::*
using kermeta_standard^kermeta::io::StdIO => stdio

package mainPackage{
	class MainClass 
	{
		@main ""
		operation mainOperation() : Void is do
			 mainOperationWithArg("arg1", "arg2")
		end
		@main ""
		operation mainOperationWithArg(arg1 : String, arg2 : String) : Void is do 
			stdio.writeln(arg1)
			stdio.writeln(arg2)
			//true.andThen{x|false}
			var repository : ResourceSet init ResourceSet.new
	   		//repository.registerEcoreFile("platform:/resource/fr.irisa.triskell.kermeta.samples/class2RDBMS/metamodels/ClassMM.ecore")             
	   		var resource : Resource init repository.createResource("platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore",
	   															   "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore")
	   		//var resource : Resource init repository.createResource("file:/C:/Users/dvojtise/workspaces/runtimeWorkbench/language.sample.class2rdbms/src/main/models/ClassModel.xmi",
	   		//																							"file:/C:/Users/dvojtise/workspaces/runtimeWorkbench/language.sample.class2rdbms/metamodels/ClassMM.ecore")
	       	resource.load(void)      
	       	
	       	
	       	stdio.writeln(resource.getContents.one.toString)
	       	var pack : ecore::EPackage init resource.getContents.one.asType(ecore::EPackage)
	        pack.eClassifiers.each{c |
	        	stdio.writeln(c.name)
	        }
	        
	      /*  var foo : MainClass2 init MainClass2.new
	        foo.mainOperation
	        300.times{ i |
	        	stdio.writeln(i.toString) 
	        	1000000.times{j | j+i*30 }
	        }
	       */
		end 
	}
	
	/*
    class MainClass2
    {
        attribute x : Boolean
        operation mainOperation() : Void is do
            var z : MainClass2  init MainClass2.new
            z.x

        end
    }*/

}