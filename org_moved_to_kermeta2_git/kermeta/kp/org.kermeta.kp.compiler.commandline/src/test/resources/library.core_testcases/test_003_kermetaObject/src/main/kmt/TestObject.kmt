package testPackage;

using kermeta_standard^kermeta::standard::*
using kermeta_standard^kermeta::io::StdIO => stdio
using library_utils^kermeta::kunit::*

class TestObject inherits TestCase{

	operation mainTest():Void is do
		var testRunner:TestRunner init TestRunner.new
		testRunner.run(self.getMetaClass)
		testRunner.printTestResult
       	if(testRunner.log.failures.isNotEmpty or testRunner.log.errors.isNotEmpty or testRunner.log.harnessErrors.isNotEmpty) then
       		raise kermeta::exceptions::Exception.new.initialize("Errors during test execution. See test results for more information.")
       	end
	end
	
	operation testEquals():Void is do
		var n0:NamedElement := NamedElement.new
		var n1:NamedElement := NamedElement.new
		assert(n0==n1)
		n0.name:="n"
		assertFalse(n0==n1)
		n1.name:="n"
		assert(n0==n1)
		
		var o:Object := 3
		var o1:Object := 3
		assert(o==o1)
		o1:=4
		assertFalse(o==o1)
		o1:=3.floatValue
		assert(o==o1)
	end
	
	operation testInvoke():Void is do
		var cd : org::kermeta::language::structure::ClassDefinition init NamedElement.typeDefinition.asType(org::kermeta::language::structure::ClassDefinition)
		var operations : OrderedSet[org::kermeta::language::structure::Operation] init cd.ownedOperation.asOrderedSet 
		var op : org::kermeta::language::structure::Operation
		var args : OrderedSet[Object] init OrderedSet[Object].new
		var n:NamedElement:=NamedElement.new
		
		op :=  operations.detect{op | op.name.equals("init")}
		assert(n.name==void)
		n.invoke(op,args)
		assert(n.name=="")

		op := operations.detect{op|op.name.equals("setName")}
		args.add("tutu")
		n.invoke(op,args)
		assert(n.name=="tutu")
		
		op := operations.detect{op | op.name.equals("getName")}
		args.clear
		assert(n.invoke(op,args)=="tutu")

		// invoke with wrong number of arguments
		args.add("tutu")
		do
			n.invoke(op,args)
			assertWithMsg(false,"Invoke exception 1")
		rescue(e:kermeta::exceptions::RuntimeError)
		rescue(e:kermeta::exceptions::Exception)
			assertWithMsg(false,"Invoke exception 2")
		end

		// invoke with an operation not defined on the target
		args.clear
		op := Dummy.typeDefinition.asType(org::kermeta::language::structure::ClassDefinition).ownedOperation.detect{op|op.name=="dummy"}
		do
			n.invoke(op,args)
			assertWithMsg(false,"Invoke exception 3")
		rescue(e:kermeta::exceptions::RuntimeError)
		rescue(e:kermeta::exceptions::Exception)
			assertWithMsg(false,"Invoke exception 4")
		end
		
		// test that invoke takes into account methodEquivalence
		var s:String := "toto tutu"
		assert(s.split(" ").isInstanceOf(Collection[String]))
		op := String.typeDefinition.asType(org::kermeta::language::structure::ClassDefinition).ownedOperation.detect{op|op.name=="split"}
		args.clear
		args.add(" ")
		assert(s.invoke(op,args).isInstanceOf(Collection[String]))
	end

	operation testIsVoid() : Void is do
		assert(void.isVoid)
		assertFalse(NamedElement.new.isVoid)
		var myObject:MyObject := MyObject.new
		myObject.called:=false
		assert(!myObject.isVoid)
		assert(myObject.called)
	end
	
	operation testHashCode():Void is do
		var myObject:MyObject := MyObject.new
		myObject.called:=false
		assert(myObject.hashCode==1)
		assert(myObject.called)
	end	

	operation testOid():Void is do
		var myObject:MyObject := MyObject.new
		myObject.called:=false
		myObject.oid
		assert(myObject.called)
	end
	
	operation testIsNotEqual():Void is do
		var myObject:MyObject := MyObject.new
		myObject.called:=false
		assert(myObject!=MyObject.new)
		assert(myObject.called)
		
		var n0:NamedElement := NamedElement.new
		var n1:NamedElement := NamedElement.new
		assertFalse(n0 != n1)
		n0.name:="n"
		assert(n0 != n1)
		n1.name:="n"
		assertFalse(n0 != n1)
		
		var o:Object := 3
		assert(o!=4)
		assertFalse(o!=3)
		
		o:= "toto"
		assert(o!="tutu")
		assertFalse(o!="toto")
	end
	
	operation testToString() : Void is do
		assert(void.toString=="void")
		var n:NamedElement := NamedElement.new
		assert(n.toString==void)
		n.name := "n"
		assert(n.toString=="n")
	end
	
	operation testIsInstanceOf():Void is do
		assert(A.new.isInstanceOf(A))
		assert(B.new.isInstanceOf(B))
		assert(B.new.isInstanceOf(A))
		var o:Object:=B.new
		assert(o.isInstanceOf(A))
		assert(o.isInstanceOf(B))
		o:= A.new
		assert(o.isInstanceOf(Object))
		assert(o.isInstanceOf(A))
		assertFalse(o.isInstanceOf(B))

		assert(3.isInstanceOf(Integer))
		assert(3.isInstanceOf(Numeric[Integer]))
		assert("toto".isInstanceOf(String))
		assert("toto".isInstanceOf(Object))
		assert(3.isInstanceOf(Object))
		assertFalse("toto".isInstanceOf(Integer))
		
		o := "toto"
		assert(o.isInstanceOf(String))
		o:=3
		assert(o.isInstanceOf(Integer))
		assertFalse(o.isInstanceOf(String))
		
		var i:Integer := 3
		assert(i.isInstanceOf(Integer))
		assert(i.isInstanceOf(Numeric[Integer]))
		assertFalse(i.isInstanceOf(Double))
	end
	
	operation testAsType():Void is do
		var o:Object := "toto"
		var s:String := o.asType(String)
		assert(s=="toto") // forces evaluation of s, to avoid scala lazy cast weirdness
		
		o := "toto".asType(Object)
		assert(o=="toto")
		o := "toto".asType(String)
		assert(o=="toto")
	end
	
	operation testIsDirectInstanceOf():Void is do
		assert(A.new.isDirectInstanceOf(A))
		assert(B.new.isDirectInstanceOf(B))
		assertFalse(B.new.isDirectInstanceOf(A))
		
		assert(3.isDirectInstanceOf(Integer))
		assertFalse(3.isDirectInstanceOf(Numeric[Integer]))

		var o:Object := "toto"
		assert(o.isDirectInstanceOf(String))
		
		var i:Integer := 3
		assert(i.isDirectInstanceOf(Integer))
	end
}