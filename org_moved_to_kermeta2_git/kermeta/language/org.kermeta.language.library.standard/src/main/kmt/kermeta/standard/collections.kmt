/* *************************************************
 * $Id: collections.kmt,v 1.62 2009-02-16 15:55:49 cfaucher Exp $
 * Franck FLEUREY - 14/02/2005 
 * Triskell Research Group
 * IRISA / University of Rennes 1 (France)
 * Distributed under the terms of the EPL licence
 *
 * Implementation of Kermeta collection types.
 *************************************************** */

/**
 * Defines Collection types 
 * <img src="./figures/collections_view.png"/>
 */

using ^org::kermeta::language::structure::*
using ^kermeta::exceptions::*


package kermeta{
package standard{



/**
 * TODO : miss operations 
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.standard.Map"
abstract class Map[K,V] 
{
}
/**
 * Collection is the root abstract class for all kermeta collections
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.standard.Collection"
abstract class Collection[G] 
{
	/**
	 * Adds an element in the Collection (default implementation)
	 */
	operation add(element : G) : Void is do
	end
	
	/**
	 * Adds an element in the Collection if it is of compatible with the collection content
	 */
	operation addSafe(element : Object) : Void is do
	end
	
	/**
	 * Removes all instances of element from the Collection, based on
	 * G.equals(Object) definition
	 */
	operation remove(element : G) : Void 
	is do


	end
	
	/**
	 * Removes all elements from the Collection
	 */
	operation clear() : Void is do


	end
	
	/**
	 * Adds all elements from the Collection elements in the current Collection
	 * Standard implementation relies on Collection[G].add(G)
	 */
	operation addAll[T:G](elements : Collection[T]) : Void is do


	end
	
	/**
	 * Returns a Boolean stating whether the Collection contains at least one
	 * instance of element, based on G.equals(elt : Object) definition
	 * Note: for checking whether a physical element is contained by the collection,
	 * make use of G.oid()
	 */
	operation contains(element : G) : Boolean is do


	end
	
	/**
	 * OCL API alignment, does the same as contains
	 * See Collection<G>.contains(Object)
	 * Standard implementation relies on Collection[G].contains(G)
	 */
	operation includes(element :G): Boolean is do


	end
	
	/**
	 * Returns true if current Collection contains at least one instance 
	 * of each element of Collection elements
	 * See Collection[G].contains(G)
	 * Standard implementation relies on Collection[G].contains(G)
	 */
	operation containsAll(elements : Collection[G]) : Boolean is do

	end
	
	/**
	 * OCL API alignment, does the same as containsAll
	 * See Collection<G>.containsAll(Collection[G])
	 * Standard implementation relies on containsAll
	 */
	operation includesAll(elements : Collection[G]) : Boolean is do

	end
	
	/**
	 * Returns true if the Collection does not contain element
	 */
	operation excludes(element : G) : Boolean is do

	end
	
	/**
	 * Returns true if the Collection contains no element of Collection elements
	 * Standard implementation relies on excludes
	 */
	operation excludesAll(elements : Collection[G]) : Boolean is do

	end
	
	/**
	 * Returns the number of elements in the Collection
	 */
	operation size() : Integer is do

	end
	
	/**
	 * Returns a Boolean stating whether the Collection is empty
	 */
	operation empty() : Boolean is do

	end
	
	/**
	 * OCL alignment API, does the same as empty
	 * See Collection[G].empty()
	 * Standard implementation relies on Collection[G].empty())
	 */
	operation isEmpty() : Boolean is do

	end
	
	/**
	 * OCL alignment API
	 * Returns a Boolean stating whether the Collection contains at least
	 * one element 
	 * See also Collection[G].empty()
	 * Standard implementation relies on Collection[G].empty()
	 */
	operation isNotEmpty() : Boolean is do

	end
	
	/**
	 * Returns an Iterator on the Collection
	 */
	operation iterator() : Iterator[G] is do

	end
	
	/**
	 * Returns an element from the Collection or void if the Collection is empty
	 */
	operation one() : G is do

	end

	/**
	 * Returns an element from the Collection
	 * Raises an EmptyCollection exception if the Collection is empty
	 */
	operation any() : G is do

	end
	
	/**
	 * Runs function func on each element of the Collection.
	 * Each is safe against concurrent modifications: even if the collection is modified by the function func,
	 * the iteration will procede on the original collection safely.
	 * 
	 * Example : 
	 * aCollection.each { e | \/* do something with each element e of this collection *\/ }
	 */
	operation each(func : <G -> Object>) : Void is do

	end
	
	/**
	 * Runs function func on each element of the Collection.
	 * The EachContext variable contains informations about the process that can be used in the function func.
	 * The iteration order is guaranteed only for ordered collections.
	 * IndexedEach is safe against concurrent modifications: even if the collection is modified by the lambda func,
	 * the iteration will procede on the original collection safely.
	 *
	 * Typical use:  
	 * aCollection.indexedEach { e, eachContext | 
	 *	stdio.write("element "+ eachContext.index.toString + ": " + e.toString)
	 *  if(!eachContext.isLast) then stdio.writeln(",") end 
	 * }
	 * This example prints every element of the collection with its rank and adds a comma at the end of the line
	 * only if it is relevant.
	 *
	 * See also EachContext.
	 */
	operation indexedEach(func : <[G , EachContext] -> Object>) : Void is do

	end
	
	/**
	 * Returns a Boolean stating whether no element of the Collection invalidates
	 * the condition specified by function func
	 * example : 
	 * aBoolean := aCollection.forAll { e | \/* put here a condition *\/ } // return true if the condition is true for all elements in the collection.
	 */
	operation forAll(func : <G -> Boolean>) : Boolean is do

	end
     
	/**
	 * Combinaison of ForAll on two elements in the collection 
	 * result := self.forAll{x | self.forAll {y | f(x,y)}}
	 * (where x and y are 2 elements of the Collection)
	 * typical use sample : ownedState.forAllCpl{s1,s2| (s1.name==s2.name).implies(s1==s2)}
	 */
	operation forAllCpl(f : < [G, G] -> Boolean> ) : Boolean is do

	end 

    /**
	 * Returns a Boolean stating whether at least one element of the Collection
	 * validates the condition specified by function func
	 * example :
	 * aBoolean := aCollection.exists { e | \/* a condition *\/} // returns true if at least one element fulfill the condition.
	 */
	operation exists(func : <G -> Boolean>) : Boolean is do
    	
	end
	
	/**
	 * Combinaison of exists on two elements in the collection
	 * result := self.exists{x | self.exists {y | f(x,y)}}
	 */
	operation existsCpl(f : < [G, G] -> Boolean> ) : Boolean is do

	end 

	/**
	 * Returns a new Sequence which content corresponds to the result
	 * of running the collector function for each element of the Collection
	 * The new collection size is the same as in the original collection, and which element types is the type of the result of the expression.
	 * example :
	 * aCollection2 := aCollection.collect { e | \/* put here an expression, for example e.name *\/ } 
	 */
	operation collect[T] (collector : <G -> T>) : Sequence<T> is do
	
	end
	
	/**
	 * Returns a Boolean stating whether the collector function evaluates to a
	 * different value for each element of the Collection
	 * example :
	 * aCollection2 := aCollection.isUnique { e | \/* put here an expression that must be unique for all elements, for example e.name *\/ }
	 */
	operation isUnique[T] (collector : <G -> T>) : Boolean is do
	
	end
	
	/**
	 * Returns an element of the Collection (usually the first) for which the detector function
	 * is true
	 * Returns void if no elements is validated by the detector function
	 * example : 
	 * anObject := aCollection.detect { e | \/* a condition *\/} // returns an element that fulfill the condition.
	 */
	operation detect(detector : <G -> Boolean>) : G is do
	
	end
		
	/**
	 * Returns a new Sequence composed of elements of the Collection that
	 * validate the selector function
	 * example :
	 * aCollection2 := aCollection.select { e | 
     *    \/* put here a condition that returns true for elements that must  be included in the resulting Collection *\/
	 * }
	 */
	operation select(selector : <G -> Boolean>) : Sequence[G]  is do

	end
	
	/**
	 * Returns a new Sequence containing one element of the Collection that
	 * validates the selector function or an empty Sequence if no element
	 * validates the selector function
	 * example :
	 * aCollection2 := aCollection.selectOne { e | 
     *    \/* put here a condition that returns true for the element that must  be included in the resulting Collection *\/
	 * }
 	 */
 	operation selectOne(selector : <G -> Boolean>) : Sequence[G]  is do
 	
 	end
	
	/**
	 * Returns a new Sequence composed of elements of the Collection that
	 * do not validate the rejector function
	 * example :
	 * aCollection2 := aCollection.reject { e | 
     *     \/* put here a condition that returns true for elements that must  be exclude in the resulting Collection *\/
     * }
	 */
	operation reject(rejector : <G -> Boolean>) : Sequence[G]  is do

	end
	
	/**
	 * Returns the number of instances of element in the Collection
	 */
	operation count(element : G) : Integer is do

	end
	
	/**
	 * Sum the elements of the collection if they are summable (ie implement '+' operator by inheriting of the class Summable).
	 * Returns void otherwise.
	 */
	operation sum(): G is do

	end
		
	/**
	 * Returns a new Bag built from the Collection
	 */
	operation asBag() : Bag[G] is do

	end
	
	/**
	 * Returns a new Set built from the Collection
	 */
	operation asSet() : Set[G] is do

	end
	
	/**
	 * Returns a new Sequence built from the Collection and filtering only the elements of type Y
	 * This is a more efficient version of 
	 * e.select{ elem | elem.isInstanceOf(Y) }.collect{elem | elem.asType(Y) }
	 */
	operation asSequenceType[Y]() : Sequence[Y] is do 
		
	end

	/**
	 * Returns a new OrderedSet built from the Collection
	 */
	operation asOrderedSet() : OrderedSet[G] is do

	end

	/**
	 * Returns a new Sequence built from the Collection
	 */
	operation asSequence() : Sequence[G] is do

	end
	
}


/**
 * A Set is a non-ordered collection that contains distinct elements
 * (with regards to the G.equals(Object) operation)
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.standard.Set"
class Set[G] inherits Collection[G]
{
	/**
	 * Overrides Collection[G].add(G)
	 * Adds element to the Set if it is not already contained by the
	 * Set, does nothing otherwise
	 */
	operation add(element : G) : Void is do

	end

	/**
	 * Overrides Collection[G].remove(G)
	 * Removes the element from the Set if it is contained by the Set
	 */
	operation remove(element : G) : Void is do

	end

	/**
	 * Overrides Object.equals(Object)
	 * Returns a Boolean stating whether the provided element is equal to
	 * the current Set
	 * The provided element is equal to the current Set if:<ul>
	 * <li> it is not an OrderedColllection</li>
	 * <li> it is a Collection (not necessarily a Set)</li>
	 * <li> it contains exactly the same elements than the current Set, 
	 *    with the same multiplicity</li>
	 * </ul>
	 */
	operation equals(element : Object) : Boolean is do

	end
	
	/**
	 * Overrides Collection[G].count(G)
	 * Returns the number of instances of element in the Set
	 */
	operation count(element : G) : Integer is do

	end
	
	/**
	 * Returns a new Set corresponding to the union of the Set elements
	 * with the current Set
	 */
	operation union(elements : Set[G]) : Set[G] is do

	end
	
	/**
	 * Returns a new Bag corresponding to the union of the Bag elements
	 * with the current Set
	 */
	operation unionWithBag(elements : Bag[G]) : Bag[G] is do

	end
	
	/**
	 * Returns a new Set corresponding to the intersection of the Set elements
	 * with the current Set
	 */
	operation intersection(elements : Collection[G]) : Set[G] is do

	end
	
	/**
	 * Returns a new Set corresponding to the difference between the
	 * current Set and the Set elements, ie all elements contained by 
	 * the current Set that do not appear in the elements Set 
	 */
	operation minus(elements : Set[G]) : Set[G] is do

	end
	
	/**
	 * Overrides Collection[G].asSet()
	 * Returns a new Set composed of all elements of current Set
	 * More efficient version of Set[G].new.addAll(self)
	 */
	operation asSet() : Set[G] is do

	end
	
	/**
	 * Overrides Collection[G].asOrderedSet()
	 * Returns a new OrderedSet that contains all elements of current Set
	 * More efficient version of OrderedSet[G].new.addAll(self)
	 */
	operation asOrderedSet() : OrderedSet[G] is do

	end

	/**
	 * Returns a new Set which contents corresponds to the symmetric
	 * difference between current Set and Set s, ie all elements of
	 * each Set that do not appear in the other one
	 */
	operation symmetricDifference(s : Set[G]) : Set[G] is do

	end
	
	/**
	 * Returns a new Set which content includes all non-Collection elements
	 * of the current Set, and, for each Collection element of the current
	 * Set, as many elements as the Collection contains
	 * Duplicates are removed
	 */
	operation flatten() : Set[Object] is do

	end
	
	/**
	 * Returns an ordered set of the set elements sorted using the given comparator.
	 * The comparator must return an integer n such that<ul>
	 *   <li>n &gt; 0 if the second [G] element is greater than the first</li> 
	 *   <li>n == 0 if the second [G] element equals the first</li> 
	 *   <li>n &lt; 0 if the second [G] element is lower than the first</li>
	 * </ul>
	 */
	operation sortedBy(comparator : <[G, G] -> Integer>) : OrderedSet[G]  is do

	end
}


/**
 * Bag is a concrete non-ordered Collection allowing duplicates
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.standard.Bag"
class Bag[G] inherits Collection[G]
{
	/**
	 * Overrides Object.equals(elt : Object)
	 * Returns a Boolean stating whether the provided element is equal to
	 * current Bag.
	 * The provided element is equal to the current Bag if:<ul>
	 * <li> it is not an OrderedCollection</li>
	 * <li> it is a Collection (not necessarily a Bag) </li>
	 * <li> it contains exactly the same elements than the current Bag,
	 *   with the same multiplicity</li>
	 * </ul>
	 */
	operation equals(element : Object) : Boolean is do

	end

	/**
	 * Returns a new Bag corresponding to the union of elements and
	 * current Bag
	 */
	operation union(elements : Collection[G]) : Bag[G] is do

	end
	
	/**
	 * Returns a new Bag corresponding to the intersection of elements
	 * and the Bag
	 */
	operation intersection(elements : Collection[G]) : Bag[G] is do

	end
	
	/**
	 * Returns a new Set corresponding to the intersection of a Set of
	 * elements and the Bag
	 */
	operation intersectionWithSet(elements : Set[G]) : Set[G] is do

	end
	
	/**
	 * Removes the element identified by the provided Oid from the Bag
	 */
	operation removeFromOid(element : G) : Void 
	is do

	end
	
	/**
	 * Removes one instance of element from the Bag
	 */
	operation removeOne(element : G) : Void is do

	end
	
	/**
	 * Returns a new Bag which content includes the content of the
	 * current Bag and the element object
	 */
	operation including(object :G) : Bag[G] is do

	end

 	/**
	 * Returns a new Bag which content includes the content of the
	 * current Bag from which all instances of object have been
	 * removed
 	 */
	operation excluding(object :G) : Bag[G] is do

	end
	
	/**
	 * Returns a new Bag which content includes all non-Collection elements
	 * of the current Set, and, for each Collection element of the current
	 * Bag, as many elements as the Collection contains
	 */
	operation flatten() : Bag[Object] is do

	end
	
	/**
	 * Returns a sequence of the bag elements sorted using the given comparator.
	 * The comparator must return an integer n such that<ul>
	 *   <li>n &gt; 0 if the second [G] element is greater than the first</li> 
	 *   <li>n == 0 if the second [G] element equals the first</li> 
	 *   <li>n &lt; 0 if the second [G] element is lower than the first</li>
	 * </ul>
	 */
	operation sortedBy(comparator : <[G, G] -> Integer>) : Sequence[G]  is do

	end
	
}


/**
 * An OrderedCollection is the root abstract class for all ordered Collections.
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.standard.OrderedCollection"
abstract class OrderedCollection[G] inherits Collection[G] {
	
	/**
	 * Adds element in the OrderedCollection at rank index
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedCollection
	 */
	operation addAt(index : Integer, element : G) : Void is do

	end
	
	/**
	 * Removes the element at rank index from the OrderedCollection
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedCollection
	 */
	operation removeAt(index : Integer) : Void is do

	end
	
	/**
	 * Returns the element at rank index in the OrderedCollection
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedCollection
	 */
	operation elementAt(index : Integer) : G is do

	end
	
	/** 
	 * Returns the first element in the OrderedCollection
	 * Raises an EmptyCollection exception if the OrderedCollection is empty
	 */
	operation first() : G is do

	end
	
	/**
	 * Returns the last element in the OrderedCollection
	 * Raises an EmptyCollection exception if the OrderedCollection is empty
	 */
	operation last() : G is do

	end

	/**
	 * Overrides Object.equals(Object)
	 * Returns a Boolean stating whether the provided element is equal to
	 * current OrderedCollection
	 */
	operation equals(element : Object) : Boolean is do

	end
	
	/** 
	 * Returns the index of the first instance of element in the OrderedCollection
	 * or -1 if the element is not contained by the OrderedCollection
	 */
	operation indexOf(element : G) : Integer is do

	end

	/**
	 * Returns element at rank index in the OrderedCollection
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedCollection
	 */
	operation at(index : Integer) : G is do

	end
}


/**
 * An OrderedSet is a Set that contained ordered distinct elements
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.standard.OrderedSet"
class OrderedSet[G] inherits Set[G], OrderedCollection[G]
{
	/**
	 * Overrides OrderedCollection<G>.addAt(Integer, G)
	 * Adds element in the OrderedSet at rank index if the ordered set does
	 * not already contain the element, does nothing otherwise
	 */
	operation addAt(index : Integer, element : G) : Void is do

	end
	
	/**
	 * See OrderedCollection<G>.equals(Object) 
	 */
	operation equals(element : Object) : Boolean is do

	end
	
	/**
	 * Builds and returns a new OrderedSet composed of elements of current ordered
	 * set from rank min (included) to rank max (excluded).
	 * The order is preserved.
	 * Raises IndexOutOfBound exception if min is negative, max is larger than 
	 * the size of the ordered set or min is larger than max
	 */
	operation subSet(min : Integer, max : Integer) : OrderedSet[G] is do

	end

	/**
	 * Builds and returns a new OrderedSet from current one with element
	 * inserted in tail if not already present, otherwise returns 
	 * a copy of the current OrderedSet
	 */
	operation append(element : G ) : OrderedSet[G] is do

	end
	
	/**
	 * Builds and returns a new OrderedSet from current one with element
	 * inserted in head if not already present, otherwise returns 
	 * a copy of the current OrderedSet
	 */
	operation prepend(element : G ) : OrderedSet[G] is do

	end
	
	/**
	 * Builds and returns a new OrderedSet from current one with element
	 * inserted at rank index if it not already present, otherwise returns 
	 * a copy of the current OrderedSet
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedSet
	 */
	operation insertAt(index : Integer, subject : G ) : OrderedSet[G] is do

	end
	
}


/**
 * A Sequence is an OrderedCollection of elements allowing duplicates
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.standard.Sequence"
class Sequence[G] inherits Bag[G], OrderedCollection[G]
{
	/**
	 * Overrides OrderedCollection[G].equals(Object)
	 * Returns a Boolean stating whether the provided element is equal to
	 * current Sequence	
	 */
	operation equals(element : Object) : Boolean is do

	end
	
	/**
	 * Builds and returns a new Sequence composed of elements of current sequence
	 * from rank min (included) to rank max (excluded). 
	 * The order is respected.
	 * Raises IndexOutOfBound exception if min is negative, max is larger than 
	 * the size of the sequence or min is larger than max
	 */
	operation subSequence(min : Integer, max : Integer) : Sequence[G] is do

	end
	
	/**
	 * Builds and returns a new Sequence from current one with element
	 * inserted at rank index
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedSet
	 */	
	operation insertAt(index : Integer, element : G) : Sequence[G] is do

	end
	
	/**
	 * Builds and returns a new Sequence from current one with element
	 * inserted in tail
	 */
	operation append(element : G ) : Sequence[G] is do

	end
	
	/**
	 * Builds and returns a new Sequence from current one with element
	 * inserted in head
	 */
	operation prepend(element : G ) : Sequence[G] is do

	end
}


/**
 * Iterator to be used with Collection
 * See also Collection<G>.iterator()
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.standard.Iterator"
class Iterator<G>
{
	/**
	 * Returns true if the iterator is on the last element
	 * i.e. returns not self.hasNext()
	 */
	operation isOff() : Boolean is do


	end
	
	/**
	 * Returns true if the iterator has a next element
	 */
	operation hasNext() : Boolean is do


	end
	
	/**
	 * Returns the next element of the iterator
	 * Raises IteratorIsOff exception in case the iterator is on the last element 
	 */
	operation next() : G is do


	end
}

/**
 * Contains informations about the iteration process in an indexedEach. 
 * The index attribute gives the number of element iterated over so far, starting with 0.
 * The isFirst and isLast attributes say if the currently iterated element is the first or the last.
 * The initialize operation is used by indexedEach and shouldn't be used generally speaking.
 * 
 * See also Collection[G].indexedEach
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.standard.EachContext"
class EachContext {
	attribute index : Integer
	attribute isFirst : Boolean
	attribute isLast : Boolean
	operation initialize(i : Integer, first : Boolean, last : Boolean) : EachContext is do

	end
}

}


}
