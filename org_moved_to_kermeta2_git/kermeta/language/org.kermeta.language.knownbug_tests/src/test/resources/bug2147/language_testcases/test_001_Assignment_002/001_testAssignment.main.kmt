
using kermeta::standard
using kermeta::io::StdIO => stdio

package testAssignment {







// An enumeration for Test_assignment_behavior::testAssignmentEnum
enumeration AccesVariableEnumeration
{
	accPublic;
	accPrivate;
}

class ATest 
{
	reference a : AccesVariableEnumeration
}

class ATestAttr
{
	attribute a : AccesVariableEnumeration
}

class B
{
	attribute name : kermeta::standard::String
}

class C
{
	attribute attr_name1 : kermeta::standard::String
	attribute attr_name2 : kermeta::standard::String
}


class TestAssignmentEnum   inherits kermeta::kunit::TestCase
{

	@main "main"
	operation main() : kermeta::standard::Void is do 
		//Assignment of Enum as reference
		testAssignmentEnumAsReference() 
		
		//Assignment of Enum as variable
		testAssignmentEnumAsVariable() 
		
		//Assignment of Enum as attribute
		 testAssignmentEnumAsAttribute() 
		
		
	end
	
	
	//Assignment of Enum as reference
	operation testAssignmentEnumAsReference() : Void is do 
   		var atest : ATest init ATest.new
	    stdio.writeln("accPublic before assignment: " + AccesVariableEnumeration.accPublic.~enumeration.toString)	    				
   	    assert(AccesVariableEnumeration.accPublic.~enumeration != void)
	    atest.a := AccesVariableEnumeration.accPublic
	    assert(AccesVariableEnumeration.accPublic.~enumeration != void)
	    assert(atest.a.~enumeration != void)
  		stdio.writeln("Assignment of Enum as reference is done")
	end
		
	//Assignment of Enum as variable
	operation testAssignmentEnumAsVariable() : Void is do 
	    var acc : AccesVariableEnumeration
	    stdio.writeln("accPublic before assignment: " + AccesVariableEnumeration.accPublic.~enumeration.toString)	    				
   	    assertTrueWithMsg(AccesVariableEnumeration.accPublic.~enumeration != void, "accPublic.enumeration should Not be Void")
	    acc := AccesVariableEnumeration.accPublic
	    assertTrueWithMsg(AccesVariableEnumeration.accPublic.~enumeration != void,  "accPublic.enumeration is Void")
	    assert(acc.~enumeration != void)
	    stdio.writeln("Assignment of Enum as variable is done")
	end
	
	//Assignment of Enum as attribute
	operation testAssignmentEnumAsAttribute() : Void is do 
   		var atest : ATestAttr init ATestAttr.new
	    stdio.writeln("accPublic before assignment: " + AccesVariableEnumeration.accPublic.~enumeration.toString)	    				
   	    assertTrueWithMsg(AccesVariableEnumeration.accPublic.~enumeration != void, "accPublic.enumeration is Not Void")
	    atest.a := AccesVariableEnumeration.accPublic
	    assertTrueWithMsg(AccesVariableEnumeration.accPublic.~enumeration != void,  "accPublic.enumeration is Void")
	    assert(atest.a.~enumeration != void)
   		stdio.writeln("Assignment of Enum as attribute is done")
	end
}

}
