using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::io::FileIO
using org::kermeta::language::structure::*
using org::kermeta::language::behavior::*
using kermeta::emfpersistence::*
using kermeta::utils::*
  

package org::kermeta::language::structure{




aspect class TypeDefinition {
	
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		result := ""
		end
	/** Create classes html code */
	operation createClassesHtml (baseFolder:String, excludePackages : String) : String is do
		result:=""
	end
	/** generate html for contents page */
	operation generateClassesHtml (baseFolder:String, packageName:String) : String is do
		result :=""
	end
}


aspect class ClassDefinition{
	/** Create html code */
	operation createClassesHtml (baseFolder:String, excludePackages : String) : String is do
			var html : String init String.new	
			html := html + " <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>"
			result := html
    end
    
    /** generate html for contents page */
	operation generateClassesHtml (baseFolder:String, packageName : String) : String is do
	
	var path : String init baseFolder + "/" + self.name + ".html"
	var contents : StringBuffer init StringBuffer.new
	contents.append("<html><head><title>" + self.name  + "</title></head>\n")
	contents.append("<body BGCOLOR = white>")
		
	
	
	//Start of class data
	contents.append("<H2>\n")
	contents.append("<FONT SIZE=-1>\n")
	contents.append(packageName + "</FONT>\n")
	contents.append("<BR>\n")
	contents.append("Class ")
	
	
	
	if isAbstract == true then
		contents.append("Abstract ")
	end
	if isSingleton == true then
		contents.append("Singleton ")
	end
	
	contents.append(self.name)
	//this code fragment is to show the type parameters of the Classes
	if self.typeParameter.size != 0 then
	contents.append("[")
	self.typeParameter.indexedEach{e, eachContext| 
						if eachContext.isLast then
							contents.append(e.name)
						else
							contents.append(e.name + ", ")
						end
						}
						
	contents.append("]")
	end
	
	contents.append("<FONT SIZE = 4 color = bleu> inherited from  </FONT>")
	self.superType.indexedEach{e, eachContext| 
								if eachContext.isLast then
									//contents.append(e.getClassname)
									contents.append(" <a href= " + e.getTypeDef + ".html target = Content> " + e.getClassname + "  </a>" + " <br>")
								else
									//contents.append(e.getClassname + ", ")
									contents.append(" <a href= " + e.getTypeDef + ".html target = Content> " + e.getClassname + ", " +  "</a>" + " <br>")
									
								end
								}
	//contents.append(self.superType.typeDefinition.name)
	contents.append("<HR>\n")
	
		//specification of classes, get tag properties
	
		
	self.kTag.each{tag | 
		if tag.name == "documentation" then
			contents.append(tag.~value + "\n")
		else 
			contents.append("@")
			contents.append(tag.name)
			self.superType.each{e| contents.append(e.getname)}
			contents.append(" \"")
			contents.append(tag.~value)
			contents.append("\"<BR>\n")
		end
	}
	
	// Method Summury
	if ownedOperation.size != 0 then
		contents.append("<A NAME=method_summary><!-- --></A>\n")
		contents.append("<TABLE BORDER=1 WIDTH=100% CELLPADDING=3 CELLSPACING=0 SUMMARY=>\n")
		contents.append("<TR BGCOLOR=#CCCCFF>\n")
		contents.append("<TH ALIGN=left COLSPAN=2><FONT SIZE=+2>\n")
		contents.append("<B>Method Summary</B></FONT></TH>\n")
		contents.append("</TR>\n")
		// list of operations
		ownedOperation.each{oa | contents.append(oa.createCodeHtml(self.name))}
		contents.append("</TABLE>\n")
		
	end
	            
// Field Summury
	if ownedAttribute.size != 0 then
	contents.append("<A NAME=field_summary><!-- --></A>\n")
	contents.append("<TABLE BORDER=1 WIDTH=100% CELLPADDING=3 CELLSPACING=0 SUMMARY=>\n")
	contents.append("<TR BGCOLOR=#CCCCFF>\n")
	contents.append("<TH ALIGN=left COLSPAN=2><FONT SIZE=+2>\n")
	contents.append("<B>Property Summary</B></FONT></TH>\n")
	contents.append("</TR>\n")
	// list of properties
	ownedAttribute.each{oa | contents.append(oa.createCodeHtml(self.name))}
	//end of Field Summury
	contents.append("</TABLE>\n")
	end
			
	if ownedOperation.size !=0 then
		contents.append("<HR>")
		contents.append("<FONT SIZE=+2> <B> Details of properties and operations </B></FONT></TH>\n")
		contents.append("<HR>")
	// list of property detail
		ownedOperation.each{oa | contents.append(oa.createOperationDetail())}
	end
	
	contents.append("</body></html>\n")
	FileIO.writeTextFile(path.toURI(), contents.toString)
	result := ""
end
}

aspect class Type {
	operation getTypeDef() : String is do
	
		var s : String init ""
		
		result:= s
	end
	
	operation getname() : String is do
	
	var s : String init ""
	result:=s
	end
	
	operation getClassname() : String is do
	
	var s : String init ""
	result:=s
	end
}

aspect class ParameterizedType{
	operation getTypeDef() : String is do
		var s : String init ""
		
		result:= s
	end
	
	
}

/*aspect class TypeVariable {
	
	operation getName() : String is do
		
		result := self.name
		//stdio.writeln(typeDefinition.toString)		
	end
	
	
}*/

aspect class Class {
	
	operation getTypeDef() : String is do
		
		result := self.typeDefinition.name
		//stdio.writeln(typeDefinition.toString)		
	end
	
	operation getClassname() : String is do
	
		result:=self.name
	end
}

/*aspect class ObjectTypeVariable {
	
	operation getName() : String is do
		
		result := self.name
		//stdio.writeln(typeDefinition.toString)		
	end
	
	
}*/

/*aspect class ModelTypeVariable {
	
	operation getName() : String is do
		
		result := self.name
		//stdio.writeln(typeDefinition.toString)		
	end
}*/

aspect class UnresolvedType{
	operation getTypeDef() : String is do
		result := self.typeIdentifier		
	end
}

aspect class Property{
/** create html code of a property **/
	operation createCodeHtml(className : String) : String is do
		
		var typeString : String init ""
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.getTypeDef
		end
		
		var html: StringBuffer init StringBuffer.new
		html.append("<TR BGCOLOR=white CLASS=TableRowColor>\n")
		
		html.append("<TD ALIGN=right VALIGN=top WIDTH=1%><FONT SIZE=-1>\n")
		html.append("<CODE>\n")
		html.append(" <a href= " + typeString + ".html target = Content> " + typeString + "  </a>" + " <br>")
		html.append("</CODE></FONT></TD>\n")
		
		
		html.append("<TD><CODE><B><A HREF=" + className +".html target = Content>" + self.name + "</a>" + "<br>")
		html.append("<FONT COLOR=RED> attribute</FONT> ")
		if isReadOnly == true then
			html.append("<FONT COLOR=RED>readonly</FONT> ")
		end 
		html.append(self.name + "[" + lower.toString + ".." + upper.toString + "]" + "</A></B></CODE>\n")
		html.append("<br>")
		self.kTag.each{tag | 
			if tag.name == "documentation" then
				html.append(tag.~value + "<BR>\n")
			else 
				html.append("@")
				html.append(tag.name)
				html.append(" \"")
				html.append(tag.~value)
				html.append("\"<BR>\n")
			end
		}
		//html.append("<BR>\n")
		html.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\n")
		html.append("</TR>\n")
 		result:= html.toString
	end
	
/** creat html code for property detail field */
	operation createPropertyDetail(): String is do 
		var typeString : String init String.new
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.getTypeDef
		end
		var html : StringBuffer init StringBuffer.new
		html.append("<A NAME="+ self.name + "><!-- --></A><H3>\n")
		html.append(self.name +"</H3>\n")
		html.append("<PRE>\n")
		html.append(typeString + "<B> "+ self.name + "</B></PRE>\n")
		html.append(typeString + "<B> " + "isReadOnly </B>: " + self.isReadOnly.toString() + "</PRE>\n")
		html.append("<B> " + "default : </B>" + self.default.toString()+ "</PRE>\n")
		html.append("<B> " + "isComposite: </B>" + self.isComposite.toString()+ "</PRE>\n")
		html.append("<B> " + "isDerived : </B>" + self.isDerived.toString()+ "</PRE>\n")
		html.append("<B> " + "isID : </B>" + self.isID.toString()+ "</PRE>\n")
		html.append("<B> " + "isGetterAbstract :</B>" + self.isGetterAbstract.toString()+ "</PRE>\n")
		html.append("<B> " + "isSetterAbstract :</B>" + self.isSetterAbstract.toString()+ "</PRE>\n")
		html.append("<HR>")
		result:= html.toString
	end	
}

aspect class Operation {
	/** create html code of an Operation **/
	operation createCodeHtml(className : String) : String is do
		var typeString : String init ""
	
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.getClassname
		end
		
		var html: StringBuffer init StringBuffer.new
		html.append("<TR BGCOLOR=white CLASS=TableRowColor>\n")
		html.append("<TD ALIGN=right VALIGN=top WIDTH=1%><FONT SIZE=-1>\n")
		html.append("<CODE>\n")
		html.append(" <a href= " + type.getTypeDef + ".html target = Content> " + typeString + "  </a>" + " <br>")
		
		html.append("</CODE></FONT></TD>\n")
		
		html.append("<TD><CODE><B><A HREF=" + className +".html#" + self.name + ">") 
		html.append(self.name)
		
		if self.typeParameter.size !=0 then
		html.append("[") 
		self.typeParameter.indexedEach{e, eachContext | 
										if eachContext.isLast then
											html.append(e.name)
										else
											html.append(e.name + ", ")
										end
										}
		html.append("]")
		end
		
		html.append("(")
		
			
		
		ownedParameter.indexedEach{op,eachIndex | var paraType : String init String.new
								 if op.type.isVoid then paraType :="<Not Set>"
								 else  
									paraType := op.type.getTypeDef
								 	if eachIndex.isLast then
								 		html.append(paraType)
								 	else
								 		html.append(paraType + ",")				 	
								  	end
								  end
								 	
								 }
		if html.lastIndexOf(",") !=-1 then
			html.deleteCharAt(html.lastIndexOf(","))
		end
		
		html.append(")</A></B></CODE>\n")
		
		self.kTag.each{tag | 
			// print doc only, other annotations are left for the detailled entry
			if tag.name == "documentation" then
				html.append(tag.~value + "\n")
			end
		}	
		html.append("<BR>\n")
		html.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\n")
		html.append("</TR>\n")
 		result:= html.toString
	end
	
	/** creat html code for Operation detail */
	operation createOperationDetail(): String is do 
		var typeString : String init String.new
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.getClassname
		end
		var html : StringBuffer init StringBuffer.new
		html.append("<A NAME="+ self.name + "><!-- --></A><H3>\n")
		html.append(self.name +"</H3>\n")
		html.append("<PRE>\n")
		html.append(typeString + "<B> ")
		if isAbstract == true then
		html.append("<FONT COLOR = RED> Abstract</FONT> ")
		end
		
		html.append(self.name)
		html.append("[")
		if self.typeParameter.size !=0 then
			self.typeParameter.indexedEach{e, eachContext | 
										if eachContext.isLast then
											html.append(e.name)
										else
											html.append(e.name + ", ")
										end
										}
			html.append("]")
		end
		
		html.append("(")
		
		ownedParameter.indexedEach{op,eachIndex | var paraType : String init String.new
								 if op.type.isVoid then paraType :="<Not Set>"
								 else  
									paraType := op.type.getTypeDef
								 	if eachIndex.isLast then
								 		html.append(paraType)
								 	else
								 		html.append(paraType + ",")				 	
								  	end
								  end
								 	
								 }
		if html.lastIndexOf(",") !=-1 then
			html.deleteCharAt(html.lastIndexOf(","))
		end
	//	invConstraint.each{in | html.append("<FONT COLOR = RED>" + in.stereotype.toString() + " "+ in.name + "</FONT>")}
		
		html.append( ")"+ "</B><BR>\n")
		self.kTag.each{tag | 
			if tag.name == "documentation" then
				html.append(tag.~value + "<BR>\n")
			else 
				html.append("@")
				html.append(tag.name)
				html.append(" \"")
				html.append(tag.~value)
				html.append("\"<BR>\n")
			end
		}
		html.append("</PRE>\n")
		html.append("<HR>")
		result:= html.toString
	end	
}

aspect class Constraint {
	/** create html code of an Operation **/
	operation createCodeHtml(className : String) : String is do
		var html: StringBuffer init StringBuffer.new
		html.append("<TR BGCOLOR=white CLASS=TableRowColor>\n")
 		html.append("<TD ALIGN=right VALIGN=top WIDTH=1%><FONT SIZE=-1>\n")
		html.append("<CODE>\n")
		html.append(self.stereotype.toString())
		html.append("</CODE></FONT></TD>\n")
		html.append("<TD><CODE><B><A HREF=" + className +".html#constraint_detail>" + self.name +"</A></B></CODE>\n")
		html.append("<BR>\n")
		html.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\n")
		html.append("</TR>\n")
 
	result:= html.toString
	end
	
	/** creat html code for Operation detail */
	operation createPeropertyDetail(): String is do 
		var html : StringBuffer init StringBuffer.new
		
		result:= html.toString
	end	
}


/*aspect class ModelType {
	// Create html code 
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append(" <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>")
		
		result := html.toString
    end
} */

aspect class PrimitiveType{
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append(" <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>")
    		
    	result:=html.toString
    end
}

aspect class Enumeration{
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append(" <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>")
    	
    	result:=html.toString
    end
}

aspect class Package{
		
	/** Create html code */
	operation createClassesHtml (baseFolder:String, excludePackages : String) : String is do
		var html : StringBuffer init StringBuffer.new	
		
		html.append("<h4>"+self.getQualifiedName()+ "</h4>")
		ownedTypeDefinition.each{otd | html.append(otd.createClassesHtml(baseFolder, excludePackages))
									otd.generateClassesHtml(baseFolder,self.getQualifiedName())
									
		}
		
		
		nestedPackage.each {subPack | 
								if (not excludePackages.contains(subPack.name.trim)) then
									html.append(subPack.createClassesHtml(baseFolder, excludePackages))
								end
								}
		result:=html.toString
    
	end
	
	operation getQualifiedName() : String is do
		var parent : String := ""
		if(not container.isVoid) then
			if(container.isInstanceOf(Package)) then
				parent := container.asType(Package).getQualifiedName() + "::"
			end
		end
		result := parent + name
	end
	
	operation generateCodeForMainToc(baseFolder : String, excludePackages : String) : String is do
	var contents : StringBuffer init StringBuffer.new
	
	ownedTypeDefinition.each{otd | 
							contents.append(" <a href= " +otd.name + ".html> " + otd.name + "  </a>" + " <br>\n")
							}
	
	
	nestedPackage.each{pack | 
						if (not excludePackages.contains(pack.name.trim)) then
							
							contents.append(pack.generateCodeForMainToc(baseFolder, excludePackages))
							
						end
						}

	
	
	result:= contents.toString
	end 
	
	operation generateXmlToc(baseFolder : String, excludePackages : String) : String is do
	var contents : StringBuffer init StringBuffer.new
	
	ownedTypeDefinition.each{otd | 
							contents.append("	<topic label=\"" + otd.name +"\" href = \"" + baseFolder + "/" + otd.name + ".html" + "\">\n")
							contents.append("	</topic>\n")
							}
	
	
	nestedPackage.each{pack | 
						if (not excludePackages.contains(pack.name.trim)) then
							contents.append("	<topic label=\"" + pack.name +"\" href = \"" + baseFolder + "/" + pack.name + ".toc.html" + "\">\n")
							contents.append(pack.generateXmlToc(baseFolder, excludePackages))
							contents.append("	</topic>\n")
						end
						}

	
	
	result:= contents.toString
	end 
	
	operation xmlToc(baseFolder : String, excludePackages : String) : Void is do
	var xml : String init "content of pack.name.toc.htlm"
	end

}

}