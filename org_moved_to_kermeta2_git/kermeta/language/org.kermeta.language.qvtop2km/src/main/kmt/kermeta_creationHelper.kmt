package org::kermeta;


using org::kermeta::language::behavior
using org::kermeta::language::structure
using org::kermeta::language
using kermeta::standard
using kermeta::io
using root_package
package language{

package structure{

	aspect class KermetaModelElement{
	
		operation addDocumentationTag(text:String) : Void is do
			var kTag : org::kermeta::language::structure::Tag init org::kermeta::language::structure::Tag.new
			kTag.name:="documentation"
			kTag.~value:=text
			self.kOwnedTags.add(kTag)
			self.kTag.add(kTag)
		end
	
	}
	
	aspect class Type {
		operation generateTypeRef() : org::kermeta::language::behavior::TypeReference is abstract
	
	}
	
	aspect class UnresolvedType {
	
		operation initialize(ti : String) : UnresolvedType is do
			result:=self
			self.typeIdentifier:=ti
		
		end
	
		method generateTypeRef() : org::kermeta::language::behavior::TypeReference is do
			result:=org::kermeta::language::behavior::TypeReference.new
			result.lower:=0
			result.upper:=1
			result.isUnique:=true
			result.type:=self
			result.containedType.add(self)
			
		
		end
		//TODO this doesn't allow to use parameterized type as parameter
		operation generateParameterizedTypeRef(parameter : ClassDefinition) : org::kermeta::language::behavior::TypeReference is do
			result:= generateTypeRef()
			
			//var varBinding : TypeVariableBinding init TypeVariableBinding.new
			//result.type.asType(ParameterizedType).typeParamBinding.add(varBinding)
			//varBinding.variable:=self.typeParameter.one
			var paramType : Class init Class.new
			paramType.typeDefinition:=parameter
			
			//varBinding.type:=paramType
			self.generics.add(paramType)
			self.containedType.add(paramType)
			//varBinding.containedType.add(paramType)
		
		end
	}
	
	aspect class Class{
	
		method generateTypeRef() : org::kermeta::language::behavior::TypeReference is do
			result:=org::kermeta::language::behavior::TypeReference.new
			result.lower:=0
			result.upper:=1
			result.isUnique:=true
			result.type:=self
			result.containedType.add(self)
			result.name:=self.name
		
		end
		
		operation cloneClass() : Class is do
			
			result:=Class.new
			result.typeDefinition:=typeDefinition
			typeParamBinding.each{binding|
				var newBinding : TypeVariableBinding init TypeVariableBinding.new
				result.typeParamBinding.add(newBinding)
				if binding.type.isInstanceOf(Class) then
					newBinding.type:=binding.type.asType(Class).cloneClass()
					newBinding.containedType.add(newBinding.type)
				else
					newBinding.type:=binding.type
				end
				newBinding.variable:=binding.variable
			}
		
		end
		
	}
	
	aspect class ClassDefinition {
	
		/** at the end of the transformation a classdef is considered as useless if it's an aspect and no attributes or operation have been added
		
		*/
		operation isUseless() : Boolean is do
			result:=isAspect and ownedAttribute.isEmpty and ownedOperation.isEmpty
			
		end
		operation generateTypeRef() : org::kermeta::language::behavior::TypeReference is do
			result:=org::kermeta::language::behavior::TypeReference.new
			result.lower:=0
			result.upper:=1
			result.isUnique:=true
			var c : org::kermeta::language::structure::Class init org::kermeta::language::structure::Class.new
			c.typeDefinition:=self
			result.type:=c
			result.containedType.add(c)
			result.name:=c.name

		end
		
		//TODO this doesn't allow to use parameterized type as parameter
		operation generateParameterizedTypeRef(parameter : ClassDefinition) : org::kermeta::language::behavior::TypeReference is do
			result:= generateTypeRef()
			
			var varBinding : TypeVariableBinding init TypeVariableBinding.new
			result.type.asType(ParameterizedType).typeParamBinding.add(varBinding)
			varBinding.variable:=self.typeParameter.one
			var paramType : Class init Class.new
			paramType.typeDefinition:=parameter
			
			varBinding.type:=paramType
			varBinding.containedType.add(paramType)
		
		end
	}
	
	aspect class Package {
	
		operation removeEmptyClasses() is do
			
			var toRemove : Collection[TypeDefinition] init ownedTypeDefinition.select{td|td.isInstanceOf(ClassDefinition).andThen{x|td.asType(ClassDefinition).isUseless}}
			toRemove.each{x|ownedTypeDefinition.remove(x)}
			nestedPackage.each{p|p.removeEmptyClasses}
		
		end
	
	}
	
	aspect class PrimitiveType {
		method generateTypeRef() : org::kermeta::language::behavior::TypeReference is do
			result:=org::kermeta::language::behavior::TypeReference.new
			result.lower:=0
			result.upper:=1
			result.isUnique:=true
			result.type:=self
			result.name:=self.name
		end
	
	
	}
}


package behavior {
	aspect class CallVariable {
	
		operation initName(n : String) : org::kermeta::language::behavior::CallVariable is do
			name:=n
			result:=self
		end
	}
	
	aspect class UnresolvedCall {
	
		
		
		
		operation initialize (name : String , isCalledWithParenthesis:Boolean): UnresolvedCall is do
			result:=self
			self.isCalledWithParenthesis := isCalledWithParenthesis
			self.name:=name
		
		end
		
		
		operation createProxySequence(t: Type) : behavior::UnresolvedCall is do
			result:=self
			self.name:="asSequenceType"
			self.generics.add(t)
			self.containedType.add(t)
		
		end
	
	}

}

}
