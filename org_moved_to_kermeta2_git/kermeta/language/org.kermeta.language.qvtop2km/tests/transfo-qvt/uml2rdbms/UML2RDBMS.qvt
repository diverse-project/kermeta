--metamodel SimpleUml {
-- class Classifier {
--    name : String;
--  }
--  class Attribute {
--    name : String;
--    kind : String;
--    type : Classifier;
--  }
--  class Class extends Classifier {
--    name : String;
--    kind : String;
--    attribute : Sequence(Attribute);
--  }
--  class Association {
--    name : String;
--    source : Class;
--    destination : Class;
--  }
--  class PrimitiveDataType extends Classifier {
--  }
--}

--metamodel SimpleRdbms {
--  class Table; -- forward declarations
--  class Key;
--  class ForeignKey;
--  class Column;
--
--  class Table {
--    name : String;
--    column : Sequence(Column);
--    _key : Key;
--    foreignKey : Sequence(ForeignKey);
--  }
--  class Column {
--   name : String;
--   kind : String;
--   type : String;
--  }
--  class Key {
--    name : String;
--    column : Sequence(Column);
--  }
--  class ForeignKey {
--    name : String;
--    refersTo : Key;
--    column : Sequence(Column);
--  }
--  tag "alias" Table::_key = "key";
--}

--modeltype UML uses SimpleUml;
--modeltype RDBMS uses SimpleRdbms;
transformation Uml2Rdb(in srcModel:UML,out dest:RDBMS);

-- Aliases to avoid name conflicts with keywords
tag "alias" RDBMS::Table::_key = "key";
-- defining intermediate data to reference leaf attributes that may
-- appear when struct data types are used
intermediate class LeafAttribute {
  name:String;
  kind:String;
  attr:UML::Attribute;
};
intermediate property UML::Class::leafAttributes : Sequence(LeafAttribute);

-- defining specific helpers

query UML::Association::isPersistent() : Boolean = 
    (self.source.kind='persistent' and self.destination.kind='persistent');    


-- defining the default entry point for the module
-- first the tables are created from classes, then the tables are
-- updated with the foreign keys implied by the associations

main() {
  srcModel.objects()[Class]->map class2table(); -- first pass
  srcModel.objects()[Association]->map asso2table(); -- second pass
}

-- maps a class to a table, with a column per flattened leaf attribute

mapping Class::class2table () : Table 
  when {self.kind='persistent';}
{
  init { -- performs any needed intialization
    self.leafAttributes := self.attribute
      ->map attr2LeafAttrs("","")->flatten();
  }
  -- population section for the table
  name := 't_' + self.name;
  column := self.leafAttributes->map leafAttr2OrdinaryColumn("")->asOrderedSet();
  key := object Key {  -- nested population section for a 'Key'
           name := 'k_'+ self.name; column := result.column[kind='primary']; 
         };
} 

-- Mapping that creates the intermediate leaf attributes data.

mapping Attribute::attr2LeafAttrs (in prefix:String,in pkind:String)
: Sequence(LeafAttribute) {
  init { 
    var k := if pkind="" then self.kind else pkind endif;
    result := 
       if self.type.isKindOf(PrimitiveDataType) 
       then -- creates a sequence with a LeafAttribute instance
         Sequence {
           object LeafAttribute {attr:=self;name:=prefix+self.name;kind:=k;}
         }
       else self.type.asType(Class).attribute
         ->map attr2LeafAttrs(self.name+"_",k)->flatten()
       endif; 
  }
}

-- Mapping that creates an ordinary column from a leaf attribute

mapping LeafAttribute::leafAttr2OrdinaryColumn (in prefix:String): Column { 
  name := prefix+self.name; 
  kind := self.kind;
  type := if self.attr.type.name='int' then 'NUMBER' else 'VARCHAR' endif;
}

-- mapping to update a Table with new columns of foreign keys

mapping Association::asso2table() : Table  
  when {self.isPersistent();}
{
  init {result := self.destination.resolveone(Table);}
  foreignKey := self.map asso2ForeignKey();
  column := result.foreignKey->column->flatten()->asOrderedSet();
}

-- mapping to build the foreign keys

mapping Association::asso2ForeignKey() : ForeignKey {
   name := 'f_' + self.name;
   refersTo := self.source.resolveone(Table).key;
   column := self.source.leafAttributes[kind='primary']
              ->map leafAttr2ForeignColumn(self.source.name+'_')->asOrderedSet();
}

-- Mapping to create a Foreign key from a leaf attributes
-- Inheriting of leafAttr2OrdinaryColumn has the effect to call the
-- inherited rule before entering the property population section

mapping LeafAttribute::leafAttr2ForeignColumn (in prefix:String) : Column 
  inherits leafAttr2OrdinaryColumn {
     kind := "foreign";
}
