/* $Id:$ 
 * Creation : January 12, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */


package org::kermeta::language::behavior;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"

require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/IsSubtypeOf.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/TypeEquality_structure_aspect.kmt"

require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/GetRootContainer_object_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/MetamodelHelper_structure_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/MetamodelCollection_GetTypeDefinitionByName.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/TypeCreationHelper.kmt"


using kermeta::standard
using kermeta::utils
using org::kermeta::language::structure
using org::kermeta::language::helpers::structure

aspect class CallSuperOperation {

	operation retrieveCallSuperOperationContainingClass() : Class is do
		
		var lExpression : KermetaModelElement init self
		from lExpression until lExpression.isInstanceOf(ClassDefinition)
		loop
			lExpression:=lExpression.container().asType(KermetaModelElement)
		end
		
		var lcd : ClassDefinition init lExpression.asType(ClassDefinition)
		var lClass : Class init Class.new
		lClass.typeDefinition:= lcd
		
		lcd.typeParameter.each{ tp | 
			var tvb : TypeVariableBinding init TypeVariableBinding.new
			tvb.variable := tp
			tvb.type := tp 
			lClass.typeParamBinding.add(tvb)
		}
				
		result:=lClass
	end

}

aspect class CallOperation
{
	
	/**
	 * You are not allowed to call operations on a class which is not an singleton.
	 * Either make your class a singleton or use an instance.
	 */
	@Scope "RESOLVED"
	inv no_operation_calls_on_a_non_singleton_class is do
	
		if (not(self.name.equals("new")) and not(self.staticOperation.isVoid)) 
		//if self.staticOperation.isVoid, an error will be raised elsewhere ...
		then
			//Check that it is called on a Class
		  	var mms : Collection<Metamodel> init self.getRootContainer.asType(Metamodel).getNeighbours
		  	var typeFinder : kmt::language::helpers::structure::TypeDefinitionFinder init kmt::language::helpers::structure::TypeDefinitionFinder.new
		  	
			var classTypeDef : TypeDefinition init typeFinder.getFirstTypeDefinitionByName("org::kermeta::language::structure::Class", mms)
			
			//stdio.writeln(" classTypeDef : " + classTypeDef.toString)
			if (self.staticOperation.owningClass.equals(classTypeDef))
			then
				if (self.target.isInstanceOf(CallTypeLiteral))
				then
					var classDef : ClassDefinition init
						self.target.asType(CallTypeLiteral).typeref.type.asType(Class).typeDefinition.asType(ClassDefinition)
					
					//is it a singleton
					classDef.isSingleton
				else
					true
				end
			else
				true
			end

		else
			true
		end
	
	end
	
	//TODO : this invariant should be merged with invariant
	//no_new_on_a_singleton once a customizable error message
	//will be in place for kermeta invariants 
	/**
	 * You are not allowed to instantiate an abstract class
	 */
	@Scope "RESOLVED"
	inv no_new_on_abstract_class is do
	
		if (self.name.equals("new") and not(self.staticOperation.isVoid)) 
		then
			// Check that it is called on a Class
		  	var mms : Collection<Metamodel> init self.getRootContainer.asType(Metamodel).getNeighbours
		  	var typeFinder : kmt::language::helpers::structure::TypeDefinitionFinder init kmt::language::helpers::structure::TypeDefinitionFinder.new
		  	
			var classTypeDef : TypeDefinition init typeFinder.getFirstTypeDefinitionByName("org::kermeta::language::structure::Class", mms)
			
			if (self.staticOperation.owningClass.equals(classTypeDef))
			then
				// Now check that it is not an abstract class
				if (self.target.isInstanceOf(CallTypeLiteral))
				then
					if (self.target.asType(CallTypeLiteral).typeref.type.isInstanceOf(Class))
					then
						not(self.target.asType(CallTypeLiteral).typeref.type.asType(Class).typeDefinition.asType(ClassDefinition).isAbstract)
					else
						true
					end
				else
					true
				end
			else
				true
			end
			
		else
			true
		end
	
	end
	
	
	/**
	 * You are not allowed to call new on a singleton class
	 */
	@Scope "RESOLVED"
	inv no_new_on_a_singleton is do
	
		if (self.name.equals("new") and not(self.staticOperation.isVoid))
		then
			// Check that it is called on a Class
		  	var mms : Collection<Metamodel> init self.getRootContainer.asType(Metamodel).getNeighbours
		  	var typeFinder : kmt::language::helpers::structure::TypeDefinitionFinder init kmt::language::helpers::structure::TypeDefinitionFinder.new
		  	
			var classTypeDef : TypeDefinition init typeFinder.getFirstTypeDefinitionByName("org::kermeta::language::structure::Class", mms)
			
			if (self.staticOperation.owningClass.equals(classTypeDef))
			then
				// Now check that it is not a singleton
				if (self.target.isInstanceOf(CallTypeLiteral))
				then
					if (self.target.asType(CallTypeLiteral).typeref.type.isInstanceOf(Class))
					then
						not(self.target.asType(CallTypeLiteral).typeref.type.asType(Class).typeDefinition.asType(ClassDefinition).isSingleton)
					else
						true
					end
				else
					true
				end
			else
				true
			end
		else
			true
		end
	
	end

	/**
	 * Type mismatch. The parameters' types are not those expected.
	 */
	@Scope "RESOLVED"
	inv callOperation_parameters_conformance is do 
		
		
		//stdio.writeln("Checking callOperation_parameters_conformance for " + self.name)
		/*stdio.writeln(" self.parameters.size : " + self.parameters.size.toString)
		stdio.writeln(" self.staticOperation.ownedParameter.size : " + self.staticOperation.ownedParameter.size.toString)
		*/
		if ( (self.staticOperation.isVoid).orElse{ b |self.parameters.size != self.staticOperation.ownedParameter.size})
		then
			// Error
			false
		else
			var myresult : Boolean init true

			// Retrieve all the operation's and owning class type parameters' bindings
			var typesToSet : OrderedSet<TypeVariableBinding> init OrderedSet<TypeVariableBinding>.new			

			//stdio.writeln(" operation's type parameters ? " + self.staticOperation.typeParameter.size.toString)
			// Check wether the CallOperation's staticOperation has type parameters or not
			from var i : Integer init 0
			until i==self.staticOperation.typeParameter.size
			loop
				
				var tvb : TypeVariableBinding init TypeVariableBinding.new
				tvb.variable:=self.staticOperation.typeParameter.at(i)
				tvb.type:=self.staticTypeVariableBindings.at(i)
				//stdio.writeln("  - " + tvb.variable.name + " : " + tvb.type.toString)
				typesToSet.add(tvb)
				i:=i+1
			end
			
			// The operation's owning class may have type parameters as well
			// Beware of CallSuperOperation that has no target (but in this case,
			// the target is self
			var typeTarget : Type
			if (not(self.isInstanceOf(CallSuperOperation)))
			then
				typeTarget:=self.target.staticType
			else
				//lTarget:=self
				typeTarget:=self.asType(CallSuperOperation).retrieveCallSuperOperationContainingClass
			end 
			
			if (typeTarget.isInstanceOf(Class))
			then
				typesToSet.addAll(typeTarget.asType(Class).getAllTypeVariableBindings)
			end
			
			/*
			stdio.writeln("All Type Variable bindings :")
			typesToSet.each{tvb|
				stdio.writeln(" - " + tvb.variable.name + " : " + tvb.type.toString)
			}
			*/
			
			// Now for each parameter
			//stdio.writeln(" operation parameters ? " + self.parameters.size.toString)
			var helper : TypeCreationHelper init TypeCreationHelper.new
			from var i : Integer init 0
			until i == self.parameters.size
			loop
				
				//stdio.writeln("--------")
				//stdio.writeln("calling isSubtypeOf on parameter : " +self.parameters.at(i).staticType.toString + " " + self.toString + " " + self.parameters.at(i).toString)
				var expectedType : Type init helper.createTypeFromMultiplicityElement(self.staticOperation.ownedParameter.at(i))
				//stdio.writeln("                   expected type : " + expectedType.toString)
				myresult := myresult and (self.parameters.at(i).staticType.isSubTypeOf(expectedType.cloneWithBindings(typesToSet)))	
				if not myresult then 
					stdio.writeln("invariant will fail due to call isSubtypeOf on parameter : " + self.parameters.at(i).staticType.toString +" expected type : " + expectedType.toString)
				end						
				i:=i+1
							
			end
			
			//stdio.writeln("myresult="+myresult.toString)
			myresult
		end
	end
}