/* $Id:$ 
 * Creation : November 16, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */

package org::kermeta::language::resolver;

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/resource/org.kermeta.language.resolver/src/main/kermeta/org/kermeta/language/resolver/ResolverException.kmt"

using org::kermeta::language::structure
using org::kermeta::language::behavior
using org::kermeta::language::resolver
using kermeta::standard
using kermeta::utils

class MapEntryTypeDef {

	reference x : String

	reference y : TypeDefinition

	operation initialize(aX :String, aY : TypeDefinition) : MapEntryTypeDef is do
		x:=aX
		y:=aY
		result:=self
	end 
}

aspect class LanguageVisitorContext {

	
	reference currentMetamodels : Collection<Metamodel>
	reference currentlyBuiltMetamodel : Metamodel
	attribute verbose : Boolean
	attribute handlingModelTypes : Boolean

	attribute errors : Sequence<ResolverException>
	
	
	reference currentPackage : Package	
	reference currentClassDef : ClassDefinition	
	reference currentOperation : Operation
	reference currentElement : KermetaModelElement
	
	//Qualified path to resolved object
	//attribute qualifiedPath : Sequence<String>
	
	//attribute typedefTable : Hashtable<String, Sequence<MapEntryTypeDef>>
	
	//attribute primitiveTypesTable : Hashtable<PrimitiveType, Type>
	
	
	operation initialize(mms : Collection<Metamodel>, currentMM : Metamodel, isVerbose : Boolean, isHandlingModelTypes : Boolean) : LanguageVisitorContext is do
		errors := Sequence<ResolverException>.new
		currentMetamodels:=mms
		currentlyBuiltMetamodel := currentMM
		//TODO initialize the table of Type definitions 
	 	verbose := isVerbose
	 	handlingModelTypes := isHandlingModelTypes
		result := self
	end
	
}