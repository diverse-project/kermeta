package org::kermeta::language::structure;

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/eachOwnedElement_kermeta_aspect.kmt"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/MetamodelCollection_GetTypeDefinitionByName.kmt"

require "ResolverContext_Aspect.kmt"
require "unresolvedType_Aspect.kmt"
require kermeta
using kermeta::standard
using org::kermeta::language::resolver

aspect class UnresolvedTypeVariable inherits TypeVariable, UnresolvedReference{

	reference correspondingTypeVariable : TypeVariable
	
	operation findCorrespondingTypeVariable(context : LanguageVisitorContext) : TypeVariable  is do
		var unresolvedBound : UnresolvedType
		var resolvedBound : Type
		//If self has a bound
		if (not supertype.isVoid) then
			unresolvedBound := supertype.asType(UnresolvedType)			
			//And this bound is not parameterized, we can resolve it
			if (unresolvedBound.generics.isEmpty()) then
				resolvedBound := unresolvedBound.findCorrespondingType(context)				
				//If the bound is a ModelType, self is a ModelTypeVariable
				if (resolvedBound.isInstanceOf(ModelType)) then
					correspondingTypeVariable := ModelTypeVariable.new					
				//Otherwise, it is an ObjectTypeVariable
				else
					correspondingTypeVariable := ObjectTypeVariable.new
					correspondingTypeVariable.containedType.add(resolvedBound)
				end
				correspondingTypeVariable.supertype := resolvedBound
			//If self has generics, it is an ObjectTypeVariable which bound cannot be resolve yet
			else
				correspondingTypeVariable := ObjectTypeVariable.new
				correspondingTypeVariable.supertype := unresolvedBound
				correspondingTypeVariable.containedType.add(unresolvedBound)
			end
		//If self does not have a bound, it is an ObjectTypeVariable (implicitly bound by Object)
		else
			correspondingTypeVariable := ObjectTypeVariable.new
		end
		correspondingTypeVariable.name := name
		result := correspondingTypeVariable
	end
}