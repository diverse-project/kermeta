/* $Id:$ 
 * Creation : November 27, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
@mainClass "org::kermeta::language::km2llvm::Km2llvm"
@mainOperation "main"

package org::kermeta::language::km2llvm;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "structure/km2llvm_structure.kmt"

using org::kermeta::language::structure
using kermeta::utils
using kermeta::persistence
using kermeta::io
using kermeta::standard

class Km2llvm {
	operation main() is do
		var mms : Collection<Metamodel> init getKmModel
		mms.each{mm | mm.preprocess4LLVM }
		var llvmCode : String init compile(mms).toString
		stdio.writeln(llvmCode)
		var f : FileIO init FileIO.new
		f.writeTextFile("../../test/testCastInheritance.ll", llvmCode)
	end

	operation compile(kms:Collection<Metamodel>) : StringBuffer is do
		var ctx : Context init Context.new.initialise
		kms.each{km | km.generateLLVM(ctx)}
		result := ctx.llvmCode
	end
	
	
	operation getKmModel() : Collection<Metamodel> is do
   		var repository : EMFRepository init EMFRepository.new
   		var resource : Resource init repository.createResource("../../test/testCastInheritance.km", "../../../../org.kermeta.language.model/src/main/ecore/kermeta.ecore")
       	resource.load
		result := Sequence<Metamodel>.new
		resource.each{obj | if(obj.isInstanceOf(Metamodel)) then result.add(obj.asType(Metamodel)) end }
	end
}







