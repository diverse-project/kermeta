/* $Id:$ 
 * Creation : January 10, 2013
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package org::kermeta::language::structure;

require kermeta
require "km2llvm_structure.kmt"

using org::kermeta::language::km2llvm
using kermeta::standard
using kermeta::utils
using org::kermeta::language::llvm


aspect class Operation {
	// The ID that permits to differenciate operation having the same name.
	// Each llvm function will be postfixed with this ID.
	attribute id : Integer

	// The llvm name of the operation.
	attribute _llvmName : String
	
	// If this operation is an adapter (see the dynamic binding generation process), this reference refers to
	// the adapted operation.
	reference adaptedOperation : Operation
	
	
	operation llvmName(ctx:Context) : String is do
		if(_llvmName.isVoid) then
			if(owningClass.toIgnore) then// Class not compiled must not be renamed.
				_llvmName := "@"+getLLVMQualifiedName // no quote since clang does not generate quote.
			else
				// An ID must be added to the class to avoid several classes to have the same name
				// in the same class.
				if id.isVoid then id := ctx.nextId end
				_llvmName := ctx.llvm.globalVar(getLLVMQualifiedName+id.toString)
			end
		end
		result :=  _llvmName
	end
	

	method generateLLVM(ctx:Context) is do
		var attrs : Sequence<LLVMVar> init  Sequence<LLVMVar>.new
		
		ctx.reinitOperationVar
		
		// If this operation is the main operation, an operation "main" must be created to create an instance
		// of the main Kermeta class and then call the main Kermeta operation.
		if(isMain) then
			var mainClassType : String init ctx.llvm.pointer(ctx.llvm.localVar(owningClass.qualifiedNameLLVM))
			ctx.operations.append(ctx.llvm.define(void, ctx.llvm.i32, "@main", attrs, void)).append("{\n")
			// Creating the instance of the main Kermeta class.
			ctx.operations.append(ctx.llvm.assign("%1", 
				ctx.llvm.call(ctx.llvm.globalVar("create_"+owningClass.qualifiedNameLLVM), mainClassType, void, void))).append("\n")
			attrs.add(LLVMVar.new.initialise(mainClassType, " %1"))
			// Calling the main Kermeta operation
			ctx.operations.append(ctx.llvm.call(llvmName(ctx), type.llvmType(ctx), attrs, void)).append("\n")
			// C operation must return an int (0 for ok)
			ctx.operations.append(ctx.llvm.ret(ctx.llvm.i32, "0")).append("\n")
			ctx.operations.append("}\n")
		end

		attrs.clear
		// Creation of the parameters
		ownedParameter.each{param | attrs.add(LLVMVar.new.initialise(param.type.llvmType(ctx), ctx.llvm.localVar(param.name))) }
		// The last parameter is the calling object
		attrs.add(LLVMVar.new.initialise(ctx.llvm.pointer(ctx.llvm.localVar(owningClass.qualifiedNameLLVM)), ctx.llvm.localVar("self")))
		ctx.operations.append(ctx.llvm.define(LinkageType.internal, type.llvmType(ctx), llvmName(ctx), attrs, void)).append("{\n")
		body.generateLLVM(ctx)
		ctx.operations.append(ctx.llvm.ret(ctx.llvm.~void, void)).append("\n")
		ctx.operations.append("}\n")
	end


	operation isMain() : Boolean is do
		result := kOwnedTags.exists{t | t.name=="main"}
	end


	/**
		Returns the LLVM prototype code of the operation.
		For exemple, given the operation "foo" having no parameter and returning nothing, the prototype is "void ()* @foo"
		Given the operation "foo" having one parameter of type "Bar" and returning an integer, the prototype is "i32 (%Bar*)* @foo"
		This operation is required to compute the table used for the dynamic binding of operation calls.
	*/
	operation getLLVMPrototype(ctx:Context) : String is do
		result := getLLVMPrototypeType(ctx)+ " " + llvmName(ctx)
	end
	
	
	operation getLLVMPrototypeType(ctx:Context) : String is do
		var buf : StringBuffer init StringBuffer.new
		var params : OrderedCollection<LLVMVar> init ownedParameter.collect{p | LLVMVar.new.initialise(p.type.llvmType(ctx), void) }
		// checking if the type must be renamed (e.g. a type from the std lib generated from C code).
		var nameType : String init ctx.stdLibName.getValue(owningClass.qualifiedNameLLVM)
		if nameType.isVoid then nameType := ctx.llvm.pointer(ctx.llvm.localVar(owningClass.qualifiedNameLLVM)) end
		// The last parameter is the calling object.
		params.add(LLVMVar.new.initialise(nameType, void))
	
		buf.append(type.llvmType(ctx)).append(" (")
		ctx.llvm.flatListString(buf, params, ", ")
		buf.append(")*")
		result := buf.toString
		params.clear
	end
	

	/**
		Returns a string identifying the prototype of the operation.
		For exemple, given the operation "foo" having no parameter and returning nothing, the prototype is "void foo()"
		Given the operation "foo" having one parameter of type "Bar" and returning an integer, the prototype is "i32 foo(%Bar*)"
		This operation is required to compute the table used for the dynamic binding of operation calls.
	*/
	operation getPrototype(ctx:Context) : String is do
		var buf : StringBuffer init StringBuffer.new
		var params : OrderedCollection<LLVMVar> init ownedParameter.collect{p | LLVMVar.new.initialise(p.type.llvmType(ctx), void) }

		buf.append(type.llvmType(ctx)).append(" ").append(name).append("(")
		ctx.llvm.flatListString(buf, params, ",")
		buf.append(")")
		result := buf.toString
		params.clear
	end
	
	

	operation duplicateHeaderUsing(op:Operation, ctx:Context) is do
		var clazz : Class
		var param : Parameter

		name := op.name
		owningClass := ClassDefinition.new
		owningClass.qualifiedNameLLVM := op.owningClass.qualifiedNameLLVM
		owningClass.name := op.owningClass.name
		clazz := Class.new
		clazz.typeDefinition := op.type.asType(Class).typeDefinition
		type := clazz
		op.llvmName(ctx)
		id := op.id
		
		op.ownedParameter.each{p |
			param := Parameter.new
			param.name := p.name
			clazz := Class.new
			clazz.typeDefinition := p.type.asType(Class).typeDefinition
			type := clazz
			ownedParameter.add(param)
		}
	end
}

