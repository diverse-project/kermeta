/* $Id:$ 
 * Creation : March 8, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */

package org::kermeta::language;

require kermeta

require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/LanguageVisitor.kmt"

using language::helpers

/*
* Aspect for behavior elements
*/

package behavior {
	aspect class Assignment
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitAssignment(self, ctxt)
		end
	}
	
	aspect class Block
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitBlock(self, ctxt)
		end
	}
	
	aspect class BooleanLiteral
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitBooleanLiteral(self, ctxt)
		end
	}
	
	aspect class CallEnumLiteral
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallEnumLiteral(self, ctxt)
		end
	}
	
	aspect class CallExpression
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallExpression(self, ctxt)
		end
	}
		
	aspect class CallFeature
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallFeature(self, ctxt)
		end
	}
	
	aspect class CallOperation
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallOperation(self, ctxt)
		end
	}
	
	aspect class CallProperty
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallProperty(self, ctxt)
		end
	}
		
	aspect class CallResult
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallResult(self, ctxt)
		end
	}
		
	aspect class CallSuperOperation
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallSuperOperation(self, ctxt)
		end
	}
		
	aspect class CallTypeLiteral
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallTypeLiteral(self, ctxt)
		end
	}
	
	aspect class CallValue
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallValue(self, ctxt)
		end
	}
	
	aspect class CallVariable
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitCallVariable(self, ctxt)
		end
	}
	
	aspect class Conditional
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitConditional(self, ctxt)
		end
	}
	
	aspect class EmptyExpression
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitEmptyExpression(self, ctxt)
		end
	}
	
	aspect class Expression
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void from KermetaModelElement is do 
			visitor.visitExpression(self, ctxt)
		end
	}
		
	aspect class IntegerLiteral
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitIntegerLiteral(self, ctxt)
		end
	}
		
	aspect class JavaStaticCall
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitJavaStaticCall(self, ctxt)
		end
	}
			
	aspect class LambdaExpression
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitLambdaExpression(self, ctxt)
		end
	}
		
	aspect class LambdaParameter
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitLambdaParameter(self, ctxt)
		end
	}
	
	aspect class Literal
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitLiteral(self, ctxt)
		end
	}
	
	aspect class Loop
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitLoop(self, ctxt)
		end
	}
		
	aspect class Raise
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitRaise(self, ctxt)
		end
	}
		
	aspect class Rescue
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitRescue(self, ctxt)
		end
	}
	
	aspect class SelfExpression
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitSelfExpression(self, ctxt)
		end
	}
		
	aspect class StringLiteral
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitStringLiteral(self, ctxt)
		end
	}
		
	aspect class TypeReference
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitTypeReference(self, ctxt)
		end
	}
		
	aspect class UnresolvedCall
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void from KermetaModelElement is do 
			visitor.visitUnresolvedCall(self, ctxt)
		end
	}
		
	aspect class VariableDecl
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitVariableDecl(self, ctxt)
		end
	}
	
	aspect class VoidLiteral
	{
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) : Void is do 
			visitor.visitVoidLiteral(self, ctxt)
		end
	}
}
/*
* Aspect for structure elements
*/
package structure {
	aspect class AbstractOperation {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitAbstractOperation(self, ctxt)
		end
	}
	
	aspect class AbstractProperty {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitAbstractProperty(self, ctxt)
		end
	}
	
	aspect class Class {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitClass(self, ctxt)
		end
	}
	
	aspect class ClassDefinition {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitClassDefinition(self, ctxt)
		end
	}
	
	aspect class Constraint {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitConstraint(self, ctxt)
		end
	}
	
	aspect class DataType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitDataType(self, ctxt)
		end
	}
	
	aspect class Enumeration {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitEnumeration(self, ctxt)
		end
	}
	
	aspect class EnumerationLiteral {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitEnumerationLiteral(self, ctxt)
		end
	}
	
	aspect class FunctionType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitFunctionType(self, ctxt)
		end
	}
	
	aspect class GenericTypeDefinition {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitGenericTypeDefinition(self, ctxt)
		end
	}
	
	aspect class Model {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitModel(self, ctxt)
		end
	}
	
	aspect class ModelType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitModelType(self, ctxt)
		end
	}
	
	aspect class ModelTypeVariable {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitModelTypeVariable(self, ctxt)
		end
	}
	
	aspect class Metamodel {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitMetamodel(self, ctxt)
		end
	}
	
	aspect class MultiplicityElement {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitMultiplicityElement(self, ctxt)
		end
	}
	
	aspect class NamedElement {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitNamedElement(self, ctxt)
		end
	}
	
	aspect class KermetaModelElement {
		operation accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitKermetaModelElement(self, ctxt)
		end
	}
	
	aspect class ObjectTypeVariable {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitObjectTypeVariable(self, ctxt)
		end
	}
	
	aspect class Operation {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitOperation(self, ctxt)
		end
	}
	
	aspect class Package {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitPackage(self, ctxt)
		end
	}
	
	aspect class Parameter {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitParameter(self, ctxt)
		end
	}
	
	aspect class ParameterizedType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitParameterizedType(self, ctxt)
		end
	}
	
	aspect class PrimitiveType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitPrimitiveType(self, ctxt)
		end
	}
	
	aspect class ProductType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitProductType(self, ctxt)
		end
	}
	
	aspect class Property {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitProperty(self, ctxt)
		end
	}
	
	//aspect class Resource {
	//	method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
	//		visitor.visitResource(self, ctxt)
	//	end
	//}
	
	//aspect class ResourceGroup {
	//	method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
	//		visitor.visitResourceGroup(self, ctxt)
	//	end
	//}
	
	//aspect class SimpleResource {
	//	method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
	//		visitor.visitSimpleResource(self, ctxt)
	//	end
	//}
	
	aspect class Tag {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitTag(self, ctxt)
		end
	}
	
	aspect class Type {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitType(self, ctxt)
		end
	}
	
	aspect class TypeContainer {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitTypeContainer(self, ctxt)
		end
	}
	
	aspect class TypeDefinition {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitTypeDefinition(self, ctxt)
		end
	}
	
	aspect class ModelElementTypeDefinitionContainer {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitModelElementTypeDefinitionContainer(self, ctxt)
		end
	}
	
	aspect class TypeVariable {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitTypeVariable(self, ctxt)
		end
	}
	
	aspect class TypeVariableBinding {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitTypeVariableBinding(self, ctxt)
		end
	}
	
	aspect class TypedElement {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitTypedElement(self, ctxt)
		end
	}
	
	aspect class UnresolvedReference {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitUnresolvedReference(self, ctxt)
		end
	}
	
	aspect class UnresolvedOperation {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitUnresolvedOperation(self, ctxt)
		end
	}
	
	aspect class UnresolvedProperty {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitUnresolvedProperty(self, ctxt)
		end
	}
	
	aspect class UnresolvedType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitUnresolvedType(self, ctxt)
		end
	}
	
	aspect class UnresolvedInferredType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) from KermetaModelElement is do
			visitor.visitUnresolvedInferredType(self, ctxt)
		end
	}
	
	aspect class Using {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitUsing(self, ctxt)
		end
	}
	
	aspect class VirtualType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitVirtualType(self, ctxt)
		end
	}
	
	aspect class VoidType {
		method accept(visitor : LanguageVisitor, ctxt : LanguageVisitorContext) is do
			visitor.visitVoidType(self, ctxt)
		end
	}
}