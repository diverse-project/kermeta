/* $Id:$ 
 * Creation : October 23, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            cguy
 */

package kmt::language::helpers;

require kermeta
require "platform:/lookup/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "platform:/lookup/org.kermeta.language.mdk/src/kmt/language/helpers/structure/MetamodelHelper_structure_aspect.kmt"


using org::kermeta::language::structure
using kermeta::standard
using kermeta::exceptions

// this tag is to woprkaround a problem of generation using K1toScala
@ecore "true"
package structure {
class TypeDefinitionFinder {
	/**
	 * retrieves the TypeDefinition with the given full qualified name (ie. must include the metamodel name)
	 */	
	operation getTypeDefinitionByQualifiedName(qname : String, metamodels : Collection<Metamodel>, currentMetamodel : Metamodel) : TypeDefinition is do
		result := void
		if qname.contains("^") then
			var mmName : String init qname.split("\\^").at(0)
			if(mmName == "") then
				result := currentMetamodel.getTypeDefinitionByQualifiedName(currentMetamodel.name+qname)
			else
				//stdio.writeln("getTypeDefinitionByQualifiedName "+qname)
				var partialName : String init qname.split("\\^").at(1)
				var metamodel : Metamodel init metamodels.detect{mm|mm.name.equals(mmName)}
				if(not metamodel.isVoid) then
					result := metamodel.getTypeDefinitionByQualifiedName(qname)
				end
			end
		else
			stdio.writeln("TypeDefinitionFinder.getTypeDefinitionByQualifiedName expects a qualified name (i.e., qualified name including metamodel name, followed by \"^\"), but was called on: " + qname)
			/*stdio.writeln("Creating an exception")
			var e : Exception init Exception.new
			e.message := "getTypeDefinitionByQualifiedName expects a qualified name (i.e., qualified name including metamodel name, followed by \"^\"), but was called on: " + qname
			stdio.writeln("Raising the exception")
			raise e*/
		end
	end
	
	/**
	 * retrieves the TypeDefinition with the given qualified name, the name can be partial or full
	 * (partial in the sense that it doesn't use the ^)
	 */
	operation getFirstTypeDefinitionByName(name : String,  metamodels : Collection<Metamodel>) : TypeDefinition is do
		result := void
		//If the name is a qualified name (including metamodel name followed by ^)
		if name.contains("^") then
			var mmName : String init name.split("\\^").at(0)
			var metamodel : Metamodel init metamodels.detect{mm|mm.name.equals(mmName)}
			if(not metamodel.isVoid) then
				result := metamodel.getTypeDefinitionByQualifiedName(name)
			else
				stdio.errorln("FAILED to find " + name + " in metamodel \"" + mmName + "\"")
			end
		end
		//If the name is a partial name (without metamodel name nor ^)
		if (not name.contains("^")) then
			//We look for the first metamodel containing a type definition corresponding to the partial name
			var metamodel : Metamodel init metamodels.detect{mm|not mm.getTypeDefinitionByPartialName(name).isVoid}
			if(not metamodel.isVoid) then
				result := metamodel.getTypeDefinitionByPartialName(name)
		//	else
		//		stdio.writeln("FAILED to find " + name + " in " +metamodels.size.toString + " metamodels")
			end
		end
		
	end
	
	/**
	 * retrieves the first metamodel in the collection that contains a TypeDefinition with the given partial qualified name
	 * (partial in the sense that it doesn't use the ^)
	 */
	operation getFirstMetamodelWithTypeDefinition(partialQName : String,  metamodels : Collection<Metamodel>) : Metamodel is do
		result := metamodels.detect{mm| not mm.getTypeDefinitionByPartialName(partialQName).isVoid}
	end

	/*
	 * Get a TypeDefinition contained in the current Metamodel by name (either qualified or partial)
	 * and taking into account a set of Usings
	 * and optionally looking in the current Package (if not void)
	 */
	 
	operation getTypeDefinitionByNameAndUsings( lookingForName : String, usings : Collection<Using>, currentMetamodel : Metamodel, optionalCurrentPackage : Package) : TypeDefinition is do
				
		var metamodels : Collection<Metamodel> init currentMetamodel.getNeighbours()
				
		//We can be looking for a ModelTypeDefinition, in which case lookingForName is the name of the corresponding metamodel
		var mm : Metamodel init metamodels.detect{mm|mm.name == lookingForName}
				
		if not mm.isVoid() then
			result := mm.ownedModelTypeDefinitions.detect{mtd|
				(not mtd.name.isVoid()).andThen{x|mtd.name == lookingForName}
			}
		end
				
		if result.isVoid() then
			if lookingForName.contains("^") then
				var set_name : Sequence<String> init lookingForName.split("\\^")
		 		if not set_name.at(0).equals("") then
			 		// search the exact qualified name
					result := getTypeDefinitionByQualifiedName(lookingForName, metamodels, currentMetamodel)	
		 		else
		 			// search in current metamodel
		 			result := currentMetamodel.getTypeDefinitionByQualifiedName(currentMetamodel.name + lookingForName)		 			
		 		end
			else
				if (not optionalCurrentPackage.isVoid) then
					// search this qualified name in the current Package
					result := optionalCurrentPackage.getTypeDefinitionByPartialName(lookingForName)
				end	
				
				if (result.isVoid and not usings.isEmpty) then
					from var iterator :Iterator<Using> init usings.iterator
					until (not result.isVoid) or iterator.isOff
					loop
						var currentUsing : Using init iterator.next
						//If the using does not define an alias
						if (currentUsing.toName.isVoid() or currentUsing.toName == "") then
							//We now look for a type which the same name and which qualifiedPath is the fromQName
							var newName : String init currentUsing.fromQName.replace("*", lookingForName)
							if newName.contains("^") then
								result := getTypeDefinitionByQualifiedName(newName, metamodels, currentMetamodel)
							else
								result := getFirstTypeDefinitionByName(newName, metamodels)
							end
						else
							if lookingForName.startsWith(currentUsing.toName) then
								var newName : String init lookingForName.replace(currentUsing.toName, currentUsing.fromQName)
								if newName.contains("^") then
									result := getTypeDefinitionByQualifiedName(newName, metamodels, currentMetamodel)
								else
									result := getFirstTypeDefinitionByName(newName, metamodels)
								end
							end			
						end
					end
				end
			end
			if (result.isVoid) then
				// finally search from the root of the current metamodel
				if(lookingForName.contains("::")) then
					result := getFirstTypeDefinitionByName(lookingForName, metamodels)
				end				
			end
			if (result.isVoid) then
				stdio.writeln("FAILED to find getTypeDefinitionByNameAndUsings " + lookingForName )
			end
		end
	end
}
}
