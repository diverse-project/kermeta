/* $Id: 022_mt_multiplicity_invalid_tests.kmt,v 1.1 2007-09-10 08:35:09 cfaucher Exp $
 * Creation date: November 10, 2006
 * License: EPL
 * Authors:
 * 	Didier Vojtisek
 * Description:
 *		This verifies the various possibilities about reference multiplicities
 */
@mainClass "mt_multiplicity::Tester"
@mainOperation "test"


package mt_multiplicity;


require kermeta
require "../valid/022_mt_multiplicity.kmt"
using kermeta::standard

class Tester{
	
	// ======================== //
	operation testNeedsM0_1a() : Void is do
		NeedsM0_1<m0_1T>.new
		NeedsM0_1<m0T>.new	// must have an error here
	end
	operation testNeedsM0_1b() : Void is do
		NeedsM0_1<m1T>.new
		NeedsM0_1<m0_nT>.new	// must have an error here
	end
	operation testNeedsM0_1c() : Void is do
		NeedsM0_1<m0_2T>.new	// must have an error here
	end
	operation testNeedsM0_1d() : Void is do
		NeedsM0_1<m1_nT>.new	// must have an error here
	end
	operation testNeedsM0_1e() : Void is do
		NeedsM0_1<m1_2T>.new	// must have an error here
	end
	operation testNeedsM0_1f() : Void is do
		NeedsM0_1<m0_3T>.new	// must have an error here
	end
	
	// ======================== //
	/* every models should be compatible with m0
	operation testNeedsM0() : Void is do
		NeedsM0<m0_1T>.new
		NeedsM0<m0T>.new
		NeedsM0<m1T>.new
		NeedsM0<m0_nT>.new
		NeedsM0<m0_2T>.new
		NeedsM0<m1_nT>.new
		NeedsM0<m1_2T>.new
		NeedsM0<m0_3T>.new
	end */
	
	// ======================== //
	operation testNeedsM1a() : Void is do
		NeedsM1<m0_1T>.new	// must have an error here
	end
	operation testNeedsM1b() : Void is do
		NeedsM1<m0T>.new	// must have an error here
		NeedsM1<m1T>.new
	end
	operation testNeedsM1c() : Void is do
		NeedsM1<m0_nT>.new	// must have an error here
	end
	operation testNeedsM1d() : Void is do
		NeedsM1<m0_2T>.new	// must have an error here
	end
	operation testNeedsM1e() : Void is do
		NeedsM1<m1_nT>.new		// must have an error here
	end
	operation testNeedsM1f() : Void is do
		NeedsM1<m1_2T>.new	// must have an error here
	end
	operation testNeedsM1g() : Void is do
		NeedsM1<m0_3T>.new	// must have an error here	
	end
	
	// ======================== //
	operation testNeedsM0_na() : Void is do
		NeedsM0_n<m0_1T>.new	// must have an error here
	end
	operation testNeedsM0_nb() : Void is do
		NeedsM0_n<m0T>.new	// must have an error here
	end
	operation testNeedsM0_nc() : Void is do
		NeedsM0_n<m1T>.new	// must have an error here
		NeedsM0_n<m0_nT>.new
		NeedsM0_n<m0_2T>.new
		NeedsM0_n<m1_nT>.new
		NeedsM0_n<m1_2T>.new
		NeedsM0_n<m0_3T>.new
	end
	
	// ======================== //
	operation testNeedsM0_2a() : Void is do
		NeedsM0_2<m0_1T>.new		// must have an error here
	end
	operation testNeedsM0_2b() : Void is do
		NeedsM0_2<m0T>.new		// must have an error here
	end
	operation testNeedsM0_2c() : Void is do
		NeedsM0_2<m1T>.new		// must have an error here
	end
	operation testNeedsM0_2d() : Void is do
		NeedsM0_2<m0_nT>.new		// must have an error here
	end
	operation testNeedsM0_2e() : Void is do
		NeedsM0_2<m0_2T>.new
		NeedsM0_2<m1_nT>.new		// must have an error here
	end
	operation testNeedsM0_2f() : Void is do
		NeedsM0_2<m1_2T>.new		// must have an error here
		NeedsM0_2<m0_3T>.new
	end
	
	// ======================== //
	operation testNeedsM1_na() : Void is do
		NeedsM1_n<m0_1T>.new		// must have an error here
	end
	operation testNeedsM1_nb() : Void is do
		NeedsM1_n<m0T>.new		// must have an error here
	end
	operation testNeedsM1_nc() : Void is do
		NeedsM1_n<m1T>.new		// must have an error here
	end
	operation testNeedsM1_nd() : Void is do
		NeedsM1_n<m0_nT>.new		// must have an error here
	end
	operation testNeedsM1_ne() : Void is do
		NeedsM1_n<m0_2T>.new		// must have an error here
	end
	operation testNeedsM1_nf() : Void is do
		NeedsM1_n<m1_nT>.new
		NeedsM1_n<m1_2T>.new
		NeedsM1_n<m0_3T>.new		// must have an error here
	end
	
	// ======================== //
	operation testNeedsM1_2a() : Void is do
		NeedsM1_2<m0_1T>.new		// must have an error here
	end
	operation testNeedsM1_2b() : Void is do
		NeedsM1_2<m0T>.new		// must have an error here
	end
	operation testNeedsM1_2c() : Void is do
		NeedsM1_2<m1T>.new		// must have an error here
	end
	operation testNeedsM1_2d() : Void is do
		NeedsM1_2<m0_nT>.new		// must have an error here
	end
	operation testNeedsM1_2e() : Void is do
		NeedsM1_2<m0_2T>.new		// must have an error here
	end
	operation testNeedsM1_2f() : Void is do
		NeedsM1_2<m1_nT>.new		// must have an error here
	end
	operation testNeedsM1_2g() : Void is do
		NeedsM1_2<m1_2T>.new
		NeedsM1_2<m0_3T>.new		// must have an error here
	end
	
	
	// ======================== //
	operation testNeedsM0_3a() : Void is do
		NeedsM0_3<m0_1T>.new
	end
	operation testNeedsM0_3b() : Void is do
		NeedsM0_3<m0T>.new
	end
	operation testNeedsM0_3c() : Void is do
		NeedsM0_3<m1T>.new
	end
	operation testNeedsM0_3d() : Void is do
		NeedsM0_3<m0_nT>.new
	end
	operation testNeedsM0_3e() : Void is do
		NeedsM0_3<m0_2T>.new
		NeedsM0_3<m1_nT>.new	// must have an error here
		NeedsM0_3<m1_2T>.new
		NeedsM0_3<m0_3T>.new
	end
}
  