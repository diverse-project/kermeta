package org::kermeta::compiler::trek2junit::kermeta;
require kermeta
require "http://www.kermeta.org/trek"
using kermeta::standard
using kermeta::utils
using trek
class JUnitUseCaseTemplate{
operation generate(uc:KUseCase):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("\r\n/*$Id: CompilerUseCase.kmt,v 1.1 2008-01-31 14:33:41 cfaucher Exp $\r\n* Project : org.kermeta.compiler.tests\r\n* File : \tCompPackageTestCase.java\r\n* License : EPL\r\n* Copyright : IRISA / INRIA / Universite de Rennes 1\r\n* ----------------------------------------------------------------------------\r\n* Creation date : 30 janv. 08\r\n* Authors : paco\r\n*/\r\n\r\npackage org.kermeta.compiler.tests.structure;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport org.junit.AfterClass;\r\nimport org.junit.Assert;\r\nimport org.junit.Before;\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Test;\r\nimport org.kermeta.compiler.tests.KCompilerConstants;\r\nimport org.kermeta.compiler.tests.helper.Constants;\r\nimport org.kermeta.io.KermetaUnit;\r\nimport org.kermeta.io.loader.plugin.LoaderPlugin;\r\nimport org.kermeta.io.plugin.IOPlugin;\r\nimport org.kermeta.kpm.helper.RunnerHelper;\r\nimport org.kermeta.loader.LoadingOptions;\r\n\r\nimport fr.irisa.triskell.kermeta.exceptions.NotRegisteredURIException;\r\nimport fr.irisa.triskell.kermeta.exceptions.URIMalformedException;\r\nimport fr.irisa.triskell.kermeta.launcher.KermetaInterpreter;\r\nimport fr.irisa.triskell.kermeta.runtime.RuntimeObject;\r\nimport fr.irisa.triskell.kermeta.tests.comparison.EMFCompareModelHelper;\r\n\r\npublic class K")
_res.append( uc.id )
_res.append("UseCase {\r\n\r\n\t/*\r\n     * \r\n     * Beginning dynamic code for the current use case\r\n     * \r\n     */\r\n\tprivate String use_case = \"")
_res.append( uc.id )
_res.append("\";\r\n\t/*\r\n     * \r\n     * Ending dynamic code for the current use case\r\n     * \r\n     */\r\n\t\r\n\t/*\r\n\t * \r\n\t * Beginning static code\r\n\t *  \r\n\t */\r\n\tstatic private KermetaUnit executable;\r\n\t\r\n\t/*\r\n\t * \r\n\t * We only load one time the program when the current class is loading.\r\n\t * \r\n\t */\r\n    @BeforeClass\r\n    public static void loadProgram() {\r\n\t\tMap<Object, Object> options = new HashMap<Object, Object>();\r\n\t\toptions.put( LoadingOptions.ECORE_QuickFixEnabled, true );\r\n\t\ttry {\r\n\t\t\tIOPlugin.LOCAL_USE = true;\r\n\t\t\tIOPlugin.getDefault();\r\n\t\t\texecutable = LoaderPlugin.getDefault().load( Constants.TEST_COMP_STRUCTURE_LAUNCHER, options);\r\n\t\t} catch (URIMalformedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (NotRegisteredURIException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n    }\r\n    /*\r\n\t * \r\n\t * Ending static code\r\n\t *  \r\n\t */\r\n\t\r\n    /*\r\n     * \r\n     * Beginning dynamic code for each test case\r\n     * \r\n     */\r\n")
 uc.verifiedBy.each{ tc | 
				do
				var pre_suffix : String init tc.uri.replace("http://gforge.inria.fr/plugins/scmcvs/cvsweb.php/kermeta_projects/org.kermeta.compiler.tests/unit_test/", "").replace("/input/kermeta/?cvsroot=kermeta", "")
	
				var suffix : String init pre_suffix.replace("/", "_") 
_res.append("\r\n\tprivate String test_case_")
_res.append( suffix )
_res.append(" = \"")
_res.append( tc.name )
_res.append("\";\r\n\t\r\n\tprivate String input_")
_res.append( suffix )
_res.append(" = \"\";\r\n\t\r\n\tprivate String output_")
_res.append( suffix )
_res.append(" = \"\";\r\n\t\r\n\tprivate String expected_output_")
_res.append( suffix )
_res.append(" = \"\";\r\n\t\r\n\t@Before public void setParams_")
_res.append( suffix )
_res.append("() {\r\n\t\tString prefix = \"/\" + \"")
_res.append( pre_suffix )
_res.append("\" + \"/\";\r\n\t\tinput_")
_res.append( suffix )
_res.append(" = Constants.SOURCE_PATH + prefix + \"/\" + KCompilerConstants.INPUT_FOLDER + \"/kermeta/\" + use_case + \"_\" + test_case_")
_res.append( suffix )
_res.append(" + \".km\";\r\n\t\toutput_")
_res.append( suffix )
_res.append(" = Constants.SOURCE_PATH + prefix + \"/\" + KCompilerConstants.OUTPUT_FOLDER + \"/\" + use_case + \"_\" + test_case_")
_res.append( suffix )
_res.append(" + \".ecore\";\r\n\t\texpected_output_")
_res.append( suffix )
_res.append(" = Constants.SOURCE_PATH + prefix + \"/\" + KCompilerConstants.EXPECTED_OUTPUT_FOLDER +\"/ecore/\" + use_case + \"_\" + test_case_")
_res.append( suffix )
_res.append(" + \".ecore\";\r\n\t}\r\n\t\r\n\t@Test public void comp_package_test_")
_res.append( suffix )
_res.append("() {\r\n\t\trun(input_")
_res.append( suffix )
_res.append(", output_")
_res.append( suffix )
_res.append(", expected_output_")
_res.append( suffix )
_res.append(");\r\n\t}\r\n")
 end
	} 
_res.append("\t/*\r\n\t * \r\n\t * Ending dynamic code for each test case\r\n\t * \r\n\t */\r\n\t\r\n\t\r\n\t/*\r\n\t * \r\n\t * Beginning static code\r\n\t *  \r\n\t */\r\n\tprivate void run(String input, String output, String expected_output) {\r\n\t\ttry {\r\n\t\t\t/*\r\n\t\t\t * Getting the kermeta unit to execute.\r\n\t\t\t */\r\n\t\t\tKermetaUnit unitToExecute = RunnerHelper.getKermetaUnitToExecute( executable, Constants.BIN_PATH);\r\n\t\t\t/*\r\n\t\t\t * Creating the interpreter.\r\n\t\t\t */\r\n\t\t\tKermetaInterpreter interpreter = new KermetaInterpreter(unitToExecute, null);\r\n\t\t\t/*\r\n\t\t\t * Setting the parameters.\r\n\t\t\t */\r\n\t\t\tArrayList<RuntimeObject> params = new ArrayList<RuntimeObject>();\r\n\t\t\tparams.add(fr.irisa.triskell.kermeta.runtime.basetypes.String.create(input, interpreter.getMemory().getROFactory()));\r\n\t\t\tparams.add(fr.irisa.triskell.kermeta.runtime.basetypes.String.create(output, interpreter.getMemory().getROFactory()));\r\n\t\t\tinterpreter.setEntryParameters(params);\r\n\t\t\t/*\r\n\t\t\t * Start the interpreter.\r\n\t\t\t */\r\n\t\t\tinterpreter.launch();\r\n\t\t\t/*\r\n\t\t\t * Assertion\r\n\t\t\t */\r\n\t\t\tAssert.assertTrue( compare(output, expected_output) );\r\n\t\t} catch (URIMalformedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (NotRegisteredURIException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate boolean compare(String output, String expected_output) {\r\n\t\treturn EMFCompareModelHelper.isDifferentAndSaveDiff(expected_output, output,  output + \".diff\");\r\n\t}\r\n\t\r\n\t/**\r\n\t * \r\n\t * Once all the tests have been run, unload the program.\r\n\t * \r\n\t */\r\n    @AfterClass\r\n    public static void unloadProgram() {\r\n\t\tLoaderPlugin.getDefault().unload( executable.getUri() );\r\n    }\r\n    /*\r\n\t * \r\n\t * Ending static code\r\n\t *  \r\n\t */\r\n}")
result := _res.toString
end
}
