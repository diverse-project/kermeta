package org::kermeta::compiler::trek2junit::kermeta;
require kermeta
require "http://www.kermeta.org/trek"
using kermeta::standard
using kermeta::utils
using trek
class JUnitUseCaseTemplate{
operation generate(uc:KUseCase, mode:String):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("\n/*$Id: CompilerUseCase.kmt,v 1.8 2008-05-20 08:22:49 ftanguy Exp $\n* Project : org.kermeta.compiler.tests\n* License : EPL\n* Copyright : IRISA / INRIA / Universite de Rennes 1\n* ----------------------------------------------------------------------------\n* This is generated thanks to the KET template: CompilerUseCase.ket\n*/\n\npackage org.kermeta.compiler.tests.")
_res.append(mode)
_res.append(";\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.AfterClass;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.kermeta.compiler.tests.KCompilerConstants;\nimport org.kermeta.compiler.tests.helper.Constants;\nimport org.kermeta.compiler.tests.helper.DiffHelper;\nimport org.kermeta.interpreter.api.InitializationError;\nimport org.kermeta.interpreter.api.Interpreter;\nimport org.kermeta.interpreter.api.InterpreterMode;\nimport org.kermeta.interpreter.api.InterpreterOptions;\nimport org.kermeta.io.loader.plugin.LoaderPlugin;\nimport org.kermeta.io.plugin.IOPlugin;\nimport org.kermeta.simk.impl.SimkPackageImpl;\n\nimport fr.irisa.triskell.eclipse.console.LocalIOConsole;\nimport fr.irisa.triskell.kermeta.exceptions.NotRegisteredURIException;\nimport fr.irisa.triskell.kermeta.exceptions.URIMalformedException;\nimport fr.irisa.triskell.kermeta.tests.comparison.EMFCompareModelHelper;\n\npublic class ")
_res.append(uc.id.substring(0,1).toUpperCase)
_res.append(uc.id.substring(1,uc.id.size))
_res.append("UseCase {\n\n\t/*\n     * \n     * Beginning dynamic code for the current use case\n     * \n     */\n\tprivate String use_case = \"")
_res.append( uc.id )
_res.append("\";\n\t/*\n     * \n     * Ending dynamic code for the current use case\n     * \n     */\n\t\n\t/*\n\t * \n\t * Beginning static code\n\t *  \n\t */\n\tstatic private Interpreter _interpreter;\n\t\n\t/*\n\t * \n\t * We only load one time the program when the current class is loading.\n\t * \n\t */\n\t@BeforeClass\n\tstatic public void setInterpreter() {\n\t\tIOPlugin.LOCAL_USE = true;\n\t\tLoaderPlugin.getDefault();\n\t\t\n\t\tSimkPackageImpl.init();\n\n\t\tif ( _interpreter == null )\n\t\t\ttry {\n\t\t\t\t//KermetaUnit kermetaUnit = RunnerHelper.getKermetaUnitToExecute(Constants.TEST_COMP_BEHAVIOR_LAUNCHER);\n\t\t\t\tMap<String, Object> options = new HashMap<String, Object>();\n\t\t\t\t//options.put( InterpreterOptions.MERGE, false );\n\t\t\t\toptions.put( InterpreterOptions.CLEAN_AT_END, false);\n\t\t\t\t_interpreter = new Interpreter(Constants.TEST_COMP_BEHAVIOR_LAUNCHER, InterpreterMode.RUN, options);\n\t\t\t\t_interpreter.setEntryPoint(\"kermeta::compiler::Main\", \"main\");\n\t\t\t} catch (NotRegisteredURIException e) {\n\t\t\t} catch (URIMalformedException e) {\n\t\t\t}\n\t}\n\t\n\t/**\n\t * \n\t * Once all the tests have been run, unload the program.\n\t * \n\t */\n\t@AfterClass\n\tstatic public void unsetInterpreter() {\n\t\tLoaderPlugin.getDefault().unload( Constants.TEST_COMP_BEHAVIOR_LAUNCHER );\n\t}\n    /*\n\t * \n\t * Ending static code\n\t *  \n\t */\n\t\n    /*\n     * \n     * Beginning dynamic code for each test case\n     * \n     */\n")
 uc.verifiedBy.each{ tc | 
				do
				var pre_suffix : String init tc.uri.replace("http://gforge.inria.fr/plugins/scmcvs/cvsweb.php/kermeta_projects/org.kermeta.compiler.tests/unit_test/", "").replace("/input/kermeta/?cvsroot=kermeta", "")
	
				var suffix : String init pre_suffix.replace("/", "_") 
_res.append("\n\tprivate String test_case_")
_res.append( suffix )
_res.append(" = \"")
_res.append( tc.name )
_res.append("\";\n\t\n\tprivate String input_")
_res.append( suffix )
_res.append(" = \"\";\n\t\n\tprivate String output_")
_res.append( suffix )
_res.append(" = \"\";\n\t\n\tprivate String expected_output_")
_res.append( suffix )
_res.append(" = \"\";\n\t\n\t@Before public void setParams_")
_res.append( suffix )
_res.append("() {\n\t\tString prefix = \"")
_res.append( pre_suffix )
_res.append("\";\n\t\tinput_")
_res.append( suffix )
_res.append(" = Constants.SOURCE_PATH + prefix + \"/\" + KCompilerConstants.INPUT_FOLDER + \"/kermeta/\" + use_case + \"_\" + test_case_")
_res.append( suffix )
_res.append(" + \".km\";\n\t\toutput_")
_res.append( suffix )
_res.append(" = Constants.SOURCE_PATH + prefix + \"/\" + KCompilerConstants.OUTPUT_FOLDER + \"/\" + use_case + \"_\" + test_case_")
_res.append( suffix )
_res.append(" + \".ecore\";\n\t\texpected_output_")
_res.append( suffix )
_res.append(" = Constants.SOURCE_PATH + prefix + \"/\" + KCompilerConstants.EXPECTED_OUTPUT_FOLDER +\"/ecore/\" + use_case + \"_\" + test_case_")
_res.append( suffix )
_res.append(" + \".ecore\";\n\t}\n\t\n\t@Test public void comp_package_test_")
_res.append( suffix )
_res.append("() {\n\t\trun(input_")
_res.append( suffix )
_res.append(", output_")
_res.append( suffix )
_res.append(", expected_output_")
_res.append( suffix )
_res.append(");\n\t}\n")
 end
	} 
_res.append("\t/*\n\t * \n\t * Ending dynamic code for each test case\n\t * \n\t */\n\t\n\t\n\t/*\n\t * \n\t * Beginning static code\n\t *  \n\t */\n\tprivate void run(String input, String output, String expected_output) {\n\t\ttry {\n\t\t\t/*\n\t\t\t * Setting the parameters.\n\t\t\t */\n\t\t\tString[] args = new String[3];\n\t\t\targs[0] = input;\n\t\t\targs[1] = \"\";//trace; path for the generated traceability file.\n\t\t\targs[2] = output;\n\t\t\t_interpreter.setParameters(args);\n\t\t\t\t\n\t\t\t/*\n\t\t\t * Start the interpreter.\n\t\t\t */\n\t   \t\t_interpreter.setStreams( new LocalIOConsole() );\n\t\t\t_interpreter.launch();\n\t\t\t\t\n\t\t\t/*\n\t\t\t * Assertion\n\t\t\t */\n\t\t\tAssert.assertTrue( compare(output, expected_output) );\n\t\t} catch (InitializationError e) {\n\t\t\tAssert.assertTrue(e.getErrorsAsString(), false);\n\t\t}\n\t}\n\t\n\tprivate boolean compare(String output, String expected_output) {\n\t\tboolean result = ! EMFCompareModelHelper.isDifferentAndSaveDiff(expected_output, output,  output + \"_diff.xmi\");\n\t\tif ( ! result )\n\t\t\tresult = DiffHelper.interpreteDiff( output + \"_diff.xmi\" );\n\t\treturn result;\n\t}\n    /*\n\t * \n\t * Ending static code\n\t *  \n\t */\n}")
result := _res.toString
end
}
