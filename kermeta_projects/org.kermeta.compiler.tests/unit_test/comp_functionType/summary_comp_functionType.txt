<para>Design:</para>
<para>A Function Type is called inside another method.</para>

<para>The function type is prettyprinted in a specific static method and called by the method that uses it.</para>

<para>In the context of a lambda expression:</para>

<para>The two methods are generated in a same new Java Class in a "helper" package.</para>

<programlisting>
/** Kermeta source code **/
a.ref.each{ r |
	stdio.writeln(r.toString)
}

/** Java source code **/
// Method that uses the function type
  public static void each(EList String list) {
    for(String it : list) {
      func(it);
    }
  }
  
// The FunctionType prettyprinted in the same Java class
  private static void func(String r) {
    System.out.println(r.toString());
  }
</programlisting>

<para>The call of the method from the original method:</para>
<programlisting>Main_3_Helper.each(a.getRef());</programlisting>

<para>To implement: recursive function types, succession of lambda expressions using self as Target, calling function types from subtype: switch (dynamic linking)</para>