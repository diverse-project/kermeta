@mainClass "naze::Main"
@mainOperation "main"


package naze;
require "printer.kmt"
require "kmLogo.kmt"
using kermeta::standard
using kermeta::utils
class Main
{

	
    operation main() : Void is do 
        // The basic pretty printer
       var bpp : BasicPrettyPrinter init BasicPrettyPrinter.new
        bpp.initialize()
        
        // The class to visit
//        var kmlogo : kmLogo::semanticDomain::Turtle init kmLogo::semanticDomain::Turtle.new
        var kmlogo : kmLogo::actions::Main init kmLogo::actions::Main.new

        // The class do visit
        // var visitable : AClass init AClass.new

		// Print a package content?
		var p : kermeta::language::structure::Package
		p := kermeta::language::structure::Package.new


		// Print a class definition
		var c : kermeta::language::structure::ClassDefinition 
	    var mc : kermeta::language::structure::Class
	    mc ?= kmlogo.getMetaClass
	    c ?= mc.classDefinition
	    
		p ?= c.container
		stdio.write(c.acceptKMStructureVisitor(bpp, 0))
		 
/*		var res : kermeta::standard::String init bpp.visitClassDefinition(c,"")
		stdio.writeln(res)*/
    end
    
}


/** A visitable class 
class VisitableClass inherits kermeta::language::structure::KMStructureVisitable
{
	method acceptKMStructureVisitor<String, String>(v : BasicPrettyPrinter, s : String) : String is do
	end
}*/

/** Comment for 'aclass' */
class AClass  inherits AbstractAClass
{
	attribute a : kermeta::standard::String
	operation initialize() is do
		a :=  "initialized a"
	end
	
	operation testTypedOperation<E>() is do
	
	end
	
}

abstract class AbstractAClass
{
}
