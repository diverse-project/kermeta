@mainClass "kermeta2docbook::Main"
@mainOperation "main"


package kermeta2docbook;


require kermeta
require "platform:/resource/fr.irisa.triskell.kermeta.samples/kermeta2doc/kermeta/kermeta2docbook.kmt"
using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard
using kermeta::persistence

/*

*/
class Main
{
    operation main() : Void is do 
        var inputModel : ModelingUnit init loadClassModel
        
        var transfo : Kermeta2DocbookVisitor init Kermeta2DocbookVisitor.new

		transfo.initialize()
        
        stdio.write("Begin\n")
       	inputModel.packages.each{ p | stdio.writeln(transfo.accept(p,0)) }
        stdio.write("\nEnd\n")        
    end
    
    operation loadClassModel() : ModelingUnit is do             
   		var repository : EMFRepository init EMFRepository.new             
   		var resource : Resource init repository.createResource("platform:/resource/fr.irisa.triskell.kermeta.samples/kmlogo/kermeta/kmLogo.km", "http://www.kermeta.org/kermeta/1_0_0//kermeta" )
       
       stdio.writeln("Loading resource...")
       resource.load()      
       stdio.writeln("Resource loaded...")
       result := ModelingUnit.new
       from var it : Iterator<Object> init resource.instances.iterator
       until it.isOff
       loop
           var next : Object init it.next
           if ( ModelingUnit.isInstance(next) ) then 
           		var aModelingUnit : ModelingUnit 
           		aModelingUnit ?= next
           		result := aModelingUnit
           end
       end
       
   end
    
}