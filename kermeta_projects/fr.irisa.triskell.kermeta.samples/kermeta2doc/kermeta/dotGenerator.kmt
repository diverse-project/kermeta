@mainClass "kdoc::Main"
@mainOperation "main"


package kdoc;


require kermeta
require "platform:/plugin/fr.irisa.triskell.kermeta/lib/kermeta_java.ecore"


using kermeta::standard

using kermeta::reflection
using kermeta::language::behavior
using kermeta::persistence
using kermeta::utils

class Main
{
    operation main() : Void is do 
        

        var path : String init "platform:/plugin/fr.irisa.triskell.kermeta/lib/framework.km"
        stdio.write("loading model...")
        var model : Collection<Package> init loadModel(path)
        stdio.writeln("OK")
        
        var g : DotGenerator init DotGenerator.new
        
        var res : String init
        g.diagramForPackage(model.one.nestedPackage.select{ p | p.name == "kunit" }.one)
    
    	stdio.writeln(res)
    	
    end
    
    
    operation loadModel(path : String) : Collection<Package> is do
    	var repository : EMFRepository init EMFRepository.new             
   		var resource : Resource init repository.createResource(path, "platform:/plugin/fr.irisa.triskell.kermeta/lib/kermeta_java.ecore")     
   		
 	   resource.load() 
 	   result :=  Set<Package>.new
       from var it : Iterator<Object> init resource.instances.iterator
       until it.isOff
       loop
           var next : Object init it.next
           if (Package.isInstance(next)) then 
           		var aPackage : Package 
           		aPackage ?= next
           		result.add(aPackage)
           end
       end
    end
}

class DotGenerator {
	
	/**
	 * The operation returns the class diagram of the
	 * given package in dot textual format
	 */
	operation diagramForPackage(pack : Package) : String is do
		result := ""
		var classes : Hashtable<GenericTypeDefinition, String> init Hashtable<GenericTypeDefinition, String>.new
		// Get all the classes of the package an give them 
		// an ID (c0, c1, ..., cn)
		var i : Integer init 0
		var cls : ClassDefinition
		pack.ownedTypeDefinition.each{ c | 
			if ClassDefinition.isInstance(c) then
				cls ?= c
				classes.put(cls, "c" + i.toString)
				i := i+1
			end
		}
		
		// generate for each class
		from var it : Iterator<GenericTypeDefinition> init classes.keyIterator
		until it.isOff
		loop
			// filter out the GenericType tht aren't ClassDefinition
			var cd : ClassDefinition
			cd ?= it.next
			if cd != void then 
				result := result + dotForClass(cd, classes) 
			end
		end
	end

	operation multAsStr(m : MultiplicityElement) : String is do
		var u : Integer init m.upper
		var l : Integer init m.lower
		
		
		result :=
					if u == 1 and l == 0 then "1"
					else if u == -1 and l == 0 then "*"
					else l.toString + ".." + u.toString	end end
		
	end

	/** 
	 * Generate the dot fragment for a classe
	 */
	operation dotForClass(c : ClassDefinition, classes : Hashtable<GenericTypeDefinition, String>) : String is do
		var assos : String init ""
		var q : String init "\"x".substring(1,2)
		result := classes.getValue(c) + " [label="+q+"{" + c.name + "\\" + "n" + "|"
		// attributes and associations
		c.ownedAttribute.each{ p |
			if Class.isInstance(p.type) then
				var cls : Class cls ?= p.type
				if classes.getValue(cls.typeDefinition) != void then
					// an association
					assos := assos + classes.getValue(c) + " -> " + classes.getValue(cls.typeDefinition) + "[taillabel="+q+""+q+", label="+q+""+
					p.name+""+q+", headlabel="+q+""+q+", fontname="+q+"Helvetica"+q+", fontcolor="+q+"black"+
					q+", fontsize=10.0, color="+q+"black"+q+", arrowhead=vee, arrowtail=" + if p.isComposite then "diamond" else "none" end + "];\n"
					//c3 -> c4 [taillabel="1..*", label="Member", headlabel="*", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=none, arrowtail=ediamond];
				else
					// an attribute
					result := result + p.name + " : " + cls.typeDefinition.name + "\\l"
					
				end
			else
				// an attribute
				var t : kermeta::language::structure::PrimitiveType
				t ?= p.type
				if t != void then
					result := result + p.name + " : " + t.name + "\\l"
				end
			end
		}
		result := result + "| "
		// operations
		c.ownedOperation.each{ o | 
			result := result + o.name + "()\\l"
		}
		result := result + "}"+q+", fontname="+q+"Helvetica"+q+", fontcolor="+q+"black"+q+", fontsize=10.0];\n"
		//c3 [label="{School\n|name : Name\laddress : String\lphone : Number\l|addStudent()\lremoveStudent()\lgetStudent()\lgetAllStudents()\laddDepartment()\lremoveDepartment()\lgetDepartment()\lgetAllDepartments()\l}", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		result := result + assos
		// super classes :
		c.superType.each{ st | 
			var sc : Class sc := st
			if classes.getValue(sc.typeDefinition) != void then
				result := result + classes.getValue(sc.typeDefinition) + " -> " + classes.getValue(c) + "[dir=back,arrowtail=empty];\n"
			end
		}
	end

}

