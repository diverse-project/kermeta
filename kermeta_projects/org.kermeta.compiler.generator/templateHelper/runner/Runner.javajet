<%@jet
	 package="org.kermeta.compiler.generator.templates"
	 imports="java.util.* org.eclipse.emf.ecore.* org.eclipse.emf.codegen.util.* org.eclipse.emf.ecore.util.* org.eclipse.emf.codegen.ecore.genmodel.* fr.irisa.triskell.eclipse.ecore.* org.kermeta.simk.*"
	 class="Runner"
	 skeleton="../../skeleton/3param.skeleton"
	 version="$Id: Runner.javajet,v 1.11 2008-10-16 09:04:36 cfaucher Exp $" %>
<%String modelProjectDirectory = (String) argument0;%>
<%String workspaceLocationUri = (String) argument1;%>
<%SMMethod sm = (SMMethod) argument2;%>

/* $Id: Runner.javajet,v 1.11 2008-10-16 09:04:36 cfaucher Exp $
 * This file has been generated by the compiler of Kermeta (http://www.kermeta.org)
 */

package <%=sm.getSMContext().getFinalPackageQName()%>;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.impl.ExtensibleURIConverterImpl;
import org.kermeta.compil.runtime.ExecutionContext;
import org.kermeta.compil.runtime.PersistenceMapping;
import org.kermeta.compil.runtime.helper.persistence.SaverOrLoader;

/**
 * A Stub of a Java Application Runner for a Kermeta runnable method
 *
 * @generated
 */
public class <%=sm.getSMContext().getSMClass().getName()%> {

	//Main for standalone context
	public static void main(String [] args) {
	
		ExtensibleURIConverterImpl.URI_MAP.put(
				URI.createURI("platform:/resource/"),
				URI.createURI("<%=workspaceLocationUri%>/")
			);
		
		//Put here the pathes to the metamodel stored in an ecore file that are required for loading and saving issues
		//Uncomment the following line and replace
		//SaverOrLoader.registerEcoreMetamodel("platform:/resource/<myproject>/<>/<myMetaModel>.ecore");
		//SaverOrLoader.registerEcoreMetamodel("/home/<>/<myproject>/<>/<myMetaModel>.ecore");
		
		//Initialize the persistence mapping
		PersistenceMapping.initialize();
		
		//Initialize the reflection
		ExecutionContext.getInstance().lazyInitialize();
		
		<%=sm.getBody()%>
		
	}
	
	//Main for deployed version in Eclipse
	public static void main_forDeployedVersion(String [] args) {
			
		//Initialize the persistence mapping
		PersistenceMapping.initialize();
		
		//Initialize the reflection
		ExecutionContext.getInstance().lazyInitialize();
		
		<%=sm.getBody()%>
		
	}
	

}
