<%@jet
	 package="org.kermeta.compiler.generator.templates"
	 imports="java.util.* org.eclipse.emf.ecore.* org.eclipse.emf.codegen.util.* org.eclipse.emf.ecore.util.* org.eclipse.emf.codegen.ecore.genmodel.* fr.irisa.triskell.eclipse.ecore.* org.kermeta.simk.*"
	 class="Runner"
	 version="$Id: Runner.javajet,v 1.5 2008-07-23 15:13:53 cfaucher Exp $" %>
<%StaticMethod sm = (StaticMethod) argument;%>

/* $Id: Runner.javajet,v 1.5 2008-07-23 15:13:53 cfaucher Exp $
 * This file has been generated by the compiler of Kermeta (http://www.kermeta.org)
 */

package <%=sm.getSMContext().getDeepestPackage().getQualifiedName()%>.runner;

import <%=sm.getSMContext().getDeepestPackage().getQualifiedName()%>.<%=CodeGenUtil.capName(sm.getSMContext().getDeepestPackage().getName())%>Factory;

/**
 * A Stub of a Java Application Runner for a Kermeta runnable method
 *
 * @generated
 */
public class <%=CodeGenUtil.capName(EcoreHelper.getQualifiedName((ENamedElement) sm.getParentMethodFromModel(), "__"))%>_Runner {

	public static void main(String [] args) {
	
		<%
		// 1 - URI map configuration in order to use platform:/* scheme
		// 	ex: ExtensibleURIConverterImpl.URI_MAP.put( URI.createURI("platform:/resource"), URI.createURI("/home/paco/bla"));
		// 2 - Initializing persistence mapping for loading and saving models
		%>
		<%=CodeGenUtil.capName(sm.getSMContext().getDeepestPackage().getName())%>Factory.eINSTANCE.create<%=sm.getSMContext().getSMClass().getName()%>().<%=sm.getParentMethodFromModel().getName()%>(
		<%
			for( int i=0 ; i<sm.getSMParameters().size() ; i++) {
				if(i>0) {
					%>, <%
				}%>
				args[<%=i%>]<%}%>);
	}

}
