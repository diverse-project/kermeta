/* $Id: IntegerLiteralTest.kmt,v 1.1 2008-07-11 09:13:47 ftanguy Exp $ 
 * Creation : July 10, 2008
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            paco
 */
@mainClass "kermeta::compiler::test::IntegerLiteralTest"
@mainOperation "main"


package kermeta::compiler::test;


require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/pass2/CreateBehavior.kmt"

using kermeta::kunit
using kermeta::language::behavior
using km2ecore
using kermeta::standard
using kermeta::exceptions

class IntegerLiteralTest inherits TestCase {

	operation main() is do
		var runner : TestRunner init TestRunner.new
		runner.run(IntegerLiteralTest)
		runner.printTestResult
	end

	reference context : KM2EcoreContext
	
	method setUp() is do
		context := KM2EcoreContext.new
		do
			context.initialize(void, void)
		rescue (e : Exception)
		end
	end

	operation testPositiveNumber() is do
		var il : IntegerLiteral init IntegerLiteral.new
		il.~value := 1
		stdio.writeln( il.createBehaviorJava(context) )
		self.assert(il.createBehaviorJava(context) == "1")
	end

	operation testNegativeNumber() is do
		var il : IntegerLiteral init IntegerLiteral.new
		il.~value := -1
		stdio.writeln( il.createBehaviorJava(context) )
		self.assert(il.createBehaviorJava(context) == "-1")
	end
	
	operation testZeroNumber() is do
		var il : IntegerLiteral init IntegerLiteral.new
		il.~value := 0
		stdio.writeln( il.createBehaviorJava(context) )
		self.assert(il.createBehaviorJava(context) == "0")
	end
}