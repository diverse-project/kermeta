/* $Id: RescueTest.kmt,v 1.1 2008-07-11 09:13:46 ftanguy Exp $ 
 * Creation : July 10, 2008
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            paco
 */
@mainClass "kermeta::compiler::test::RescueTest"
@mainOperation "main"


package kermeta::compiler::test;


require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/pass2/CreateBehavior.kmt"

using kermeta::kunit
using kermeta::language::behavior
using km2ecore
using kermeta::standard
using kermeta::exceptions

class RescueTest inherits TestCase {

	operation main() is do
		var runner : TestRunner init TestRunner.new
		runner.run(RescueTest)
		runner.printTestResult
	end

	reference context : KM2EcoreContext
	
	method setUp() is do
		context := KM2EcoreContext.new
		do
			context.initialize(void, void)
		rescue (e : Exception)
		end
	end

	operation testRescue() is do
		var r : Rescue init Rescue.new
		r.exceptionName := "e"
		var tr : TypeReference init TypeReference.new
		tr.name := "CallOnVoidTarget"
		tr.type := kermeta::exceptions::CallOnVoidTarget
		tr.isOrdered := false
		tr.isUnique := false
		tr.lower := 0
		tr.upper := 1
		r.exceptionType := tr
		stdio.writeln( r.createBehaviorJava(context) )
		self.assert(r.createBehaviorJava(context) == "catch (kermeta.exceptions.CallOnVoidTarget e) {\n}")
	end

}