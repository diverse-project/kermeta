/* $Id: BlockTest.kmt,v 1.2 2008-07-11 10:16:52 ftanguy Exp $ 
 * Creation : July 10, 2008
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            paco
 */
@mainClass "kermeta::compiler::test::BlockTest"
@mainOperation "main"


package kermeta::compiler::test;


require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/pass2/CreateBehavior.kmt"
require "TestUtil.kmt"

using kermeta::kunit
using kermeta::language::behavior
using km2ecore
using kermeta::standard
using kermeta::exceptions

class BlockTest inherits TestCase {

	operation main() is do
		var runner : TestRunner init TestRunner.new
		runner.run(BlockTest)
		runner.printTestResult
	end

	reference context : KM2EcoreContext
	
	method setUp() is do
		context := KM2EcoreContext.new
		do
			context.initialize(void, void)
		rescue (e : Exception)
		end
	end


	operation testBlockWithoutExpressionsAndWithoutRescues() is do
		var b : Block init Block.new
		stdio.writeln( b.createBehaviorJava(context) )
		self.assert(b.createBehaviorJava(context) == "")
	end

	operation testBlockWithoutExpressions() is do
		var r : Rescue init Rescue.new
		r.exceptionName := "e"
		var tr : TypeReference init TypeReference.new
		tr.name := "CallOnVoidTarget"
		tr.type := kermeta::exceptions::CallOnVoidTarget
		tr.isOrdered := false
		tr.isUnique := false
		tr.lower := 0
		tr.upper := 1
		r.exceptionType := tr
		var b : Block init Block.new
		b.rescueBlock.add(r)
		var s : String init TestUtil.new.trim( b.createBehaviorJava(context) )
		stdio.writeln( s )
		self.assert(s == "try {\n} } catch( org.kermeta.compil.runtime.helper.exception.KRuntimeException ex_switcher ) {
if( ex_switcher.getRealException() instanceof kermeta.exceptions.CallOnVoidTarget ) {
kermeta.exceptions.CallOnVoidTarget e = (kermeta.exceptions.CallOnVoidTarget) ex_SWITCHER.getRealException();}")
	end
		
}