/* $Id: RaiseTest.kmt,v 1.1 2008-07-11 10:16:52 ftanguy Exp $ 
 * Creation : July 10, 2008
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            paco
 */
@mainClass "kermeta::compiler::test::RaiseTest"
@mainOperation "main"


package kermeta::compiler::test;


require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/pass2/CreateBehavior.kmt"

using kermeta::kunit
using kermeta::language::behavior
using kermeta::language::structure
using km2ecore
using kermeta::standard
using kermeta::exceptions

class RaiseTest inherits TestCase {

	operation main() is do
		var runner : TestRunner init TestRunner.new
		runner.run(RaiseTest)
		runner.printTestResult
	end

	reference context : KM2EcoreContext
	
	method setUp() is do
		context := KM2EcoreContext.new
		var mu : ModelingUnit
		mu ?= RaiseTest.getMetaClass().typeDefinition.container.container.container.container
		
		stdio.writeln( RaiseTest.getMetaClass().typeDefinition.container.container.container.getMetaClass().typeDefinition.name )
		
		if ( mu.isVoid ) then
			stdio.writeln( "oups")
		end
		do
			context.initialize(void, void)
		rescue (e : Exception)
		end
	end


	operation testRaise() is do
		var r : Raise init Raise.new
		
		var tr : TypeReference init TypeReference.new
		tr.name := "CallOnVoidTarget"
		tr.type := kermeta::exceptions::CallOnVoidTarget
		tr.isOrdered := false
		tr.isUnique := false
		tr.lower := 0
		tr.upper := 1
		var tl : TypeLiteral init TypeLiteral.new
		tl.typeref := tr
		
		var cf : CallFeature init CallFeature.new
		cf.target := tl
		cf.staticOperation := kermeta::exceptions::CallOnVoidTarget.getMetaClass().ownedOperation.detect{ o | o.name == "new" }
		
		r.expression := cf
		
		var s : String init r.createBehaviorJava(context)
		stdio.writeln( s )
		self.assert(s == "try {\n} finally {\n}")
	end
		
}