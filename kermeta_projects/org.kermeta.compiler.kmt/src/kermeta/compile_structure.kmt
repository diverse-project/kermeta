package kermeta::language::structure;
 
require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "compile_behavior.kmt"
require "containment_traversable.kmt"
require "trace_structure.kmt"
require "compile_helper.kmt"
require "compile_builder.kmt"
  
using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard
using kermeta::utils
using ecore
using compile::helper

aspect class Object {
	operation compile(context : Integer) : String is do
		result := ""
		//stdio.writeln("F7-1: " + self.name)
	end
} 

aspect class ModelingUnit {
	method compile(context : Integer) : String is do
		result := ""
		// Creating the associated ecore package
		var ecoreAnnotation : EAnnotation init build()
		// Setting the ecore proxy
		self.ecoreProxy := ecoreAnnotation
		// Compile the owned elements
		self.eachOwnedElement{ p | p.compile(context) }
		// Getting the ecore packages
		self.packages.each{p|
			self.ecorePackages.add( p.ecoreProxy )
		}
	end
}

aspect class Package {
	method compile(context : Integer) : String is do
		result := ""
		// Creating the associated ecore package
		var ecorePackage : EPackage init build()
		// Setting the container
		var p : Package
		p ?= self.container()
		if ( p != void ) then
			p.ecoreProxy.eSubpackages.add(ecorePackage)
		end
		// Setting the ecore proxy
		self.ecoreProxy := ecorePackage
		// Compile the owned elements
		self.eachOwnedElement{ cd | cd.compile(context) }
	end
}
 
aspect class ClassDefinition {
	method compile(context : Integer) : String is do
		result := ""
		// Creating the associated ecore class
		var ecoreClass : EClass init build()		
		// Setting the container
		var p : Package
		p ?= self.container()
		p.ecoreProxy.eClassifiers.add(ecoreClass)
		// Setting the ecore proxy
		self.ecoreProxy := ecoreClass
		// Compile the owned elements
		self.eachOwnedElement{ o | o.compile(context) }
	end
	
}

aspect class PrimitiveType {
	method compile(context : Integer) : String is do
		result := ""
	end
}
  
aspect class Property {
	method compile(context : Integer) : String is do
		result := ""
		stdio.writeln("coucou")
		// Creating the associated ecore class
		var ecoreStructuralFeature : EStructuralFeature init build()
		// Setting the container
		var c : ClassDefinition
		c ?= self.container()
		c.ecoreProxy.eStructuralFeatures.add( ecoreStructuralFeature )
		// Setting the ecore proxy
		self.ecoreProxy := ecoreStructuralFeature
	end 
}

aspect class Operation {
	method compile(context : Integer) : String is do
		result := ""
		// Creating the associated ecore class
		var ecoreOperation : EOperation init build()
		// Setting the container
		var c : ClassDefinition
		c ?= self.container()
		c.ecoreProxy.eOperations.add(ecoreOperation)
		// Setting the ecore proxy
		self.ecoreProxy := ecoreOperation
		
		var javaCode : StringBuffer init StringBuffer.new
		
		if (self.body != void) then
		
			var type : String init self.type.asType(Type).compile(context)
			if ( type!="Void" and type!="void" ) then
				javaCode.append("\n" + type + " result = null;\n")
			end
			 
			// The Java source code is provided by: self.body.compile(context)
			javaCode.append(self.body.compile(context))
			
			if ( type!="Void" and type!="void" ) then
				javaCode.append("\nreturn result;\n")
			end
		end
		
		// Finally add the EAnnotation containing the Java code in the Ecore model
        CompileHelper.new.addAnnotationGenModelImpl(self.ecoreProxy, javaCode.toString)
	end
}

aspect class Type {
	method compile(context : Integer) : String is do
		result := ""
	end
}