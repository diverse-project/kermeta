/* $Id: Pass2.kmt,v 1.5 2008-02-07 18:20:20 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */


/* 
 *
 *	Because the type setting and the behavior's creation (kmt or java style) can be done at the same time, we can only visit once the model.
 *	So dependending on the visited object, we apply some specific actions and still visiting the contained elements.
 *
 *
 */


package kermeta::language;


require kermeta
require "SetLinks.kmt"
require "CreateBehavior.kmt"
require "../common/containment_traversable.kmt"

package structure {
	
	aspect class Object {
		operation applyPass2() is do
			// Compile the owned elements
			self.eachOwnedElement{ p | p.applyPass2() }
		end
		
		operation applyPass2BehaviorJava() is do
			// Compile the owned elements
			self.eachOwnedElement{ p | p.applyPass2BehaviorJava() }
		end
		
		operation applyPass2BehaviorKmt() is do
			// TODO
		end
	}
	
	class Pass2 {
	}
	
	aspect class ClassDefinition {
		method applyPass2() is do
			self.setLinks() 
			super()
		end
		
		method applyPass2BehaviorJava() is do
			self.setLinks() 
			super()
		end
	}
	
	aspect class Property {
		method applyPass2() is do
			self.setLinks()
			super()
		end
		
		method applyPass2BehaviorJava() is do
			self.setLinks()
			super()
			self.createBehaviorJava(0)
		end
	}
	
	aspect class Operation {
		method applyPass2() is do
			self.setLinks()
			super()
		end
		
		method applyPass2BehaviorJava() is do
			self.setLinks()
			super()
			self.createBehaviorJava(0)
		end
	}
	
	aspect class Parameter {
		method applyPass2() is do
			self.setLinks()
			super()
		end
		
		method applyPass2BehaviorJava() is do
			self.setLinks()
			super()
		end
	}
	
}
/*
package behavior {

	aspect class Expression {
		method applyPass2BehaviorJava() is do
			self.createBehaviorJava(0)
			super()
		end
	}

}*/