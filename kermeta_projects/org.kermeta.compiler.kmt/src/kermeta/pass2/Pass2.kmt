/* $Id: Pass2.kmt,v 1.40 2008-10-22 16:09:16 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */


/* 
 *
 *	Because the type setting and the behavior's creation (kmt or java style) can be done at the same time, we can only visit once the model.
 *	So dependending on the visited object, we apply some specific actions and still visiting the contained elements.
 *
 */


package kermeta::language;

require kermeta
require "SetLinks.kmt"
require "CreateBehavior.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/common/ContainmentTraversable.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "http://www.eclipse.org/emf/2002/Ecore"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/kermeta/KermetaHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/ecore/EcoreHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/java/JavaHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/simk/SimkHelper.kmt"

using km2ecore
using ecore
using km2ecore::helper::ecore
using km2ecore::helper::java
using simk

package structure {
	
	aspect class Object {
		operation applyPass2(context : KM2EcoreContext) is do
			// Compile the owned elements
			self.eachOwnedElement{ p |
				if p.getDeprecated() == "" then
					p.applyPass2(context)
				end
			}
		end
		
		operation applyPass2BehaviorJava(context : KM2EcoreContext) is do
			// Compile the owned elements
			self.eachOwnedElement{ p |
				p.applyPass2BehaviorJava(context)
			}
		end
		
		operation applyPass2BehaviorKmt(context : KM2EcoreContext) is do
			// TODO
		end
	}
	
	//FIXME CF - Start TO REMOVE //
	aspect class ModelingUnit {
		method applyPass2BehaviorJava(context : KM2EcoreContext) is do
			// Compile the owned elements
			self.eachOwnedElement{ p |
				p.applyPass2BehaviorJava(context)
			}
		end	
	}
	aspect class Package {
		method applyPass2BehaviorJava(context : KM2EcoreContext) is do
			// Compile the owned elements
			self.eachOwnedElement{ p |
				p.applyPass2BehaviorJava(context)
			}
		end	
	}
	// End TO REMOVE //
	
	aspect class ClassDefinition {
		method applyPass2(context : KM2EcoreContext) is do			
			self.setLinks(context) 
			super(context)
		end
		
		method applyPass2BehaviorJava(context : KM2EcoreContext) is do
		
			if not self.isAddedValueType() then
				self.setLinks(context)
			end
			
			// Case of this ClassDefinition is a ValueType
			if self.isValueType() and (self.name != "Numeric") then //Numeric is excluded, because this one is abstract
				context.current_valueType := self
				self.ownedOperation.each{ op |
					op.applyPass2BehaviorJava(context)
				}
				
				// We assume a subtype of ValueType inherits directly (not several inheritance levels)
			    self.superType.each{ t | 
			    	if Class.isInstance(t) then
			    		var c : Class
			    		c ?= t
			    		var cDef : ClassDefinition
				    	cDef ?= c.typeDefinition
			    		cDef.allOperation.each{ p |
			    			// The operations having the tag: 'RecopyInValueTypes' must be recopied in each ClassDefinition
			    			// that inherits from ValueType
			    			if p.getRecopyInValueTypes()=="true" then 
								p.applyPass2BehaviorJava(context)
							end
						}
			    	end
				}
				
				context.current_valueType := void
			else
				if not self.isAddedValueType() then
					//FIXME CF TO REMOVE super(context)
					self.eachOwnedElement{ p |
						p.applyPass2BehaviorJava(context)
					}
				end
			end
			
			// The current ClassDefinition needs a new property to implement special structure in Java like Collection, Hashtable
			// Thus, for Collection a EReference: 'values' is added during the compilation time
			initEmfNeedProperty(context)
					
		end
		
		operation isAddedValueType() : Boolean is do
			result := false
			var qName : String init self.qualifiedName()
			if qName == "kermeta::standard::String"
					or qName == "kermeta::standard::Integer"
					or qName == "kermeta::standard::Boolean"
					or qName == "kermeta::standard::Character"
					or qName == "kermeta::standard::Real" then
				result := true
			end
		end
		
		operation initEmfNeedProperty(context : KM2EcoreContext) : Void is do
			self.getEMFNeedProperty().each{ emfNeedProperty |
			
				if emfNeedProperty.getPropertyInfos().size()>0 then
					
					// Create a new EAttribute to store the collection
					var newProperty : EStructuralFeature init EAttribute.new
					
					// A Java Class is specified
					if (not emfNeedProperty.getPropertyInfos().getValue("javaClass").isVoid()) and (emfNeedProperty.getPropertyInfos().getValue("javaClass")!="") then
					
						newProperty := EAttribute.new
						newProperty.name := emfNeedProperty.getPropertyInfos().getValue("name")
						newProperty.transient := false
						
						var newProperty_EDataType : EDataType init EDataType.new
						newProperty_EDataType.name := "KermetaProperty_" + self.name + "_" + emfNeedProperty.getPropertyInfos().getValue("name")
						newProperty_EDataType.instanceClassName := emfNeedProperty.getPropertyInfos().getValue("javaClass")
						
						self.container.asType(Package).ecoreModelElement.eClassifiers.add(newProperty_EDataType)
						
						var newJavaCollection_EGenericType : EGenericType init EGenericType.new()
						newJavaCollection_EGenericType.eClassifier := newProperty_EDataType
						newProperty.eGenericType := newJavaCollection_EGenericType
						
						if (not self.ecoreModelElement.eTypeParameters.isVoid()) and (self.ecoreModelElement.eTypeParameters.size()>0) then
							self.ecoreModelElement.eTypeParameters.each{ etp |
								var newEtp : ETypeParameter init ETypeParameter.new()
								newEtp.name := etp.name
								newProperty_EDataType.eTypeParameters.add(newEtp)
								
								var eta : EGenericType init EGenericType.new()
								
								eta.eTypeParameter := etp
								newProperty.eGenericType.eTypeArguments.add(eta)
							}
						end
						
					else
						// A ClassDefinition is specified
						if (not emfNeedProperty.getPropertyInfos().getValue("classDefinitionQN").isVoid()) and (emfNeedProperty.getPropertyInfos().getValue("classDefinitionQN")!="") then
						
							newProperty := EReference.new
							newProperty.name := emfNeedProperty.getPropertyInfos().getValue("name")
							newProperty.transient := false
							
							var retrieved_EClassifier : EClassifier init context.mu.getEClassifierByQualifiedName(emfNeedProperty.getPropertyInfos().getValue("classDefinitionQN"))
							
							var newJavaCollection_EGenericType : EGenericType init EGenericType.new()
							newJavaCollection_EGenericType.eClassifier := retrieved_EClassifier
							newProperty.eGenericType := newJavaCollection_EGenericType
							
							if (not self.ecoreModelElement.eTypeParameters.isVoid()) and (self.ecoreModelElement.eTypeParameters.size()>0) then
							self.ecoreModelElement.eTypeParameters.each{ etp |
								
								var eta : EGenericType init EGenericType.new()
								
								eta.eTypeParameter := etp
								newProperty.eGenericType.eTypeArguments.add(eta)
							}
							end
					
						else
							// Nothing is specified
							newProperty.transient := true
							var retrievedTypeDef : TypeDefinition init context.mu.getTypeDefinitionByQualifiedName("ecore::EEList")
							if retrievedTypeDef.isInstanceOf(ClassDefinition) then
								newProperty.eType := retrievedTypeDef.asType(ClassDefinition).ecoreModelElement
							else
								if retrievedTypeDef.isInstanceOf(PrimitiveType) then
									newProperty.eType := retrievedTypeDef.asType(PrimitiveType).ecoreModelElement
								end
							end
						
						end
					
					end
					
					self.ecoreModelElement.asType(EClass).eStructuralFeatures.add(newProperty)
					
				end
			
			}
		end
	}
	
	aspect class Property {
		method applyPass2(context : KM2EcoreContext) is do
			self.setLinks(context)
			super(context)
		end
		
		method applyPass2BehaviorJava(context : KM2EcoreContext) is do
			self.setLinks(context)
			//FIXME CF TO REMOVE super(context)
			self.eachOwnedElement{ p |
				p.applyPass2BehaviorJava(context)
			}
			self.createBehaviorJava(context)
		end
	}
	
	aspect class Operation {
		method applyPass2(context : KM2EcoreContext) is do
			if not self.isFunctionType() then
				self.setLinks(context)
				super(context)
			end
		end
		
		method applyPass2BehaviorJava(context : KM2EcoreContext) is do
			if not self.isFunctionType() then
				if context.current_valueType.isVoid() then
				
					self.setLinks(context)
					
					//FIXME CF TO REMOVE super(context)
					self.eachOwnedElement{ p |
						p.applyPass2BehaviorJava(context)
					}
					
					//DO NOT REMOVE the following commented source code
					//if not self.isAbstract then
						self.createBehaviorJava(context)
					//else
						//self.container.asType(ClassDefinition).ecoreModelElement.~abstract := true
						/*if not Operation.new().isVoidType(self.type.getTypeQName()) then
							EAnnotationHelper.new.addAnnotationGenModelImpl(self.ecoreModelElement, self.type.createBehaviorJava(context) + " result = null;\nreturn result;")
						end*/
					//end
					
					// Create the Simk (Static Indirection) context
					// and the corresponding body of the Java Main Class
					if self.isRunnable() then
						var smContext : SMContext init context.simkModel.retrieveOrCreateContextForRunner(self, context)
						var staticMethod : SMMethod init SMMethod.new()
						
						var cd_qn : String init self.container.asType(ClassDefinition).qualifiedName().replace("::", ".")
						
						staticMethod.name := "main"
						staticMethod.body := "\n" +
							cd_qn + " anExec = (" + cd_qn + ")" +
							 " org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(\"" + cd_qn + "\");" +
							"\nanExec." + IdentifierHelper.new.getMangledIdentifier(self.getFinalName(), context) + "("
						
						var i : Integer init 0
						self.ownedParameter.each{ params |
							if i>0 then
								staticMethod.body := staticMethod.body + ", "
							end
							staticMethod.body := staticMethod.body + " args[" + i.toString() + "]"
							i := i+1
						}
						staticMethod.body := staticMethod.body + ");\n"
						staticMethod.usages := SMUsage.Runner
						
						//adding to the simk model
						context.simkModel.sMMethods.add(staticMethod)
						//linking to the context
						smContext.sMMethods.add(staticMethod)
					end
					
				else
					self.compilingInSimkMode(context)
				end
			end
		end
	}
	
	aspect class Parameter {
		method applyPass2(context : KM2EcoreContext) is do
			self.setLinks(context)
			super(context)
		end
		
		method applyPass2BehaviorJava(context : KM2EcoreContext) is do
			self.setLinks(context)
			//FIXME CF TO REMOVE super(context)
			self.eachOwnedElement{ p |
				p.applyPass2BehaviorJava(context)
			}
		end
	}
	
	aspect class Constraint {
		method applyPass2(context : KM2EcoreContext) is do
			super(context)
		end
		
		method applyPass2BehaviorJava(context : KM2EcoreContext) is do
			if self.stereotype == ConstraintType.~inv then
				self.setSimkForInvariant(context)
			end
		end
	}
	
}
