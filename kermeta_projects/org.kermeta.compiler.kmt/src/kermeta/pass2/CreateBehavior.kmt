/* $Id: CreateBehavior.kmt,v 1.8 2008-02-22 12:27:53 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */

package kermeta::language;

require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "../helper/KM2EcoreHelper.kmt"

using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard
using kermeta::utils
using ecore
using km2ecore::helper::ecore
using kermeta::language::compilerhelper

package structure {

	aspect class Object {
		operation createBehaviorJava(context : Integer) : String is do
			result := ""
		end
	}
	
	/** We have to visit property in order to print the behavior of the getter and setter */
	aspect class Property {
		method createBehaviorJava(context : Integer) : String is do
			result := void
			// Set the traceability
			
			// The current property is derived
			if self.isDerived then
				// The current property could have a setter
				if not self.isReadOnly then
					// todo compile the setter in an EAnnotation
				end
				// todo compile the getter in an EAnnotation
			end
		end
	}
	
	/** We have to visit operation in order to print the result initialization and the return statement */
	aspect class Operation {
		method createBehaviorJava(context : Integer) : String is do
			result := void
			// Set the traceability
			self.ecoreModelElement := EcoreModelElementHelper.new.findEOperationProxy( self )
			
			var javaCode : StringBuffer init StringBuffer.new
			stdio.writeln(self.name + " --- " + self.type.toString)
			
			// the body of the operation must be filled for being compiled
			if ( not self.body.isVoid() ) then
				var type_label : String init self.type.createBehaviorJava(context)
				
				// result is initialized only if the "return type" is not Void
				if ( type_label!="Void" and type_label!="VoidType" ) then
					javaCode.append("\n" + type_label + " result = null;\n")
				end
		
				// The Java source code is provided by: self.body.createBehaviorJava(context)
				javaCode.append(self.body.createBehaviorJava(context))
				
				// result is returned only if the "return type" is not Void
				if ( type_label!="Void" and type_label!="VoidType" ) then
					javaCode.append("\nreturn result;\n")
				end
			end
			
			// Finally add the EAnnotation containing the Java code in the Ecore model
	        EAnnotationHelper.new.addAnnotationGenModelImpl(self.ecoreModelElement, javaCode.toString)
	        
	        result := javaCode.toString
		end
	}
	
	aspect class Type {
		method createBehaviorJava(context : Integer) : String is do
			result := ""
		end
	}
	
	aspect class VoidType {
		method createBehaviorJava(context : Integer) : String from Type is do
			result := "Void" // the VoidType is "normally" mapped to the Void class
		end
	}
	
	aspect class PrimitiveType {
		method createBehaviorJava(context : Integer) : String is do
			result := self.instanceType.createBehaviorJava(context) // self.instanceType should be a ParameterizedType
		end
	}
	
	aspect class ParameterizedType {
		method createBehaviorJava(context : Integer) : String from Type is do
			result := self.typeDefinition.name
		end
	}
	
	/*aspect class ObjectTypeVariable {
		method createBehaviorJava(context : Integer) : String is do
			result := "//TODO\n" + self.toString
		end
	}*/
	
}

package behavior {

	aspect class Expression {
		method createBehaviorJava(context : Integer) : String is do
			result := "//TODO content of the current expression\n" + self.toString + "\n\n"
		end
	}
	
	aspect class Block {
		method createBehaviorJava(context : Integer) : String from Expression is do
			result := "{"
			self.statement.each{ stm |
				result.append(stm.createBehaviorJava(context))
			}
			result.append("}")
		end
	}
	
	aspect class CallResult {
		method createBehaviorJava(context : Integer) : String is do
			result := "result"
		end
	}
	
	aspect class Rescue {
		method createBehaviorJava(context : Integer) : String is do
			result := "catch"
			if not self.exceptionName.isVoid() then
				result := result + "(" + self.exceptionName + " : " + self.exceptionType.createBehaviorJava(context) + ")"
			end
			result := result + "\n{"
			//pushPrefix();
			result := result + self.body.createBehaviorJava(context) + "}"
			//popPrefix();
		end
	}
	
	aspect class SelfExpression {
		method createBehaviorJava(context : Integer) : String from Expression is do
			result := "this"
		end
	}
	
	aspect class Conditional {
		method createBehaviorJava(context : Integer) : String from Expression is do
			result := "if( " + self.condition.createBehaviorJava(context) + ") {\n"
			//pushPrefix(); 
			// Both type of ThenBody and ElseBody are "Block" (see also KMT2KMPrimitiveExpressionBuilder)
			// And block textual syntax is already represented by "then..else..end"
			//alreadyPrefixed = false;
			if not self.thenBody.isVoid() then 
				result := result + self.thenBody.createBehaviorJava(context) + "\n"
			//popPrefix();
			end
			if not self.elseBody.isVoid() then
				result := result + /*getPrefix() +*/ "} else {\n"
				//pushPrefix();
				result := result + self.elseBody.createBehaviorJava(context) + "\n"
				//popPrefix();
			end
			result := result + /*getPrefix() +*/ "}"
		end
	}
	
	aspect class JavaStaticCall {
		method createBehaviorJava(context : Integer) : String from Expression is do
			//result := self.jclass.replace("::", ".") + "." + KMTHelper.getMangledIdentifier(node.getJmethod()) + "("
			//result := result + ppComaSeparatedNodes(node.getParameters());
			result := result + ")"
		end
	}
	
}

package compilerhelper {
	/** unused for the moment */
	class CompilerHelper {
		operation ppCRSeparatedNode(expressions : OrderedSet<Expression>, context : Integer) : String is do
			result := ""
			expressions.each{e |
				result := result + e.createBehaviorJava(context)
			}
		end
	}
}