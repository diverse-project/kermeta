/* $Id: CreateBehavior.kmt,v 1.3 2008-02-01 17:31:16 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Fran√ßois Tanguy <ftanguy@irisa.fr>
 */


package kermeta::language;


require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "../helper/KM2EcoreHelper.kmt"

using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard
using kermeta::utils
using ecore
using km2ecore::helper::ecore

package structure {

	aspect class Object {
		operation createBehaviorJava(context : Integer) : String is do
			result := ""
		end
	}
	
	aspect class Property {
		method createBehaviorJava(context : Integer) : String is do
			result := void
			// Set the traceability
			
			// The current property is derived
			if self.isDerived then
				// The current property could have a setter
				if not self.isReadOnly then
					// todo compile the setter in an EAnnotation
				end
				// todo compile the getter in an EAnnotation
			end
		end
	}
	
	// We have to visit operation in order to print the result initialization and the return statement
	aspect class Operation {
		method createBehaviorJava(context : Integer) : String is do
			result := void
			// Set the traceability
			self.ecoreModelElement := EcoreModelElementHelper.new.findEOperationProxy( self )
			
			var javaCode : StringBuffer init StringBuffer.new
			
			if ( self.body != void ) then
				var type : String init self.type.asType(Type).createBehaviorJava(context)
				if ( type!="Void" ) then
					javaCode.append("\n" + type + " result = null;\n")
				end
				
				// The Java source code is provided by: self.body.createBehaviorJava(context)
				javaCode.append(self.body.createBehaviorJava(context))
				
				if ( type!="Void" ) then
					javaCode.append("\nreturn result;\n")
				end
			end
			
			// Finally add the EAnnotation containing the Java code in the Ecore model
	        EAnnotationHelper.new.addAnnotationGenModelImpl(self.ecoreModelElement, javaCode.toString)
	        
	        result := javaCode.toString
		end
	}
	
	aspect class Type {
	method createBehaviorJava(context : Integer) : String is do
		result := "Void"
		stdio.writeln("type self: " + self.toString)
		if self.isInstanceOf(PrimitiveType) then
			stdio.writeln("\ncoucou2\n")
			var pt : kermeta::language::structure::PrimitiveType
			pt ?= self
			result := pt.instanceType.asType(Type).createBehaviorJava(context)
		end

		if self.isInstanceOf(ParameterizedType) then
			//stdio.writeln("\ncoucou2\n")
			var c : Class
			c ?= self
			result := c.typeDefinition.name
		end
	end
}
	
}

package behavior {

	aspect class Expression {
		method createBehaviorJava(context : Integer) : String is do
			result := super(context)
		end
	}
	
	aspect class Block { 

		method createBehaviorJava(context : Integer) : String is do
			result := "{"
			self.statement.each{ stm |
				result.append(stm.createBehaviorJava(context))
			}
			result.append("}")
		end
	
	}
	
	aspect class CallResult {
		method createBehaviorJava(context : Integer) : String is do
			result := "result"
		end
	}

}