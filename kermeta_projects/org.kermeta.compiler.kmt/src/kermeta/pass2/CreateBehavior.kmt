/* $Id: CreateBehavior.kmt,v 1.26 2008-07-04 12:17:12 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 */

package kermeta::language;

require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/KM2EcoreHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/kermeta/StringHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/kermeta/PrettyPrinterHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/common/ContainmentTraversable.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/common/TraceSource.kmt"

using kermeta::language::structure
using kermeta::language::behavior
using kermeta::utils
using ecore
using km2ecore
using km2ecore::helper::ecore
using km2ecore::helper::kermeta
using km2ecore::helper::java

package structure {

	aspect class Object {
		operation createBehaviorJava(context : KM2EcoreContext) : String is do
			result := ""
		end
	}
	
	/** We have to visit property in order to print the behavior of the getter and setter */
	aspect class Property {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			result := void
			
			// The current property is derived
			if self.isDerived then
				// The current property could have a setter
				if not self.isReadOnly then
					// todo compile the setter in an EAnnotation
				end 
				// todo compile the getter in an EAnnotation
			end
		end
	}
	
	/** We have to visit operation in order to print the result initialization and the return statement */
	aspect class Operation {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			result := void
			
/*			var ft_parameters : Set<Parameter> init self.ownedParameter.detect{ p |
				if p.type.isInstanceOf(FunctionType)
			}*/
			/*
			var ft : FunctionType init p.type.asType(FunctionType)
			//ft.left
			//ft.right*/
			
			//if ft_parameters.detect{ p | p.name==cv.name} then
			//stdio.writeln("context.tasks_stack.peek(): " + context.tasks_stack.peek())
			 
			var javaCode : StringBuffer init StringBuffer.new
			
			//stdio.writeln("\tCurrent operation: " + self.name + " has for type: " + self.type.toString)
			
			// The body of the operation must be filled for being compiled
			if ( not self.body.isVoid() ) then
				var type_label : String init self.type.createBehaviorJava(context)
				
				// result is initialized only if the "return type" is not Void
				if not isVoidType(type_label) then
					javaCode.append("\n" + type_label + " result = null;\n")
				end

				// The Java source code is provided by: self.body.createBehaviorJava(context)
				javaCode.append(self.body.createBehaviorJava(context))
				
				// result is returned only if the "return type" is not Void
				if not isVoidType(type_label) then
					javaCode.append("\nreturn result;\n")
				end
				
			end
			
			// Finally add the EAnnotation containing the Java code in the Ecore model
			if context.tasks_stack.peek() != "FunctionType_Compilation" then
	        	EAnnotationHelper.new.addAnnotationGenModelImpl(self.ecoreModelElement, javaCode.toString)
	        end
	        result := javaCode.toString()
		end
		
		operation isVoidType(type_label : String) : Boolean is do
			result := true
			if (type_label!="null") and (type_label!="Void") and (type_label!="VoidType") and (type_label!="kermeta::standard::Void") and (type_label!="kermeta::language::structure::VoidType") then
				result := false
			end
		end
	}
	
	aspect class Type {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			result := ""
		end
	}
	
	aspect class VoidType {
		method createBehaviorJava(context : KM2EcoreContext) : String from Type is do
			result := "null" // the VoidType is "normally" mapped to the Void class
		end
	}
	
	aspect class PrimitiveType {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			result := self.instanceType.createBehaviorJava(context) // self.instanceType should be a ParameterizedType
		end
	}
	
	aspect class ParameterizedType {
		method createBehaviorJava(context : KM2EcoreContext) : String from Type is do
			result := context.javaTypeMapping.getTypeMapping(self.typeDefinition.qualifiedName)
			/*if result == "kermeta::standard::String" or result == "kermeta::language::structure::String" then
				result := "String"
			end*/
			result := result.replace("::",".")
		end
	}
	
	/*aspect class ObjectTypeVariable {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			result := "//TODO\n" + self.toString
		end
	}*/

}

package behavior {
	
	aspect class Expression {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			//self.
			result := "//TODO content of the current expression\n" + self.toString + "\n\n"
		end
	}
	
	aspect class Block {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			var javaCode : StringBuffer init StringBuffer.new
			javaCode.append("{")
			
			self.eachOwnedElement{ stm |
				javaCode.append("\n\t")
				javaCode.append(stm.createBehaviorJava(context))
				javaCode.append("\n")
			}
			result := javaCode.append("}").toString()
		end
	}
	
	//**** Begin **** Managing of the CallExpression branch ****//
	aspect class CallExpression {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			result := "//TODO content of the current CallExpression\n" + self.toString + "\n\n"
		end
	}
	
	aspect class CallFeature {
		method createBehaviorJava(context : KM2EcoreContext) : String from CallExpression is do
			result := ""//*IP content of the current CallFeature*/"

			var tgt : Expression init self.target
			var fName : String  init self.name
			
			/*if not self.containedType.at(0).isVoid() and self.containedType.at(0).isInstanceOf(FunctionType) then
				var t0 : FunctionType init self.containedType.at(0).asType(FunctionType)
				if not t0.containedType.at(0).isVoid() and t0.containedType.at(0).isInstanceOf(ProductType) then
					var t1 : ProductType init t0.containedType.at(0).asType(ProductType)
					if not t1.isVoid() and t1.containedType.at(0).isInstanceOf(FunctionType) then
						var t2 : FunctionType init t1.containedType.at(0).asType(FunctionType)
						
						if (not t2.isVoid()) and (t2.isInstanceOf(FunctionType)) then
							self.staticOperation//.createBehaviorJava(context)
						end
					end
				end
			end*/
			
			/*var ft1 : FunctionType init self.containedType.detect{ t | t.isInstanceOf(FunctionType) }.asType(FunctionType)
			
			if not ft1.isVoid() then
				result := result + "FT1 is detected"
				var pt : ProductType init ft1.containedType.detect{ t | t.isInstanceOf(ProductType) }.asType(ProductType)
				
				if not pt.isVoid() then
					result := result + "PT is detected"
					var ft2 : FunctionType init pt.containedType.detect{ t | t.isInstanceOf(FunctionType) }.asType(FunctionType)
					
					if not ft2.isVoid() then
						result := result + "FT2 is detected"
						result := result + "CallFeature_FunctionType"
					end
				end
			end*/
			
			//stdio.writeln("self.staticOperation: " + self.staticOperation.toString())
			
			if not self.staticOperation.isVoid() then
				if self.staticOperation.isFunctionType() then
					context.tasks_stack.push("FunctionType_Compilation")
					//Stack Over Flow to solve:
					stdio.writeln("context.tasks_stack.peek(): " + context.tasks_stack.peek() + " - " + self.staticOperation.name)
					self.staticOperation.createBehaviorJava(context)
					context.tasks_stack.pop()
				end
			end
			
			if not tgt.isVoid() then
				result := result + getPP(tgt, fName, context)
			end

			if self.name == "writeln" then
				result := result + " /*Block1_*/ " + "println"
			else
				//stdio.writeln("self-self-self: " + self.name + " " + self.toString)
				
				/*if tgt.createBehaviorJava(context).contains(".new()") or tgt.createBehaviorJava(context).contains(".new") then
					result := result + CompilerHelperJava.new.ppEmfLikeCreateFactory(self.containedType.createBehaviorJava(context))
				else*/
					result := result + " /*Block1*/
					 " + /*getPP(self, self.name, context) +*/
					  self.name
				//end
			end

			if self.container.isInstanceOf(Block) then
				result := result + " /*Block2*/ " + "(" +CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context) + ");"
			end
		end
		
		/** Definition in progress */
		operation getPP(tgt : Expression, fName : String, context : KM2EcoreContext) : String is do
			result := ""
			
			var isBoolean : Boolean init GenericTypeDefinitionHelper.new.isBooleanTypeDef(tgt.staticType, context)
			var isNumeric : Boolean init GenericTypeDefinitionHelper.new.isNumericalTypeDef(tgt.staticType, context)
			
			if(fName == "not" and isBoolean) then
					result := result + "! ("
					result := result + tgt.createBehaviorJava(context)
					result := result + ")"
				
				else if (fName == "and" and isBoolean) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") && ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if (fName == "or" and isBoolean) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") || ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if (fName == "plus" and isNumeric) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") + ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if(fName == "minus" and isNumeric) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") - ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if(fName == "mult" and isNumeric) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") * ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if(fName == "div" and isNumeric) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") / ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if(fName == "isGreater" and isNumeric) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") > ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if(fName == "isLower" and isNumeric) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") < ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if(fName == "isGreaterOrEqual" and isNumeric) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") >= ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if(fName == "isLowerOrEqual" and isNumeric) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") <= ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if(fName == "equals" and (isBoolean or isNumeric)) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") == ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
				else if(fName == "isNotEqual" and (isBoolean or isNumeric)) then
					result := result + "("
					result := result + tgt.createBehaviorJava(context)
					result := result + ") != ("
					result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
					result := result + ")"
				
			
				else
					var ppParam : String init ""
					if tgt.isInstanceOf(CallFeature) then
						ppParam := "(" + CompilerHelperJava.new.ppComaSeparatedNodes(tgt.asType(CallExpression).parameters, context) + ")"
					end
					result := result + "/*Block3*/ " + tgt.createBehaviorJava(context) + ppParam + "."
				
				end
				end
				end
				end
				end
				end
				end
				end
				end
				end
				end
				end
				end
		end
	}
	
	aspect class CallVariable {
		method createBehaviorJava(context : KM2EcoreContext) : String from CallExpression is do
			result := "/*CallVariable*/ "//*TODO content of the current CallVariable\n" + self.toString + "*/"
			//result := result + "\n CallVariable.name = " + self.name

			if self.name == "stdio" then
				result := result + "System.out"
			else
				result := result + IdentifierHelper.new.getMangledIdentifier(self.name, context)
			end
		end
	}
	
	aspect class CallResult {
		method createBehaviorJava(context : KM2EcoreContext) : String from CallVariable is do
			//Test to insert line number
			//result := "begin " + self.lineNumber.toString() + " " + self.fileName + "\n" + "result" + "\nend " + self.lineNumber.toString() + " " + self.fileName + "\n"
			result := "\n" + "result "
		end
	}
	
	aspect class CallValue {
		method createBehaviorJava(context : KM2EcoreContext) : String from CallExpression is do
			result := "//TODO content of the current CallValue\n" + self.toString + "\n\n"
		end
	}
	
	aspect class CallSuperOperation {
		method createBehaviorJava(context : KM2EcoreContext) : String from CallExpression is do
			result := "//IP content of the current CallSuperOperation\n"
			result := result + "super"
		end
	}
	//**** End **** Managing of the CallExpression branch ****//
	
	aspect class VariableDecl {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			result := ""//*IP VariableDecl" + self.toString + "\n*/"
			var localType : String init self.type.createBehaviorJava(context)
			result := result + localType + " " + IdentifierHelper.new.getMangledIdentifier(self.identifier, context)
			if not self.initialization.isVoid() then
				
				if self.initialization.createBehaviorJava(context).contains(".new()") or self.initialization.createBehaviorJava(context).contains(".new") then
					result := result + " /*VariableDecl with new*/ " + CompilerHelperJava.new.ppEmfLikeCreateFactory(localType)
				else
					result := result + " /*VariableDecl without new*/ " + self.initialization.createBehaviorJava(context)
				end
		
			else
				result := result + " = null"//CompilerHelperJava.new.ppEmfLikeCreateFactory(localType)
			end
		result := result + ";"
		end
	}
	
	aspect class Assignment {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			result := ""//TODO Assignment" + self.toString + "\n"
			var left : String init self.target.createBehaviorJava(context)
			var right : String init self.~value.createBehaviorJava(context)
		
			// Patch that adds the 'function' keyword in case the assigned value is a function
			if self.~value.isInstanceOf(LambdaExpression) then
				right := "function " + right
			end
			
			var ppCast : String
			if self.isCast() then
				ppCast := "(" + self.staticType.createBehaviorJava(context) + ")"
			end
			
			if self.target.isInstanceOf(CallFeature) then
				//stdio.writeln(self.target.name)
				result := result + "get" + self.target.name.capName()
			else
			
				if self.target.isInstanceOf(CallFeature) then
					//left = left.substring(0,left.length()-2);
					
					left.replace(".", "%")
					
					var tabLeft : kermeta::standard::OrderedSet<String> init left.split("%")
					
					result := ""
					from var i : Integer init 0
					until i < tabLeft.size()
					loop
						if i < (tabLeft.size()-1) then
							result := result + tabLeft.elementAt(i) + "."
						end
						if i == (tabLeft.size()-1) then
							result := result + "set" + tabLeft.elementAt(i).capName()
						end
						i := i+1
					end
				
					result := result + "(" + right + ");"
				else
					result := left + " = " + right + ";"
				end
			end
			
		end
	}
	
	aspect class LambdaExpression {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			result := "//TODO LambdaExpression" + self.toString
		end
	}
	
	aspect class LambdaParameter {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			result := "//TODO LambdaParameter" + self.toString
		end
	}
	
	aspect class FunctionType {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			result := "//TODO FunctionType" + self.toString
		end
	}
	
	aspect class TypeReference {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			result := "//TODO TypeReference" + self.toString
			result := CompilerHelperJava.new.ppTypeFromMultiplicityElement(self, context)
		end
	}
	
	aspect class EmptyExpression {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			result := "//TODO EmptyExpression" + self.toString
		end
	}
	
	//**** Begin **** Managing of the exception ****//
	aspect class Raise {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
		
			var newEGenericType : EGenericType init EGenericType.new()
			newEGenericType.eClassifier := context.mu.getEClassifierByQualifiedName("kermeta::exceptions::KRuntimeException")
			//newEGenericType.eClassifier := self.expression.staticType.asType(ParameterizedType).typeDefinition.asType(ClassDefinition).ecoreModelElement
			if (not newEGenericType.eClassifier.isVoid()) and (not self.getContainerAsType(Operation).isVoid()) then
				
				if (self.getContainerAsType(Operation).asType(Operation).ecoreModelElement.eGenericExceptions.isVoid()) or (self.getContainerAsType(Operation).asType(Operation).ecoreModelElement.eGenericExceptions.size==0) then
					self.getContainerAsType(Operation).asType(Operation).ecoreModelElement.eGenericExceptions.add(newEGenericType)
				end
				
			end
			
			result := self.expression.createBehaviorJava(context) + "\n"
			result := result + "throw new " + context.JAVA_CLASS_EXCEPTION_SWITCHER + "(" + self.expression.createBehaviorJava(context) + ");\n"
		end
	}
	
	/** Complete */
	aspect class Rescue {
		method createBehaviorJava(context : KM2EcoreContext) : String is do
			result := "catch"
			if not self.exceptionName.isVoid() then
				result := result + "( " + context.JAVA_CLASS_EXCEPTION_SWITCHER + " " + self.exceptionName + ")"
				//result := result + "(" + self.exceptionType.createBehaviorJava(context) + " " + self.exceptionName + ")"
			end
			result := result + " {\n"
			//pushPrefix();
			
			self.eachOwnedElement{e | 
				result := result + e.createBehaviorJava(context)
			}
			//popPrefix();
		end
	}
	//**** End **** Managing of the exception ****//
	
	/** Complete */
	aspect class SelfExpression {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			result := "this"
		end
	}
	
	aspect class Conditional {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			result := "if( " + self.condition.createBehaviorJava(context) + ") {\n"
			//pushPrefix(); 
			// Both type of ThenBody and ElseBody are "Block" (see also KMT2KMPrimitiveExpressionBuilder)
			// And block textual syntax is already represented by "then..else..end"
			//alreadyPrefixed = false;
			if not self.thenBody.isVoid() then 
				result := result + self.thenBody.createBehaviorJava(context) + "\n"
			//popPrefix();
			end
			if not self.elseBody.isVoid() then
				result := result + /*getPrefix() +*/
				 "} else {\n"
				//pushPrefix();
				result := result + self.elseBody.createBehaviorJava(context) + "\n"
				//popPrefix();
			end
			result := result + /*getPrefix() +*/
			 "}"
		end
	}
	
	/** TODO */
	aspect class Loop {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			result := ""
		end
	}
	
	aspect class JavaStaticCall {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			//stdio.writeln(self.jmethod)
			result := self.jclass.replace("::", ".") + "." + IdentifierHelper.new.getMangledIdentifier(self.jmethod, context) + "("
			result := result + CompilerHelperJava.new.ppComaSeparatedNodes(self.parameters, context)
			result := result + ")"
		end
	}
	
	
	//**** Begin **** Managing of the literal ****//
	aspect class Literal {
		method createBehaviorJava(context : KM2EcoreContext) : String from Expression is do
			result := "//TODO Literal" + self.toString
		end
	}
	
	aspect class StringLiteral {
		method createBehaviorJava(context : KM2EcoreContext) : String from Literal is do
			result := "\"" + self.~value.replace("\"", "\\\"") + "\""
		end
	}
	
	aspect class IntegerLiteral {
		method createBehaviorJava(context : KM2EcoreContext) : String from Literal is do
			result := self.~value.toString
		end
	}
	
	aspect class BooleanLiteral {
		method createBehaviorJava(context : KM2EcoreContext) : String from Literal is do
			result := self.~value.toString
		end
	}
	
	aspect class TypeLiteral {
		method createBehaviorJava(context : KM2EcoreContext) : String from Literal is do
			result := ""//TODO TypeLiteral" + self.toString
			result := result + self.typeref.createBehaviorJava(context)
		end
	}
	
	aspect class VoidLiteral {
		method createBehaviorJava(context : KM2EcoreContext) : String from Literal is do
			result := "void" // the VoidLiteral is "normally" mapped to the void singleton
		end
	}
	//**** End **** Managing of the literal ****//
	
}