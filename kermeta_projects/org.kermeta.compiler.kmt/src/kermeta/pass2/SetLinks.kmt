/* $Id: SetLinks.kmt,v 1.38 2008-09-05 07:44:17 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */

package kermeta::language::structure;


require kermeta
require "../common/TraceStructure.kmt"
require "http://www.eclipse.org/emf/2002/Ecore"
require "../helper/KM2EcoreHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"

using ecore
using km2ecore
using km2ecore::helper::kermeta
using km2ecore::helper::ecore
using kermeta::standard

aspect class ClassDefinition {

	operation setLinks(context : KM2EcoreContext) is do
			
		self.superType.each{ t |
			if t.isInstanceOf(Class) then
			
				var classDefinition : ClassDefinition init t.asType(Class).getClassDefinitionAsTyped()

				if (not self.ecoreModelElement.isVoid()) then
					if not classDefinition.ecoreModelElement.isVoid() then
					
						var new_eGenericType : EGenericType init EGenericType.new
						new_eGenericType.eClassifier := classDefinition.ecoreModelElement
						self.ecoreModelElement.eGenericSuperTypes.add(new_eGenericType)
						
						t.asType(Class).ecoreModelElement := new_eGenericType
						t.asType(Class).setLinks(context)
					end
				end
				
			end
		}
		
		//DO NOT REMOVE this following code, unused for the moment - Fixing the bound of the TypeParameters
		/*if not self.ecoreModelElement.isVoid() then
			
			var inc : Integer init 0
			self.typeParameter.each{ otv |
				var bound : EGenericType init EGenericType.new

				var eclassifier_object : EClassifier
				
				if not otv.supertype.isVoid() then
					eclassifier_object := context.mu.getEClassifierByQualifiedName(otv.supertype.getTypeQName())
				end
				
				if eclassifier_object.isVoid() then
					eclassifier_object := context.mu.getEClassifierByQualifiedName("kermeta::language::structure::Object")				
				end
				
				bound.eClassifier := eclassifier_object
				
				self.ecoreModelElement.eTypeParameters.elementAt(inc).eBounds.add(bound)
				
				inc := inc + 1
			}

		end*/

	end
}

aspect class Class {

	// Set the links to the EGenericType for the EGenericSuperTypes
	operation setLinks(context : KM2EcoreContext) is do
	
		self.typeParamBinding.each{ tpb |
				
			var typeArgument : EGenericType init EGenericType.new
			
			if tpb.type.isInstanceOf(Class) then
				var cd : ClassDefinition init tpb.type.asType(Class).getClassDefinitionAsTyped()
								
				if cd.ecoreDataType.isVoid() then //not cd.ecoreModelElement.isVoid() then
					typeArgument.eClassifier := cd.ecoreModelElement
				else //we assume this Class target a subtype of ValueType => EDataType
					typeArgument.eClassifier := cd.ecoreDataType
				end
				self.ecoreModelElement.eTypeArguments.add(typeArgument)
				
				// The current Class may have some typeParamBindings, so we have to set the links for this Class too.
				// Before that, its ecoreModelElement property is setted
				// Set the traceability
				tpb.type.asType(Class).ecoreModelElement := typeArgument
				// Continue the settings of links
				tpb.type.asType(Class).setLinks(context)
				
			else
				if tpb.type.isInstanceOf(ObjectTypeVariable) then
					var otv : ObjectTypeVariable init tpb.type.asType(ObjectTypeVariable)
					typeArgument.eTypeParameter := otv.ecoreModelElement
					self.ecoreModelElement.eTypeArguments.add(typeArgument)
				else
				
					if tpb.type.isInstanceOf(PrimitiveType) then

						var cd : ClassDefinition init tpb.type.getClassFromPrimitiveType().getClassDefinitionAsTyped()
						
						// We use the EDataType from the Ecore file
						if tpb.type.isEDataType() then
							typeArgument.eClassifier := tpb.type.asType(PrimitiveType).ecoreModelElement							
						else
							// We use the final type
							if cd.ecoreDataType.isVoid() then
								typeArgument.eClassifier := cd.ecoreModelElement
							else
								typeArgument.eClassifier := cd.ecoreDataType
							end
						
						end
						
						self.ecoreModelElement.eTypeArguments.add(typeArgument)
					else
						if tpb.type.isInstanceOf(VoidType) then
						end
					end
					
				end
				
			end
		}
	end
}


aspect class Operation {
	operation setLinks(context : KM2EcoreContext) is do
		
		var s : LinkSetterForTypedElement init LinkSetterForTypedElement.new
		s.setLinks(self, self.ecoreModelElement, context)
		if not self.superOperation.isVoid() then
			var qualifiedName : String init self.superOperation.owningClass.qualifiedName
			var ecoreAnnotation : EAnnotation init EAnnotationHelper.new.createKermetaEAnnotation(KermetaEAnnotationKey.superOperation.name.toString(), qualifiedName)
			
			//stdio.writeln("op: " + self.name + " from the ClassDefinition: " + self.container.asType(NamedElement).name + " " + self.ecoreModelElement.toString)
			
			//The super operation is not tagged as EMF_Static
			//if self.getEMFStatic()=="" then
				self.ecoreModelElement.eAnnotations.add(ecoreAnnotation)
			//end	
		end
		
	end
}

aspect class Parameter {
	operation setLinks(context : KM2EcoreContext) is do

		if self.type.isInstanceOf(FunctionType) then
			
			// Important note (CF): this case should never hapenned, because the function types are not added in the Ecore as EOperation,
			// thus the corresponding parameters will be not visited
			// The following source code (this then body) could be removed later
			
			stdio.writeln("Parameter.setLinks FunctionType: " + self.type.toString() + " self.ecoreModelElement: " + self.ecoreModelElement.toString())

			var ft : FunctionType init self.type.asType(FunctionType)
			self.ecoreModelElement.eType := GenericTypeDefinitionHelper.new.getKermetaSpecialType(self.container.container.container.asType(Package))
			
			var ft_annotation : EAnnotation init EAnnotationHelper.new.createEmpty("kermeta.functionType")
			
			if not ft.left.isVoid() then
				EAnnotationHelper.new.addEntry(ft_annotation, "0", ft.left.getTypeQName())
			end
			if not ft.left.isVoid() then
				EAnnotationHelper.new.addEntry(ft_annotation, "1", ft.right.getTypeQName())
			end
			self.ecoreModelElement.eAnnotations.add(ft_annotation)
			
			// Set the traceability
			ft.ecoreModelElement := ft_annotation
			
		else
		
			var s : LinkSetterForTypedElement init LinkSetterForTypedElement.new
			s.setLinks(self, self.ecoreModelElement, context)
		
		end
		
	end
}

aspect class Property {
	operation setLinks(context : KM2EcoreContext) is do
		LinkSetterForTypedElement.new().setLinks(self, self.ecoreModelElement, context)
		
		// Complete the structural phase
		//if self.opposite.isVoid() then self is an EReference
		if not self.opposite.isVoid() then
			self.ecoreModelElement.asType(EReference).eOpposite := self.opposite.ecoreModelElement.asType(EReference)
		end
		
		// Set to false the default value of Boolean
		if self.type.getTypeQName() == "kermeta::standard::Boolean" then
			self.ecoreModelElement.defaultValueLiteral := "false"
		end
		
	end
}


class LinkSetterForTypedElement {
	operation setLinks(element : TypedElement, ecoreModelElement : ETypedElement, context : KM2EcoreContext) is do
		
		if (not ecoreModelElement.isVoid()) and (not Operation.new().isVoidType(element.type.getTypeQName())) then
			
			if element.type.isInstanceOf(Class) then
				var c : Class init element.type.asType(Class)
				var classDefinition : ClassDefinition init c.getClassDefinitionAsTyped()
				var genericType : EGenericType init EGenericType.new
				
				if classDefinition.ecoreDataType.isVoid() then
					genericType.eClassifier  := classDefinition.ecoreModelElement
				else
					genericType.eClassifier  := classDefinition.ecoreDataType
				end
				ecoreModelElement.eGenericType := genericType
				
				// Set the traceability
				c.ecoreModelElement := genericType
				// Continue the settings of links
				c.setLinks(context)
				
			else
				// Case of the type is an ObjectTypeVariable
				if element.type.isInstanceOf(PrimitiveType) then
				
					var cd : ClassDefinition init element.type.getClassFromPrimitiveType().getClassDefinitionAsTyped()
					
					if element.type.isEDataType() then
						
						var newEGT : EGenericType init EGenericType.new()
						newEGT.eClassifier := element.type.asType(PrimitiveType).ecoreModelElement
						ecoreModelElement.eGenericType := newEGT
						
						element.type.asType(PrimitiveType).ecoreModelElement.eTypeParameters.each{ etp |
							if not ecoreModelElement.eGenericType.isVoid() then
								newEGT.eTypeArguments.add(EGenericType.new())
							end
						}
						
					else
						if cd.ecoreDataType.isVoid() then
							ecoreModelElement.eType := cd.ecoreModelElement
						else
							ecoreModelElement.eType := cd.ecoreDataType
						end					
					end
					
				else
				
					if element.type.isInstanceOf(Enumeration) then
						ecoreModelElement.eType := element.type.asType(Enumeration).ecoreModelElement
					else
						if element.type.isInstanceOf(ObjectTypeVariable) then
							var genericType : EGenericType init EGenericType.new
							genericType.eTypeParameter  := element.type.asType(ObjectTypeVariable).ecoreModelElement
							ecoreModelElement.eGenericType := genericType
						end
					end
					
				end
			end
		end
		
	end
}
