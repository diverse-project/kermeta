/* $Id: SetLinks.kmt,v 1.13 2008-04-14 07:50:36 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */

package kermeta::language::structure;

 
require kermeta
require "../common/trace_structure.kmt"
require "http://www.eclipse.org/emf/2002/Ecore"
require "../helper/KM2EcoreHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"

using ecore
using km2ecore
using km2ecore::helper::kermeta
using km2ecore::helper::ecore

aspect class ClassDefinition {
	operation setLinks(context : KM2EcoreContext) is do
		self.superType.each{ t |
			if t.isInstanceOf(Class) then
				var classDefinition : ClassDefinition init TypeHelper.new.getClassDefinition(t.asType(Class))
				//stdio.writeln("ClassDefinition.setLinks self.ecoreModelElement: " + self.ecoreModelElement.toString)
				if not (self.ecoreModelElement.isVoid() and (not self.ecoreDataType.isVoid()) ) then
					if classDefinition.ecoreModelElement == void then
						//stdio.writeln("Class Def is nil" + classDefinition.name)
					end
					if (not self.ecoreModelElement.isVoid()) and (not classDefinition.ecoreModelElement.isVoid()) then
						self.ecoreModelElement.eSuperTypes.add( classDefinition.ecoreModelElement )
					end
				end
			end
		}
	end
}

aspect class Class2 {
/*	operation setLinks(context : KM2EcoreContext) is do
		//var s : LinkSetterForTypedElement init LinkSetterForTypedElement.new
		//s.setLinks(self, void, context)
	end*/
}

aspect class Operation {
	operation setLinks(context : KM2EcoreContext) is do
		// DETERMINE if the operation should be compiled
		var paramFunctionType : Parameter init self.ownedParameter.detect{ p |
			p.type.isInstanceOf(FunctionType)
		}
		if not paramFunctionType.isVoid() then
			//TODO inline of the FunctionType
		else
		
		var s : LinkSetterForTypedElement init LinkSetterForTypedElement.new
		s.setLinks(self, self.ecoreModelElement, context)
		if ( self.superOperation != void ) then
			var qualifiedName : String init self.superOperation.owningClass.qualifiedName
			var ecoreAnnotation : EAnnotation init EAnnotationHelper.new.createKermetaEAnnotation(KermetaEAnnotationKey.superOperation.name.toString(), qualifiedName)
			self.ecoreModelElement.eAnnotations.add(ecoreAnnotation)
		end
		
		end
	end
}

aspect class Parameter {
	operation setLinks(context : KM2EcoreContext) is do
		var s : LinkSetterForTypedElement init LinkSetterForTypedElement.new
		s.setLinks(self, self.ecoreModelElement, context)
	end
}

aspect class Property {
	operation setLinks(context : KM2EcoreContext) is do
		var s : LinkSetterForTypedElement init LinkSetterForTypedElement.new
		s.setLinks(self, self.ecoreModelElement, context)
		if ( self.opposite != void ) then
			self.getEcoreModelElement().eOpposite := self.opposite.getEcoreModelElement()
		end
	end
}


class LinkSetterForTypedElement {
	operation setLinks(element : TypedElement, ecoreModelElement : ETypedElement, context : KM2EcoreContext) is do
		
		if not ecoreModelElement.isVoid() then
		/*if ( element.isComposite and TypeHelper.new.isPrimitiveType(element.type.asType(Type)) ) then
			TypeHelper.new.getClassFromPrimitiveType(element.type.asType(Type))
		else*/
			if element.type.isInstanceOf(Class) then
				var c : Class init element.type.asType(Class)
				var classDefinition : ClassDefinition init TypeHelper.new.getClassDefinition(c)
				var genericType : EGenericType init EGenericType.new
				
				if not classDefinition.ecoreModelElement.isVoid() then
					genericType.eClassifier  := classDefinition.ecoreModelElement
				else
					genericType.eClassifier  := classDefinition.ecoreDataType
				end
				ecoreModelElement.eGenericType := genericType
				c.typeParamBinding.each{ tpb |
					var typeArgument : EGenericType init EGenericType.new
					
					if tpb.type.isInstanceOf(Class) then
						var cd : ClassDefinition init TypeHelper.new.getClassDefinition( tpb.type.asType(Class) )
						typeArgument.eClassifier := cd.ecoreModelElement
						ecoreModelElement.eGenericType.eTypeArguments.add(typeArgument)
					else
						if tpb.type.isInstanceOf(ObjectTypeVariable) then
							var otv : ObjectTypeVariable init tpb.type.asType(ObjectTypeVariable)
							stdio.writeln("ObjectTypeVariable: " + otv.name.toString() + " - otv.ecoreModelElement: " + otv.ecoreModelElement.name + " - ecoreModelElement: " + ecoreModelElement.name + " ecoreModelElement.eGenericType: " + ecoreModelElement.eGenericType.toString())
							typeArgument.eTypeParameter := otv.ecoreModelElement
							ecoreModelElement.eGenericType.eTypeArguments.add(typeArgument)
						else
							if tpb.type.isInstanceOf(PrimitiveType) then
								var cd : ClassDefinition init TypeHelper.new.getClassDefinition(TypeHelper.new.getClassFromPrimitiveType( tpb.type ))
								typeArgument.eClassifier := cd.ecoreModelElement
								ecoreModelElement.eGenericType.eTypeArguments.add(typeArgument)
							end
						end
					end
				}
			else
				// Case of the type is an ObjectTypeVariable
				if element.type.isInstanceOf(PrimitiveType) then
					ecoreModelElement.eType := element.type.asType(PrimitiveType).ecoreModelElement
				else
					if element.type.isInstanceOf(Enumeration) then
						ecoreModelElement.eType := element.type.asType(Enumeration).ecoreModelElement
					else
						if element.type.isInstanceOf(ObjectTypeVariable) then
							var genericType : EGenericType init EGenericType.new
							genericType.eTypeParameter  := element.type.asType(ObjectTypeVariable).ecoreModelElement
							ecoreModelElement.eGenericType := genericType
						end
					end
				end
			end
		end
	end
}
