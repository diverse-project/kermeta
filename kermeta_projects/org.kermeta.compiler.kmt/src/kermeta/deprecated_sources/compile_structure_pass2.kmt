/* $Id: compile_structure_pass2.kmt,v 1.1 2008-02-27 15:41:53 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Francois Tanguy <ftanguy@irisa.fr>
 *			Cyril Faucher <cfaucher@irisa.fr>
 *
 * @deprecated
 */

package kermeta::language::structure;

require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "compile_structure_common.kmt"
require "compile_behavior.kmt"
require "../common/containment_traversable.kmt"
require "../common/trace_structure.kmt"
require "../helper/KM2EcoreHelper.kmt"

using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard
using kermeta::utils
using ecore
using km2ecore::helper::ecore

/**
 * unused for the moment
 */
aspect class ModelingUnit {
	method compile(context : KM2EcoreContext) : String is do
		result := ""
		// Compile the owned elements: Package or Tag
		self.eachOwnedElement{ o | o.compile(context) }
	end
}

/**
 * unused for the moment
 */
aspect class Tag {
	method compile(context : KM2EcoreContext) : String is do
		result := void
	end
}

aspect class Package {
	method compile(context : KM2EcoreContext) : String is do
		result := void
		// Compile the owned elements
		self.eachOwnedElement{ cd | cd.compile(context) }
	end
}

aspect class TypeDefinition {
	method compile(context : KM2EcoreContext) : String is do
		result := void
		//stdio.writeln("F7-1: " + self.name)
	end
}

aspect class ClassDefinition {
	method compile(context : KM2EcoreContext) : String from TypeDefinition is do
		result := void
		// Set the traceability
		self.ecoreModelElement := EcoreModelElementHelper.new.findEClassProxy(self)
		// Compile the owned elements
		self.eachOwnedElement{ o | o.compile(context) }
	end
}

aspect class MultiplicityElement {
	method compile(context : KM2EcoreContext) : String is do
		result := void
		//stdio.writeln("F2-311111: " + self.name)
	end
}

aspect class Property {
	method compile(context : KM2EcoreContext) : String from MultiplicityElement is do
		result := void
		// Set the traceability
		
		// The current property is derived
		if self.isDerived then
			// The current property could have a setter
			if not self.isReadOnly then
				// todo compile the setter in an EAnnotation
			end
			// todo compile the getter in an EAnnotation
		end
	end
}

aspect class Operation {
	method compile(context : KM2EcoreContext) : String from MultiplicityElement is do
		result := void
		
		var javaCode : StringBuffer init StringBuffer.new
		
		if ( self.body != void ) then
			var type : String init self.type.asType(Type).compile(context)
			if ( type!="Void" ) then
				javaCode.append("\n" + type + " result = null;\n")
			end
			
			// The Java source code is provided by: self.body.compile(context)
			javaCode.append(self.body.compile(context))
			
			if ( type!="Void" ) then
				javaCode.append("\nreturn result;\n")
			end
		end
		
		// Finally add the EAnnotation containing the Java code in the Ecore model
        EAnnotationHelper.new.addAnnotationGenModelImpl(self.ecoreModelElement, javaCode.toString)
        
        result := javaCode.toString
	end
}

aspect class Type {
	method compile(context : KM2EcoreContext) : String is do
		result := "Void"
		stdio.writeln("type self: " + self.toString)
		if self.isInstanceOf(PrimitiveType) then
			var pt : kermeta::language::structure::PrimitiveType
			pt ?= self
			result := pt.instanceType.asType(Type).compile(context)
		end

		if self.isInstanceOf(ParameterizedType) then
			//stdio.writeln("\ncoucou2\n")
			var c : Class
			c ?= self
			result := c.typeDefinition.name
		end
	end
}