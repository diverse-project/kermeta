/* $Id: SIMKModelHelper.kmt,v 1.4 2008-08-19 12:57:15 cfaucher Exp $
 * Creation date: Jul 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors:
 * 			Cyril Faucher <cfaucher@irisa.fr>
 */

@uri "http://www.kermeta.org/simk"
package simk;

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"

using kermeta::language::structure
using kermeta::standard
using km2ecore

aspect class SIMKModel {

	operation retrieveOrCreateContext(class_qname : String, context : KM2EcoreContext) : SMContext is do
		result := void
		
		//FIXME CF to add the management of package and the usage
		var sMContext : SMContext init self.sMContexts.detect{ c |
			c.sMClass.name == class_qname
		}
		if sMContext.isVoid() then
			sMContext := SMContext.new()
			self.sMContexts.add(sMContext)
		end
		
		result := sMContext
		
	end

	operation retrieveOrCreateContextForWrapper(op : Operation, context : KM2EcoreContext) : SMContext is do
		result := void
		
		//FIXME CF to add the management of package and the usage
		var sMContext : SMContext init retrieveOrCreateContext(context.current_valueType.name + "Wrapper", context)
		
		if sMContext.sMClass.isVoid() then
			var sMClass : SMClass init SMClass.new()
			sMContext.sMClass := sMClass
			sMClass.name := context.current_valueType.name + "Wrapper"
			sMClass.setWrapperUsage()
		end
		
		var sm : StaticMethod init sMContext.staticMethods.detect{ o |
			o.name == op.name
		}
		if sm.isVoid() then	
			result := sMContext
		end
	end
	
}

aspect class SMClass {
	operation setWrapperUsage() : Void is do
		self.usages := SMUsage.Wrapper//.add(SMUsage.Wrapper)
	end
}

aspect class StaticMethod {
	operation setWrapperUsage() : Void is do
		self.usages := SMUsage.Wrapper//.add(SMUsage.Wrapper)
	end
}