/* $Id: SIMKModelHelper.kmt,v 1.7 2008-08-27 13:18:06 cfaucher Exp $
 * Creation date: Jul 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors:
 * 			Cyril Faucher <cfaucher@irisa.fr>
 */

@uri "http://www.kermeta.org/simk"
package simk;

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/java/JavaHelper.kmt"

using kermeta::language::structure
using kermeta::standard
using km2ecore
using km2ecore::helper::java

aspect class SIMKModel {

	operation retrieveOrCreateContext(class_qname : String, finalPackage_qname : String, usage : SMUsage, context : KM2EcoreContext) : SMContext is do
		var sMContext : SMContext init self.sMContexts.detect{ c |
			(c.qualifiedNameFinalPackage == finalPackage_qname)
				and (c.sMClass.name == class_qname)
				and (c.sMClass.usages == usage)
		}
		
		if sMContext.isVoid() then
			sMContext := SMContext.new()
			sMContext.qualifiedNameFinalPackage := finalPackage_qname
			self.sMContexts.add(sMContext)
		end
		
		result := sMContext
	end

	operation retrieveOrCreateContextWithClass(class_qname : String, finalPackage_qname : String, usage : SMUsage, context : KM2EcoreContext) : SMContext is do
		var sMContext : SMContext init retrieveOrCreateContext(class_qname, finalPackage_qname, usage, context)
		
		if sMContext.sMClass.isVoid() then
			var sMClass : SMClass init SMClass.new()
			sMContext.sMClass := sMClass
			
			sMClass.name := class_qname
			sMClass.usages := usage
		end
		
		result := sMContext
	end
	
	operation retrieveOrCreateContextForWrapper(op : Operation, context : KM2EcoreContext) : SMContext is do
		result := void
		
		var sMContext : SMContext init retrieveOrCreateContextWithClass(context.current_valueType.name + "Wrapper", "kermeta.standard.helper", SMUsage.Wrapper, context)
		
		var sm : StaticMethod init sMContext.staticMethods.detect{ o |
			o.name == IdentifierHelper.new.getMangledIdentifier(op.getFinalName(), context)
		}
		if sm.isVoid() then	
			result := sMContext
		end
	end
	
	operation retrieveOrCreateContextForSuper(op : Operation, context : KM2EcoreContext) : SMContext is do
		result := void
		
		var sMContext : SMContext init retrieveOrCreateContextWithClass(
			op.container.asType(ClassDefinition).name + "Super",
			op.container.asType(ClassDefinition).qualifiedName + ".helper",
			SMUsage.Super,
			context)
		
		var sm : StaticMethod init sMContext.staticMethods.detect{ o |
			o.name == ( "super_" + IdentifierHelper.new.getMangledIdentifier(op.getFinalName(), context) )
		}
		if sm.isVoid() then	
			result := sMContext
		end
	end
	
	operation retrieveOrCreateContextForRunner(op : Operation, context : KM2EcoreContext) : SMContext is do
		result := void
		
		var sMContext : SMContext init retrieveOrCreateContextWithClass(
			op.container.asType(ClassDefinition).name + "__" + IdentifierHelper.new.getMangledIdentifier(op.getFinalName(), context) + "__" + "Runner",
			op.container.asType(ClassDefinition).container.asType(Package).qualifiedName.replace("::", ".") + ".runner",
			SMUsage.Runner,
			context)
		
		if sMContext.isVoid() then
			stdio.writeln(op.container.asType(ClassDefinition).name + "__" + IdentifierHelper.new.getMangledIdentifier(op.getFinalName(), context) + "__" + "Runner" + " - " + op.container.asType(ClassDefinition).container.asType(Package).qualifiedName.replace("::", ".") + ".runner")
		end
		var sm : StaticMethod init sMContext.staticMethods.detect{ o |
			o.name == "main"
		}
		if sm.isVoid() then	
			result := sMContext
		end
	end
}

aspect class SMClass {
	operation setWrapperUsage() : Void is do
		self.usages := SMUsage.Wrapper//.add(SMUsage.Wrapper)
	end
}

aspect class StaticMethod {
	operation setWrapperUsage() : Void is do
		self.usages := SMUsage.Wrapper//.add(SMUsage.Wrapper)
	end
}