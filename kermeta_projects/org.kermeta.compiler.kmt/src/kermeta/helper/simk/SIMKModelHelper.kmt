/* $Id: SIMKModelHelper.kmt,v 1.17 2009-02-12 16:32:56 mclavreu Exp $
 * Creation date: Jul 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors:
 * 			Cyril Faucher <cfaucher@irisa.fr>
 */

@uri "http://www.kermeta.org/simk"
package simk;

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/kermeta/KermetaHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/java/JavaHelper.kmt"

using kermeta::language::structure
using kermeta::standard
using km2ecore
using km2ecore::helper::java
using kermeta::persistence

aspect class SIMKModel {

	/** TODO TO COMMENT*/
	operation retrieveOrCreateContext(class_qname : String, finalPackage_qname : String, usage : SMUsage, context : KM2EcoreContext) : SMContext is do
		var sMContext : SMContext init self.sMContexts.detect{ c |
			(c.finalPackageQName == finalPackage_qname)
				and (c.sMClass.name == class_qname)
				and (c.sMClass.usages == usage)
		}
		
		if sMContext.isVoid() then
			sMContext := SMContext.new()
			sMContext.finalPackageQName := finalPackage_qname
			self.sMContexts.add(sMContext)
		end
		
		result := sMContext
	end

	/** TODO TO COMMENT*/
	operation retrieveOrCreateContextWithClass(class_qname : String, finalPackage_qname : String, usage : SMUsage, context : KM2EcoreContext) : SMContext is do
		var sMContext : SMContext init retrieveOrCreateContext(class_qname, finalPackage_qname, usage, context)
		
		if sMContext.sMClass.isVoid() then
			var sMClass : SMClass init SMClass.new()
			sMContext.sMClass := sMClass
			
			sMClass.name := class_qname
			sMClass.usages := usage
		end
		
		result := sMContext
	end
	
	/** TODO TO COMMENT*/
	operation retrieveOrCreateContextForWrapper(op : Operation, context : KM2EcoreContext) : SMContext is do
		result := void
		
		var sMContext : SMContext init retrieveOrCreateContextWithClass(context.current_valueType.name + "Wrapper", "kermeta.standard.helper", SMUsage.Wrapper, context)
		
		var sm : SMMethod init sMContext.sMMethods.detect{ o |
			o.name == op.getFinalName(context)
		}
		if sm.isVoid() then	
			result := sMContext
		end
	end
	
	/** TODO TO COMMENT*/
	operation retrieveOrCreateContextForSuper(op : Operation, context : KM2EcoreContext) : SMContext is do
		result := void
		
		var sMContext : SMContext init retrieveOrCreateContextWithClass(
			op.owningClass.name + "Super",
			op.owningClass.container.asType(Package).qualifiedName().replace(context.KERMETA_SEPARATOR, context.JAVA_SEPARATOR) + context.JAVA_SEPARATOR + "helper",
			SMUsage.Super,
			context)
		
		var sm : SMMethod init sMContext.sMMethods.detect{ o |
			o.name == ( "super_" + op.getFinalName(context) )
		}
		if sm.isVoid() then	
			result := sMContext
		end
	end
	
	/** TODO TO COMMENT*/
	operation retrieveOrCreateContextForInvariant(constraint : Constraint, context : KM2EcoreContext) : SMContext is do
		result := void
		
		var sMContext : SMContext init retrieveOrCreateContextWithClass(
			constraint.container.asType(ClassDefinition).name + "Invariant",
			constraint.container.asType(ClassDefinition).container.asType(Package).qualifiedName().replace(context.KERMETA_SEPARATOR, context.JAVA_SEPARATOR) + context.JAVA_SEPARATOR + "helper",
			SMUsage.Invariant,
			context)
		
		var sm : SMMethod init sMContext.sMMethods.detect{ o |
			o.name == ( "checkInvariant_" + constraint.id )
		}
		if sm.isVoid() then	
			result := sMContext
		end
	end
	
	/** TODO TO COMMENT*/
	operation retrieveOrCreateContextForRunner(op : Operation, context : KM2EcoreContext) : SMContext is do
		result := void
		
		var sMContext : SMContext init retrieveOrCreateContextWithClass(
			op.owningClass.name + "__" + op.getFinalName(context) + "__" + "Runner",
			op.owningClass.container.asType(Package).qualifiedName().replace(context.KERMETA_SEPARATOR, context.JAVA_SEPARATOR) + context.JAVA_SEPARATOR + "runner",
			SMUsage.Runner,
			context)
		
		var sm : SMMethod init sMContext.sMMethods.detect{ o |
			o.name == "main"
		}
		if sm.isVoid() then	
			result := sMContext
		end
	end
	
	operation save(context : KM2EcoreContext) : Void is do
		// Create a Simk resource
		context.simkOutput := context.kmInput.replaceExtension("simk")
	    var simkResource : Resource init context.outputRepository.createResource(context.simkOutput, "http://www.kermeta.org/simk")
	    simkResource.add(self)
	    // Save the Simk model
	    simkResource.save()
	end
}

aspect class SMClass {
	/** TODO TO COMMENT*/
	operation setWrapperUsage() : Void is do
		self.usages := SMUsage.Wrapper//.add(SMUsage.Wrapper)
	end
}

aspect class SMMethod {
	/** TODO TO COMMENT*/
	operation setWrapperUsage() : Void is do
		self.usages := SMUsage.Wrapper//.add(SMUsage.Wrapper)
	end
}