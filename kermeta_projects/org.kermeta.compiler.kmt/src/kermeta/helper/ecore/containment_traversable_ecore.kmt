/* $Id: containment_traversable_ecore.kmt,v 1.1 2008-03-04 19:37:39 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */

/**
 *
 * func : <Object -> Object> because we need to visit the tags.
 *
 */

package ecore;
 
require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/ecore_behavior.kmt"

using ecore
using kermeta::language::structure

aspect class EObject {
	operation printPath() : String is do
		result := ""
	end
}

aspect class EPackage {
	operation eachOwnedElement(func : <EObject -> Object>) : Void is do
        
        self.eClassifiers.each{ o |
			func(o)
		}
		self.eSubpackages.each{ p |
			func(p)
		}
	end
	
	method printPath() : String is do
		result := ""
	end
}

aspect class EClass {
	operation eachOwnedElement(func : <EObject -> Object>) : Void is do
		self.eReferences.each{ ref |
			if ref.containment then
				func(ref)
			end
		}
	end	
	
	method printPath() : String is do
		result := "aspect class " + self.name + "{\n"
		result := result + "\toperation eachOwnedElement(func : <Object -> Object>) : Void is do\n"
		
		self.eachOwnedElement{ e |
			result := result + e.printPath() + "\n"
		}
		result := result + "\n\tend\n}\n"
	end
}

aspect class EReference {
	method printPath() : String is do
		result := "\t\tself." + self.name + ".each{ e |\n"
		result := result + "\t\t\tfunc(e)"
		result := result + "\n\t\t}"
	end
}
