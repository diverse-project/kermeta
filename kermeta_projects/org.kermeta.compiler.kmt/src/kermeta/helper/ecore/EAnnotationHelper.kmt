/* $Id: EAnnotationHelper.kmt,v 1.6 2008-04-10 15:03:06 cfaucher Exp $
 * Creation date: January 29, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Francois Tanguy <ftanguy@irisa.fr>
 */

package km2ecore::helper::ecore;


require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "../../common/trace_structure.kmt"

using kermeta::language::structure
using ecore

class EAnnotationHelper {
	
	operation createKermetaEAnnotation(key : String, ~value : String) : EAnnotation is do
		result := create(KermetaEAnnotationSource.kermeta.name.toString(), key, ~value)
	end
	
	operation getEmptyKermetaEAnnotation() : EAnnotation is do
		var annotation : EAnnotation init EAnnotation.new
		annotation.source := KermetaEAnnotationSource.kermeta.name.toString()
		result := annotation
	end

	operation createAbstract() : EAnnotation is do
		result := createKermetaEAnnotation(KermetaEAnnotationKey.isAbstract.name.toString(), "true")
	end

	operation create(source : String, key : String, ~value : String) : EAnnotation is do 
		var annotation : EAnnotation init EAnnotation.new
		annotation.source := source
		addEntry(annotation, key, ~value)
		result := annotation
	end
	
	operation addEntry(annotation : EAnnotation, key : String, ~value : String) : Void is do
		var entry : EStringToStringMapEntry init EStringToStringMapEntry.new
		entry.key := key
		entry.~value := ~value 
		annotation.details.add(entry)
	end
	
	operation addAnnotationGenModelImpl( eModelElement : EModelElement , body : String) : Void is do
		if not eModelElement.isVoid() then
			eModelElement.eAnnotations.add(create("http://www.eclipse.org/emf/2002/GenModel", "body", body))
		end
	end
	
	// Retrieve the kermeta EAnnotation if exists, if not returns an empty one
	operation getKermetaEAnnotation(obj : Object) : EAnnotation is do
		result := void
		if not obj.container.isVoid() then
			
			var ecoreMEProp : Property init obj.container.getMetaClass().classDefinition.allAttribute().detect{ prop |
				//stdio.writeln("prop.name: " + prop.name)
				prop.name=="ecoreModelElement"
			}
			
			if (not ecoreMEProp.isVoid()) and (not obj.container.get(ecoreMEProp).isVoid()) then
				//stdio.writeln("obj.container.getMetaClass().classDefinition.name: " + ecoreMEProp.name.toString())
				result := obj.container.get(ecoreMEProp).asType(EModelElement).eAnnotations.detect{ t |
					t.source==KermetaEAnnotationSource.kermeta.name.toString()
				}
				if result.isVoid() then
					result := getEmptyKermetaEAnnotation()
				end
			end
		else
			result := getEmptyKermetaEAnnotation()
		end
		
		// Temporarily Hack
		result := getEmptyKermetaEAnnotation()
	end
}

/** Enumeration that lists the different keys among the Kermeta annotation in the Ecore side */
enumeration KermetaEAnnotationSource {
	kermeta;
	/*kermeta.inv;
	kermeta.~pre;
	kermeta.~post;*/
}

enumeration KermetaEAnnotationKey {
	isAbstract;
	~alias;
	superOperation;
	isReadOnly;
	documentation;
}
