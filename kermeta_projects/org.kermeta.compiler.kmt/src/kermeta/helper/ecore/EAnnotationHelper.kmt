/* $Id: EAnnotationHelper.kmt,v 1.15 2008-09-19 17:37:15 cfaucher Exp $
 * Creation date: January 29, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Francois Tanguy <ftanguy@irisa.fr>
 */

package km2ecore::helper::ecore;


require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "../../common/TraceStructure.kmt"
require "../../helper/kermeta/KermetaHelper.kmt"

using kermeta::language::structure
using ecore
using km2ecore::helper::kermeta

class EAnnotationHelper {
	
	operation createKermetaEAnnotation(key : String, ~value : String) : EAnnotation is do
		result := create(KermetaEAnnotationSource.kermeta.name.toString(), key, ~value)
	end
	
	operation getEmptyKermetaEAnnotation() : EAnnotation is do
		var annotation : EAnnotation init EAnnotation.new
		annotation.source := KermetaEAnnotationSource.kermeta.name.toString()
		result := annotation
	end

	operation createAbstract() : EAnnotation is do
		result := createKermetaEAnnotation(KermetaEAnnotationKey.isAbstract.name.toString(), "true")
	end

	operation create(source : String, key : String, ~value : String) : EAnnotation is do 
		var annotation : EAnnotation init createEmpty(source)
		addEntry(annotation, key, ~value)
		result := annotation
	end
	
	operation createEmpty(source : String) : EAnnotation is do 
		var annotation : EAnnotation init EAnnotation.new
		annotation.source := source
		result := annotation
	end
	
	operation addEntry(annotation : EAnnotation, key : String, ~value : String) : Void is do
		var entry : EStringToStringMapEntry init EStringToStringMapEntry.new
		entry.key := key
		entry.~value := ~value 
		annotation.details.add(entry)
	end
	
	operation addAnnotationGenModelImpl( eModelElement : EModelElement , body : String) : Void is do
		if (not eModelElement.isVoid()).andThen{ v | not existsAnnotationGenModelImpl(eModelElement)} then
			eModelElement.eAnnotations.add(create("http://www.eclipse.org/emf/2002/GenModel", "body", body))
		end
	end
	
	operation existsAnnotationGenModelImpl(eModelElement : EModelElement) : Boolean is do
		result := eModelElement.eAnnotations.exists{ a |
			(a.source=="http://www.eclipse.org/emf/2002/GenModel") and a.details.exists{ d | d.key=="body" }
		}
	end
	
	/**
	 * Not used
	 */
	 @deprecated "true"
	operation addAnnotationPropSetter( eModelElement : EModelElement , body : String) : Void is do
		if not eModelElement.isVoid() then
			eModelElement.eAnnotations.add(create("kompiledderivedProp.setter", "body", body))
		end
	end
	
	/**
	 * Not used
	 */
	 @deprecated "true"
	operation addAnnotationPropGetter( eModelElement : EModelElement , body : String) : Void is do
		if not eModelElement.isVoid() then
			eModelElement.eAnnotations.add(create("kompiledderivedProp.getter", "body", body))
		end
	end
	
	// Retrieve the kermeta EAnnotation if exists, if not returns an empty one
	operation getKermetaEAnnotation(obj : Object) : EAnnotation is do
		result := void
		if not obj.container.isVoid() then
			
			var ecoreMEProp : Property init obj.container.getPropertyValue("ecoreModelElement")
						
			if (not ecoreMEProp.isVoid()) and (not obj.container.get(ecoreMEProp).isVoid()) then
				result := obj.container.get(ecoreMEProp).asType(EModelElement).eAnnotations.detect{ t |
					t.source==KermetaEAnnotationSource.kermeta.name.toString()
				}
				if result.isVoid() then
					result := getEmptyKermetaEAnnotation()
				end
			end
		else
			result := getEmptyKermetaEAnnotation()
		end
		
		// Temporarily Hack
		result := getEmptyKermetaEAnnotation()
	end

}


/** Enumeration that lists the different keys among the Kermeta annotation in the Ecore side */
enumeration KermetaEAnnotationSource {
	kermeta;
	/*kermeta.functionType;
	kermeta.inv;
	kermeta.~pre;
	kermeta.~post;*/
}

enumeration KermetaEAnnotationKey {
	isAbstract;
	~alias;
	superOperation;
	isReadOnly;
	documentation;
}
