/* $Id: TagHelper.kmt,v 1.19 2009-02-23 14:04:06 cfaucher Exp $
 * Creation date: April 07, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 */


package kermeta::language::structure;


require kermeta

using kermeta::standard

aspect class Object {

	/**
	 * Get the values for the tags having as key: <key : String>
	 */
	operation getTagValues( key : String ) : OrderedSet<String> is do
		
		var value_list : OrderedSet<String> init OrderedSet<String>.new
		
		self.ownedTags.each{ t |
			if not t.name.isVoid() then
				if t.name == key then
					value_list.add(t.~value)
				end
			end
		}
		result := value_list
	end
	
	/**
	 * Get the values for the tags having as key: <key : String>
	 */
	operation getUniqueTagValue( key : String ) : String is do
		result := ""
		var value_list : OrderedSet<String> init self.getTagValues(key)
		if (not value_list.isVoid()) and (value_list.size()>=1) then
			result := value_list.first()
		end
	end
	
	/**
	 * Get the instanceClassName
	 * 
	 * This is used to convert ValueTypes in EDataType and so fill the instanceClassName attribute
	 *
	 * The value of the tag must be a Java Class Qualified Name, eg: java.lang.String
	 */
	operation getEMFInstanceClassName() : String is do
		result := getUniqueTagValue("EMF_instanceClassName")
	end
	
	/**
	 * Get the defaultConstructor
	 * 
	 * For Value Types the default constructor are not in general TheType() like for Integer: Integer(0),
	 * thus we cannot have at priori a predefined way for generating these constructors
	 *
	 * The value of the tag must be a Java Class Qualified Name, eg: java.lang.String
	 */
	operation getEMFDefaultConstructor() : String is do
		result := getUniqueTagValue("EMF_defaultConstructor")
	end
	
	/**
	 * Get the EDataType_instanceClassName
	 * 
	 * This used to declare if the element is an EDataType in the Ecore model side
	 *
	 * The value of the tag must be a Java Class Qualified Name, eg: java.lang.String
	 */
	operation getEMFEDataTypeInstanceClassName() : String is do
		result := getUniqueTagValue("ecore.EDataType_instanceClassName")
	end
	
	/**
	 * Get the EDataType_eTypeParameters
	 * 
	 * This used to store the ETypeParameters in the Ecore model side
	 * 
	 * The value of the tag must be ETypeParameters separated by " , "
	 */
	operation getEMFEDataTypeETypeParameters() : String is do
		result := getUniqueTagValue("ecore.EDataType_eTypeParameters")
	end
	
	/**
	 * Get the EMF_needProperty
	 *
	 * Better solution than creating aspects because end-user should not have knowledge of that through reflexivity
	 * Properties are then created in the Ecore file only
	 *
	 * This tag is complex, i.e.: with 2 values: name and javaClass/classDefinitionQN
	 * - javaClass is used when the expected type is a Java CLass
	 * - classDefinitionQN is used when the expected type is a ClassDefinition
	 *
	 * Example with javaClass: the Collection class definition needs a new reference for representing a Java Native collection
	 * the tag is like: @EMF_needProperty "name=values javaClass=org.eclipse.emf.common.util.EList"
	 * 
	 * Example with classDefinitionQN: the Object class definition needs at runtime a reference for storing the internalContainingResource
	 * the tag is like: @EMF_needProperty "name=internalContainingResource classDefinitionQN=kermeta::persistence::Resource"
	 */
	operation getEMFNeedProperty() : OrderedSet<String> is do
		result := getTagValues("EMF_needProperty")
	end
	
	/**
	 * Get the compiledJavaExtern call for replacing the current one
	 * 
	 * Represents the static call in compiled mode
	 *
	 * The value of the tag must be like a Java Static Call, eg: org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.add(this, element)
	 * without the ";" at the end, ";" is added automatically
	 */
	operation getCompiledJavaExtern() : String is do
		result := getUniqueTagValue("compiledJavaExtern")
	end
	
	/**
	 * Get the Wrapprings of ValueType's ReturnType for tackle the  eplacing the current one
	 * 
	 * For ValueType Wrapper methods, if needed that is able to precise the return type
	 *
	 * Value is like this: java.lang.String=kermeta.language.structure.Object java.lang.Boolean=kermeta.language.structure.Object
	 * A binding must be defined for each ValueType
	 */
	operation getWrapperValueTypeReturnType() : String is do
		result := getUniqueTagValue("WrapperValueTypeReturnType")
	end
	
	/**
	 * Get the Wrapprings of ValueType's SelfExpression for tackle the  eplacing the current one
	 * 
	 * For ValueType Wrapper methods, if needed that is able to precise the type of self expression
	 * the self expression is added by default in the Wrapper method signature
	 *
	 * Value is like this: java.lang.String=kermeta.language.structure.Object java.lang.Boolean=kermeta.language.structure.Object
	 * A binding must be defined for each ValueType
	 */
	operation getWrapperValueTypeSelfExpression() : String is do
		result := getUniqueTagValue("WrapperValueTypeSelfExpression")
	end
	
	/**
	 * Get the the final Java Class Qualified Name
	 *
	 * Used for the POJO creation
	 * 
	 * Value is like this: a Java Class Qualified Name
	 */
	operation getFinalJavaClassQN() : String is do
		result := getUniqueTagValue("finalJavaClassQN")
	end
	
	/**
	 * Get the EDataType_isSerializable
	 *
	 * Value is true or false
	 */
	operation getEMFEDataTypeIsSerializable() : Boolean is do
		result := interpretBooleanTag("ecore.EDataType_isSerializable")
	end
	
	/**
	 * Get the isTransient
	 *
	 * Value is true or false
	 */
	operation getEMFIsTransient() : Boolean is do
		result := interpretBooleanTag("ecore.isTransient")
	end
	
	/**
	 * Get the deprecated tag
	 * Specific method for detecting the deprecated model elements
	 * 
	 * Not really used in the rest of the impl.
	 */
	operation getDeprecated() : String is do
		result := getUniqueTagValue("deprecated")
	end
	
	/**
	 * Interpret boolean tags, thus retruns true or false the given tag has got a value like: "true" or "false"
	 */
	operation interpretBooleanTag( str_tag : String ) : Boolean is do
		result := false
		
		if getUniqueTagValue(str_tag) != "" then
			if getUniqueTagValue(str_tag)=="true" then
				result := true
			end
		end
	end
}

aspect class GenericTypeDefinition {

}

aspect class MultiplicityElement {
	
	/**
	 * Get the EMFRenameAs reference of an Operation
	 * 
	 * This tag is used to rename the operation at compilation time if its name is conflicting
	 * with EMF name, i.e.: if the user is using a property named "log" and operations named "getLog" or "setLog",
	 * thus the operation's names will conflict with the generated getter and setter for log by EMF, i.e.: "getLog" and "setLog"
	 * This tag is taking into account if the user defines it, but if a potential conflict is present then
	 * the Kermeta loader adds automatically this tag
	 */
	operation getEMFRenameAs() : String is do
		result := getUniqueTagValue("EMF_renameAs")
	end
	
	/**
	 * Get the RecopyInValueTypes reference of an Operation
	 * 
	 * For example, recopy the behavior from Object.getMetaClass() in the ValueType Wrapper.
	 * This is needed because the super operation call is broken by the usage of Java primitive types instead of kermeta::standard types
	 * (Java primitive types do not inherit from kermeta::language::structure::Object)
	 */
	operation getRecopyInValueTypes() : String is do
		result := getUniqueTagValue("RecopyInValueTypes")
	end

}

/*
enumeration KermetaTagSource {
	EMF_renameAs;
	deprecated;
	ecore.isTransient;
	ecore.EDataType_isSerializable;
	EMF_instanceClassName;
	ecore.EDataType_instanceClassName;
	EMF_needProperty;
	compiledJavaExtern;
}
*/