/* $Id: ObjectHelper.kmt,v 1.14 2008-12-03 16:52:51 cfaucher Exp $
 * Creation date: January 29, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Francois Tanguy <ftanguy@irisa.fr>
 */


package kermeta::language::structure;

require kermeta

require "KermetaHelper.kmt"

using kermeta::language::behavior
using kermeta::standard

aspect class Object {

	operation getPropertyValue(propertyName : String) : Property is do
		var classDefinition : ClassDefinition init self.getMetaClass().typeDefinition.asType(ClassDefinition)
		result := (classDefinition.allAttribute.detect{ p | p.asType(Property).name == propertyName }).asType(Property)
	end
	
	//Navigate the containment path until the right type has been found
	operation getContainerAsType(type : Type) : Object is do
		result := void
		var obj : Object init self

		from var i : Integer init 0
        until i==1
        loop
            if not obj.container.isVoid() then
            	if obj.container.isInstanceOf(type) then
            		i := 1
            		result := obj.container
            	else
            		obj := obj.container
            	end
            else
            	i := 1
			end
        end
	end
	
	operation getContainerAsTypeIn(type : Type, stop_type : Type) : Object is do
		result := void
		var obj : Object init self

		from var i : Integer init 0
        until i==1 or obj.isInstanceOf(stop_type)
        loop
            if not obj.container.isVoid() then
            	if obj.container.isInstanceOf(type) then
            		i := 1
            		result := obj.container
            	else
            		obj := obj.container
            	end
            else
            	i := 1
			end
        end
	end
	
	operation callsFunctionType() : Boolean is do
		result := false
		
		if self.isInstanceOf(CallFeature) then
			if self.asType(CallFeature).isCallFeatureAsStaticOperation() then
				if self.asType(CallFeature).staticOperation.isFunctionType() then
					result := true
				end
			end
		end
	end
	
	operation mustBeAssigned() : Boolean is do
		//FIXME CF Ok this implementation is a little bit ugly
		// but this operation should be never called, only the overwritten
		result := false
	end
	
	operation getRootPackage() : Package is do
		result := void
		
		var topPack : Package init self.getContainerAsType(Package).asType(Package)
		
		from not topPack.isVoid()
		until topPack.isVoid()
		loop
			result := topPack
			topPack ?= topPack.getContainerAsType(Package)
		end
		
	end
	
}