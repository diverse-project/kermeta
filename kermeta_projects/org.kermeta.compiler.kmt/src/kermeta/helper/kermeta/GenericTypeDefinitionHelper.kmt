/* $Id: GenericTypeDefinitionHelper.kmt,v 1.7 2008-07-29 09:59:53 cfaucher Exp $
 * Creation date: April 07, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 */


package km2ecore::helper::kermeta;


require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/common/KeywordList.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/ecore/EcoreHelper.kmt"

using kermeta::language::structure
using kermeta::language
using km2ecore
using ecore
using km2ecore::helper::ecore

class GenericTypeDefinitionHelper {
	
	/**
	 * FIXME CF: this method should be deprecated, because the function type are included in the resulted Ecore
	 * or we could create only the signature of the method
	 */
	operation getKermetaSpecialType(p : Package) : EClass is do
		var specialType : EClass
		
		var name_KermetaSspecialType : String init "KermetaSpecialTypesAlias"
		
		var retrieveSpecialType : EClassifier
		retrieveSpecialType := p.ecoreModelElement.eClassifiers.detect{ c |
			c.isInstanceOf(EClass) and (c.name == name_KermetaSspecialType)
		}
		
		if not retrieveSpecialType.isVoid() then
			result := retrieveSpecialType.asType(EClass)
		else // Create the alias to the Kermeta Special Type
			specialType := EClass.new
			specialType.name := name_KermetaSspecialType
			specialType.instanceClassName := "org.eclipse.emf.ecore.EObject"
			p.ecoreModelElement.eClassifiers.add(specialType)
			specialType.eAnnotations.add(EAnnotationHelper.new.createKermetaEAnnotation(KermetaEAnnotationKey.~alias.name.toString(), "KermetaSpecialTypesAlias"))
			result := specialType
		end
	end
}
