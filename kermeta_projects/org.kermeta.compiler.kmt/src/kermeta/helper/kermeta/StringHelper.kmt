/* $Id: StringHelper.kmt,v 1.9 2008-09-08 19:58:26 cfaucher Exp $
 * Creation date: February 27, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 */

package kermeta::standard;

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"

using kermeta::standard
using kermeta::utils
using km2ecore

aspect class String {

	/**
	 * Return a new string with the first letter in upper case of the given string
	 */
	operation capName() : String is do
		result := self.substring(0,1).toUpperCase + self.substring(1, self.size())
	end
	
	/**
	 * Replace the last segment of a string by the new extension
	 */
	operation replaceExtension(new_extension : String) : String is do
	
		result := ""
		
		var set_str : OrderedSet<String> init self.split("\\.")
		
		var inc_seg : Integer init 0
		set_str.each{ seg |
			if inc_seg<(set_str.size()-1) then
				result := result + seg + "."
			end
			inc_seg := inc_seg + 1
		}
		
		result := result + new_extension
		
	end
	
	/**
	 * This method will be generated as a Simk static operation
	 */	 
	operation getPropertyInfos() : Hashtable<String, String> is do
		
		var set_infos : OrderedSet<String> init OrderedSet<String>.new()
		var map_infos : Hashtable<String, String> init Hashtable<String, String>.new()
		
		set_infos := self.split(" ")
		
		set_infos.each{ i |
			var tmp_set_infos : OrderedSet<String> init i.split("=")
			if tmp_set_infos.size()>=2 then
				if not tmp_set_infos.elementAt(0).isVoid() then
					if (not tmp_set_infos.elementAt(1).isVoid()) and (tmp_set_infos.elementAt(1)!="") then
						map_infos.put(tmp_set_infos.elementAt(0), tmp_set_infos.elementAt(1))
					end
				end
			end
		}
		
		result := map_infos
	end
	
	operation isValueType(context : KM2EcoreContext) : Boolean is do
		result := false
		
		if context.valueTypeMapping.contains(self) then
			result := true
		end
	end
}