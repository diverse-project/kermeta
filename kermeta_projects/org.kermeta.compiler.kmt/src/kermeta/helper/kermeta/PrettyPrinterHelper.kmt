/* $Id: PrettyPrinterHelper.kmt,v 1.20 2009-02-09 17:09:23 cfaucher Exp $
 * Creation date: February 27, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 */

package km2ecore::helper::kermeta;

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/kermeta/KermetaHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/java/JavaHelper.kmt"

using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard
using km2ecore
using km2ecore::helper::java

/**
 * Class containing some helpers dedicated to the Kermeta compiler
 */
class CompilerHelperJava {

	operation ppCRSeparatedNode(expressions : OrderedSet<Expression>, context : KM2EcoreContext) : String is do
		result := ""
		expressions.each{e |
			result := result + e.createBehaviorJava(context)
		}
	end
	
	/**
	 * Give the pp string corresponding to the CreateFactory in EMF-like of a type
	 * @deprecated
	 */
	operation ppEmfLikeCreateFactory(localType : String) : String is do
		result := ""

		var name_set : Sequence<String> init localType.split("\\.")
			
		var allPackages_label : String init localType.substring(0, localType.size()-name_set.elementAt(name_set.size()-1).size())
			
		if name_set.size()>=2 then
			result := " = " + allPackages_label + name_set.elementAt(name_set.size-2).capName() +"Factory.eINSTANCE.create" + name_set.elementAt(name_set.size()-1) + "()"
		end
	end
	
	operation ppEmfLikeGetEMF(localType : String) : String is do
		result := ""

		localType := localType.split("<").first()
		
		var name_set : Sequence<String> init localType.split("\\.")
			
		var allPackages_label : String init localType.substring(0, localType.size()-name_set.elementAt(name_set.size()-1).size())
			
		if name_set.size()>=2 then
			var class_label : String init name_set.elementAt(name_set.size()-1)
			
			if class_label == "Class" then
				class_label := class_label + "_"
			end
			
			result := allPackages_label + name_set.elementAt(name_set.size-2).capName() + "Package.eINSTANCE.get" + class_label + "()"
		end
	end
	
	/**
	 *
	 */
	operation ppTypeFromMultiplicityElement(elem : MultiplicityElement, context : KM2EcoreContext) : String is do
		result := ""
		
		/*if elem.container.isInstanceOf(TypeLiteral) and elem.container.container.isInstanceOf(CallExpression) then
			result := result + "ClassCallExpression"
		else*/
		
			if elem.upper != 1 then
				if elem.isOrdered then
					if elem.isUnique then
						result := result + "kermeta.standard.OrderedSet"
					else
						result := result + "kermeta.standard.Sequence"
					end
				else
					if elem.isUnique then
						result := result + "kermeta.standard.Set"
					else
						result := result + "kermeta.standard.Bag"
					end
				end
				result := result + "<" + elem.type.createBehaviorJava(context) + ">"
			else
				result := result + elem.type.createBehaviorJava(context)
			end
		
		//end
		
	end
	
	/**
	 * This helper is used for the pretty printing of the parameters in a CallFeature
	 */
	operation ppComaSeparatedNodes(expressions : Set<Expression>, context : KM2EcoreContext) : String is do
		result := ""

		var i : Integer init 0
		expressions.each{ e |
			if i==1 then
				result := result + ", "
			else
				i := 1
			end
			
			var str_param : String init ""
			
			if not e.isFunctionTypeVariable() then
				
				str_param := e.createBehaviorJava(context)
				
				if ( (not context.current_valueType.isVoid())
						or context.staticOperationMode
					) and (str_param == "this") then
					str_param := "self"
				end
				
				if (
						(not e.isInstanceOf(CallVariable))
						and (not e.isInstanceOf(CallFeature))
						and (not e.isInstanceOf(CallResult))
						and (not e.isInstanceOf(SelfExpression))
					) and ( 
						(e.staticType.getTypeQName == "kermeta::language::structure::Class") or (e.staticType.getTypeQName == "kermeta::language::structure::Type")
					)
						then
					str_param := context.JAVA_INSTANCE_EXECUTION_CONTEXT + ".getMetaClass(\"" + str_param + "\")"
				end
				
				// Case: self.visitVariable(t ?= visitable)
				if e.isInstanceOf(Assignment) then
					var assign_ : Assignment init e.asType(Assignment)
					str_param := str_param + assign_.valueTypeCastSuffix + assign_.cacheCastSuffix
				else
					if e.isInstanceOf(CallFeature) then
						if e.asType(CallFeature).requireConversionValueTypeToObject(context) then
							str_param := context.OBJECT_UTIL_CLASS + ".convertAsObject(" + str_param + ")"
						end
					end
				end
			
			else
			
				var type_label : String init ""
				var theLambdaExp : LambdaExpression init context.ftStack.peek()
				if e.container.isInstanceOf(CallFeature) and theLambdaExp.staticType.isInstanceOf(FunctionType) then
					var lambdaExp_returnType : String init theLambdaExp.staticType.asType(FunctionType).right.createBehaviorJava(context)
					if not Operation.new().isVoidType(lambdaExp_returnType) then
						type_label := lambdaExp_returnType
					end
				end
				if type_label!="" then					
					context.resultLastStatementStack.push("result_lambda" + context.printFtSuffix() + " = " + context.TYPE_SEPARATOR + type_label)

					e.container.asType(Expression).beforeLambdaExpressionResult := e.container.asType(Expression).beforeLambdaExpressionResult + "\n" + type_label + " result_lambda" + context.printFtSuffix() + " = null;\n"
						+ e.createBehaviorJava(context)
					str_param := "result_lambda" + context.printFtSuffix()
				
					context.resultLastStatementStack.pop()
				else
					str_param := e.createBehaviorJava(context)
				end
				
			end
			
			result := result + str_param
		}
	end
}
