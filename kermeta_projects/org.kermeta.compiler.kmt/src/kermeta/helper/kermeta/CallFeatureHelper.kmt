/* $Id: CallFeatureHelper.kmt,v 1.1 2009-02-17 12:23:38 cfaucher Exp $ 
 * Creation : February 17, 2009
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            Cyril Faucher <cfaucher@irisa.fr>
 */

package kermeta::language::behavior;

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "../java/JavaHelper.kmt"

using kermeta::standard
using km2ecore
using kermeta::language::structure
using km2ecore::helper::java
using kermeta::utils

aspect class CallFeature {	
	
	// This attribute is on CallFeature, because the called operation
	// may be called futher times in the same expression series
	attribute calledFtResult : String [0..1]
	
	operation isParameter() : Boolean is do
		result := false
		if self.container.isInstanceOf(CallFeature) then
			result := not self.container.asType(CallFeature).parameters.detect{ p |
				p==self
			}.isVoid()
		end
	end
	
	operation isParameterSingle() : Boolean is do
		result := false
		
		if self.isParameter() then
			var cf_ : CallFeature init self.container.asType(CallFeature)
			var i : Integer init -1
			var exp : Expression init cf_.parameters.detect{ p |
				i := i+1
				p==self
			}
			if cf_.staticOperation.ownedParameter.elementAt(i).asType(Parameter).upper==1 then
				result := true
			end
		end
	end
	
	operation isParameterMany() : Boolean is do
		result := false
		
		if self.isParameter() then
			var cf_ : CallFeature init self.container.asType(CallFeature)
			var i : Integer init -1
			var exp : Expression init cf_.parameters.detect{ p |
				i := i+1
				p==self
			}
			if cf_.staticOperation.ownedParameter.elementAt(i).asType(Parameter).upper!=1 then
				result := true
			end
		end
	end
	
	operation isFromUtil_MethodFragment(fName : String, context : KM2EcoreContext) : Boolean is do
		result := context.frameworkOperations.contains(fName)
						or ( (not target.isInstanceOf(CallVariable)) 
								and (not target.isInstanceOf(CallResult))
								and (not target.isInstanceOf(CallFeature))
								and (not target.isInstanceOf(SelfExpression))
							)
	end
	
	// Determine if the callFeature is called by a static method: Java package 'util'
	operation fromUtil(context : KM2EcoreContext) : Boolean is do
	
		var fName : String  init IdentifierHelper.new.getMangledIdentifier(self.name, context)
		
		//stdio.writeln(" -- " + self.toString + " - " + self.staticOperation.name + " - " + self.staticOperation.owningClass.name)
		
		if self.staticOperation.ownedByValueType()
		
			or (self.staticOperation.owningClass.qualifiedName=="kermeta::language::structure::Object"
				and isFromUtil_MethodFragment(fName, context)
				)
			
			or (self.staticOperation.owningClass.qualifiedName=="kermeta::language::structure::Type"
				and isFromUtil_MethodFragment(fName, context)
				)

			or (self.staticOperation.owningClass.qualifiedName=="kermeta::language::structure::Class"
				and isFromUtil_MethodFragment(fName, context)
				)
		then
			result := true
		else
			result := false
		end
						
	end
	
	// Determine if the callFeature refers a method owned by the class definition: "Class"
	operation isFromClass() : Boolean is do
		result := false
		if not self.staticOperation.isVoid() then
			if self.staticOperation.owningClass.qualifiedName=="kermeta::language::structure::Class" then
				result := true
			end
		end
	end
	
	operation getFunctionType() : FunctionType is do
		result ?= self.containedType.detect{ t | t.isInstanceOf(FunctionType)}
	end
	
	operation getFunctionTypeReturnType() : Type is do
		result := void
		if not self.getFunctionType().isVoid() then
			result := self.getFunctionType().right
		end
	end

	operation createStringFromFunctionType(context : KM2EcoreContext) : String is do
		
		var tgt : Expression init self.target
		
		var map_type : Hashtable<Type, Type> init Hashtable<Type, Type>.new()
		var inc_tp : Integer init 0
		self.staticTypeVariableBindings.each{ type_ |
			map_type.put(self.staticOperation.typeParameter.elementAt(inc_tp), type_)
			inc_tp := inc_tp + 1			
		}
		context.ftMapTypeStack.push(map_type)
		
		/************/
		context.pushFtSuffix()
		/************/
		
		//Lambda expression to inline
		var ftRightType : Type init Type.new()
		if not self.parameters.detect{param | param.isInstanceOf(LambdaExpression)}.isVoid() then
			
			var theLambdaExp : LambdaExpression init self.parameters.detect{param | param.isInstanceOf(LambdaExpression)}.asType(LambdaExpression)
		
			context.ftStack.push(theLambdaExp)
			
			self.staticOperation.lambdaExpression := theLambdaExp
			theLambdaExp.cuid := context.inc_ftSuffix.toString()
			self.staticOperation.cuid := context.inc_ftSuffix.toString()
			
			if theLambdaExp.staticType.isInstanceOf(FunctionType) then
			
				var current_functionType : FunctionType init theLambdaExp.staticType.asType(FunctionType)
				
				if current_functionType.left.isInstanceOf(ProductType) then
					context.ftProductTypeStack.push(current_functionType.left.asType(ProductType))
				end
				
				ftRightType := current_functionType.right
			end
		end
		
		var ft_str : String init ""
		
		//stdio.writeln("context.pushFtSuffix()")
		//context.pushFtSuffix()
		
		
		// Replacing the self
		if tgt.callsFunctionType() then
			// FIXME CF 08-09-10
			context.ftSuffixActivation := true
			
			context.ftContextualSelf := context.SELF_EXPRESSION_TO_REPLACE
		else
			/*if tgt.isInstanceOf(CallFeature) then
				var tmp_cl : CallFeature init tgt.asType(CallFeature)
				
				if tmp_cl.target.isInstanceOf(SelfExpression) then
					if not tmp_cl.target.asType(SelfExpression).getContainerAsType(Operation).isVoid() then
					
					var	tmp_op : Operation init tmp_cl.target.asType(SelfExpression).getContainerAsType(Operation).asType(Operation)
						if tmp_op.isFunctionType() and tmp_cl.target.getContainerAsType(LambdaExpression).isVoid() then
							stdio.writeln("tgt.toString(): " + tmp_cl.name + " - " + tgt.createBehaviorJava(context))
							context.ftSuffixActivation := true
							stdio.writeln("tgt.toString() with true: " + tmp_cl.name + " - " + tgt.createBehaviorJava(context))
						end
					end
				end
			end*/
			
			context.ftContextualSelf := tgt.createBehaviorJava(context)
		end
		
		// FIXME CF 08-09-10
		context.ftSuffixActivation := true

		var callElement : String init ""
		if self.container.isInstanceOf(VariableDecl) then
			//stdio.writeln(self.toString + " - " + self.name + " - " + self.container.asType(VariableDecl).identifier)
			callElement := /*"*_91_*" +*/ IdentifierHelper.new.getMangledIdentifier(self.container.asType(VariableDecl).identifier, context) /*+ "*_92_*"*/
		else
			if self.container.isInstanceOf(CallVariable) then
				stdio.writeln("Please contact the development team if you have this case !")
				callElement := IdentifierHelper.new.getMangledIdentifier(self.container.asType(CallVariable).name, context)
			end
		end
		
		if (callElement != "") then
			ft_str := ft_str + "null;\n"
		end
		
		var ppCastSuffix : String init ""
		var ppValueTypeCastSuffix : String init ""
		
		if self.container.isInstanceOf(Assignment) then
			
			ppCastSuffix := self.container.asType(Assignment).cacheCastSuffix
			ppValueTypeCastSuffix := self.container.asType(Assignment).valueTypeCastSuffix
		
			if self.container.asType(Assignment).target.isInstanceOf(CallResult) then
				callElement := self.container.asType(Assignment).target.createBehaviorJava(context)
			end
			if self.container.asType(Assignment).target.isInstanceOf(CallVariable) then
				callElement := self.container.asType(Assignment).target.createBehaviorJava(context)
			end
		end
		
		
		ft_str := ft_str + context.SEPARATOR_STATEMENT_FT + "//BIft:" + self.staticOperation.name + "\n"
		
		context.ftSuffixActivation := false
		var type_ftReturnType : String init self.staticType.createBehaviorJava(context) //self.getFunctionTypeReturnType().createBehaviorJava(context)
		context.ftSuffixActivation := true
		
		context.ftReturnType := type_ftReturnType
		
		/****************************/
		/****************************/
		/****************************/
		/****************************/
		/****************************/
		/****************************/
		//if self.target.staticType.getTypeQName() == self.staticOperation.owningClass.qualifiedName then
			ft_str := ft_str + self.staticOperation.createBehaviorJava(context)
		/*else
			ft_str := ft_str + self.getMoreAppropriateOperation().createBehaviorJava(context)
		end*/
		
				
		// Management of the result last statement,
		// at the end of the function type a binding between the variables of the calling operation
		// and the variables of the given function type
		if callElement != "" then
			
			//callElement
			ft_str := ft_str + "\n//CE\n"
			
			if context.getResultLastStatementId()!="" then
				ft_str := ft_str + context.getResultLastStatementId() + "result" + context.printFtSuffix() + ppValueTypeCastSuffix + ppCastSuffix + ";\n"
			else
				ft_str := ft_str + callElement + " = result" + context.printFtSuffix() + ";\n"
			end
		end
		
		if (callElement == "") and self.container.isInstanceOf(Assignment) then
			if self.container.asType(Assignment).target.isInstanceOf(CallResult) then
				//callElement
				ft_str := ft_str + "\n//CER\n"
				ft_str := ft_str + context.RETURN_EXPRESSION_TO_REPLACE + "result" + context.printFtSuffix() + ppValueTypeCastSuffix + ppCastSuffix + ";\n"
			end
		end
		
		
		/**********************************/
		/**********************************/
		/**********************************/
		if (callElement != "") and self.container.isInstanceOf(VariableDecl) then
			var str_binding : String init context.getResultLastStatementId().replace(" = ", "")
			if str_binding!="" then
				ft_str := ft_str + "\n//CEVD\n"
				ft_str := ft_str + callElement + " = " + str_binding + ";\n"
			end
		end
		/**********************************/
		/**********************************/
		/**********************************/
		
		
		if (callElement == "") and self.container.isInstanceOf(Conditional) then
			//if self.container.asType(Assignment).target.isInstanceOf(CallResult) then
				//callElement
				ft_str := ft_str + "\n//CEC\n"
				ft_str := ft_str + context.getResultLastStatementId() + "result" + context.printFtSuffix() + ";\n"
			//end
		end
		// End of the Management of the result last statement
		
		if (callElement == "") and (not Operation.new().isVoidType(self.staticType.getTypeName())) then
			self.calledFtResult := "result" + context.printFtSuffix()
		end
		
		ft_str := ft_str + "//EIft:" + self.staticOperation.name + "\n"
		
		//Pop all the stacks related to the compiling of function type
		context.ftSuffixActivation := false
		context.ftMapTypeStack.pop()
		context.ftProductTypeStack.pop()
		context.ftSuffix.pop()
		//context.current_param_ft.pop()
		
		result := ft_str
	end
	
	operation printGetAccessor(context : KM2EcoreContext) : String is do
		result := self.staticProperty.printGetAccessor(context)
	end
	
	operation printSetAccessor(context : KM2EcoreContext) : String is do
		result := self.staticProperty.printSetAccessor(context)
	end

	/**
	 * Unused for the moment
	 */
	operation getParamBindings() : String is do
		result := ""
		var i : Integer init 0
		self.parameters.each{ param |
			if param.isInstanceOf(LambdaExpression) then
				if param.asType(LambdaExpression).staticType.isInstanceOf(ProductType) then
					param.asType(LambdaExpression).staticType.asType(ProductType).type.each{ t |
						if i==1 then
							result := result + ", "
						else
							i := 1
						end
						result := result + t.getTypeQName()
					}
				end
			end
		}
		if result != "" then
			result := "<" + result + ">"
		end
	end
	
	operation getCallFeatureCorrespondingParameter() : Parameter is do
		result := void

		if self.isParameter() then
			// In this case the callFeature self is contained by another callFeature
			var cf_ : CallFeature init self.container.asType(CallFeature)
			var i : Integer init -1
			var exp : Expression init cf_.parameters.detect{ p |
				i := i+1
				p==self
			}
			result := cf_.staticOperation.ownedParameter.elementAt(i).asType(Parameter)
		end
	end
	
	operation isCallFeatureTargetsValueTypeOperation() : Boolean is do
		result := false
		
		if self.staticOperation.ownedByValueType then
			result := true
		end
	end

	operation requireConversionValueTypeToObject(context : KM2EcoreContext) : Boolean is do
		result := false
		
		if self.isParameter() then
			if not self.container.asType(CallFeature).isCallFeatureTargetsValueTypeOperation() then
				var param : Parameter init self.getCallFeatureCorrespondingParameter()
				
				if not param.isVoid() then
					var left_type : String init param.type.getTypeQName()
					
					if left_type == "kermeta::language::structure::Object" then
						if self.staticType.isValueType() then
							result := true
						end
					end
				end
			end
		end
	end

}