/* $Id: ClassDefinitionHelper.kmt,v 1.11 2008-10-28 13:21:45 cfaucher Exp $
 * Creation date: May 16, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 */

package kermeta::language::structure;

require kermeta

require "TagHelper.kmt"

using kermeta::standard
using kermeta::utils

aspect class ClassDefinition {

	//Get all the super types for a ClassDefinition
	//This operation has been moved to the framework
	/*operation allSuperTypes() : Set<Type> is do
	 
		var allSuperClasses : Set<Type> init Set<Type>.new
        var superClasses : Set<Type> init Set<Type>.new
        superClasses.addAll(self.superType)
        
        from  not superClasses.isEmpty
        until superClasses.isEmpty
        loop
            allSuperClasses.addAll(superClasses)
            var temp : Set<Type> init Set<Type>.new
             superClasses.each{ s |
             	if s.isInstanceOf(ParameterizedType) and s.asType(ParameterizedType).typeDefinition.isInstanceOf(ClassDefinition) then
                	temp.addAll(s.asType(ParameterizedType).typeDefinition.asType(ClassDefinition).superType)
                end
             }
             superClasses.clear()
             superClasses.addAll(temp)
        end
        
        result := allSuperClasses
	end*/
	
	operation setSubClassDefinitionToSuperTypes() : Void is do
		self.superType.each{ t |
			if t.isInstanceOf(ParameterizedType) then
				if t.asType(ParameterizedType).typeDefinition.isInstanceOf(ClassDefinition) then
					//stdio.writeln("sp: " + t.getTypeName() + " - " + self.name)
					t.asType(ParameterizedType).typeDefinition.asType(ClassDefinition).subClassDefinitions.add(self)
				end
			end
		}
	end
	
	//Check if the ClassDefinition is a subType of ValueType => we have to consider as a EDataType, i.e.: an EAttribute
	operation isValueType() : Boolean is do
		result := isSubTypeOf("kermeta::standard::ValueType")
	end
	
	operation isCollection() : Boolean is do
		result := false

		result := isSubTypeOf("kermeta::standard::Collection")
		
		if self.qualifiedName == "kermeta::standard::Collection" then
			result := true
		end
	end
	
	operation isIterator() : Boolean is do
		result := false

		result := isSubTypeOf("kermeta::standard::Iterator")
		
		if self.qualifiedName == "kermeta::standard::Iterator" then
			result := true
		end
	end
	
	operation isSubTypeOf( superType_qualifiedName : String ) : Boolean is do
		result := false
		
		var res : Type init self.allSuperTypes.detect{ st |
			st.isInstanceOf(ParameterizedType) and st.asType(ParameterizedType).typeDefinition.qualifiedName == superType_qualifiedName
		}
		
		if not res.isVoid() then
			result := true
		end
	end
	
	operation isMappedToJavaRawType() : Boolean is do
		result := false
		if self.isCollection() or self.isIterator() then
			result := true
		end
	end
	
}