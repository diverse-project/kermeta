/* $Id: TypeHelper.kmt,v 1.21 2008-08-22 09:57:01 cfaucher Exp $
 * Creation date: January 28, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors  : 
 *            Cyril Faucher <cfaucher@irisa.fr>
 *            Francois Tanguy <ftanguy@irisa.fr>
 */

package kermeta::language::structure;

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/pass2/CreateBehavior.kmt"

using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard
using kermeta::utils
using km2ecore

aspect class Type {

	operation isPrimitiveType() : Boolean is do 
		result := self.isInstanceOf(PrimitiveType)
	end
	
	operation isEnumeration() : Boolean is do
		result := self.isInstanceOf(Enumeration)
	end
	
	operation getClassFromPrimitiveType() : Class is do
		if self.isInstanceOf(PrimitiveType) then
			var pt : PrimitiveType init self.asType(PrimitiveType)
			if pt.instanceType.isInstanceOf(Class) then
				result := pt.instanceType.asType(Class)
			else
				//deal the case where the alias refers another alias
				result := pt.instanceType.getClassFromPrimitiveType()
			end
		else
			result := void
		end
	end
	
	// Check if the type is a subType of ValueType => we have to consider as a EDataType, i.e.: an EAttribute
	operation isValueType() : Boolean is do
		result := false
		
		var theType : Type
		if self.isInstanceOf(PrimitiveType) then
			theType := getClassFromPrimitiveType().asType(Type)
		else
			theType := self
		end
		
		if theType.isInstanceOf(ParameterizedType) then
			var pt : ParameterizedType init theType.asType(ParameterizedType)
			
			if pt.typeDefinition.isInstanceOf(ClassDefinition) then
				result := pt.typeDefinition.asType(ClassDefinition).isValueType()
			end
		end
	end
	
	operation isEDataType() : Boolean is do
		result := false
		
		if self.getEMFEDataTypeInstanceClassName()!="" then
			result := true
		end
		
	end
	
	operation getTypeName() : String is do
		result := void
		
		if self.isInstanceOf(Class) then
			var cd : ClassDefinition init self.asType(Class).getClassDefinitionAsTyped()
			result := cd.name
			
		else
			if self.isInstanceOf(ObjectTypeVariable) then
				var otv : ObjectTypeVariable init self.asType(ObjectTypeVariable)
				result := otv.name
			else
				if self.isInstanceOf(PrimitiveType) then
					var cd : ClassDefinition init self.getClassFromPrimitiveType().getClassDefinitionAsTyped()
					result := cd.name
				else
					if self.isInstanceOf(VoidType) then
						result := "void"
					end
				end
			end
		end
		
		if Operation.new().isVoidType(result) then
			result := "void"
		end
	end
	
	operation getTypeQName() : String is do
		result := void
		
		if self.isInstanceOf(Class) then
			var cd : ClassDefinition init self.asType(Class).getClassDefinitionAsTyped()
			result := cd.qualifiedName
		else
			if self.isInstanceOf(ObjectTypeVariable) then
				var otv : ObjectTypeVariable init self.asType(ObjectTypeVariable)
				result := otv.qualifiedName
			else
				if self.isInstanceOf(PrimitiveType) then
					var cd : ClassDefinition init self.getClassFromPrimitiveType().getClassDefinitionAsTyped()
					result := cd.qualifiedName
				else
					if self.isInstanceOf(VoidType) then
						result := "void"
					end
				end
			end
		end
		
		if Operation.new().isVoidType(result) then
			result := "void"
		end
	end
	
	/**
	 * Tests whether the Type t corresponds to a Kermeta numerical type, which can be encoded
	 * either as the Integer/Real PrimitiveType or the Integer/Real class.
	 * @param t : Type
	 * @return true or false
	 */
	operation isNumericalTypeDef(context : KM2EcoreContext) : Boolean is do
		result := false
		
		if not self.isVoid() then
		
			var tName : String init void
			if self.isInstanceOf(Class) then
				tName := self.asType(ParameterizedType).typeDefinition.name
				if tName.equals("Integer") or tName.equals("Real") then
					result := true
				end
			else if self.isInstanceOf(PrimitiveType) then
					tName := self.asType(PrimitiveType).createBehaviorJava(context)
					if tName.equals("Integer") or tName.equals("Real") then
						result := true
					end
				end
			end
		end
		
	end
	
	/**
	 * Tests whether the Type t corresponds to the Kermeta Boolean type, which can be encoded
	 * either as the Boolean PrimitiveType or the Boolean class.
	 * @param t : Type
	 * @return true or false
	 */
	operation isBooleanTypeDef(context : KM2EcoreContext) : Boolean is do
		result := false
		
		if not self.isVoid() then
		
			if self.isInstanceOf(Class) then
				result := self.asType(Class).typeDefinition.name.equals("Boolean")
			else if self.isInstanceOf(PrimitiveType) then
					if  self.asType(PrimitiveType).createBehaviorJava(context).equals("kermeta::standard::Boolean")
						or self.asType(PrimitiveType).createBehaviorJava(context).equals("kermeta::language::structure::Boolean")
						or self.asType(PrimitiveType).createBehaviorJava(context).equals("java.lang.Boolean")
						or self.asType(PrimitiveType).createBehaviorJava(context).equals("Boolean") then
						result := true
					end
				end
			end
		end
		
	end
	
	operation isMappedToJavaRawType() : Boolean is do
		result := false
		if self.isInstanceOf(ParameterizedType) then
			if self.asType(ParameterizedType).typeDefinition.isInstanceOf(ClassDefinition) then
				result := self.asType(ParameterizedType).typeDefinition.asType(ClassDefinition).isMappedToJavaRawType()
			end
		end
	end
}




