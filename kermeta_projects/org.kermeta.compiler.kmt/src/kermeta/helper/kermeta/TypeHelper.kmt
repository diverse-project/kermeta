/* $Id: TypeHelper.kmt,v 1.3 2008-02-01 15:23:26 ftanguy Exp $
 * Creation date: January 28, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Francois Tanguy <ftanguy@irisa.fr>
 */

package km2ecore::helper::kermeta;


require kermeta

using kermeta::language::structure
using kermeta::standard

class TypeHelper
{
	operation primitiveTypes() : Collection<String> is do
		result := Sequence<String>.new
		result.add("kermeta::standard::String")
		result.add("kermeta::standard::Integer")
		result.add("kermeta::standard::Boolean")	
	end

	operation isPrimitiveType(type : Type) : Boolean is do 
		result := type.isInstanceOf(PrimitiveType)
		if ( not result and type.isInstanceOf(Class) ) then
			var c : Class init type.asType(Class)
			var qualifiedName : String init c.typeDefinition.qualifiedName()
			result := primitiveTypes.contains(qualifiedName)
		end
	end
	
	operation getClassDefinition(c : Class) : ClassDefinition is do
		result := c.asType(Class).typeDefinition.asType(ClassDefinition)
	end
	
	operation getClassFromPrimitiveType( p : Type ) : Class is do
		if ( p.isInstanceOf(PrimitiveType) ) then
			if ( p.asType(PrimitiveType).instanceType.isInstanceOf(Class) ) then
				result := p.asType(PrimitiveType).instanceType.asType(Class)
			else
				result := getClassFromPrimitiveType(p.asType(PrimitiveType).instanceType)
			end
		else
			result := void
		end
	end
}