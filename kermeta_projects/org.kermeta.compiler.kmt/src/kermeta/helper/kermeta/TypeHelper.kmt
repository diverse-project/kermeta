/* $Id: TypeHelper.kmt,v 1.11 2008-05-19 21:52:28 cfaucher Exp $
 * Creation date: January 28, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 */

package kermeta::language::structure;

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"

using kermeta::language::structure
using kermeta::standard
using kermeta::utils
using km2ecore

aspect class Type {

	operation isPrimitiveType() : Boolean is do 
		result := self.isInstanceOf(PrimitiveType)
	end
	
	operation isEnumeration() : Boolean is do
		result := self.isInstanceOf(Enumeration)
	end
	
	operation getClassFromPrimitiveType() : Class is do
		if self.isInstanceOf(PrimitiveType) then
			var pt : PrimitiveType init self.asType(PrimitiveType)
			if ( pt.instanceType.isInstanceOf(Class) ) then
				result := pt.instanceType.asType(Class)
			else
				//deal the case where the alias refers another alias
				result := pt.instanceType.getClassFromPrimitiveType()
			end
		else
			result := void
		end
	end
	
	// Check if the type is a subType of ValueType => we have to consider as a EDataType, i.e.: an EAttribute
	operation isValueType() : Boolean is do
		result := false
		if self.isInstanceOf(ParameterizedType) then
			var pt : ParameterizedType init self.asType(ParameterizedType)
			
			if pt.typeDefinition.isInstanceOf(ClassDefinition) then
				result := pt.typeDefinition.asType(ClassDefinition).isValueType()
				/*if not cd.allSuperTypes.detect{ sp | sp.isInstanceOf(ParameterizedType) and sp.asType(ParameterizedType).typeDefinition.qualifiedName == "kermeta::standard::ValueType" }.isVoid() then
					result := true
				end*/
			end
		end
	end
	
	operation getTypeName() : String is do
		result := void
		if self.isInstanceOf(Class) then
			var cd : ClassDefinition init self.asType(Class).getClassDefinition()
			result := cd.qualifiedName
			
		else
			if self.isInstanceOf(ObjectTypeVariable) then
				var otv : ObjectTypeVariable init self.asType(ObjectTypeVariable)
				result := otv.qualifiedName
			else
				if self.isInstanceOf(PrimitiveType) then
					var cd : ClassDefinition init self.getClassFromPrimitiveType().getClassDefinition()
					result := cd.qualifiedName
				end
			end
		end
	end
}

aspect class Class {
	operation getClassDefinition() : ClassDefinition is do
		result := void
		if self.typeDefinition.isInstanceOf(ClassDefinition) then
			result := self.typeDefinition.asType(ClassDefinition)
		end
	end
}




