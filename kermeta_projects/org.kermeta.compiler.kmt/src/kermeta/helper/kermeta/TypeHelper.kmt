/* $Id: TypeHelper.kmt,v 1.7 2008-04-10 15:03:04 cfaucher Exp $
 * Creation date: January 28, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 */

package km2ecore::helper::kermeta;

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"

using kermeta::language::structure
using kermeta::standard
using kermeta::utils
using km2ecore

class TypeHelper {

	operation isPrimitiveType(type : Type) : Boolean is do 
		result := type.isInstanceOf(PrimitiveType)
	end
	
	operation isEnumeration(type : Type) : Boolean is do
		result := type.isInstanceOf(Enumeration)
	end
	
	operation getClassDefinition(c : Class) : ClassDefinition is do
		result := c.typeDefinition.asType(ClassDefinition)
	end
	
	operation getClassFromPrimitiveType( p : Type ) : Class is do
		if p.isInstanceOf(PrimitiveType) then
			var pt : PrimitiveType init p.asType(PrimitiveType)
			if ( pt.instanceType.isInstanceOf(Class) ) then
				result := pt.instanceType.asType(Class)
			else
				//deal the case where the alias refers another alias
				result := getClassFromPrimitiveType(pt.instanceType)
			end
		else
			result := void
		end
	end
	
	// Check if the type is a subType of ValueType => we have to consider as a PrimitiveType, i.e.: an EAttribute
	operation isValueType(type : Type) : Boolean is do
		result := false
		if type.isInstanceOf(ParameterizedType) then
			var pt : ParameterizedType init type.asType(ParameterizedType)
			
			if pt.typeDefinition.isInstanceOf(ClassDefinition) then
				var cd : ClassDefinition init pt.typeDefinition.asType(ClassDefinition)
				if not cd.superType.detect{ sp | sp.isInstanceOf(ParameterizedType) and sp.asType(ParameterizedType).typeDefinition.qualifiedName == "kermeta::standard::ValueType" }.isVoid() then
					result := true
				end
			end
		end
		/*if type.isInstanceOf(ParameterizedType) and (not type.asType(ParameterizedType).typeDefinition.asType(ClassDefinition).superType.detect{ sp | sp.isInstanceOf(ParameterizedType) and sp.asType(ParameterizedType).typeDefinition.qualifiedName == "kermeta::standard::ValueType" }.isVoid()) then
			result := true
		else
			result := false
		end*/
		
		// old code: Check if the type is in the types map
		/*if not result and type.isInstanceOf(Class) then
			var c : Class init type.asType(Class)
			var qualifiedName : String init c.typeDefinition.qualifiedName()
			result := context.javaTypeMapping.types_mapping.containsKey(qualifiedName)
		end*/
	end
}

enumeration PrimitiveType_Type {
	edatatype;
	eclass;
}