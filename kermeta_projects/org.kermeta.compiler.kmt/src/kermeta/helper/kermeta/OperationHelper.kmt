/* $Id: OperationHelper.kmt,v 1.11 2008-09-10 13:19:52 cfaucher Exp $
 * Creation date: May 20, 2008
 * License:
 * Copyright:
 * Authors:
 */


package kermeta::language::structure;

require kermeta
require "KermetaHelper.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/helper/simk/SimkHelper.kmt"

using kermeta::language::behavior
using kermeta::standard
using kermeta::utils
using km2ecore
using simk

aspect class Operation {

	reference lambdaExpression : LambdaExpression [0..1]
	
	attribute cuid : String [0..1]

	operation isVoidType(type_label : String) : Boolean is do
		result := false
		if (type_label == "null")
			or (type_label == "void")
			or (type_label == "Void")
			or (type_label == "VoidType")
			or (type_label == "kermeta::standard::Void")
			or (type_label == "kermeta::standard::VoidType")
			or (type_label == "kermeta::language::structure::Void")
			or (type_label == "kermeta::language::structure::VoidType")
			or (type_label == "kermeta.standard.Void")
			or (type_label == "kermeta.standard.VoidType")
			or (type_label == "kermeta.language.structure.Void")
			or (type_label == "kermeta.language.structure.VoidType") then
			result := true
		end
	end

	/** Generation of the String representing the end of a method: return of the result value */
	operation ppReturnResult(context : KM2EcoreContext) : String is do
		result := "\nreturn "
		if self.upper==1 then
			result := result + "result"
		else
			result := result + context.COLLECTION_UTIL_CLASS + ".convertAsEList(result)"
		end
		result := result + ";\n"
	end

	/**
	 * Return true if the given operation is a FunctionType
	 */
	operation isFunctionType() : Boolean is do 
		result := false
		
		if not self.getFunctionTypeParameter().isVoid() and self.getFunctionTypeParameter().size>0 then
			result := true
		end
	end
	
	operation getFunctionTypeParameter() : Sequence<Parameter> is do
		result := void
		var ft_parameters : Sequence<Parameter> init self.ownedParameter.select{ p |
			p.type.isInstanceOf(FunctionType)
		}
		result := ft_parameters
	end
	
	
	/**
	 * Helper method to determine if an operation has to be compiled
	 */
	operation mustBeCompiled() : Boolean is do
		result := true
		
		var cd_container : ClassDefinition init self.container.asType(ClassDefinition)
		
		// This test is there, because some methods may be compiled as Static methods via Simk like the method: times on Integer
		if cd_container.isValueType() then
			if cd_container.getEMFInstanceClassName() != "" then
				result := false
			end
		end
		
	end
	
	/**
	 * Unused for the moment
	 */
	@deprecated ""
	operation mustBeDuplicated() : Boolean is do
		result := false
		if self.type.isValueType() or hasAValueTypedParameter() then
			result := true
		end
	end
	
	/**
	 * The given operation has at least a parameter having ValueType as type
	 */
	operation hasAValueTypedParameter() : Boolean is do
		result := false
		
		var p : Parameter init self.ownedParameter.detect{ p |
			p.type.isValueType()
		}
		
		if not p.isVoid() then
		 result := true
		end
	end
	
	// isRunnable() in the sense of Kermeta: parameter as single string or none parameter
	operation isRunnable() : Boolean is do
		result := false
		
		var param : Parameter init self.ownedParameter.detect{ param |
			not param.isRunnable()
		}
		if param.isVoid() then
			result := true
		end
	end


	operation getOptimizedStaticCall(context : KM2EcoreContext) : String is do
		result := ""
		if self.body.isInstanceOf(Block) then
			if self.body.asType(Block).statement.size==1 then
				if self.body.asType(Block).statement.isInstanceOf(JavaStaticCall) then
					var static_call_set_1 : OrderedSet<String> init self.body.asType(Block).statement.asType(JavaStaticCall).createBehaviorJava(context).split("(")//.getCompiledJavaExtern().split("(")
					result := static_call_set_1.first()
				else
					if self.body.asType(Block).statement.isInstanceOf(Assignment) then
						if self.body.asType(Block).statement.asType(Assignment).~value.isInstanceOf(JavaStaticCall) then
							var static_call_set_2 : OrderedSet<String> init self.body.asType(Block).statement.asType(Assignment).~value.asType(JavaStaticCall).createBehaviorJava(context).split("(")//.getCompiledJavaExtern().split("(")
							result := static_call_set_2.first()
						end
					end
				end
			end
		end
	end
	
	
	/**
	 * Compiling in Simk mode all the methods (inherited methods included) from ValueType
	 */
	operation compilingInSimkMode(context : KM2EcoreContext) : Void is do
		
		var sMContext : SMContext init context.simkModel.retrieveOrCreateContextForWrapper(self, context)
		
		if not sMContext.isVoid() then
		
			var staticMethod : StaticMethod init StaticMethod.new()
			
			context.simkModel.staticMethods.add(staticMethod)
			sMContext.staticMethods.add(staticMethod)
			
			staticMethod.name := self.name
			staticMethod.setWrapperUsage()
			
			// By default, a self parameter is added
			var self_param : SMParameter init SMParameter.new()
			self_param.name := "self"
			
			if self.getWrapperValueTypeSelfExpression()!="" then
				var map_infos : Hashtable<String, String> init self.getWrapperValueTypeSelfExpression().getPropertyInfos()
				var map_value : String init map_infos.getValue(context.current_valueType.getEMFInstanceClassName())
				
				if not map_value.isVoid() then
					self_param.type := map_value
				end
			end
			
			if self_param.type.isVoid() then
				self_param.type := context.current_valueType.getEMFInstanceClassName()
			end
			
			staticMethod.sMParameters.add(self_param)
			
			// Management of the Parameters
			self.ownedParameter.each{ p |
				var param : SMParameter init SMParameter.new()
				param.name := p.name
				
				if not p.type.isInstanceOf(FunctionType) then
					if (p.type.getTypeQName() == self.container.asType(ClassDefinition).qualifiedName) or (p.type.getTypeQName() == "kermeta::language::structure::Object") then
						param.type := context.current_valueType.getEMFInstanceClassName()
					else
						param.type := p.type.createBehaviorJava(context)
						if Operation.new().isVoidType(param.type) then
							param.type := "void"
						end
					end
				else
					// This case should never happened
				end
				
				staticMethod.sMParameters.add(param)
			}
			
			// Management of the ReturnType
			var sMReturn : SMReturn init SMReturn.new()
			staticMethod.sMReturn := sMReturn
			
			//if self.type.getTypeQName() == self.container.asType(ClassDefinition).qualifiedName then
			if self.getWrapperValueTypeReturnType()!="" then
				var map_infos : Hashtable<String, String> init self.getWrapperValueTypeReturnType().getPropertyInfos()
				
				var map_value : String init map_infos.getValue(context.current_valueType.getEMFInstanceClassName())
				
				if not map_value.isVoid() then
					sMReturn.type := map_value
				end
			end
			
			if sMReturn.type.isVoid() then
				sMReturn.type := self.type.createBehaviorJava(context)
				if Operation.new().isVoidType(sMReturn.type) then
					sMReturn.type := "void"
				end
			end
			
			staticMethod.body := self.createBehaviorJava(context)
		
		end
		
	end

}