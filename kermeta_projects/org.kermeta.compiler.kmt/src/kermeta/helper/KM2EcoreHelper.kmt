/* $Id: KM2EcoreHelper.kmt,v 1.7 2008-04-02 08:39:30 cfaucher Exp $
 * Creation date: January 29, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Francois Tanguy <ftanguy@irisa.fr>
 */

package km2ecore::helper;

// The 2 following require statement are here to simplify the call of these files
require "kermeta/KermetaHelper.kmt" 
require "ecore/EcoreHelper.kmt"

require kermeta
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/common/keyword_list.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/pass2/CreateBehavior.kmt"

//using kermeta::standard
using kermeta::language::structure
using kermeta::language
using km2ecore

class KM2EcoreHelper {

	/** An underscore is added if the identifier is used as keyword */
	operation getMangledIdentifier(id : String, context : KM2EcoreContext) : String is do
		
		if id.isVoid() then
			result := id
		end

		if context.javaKeyWordList.isKeyword(id) then
			result := "_" + id
		else
			result := id
		end
		
	end
	
	/**
	 * Tests whether the Type t corresponds to a Kermeta numerical type, which can be encoded
	 * either as the Integer/Real PrimitiveType or the Integer/Real class.
	 * @param t : Type
	 * @return true or false
	 */
	operation isNumericalTypeDef(t : Type, context : KM2EcoreContext) : Boolean is do
		
		if not t.isVoid() then
		
			var tName : String init void
			if t.isInstanceOf(Class) then
				tName := t.asType(ParameterizedType).typeDefinition.name
				if tName.equals("Integer") or tName.equals("Real") then
					result := true
				else
					result := false
				end
			else if t.isInstanceOf(PrimitiveType) then
					tName := t.asType(PrimitiveType).createBehaviorJava(context)
					if tName.equals("Integer") or tName.equals("Real") then
						result := true
					else
						result := false
					end
				else
					result := false
				end
			end
		
		else
			result := false
		end
		
	end
	
	/**
	 * Tests whether the Type t corresponds to the Kermeta Boolean type, which can be encoded
	 * either as the Boolean PrimitiveType or the Boolean class.
	 * @param t : Type
	 * @return true or false
	 */
	operation isBooleanTypeDef(t : Type, context : KM2EcoreContext) : Boolean is do
		
		if not t.isVoid() then
		
			if t.isInstanceOf(Class) then
				result := t.asType(Class).typeDefinition.name.equals("Boolean")
			else if t.isInstanceOf(PrimitiveType) then
					result := t.asType(PrimitiveType).createBehaviorJava(context).equals("Boolean")
				else
					result := false
				end
			end
			
		else
			result := false
		end
		
	end
}
