/* $Id: containment_traversable.kmt,v 1.6 2008-03-18 13:18:30 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */

/**
 *
 * func : <Object -> Object> because we need to visit the tags.
 *
 */
@usage "containment_traversable"

package kermeta::language;
 
require kermeta
 
using kermeta::language::structure

package structure {

	aspect class Object {
		operation eachOwnedElement(func : <Object -> Object>) : Void is do
			self.ownedTags.each{ o |
				func(o)
			}
		end
	}
	
	aspect class ModelingUnit {
		method eachOwnedElement(func : <Object -> Object>) : Void is do
	   		super(func)
			
			self.packages.each{p|
				func(p)
			}
		end
	}
	 
	aspect class Package {
		method eachOwnedElement(func : <Object -> Object>) : Void is do
	        super(func)
	        
	        self.ownedTypeDefinition.each{ o |
				func(o)
			}
			self.nestedPackage.each{ p |
				func(p)
			} 
		end
	}
	
	aspect class Enumeration {
		method eachOwnedElement(func : <Object -> Object>) : Void is do
	        super(func)
	        
	        self.ownedLiteral.each{ l |
	        	func(l)
			}
		end	
	}
	
	aspect class ClassDefinition {
		method eachOwnedElement(func : <Object -> Object>) : Void is do
	        super(func)
	        
	        self.ownedAttribute.each{ o |
				func(o)
			}
			
			self.ownedOperation.each{ o |
				func(o)
			}
			
			self.~inv.each{ i |
				func(i)
			}
			
			self.typeParameter.each{ t | 
				func(t)
			}
		end	
	}
		
	aspect class Operation {
		method eachOwnedElement(func : <Object -> Object>) : Void is do
	        super(func)
	        
	        self.ownedParameter.each{ o |
				func(o)
			}
			
			self.~pre.each{ o |
				func(o)
			}
			
			self.~post.each{ o |
				func(o)
			}
			
			self.typeParameter.each{ t |
				func(t)
			}
		end	
	}
	
} // end of the package kermeta::language::structure

package behavior {

	aspect class Block {
		method eachOwnedElement(func : <Object -> Object>) : Void is do
	        super(func)
	        
	        self.statement.each{ s |
				func(s)
			}
			
			self.rescueBlock.each{ rb |
				func(rb)
			}
		end	
	}
	
	aspect class Rescue {
		method eachOwnedElement(func : <Object -> Object>) : Void is do
	        super(func)
	        
	        self.body.each{ s |
				func(s)
			}
		end	
	}

} /* end of the package kermeta::language::behavior*/