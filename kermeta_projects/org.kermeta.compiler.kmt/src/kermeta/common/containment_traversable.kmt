/* $Id: containment_traversable.kmt,v 1.1 2008-02-01 09:40:46 ftanguy Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Fran√ßois Tanguy <ftanguy@irisa.fr>
 */

/**
 *
 * func : <Object -> Object> because we need to visit the tags.
 *
 */

package kermeta::language::structure;
 
require kermeta
 
using kermeta::language::structure
using kermeta::standard

aspect class Object {
	operation eachOwnedElement(func : <Object -> Object>) : Void is do
       	self.ownedTags.each{ o |
			func(o)
		}
	end
}

aspect class ModelingUnit {
	method eachOwnedElement(func : <Object -> Object>) : Void is do
   		super(func)
		
		self.packages.each{p|
			func(p)
		}
	end
}
 
aspect class Package {
	method eachOwnedElement(func : <Object -> Object>) : Void is do
        super(func)
        
        self.ownedTypeDefinition.each{ o |
			func(o)
		}
		self.nestedPackage.each{ p |
			func(p)
		} 
	end
}

aspect class Enumeration {
	method eachOwnedElement(func : <Object -> Object>) : Void is do
        super(func)
        
        self.ownedLiteral.each{ l |
        	func(l)
		}
	end	
}

aspect class ClassDefinition {
	method eachOwnedElement(func : <Object -> Object>) : Void is do
        super(func)
        
        self.ownedAttribute.each{ o |
			func(o)
		}
		
		self.ownedOperation.each{ o |
			func(o)
		}
		
		self.~inv.each{ i |
			func(i)
		}
		
		self.typeParameter.each{ t | 
			func(t)
		}
	end	
}

aspect class Operation {
	method eachOwnedElement(func : <Object -> Object>) : Void is do
        super(func)
        
        self.ownedParameter.each{ o |
			func(o)
		}
		
		self.~pre.each{ o |
			func(o)
		}
		
		self.~post.each{ o |
			func(o)
		}
		
		self.typeParameter.each{ t |
			func(t)
		}
	end	
}
