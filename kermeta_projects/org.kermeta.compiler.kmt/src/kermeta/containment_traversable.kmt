/* $Id: containment_traversable.kmt,v 1.7 2008-01-29 14:51:30 ftanguy Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 */

/**
 *
 * func : <Object -> Object> because we need to visit the tags.
 *
 */

package kermeta::language::structure;
 
require kermeta
  
using kermeta::language::structure
using kermeta::standard

aspect class ModelingUnit {
	operation eachOwnedElement(func : <Object -> Object>) : Void is do
        self.packages.each{p|
			func(p.asType(Package))
		}
		self.ownedTags.each{ o |
			func(o.asType(Tag))
		}
	end
}
 
aspect class Package {
	operation eachOwnedElement(func : <Object -> Object>) : Void is do
        self.ownedTypeDefinition.each{ o |
			func(o.asType(TypeDefinition))
		}
		self.nestedPackage.each{ p |
			func(p.asType(Package))
		} 
	end
}

aspect class Enumeration {
	operation eachOwnedElement(func : <Object -> Object>) : Void is do
        self.ownedLiteral.each{ l |
        	func(l.asType(EnumerationLiteral))
		}
	end	
}

aspect class ClassDefinition {
	operation eachOwnedElement(func : <Object -> Object>) : Void is do
        self.ownedAttribute.each{ o |
			func(o.asType(MultiplicityElement))
		}
		
		self.ownedOperation.each{ o |
			func(o.asType(MultiplicityElement))
		}
		
		self.~inv.each{ i |
			func(i.asType(Constraint))
		}
		
		self.typeParameter.each{ t | 
			func(t.asType(TypeVariable))
		}
	end	
}

aspect class Operation {
	operation eachOwnedElement(func : <Object -> Object>) : Void is do
        self.ownedParameter.each{ o |
			func(o.asType(Parameter))
		}
		
		self.~pre.each{ o |
			func(o.asType(Constraint))
		}
		
		self.~post.each{ o |
			func(o.asType(Constraint))
		}
	end	
}
