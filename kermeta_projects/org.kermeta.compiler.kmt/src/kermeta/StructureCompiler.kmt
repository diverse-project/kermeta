/* $Id: StructureCompiler.kmt,v 1.25 2008-04-29 14:52:27 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */

@usage "launcher"
@mainClass "kermeta::compiler::Main"
@mainOperation "main_inner"

package kermeta::compiler;

require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "pass1/Pass1.kmt"
require "pass2/Pass2.kmt"
require "KM2EcoreContext.kmt"

using ecore
using kermeta::persistence
using kermeta::language::structure
using km2ecore
using kermeta::standard

class Main
{	
	reference context : KM2EcoreContext [1..1]

    operation main_inner() : Void is do
    	//var modelInput : String init "platform:/resource/org.kermeta.compiler.kmt/models/Attempt01.km"
		//var output : String init "platform:/resource/org.kermeta.compiler.kmt/models/Attempt01.ecore"
		//var traceInput : String init "platform:/resource/org.kermeta.compiler.kmt/models/Attempt01.traceability"
		
		var modelInput : String init "platform:/resource/org.kermeta.compiler.kmt/models/Attempt01_merged.km"
		var output : String init "platform:/resource/org.kermeta.compiler.kmt/models/Attempt01_merged.ecore"
		var traceInput : String init ""//platform:/resource/org.kermeta.compiler.kmt/models/Attempt01_merged.traceability"

		main_mode(modelInput, traceInput, output, CompilingMode.behaviorJava)
	end
	
    operation main(modelInput : String, traceInput : String, output : String) : Void is do
    	main_mode(modelInput, traceInput, output, CompilingMode.behaviorJava)
    end
    	
	operation main_mode(modelInput : String, traceInput : String, output : String, mode : CompilingMode) : Void is do

		// Creating and initializing the context
		context := KM2EcoreContext.new
		context.initialize( modelInput, traceInput )
		context.mode := mode
		
		context.mus.each{ mu |
		
			mu.applyPass1(context)
			
			if context.mode == CompilingMode.onlyEcore then
				mu.applyPass2(context)
			end
			stdio.writeln("KermetaCompiler - Pass 1 is finished")
			
			if context.mode == CompilingMode.behaviorKmt then
				mu.applyPass2BehaviorKmt(context)
			end
			
			if context.mode == CompilingMode.behaviorJava then
				mu.applyPass2BehaviorJava(context)
			end
			
			stdio.writeln("KermetaCompiler - Pass 2 is finished")
			
			// Save the generated ecore
			context.ecoreOutputs.add(output)
	   		var ecore_resource : Resource init context.outputRepository.createResource(output, "http://www.eclipse.org/emf/2002/Ecore")
			ecore_resource.instances.add(mu.ecoreModelElement)
			//stdio.writeln("mu.ecoreModelElement: " + mu.ecoreModelElement.toString)
			
			mu.entryPoints.each{ e |
				ecore_resource.instances.add(e)
			}
			mu.ecorePackages.each{ p |
				//stdio.writeln("I have found a package: " + p.toString)
				ecore_resource.instances.add(p)
			}
			
			stdio.writeln("Save the Ecore Model")
			ecore_resource.save()
			stdio.writeln("The Ecore Model has been saved")
		}
		
		// Save the context to reuse it during the EMF Java generation
		
		context.save()
			
		stdio.writeln("Finish")
		
    end
   	
}