/* $Id: StructureCompiler.kmt,v 1.11 2008-02-07 18:20:20 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */

@mainClass "kermeta::compiler::Main" 
@mainOperation "main_inner"

package kermeta::compiler;

require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "pass1/Pass1.kmt"
require "pass2/Pass2.kmt"
 
using ecore
using kermeta::persistence
using kermeta::language::structure


class Main
{

    operation main_inner() : Void is do
		var input : String init "platform:/resource/org.kermeta.compiler.kmt/models/Attempt01.km"
		var output : String init "platform:/resource/org.kermeta.compiler.kmt/models/Attempt01_.ecore"
		var mode : String init "behaviorJava"
		
		main_mode(input, output, mode)
	end
	
    operation main(input : String, output : String) : Void is do
    	var mode : String init "behaviorJava"
    	main_mode(input, output, mode)
    end
    	
	operation main_mode(input : String, output : String, mode : String) : Void is do
		var mu : ModelingUnit init loadKmModel(input)
		
		mu.applyPass1()
		if mode == "onlyEcore" then
			mu.applyPass2
		end
		if mode == "behaviorKmt" then
			mu.applyPass2BehaviorKmt
		end
		
		if mode == "behaviorJava" then
			mu.applyPass2BehaviorJava
		end
		
   		var repository : EMFRepository init EMFRepository.new             
   		var resource : Resource init repository.createResource(output, "http://www.eclipse.org/emf/2002/Ecore")
		resource.instances.add(mu.ecoreModelElement)
		//resource.instances.addAll(mu.entryPoints)
		mu.entryPoints.each{ e |
			resource.instances.add(e)
		}//resource.instances.addAll(mu.ecorePackages)
		mu.ecorePackages.each{ p |
			resource.instances.add(p)
		}
		stdio.writeln("Save the Ecore Model")
		resource.save		
		stdio.writeln("Finish")
    end

	operation loadKmModel(input: String) : kermeta::language::structure::ModelingUnit is do             
	   		var repository : EMFRepository init EMFRepository.new             
	   		var resource : Resource init repository.getResource(input)
	       	resource.load()
	      	
	      	// result is a ModelingUnit
	        result ?= resource.instances.one
   	end
   	
}