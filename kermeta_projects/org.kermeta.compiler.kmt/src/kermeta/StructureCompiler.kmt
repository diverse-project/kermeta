/* $Id: StructureCompiler.kmt,v 1.8 2008-01-30 16:42:11 cfaucher Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Francois Tanguy <ftanguy@irisa.fr>
 */

@mainClass "kermeta::compiler::Main" 
@mainOperation "main"

package kermeta::compiler;

require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "trace_structure.kmt"
require "compile_structure.kmt" 

using ecore
using kermeta::persistence
using kermeta::language::behavior
using kermeta::language::structure


class Main
{

    operation main() : Void is do		
		
		var mu : ModelingUnit init loadKmModel
		
		mu.compile(0)
		
   		var repository : EMFRepository init EMFRepository.new             
   		var resource : Resource init repository.createResource("platform:/resource/org.kermeta.compiler.kmt/models/result.ecore", "http://www.eclipse.org/emf/2002/Ecore")
		resource.instances.add(mu.ecoreModelElement)
		//resource.instances.addAll(mu.entryPoints)
		mu.entryPoints.each{ e |
			resource.instances.add(e)
		}//resource.instances.addAll(mu.ecorePackages)
		mu.ecorePackages.each{ p |
			resource.instances.add(p)
		}
		stdio.writeln("Save the Ecore Model")
		resource.save		
		stdio.writeln("Finish")
    end

	operation loadKmModel() : kermeta::language::structure::ModelingUnit is do             
	   		var repository : EMFRepository init EMFRepository.new             
	   		var resource : Resource init repository.getResource("platform:/resource/org.kermeta.compiler.kmt/models/Attempt01.km")
	       	resource.load()
	      	
	      	// result is a ModelingUnit
	        result ?= resource.instances.one
   	end
   	
}