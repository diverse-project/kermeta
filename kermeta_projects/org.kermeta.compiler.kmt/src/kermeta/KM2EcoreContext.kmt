/* $Id: KM2EcoreContext.kmt,v 1.47 2008-10-08 14:25:29 cfaucher Exp $
 * Creation date: February 14, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Francois Tanguy <ftanguy@irisa.fr>
 *			Cyril Faucher <cfaucher@irisa.fr>
 */

@uri "http://www.kermeta.org/km2ecore"
package km2ecore;


require kermeta
require "common/KeywordList.kmt"
require "helper/kermeta/KermetaHelper.kmt"
require "http://www.kermeta.org/Traceability"
require "http://www.kermeta.org/simk"
require "pass0/Pass0.kmt"

//require "platform:/plugin/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EcoreHelper.kmt"

using kermeta::language
using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard
using km2ecore::common
using km2ecore::helper::kermeta
using traceability
using kermeta::persistence
using simk
using kermeta::utils

class KM2EcoreContext {

	/** The input model (as input of the transformation) */
	attribute kmInput : String [1..1]
	
	/** The input model (as input of the transformation) */
	attribute traceabilityInput : String [1..1]
	
	/** The output Ecore models (as output of the transformation) */
	attribute ecoreOutputs : String [1..*]
	
	/** The simk model (as output of the transformation) */
	attribute simkOutput : String [1..1]
	
	/** The modeling units source */
	reference mu : oset ModelingUnit [1..1]
	
	/** The choosen compiling mode */
	attribute mode : CompilingMode [1..1]
	
	/** List of the ValueTypes filled during the pass1 */
	attribute valueTypeMapping : String [0..*]
	
	reference tasks_stack : Stack<String> [0..1]
	
	reference condStack : Stack<String> [0..1]
	attribute inc_condStack : Integer [0..1]
	
	reference kRErrorStack : Stack<String> [0..1]
	attribute inc_kRErrorStack : Integer [0..1]
	
	reference resultLastStatementStack : Stack<String> [0..1]
	attribute inc_resultLastStatementStack : Integer [0..1]
	
	reference ftStack : Stack<LambdaExpression> [0..1]
	reference current_param_ft : Stack<String> [0..1]
	
	/*** params for FunctionType contextual compiling ***/
	reference ftSuffix : Stack<String> [0..1]
	attribute inc_ftSuffix : Integer [0..1]
	attribute ftSuffixActivation : Boolean [1..1]
	attribute afterLbdExpActivation : Boolean [1..1]
	attribute ftContextualSelf : String [0..1]
	reference ftProductTypeStack : Stack<ProductType> [0..1]
	reference ftMapTypeStack : Stack<Hashtable<Type, Type>> [0..1]
	attribute ftReturnType : String [0..1]
	attribute beforeLambdaExpressionResult : String [0..1]
	attribute beforeFunctionTypeResult : String [0..1]
	/******/
	
	
	/** Unique instance of the JavaKeyWordList */
	reference javaKeyWordList : JavaKeyWordList [0..1]
	
	/** List of the method from the framework */
	reference frameworkOperations : String [0..*]
	
	/** Unique instance of the JavaTypeMapping */
	//reference javaTypeMapping : JavaTypeMapping [0..1]
	
	/**  */
	reference inputRepository : EMFRepository [1..1]
	
	/**  */
	reference outputRepository : EMFRepository [1..1]
	
	/**	The trace model dedicated to the km model (kmt2km) used for the transformation */
	reference traceModel : TraceModel [1..1]
	
	reference simkModel : SIMKModel [1..1]
	
	
	/** CONSTANTS */
	attribute JAVA_CLASS_EXCEPTION_SWITCHER : String [1..1]
	attribute VARIABLE_EXCEPTION_SWITCHER : String [1..1]
	attribute COLLECTION_UTIL_CLASS : String [1..1]
	attribute NOT_EVALUATED_MESSAGE : String [1..1]
	//attribute leftAssign : String [1..1]
	attribute SELF_EXPRESSION_TO_REPLACE : String [1..1]
	attribute RETURN_EXPRESSION_TO_REPLACE : String [1..1]
	attribute RETURN_EXPRESSION_TO_REPLACE_SPECIAL : String [1..1]
	attribute SEPARATOR_STATEMENT_FT : String [1..1]
	attribute PREVIOUS_STATEMENT_FT : String [1..1]
	attribute TYPE_SEPARATOR : String [1..1]
	attribute FUNCTION_TYPE_COMPILATION_TASK : String [1..1]
	attribute KERMETA_SEPARATOR : String [1..1]
	attribute JAVA_SEPARATOR : String [1..1]
	/********/
	
	/**  */
	attribute compiledJavaExtern : String [1..1]
	/********/
	
	reference current_valueType : ClassDefinition [0..1]
	
	attribute staticOperationMode : Boolean [0..1]

	operation initialize(modelInput : String, traceInput : String) : Void is do
	
		self.kmInput := modelInput
		self.traceabilityInput := traceInput
		
		self.tasks_stack := Stack<String>.new
		self.tasks_stack.push("Start")
		
		self.condStack := Stack<String>.new
		self.inc_condStack := 0
		
		self.kRErrorStack := Stack<String>.new
		self.inc_kRErrorStack := 0
		
		self.initializeConstants()
		self.compiledJavaExtern := ""
		
		self.current_valueType := void
		
		self.ftStack := Stack<LambdaExpression>.new()
		
		self.current_param_ft := Stack<String>.new()
		self.current_param_ft.push("")
		
		self.ftSuffix := Stack<String>.new()
		self.inc_ftSuffix := 0
		self.ftSuffixActivation := false
		self.afterLbdExpActivation := false
		self.ftContextualSelf := ""
		self.ftReturnType := ""
		self.beforeLambdaExpressionResult := ""
		
		self.ftProductTypeStack := Stack<ProductType>.new()
		
		self.ftMapTypeStack := Stack<Hashtable<Type, Type>>.new()
		
		self.resultLastStatementStack := Stack<String>.new
		self.inc_resultLastStatementStack := 0
		
		
		// Initializing the java keywords list.
		javaKeyWordList := JavaKeyWordList.new
		javaKeyWordList.initialize()
		
		self.initializeFrameworkOperations()
		
		self.staticOperationMode := false
		
		// Initializing the java type mappings.
		//javaTypeMapping := JavaTypeMapping.new
		//javaTypeMapping.initialize()
		
		// Loading the km model and its possible trace model.
		self.inputRepository := EMFRepository.new
		var modelResource : Resource init self.inputRepository.createResource(modelInput, "http://www.kermeta.org/kermeta/1_2_0//kermeta")		
	    modelResource.load()
	    mu := modelResource.instances.one.asType(ModelingUnit)
	    
	    if (not traceInput.isVoid()) and (traceInput != "")  then
			var traceResource : Resource init self.inputRepository.createResource(traceInput, "http://www.kermeta.org/Traceability")
	    	traceResource.load()
	    	traceModel := traceResource.instances.one.asType(TraceModel)
	    	// Adding source information to km objects
			SourceTracer.new.addSourceInformation( self )
	    end
	    
	    
	    // Create the outputRepository
	    self.outputRepository := EMFRepository.new
	    
	    // Create a Simk model
	    self.simkModel := SIMKModel.new
	end
	
	/**
	 * Initialize the constants
	 */
	operation initializeConstants() : Void is do
		self.JAVA_CLASS_EXCEPTION_SWITCHER := "org.kermeta.compil.runtime.helper.error.KRuntimeError"
		self.VARIABLE_EXCEPTION_SWITCHER := "ex_switcher"
		self.COLLECTION_UTIL_CLASS := "org.kermeta.compil.runtime.helper.basetypes.CollectionUtil"
		self.NOT_EVALUATED_MESSAGE := "//FIXME This statement cannot be evaluated without an assignment: "
		self.SELF_EXPRESSION_TO_REPLACE := "SELF_EXPRESSION_TO_REPLACE_STR"
		self.RETURN_EXPRESSION_TO_REPLACE := "RETURN_EXPRESSION_TO_REPLACE_STR"
		self.RETURN_EXPRESSION_TO_REPLACE_SPECIAL := "RETURN_EXPRESSION_TO_REPLACE_SPECIAL_STR"
		self.SEPARATOR_STATEMENT_FT := "SEPARATOR_STATEMENT_FT_STR"
		self.PREVIOUS_STATEMENT_FT := "PREVIOUS_STATEMENT_FT_STR"
		self.TYPE_SEPARATOR := "TYPE_SEPARATOR"
		self.FUNCTION_TYPE_COMPILATION_TASK := "FunctionType_Compilation"
		self.KERMETA_SEPARATOR := "::"
		self.JAVA_SEPARATOR := "."
		
		//self.GENMODEL_ANNOTATION := "http://www.eclipse.org/emf/2002/GenModel"
	end
	
	operation initializeFrameworkOperations() : Void is do
	
		//From Object
		self.frameworkOperations.add("getMetaClass")
		self.frameworkOperations.add("container")
		self.frameworkOperations.add("checkInvariants")
		self.frameworkOperations.add("checkAllInvariants")
		self.frameworkOperations.add("equals")
		self.frameworkOperations.add("isNotEqual")
		self.frameworkOperations.add("isKindOf")
		self.frameworkOperations.add("get")
		self.frameworkOperations.add("set")
		self.frameworkOperations.add("isSet")
		self.frameworkOperations.add("unset")
		self.frameworkOperations.add("oid")
		self.frameworkOperations.add("toString")
		self.frameworkOperations.add("isFrozen")
		self.frameworkOperations.add("isVoid")
		self.frameworkOperations.add("hashcode")
		self.frameworkOperations.add("freeze")
		self.frameworkOperations.add("asType")
		self.frameworkOperations.add("isInstanceOf")
		self.frameworkOperations.add("containingResource")
		
		//From Type
		self.frameworkOperations.add("clone")
		self.frameworkOperations.add("deepClone")
		self.frameworkOperations.add("isInstance")
		self.frameworkOperations.add("isSuperTypeOf")
		self.frameworkOperations.add("isSubTypeOf")

	end
	
	
	operation pushCondStack() : Void is do
		self.inc_condStack := self.inc_condStack + 1
		self.condStack.push(self.inc_condStack.toString())
	end
	
	operation pushKRErrorStack() : Void is do
		self.inc_kRErrorStack := self.inc_kRErrorStack + 1
		self.kRErrorStack.push(self.inc_kRErrorStack.toString())
	end
	
	operation pushFtSuffix() : Void is do
		self.inc_ftSuffix := self.inc_ftSuffix + 1
		self.ftSuffix.push(self.inc_ftSuffix.toString())
	end
	
	/*operation pushResultLastStatementStack() : Void is do
		self.inc_resultLastStatementStack := self.inc_resultLastStatementStack + 1
		self.resultLastStatementStack.push("idResultLastStatement_" + self.inc_resultLastStatementStack.toString() + " = ")
	end*/
	
	operation popResultLastStatementStack() : Void is do
		if self.resultLastStatementStack.size()>0 then
			self.inc_resultLastStatementStack := self.inc_resultLastStatementStack
			self.resultLastStatementStack.pop()
		end
	end
	
	/**
	 * Get the identifier
	 */
	operation getIfConditionId() : String is do
		result := "idIfCond_" + self.condStack.peek()
	end
	
	/**
	 * Get the identifier
	 */
	operation getLoopConditionId() : String is do
		result := "idLoopCond_" + self.condStack.peek()
	end
	
	/**
	 * Get the identifier
	 */
	operation getResultLastStatementId() : String is do
		result := ""
		if self.resultLastStatementStack.size()>0 then
			var str_set : OrderedSet<String> init self.resultLastStatementStack.peek().split(self.TYPE_SEPARATOR)
			result := str_set.first()
		end
	end
	
	operation getResultLastStatementType() : String is do
		result := ""
		if self.resultLastStatementStack.size()>0 then
			var str_set : OrderedSet<String> init self.resultLastStatementStack.peek().split(self.TYPE_SEPARATOR)
			result := str_set.last()
		end
	end
	
	operation printFtSuffix() : String is do
		if self.ftSuffixActivation and self.ftSuffix.size()>0 then
			result := "_ft" + self.ftSuffix.peek()
		else
			result := ""
		end
	end
	
	operation printLbdExpSuffix() : String is do
		if self.ftSuffixActivation and self.ftSuffix.size()>0 then
			result := "_lbdExp" + self.ftSuffix.peek()
		else
			result := ""
		end
	end
	
	operation save() : Void is do
	
		// Create a Simk resource
		self.simkOutput := self.kmInput.replaceExtension("simk")
	    var simkResource : Resource init self.outputRepository.createResource(self.simkOutput, "http://www.kermeta.org/simk")
	    simkResource.add(self.simkModel)
	    // Save the Simk model
	    simkResource.save()
	    
	    /*var traceResource : Resource init self.outputRepository.createResource("platform:/resource/org.kermeta.compiler.kmt/src/kermeta/common/TraceStructure.kermeta", "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/common/TraceStructure.ecore")
		traceResource.add(self.mu)
		traceResource.save()*/
	end
}

/** Enumeration representing the different compiling modes */
enumeration CompilingMode { onlyEcore; behaviorKmt; behaviorJava; }
