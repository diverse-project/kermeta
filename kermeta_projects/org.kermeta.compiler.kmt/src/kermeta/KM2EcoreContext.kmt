/* $Id: KM2EcoreContext.kmt,v 1.23 2008-07-29 09:59:55 cfaucher Exp $
 * Creation date: February 14, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Francois Tanguy <ftanguy@irisa.fr>
 *			Cyril Faucher <cfaucher@irisa.fr>
 */

@uri "http://www.kermeta.org/km2ecore"
package km2ecore;


require kermeta
require "platform:/plugin/fr.irisa.triskell.kermeta/lib/ecore.kmt"
require "common/KeywordList.kmt"
require "common/TypeMapping.kmt"
require "helper/kermeta/KermetaHelper.kmt"
require "http://www.kermeta.org/Traceability"
require "http://www.kermeta.org/simk"
require "pass0/Pass0.kmt"

using kermeta::language
using kermeta::language::structure
using kermeta::language::behavior
using km2ecore::common
using km2ecore::helper::kermeta
using traceability
using kermeta::persistence
using simk
using kermeta::utils

class KM2EcoreContext
{
	/** The input model (as input of the transformation) */
	attribute kmInput : String [1..1]
	
	/** The input model (as input of the transformation) */
	attribute traceabilityInput : String [1..1]
	
	/** The output Ecore models (as output of the transformation) */
	attribute ecoreOutputs : String [1..*]
	
	/** The simk model (as output of the transformation) */
	attribute simkOutput : String [1..1]
	
	/** The modeling units source */
	reference mu : oset ModelingUnit [1..1]
	
	/** The choosen compiling mode */
	attribute mode : CompilingMode [1..1]
	
	reference tasks_stack : Stack<String> [0..1]
	
	reference condStack : Stack<String> [0..1]
	attribute inc_condStack : Integer [0..1]
	
	reference kRErrorStack : Stack<String> [0..1]
	attribute inc_kRErrorStack : Integer [0..1]
	
	reference ftStack : Stack<LambdaExpression> [0..1]
	attribute current_param_ft : String [0..1]
	
	/*** params for FunctionType contextual ***/
	reference ftSuffix : Stack<String> [0..1]
	attribute inc_ftSuffix : Integer [0..1]
	attribute ftSuffixActivation : Boolean [0..1]
	attribute ftContextualSelf : String [0..1]
	reference ftProductTypeStack : Stack<ProductType> [0..1]
	/******/
	
	
	/** Unique instance of the JavaKeyWordList */
	reference javaKeyWordList : JavaKeyWordList [0..1]
	
	/** Unique instance of the JavaTypeMapping */
	reference javaTypeMapping : JavaTypeMapping [0..1]
	
	/**  */
	reference inputRepository : EMFRepository [1..1]
	
	/**  */
	reference outputRepository : EMFRepository [1..1]
	
	/**	The trace model dedicated to the km model (kmt2km) used for the transformation */
	reference traceModel : TraceModel [1..1]
	
	reference simkModel : SIMKModel [1..1]
	
	
	/** CONSTANTS */
	attribute JAVA_CLASS_EXCEPTION_SWITCHER : String [1..1]
	attribute VARIABLE_EXCEPTION_SWITCHER : String [1..1]
	/********/
	
	/**  */
	attribute compiledJavaExtern : String [1..1]
	/********/
	
	reference current_valueType : ClassDefinition [0..1]

	attribute lastStatement_boolean : String [1..1]	

	operation initialize(modelInput : String, traceInput : String) : Void is do
	
		self.kmInput := modelInput
		self.traceabilityInput := traceInput
		
		self.tasks_stack := Stack<String>.new
		self.tasks_stack.push("Start")
		
		self.condStack := Stack<String>.new
		self.inc_condStack := 0
		
		self.kRErrorStack := Stack<String>.new
		self.inc_kRErrorStack := 0
		
		self.initializeConstants()
		self.compiledJavaExtern := ""
		
		self.current_valueType := void
		
		self.ftStack := Stack<LambdaExpression>.new()
		self.current_param_ft := ""
		
		self.ftSuffix := Stack<String>.new()
		self.inc_ftSuffix := 0
		self.ftSuffixActivation := false
		self.ftContextualSelf := ""
		
		self.ftProductTypeStack := Stack<ProductType>.new()
		
		self.lastStatement_boolean := ""
		
		
		// Initializing the java keywords list.
		javaKeyWordList := JavaKeyWordList.new
		javaKeyWordList.initialize()
		
		// Initializing the java type mappings.
		javaTypeMapping := JavaTypeMapping.new
		javaTypeMapping.initialize()
		
		// Loading the km model and its possible trace model.
		self.inputRepository := EMFRepository.new
		var modelResource : Resource init self.inputRepository.getResource(modelInput)		
	    mu := modelResource.instances.one.asType(ModelingUnit)
	    
	    if (not traceInput.isVoid()) and (traceInput != "")  then
			var traceResource : Resource init self.inputRepository.getResource(traceInput)
	    	traceModel := traceResource.instances.one.asType(TraceModel)
	    	// Adding source information to km objects
			SourceTracer.new.addSourceInformation( self )
	    end
	    
	    
	    // Create the outputRepository
	    self.outputRepository := EMFRepository.new
	    
	    // Create a Simk model
	    self.simkModel := SIMKModel.new
	end
	
	/**
	 * Initialize the constants
	 */
	operation initializeConstants() : Void is do
		self.JAVA_CLASS_EXCEPTION_SWITCHER := "org.kermeta.compil.runtime.helper.error.KRuntimeError"
		self.VARIABLE_EXCEPTION_SWITCHER := "ex_switcher"
		
		//self.GENMODEL_ANNOTATION := "http://www.eclipse.org/emf/2002/GenModel"
		//self. := ""
		//self. := ""
	end
	
	
	operation pushCondStack() : Void is do
		self.inc_condStack := self.inc_condStack + 1
		self.condStack.push(self.inc_condStack.toString())
	end
	
	operation pushKRErrorStack() : Void is do
		self.inc_kRErrorStack := self.inc_kRErrorStack + 1
		self.kRErrorStack.push(self.inc_kRErrorStack.toString())
	end
	
	operation pushFtSuffix() : Void is do
		self.inc_ftSuffix := self.inc_ftSuffix + 1
		self.ftSuffix.push(self.inc_ftSuffix.toString())
	end
	
	operation getFtSuffix() : String is do
		if self.ftSuffixActivation then
			result := "_ft" + self.ftSuffix.peek()
		else
			result := ""
		end
	end
	
	
	operation save() : Void is do
	
		// Create a Simk resource
		self.simkOutput := self.kmInput.replaceExtension("simk")
	    var simkResource : Resource init self.outputRepository.createResource(self.simkOutput, "http://www.kermeta.org/simk")
	    simkResource.add(self.simkModel)
	    // Save the Simk model
	    simkResource.save()
	    
	    /*var traceResource : Resource init self.outputRepository.createResource("platform:/resource/org.kermeta.compiler.kmt/src/kermeta/common/TraceStructure.kermeta", "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/common/TraceStructure.ecore")
		traceResource.add(self.mu)
		traceResource.save()*/
	end
}

/** Enumeration representing the different compiling modes */
enumeration CompilingMode { onlyEcore; behaviorKmt; behaviorJava; }
