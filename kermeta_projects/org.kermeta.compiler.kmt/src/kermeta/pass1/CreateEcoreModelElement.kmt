/* $Id: CreateEcoreModelElement.kmt,v 1.5 2008-03-11 09:35:35 cfaucher Exp $
 * Creation date: February 1, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Francois Tanguy <ftanguy@irisa.fr>
 *			Cyril Faucher <cfaucher@irisa.fr>
 */

package kermeta::language::structure;


require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "../common/containment_traversable.kmt"
//require "../common/ContainmentBasedActionPerformer_Kermeta.kmt"
require "../helper/KM2EcoreHelper.kmt"
require "../common/exception.kmt"
require "platform:/resource/org.kermeta.compiler.kmt/src/kermeta/KM2EcoreContext.kmt"

using ecore
using km2ecore
using km2ecore::helper::ecore
using km2ecore::helper::kermeta
using km2ecore::common::exception

aspect class ModelingUnit {
	operation createEcoreModelElement(context : KM2EcoreContext) : EAnnotation is do
		var ecoreAnnotation : EAnnotation init EAnnotation.new
		ecoreAnnotation.source := "ModelingUnit"
		// Creation of the require entry
		var requireEntry : EStringToStringMapEntry init EStringToStringMapEntry.new
		requireEntry.key := "require"
		var v : String init String.new
		self.requires.each{r|
			v.append( r.uri + "|" )
		}
		requireEntry.~value := v
		// Creation of the using entry
		var usingEntry : EStringToStringMapEntry init EStringToStringMapEntry.new
		usingEntry.key := "using"
		v := String.new
		self.usings.each{u|
			v.append( u.qualifiedName + "|" )
		}
		usingEntry.~value := v
		// Setting the details
		ecoreAnnotation.details.add(requireEntry)
		ecoreAnnotation.details.add(usingEntry)
		result := ecoreAnnotation
	end
}

aspect class Require {
}

aspect class Using {
}

aspect class Package {
	operation createEcoreModelElement(context : KM2EcoreContext) : EPackage is do
		var ecorePackage : EPackage init EPackage.new
		ecorePackage.name := self.name
		
		if not self.uri.isVoid() and self.uri != "" then
			ecorePackage.nsURI := self.uri
		else
			raise UndefinedUriEPackageException.new
		end
		
		// In order complete the EMF checking, we have to set the nsPrefix to "", void is not enough
		ecorePackage.nsPrefix := ""
		result := ecorePackage	
	end
}

aspect class PrimitiveType {
	operation createEcoreModelElement(context : KM2EcoreContext) : EDataType is do
		var ecoreDataType : EDataType init EDataType.new
		ecoreDataType.name := self.name
		//ecoreDataType.serializable
		//ecoreDataType.instanceClass
		//ecoreDataType.instanceTypeName
		//ecoreDataType.defaultValue
		ecoreDataType.instanceClassName := "java.lang.Object"
		if ( self.instanceType.isInstanceOf(Class) ) then
			var qualifiedName : String init self.instanceType.asType(Class).typeDefinition.qualifiedName
			ecoreDataType.eAnnotations.add(EAnnotationHelper.new.create("kermeta", "alias", qualifiedName))
		end
		result := ecoreDataType
	end
}

aspect class Enumeration {
	operation createEcoreModelElement(context : KM2EcoreContext) : EEnum is do
		var ecoreEnumeration : EEnum init EEnum.new
		ecoreEnumeration.name := self.name
		//ecoreEnumeration.serializable
		//ecoreEnumeration.instanceClass
		//ecoreEnumeration.instanceTypeName
		//ecoreEnumeration.instanceClassName
		//ecoreDataType.defaultValue
		result := ecoreEnumeration
	end
}

aspect class EnumerationLiteral {
	operation createEcoreModelElement(context : KM2EcoreContext) : EEnumLiteral is do
		var ecoreEnumerationLiteral : EEnumLiteral init EEnumLiteral.new
		ecoreEnumerationLiteral.name := self.name
		ecoreEnumerationLiteral.literal := self.name
		ecoreEnumerationLiteral.~value := self.~enumeration.asType(Enumeration).ecoreModelElement.eLiterals.size
		//ecoreEnumerationLiteral.instance
		result := ecoreEnumerationLiteral
	end 
}

aspect class ClassDefinition {
	operation createEcoreModelElement(context : KM2EcoreContext) : EClass is do
		var ecoreClass : EClass init EClass.new
		ecoreClass.interface := false
		ecoreClass.name := self.name
		ecoreClass.~abstract := self.isAbstract
		result := ecoreClass
	end
}

aspect class Operation {
	operation createEcoreModelElement(context : KM2EcoreContext) : EOperation is do
		var ecoreOperation : EOperation init EOperation.new
		ecoreOperation.name := self.name
		ecoreOperation.ordered := self.isOrdered
		ecoreOperation.unique := self.isUnique
		ecoreOperation.lowerBound := self.lower
		ecoreOperation.upperBound := self.upper
		//ecoreOperation.many := 
		//ecoreOperation.required :=
		if ( self.isAbstract ) then
			var ecoreAnnotation : EAnnotation init EAnnotationHelper.new.createAbstract()
			ecoreOperation.eAnnotations.add( ecoreAnnotation )
		end 
		result := ecoreOperation 
	end
}

aspect class Parameter {
	operation createEcoreModelElement(context : KM2EcoreContext) : EParameter is do
		var ecoreParameter : EParameter init EParameter.new
		ecoreParameter.name := self.name
		//ecoreParameter.ordered
		//ecoreParameter.unique
		//ecoreParameter.lowerBound
		//ecoreParameter.upperBound
		//ecoreParameter.many
		//ecoreParameter.required
		result := ecoreParameter
	end
}

aspect class Constraint {
	operation createEcoreModelElement(context : KM2EcoreContext) : EAnnotation is do
		// TODO : Fill the body using the java pretty printer
		var body : String init ""
				
		if ( self.container.isInstanceOf(ClassDefinition) ) then
			result := EAnnotationHelper.new.create("kermeta.inv", self.name, body)		
		else
			if ( ConstraintHelper.new.isPre(self) ) then
				result := EAnnotationHelper.new.create("kermeta.pre", self.name, body)	
			else
				result := EAnnotationHelper.new.create("kermeta.post", self.name, body)
			end
		end
	end
}

/**
 *
 */
aspect class Property {
	operation createEcoreModelElement(context : KM2EcoreContext) : EStructuralFeature is do
		var ecoreStructuralFeature : EStructuralFeature
		if ( self.isComposite and TypeHelper.new.isPrimitiveType(self.type.asType(Type), context) ) then
			ecoreStructuralFeature := EAttribute.new
			//ecoreStructuralFeature.iD := 
		else
			ecoreStructuralFeature := EReference.new
			ecoreStructuralFeature.asType(EReference).containment := self.isComposite
		end
		ecoreStructuralFeature.name := self.name
		ecoreStructuralFeature.ordered := self.isOrdered
		ecoreStructuralFeature.unique := self.isUnique
		ecoreStructuralFeature.lowerBound := self.lower
		ecoreStructuralFeature.upperBound := self.upper
		//ecoreStructuralFeature.many := 
		//ecoreStructuralFeature.required := 
		//ecoreStructuralFeature.changeable := 
		//ecoreStructuralFeature.volatile := 
		//ecoreStructuralFeature.transient :=
		//ecoreStructuralFeature.defaultValueLiteral := 
		//ecoreStructuralFeature.defaultValue := 
		//ecoreStructuralFeature.unsettable := 
		ecoreStructuralFeature.derived := self.isDerived
		if ( self.isDerived ) then
			var annotation : EAnnotation init EAnnotationHelper.new.create("kermeta", "isReadOnly", self.isReadOnly.toString())
			ecoreStructuralFeature.eAnnotations.add(annotation)
		end
		// gestion du read only
		// gestion du default		
		result := ecoreStructuralFeature
	end
}

aspect class ObjectTypeVariable {
	operation createEcoreModelElement(context : KM2EcoreContext) : ETypeParameter is do
		var ecoreTypeParameter : ETypeParameter init ETypeParameter.new
		ecoreTypeParameter.name := self.name
		result := ecoreTypeParameter
	end
}

aspect class Tag {
	operation createEcoreModelElement(context : KM2EcoreContext) : EAnnotation is do
		var ecoreAnnotation : EAnnotation
		if ( self.name == void ) then
			ecoreAnnotation := EAnnotationHelper.new.create("kermeta", "documentation", self.~value)
		else
			ecoreAnnotation := EAnnotationHelper.new.create("kermeta", self.name, self.~value)
		end
		result := ecoreAnnotation
	end
}
