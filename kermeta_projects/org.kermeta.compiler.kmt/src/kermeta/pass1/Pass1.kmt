/* $Id: Pass1.kmt,v 1.3 2008-02-01 15:23:26 ftanguy Exp $
 * Creation date: January 21, 2008
 * License: EPL
 * Copyright: IRISA / INRIA / Universite Rennes 1
 * Authors: Cyril Faucher <cfaucher@irisa.fr>
 *			Fran√ßois Tanguy <ftanguy@irisa.fr>
 */


package kermeta::language::structure;


require kermeta
require "CreateEcoreModelElement.kmt"
require "../common/trace_structure.kmt"
require "http://www.eclipse.org/emf/2002/Ecore"
require "../helper/KM2EcoreHelper.kmt"

using ecore
using km2ecore::helper::kermeta

aspect class Object {
	operation applyPass1() is do
	end
}

aspect class ModelingUnit {
	method applyPass1() is do
		// Creating the associated ecore package
		var ecoreAnnotation : EAnnotation init self.createEcoreModelElement()
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreAnnotation )
		// Compile the owned elements
		self.eachOwnedElement{ p | p.applyPass1() }
		// Getting the ecore packages
		self.packages.each{p|
			self.ecorePackages.add( p.ecoreModelElement )
		}
	end
}

aspect class Package {
	method applyPass1() is do
		// Creating the associated ecore package
		var ecorePackage : EPackage init self.createEcoreModelElement()
		// Setting the container
		var p : Package init self.nestingPackage
		//p ?= self.container()
		if ( p != void ) then
			p.getEcoreModelElement().eSubpackages.add(ecorePackage)
		end
		// Setting the ecore proxy
		self.setEcoreModelElement( ecorePackage )
		// Compile the owned elements
		self.eachOwnedElement{ cd | cd.applyPass1() }
	end
} 

aspect class PrimitiveType {
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreDataType : EDataType init self.createEcoreModelElement()
		// Setting the container
		var p : Package init self.container().asType(Package)
		p.getEcoreModelElement().eClassifiers.add(ecoreDataType)
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreDataType )
		// Compile the owned elements
		self.eachOwnedElement{ cd | cd.applyPass1() }
	end 
}

aspect class Enumeration { 
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreEnumeration : EEnum init self.createEcoreModelElement()
		// Setting the container
		var p : Package init self.container().asType(Package)
		p.getEcoreModelElement().eClassifiers.add(ecoreEnumeration)
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreEnumeration )
		// Compile the owned elements
		self.eachOwnedElement{ l | l.applyPass1() }
		
	end
} 
  
aspect class EnumerationLiteral {
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreEnumLiteral : EEnumLiteral init self.createEcoreModelElement()
		// Setting the container
		var e : Enumeration init self.~enumeration.asType(Enumeration)
		e.getEcoreModelElement().eLiterals.add(ecoreEnumLiteral)
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreEnumLiteral )
	end
}  
  
aspect class ClassDefinition {
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreClass : EClass init self.createEcoreModelElement()		
		// Setting the container
		var p : Package init self.container().asType(Package)
		p.getEcoreModelElement().eClassifiers.add(ecoreClass)
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreClass )
		// Compile the owned elements
		self.eachOwnedElement{ o | o.applyPass1() }
	end
	
} 
  
aspect class Property {
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreStructuralFeature : EStructuralFeature init self.createEcoreModelElement()
		// Setting the container
		var c : ClassDefinition
		c ?= self.container()
		c.getEcoreModelElement().eStructuralFeatures.add( ecoreStructuralFeature )
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreStructuralFeature )
		// Compile the owned elements
		self.eachOwnedElement{ o | o.applyPass1() }
	end 
}

aspect class Operation {
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreOperation : EOperation init self.createEcoreModelElement()
		// Setting the container
		var c : ClassDefinition
		c ?= self.container()
		c.getEcoreModelElement().eOperations.add(ecoreOperation)
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreOperation )
		// Compile the owned elements
		self.eachOwnedElement{ o | o.applyPass1() }
	end
}

aspect class Parameter {
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreParameter : EParameter init self.createEcoreModelElement()
		// Setting the container
		var o : Operation init self.container().asType(Operation)
		o.getEcoreModelElement().eParameters.add( ecoreParameter )
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreParameter )
	end
}

aspect class Constraint {
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreAnnotation : EAnnotation init self.createEcoreModelElement()
		// Setting the container
		var c : Object init self.container
		var p : Property init ObjectHelper.new.getPropertyValue(c, "ecoreModelElement")
		if ( p!= void ) then
			var ecoreModelElement : EModelElement init c.get(p).asType(EModelElement)
			ecoreModelElement.eAnnotations.add(ecoreAnnotation)
		end
		// Setting the ecore proxy
		self.ecoreModelElement := ecoreAnnotation
	end
}

aspect class ObjectTypeVariable {
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreTypeParameter : ETypeParameter init self.createEcoreModelElement()
		// Setting the container
		var container : Object init self.container
		if ( container.isInstanceOf(ClassDefinition) ) then		
			container.asType(ClassDefinition).getEcoreModelElement().eTypeParameters.add(ecoreTypeParameter)
		else
			container.asType(Operation).getEcoreModelElement().eTypeParameters.add(ecoreTypeParameter)
		end
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreTypeParameter )
	end
}

aspect class Tag {
	method applyPass1() is do
		// Creating the associated ecore class
		var ecoreAnnotation : EAnnotation init self.createEcoreModelElement()
		// Setting the container
		var c : Object init self.container
		if ( c.isInstanceOf(ModelingUnit) ) then
			c.asType(ModelingUnit).entryPoints.add(ecoreAnnotation)
		else
			var p : Property init ObjectHelper.new.getPropertyValue(c, "ecoreModelElement")
			if ( p!= void ) then
				var ecoreModelElement : EModelElement init c.get(p).asType(EModelElement)
				self.getEcoreModelElement().eAnnotations.add(ecoreAnnotation)
			end
		end
		// Setting the ecore proxy
		self.setEcoreModelElement( ecoreAnnotation )
	end
}