<?xml version="1.0" encoding="ASCII"?>
<simk:SIMKModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:simk="http://www.kermeta.org/simk">
  <sMContexts staticMethods="//@staticMethods.0 //@staticMethods.1 //@staticMethods.2 //@staticMethods.3 //@staticMethods.4 //@staticMethods.5 //@staticMethods.6 //@staticMethods.7 //@staticMethods.8 //@staticMethods.9 //@staticMethods.10 //@staticMethods.11 //@staticMethods.12 //@staticMethods.13 //@staticMethods.14 //@staticMethods.15 //@staticMethods.16 //@staticMethods.17 //@staticMethods.18 //@staticMethods.19 //@staticMethods.20 //@staticMethods.21 //@staticMethods.22 //@staticMethods.23 //@staticMethods.24 //@staticMethods.25">
    <sMClass name="BooleanWrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.26 //@staticMethods.27 //@staticMethods.28 //@staticMethods.29 //@staticMethods.30 //@staticMethods.31 //@staticMethods.32 //@staticMethods.33 //@staticMethods.34 //@staticMethods.35 //@staticMethods.36 //@staticMethods.37 //@staticMethods.38 //@staticMethods.39 //@staticMethods.40 //@staticMethods.41 //@staticMethods.42 //@staticMethods.43 //@staticMethods.44 //@staticMethods.45 //@staticMethods.46 //@staticMethods.47 //@staticMethods.48 //@staticMethods.49 //@staticMethods.50">
    <sMClass name="NumericWrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.51 //@staticMethods.52 //@staticMethods.53 //@staticMethods.54 //@staticMethods.55 //@staticMethods.56 //@staticMethods.57 //@staticMethods.58 //@staticMethods.59 //@staticMethods.60 //@staticMethods.61 //@staticMethods.62 //@staticMethods.63 //@staticMethods.64 //@staticMethods.65 //@staticMethods.66 //@staticMethods.67 //@staticMethods.68 //@staticMethods.69 //@staticMethods.70 //@staticMethods.71 //@staticMethods.72 //@staticMethods.73 //@staticMethods.74 //@staticMethods.75 //@staticMethods.76 //@staticMethods.77 //@staticMethods.78 //@staticMethods.79 //@staticMethods.80 //@staticMethods.81 //@staticMethods.82">
    <sMClass name="IntegerWrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.83 //@staticMethods.84 //@staticMethods.85 //@staticMethods.86 //@staticMethods.87 //@staticMethods.88 //@staticMethods.89 //@staticMethods.90 //@staticMethods.91 //@staticMethods.92 //@staticMethods.93 //@staticMethods.94 //@staticMethods.95 //@staticMethods.96 //@staticMethods.97 //@staticMethods.98 //@staticMethods.99 //@staticMethods.100 //@staticMethods.101 //@staticMethods.102 //@staticMethods.103 //@staticMethods.104 //@staticMethods.105 //@staticMethods.106 //@staticMethods.107 //@staticMethods.108 //@staticMethods.109 //@staticMethods.110 //@staticMethods.111 //@staticMethods.112 //@staticMethods.113">
    <sMClass name="RealWrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.114 //@staticMethods.115 //@staticMethods.116 //@staticMethods.117 //@staticMethods.118 //@staticMethods.119 //@staticMethods.120 //@staticMethods.121 //@staticMethods.122 //@staticMethods.123 //@staticMethods.124 //@staticMethods.125 //@staticMethods.126 //@staticMethods.127 //@staticMethods.128 //@staticMethods.129 //@staticMethods.130 //@staticMethods.131 //@staticMethods.132 //@staticMethods.133 //@staticMethods.134 //@staticMethods.135 //@staticMethods.136 //@staticMethods.137 //@staticMethods.138">
    <sMClass name="CharacterWrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.139 //@staticMethods.140 //@staticMethods.141 //@staticMethods.142 //@staticMethods.143 //@staticMethods.144 //@staticMethods.145 //@staticMethods.146 //@staticMethods.147 //@staticMethods.148 //@staticMethods.149 //@staticMethods.150 //@staticMethods.151 //@staticMethods.152 //@staticMethods.153 //@staticMethods.154 //@staticMethods.155 //@staticMethods.156 //@staticMethods.157 //@staticMethods.158 //@staticMethods.159 //@staticMethods.160 //@staticMethods.161 //@staticMethods.162 //@staticMethods.163 //@staticMethods.164 //@staticMethods.165 //@staticMethods.166 //@staticMethods.167 //@staticMethods.168 //@staticMethods.169 //@staticMethods.170 //@staticMethods.171 //@staticMethods.172 //@staticMethods.173 //@staticMethods.174 //@staticMethods.175 //@staticMethods.176 //@staticMethods.177">
    <sMClass name="StringWrapper"/>
  </sMContexts>
  <staticMethods name="not" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.not(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="xor" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.and(self, kermeta.standard.helper.BooleanWrapper.not(other)), kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(self), other));&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_76 = false;&#xA;&#x9;eval_76 = other.getMetaClass().isNotEqual(java.lang.Boolean);&#xA;&#xA;&#x9;if( eval_76 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="or" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.or(self, other);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="implies" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other)), self));&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="nand" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other));&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.0" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_77 = false;&#xA;&#x9;eval_77 = self;&#xA;&#xA;&#x9;if( eval_77 ) {&#xA;&#xA;&#x9;result = &quot;true&quot;;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = &quot;false&quot;;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="and" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.and(self, other);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = self.getMetaClass().equals(cl);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.0" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.0" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass( self.getClass().getName() );&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.0" body="&#xA;&#x9;java.lang.Boolean eval_78 = false;&#xA;&#x9;eval_78 = element.isInstanceOf(property.getType());&#xA;&#xA;&#x9;if( eval_78 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = (kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.IncompatibleTypeError&quot;);&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), self.toString()), &quot; to &quot;), element.toString()), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isFrozen(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.0" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = self.getMetaClass().getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean eval_79 = false;&#xA;&#x9;eval_79 = kermeta.standard.helper.BooleanWrapper.not(cd.isVoid());&#xA;&#xA;&#x9;if( eval_79 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft11 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_80 = false;&#xA;&#x9;while( !eval_80 ) {&#xA;&#x9;eval_80 = it_ft11.isOff();&#xA;&#x9;if ( eval_80 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property p = it_ft11.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = self.get(p);&#xA;&#xA;&#x9;java.lang.Boolean eval_81 = false;&#xA;&#x9;eval_81 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(v.isVoid()), v.isInstanceOf(kermeta.standard.Collection&lt;kermeta.language.structure.Object>));&#xA;&#xA;&#x9;if( eval_81 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = v.asType(kermeta.standard.Collection&lt;kermeta.language.structure.Object>);&#xA;&#xA;&#x9;java.lang.Boolean eval_82 = false;&#xA;&#x9;eval_82 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( eval_82 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean eval_83 = false;&#xA;&#x9;eval_83 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), v.isVoid());&#xA;&#xA;&#x9;if( eval_83 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.checkInvariants(self);&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.0" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(self.equals(element));&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.0" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.0" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.0" body="&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.freeze(self);&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.0" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.unset(self, property);&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.0" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) fr.irisa.triskell.kermeta.runtime.language.Object.getContainingResource(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isInstanceOf(self, type);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.0" body="&#xA;&#x9;java.lang.Boolean eval_84 = false;&#xA;&#x9;eval_84 = self.isNotEqual(null);&#xA;&#xA;&#x9;if( eval_84 ) {&#xA;&#xA;&#x9;self.checkInvariants();&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) self.getMetaClass().getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft12 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_85 = false;&#xA;&#x9;while( !eval_85 ) {&#xA;&#x9;eval_85 = it_ft12.isOff();&#xA;&#x9;if ( eval_85 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property subObj = it_ft12.next();&#xA;&#xA;&#x9;java.lang.Boolean eval_86 = false;&#xA;&#x9;eval_86 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( eval_86 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_87 = false;&#xA;&#x9;eval_87 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( eval_87 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) self.get(subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft13 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean eval_88 = false;&#xA;&#x9;while( !eval_88 ) {&#xA;&#x9;eval_88 = it_ft13.isOff();&#xA;&#x9;if ( eval_88 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft13.next();&#xA;&#xA;&#x9;aSubObjInstances.checkAllInvariants();&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;subObjInstances.each();&#xA;}&#xA; else {&#xA;&#xA;&#x9;self.get(subObj).checkAllInvariants();&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.0" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_89 = false;&#xA;&#x9;eval_89 = self.isInstanceOf(type);&#xA;&#xA;&#x9;if( eval_89 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.TypeCastError&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="other" type=""/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="other" type=""/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.1" body="">
    <sMParameters name="self" type=""/>
    <sMParameters name="other" type=""/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="other" type=""/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="other" type=""/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = self.getMetaClass().equals(cl);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.1" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type=""/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.1" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass( self.getClass().getName() );&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.equals(self, element);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="element" type=""/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.1" body="&#xA;&#x9;java.lang.Boolean eval_90 = false;&#xA;&#x9;eval_90 = element.isInstanceOf(property.getType());&#xA;&#xA;&#x9;if( eval_90 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = (kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.IncompatibleTypeError&quot;);&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), self.toString()), &quot; to &quot;), element.toString()), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type=""/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isFrozen(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.1" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = self.getMetaClass().getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean eval_91 = false;&#xA;&#x9;eval_91 = kermeta.standard.helper.BooleanWrapper.not(cd.isVoid());&#xA;&#xA;&#x9;if( eval_91 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft14 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_92 = false;&#xA;&#x9;while( !eval_92 ) {&#xA;&#x9;eval_92 = it_ft14.isOff();&#xA;&#x9;if ( eval_92 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property p = it_ft14.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = self.get(p);&#xA;&#xA;&#x9;java.lang.Boolean eval_93 = false;&#xA;&#x9;eval_93 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(v.isVoid()), v.isInstanceOf(kermeta.standard.Collection&lt;kermeta.language.structure.Object>));&#xA;&#xA;&#x9;if( eval_93 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = v.asType(kermeta.standard.Collection&lt;kermeta.language.structure.Object>);&#xA;&#xA;&#x9;java.lang.Boolean eval_94 = false;&#xA;&#x9;eval_94 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( eval_94 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean eval_95 = false;&#xA;&#x9;eval_95 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), v.isVoid());&#xA;&#xA;&#x9;if( eval_95 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.checkInvariants(self);&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(self.equals(element));&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="element" type=""/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.1" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type=""/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.1" body="&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.freeze(self);&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.1" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.unset(self, property);&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.1" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) fr.irisa.triskell.kermeta.runtime.language.Object.getContainingResource(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isInstanceOf(self, type);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.1" body="&#xA;&#x9;java.lang.Boolean eval_96 = false;&#xA;&#x9;eval_96 = self.isNotEqual(null);&#xA;&#xA;&#x9;if( eval_96 ) {&#xA;&#xA;&#x9;self.checkInvariants();&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) self.getMetaClass().getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft15 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_97 = false;&#xA;&#x9;while( !eval_97 ) {&#xA;&#x9;eval_97 = it_ft15.isOff();&#xA;&#x9;if ( eval_97 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property subObj = it_ft15.next();&#xA;&#xA;&#x9;java.lang.Boolean eval_98 = false;&#xA;&#x9;eval_98 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( eval_98 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_99 = false;&#xA;&#x9;eval_99 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( eval_99 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) self.get(subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft16 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean eval_100 = false;&#xA;&#x9;while( !eval_100 ) {&#xA;&#x9;eval_100 = it_ft16.isOff();&#xA;&#x9;if ( eval_100 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft16.next();&#xA;&#xA;&#x9;aSubObjInstances.checkAllInvariants();&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;subObjInstances.each();&#xA;}&#xA; else {&#xA;&#xA;&#x9;self.get(subObj).checkAllInvariants();&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.1" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_101 = false;&#xA;&#x9;eval_101 = self.isInstanceOf(type);&#xA;&#xA;&#x9;if( eval_101 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.TypeCastError&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type=""/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.1" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;[&quot;, self.getMetaClass().getTypeDefinition().qualifiedName()), &quot;:&quot;), kermeta.standard.helper.IntegerWrapper.toString(self.oid())), &quot;]&quot;);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type=""/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_102 = false;&#xA;&#x9;eval_102 = org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_102 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.VoidOperandError&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_103 = false;&#xA;&#x9;eval_103 = other.getMetaClass().isNotEqual(java.lang.Integer);&#xA;&#xA;&#x9;if( eval_103 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_104 = false;&#xA;&#x9;eval_104 = other.getMetaClass().equals(java.lang.Double);&#xA;&#xA;&#x9;if( eval_104 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLower(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLower(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="mult" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_105 = false;&#xA;&#x9;eval_105 = org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_105 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.VoidOperandError&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.times(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="minus" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_106 = false;&#xA;&#x9;eval_106 = org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_106 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.VoidOperandError&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.minus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_107 = false;&#xA;&#x9;eval_107 = other.getMetaClass().isNotEqual(java.lang.Integer);&#xA;&#xA;&#x9;if( eval_107 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_108 = false;&#xA;&#x9;eval_108 = other.getMetaClass().equals(java.lang.Double);&#xA;&#xA;&#x9;if( eval_108 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="mod" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_109 = false;&#xA;&#x9;eval_109 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( eval_109 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.DivisionByZero&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean eval_110 = false;&#xA;&#x9;eval_110 = org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_110 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.VoidOperandError&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.mod(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="div" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_111 = false;&#xA;&#x9;eval_111 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( eval_111 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.DivisionByZero&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean eval_112 = false;&#xA;&#x9;eval_112 = org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_112 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.VoidOperandError&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.div(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toReal" sMContext="//@sMContexts.2" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toReal(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_113 = false;&#xA;&#x9;eval_113 = other.getMetaClass().isNotEqual(java.lang.Integer);&#xA;&#xA;&#x9;if( eval_113 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_114 = false;&#xA;&#x9;eval_114 = other.getMetaClass().equals(java.lang.Double);&#xA;&#xA;&#x9;if( eval_114 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.standard.NotComparableException&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_115 = false;&#xA;&#x9;eval_115 = other.getMetaClass().isNotEqual(java.lang.Integer);&#xA;&#xA;&#x9;if( eval_115 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_116 = false;&#xA;&#x9;eval_116 = other.getMetaClass().equals(java.lang.Double);&#xA;&#xA;&#x9;if( eval_116 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreater(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreater(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_117 = false;&#xA;&#x9;eval_117 = other.getMetaClass().isNotEqual(java.lang.Integer);&#xA;&#xA;&#x9;if( eval_117 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_118 = false;&#xA;&#x9;eval_118 = other.getMetaClass().equals(java.lang.Double);&#xA;&#xA;&#x9;if( eval_118 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreaterOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreaterOrEqual(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="uminus" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.minus(0, self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.2" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toString(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_119 = false;&#xA;&#x9;eval_119 = other.getMetaClass().isNotEqual(java.lang.Integer);&#xA;&#xA;&#x9;if( eval_119 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_120 = false;&#xA;&#x9;eval_120 = other.getMetaClass().equals(java.lang.Double);&#xA;&#xA;&#x9;if( eval_120 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLowerOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLowerOrEqual(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = self.getMetaClass().equals(cl);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.2" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.2" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass( self.getClass().getName() );&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.2" body="&#xA;&#x9;java.lang.Boolean eval_121 = false;&#xA;&#x9;eval_121 = element.isInstanceOf(property.getType());&#xA;&#xA;&#x9;if( eval_121 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = (kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.IncompatibleTypeError&quot;);&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), self.toString()), &quot; to &quot;), element.toString()), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isFrozen(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.2" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = self.getMetaClass().getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean eval_122 = false;&#xA;&#x9;eval_122 = kermeta.standard.helper.BooleanWrapper.not(cd.isVoid());&#xA;&#xA;&#x9;if( eval_122 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft17 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_123 = false;&#xA;&#x9;while( !eval_123 ) {&#xA;&#x9;eval_123 = it_ft17.isOff();&#xA;&#x9;if ( eval_123 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property p = it_ft17.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = self.get(p);&#xA;&#xA;&#x9;java.lang.Boolean eval_124 = false;&#xA;&#x9;eval_124 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(v.isVoid()), v.isInstanceOf(kermeta.standard.Collection&lt;kermeta.language.structure.Object>));&#xA;&#xA;&#x9;if( eval_124 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = v.asType(kermeta.standard.Collection&lt;kermeta.language.structure.Object>);&#xA;&#xA;&#x9;java.lang.Boolean eval_125 = false;&#xA;&#x9;eval_125 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( eval_125 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean eval_126 = false;&#xA;&#x9;eval_126 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), v.isVoid());&#xA;&#xA;&#x9;if( eval_126 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.checkInvariants(self);&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(self.equals(element));&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.2" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.2" body="&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.freeze(self);&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.2" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.unset(self, property);&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.2" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) fr.irisa.triskell.kermeta.runtime.language.Object.getContainingResource(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isInstanceOf(self, type);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.2" body="&#xA;&#x9;java.lang.Boolean eval_127 = false;&#xA;&#x9;eval_127 = self.isNotEqual(null);&#xA;&#xA;&#x9;if( eval_127 ) {&#xA;&#xA;&#x9;self.checkInvariants();&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) self.getMetaClass().getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft18 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_128 = false;&#xA;&#x9;while( !eval_128 ) {&#xA;&#x9;eval_128 = it_ft18.isOff();&#xA;&#x9;if ( eval_128 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property subObj = it_ft18.next();&#xA;&#xA;&#x9;java.lang.Boolean eval_129 = false;&#xA;&#x9;eval_129 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( eval_129 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_130 = false;&#xA;&#x9;eval_130 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( eval_130 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) self.get(subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft19 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean eval_131 = false;&#xA;&#x9;while( !eval_131 ) {&#xA;&#x9;eval_131 = it_ft19.isOff();&#xA;&#x9;if ( eval_131 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft19.next();&#xA;&#xA;&#x9;aSubObjInstances.checkAllInvariants();&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;subObjInstances.each();&#xA;}&#xA; else {&#xA;&#xA;&#x9;self.get(subObj).checkAllInvariants();&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.2" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_132 = false;&#xA;&#x9;eval_132 = self.isInstanceOf(type);&#xA;&#xA;&#x9;if( eval_132 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.TypeCastError&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.3" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_133 = false;&#xA;&#x9;eval_133 = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_133 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.VoidOperandError&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="mult" sMContext="//@sMContexts.3" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_134 = false;&#xA;&#x9;eval_134 = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_134 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.VoidOperandError&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.times(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="minus" sMContext="//@sMContexts.3" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_135 = false;&#xA;&#x9;eval_135 = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_135 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.VoidOperandError&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.minus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toInteger" sMContext="//@sMContexts.3" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.RealUtil.toInteger(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="uminus" sMContext="//@sMContexts.3" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.minus(kermeta.standard.helper.IntegerWrapper.toReal(0), self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_136 = false;&#xA;&#x9;eval_136 = other.getMetaClass().isNotEqual(java.lang.Double);&#xA;&#xA;&#x9;if( eval_136 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_137 = false;&#xA;&#x9;eval_137 = other.getMetaClass().equals(java.lang.Integer);&#xA;&#xA;&#x9;if( eval_137 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(self, kermeta.standard.helper.IntegerWrapper.toReal(other.asType(java.lang.Integer)));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.RealUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="div" sMContext="//@sMContexts.3" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_138 = false;&#xA;&#x9;eval_138 = kermeta.standard.helper.RealWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( eval_138 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.DivisionByZero&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean eval_139 = false;&#xA;&#x9;eval_139 = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_139 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.VoidOperandError&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.div(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.3" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_140 = false;&#xA;&#x9;eval_140 = other.getMetaClass().isNotEqual(java.lang.Double);&#xA;&#xA;&#x9;if( eval_140 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_141 = false;&#xA;&#x9;eval_141 = other.getMetaClass().equals(java.lang.Integer);&#xA;&#xA;&#x9;if( eval_141 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(self, kermeta.standard.helper.IntegerWrapper.toReal(other.asType(java.lang.Integer)));&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.standard.NotComparableException&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.RealUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.3" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.RealUtil.toString(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = self.getMetaClass().equals(cl);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.3" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.3" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass( self.getClass().getName() );&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.3" body="&#xA;&#x9;java.lang.Boolean eval_142 = false;&#xA;&#x9;eval_142 = element.isInstanceOf(property.getType());&#xA;&#xA;&#x9;if( eval_142 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = (kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.IncompatibleTypeError&quot;);&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), self.toString()), &quot; to &quot;), element.toString()), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isFrozen(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.3" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = self.getMetaClass().getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean eval_143 = false;&#xA;&#x9;eval_143 = kermeta.standard.helper.BooleanWrapper.not(cd.isVoid());&#xA;&#xA;&#x9;if( eval_143 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft20 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_144 = false;&#xA;&#x9;while( !eval_144 ) {&#xA;&#x9;eval_144 = it_ft20.isOff();&#xA;&#x9;if ( eval_144 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property p = it_ft20.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = self.get(p);&#xA;&#xA;&#x9;java.lang.Boolean eval_145 = false;&#xA;&#x9;eval_145 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(v.isVoid()), v.isInstanceOf(kermeta.standard.Collection&lt;kermeta.language.structure.Object>));&#xA;&#xA;&#x9;if( eval_145 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = v.asType(kermeta.standard.Collection&lt;kermeta.language.structure.Object>);&#xA;&#xA;&#x9;java.lang.Boolean eval_146 = false;&#xA;&#x9;eval_146 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( eval_146 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean eval_147 = false;&#xA;&#x9;eval_147 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), v.isVoid());&#xA;&#xA;&#x9;if( eval_147 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.checkInvariants(self);&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.3" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(self.equals(element));&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.3" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.3" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.3" body="&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.freeze(self);&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.3" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.unset(self, property);&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.3" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) fr.irisa.triskell.kermeta.runtime.language.Object.getContainingResource(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isInstanceOf(self, type);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.3" body="&#xA;&#x9;java.lang.Boolean eval_148 = false;&#xA;&#x9;eval_148 = self.isNotEqual(null);&#xA;&#xA;&#x9;if( eval_148 ) {&#xA;&#xA;&#x9;self.checkInvariants();&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) self.getMetaClass().getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft21 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_149 = false;&#xA;&#x9;while( !eval_149 ) {&#xA;&#x9;eval_149 = it_ft21.isOff();&#xA;&#x9;if ( eval_149 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property subObj = it_ft21.next();&#xA;&#xA;&#x9;java.lang.Boolean eval_150 = false;&#xA;&#x9;eval_150 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( eval_150 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_151 = false;&#xA;&#x9;eval_151 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( eval_151 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) self.get(subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft22 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean eval_152 = false;&#xA;&#x9;while( !eval_152 ) {&#xA;&#x9;eval_152 = it_ft22.isOff();&#xA;&#x9;if ( eval_152 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft22.next();&#xA;&#xA;&#x9;aSubObjInstances.checkAllInvariants();&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;subObjInstances.each();&#xA;}&#xA; else {&#xA;&#xA;&#x9;self.get(subObj).checkAllInvariants();&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.3" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_153 = false;&#xA;&#x9;eval_153 = self.isInstanceOf(type);&#xA;&#xA;&#x9;if( eval_153 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.TypeCastError&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_154 = false;&#xA;&#x9;eval_154 = other.getMetaClass().isNotEqual(java.lang.Character);&#xA;&#xA;&#x9;if( eval_154 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.4" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_155 = false;&#xA;&#x9;eval_155 = other.isVoid();&#xA;&#xA;&#x9;if( eval_155 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.CallOnVoidTarget&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.4" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.toString(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = self.getMetaClass().equals(cl);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.4" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Character"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.4" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass( self.getClass().getName() );&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.4" body="&#xA;&#x9;java.lang.Boolean eval_156 = false;&#xA;&#x9;eval_156 = element.isInstanceOf(property.getType());&#xA;&#xA;&#x9;if( eval_156 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = (kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.IncompatibleTypeError&quot;);&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), self.toString()), &quot; to &quot;), element.toString()), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isFrozen(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.4" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = self.getMetaClass().getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean eval_157 = false;&#xA;&#x9;eval_157 = kermeta.standard.helper.BooleanWrapper.not(cd.isVoid());&#xA;&#xA;&#x9;if( eval_157 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft23 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_158 = false;&#xA;&#x9;while( !eval_158 ) {&#xA;&#x9;eval_158 = it_ft23.isOff();&#xA;&#x9;if ( eval_158 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property p = it_ft23.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = self.get(p);&#xA;&#xA;&#x9;java.lang.Boolean eval_159 = false;&#xA;&#x9;eval_159 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(v.isVoid()), v.isInstanceOf(kermeta.standard.Collection&lt;kermeta.language.structure.Object>));&#xA;&#xA;&#x9;if( eval_159 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = v.asType(kermeta.standard.Collection&lt;kermeta.language.structure.Object>);&#xA;&#xA;&#x9;java.lang.Boolean eval_160 = false;&#xA;&#x9;eval_160 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( eval_160 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean eval_161 = false;&#xA;&#x9;eval_161 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), v.isVoid());&#xA;&#xA;&#x9;if( eval_161 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.checkInvariants(self);&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.4" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(self.equals(element));&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.4" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Character"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.4" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.4" body="&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.freeze(self);&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.4" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.unset(self, property);&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.4" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) fr.irisa.triskell.kermeta.runtime.language.Object.getContainingResource(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isInstanceOf(self, type);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.4" body="&#xA;&#x9;java.lang.Boolean eval_162 = false;&#xA;&#x9;eval_162 = self.isNotEqual(null);&#xA;&#xA;&#x9;if( eval_162 ) {&#xA;&#xA;&#x9;self.checkInvariants();&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) self.getMetaClass().getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft24 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_163 = false;&#xA;&#x9;while( !eval_163 ) {&#xA;&#x9;eval_163 = it_ft24.isOff();&#xA;&#x9;if ( eval_163 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property subObj = it_ft24.next();&#xA;&#xA;&#x9;java.lang.Boolean eval_164 = false;&#xA;&#x9;eval_164 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( eval_164 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_165 = false;&#xA;&#x9;eval_165 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( eval_165 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) self.get(subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft25 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean eval_166 = false;&#xA;&#x9;while( !eval_166 ) {&#xA;&#x9;eval_166 = it_ft25.isOff();&#xA;&#x9;if ( eval_166 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft25.next();&#xA;&#xA;&#x9;aSubObjInstances.checkAllInvariants();&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;subObjInstances.each();&#xA;}&#xA; else {&#xA;&#xA;&#x9;self.get(subObj).checkAllInvariants();&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.4" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_167 = false;&#xA;&#x9;eval_167 = self.isInstanceOf(type);&#xA;&#xA;&#x9;if( eval_167 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.TypeCastError&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Character"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="append" sMContext="//@sMContexts.5" body="&#xA;&#x9;java.lang.Boolean eval_168 = false;&#xA;&#x9;eval_168 = org.kermeta.compil.runtime.helper.basetypes.StringUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_168 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.CallOnVoidTarget&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.StringUtil.append(self, other);&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.5" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_169 = false;&#xA;&#x9;eval_169 = org.kermeta.compil.runtime.helper.basetypes.StringUtil.isVoid(other);&#xA;&#xA;&#x9;if( eval_169 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, kermeta.standard.helper.StringWrapper.toString(other));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_170 = false;&#xA;&#x9;eval_170 = other.getMetaClass().isNotEqual(java.lang.String);&#xA;&#xA;&#x9;if( eval_170 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="toReal" sMContext="//@sMContexts.5" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toReal(self);&#xA;&#xA;&#x9;java.lang.Boolean eval_171 = false;&#xA;&#x9;eval_171 = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isVoid(result);&#xA;&#xA;&#x9;if( eval_171 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.StringFormatException&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toBoolean" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toBoolean(self);&#xA;&#xA;&#x9;java.lang.Boolean eval_172 = false;&#xA;&#x9;eval_172 = org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.isVoid(result);&#xA;&#xA;&#x9;if( eval_172 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.StringFormatException&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.5" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_173 = false;&#xA;&#x9;eval_173 = other.isVoid();&#xA;&#xA;&#x9;if( eval_173 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.CallOnVoidTarget&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="contains" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.contains(self, str1);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="indexOf" sMContext="//@sMContexts.5" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.indexOf(self, str);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="elementAt" sMContext="//@sMContexts.5" body="&#xA;java.lang.Character result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_174 = false;&#xA;&#x9;eval_174 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, kermeta.standard.helper.IntegerWrapper.minus(kermeta.standard.helper.StringWrapper.size(self), 1)));&#xA;&#xA;&#x9;if( eval_174 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.StringIndexOutOfBound&quot;) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Character) org.kermeta.compil.runtime.helper.basetypes.StringUtil.elementAt(self, index);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Character"/>
  </staticMethods>
  <staticMethods name="size" sMContext="//@sMContexts.5" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.size(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="replace" sMContext="//@sMContexts.5" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.replace(self, str1, str2);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMParameters name="str2" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toUpperCase" sMContext="//@sMContexts.5" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toUpperCase(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toInteger" sMContext="//@sMContexts.5" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toInteger(self);&#xA;&#xA;&#x9;java.lang.Boolean eval_175 = false;&#xA;&#x9;eval_175 = org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isVoid(result);&#xA;&#xA;&#x9;if( eval_175 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.StringFormatException&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toLowerCase" sMContext="//@sMContexts.5" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toLowerCase(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="substring" sMContext="//@sMContexts.5" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_176 = false;&#xA;&#x9;eval_176 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(startIndex, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(startIndex, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(subStringSize, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(subStringSize, startIndex));&#xA;&#xA;&#x9;if( eval_176 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.substring(self, startIndex, subStringSize);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.StringIndexOutOfBound&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="startIndex" type="java.lang.Integer"/>
    <sMParameters name="subStringSize" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.5" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = self;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="split" sMContext="//@sMContexts.5" body="&#xA;kermeta.standard.OrderedSet&lt;java.lang.String> result = null;&#xA;&#xA;&#x9;result = (kermeta.standard.OrderedSet&lt;java.lang.String>) org.kermeta.compil.runtime.helper.basetypes.StringUtil.split(self, delimiter);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="delimiter" type="java.lang.String"/>
    <sMReturn type="kermeta.standard.OrderedSet&lt;java.lang.String>"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = self.getMetaClass().equals(cl);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.5" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.5" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass( self.getClass().getName() );&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.5" body="&#xA;&#x9;java.lang.Boolean eval_177 = false;&#xA;&#x9;eval_177 = element.isInstanceOf(property.getType());&#xA;&#xA;&#x9;if( eval_177 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = (kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.IncompatibleTypeError&quot;);&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), self.toString()), &quot; to &quot;), element.toString()), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isFrozen(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.5" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = self.getMetaClass().getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean eval_178 = false;&#xA;&#x9;eval_178 = kermeta.standard.helper.BooleanWrapper.not(cd.isVoid());&#xA;&#xA;&#x9;if( eval_178 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft26 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_179 = false;&#xA;&#x9;while( !eval_179 ) {&#xA;&#x9;eval_179 = it_ft26.isOff();&#xA;&#x9;if ( eval_179 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property p = it_ft26.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = self.get(p);&#xA;&#xA;&#x9;java.lang.Boolean eval_180 = false;&#xA;&#x9;eval_180 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(v.isVoid()), v.isInstanceOf(kermeta.standard.Collection&lt;kermeta.language.structure.Object>));&#xA;&#xA;&#x9;if( eval_180 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = v.asType(kermeta.standard.Collection&lt;kermeta.language.structure.Object>);&#xA;&#xA;&#x9;java.lang.Boolean eval_181 = false;&#xA;&#x9;eval_181 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( eval_181 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean eval_182 = false;&#xA;&#x9;eval_182 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), v.isVoid());&#xA;&#xA;&#x9;if( eval_182 ) {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.checkInvariants(self);&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.5" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(self.equals(element));&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.5" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.5" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.5" body="&#xA;&#x9;fr.irisa.triskell.kermeta.runtime.language.Object.freeze(self);&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.5" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.ObjectUtil.unset(self, property);&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.5" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) fr.irisa.triskell.kermeta.runtime.language.Object.getContainingResource(self);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) fr.irisa.triskell.kermeta.runtime.language.Object.isInstanceOf(self, type);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.5" body="&#xA;&#x9;java.lang.Boolean eval_183 = false;&#xA;&#x9;eval_183 = self.isNotEqual(null);&#xA;&#xA;&#x9;if( eval_183 ) {&#xA;&#xA;&#x9;self.checkInvariants();&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) self.getMetaClass().getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft27 = cd.getAllAttribute().iterator();&#xA;&#x9;java.lang.Boolean eval_184 = false;&#xA;&#x9;while( !eval_184 ) {&#xA;&#x9;eval_184 = it_ft27.isOff();&#xA;&#x9;if ( eval_184 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Property subObj = it_ft27.next();&#xA;&#xA;&#x9;java.lang.Boolean eval_185 = false;&#xA;&#x9;eval_185 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( eval_185 ) {&#xA;&#xA;&#x9;java.lang.Boolean eval_186 = false;&#xA;&#x9;eval_186 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(self.get(subObj).getMetaClass().getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( eval_186 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) self.get(subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft28 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean eval_187 = false;&#xA;&#x9;while( !eval_187 ) {&#xA;&#x9;eval_187 = it_ft28.isOff();&#xA;&#x9;if ( eval_187 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type parameter: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft28.next();&#xA;&#xA;&#x9;aSubObjInstances.checkAllInvariants();&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;subObjInstances.each();&#xA;}&#xA; else {&#xA;&#xA;&#x9;self.get(subObj).checkAllInvariants();&#xA;}&#xA;&#xA;}&#xA;&#xA;//Ending of the Inlining of the function type parameter: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//Ending of the Inlining of the function type: each&#xA;cd.getAllAttribute().each();&#xA;}&#xA;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.5" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean eval_188 = false;&#xA;&#x9;eval_188 = self.isInstanceOf(type);&#xA;&#xA;&#x9;if( eval_188 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( (kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil._new(&quot;kermeta.exceptions.TypeCastError&quot;) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.5" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
</simk:SIMKModel>
