<?xml version="1.0" encoding="ASCII"?>
<simk:SIMKModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:simk="http://www.kermeta.org/simk">
  <sMContexts staticMethods="//@staticMethods.0" qualifiedNameFinalPackage="simpletest.runner">
    <sMClass name="Main__main__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.1" qualifiedNameFinalPackage="fsm.runner">
    <sMClass name="FSM__reset__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.2" qualifiedNameFinalPackage="fsm.runner">
    <sMClass name="FSM__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.3" qualifiedNameFinalPackage="fsm.runner">
    <sMClass name="Transition__fire__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.4" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Fallible__getLogKermeta__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.5" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Fallible__number__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.6" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Fallible__mustStop__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.7" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Log__newAttempt__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.8" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Failure__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.9" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Error__makeTearDown__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.10" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Error__makeSetUp__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.11" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Error__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.12" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Test__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.13" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Test__initLog__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.14" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestSuite__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.15" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__setUp__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.16" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__raiseIfHasFailures__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.17" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__getLog__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.18" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__getTestMethodName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.19" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.20" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.21" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__tearDown__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.22" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestRunner__printTestResult__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.23" qualifiedNameFinalPackage="kermeta.interpreter.runner">
    <sMClass name="DynamicExpression__initializeDefaults__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.24" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__save__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.25" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__findDanglingModelElements__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.26" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__load__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.27" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__instances__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.28" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__normalizedUri__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.29" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="EMFResource__save__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.30" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="EMFResource__saveAndValidateWithEMF__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.31" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="EMFResource__load__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.32" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Repository__findDanglingModelElements__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.33" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="DanglingDiagnostic__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.34" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="StringBuffer__length__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.35" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="StringBuffer__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.36" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.37" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__values__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.38" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__keys__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.39" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__keyIterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.40" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__valueIterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.41" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__size__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.42" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Stack__peek__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.43" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Stack__pop__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.44" qualifiedNameFinalPackage="kermeta.language.runner">
    <sMClass name="ReflectiveCollection__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.45" qualifiedNameFinalPackage="kermeta.language.runner">
    <sMClass name="ReflectiveSequence__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.46" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__getMetaClass__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.47" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__isFrozen__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.48" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__hashcode__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.49" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__checkInvariants__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.50" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__isVoid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.51" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__freeze__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.52" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__oid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.53" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__container__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.54" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__containingResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.55" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__checkAllInvariants__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.56" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.57" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="ModelType___new__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.58" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Class___new__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.59" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Class__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.60" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="NamedElement__qualifiedName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.61" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__one__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.62" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__sum__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.63" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.64" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.65" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__isEmpty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.66" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.67" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__any__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.68" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__empty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.69" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__isNotEmpty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.70" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__iterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.71" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__size__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.72" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.73" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.74" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.75" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__flatten__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.76" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.77" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.78" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.79" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.80" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__flatten__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.81" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.82" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.83" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.84" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="OrderedCollection__last__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.85" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="OrderedCollection__first__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.86" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Iterator__hasNext__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.87" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Iterator__next__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.88" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Iterator__isOff__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.89" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Void__isVoid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.90" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Void__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.91 //@staticMethods.92 //@staticMethods.93 //@staticMethods.94 //@staticMethods.95 //@staticMethods.96 //@staticMethods.97 //@staticMethods.98 //@staticMethods.99 //@staticMethods.100 //@staticMethods.101 //@staticMethods.102 //@staticMethods.103 //@staticMethods.104 //@staticMethods.105 //@staticMethods.106 //@staticMethods.107 //@staticMethods.108 //@staticMethods.109 //@staticMethods.110 //@staticMethods.111 //@staticMethods.112 //@staticMethods.113 //@staticMethods.114 //@staticMethods.115 //@staticMethods.116" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="BooleanWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.117 //@staticMethods.118 //@staticMethods.119 //@staticMethods.120 //@staticMethods.121 //@staticMethods.122 //@staticMethods.123 //@staticMethods.124 //@staticMethods.125 //@staticMethods.126 //@staticMethods.127 //@staticMethods.128 //@staticMethods.129 //@staticMethods.130 //@staticMethods.131 //@staticMethods.132 //@staticMethods.133 //@staticMethods.134 //@staticMethods.135 //@staticMethods.136 //@staticMethods.137 //@staticMethods.138 //@staticMethods.139 //@staticMethods.140 //@staticMethods.141 //@staticMethods.142 //@staticMethods.143 //@staticMethods.144 //@staticMethods.145 //@staticMethods.146 //@staticMethods.147 //@staticMethods.148" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="IntegerWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.149 //@staticMethods.150 //@staticMethods.151 //@staticMethods.152 //@staticMethods.153 //@staticMethods.154 //@staticMethods.155 //@staticMethods.156 //@staticMethods.157 //@staticMethods.158 //@staticMethods.159 //@staticMethods.160 //@staticMethods.161 //@staticMethods.162 //@staticMethods.163 //@staticMethods.164 //@staticMethods.165 //@staticMethods.166 //@staticMethods.167 //@staticMethods.168 //@staticMethods.169 //@staticMethods.170 //@staticMethods.171 //@staticMethods.172 //@staticMethods.173 //@staticMethods.174 //@staticMethods.175 //@staticMethods.176 //@staticMethods.177 //@staticMethods.178 //@staticMethods.179" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="RealWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.180 //@staticMethods.181 //@staticMethods.182 //@staticMethods.183 //@staticMethods.184 //@staticMethods.185 //@staticMethods.186 //@staticMethods.187 //@staticMethods.188 //@staticMethods.189 //@staticMethods.190 //@staticMethods.191 //@staticMethods.192 //@staticMethods.193 //@staticMethods.194 //@staticMethods.195 //@staticMethods.196 //@staticMethods.197 //@staticMethods.198 //@staticMethods.199 //@staticMethods.200 //@staticMethods.201 //@staticMethods.202 //@staticMethods.203 //@staticMethods.204" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="CharacterWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.205 //@staticMethods.206 //@staticMethods.207 //@staticMethods.208 //@staticMethods.209 //@staticMethods.210 //@staticMethods.211 //@staticMethods.212 //@staticMethods.213 //@staticMethods.214 //@staticMethods.215 //@staticMethods.216 //@staticMethods.217 //@staticMethods.218 //@staticMethods.219 //@staticMethods.220 //@staticMethods.221 //@staticMethods.222 //@staticMethods.223 //@staticMethods.224 //@staticMethods.225 //@staticMethods.226 //@staticMethods.227 //@staticMethods.228 //@staticMethods.229 //@staticMethods.230 //@staticMethods.231 //@staticMethods.232 //@staticMethods.233 //@staticMethods.234 //@staticMethods.235 //@staticMethods.236 //@staticMethods.237 //@staticMethods.238 //@staticMethods.239 //@staticMethods.240 //@staticMethods.241 //@staticMethods.242 //@staticMethods.243" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="StringWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.244" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="UnknownJavaObject__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.245 //@staticMethods.247" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="SetSuper" usages="Super"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.246" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="CollectionSuper" usages="Super"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.248 //@staticMethods.249 //@staticMethods.250" qualifiedNameFinalPackage="kermeta.language.helper">
    <sMClass name="ReflectiveCollectionSuper" usages="Super"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.251 //@staticMethods.252" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="OrderedCollectionSuper" usages="Super"/>
  </sMContexts>
  <staticMethods name="main" sMContext="//@sMContexts.0" body="&#xA;simpletest.Main anExec = (simpletest.Main) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;simpletest.Main&quot;);&#xA;anExec.main();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.1" body="&#xA;fsm.FSM anExec = (fsm.FSM) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;fsm.FSM&quot;);&#xA;anExec.reset();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.2" body="&#xA;fsm.FSM anExec = (fsm.FSM) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;fsm.FSM&quot;);&#xA;anExec.run();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.3" body="&#xA;fsm.Transition anExec = (fsm.Transition) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;fsm.Transition&quot;);&#xA;anExec.fire();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.4" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Fallible&quot;);&#xA;anExec.getLogKermeta();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.5" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Fallible&quot;);&#xA;anExec.number();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.6" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Fallible&quot;);&#xA;anExec.mustStop();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.7" body="&#xA;kermeta.kunit.Log anExec = (kermeta.kunit.Log) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Log&quot;);&#xA;anExec.newAttempt();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.8" body="&#xA;kermeta.kunit.Failure anExec = (kermeta.kunit.Failure) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Failure&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.9" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Error&quot;);&#xA;anExec.makeTearDown();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.10" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Error&quot;);&#xA;anExec.makeSetUp();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.11" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Error&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.12" body="&#xA;kermeta.kunit.Test anExec = (kermeta.kunit.Test) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Test&quot;);&#xA;anExec.run();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.13" body="&#xA;kermeta.kunit.Test anExec = (kermeta.kunit.Test) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Test&quot;);&#xA;anExec.initLog();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.14" body="&#xA;kermeta.kunit.TestSuite anExec = (kermeta.kunit.TestSuite) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestSuite&quot;);&#xA;anExec.run();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.15" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.setUp();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.16" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.raiseIfHasFailures();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.17" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.getLog();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.18" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.getTestMethodName();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.19" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.20" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.run();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.21" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.tearDown();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.22" body="&#xA;kermeta.kunit.TestRunner anExec = (kermeta.kunit.TestRunner) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestRunner&quot;);&#xA;anExec.printTestResult();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.23" body="&#xA;kermeta.interpreter.DynamicExpression anExec = (kermeta.interpreter.DynamicExpression) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.interpreter.DynamicExpression&quot;);&#xA;anExec.initializeDefaults();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.24" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.save();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.25" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.findDanglingModelElements();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.26" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.load();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.27" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.instances();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.28" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.normalizedUri();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.29" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFResource&quot;);&#xA;anExec.save();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.30" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFResource&quot;);&#xA;anExec.saveAndValidateWithEMF();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.31" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFResource&quot;);&#xA;anExec.load();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.32" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Repository&quot;);&#xA;anExec.findDanglingModelElements();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.33" body="&#xA;kermeta.persistence.DanglingDiagnostic anExec = (kermeta.persistence.DanglingDiagnostic) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.DanglingDiagnostic&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.34" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.StringBuffer&quot;);&#xA;anExec.length();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.35" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.StringBuffer&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.36" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.37" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.values();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.38" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.keys();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.39" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.keyIterator();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.40" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.valueIterator();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.41" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.size();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.42" body="&#xA;kermeta.utils.Stack anExec = (kermeta.utils.Stack) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Stack&quot;);&#xA;anExec.peek();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.43" body="&#xA;kermeta.utils.Stack anExec = (kermeta.utils.Stack) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Stack&quot;);&#xA;anExec.pop();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.44" body="&#xA;kermeta.language.ReflectiveCollection anExec = (kermeta.language.ReflectiveCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.ReflectiveCollection&quot;);&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.45" body="&#xA;kermeta.language.ReflectiveSequence anExec = (kermeta.language.ReflectiveSequence) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.ReflectiveSequence&quot;);&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.46" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.getMetaClass();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.47" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.isFrozen();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.48" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.hashcode();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.49" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.checkInvariants();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.50" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.isVoid();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.51" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.freeze();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.52" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.oid();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.53" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.container();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.54" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.containingResource();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.55" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.checkAllInvariants();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.56" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.57" body="&#xA;kermeta.language.structure.ModelType anExec = (kermeta.language.structure.ModelType) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.ModelType&quot;);&#xA;anExec._new();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.58" body="&#xA;kermeta.language.structure.Class anExec = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Class&quot;);&#xA;anExec._new();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.59" body="&#xA;kermeta.language.structure.Class anExec = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Class&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.60" body="&#xA;kermeta.language.structure.NamedElement anExec = (kermeta.language.structure.NamedElement) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.NamedElement&quot;);&#xA;anExec.qualifiedName();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.61" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.one();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.62" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.sum();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.63" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.64" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.65" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.isEmpty();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.66" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.67" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.any();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.68" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.empty();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.69" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.isNotEmpty();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.70" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.iterator();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.71" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.size();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.72" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.73" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.74" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.75" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.flatten();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.76" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.77" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.78" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.79" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.80" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.flatten();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.81" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.82" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.83" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.84" body="&#xA;kermeta.standard.OrderedCollection anExec = (kermeta.standard.OrderedCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedCollection&quot;);&#xA;anExec.last();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.85" body="&#xA;kermeta.standard.OrderedCollection anExec = (kermeta.standard.OrderedCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedCollection&quot;);&#xA;anExec.first();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.86" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Iterator&quot;);&#xA;anExec.hasNext();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.87" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Iterator&quot;);&#xA;anExec.next();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.88" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Iterator&quot;);&#xA;anExec.isOff();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.89" body="&#xA;kermeta.standard.Void anExec = (kermeta.standard.Void) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Void&quot;);&#xA;anExec.isVoid();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.90" body="&#xA;kermeta.standard.Void anExec = (kermeta.standard.Void) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Void&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="not" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.not(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="xor" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.and(self, kermeta.standard.helper.BooleanWrapper.not(other)), kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(self), other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_212 = false;&#xA;&#x9;idIfCond_212 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Boolean&quot;));&#xA;&#xA;&#x9;if( idIfCond_212 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="or" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.or(self, other);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="implies" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other)), self));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="nand" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.91" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_213 = false;&#xA;&#x9;idIfCond_213 = self;&#xA;&#xA;&#x9;if( idIfCond_213 ) {&#xA;&#xA;&#x9;result = &quot;true&quot;;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = &quot;false&quot;;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="and" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.and(self, other);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.91" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.91" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.91" body="&#xA;&#x9;java.lang.Boolean idIfCond_214 = false;&#xA;&#x9;idIfCond_214 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_214 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.91" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.91" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_215 = false;&#xA;&#x9;idIfCond_215 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_215 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft56 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_216 = false;&#xA;&#x9;while( !idLoopCond_216 ) {&#xA;&#x9;idLoopCond_216 = it_ft56.isOff();&#xA;&#x9;if ( idLoopCond_216 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp56 = it_ft56.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft57 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft57 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft57 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp56.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_218 = false;&#xA;&#x9;while( !idLoopCond_218 ) {&#xA;&#x9;idLoopCond_218 = kermeta.standard.helper.BooleanWrapper.or(it_ft57.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft57, false));&#xA;&#x9;if ( idLoopCond_218 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft57 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp57 = it_ft57.next();&#xA;&#xA;&#x9;result_lambda_ft57 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp57.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft57 = kermeta.standard.helper.BooleanWrapper.or(test_ft57, result_lambda_ft57);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft57 = test_ft57;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_217 = false;&#xA;&#x9;idIfCond_217 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft57), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp56.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_217 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p_lbdExp56);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_219 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft58 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_220 = false;&#xA;&#xA;&#x9;if( idIfCond_220 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp58 = null;&#xA;&#xA;&#x9;result_ft58 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft58 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_219 = result_ft58;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_219 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_221 = false;&#xA;&#x9;idIfCond_221 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p_lbdExp56.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp56.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_221 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp56.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_222 = false;&#xA;&#x9;idIfCond_222 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp56.getLower());&#xA;&#xA;&#x9;if( idIfCond_222 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp56.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_223 = false;&#xA;&#x9;idIfCond_223 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp56.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_223 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp56.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.91" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.91" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.91" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.91" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.91" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.91" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.91" body="&#xA;&#x9;java.lang.Boolean idIfCond_224 = false;&#xA;&#x9;idIfCond_224 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_224 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft59 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_225 = false;&#xA;&#x9;while( !idLoopCond_225 ) {&#xA;&#x9;idLoopCond_225 = it_ft59.isOff();&#xA;&#x9;if ( idLoopCond_225 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp59 = it_ft59.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_226 = false;&#xA;&#x9;idIfCond_226 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp59.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp59.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_226 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_227 = false;&#xA;&#x9;idIfCond_227 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp59)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp59)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_227 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp59);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft60 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_228 = false;&#xA;&#x9;while( !idLoopCond_228 ) {&#xA;&#x9;idLoopCond_228 = it_ft60.isOff();&#xA;&#x9;if ( idLoopCond_228 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp60 = it_ft60.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances_lbdExp60);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp59));&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.91" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_229 = false;&#xA;&#x9;idIfCond_229 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type);&#xA;&#xA;&#x9;if( idIfCond_229 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_230 = false;&#xA;&#x9;idIfCond_230 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_230 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_231 = false;&#xA;&#x9;idIfCond_231 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_231 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLower(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLower(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.92" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_232 = false;&#xA;&#x9;idIfCond_232 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_232 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="mult" sMContext="//@sMContexts.92" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_233 = false;&#xA;&#x9;idIfCond_233 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_233 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.times(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="minus" sMContext="//@sMContexts.92" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_234 = false;&#xA;&#x9;idIfCond_234 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_234 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.minus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_235 = false;&#xA;&#x9;idIfCond_235 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_235 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_236 = false;&#xA;&#x9;idIfCond_236 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_236 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="mod" sMContext="//@sMContexts.92" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_237 = false;&#xA;&#x9;idIfCond_237 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_237 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DivisionByZero&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_238 = false;&#xA;&#x9;idIfCond_238 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_238 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.mod(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toReal" sMContext="//@sMContexts.92" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toReal(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="div" sMContext="//@sMContexts.92" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_239 = false;&#xA;&#x9;idIfCond_239 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_239 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DivisionByZero&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_240 = false;&#xA;&#x9;idIfCond_240 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_240 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.div(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.92" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_241 = false;&#xA;&#x9;idIfCond_241 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_241 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_242 = false;&#xA;&#x9;idIfCond_242 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_242 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.NotComparableException&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_243 = false;&#xA;&#x9;idIfCond_243 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_243 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_244 = false;&#xA;&#x9;idIfCond_244 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_244 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreater(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreater(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_245 = false;&#xA;&#x9;idIfCond_245 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_245 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_246 = false;&#xA;&#x9;idIfCond_246 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_246 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreaterOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreaterOrEqual(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="uminus" sMContext="//@sMContexts.92" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.minus(0, self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.92" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toString(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_247 = false;&#xA;&#x9;idIfCond_247 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_247 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_248 = false;&#xA;&#x9;idIfCond_248 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_248 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLowerOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLowerOrEqual(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.92" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.92" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.92" body="&#xA;&#x9;java.lang.Boolean idIfCond_249 = false;&#xA;&#x9;idIfCond_249 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_249 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.92" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.92" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_250 = false;&#xA;&#x9;idIfCond_250 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_250 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft61 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_251 = false;&#xA;&#x9;while( !idLoopCond_251 ) {&#xA;&#x9;idLoopCond_251 = it_ft61.isOff();&#xA;&#x9;if ( idLoopCond_251 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp61 = it_ft61.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft62 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft62 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft62 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp61.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_253 = false;&#xA;&#x9;while( !idLoopCond_253 ) {&#xA;&#x9;idLoopCond_253 = kermeta.standard.helper.BooleanWrapper.or(it_ft62.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft62, false));&#xA;&#x9;if ( idLoopCond_253 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft62 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp62 = it_ft62.next();&#xA;&#xA;&#x9;result_lambda_ft62 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp62.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft62 = kermeta.standard.helper.BooleanWrapper.or(test_ft62, result_lambda_ft62);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft62 = test_ft62;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_252 = false;&#xA;&#x9;idIfCond_252 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft62), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp61.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_252 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p_lbdExp61);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_254 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft63 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_255 = false;&#xA;&#xA;&#x9;if( idIfCond_255 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp63 = null;&#xA;&#xA;&#x9;result_ft63 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft63 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_254 = result_ft63;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_254 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_256 = false;&#xA;&#x9;idIfCond_256 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p_lbdExp61.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp61.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_256 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp61.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_257 = false;&#xA;&#x9;idIfCond_257 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp61.getLower());&#xA;&#xA;&#x9;if( idIfCond_257 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp61.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_258 = false;&#xA;&#x9;idIfCond_258 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp61.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_258 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp61.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.92" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.92" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.92" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.92" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.92" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.92" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.92" body="&#xA;&#x9;java.lang.Boolean idIfCond_259 = false;&#xA;&#x9;idIfCond_259 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_259 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft64 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_260 = false;&#xA;&#x9;while( !idLoopCond_260 ) {&#xA;&#x9;idLoopCond_260 = it_ft64.isOff();&#xA;&#x9;if ( idLoopCond_260 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp64 = it_ft64.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_261 = false;&#xA;&#x9;idIfCond_261 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp64.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp64.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_261 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_262 = false;&#xA;&#x9;idIfCond_262 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp64)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp64)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_262 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp64);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft65 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_263 = false;&#xA;&#x9;while( !idLoopCond_263 ) {&#xA;&#x9;idLoopCond_263 = it_ft65.isOff();&#xA;&#x9;if ( idLoopCond_263 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp65 = it_ft65.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances_lbdExp65);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp64));&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.92" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_264 = false;&#xA;&#x9;idIfCond_264 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type);&#xA;&#xA;&#x9;if( idIfCond_264 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.93" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_265 = false;&#xA;&#x9;idIfCond_265 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_265 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="mult" sMContext="//@sMContexts.93" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_266 = false;&#xA;&#x9;idIfCond_266 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_266 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.times(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="minus" sMContext="//@sMContexts.93" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_267 = false;&#xA;&#x9;idIfCond_267 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_267 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.minus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toInteger" sMContext="//@sMContexts.93" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.RealUtil.toInteger(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="uminus" sMContext="//@sMContexts.93" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.minus(kermeta.standard.helper.IntegerWrapper.toReal(0), self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_268 = false;&#xA;&#x9;idIfCond_268 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_268 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_269 = false;&#xA;&#x9;idIfCond_269 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_269 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.RealUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="div" sMContext="//@sMContexts.93" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_270 = false;&#xA;&#x9;idIfCond_270 = kermeta.standard.helper.RealWrapper.equals(other, kermeta.standard.helper.IntegerWrapper.toReal(0));&#xA;&#xA;&#x9;if( idIfCond_270 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DivisionByZero&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_271 = false;&#xA;&#x9;idIfCond_271 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_271 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.div(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.93" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.RealUtil.toString(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.93" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_272 = false;&#xA;&#x9;idIfCond_272 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_272 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_273 = false;&#xA;&#x9;idIfCond_273 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_273 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.NotComparableException&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.RealUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.93" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.93" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.93" body="&#xA;&#x9;java.lang.Boolean idIfCond_274 = false;&#xA;&#x9;idIfCond_274 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_274 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.93" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.93" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_275 = false;&#xA;&#x9;idIfCond_275 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_275 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft66 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_276 = false;&#xA;&#x9;while( !idLoopCond_276 ) {&#xA;&#x9;idLoopCond_276 = it_ft66.isOff();&#xA;&#x9;if ( idLoopCond_276 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp66 = it_ft66.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft67 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft67 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft67 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp66.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_278 = false;&#xA;&#x9;while( !idLoopCond_278 ) {&#xA;&#x9;idLoopCond_278 = kermeta.standard.helper.BooleanWrapper.or(it_ft67.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft67, false));&#xA;&#x9;if ( idLoopCond_278 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft67 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp67 = it_ft67.next();&#xA;&#xA;&#x9;result_lambda_ft67 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp67.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft67 = kermeta.standard.helper.BooleanWrapper.or(test_ft67, result_lambda_ft67);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft67 = test_ft67;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_277 = false;&#xA;&#x9;idIfCond_277 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft67), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp66.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_277 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p_lbdExp66);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_279 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft68 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_280 = false;&#xA;&#xA;&#x9;if( idIfCond_280 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp68 = null;&#xA;&#xA;&#x9;result_ft68 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft68 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_279 = result_ft68;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_279 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_281 = false;&#xA;&#x9;idIfCond_281 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p_lbdExp66.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp66.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_281 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp66.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_282 = false;&#xA;&#x9;idIfCond_282 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp66.getLower());&#xA;&#xA;&#x9;if( idIfCond_282 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp66.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_283 = false;&#xA;&#x9;idIfCond_283 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp66.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_283 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp66.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.93" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.93" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.93" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.93" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.93" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.93" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.93" body="&#xA;&#x9;java.lang.Boolean idIfCond_284 = false;&#xA;&#x9;idIfCond_284 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_284 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft69 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_285 = false;&#xA;&#x9;while( !idLoopCond_285 ) {&#xA;&#x9;idLoopCond_285 = it_ft69.isOff();&#xA;&#x9;if ( idLoopCond_285 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp69 = it_ft69.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_286 = false;&#xA;&#x9;idIfCond_286 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp69.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp69.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_286 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_287 = false;&#xA;&#x9;idIfCond_287 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp69)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp69)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_287 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp69);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft70 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_288 = false;&#xA;&#x9;while( !idLoopCond_288 ) {&#xA;&#x9;idLoopCond_288 = it_ft70.isOff();&#xA;&#x9;if ( idLoopCond_288 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp70 = it_ft70.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances_lbdExp70);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp69));&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.93" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_289 = false;&#xA;&#x9;idIfCond_289 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type);&#xA;&#xA;&#x9;if( idIfCond_289 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_290 = false;&#xA;&#x9;idIfCond_290 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Character&quot;));&#xA;&#xA;&#x9;if( idIfCond_290 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.94" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_291 = false;&#xA;&#x9;idIfCond_291 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_291 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.CallOnVoidTarget&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.94" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.toString(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.94" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.94" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.94" body="&#xA;&#x9;java.lang.Boolean idIfCond_292 = false;&#xA;&#x9;idIfCond_292 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_292 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.94" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.94" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_293 = false;&#xA;&#x9;idIfCond_293 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_293 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft71 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_294 = false;&#xA;&#x9;while( !idLoopCond_294 ) {&#xA;&#x9;idLoopCond_294 = it_ft71.isOff();&#xA;&#x9;if ( idLoopCond_294 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp71 = it_ft71.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft72 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft72 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft72 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp71.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_296 = false;&#xA;&#x9;while( !idLoopCond_296 ) {&#xA;&#x9;idLoopCond_296 = kermeta.standard.helper.BooleanWrapper.or(it_ft72.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft72, false));&#xA;&#x9;if ( idLoopCond_296 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft72 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp72 = it_ft72.next();&#xA;&#xA;&#x9;result_lambda_ft72 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp72.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft72 = kermeta.standard.helper.BooleanWrapper.or(test_ft72, result_lambda_ft72);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft72 = test_ft72;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_295 = false;&#xA;&#x9;idIfCond_295 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft72), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp71.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_295 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p_lbdExp71);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_297 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft73 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_298 = false;&#xA;&#xA;&#x9;if( idIfCond_298 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp73 = null;&#xA;&#xA;&#x9;result_ft73 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft73 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_297 = result_ft73;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_297 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_299 = false;&#xA;&#x9;idIfCond_299 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p_lbdExp71.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp71.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_299 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp71.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_300 = false;&#xA;&#x9;idIfCond_300 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp71.getLower());&#xA;&#xA;&#x9;if( idIfCond_300 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp71.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_301 = false;&#xA;&#x9;idIfCond_301 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp71.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_301 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp71.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.94" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.94" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.94" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.94" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.94" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.94" body="&#xA;&#x9;java.lang.Boolean idIfCond_302 = false;&#xA;&#x9;idIfCond_302 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_302 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft74 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_303 = false;&#xA;&#x9;while( !idLoopCond_303 ) {&#xA;&#x9;idLoopCond_303 = it_ft74.isOff();&#xA;&#x9;if ( idLoopCond_303 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp74 = it_ft74.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_304 = false;&#xA;&#x9;idIfCond_304 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp74.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp74.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_304 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_305 = false;&#xA;&#x9;idIfCond_305 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp74)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp74)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_305 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp74);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft75 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_306 = false;&#xA;&#x9;while( !idLoopCond_306 ) {&#xA;&#x9;idLoopCond_306 = it_ft75.isOff();&#xA;&#x9;if ( idLoopCond_306 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp75 = it_ft75.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances_lbdExp75);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp74));&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.94" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_307 = false;&#xA;&#x9;idIfCond_307 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type);&#xA;&#xA;&#x9;if( idIfCond_307 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.94" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.95" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_308 = false;&#xA;&#x9;idIfCond_308 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_308 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, kermeta.standard.helper.StringWrapper.toString(other));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="append" sMContext="//@sMContexts.95" body="&#xA;&#x9;java.lang.Boolean idIfCond_309 = false;&#xA;&#x9;idIfCond_309 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_309 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.CallOnVoidTarget&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.StringUtil.append(self, other);&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_310 = false;&#xA;&#x9;idIfCond_310 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.String&quot;));&#xA;&#xA;&#x9;if( idIfCond_310 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="toReal" sMContext="//@sMContexts.95" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toReal(self);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_311 = false;&#xA;&#x9;idIfCond_311 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(result);&#xA;&#xA;&#x9;if( idIfCond_311 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringFormatException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toBoolean" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toBoolean(self);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_312 = false;&#xA;&#x9;idIfCond_312 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(result);&#xA;&#xA;&#x9;if( idIfCond_312 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringFormatException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.95" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_313 = false;&#xA;&#x9;idIfCond_313 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_313 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.CallOnVoidTarget&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="contains" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.contains(self, str1);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="indexOf" sMContext="//@sMContexts.95" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.indexOf(self, str);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="elementAt" sMContext="//@sMContexts.95" body="&#xA;java.lang.Character result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_314 = false;&#xA;&#x9;idIfCond_314 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, kermeta.standard.helper.IntegerWrapper.minus(kermeta.standard.helper.StringWrapper.size(self), 1)));&#xA;&#xA;&#x9;if( idIfCond_314 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringIndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Character) org.kermeta.compil.runtime.helper.basetypes.StringUtil.elementAt(self, index);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Character"/>
  </staticMethods>
  <staticMethods name="size" sMContext="//@sMContexts.95" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.size(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="replace" sMContext="//@sMContexts.95" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.replace(self, str1, str2);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMParameters name="str2" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toUpperCase" sMContext="//@sMContexts.95" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toUpperCase(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toInteger" sMContext="//@sMContexts.95" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toInteger(self);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_315 = false;&#xA;&#x9;idIfCond_315 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(result);&#xA;&#xA;&#x9;if( idIfCond_315 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringFormatException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toLowerCase" sMContext="//@sMContexts.95" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toLowerCase(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="substring" sMContext="//@sMContexts.95" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_316 = false;&#xA;&#x9;idIfCond_316 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(startIndex, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(startIndex, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(subStringSize, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(subStringSize, startIndex));&#xA;&#xA;&#x9;if( idIfCond_316 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.substring(self, startIndex, subStringSize);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringIndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="startIndex" type="java.lang.Integer"/>
    <sMParameters name="subStringSize" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="split" sMContext="//@sMContexts.95" body="&#xA;kermeta.standard.OrderedSet&lt;java.lang.String> result = null;&#xA;&#xA;&#x9;result = (kermeta.standard.OrderedSet&lt;java.lang.String>) org.kermeta.compil.runtime.helper.basetypes.StringUtil.split(self, delimiter);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="delimiter" type="java.lang.String"/>
    <sMReturn type="kermeta.standard.OrderedSet&lt;java.lang.String>"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.95" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = self;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.95" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.95" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.95" body="&#xA;&#x9;java.lang.Boolean idIfCond_317 = false;&#xA;&#x9;idIfCond_317 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_317 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.95" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.95" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_318 = false;&#xA;&#x9;idIfCond_318 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_318 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft76 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_319 = false;&#xA;&#x9;while( !idLoopCond_319 ) {&#xA;&#x9;idLoopCond_319 = it_ft76.isOff();&#xA;&#x9;if ( idLoopCond_319 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp76 = it_ft76.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft77 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft77 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft77 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp76.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_321 = false;&#xA;&#x9;while( !idLoopCond_321 ) {&#xA;&#x9;idLoopCond_321 = kermeta.standard.helper.BooleanWrapper.or(it_ft77.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft77, false));&#xA;&#x9;if ( idLoopCond_321 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft77 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp77 = it_ft77.next();&#xA;&#xA;&#x9;result_lambda_ft77 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp77.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft77 = kermeta.standard.helper.BooleanWrapper.or(test_ft77, result_lambda_ft77);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft77 = test_ft77;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_320 = false;&#xA;&#x9;idIfCond_320 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft77), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp76.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_320 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p_lbdExp76);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_322 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft78 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_323 = false;&#xA;&#xA;&#x9;if( idIfCond_323 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp78 = null;&#xA;&#xA;&#x9;result_ft78 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft78 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_322 = result_ft78;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_322 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_324 = false;&#xA;&#x9;idIfCond_324 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p_lbdExp76.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp76.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_324 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp76.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_325 = false;&#xA;&#x9;idIfCond_325 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp76.getLower());&#xA;&#xA;&#x9;if( idIfCond_325 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp76.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_326 = false;&#xA;&#x9;idIfCond_326 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp76.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_326 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp76.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.95" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.95" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.95" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.95" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.95" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.95" body="&#xA;&#x9;java.lang.Boolean idIfCond_327 = false;&#xA;&#x9;idIfCond_327 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_327 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft79 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_328 = false;&#xA;&#x9;while( !idLoopCond_328 ) {&#xA;&#x9;idLoopCond_328 = it_ft79.isOff();&#xA;&#x9;if ( idLoopCond_328 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp79 = it_ft79.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_329 = false;&#xA;&#x9;idIfCond_329 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp79.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp79.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_329 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_330 = false;&#xA;&#x9;idIfCond_330 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp79)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp79)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_330 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp79);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft80 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_331 = false;&#xA;&#x9;while( !idLoopCond_331 ) {&#xA;&#x9;idLoopCond_331 = it_ft80.isOff();&#xA;&#x9;if ( idLoopCond_331 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp80 = it_ft80.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances_lbdExp80);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, prop_lbdExp79));&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.95" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_332 = false;&#xA;&#x9;idIfCond_332 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type);&#xA;&#xA;&#x9;if( idIfCond_332 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.95" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="main" sMContext="//@sMContexts.96" body="&#xA;kermeta.standard.UnknownJavaObject anExec = (kermeta.standard.UnknownJavaObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.UnknownJavaObject&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="super_remove" sMContext="//@sMContexts.97" body="&#xA;&#x9;G elem = null;&#xA;//BIft:detect&#xA;&#xA;G result_ft81 = null;&#xA;&#xA;&#x9;G elem_ft81 = null;&#xA;&#xA;&#x9;result_ft81 = null;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft81 = self.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_333 = false;&#xA;&#x9;while( !idLoopCond_333 ) {&#xA;&#x9;idLoopCond_333 = kermeta.standard.helper.BooleanWrapper.or(it_ft81.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(result_ft81, null));&#xA;&#x9;if ( idLoopCond_333 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft81 = it_ft81.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_334 = false;&#xA;//BIle:detector&#xA;G e_lbdExp81 = elem_ft81;&#xA;&#xA;&#x9;idIfCond_334 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(e_lbdExp81, element);&#xA;//EIle:detector&#xA;&#xA;&#xA;&#x9;if( idIfCond_334 ) {&#xA;&#xA;&#x9;result_ft81 = elem_ft81;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;//CE&#xA;elem = result_ft81;&#xA;//EIft:detect&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_335 = false;&#xA;&#x9;idIfCond_335 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(elem, null);&#xA;&#xA;&#x9;if( idIfCond_335 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(self, elem);&#xA;}&#xA;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Set"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_add" sMContext="//@sMContexts.98" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.add(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Collection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_add" sMContext="//@sMContexts.97" body="&#xA;&#x9;java.lang.Boolean idIfCond_336 = false;&#xA;&#x9;idIfCond_336 = kermeta.standard.helper.BooleanWrapper.not(self.contains(element));&#xA;&#xA;&#x9;if( idIfCond_336 ) {&#xA;&#xA;&#x9;kermeta.standard.helper.CollectionSuper.super_add(self, element);&#xA;}&#xA;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Set"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_clear" sMContext="//@sMContexts.99" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.clear(self);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_remove" sMContext="//@sMContexts.99" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.remove(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_add" sMContext="//@sMContexts.99" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.add(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_addAt" sMContext="//@sMContexts.100" body="&#xA;&#x9;java.lang.Boolean idIfCond_337 = false;&#xA;&#x9;idIfCond_337 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, self.size()));&#xA;&#xA;&#x9;if( idIfCond_337 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.addAt(self, index, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.OrderedCollection"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_equals" sMContext="//@sMContexts.100" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean isEqual = false;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_338 = false;&#xA;&#x9;idIfCond_338 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(element));&#xA;&#xA;&#x9;if( idIfCond_338 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_339 = false;&#xA;&#x9;idIfCond_339 = org.kermeta.compil.runtime.helper.language.TypeUtil.isInstance(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.OrderedCollection&lt;G>&quot;), element);&#xA;&#xA;&#x9;if( idIfCond_339 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;G> collection = null;&#xA;&#xA;&#x9;collection = (kermeta.standard.Collection&lt;G>) element;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_340 = false;&#xA;&#x9;idIfCond_340 = kermeta.standard.helper.IntegerWrapper.equals(self.size(), collection.size());&#xA;&#xA;&#x9;if( idIfCond_340 ) {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> selfIterator = self.iterator();&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> collectionIterator = collection.iterator();&#xA;&#xA;&#x9;java.lang.Boolean difference = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.helper.IntegerWrapper.equals(1, 1);&#xA;&#x9;java.lang.Boolean idLoopCond_341 = false;&#xA;&#x9;while( !idLoopCond_341 ) {&#xA;&#x9;idLoopCond_341 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.or(selfIterator.isOff(), collectionIterator.isOff()), difference);&#xA;&#x9;if ( idLoopCond_341 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_342 = false;&#xA;&#x9;idIfCond_342 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(selfIterator.next(), collectionIterator.next()));&#xA;&#xA;&#x9;if( idIfCond_342 ) {&#xA;&#xA;&#x9;difference = true;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;isEqual = kermeta.standard.helper.BooleanWrapper.not(difference);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = isEqual;&#xA;&#xA;return result;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.OrderedCollection"/>
    <sMParameters name="element" type="kermeta.language.structure.Object"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
</simk:SIMKModel>
