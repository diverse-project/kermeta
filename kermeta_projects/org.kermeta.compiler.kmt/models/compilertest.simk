<?xml version="1.0" encoding="ASCII"?>
<simk:SIMKModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:simk="http://www.kermeta.org/simk">
  <sMContexts staticMethods="//@staticMethods.0" qualifiedNameFinalPackage="fsm.runner">
    <sMClass name="FSM__reset__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.1" qualifiedNameFinalPackage="fsm.runner">
    <sMClass name="FSM__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.2" qualifiedNameFinalPackage="fsm.runner">
    <sMClass name="Transition__fire__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.3" qualifiedNameFinalPackage="simpletest.runner">
    <sMClass name="Main__main__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.4" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__loadWithoutChecking__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.5" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__save__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.6" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__findDanglingModelElements__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.7" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__load__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.8" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__instances__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.9" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Resource__normalizedUri__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.10" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="EMFResource__loadWithoutChecking__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.11" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="EMFResource__save__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.12" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="EMFResource__saveAndValidateWithEMF__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.13" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="EMFResource__load__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.14" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="Repository__findDanglingModelElements__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.15" qualifiedNameFinalPackage="kermeta.persistence.runner">
    <sMClass name="DanglingDiagnostic__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.16" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Fallible__getLogKermeta__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.17" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Fallible__number__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.18" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Fallible__mustStop__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.19" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Log__newAttempt__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.20" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Failure__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.21" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Error__makeTearDown__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.22" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Error__makeSetUp__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.23" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Error__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.24" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Test__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.25" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="Test__initLog__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.26" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestSuite__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.27" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__raiseIfHasFailures__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.28" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__setUp__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.29" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__getLog__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.30" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__getTestMethodName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.31" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.32" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.33" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestCase__tearDown__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.34" qualifiedNameFinalPackage="kermeta.kunit.runner">
    <sMClass name="TestRunner__printTestResult__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.35" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Void__isVoid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.36" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Void__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.37 //@staticMethods.38 //@staticMethods.39 //@staticMethods.40 //@staticMethods.41 //@staticMethods.42 //@staticMethods.43 //@staticMethods.44 //@staticMethods.45 //@staticMethods.46 //@staticMethods.47 //@staticMethods.48 //@staticMethods.49 //@staticMethods.50 //@staticMethods.51 //@staticMethods.52 //@staticMethods.53 //@staticMethods.54 //@staticMethods.55 //@staticMethods.56 //@staticMethods.57 //@staticMethods.58 //@staticMethods.59 //@staticMethods.60 //@staticMethods.61 //@staticMethods.62" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="BooleanWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.63 //@staticMethods.64 //@staticMethods.65 //@staticMethods.66 //@staticMethods.67 //@staticMethods.68 //@staticMethods.69 //@staticMethods.70 //@staticMethods.71 //@staticMethods.72 //@staticMethods.73 //@staticMethods.74 //@staticMethods.75 //@staticMethods.76 //@staticMethods.77 //@staticMethods.78 //@staticMethods.79 //@staticMethods.80 //@staticMethods.81 //@staticMethods.82 //@staticMethods.83 //@staticMethods.84 //@staticMethods.85 //@staticMethods.86 //@staticMethods.87 //@staticMethods.88 //@staticMethods.89 //@staticMethods.90 //@staticMethods.91 //@staticMethods.92 //@staticMethods.93 //@staticMethods.94" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="IntegerWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.95 //@staticMethods.96 //@staticMethods.97 //@staticMethods.98 //@staticMethods.99 //@staticMethods.100 //@staticMethods.101 //@staticMethods.102 //@staticMethods.103 //@staticMethods.104 //@staticMethods.105 //@staticMethods.106 //@staticMethods.107 //@staticMethods.108 //@staticMethods.109 //@staticMethods.110 //@staticMethods.111 //@staticMethods.112 //@staticMethods.113 //@staticMethods.114 //@staticMethods.115 //@staticMethods.116 //@staticMethods.117 //@staticMethods.118 //@staticMethods.119 //@staticMethods.120 //@staticMethods.121 //@staticMethods.122 //@staticMethods.123 //@staticMethods.124 //@staticMethods.125" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="RealWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.126 //@staticMethods.127 //@staticMethods.128 //@staticMethods.129 //@staticMethods.130 //@staticMethods.131 //@staticMethods.132 //@staticMethods.133 //@staticMethods.134 //@staticMethods.135 //@staticMethods.136 //@staticMethods.137 //@staticMethods.138 //@staticMethods.139 //@staticMethods.140 //@staticMethods.141 //@staticMethods.142 //@staticMethods.143 //@staticMethods.144 //@staticMethods.145 //@staticMethods.146 //@staticMethods.147 //@staticMethods.148 //@staticMethods.149 //@staticMethods.150" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="CharacterWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.151 //@staticMethods.152 //@staticMethods.153 //@staticMethods.154 //@staticMethods.155 //@staticMethods.156 //@staticMethods.157 //@staticMethods.158 //@staticMethods.159 //@staticMethods.160 //@staticMethods.161 //@staticMethods.162 //@staticMethods.163 //@staticMethods.164 //@staticMethods.165 //@staticMethods.166 //@staticMethods.167 //@staticMethods.168 //@staticMethods.169 //@staticMethods.170 //@staticMethods.171 //@staticMethods.172 //@staticMethods.173 //@staticMethods.174 //@staticMethods.175 //@staticMethods.176 //@staticMethods.177 //@staticMethods.178 //@staticMethods.179 //@staticMethods.180 //@staticMethods.181 //@staticMethods.182 //@staticMethods.183 //@staticMethods.184 //@staticMethods.185 //@staticMethods.186 //@staticMethods.187 //@staticMethods.188 //@staticMethods.189" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="StringWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.190" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__one__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.191" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__sum__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.192" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.193" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.194" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__isEmpty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.195" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.196" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__any__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.197" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__empty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.198" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__isNotEmpty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.199" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__iterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.200" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__size__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.201" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.202" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Collection__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.203" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.204" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__flatten__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.205" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.206" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.207" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Set__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.208" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.209" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__flatten__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.210" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.211" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.212" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Bag__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.213" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="OrderedCollection__last__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.214" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="OrderedCollection__first__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.215" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Iterator__hasNext__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.216" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Iterator__next__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.217" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="Iterator__isOff__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.218" qualifiedNameFinalPackage="kermeta.standard.runner">
    <sMClass name="UnknownJavaObject__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.219" qualifiedNameFinalPackage="kermeta.language.runner">
    <sMClass name="ReflectiveCollection__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.220" qualifiedNameFinalPackage="kermeta.language.runner">
    <sMClass name="ReflectiveSequence__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.221" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__getMetaClass__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.222" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__isFrozen__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.223" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__checkInvariants__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.224" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__hashcode__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.225" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__isVoid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.226" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__freeze__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.227" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__oid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.228" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__container__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.229" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__containingResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.230" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__checkAllInvariants__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.231" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Object__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.232" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="NamedElement__qualifiedName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.233" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Class___new__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.234" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="Class__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.235" qualifiedNameFinalPackage="kermeta.language.structure.runner">
    <sMClass name="ModelType___new__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.236" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="StringBuffer__length__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.237" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="StringBuffer__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.238" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.239" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__values__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.240" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__keys__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.241" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__keyIterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.242" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__valueIterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.243" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Hashtable__size__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.244" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Stack__pop__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.245" qualifiedNameFinalPackage="kermeta.utils.runner">
    <sMClass name="Stack__peek__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.246" qualifiedNameFinalPackage="kermeta.interpreter.runner">
    <sMClass name="DynamicExpression__initializeDefaults__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.247 //@staticMethods.249" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="SetSuper" usages="Super"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.248" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="CollectionSuper" usages="Super"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.250 //@staticMethods.251" qualifiedNameFinalPackage="kermeta.standard.helper">
    <sMClass name="OrderedCollectionSuper" usages="Super"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.252 //@staticMethods.253 //@staticMethods.254" qualifiedNameFinalPackage="kermeta.language.helper">
    <sMClass name="ReflectiveCollectionSuper" usages="Super"/>
  </sMContexts>
  <staticMethods name="main" sMContext="//@sMContexts.0" body="&#xA;fsm.FSM anExec = (fsm.FSM) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;fsm.FSM&quot;);&#xA;anExec.reset();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.1" body="&#xA;fsm.FSM anExec = (fsm.FSM) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;fsm.FSM&quot;);&#xA;anExec.run();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.2" body="&#xA;fsm.Transition anExec = (fsm.Transition) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;fsm.Transition&quot;);&#xA;anExec.fire();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.3" body="&#xA;simpletest.Main anExec = (simpletest.Main) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;simpletest.Main&quot;);&#xA;anExec.main();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.4" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.loadWithoutChecking();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.5" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.save();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.6" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.findDanglingModelElements();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.7" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.load();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.8" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.instances();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.9" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Resource&quot;);&#xA;anExec.normalizedUri();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.10" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFResource&quot;);&#xA;anExec.loadWithoutChecking();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.11" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFResource&quot;);&#xA;anExec.save();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.12" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFResource&quot;);&#xA;anExec.saveAndValidateWithEMF();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.13" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFResource&quot;);&#xA;anExec.load();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.14" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.Repository&quot;);&#xA;anExec.findDanglingModelElements();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.15" body="&#xA;kermeta.persistence.DanglingDiagnostic anExec = (kermeta.persistence.DanglingDiagnostic) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.DanglingDiagnostic&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.16" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Fallible&quot;);&#xA;anExec.getLogKermeta();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.17" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Fallible&quot;);&#xA;anExec.number();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.18" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Fallible&quot;);&#xA;anExec.mustStop();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.19" body="&#xA;kermeta.kunit.Log anExec = (kermeta.kunit.Log) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Log&quot;);&#xA;anExec.newAttempt();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.20" body="&#xA;kermeta.kunit.Failure anExec = (kermeta.kunit.Failure) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Failure&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.21" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Error&quot;);&#xA;anExec.makeTearDown();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.22" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Error&quot;);&#xA;anExec.makeSetUp();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.23" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Error&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.24" body="&#xA;kermeta.kunit.Test anExec = (kermeta.kunit.Test) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Test&quot;);&#xA;anExec.run();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.25" body="&#xA;kermeta.kunit.Test anExec = (kermeta.kunit.Test) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Test&quot;);&#xA;anExec.initLog();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.26" body="&#xA;kermeta.kunit.TestSuite anExec = (kermeta.kunit.TestSuite) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestSuite&quot;);&#xA;anExec.run();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.27" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.raiseIfHasFailures();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.28" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.setUp();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.29" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.getLog();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.30" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.getTestMethodName();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.31" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.32" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.run();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.33" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestCase&quot;);&#xA;anExec.tearDown();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.34" body="&#xA;kermeta.kunit.TestRunner anExec = (kermeta.kunit.TestRunner) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestRunner&quot;);&#xA;anExec.printTestResult();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.35" body="&#xA;kermeta.standard.Void anExec = (kermeta.standard.Void) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Void&quot;);&#xA;anExec.isVoid();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.36" body="&#xA;kermeta.standard.Void anExec = (kermeta.standard.Void) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Void&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="not" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.not(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="xor" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.and(self, kermeta.standard.helper.BooleanWrapper.not(other)), kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(self), other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_98 = false;&#xA;&#x9;idIfCond_98 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Boolean&quot;));&#xA;&#xA;&#x9;if( idIfCond_98 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="or" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.or(self, other);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="nand" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="implies" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other)), self));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.37" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_99 = false;&#xA;&#x9;idIfCond_99 = self;&#xA;&#xA;&#x9;if( idIfCond_99 ) {&#xA;&#xA;&#x9;result = &quot;true&quot;;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = &quot;false&quot;;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="and" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.and(self, other);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.37" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.37" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.37" body="&#xA;&#x9;java.lang.Boolean idIfCond_100 = false;&#xA;&#x9;idIfCond_100 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_100 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.37" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_101 = false;&#xA;&#x9;idIfCond_101 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_101 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft33 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_102 = false;&#xA;&#x9;while( !idLoopCond_102 ) {&#xA;&#x9;idLoopCond_102 = it_ft33.isOff();&#xA;&#x9;if ( idLoopCond_102 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft33.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_103 = false;&#xA;&#x9;idIfCond_103 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_103 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_104 = false;&#xA;&#x9;idIfCond_104 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_104 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_105 = false;&#xA;&#x9;idIfCond_105 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_105 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.37" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.37" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.37" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.37" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.37" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.37" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.37" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.37" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_106 = false;&#xA;&#x9;idIfCond_106 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_106 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.37" body="&#xA;&#x9;java.lang.Boolean idIfCond_107 = false;&#xA;&#x9;idIfCond_107 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_107 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft34 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_108 = false;&#xA;&#x9;while( !idLoopCond_108 ) {&#xA;&#x9;idLoopCond_108 = it_ft34.isOff();&#xA;&#x9;if ( idLoopCond_108 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft34.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_109 = false;&#xA;&#x9;idIfCond_109 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_109 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_110 = false;&#xA;&#x9;idIfCond_110 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_110 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft35 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_111 = false;&#xA;&#x9;while( !idLoopCond_111 ) {&#xA;&#x9;idLoopCond_111 = it_ft35.isOff();&#xA;&#x9;if ( idLoopCond_111 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft35.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.38" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_112 = false;&#xA;&#x9;idIfCond_112 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_112 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_113 = false;&#xA;&#x9;idIfCond_113 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_113 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_114 = false;&#xA;&#x9;idIfCond_114 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_114 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLower(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLower(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="mult" sMContext="//@sMContexts.38" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_115 = false;&#xA;&#x9;idIfCond_115 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_115 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.times(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="minus" sMContext="//@sMContexts.38" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_116 = false;&#xA;&#x9;idIfCond_116 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_116 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.minus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_117 = false;&#xA;&#x9;idIfCond_117 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_117 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_118 = false;&#xA;&#x9;idIfCond_118 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_118 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="mod" sMContext="//@sMContexts.38" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_119 = false;&#xA;&#x9;idIfCond_119 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_119 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DivisionByZero&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_120 = false;&#xA;&#x9;idIfCond_120 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_120 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.mod(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="div" sMContext="//@sMContexts.38" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_121 = false;&#xA;&#x9;idIfCond_121 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_121 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DivisionByZero&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_122 = false;&#xA;&#x9;idIfCond_122 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_122 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.div(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toReal" sMContext="//@sMContexts.38" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toReal(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.38" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_123 = false;&#xA;&#x9;idIfCond_123 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_123 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_124 = false;&#xA;&#x9;idIfCond_124 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_124 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.NotComparableException&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_125 = false;&#xA;&#x9;idIfCond_125 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_125 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_126 = false;&#xA;&#x9;idIfCond_126 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_126 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreater(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreater(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_127 = false;&#xA;&#x9;idIfCond_127 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_127 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_128 = false;&#xA;&#x9;idIfCond_128 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_128 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreaterOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreaterOrEqual(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="uminus" sMContext="//@sMContexts.38" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.minus(0, self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.38" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toString(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_129 = false;&#xA;&#x9;idIfCond_129 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_129 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_130 = false;&#xA;&#x9;idIfCond_130 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_130 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLowerOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLowerOrEqual(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.38" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.38" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.38" body="&#xA;&#x9;java.lang.Boolean idIfCond_131 = false;&#xA;&#x9;idIfCond_131 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_131 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.38" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_132 = false;&#xA;&#x9;idIfCond_132 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_132 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft36 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_133 = false;&#xA;&#x9;while( !idLoopCond_133 ) {&#xA;&#x9;idLoopCond_133 = it_ft36.isOff();&#xA;&#x9;if ( idLoopCond_133 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft36.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_134 = false;&#xA;&#x9;idIfCond_134 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_134 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_135 = false;&#xA;&#x9;idIfCond_135 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_135 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_136 = false;&#xA;&#x9;idIfCond_136 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_136 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.38" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.38" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.38" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.38" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.38" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.38" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.38" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.38" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_137 = false;&#xA;&#x9;idIfCond_137 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_137 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.38" body="&#xA;&#x9;java.lang.Boolean idIfCond_138 = false;&#xA;&#x9;idIfCond_138 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_138 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft37 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_139 = false;&#xA;&#x9;while( !idLoopCond_139 ) {&#xA;&#x9;idLoopCond_139 = it_ft37.isOff();&#xA;&#x9;if ( idLoopCond_139 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft37.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_140 = false;&#xA;&#x9;idIfCond_140 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_140 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_141 = false;&#xA;&#x9;idIfCond_141 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_141 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft38 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_142 = false;&#xA;&#x9;while( !idLoopCond_142 ) {&#xA;&#x9;idLoopCond_142 = it_ft38.isOff();&#xA;&#x9;if ( idLoopCond_142 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft38.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.39" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_143 = false;&#xA;&#x9;idIfCond_143 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_143 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="mult" sMContext="//@sMContexts.39" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_144 = false;&#xA;&#x9;idIfCond_144 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_144 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.times(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="minus" sMContext="//@sMContexts.39" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_145 = false;&#xA;&#x9;idIfCond_145 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_145 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.minus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toInteger" sMContext="//@sMContexts.39" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.RealUtil.toInteger(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="uminus" sMContext="//@sMContexts.39" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.minus(kermeta.standard.helper.IntegerWrapper.toReal(0), self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_146 = false;&#xA;&#x9;idIfCond_146 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_146 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_147 = false;&#xA;&#x9;idIfCond_147 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_147 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.RealUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="div" sMContext="//@sMContexts.39" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_148 = false;&#xA;&#x9;idIfCond_148 = kermeta.standard.helper.RealWrapper.equals(other, kermeta.standard.helper.IntegerWrapper.toReal(0));&#xA;&#xA;&#x9;if( idIfCond_148 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DivisionByZero&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_149 = false;&#xA;&#x9;idIfCond_149 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_149 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.div(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.39" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.RealUtil.toString(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.39" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_150 = false;&#xA;&#x9;idIfCond_150 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_150 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_151 = false;&#xA;&#x9;idIfCond_151 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_151 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.NotComparableException&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.RealUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.39" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.39" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.39" body="&#xA;&#x9;java.lang.Boolean idIfCond_152 = false;&#xA;&#x9;idIfCond_152 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_152 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.39" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_153 = false;&#xA;&#x9;idIfCond_153 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_153 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft39 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_154 = false;&#xA;&#x9;while( !idLoopCond_154 ) {&#xA;&#x9;idLoopCond_154 = it_ft39.isOff();&#xA;&#x9;if ( idLoopCond_154 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft39.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_155 = false;&#xA;&#x9;idIfCond_155 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_155 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_156 = false;&#xA;&#x9;idIfCond_156 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_156 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_157 = false;&#xA;&#x9;idIfCond_157 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_157 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.39" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.39" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.39" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.39" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.39" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.39" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.39" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.39" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_158 = false;&#xA;&#x9;idIfCond_158 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_158 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.39" body="&#xA;&#x9;java.lang.Boolean idIfCond_159 = false;&#xA;&#x9;idIfCond_159 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_159 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft40 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_160 = false;&#xA;&#x9;while( !idLoopCond_160 ) {&#xA;&#x9;idLoopCond_160 = it_ft40.isOff();&#xA;&#x9;if ( idLoopCond_160 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft40.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_161 = false;&#xA;&#x9;idIfCond_161 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_161 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_162 = false;&#xA;&#x9;idIfCond_162 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_162 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft41 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_163 = false;&#xA;&#x9;while( !idLoopCond_163 ) {&#xA;&#x9;idLoopCond_163 = it_ft41.isOff();&#xA;&#x9;if ( idLoopCond_163 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft41.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_164 = false;&#xA;&#x9;idIfCond_164 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Character&quot;));&#xA;&#xA;&#x9;if( idIfCond_164 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.40" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_165 = false;&#xA;&#x9;idIfCond_165 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_165 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.CallOnVoidTarget&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.40" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.toString(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.40" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.40" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.40" body="&#xA;&#x9;java.lang.Boolean idIfCond_166 = false;&#xA;&#x9;idIfCond_166 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_166 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.40" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_167 = false;&#xA;&#x9;idIfCond_167 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_167 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft42 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_168 = false;&#xA;&#x9;while( !idLoopCond_168 ) {&#xA;&#x9;idLoopCond_168 = it_ft42.isOff();&#xA;&#x9;if ( idLoopCond_168 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft42.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_169 = false;&#xA;&#x9;idIfCond_169 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_169 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_170 = false;&#xA;&#x9;idIfCond_170 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_170 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_171 = false;&#xA;&#x9;idIfCond_171 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_171 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.40" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.40" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.40" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.40" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.40" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.40" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.40" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_172 = false;&#xA;&#x9;idIfCond_172 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_172 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.40" body="&#xA;&#x9;java.lang.Boolean idIfCond_173 = false;&#xA;&#x9;idIfCond_173 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_173 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft43 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_174 = false;&#xA;&#x9;while( !idLoopCond_174 ) {&#xA;&#x9;idLoopCond_174 = it_ft43.isOff();&#xA;&#x9;if ( idLoopCond_174 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft43.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_175 = false;&#xA;&#x9;idIfCond_175 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_175 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_176 = false;&#xA;&#x9;idIfCond_176 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_176 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft44 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_177 = false;&#xA;&#x9;while( !idLoopCond_177 ) {&#xA;&#x9;idLoopCond_177 = it_ft44.isOff();&#xA;&#x9;if ( idLoopCond_177 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft44.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.40" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.41" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_178 = false;&#xA;&#x9;idIfCond_178 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_178 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, kermeta.standard.helper.StringWrapper.toString(other));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="append" sMContext="//@sMContexts.41" body="&#xA;&#x9;java.lang.Boolean idIfCond_179 = false;&#xA;&#x9;idIfCond_179 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_179 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.CallOnVoidTarget&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.StringUtil.append(self, other);&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_180 = false;&#xA;&#x9;idIfCond_180 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.String&quot;));&#xA;&#xA;&#x9;if( idIfCond_180 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="toReal" sMContext="//@sMContexts.41" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toReal(self);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_181 = false;&#xA;&#x9;idIfCond_181 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(result);&#xA;&#xA;&#x9;if( idIfCond_181 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringFormatException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toBoolean" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toBoolean(self);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_182 = false;&#xA;&#x9;idIfCond_182 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(result);&#xA;&#xA;&#x9;if( idIfCond_182 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringFormatException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.41" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_183 = false;&#xA;&#x9;idIfCond_183 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_183 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.CallOnVoidTarget&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="contains" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.contains(self, str1);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="indexOf" sMContext="//@sMContexts.41" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.indexOf(self, str);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="elementAt" sMContext="//@sMContexts.41" body="&#xA;java.lang.Character result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_184 = false;&#xA;&#x9;idIfCond_184 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, kermeta.standard.helper.IntegerWrapper.minus(kermeta.standard.helper.StringWrapper.size(self), 1)));&#xA;&#xA;&#x9;if( idIfCond_184 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringIndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Character) org.kermeta.compil.runtime.helper.basetypes.StringUtil.elementAt(self, index);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Character"/>
  </staticMethods>
  <staticMethods name="size" sMContext="//@sMContexts.41" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.size(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="replace" sMContext="//@sMContexts.41" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.replace(self, str1, str2);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMParameters name="str2" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toUpperCase" sMContext="//@sMContexts.41" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toUpperCase(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toInteger" sMContext="//@sMContexts.41" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toInteger(self);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_185 = false;&#xA;&#x9;idIfCond_185 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(result);&#xA;&#xA;&#x9;if( idIfCond_185 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringFormatException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toLowerCase" sMContext="//@sMContexts.41" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toLowerCase(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="substring" sMContext="//@sMContexts.41" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_186 = false;&#xA;&#x9;idIfCond_186 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(startIndex, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(startIndex, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(subStringSize, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(subStringSize, startIndex));&#xA;&#xA;&#x9;if( idIfCond_186 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.substring(self, startIndex, subStringSize);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringIndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="startIndex" type="java.lang.Integer"/>
    <sMParameters name="subStringSize" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.41" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = self;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="split" sMContext="//@sMContexts.41" body="&#xA;kermeta.standard.OrderedSet&lt;java.lang.String> result = null;&#xA;&#xA;&#x9;result = (kermeta.standard.OrderedSet&lt;java.lang.String>) org.kermeta.compil.runtime.helper.basetypes.StringUtil.split(self, delimiter);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="delimiter" type="java.lang.String"/>
    <sMReturn type="kermeta.standard.OrderedSet&lt;java.lang.String>"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.41" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.41" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.41" body="&#xA;&#x9;java.lang.Boolean idIfCond_187 = false;&#xA;&#x9;idIfCond_187 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_187 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.41" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_188 = false;&#xA;&#x9;idIfCond_188 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_188 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft45 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_189 = false;&#xA;&#x9;while( !idLoopCond_189 ) {&#xA;&#x9;idLoopCond_189 = it_ft45.isOff();&#xA;&#x9;if ( idLoopCond_189 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft45.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_190 = false;&#xA;&#x9;idIfCond_190 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_190 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_191 = false;&#xA;&#x9;idIfCond_191 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_191 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_192 = false;&#xA;&#x9;idIfCond_192 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_192 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.41" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.41" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.41" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.41" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.41" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.41" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.41" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_193 = false;&#xA;&#x9;idIfCond_193 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_193 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.41" body="&#xA;&#x9;java.lang.Boolean idIfCond_194 = false;&#xA;&#x9;idIfCond_194 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_194 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft46 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_195 = false;&#xA;&#x9;while( !idLoopCond_195 ) {&#xA;&#x9;idLoopCond_195 = it_ft46.isOff();&#xA;&#x9;if ( idLoopCond_195 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft46.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_196 = false;&#xA;&#x9;idIfCond_196 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_196 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_197 = false;&#xA;&#x9;idIfCond_197 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_197 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft47 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_198 = false;&#xA;&#x9;while( !idLoopCond_198 ) {&#xA;&#x9;idLoopCond_198 = it_ft47.isOff();&#xA;&#x9;if ( idLoopCond_198 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft47.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.41" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="main" sMContext="//@sMContexts.42" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.one();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.43" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.sum();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.44" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.45" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.46" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.isEmpty();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.47" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.48" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.any();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.49" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.empty();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.50" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.isNotEmpty();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.51" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.iterator();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.52" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.size();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.53" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.54" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Collection&quot;);&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.55" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.56" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.flatten();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.57" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.58" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.59" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&quot;);&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.60" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.61" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.flatten();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.62" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.63" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.64" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&quot;);&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.65" body="&#xA;kermeta.standard.OrderedCollection anExec = (kermeta.standard.OrderedCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedCollection&quot;);&#xA;anExec.last();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.66" body="&#xA;kermeta.standard.OrderedCollection anExec = (kermeta.standard.OrderedCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedCollection&quot;);&#xA;anExec.first();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.67" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Iterator&quot;);&#xA;anExec.hasNext();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.68" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Iterator&quot;);&#xA;anExec.next();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.69" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Iterator&quot;);&#xA;anExec.isOff();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.70" body="&#xA;kermeta.standard.UnknownJavaObject anExec = (kermeta.standard.UnknownJavaObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.UnknownJavaObject&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.71" body="&#xA;kermeta.language.ReflectiveCollection anExec = (kermeta.language.ReflectiveCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.ReflectiveCollection&quot;);&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.72" body="&#xA;kermeta.language.ReflectiveSequence anExec = (kermeta.language.ReflectiveSequence) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.ReflectiveSequence&quot;);&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.73" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.getMetaClass();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.74" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.isFrozen();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.75" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.checkInvariants();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.76" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.hashcode();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.77" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.isVoid();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.78" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.freeze();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.79" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.oid();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.80" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.container();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.81" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.containingResource();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.82" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.checkAllInvariants();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.83" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Object&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.84" body="&#xA;kermeta.language.structure.NamedElement anExec = (kermeta.language.structure.NamedElement) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.NamedElement&quot;);&#xA;anExec.qualifiedName();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.85" body="&#xA;kermeta.language.structure.Class anExec = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Class&quot;);&#xA;anExec._new();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.86" body="&#xA;kermeta.language.structure.Class anExec = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.Class&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.87" body="&#xA;kermeta.language.structure.ModelType anExec = (kermeta.language.structure.ModelType) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.language.structure.ModelType&quot;);&#xA;anExec._new();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.88" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.StringBuffer&quot;);&#xA;anExec.length();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.89" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.StringBuffer&quot;);&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.90" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.91" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.values();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.92" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.keys();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.93" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.keyIterator();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.94" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.valueIterator();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.95" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&quot;);&#xA;anExec.size();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.96" body="&#xA;kermeta.utils.Stack anExec = (kermeta.utils.Stack) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Stack&quot;);&#xA;anExec.pop();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.97" body="&#xA;kermeta.utils.Stack anExec = (kermeta.utils.Stack) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Stack&quot;);&#xA;anExec.peek();&#xA;" usages="Runner"/>
  <staticMethods name="main" sMContext="//@sMContexts.98" body="&#xA;kermeta.interpreter.DynamicExpression anExec = (kermeta.interpreter.DynamicExpression) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.interpreter.DynamicExpression&quot;);&#xA;anExec.initializeDefaults();&#xA;" usages="Runner"/>
  <staticMethods name="super_remove" sMContext="//@sMContexts.99" body="&#xA;&#x9;G elem = null;&#xA;//Beginning of the Inlining of the function type: detect&#xA;&#xA;G result_ft65 = null;&#xA;&#xA;&#x9;G elem_ft65 = null;&#xA;&#xA;&#x9;result_ft65 = null;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft65 = self.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_301 = false;&#xA;&#x9;while( !idLoopCond_301 ) {&#xA;&#x9;idLoopCond_301 = kermeta.standard.helper.BooleanWrapper.or(it_ft65.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(result_ft65, null));&#xA;&#x9;if ( idLoopCond_301 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft65 = it_ft65.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_302 = false;&#xA;//Beginning of the Inlining of the lambda expression: detector&#xA;G e = elem_ft65;&#xA;&#xA;&#x9;idIfCond_302 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(e, element);&#xA;//End of the Inlining of the lambda expression: detector&#xA;&#xA;&#xA;&#x9;if( idIfCond_302 ) {&#xA;&#xA;&#x9;result_ft65 = elem_ft65;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;//callElement&#xA;elem = result_ft65;&#xA;//End of the Inlining of the function type: detect&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_303 = false;&#xA;&#x9;idIfCond_303 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(elem, null);&#xA;&#xA;&#x9;if( idIfCond_303 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(self, elem);&#xA;}&#xA;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Set"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_add" sMContext="//@sMContexts.100" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.add(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Collection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_add" sMContext="//@sMContexts.99" body="&#xA;&#x9;java.lang.Boolean idIfCond_304 = false;&#xA;&#x9;idIfCond_304 = kermeta.standard.helper.BooleanWrapper.not(self.contains(element));&#xA;&#xA;&#x9;if( idIfCond_304 ) {&#xA;&#xA;&#x9;kermeta.standard.helper.CollectionSuper.super_add(self, element);&#xA;}&#xA;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Set"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_addAt" sMContext="//@sMContexts.101" body="&#xA;&#x9;java.lang.Boolean idIfCond_305 = false;&#xA;&#x9;idIfCond_305 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, self.size()));&#xA;&#xA;&#x9;if( idIfCond_305 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.addAt(self, index, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.OrderedCollection"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_equals" sMContext="//@sMContexts.101" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean isEqual = false;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_306 = false;&#xA;&#x9;idIfCond_306 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(element));&#xA;&#xA;&#x9;if( idIfCond_306 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_307 = false;&#xA;&#x9;idIfCond_307 = org.kermeta.compil.runtime.helper.language.TypeUtil.isInstance(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.OrderedCollection&lt;G>&quot;), element);&#xA;&#xA;&#x9;if( idIfCond_307 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;G> collection = null;&#xA;&#xA;&#x9;collection = (kermeta.standard.Collection&lt;G>) element;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_308 = false;&#xA;&#x9;idIfCond_308 = kermeta.standard.helper.IntegerWrapper.equals(self.size(), collection.size());&#xA;&#xA;&#x9;if( idIfCond_308 ) {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> selfIterator = self.iterator();&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> collectionIterator = collection.iterator();&#xA;&#xA;&#x9;java.lang.Boolean difference = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.helper.IntegerWrapper.equals(1, 1);&#xA;&#x9;java.lang.Boolean idLoopCond_309 = false;&#xA;&#x9;while( !idLoopCond_309 ) {&#xA;&#x9;idLoopCond_309 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.or(selfIterator.isOff(), collectionIterator.isOff()), difference);&#xA;&#x9;if ( idLoopCond_309 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_310 = false;&#xA;&#x9;idIfCond_310 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(selfIterator.next(), collectionIterator.next()));&#xA;&#xA;&#x9;if( idIfCond_310 ) {&#xA;&#xA;&#x9;difference = true;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;isEqual = kermeta.standard.helper.BooleanWrapper.not(difference);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = isEqual;&#xA;&#xA;return result;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.OrderedCollection"/>
    <sMParameters name="element" type="kermeta.language.structure.Object"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="super_clear" sMContext="//@sMContexts.102" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.clear(self);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_remove" sMContext="//@sMContexts.102" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.remove(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="super_add" sMContext="//@sMContexts.102" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.add(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </staticMethods>
</simk:SIMKModel>
