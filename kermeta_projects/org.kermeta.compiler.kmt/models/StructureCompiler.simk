<?xml version="1.0" encoding="ASCII"?>
<simk:SIMKModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:simk="http://www.kermeta.org/simk">
  <sMContexts staticMethods="//@staticMethods.0 //@staticMethods.1 //@staticMethods.2 //@staticMethods.3 //@staticMethods.4 //@staticMethods.5 //@staticMethods.6 //@staticMethods.7 //@staticMethods.8 //@staticMethods.9 //@staticMethods.10 //@staticMethods.11 //@staticMethods.12 //@staticMethods.13 //@staticMethods.14 //@staticMethods.15 //@staticMethods.16 //@staticMethods.17 //@staticMethods.18 //@staticMethods.19 //@staticMethods.20 //@staticMethods.21 //@staticMethods.22 //@staticMethods.23 //@staticMethods.24 //@staticMethods.25">
    <sMClass name="BooleanWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.26 //@staticMethods.27 //@staticMethods.28 //@staticMethods.29 //@staticMethods.30 //@staticMethods.31 //@staticMethods.32 //@staticMethods.33 //@staticMethods.34 //@staticMethods.35 //@staticMethods.36 //@staticMethods.37 //@staticMethods.38 //@staticMethods.39 //@staticMethods.40 //@staticMethods.41 //@staticMethods.42 //@staticMethods.43 //@staticMethods.44 //@staticMethods.45 //@staticMethods.46 //@staticMethods.47 //@staticMethods.48 //@staticMethods.49 //@staticMethods.50 //@staticMethods.51 //@staticMethods.52 //@staticMethods.53 //@staticMethods.54 //@staticMethods.55 //@staticMethods.56 //@staticMethods.57">
    <sMClass name="IntegerWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.58 //@staticMethods.59 //@staticMethods.60 //@staticMethods.61 //@staticMethods.62 //@staticMethods.63 //@staticMethods.64 //@staticMethods.65 //@staticMethods.66 //@staticMethods.67 //@staticMethods.68 //@staticMethods.69 //@staticMethods.70 //@staticMethods.71 //@staticMethods.72 //@staticMethods.73 //@staticMethods.74 //@staticMethods.75 //@staticMethods.76 //@staticMethods.77 //@staticMethods.78 //@staticMethods.79 //@staticMethods.80 //@staticMethods.81 //@staticMethods.82 //@staticMethods.83 //@staticMethods.84">
    <sMClass name="RealWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.85 //@staticMethods.86 //@staticMethods.87 //@staticMethods.88 //@staticMethods.89 //@staticMethods.90 //@staticMethods.91 //@staticMethods.92 //@staticMethods.93 //@staticMethods.94 //@staticMethods.95 //@staticMethods.96 //@staticMethods.97 //@staticMethods.98 //@staticMethods.99 //@staticMethods.100 //@staticMethods.101 //@staticMethods.102 //@staticMethods.103 //@staticMethods.104 //@staticMethods.105">
    <sMClass name="CharacterWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts staticMethods="//@staticMethods.106 //@staticMethods.107 //@staticMethods.108 //@staticMethods.109 //@staticMethods.110 //@staticMethods.111 //@staticMethods.112 //@staticMethods.113 //@staticMethods.114 //@staticMethods.115 //@staticMethods.116 //@staticMethods.117 //@staticMethods.118 //@staticMethods.119 //@staticMethods.120 //@staticMethods.121 //@staticMethods.122 //@staticMethods.123 //@staticMethods.124 //@staticMethods.125 //@staticMethods.126 //@staticMethods.127 //@staticMethods.128 //@staticMethods.129 //@staticMethods.130 //@staticMethods.131 //@staticMethods.132 //@staticMethods.133 //@staticMethods.134 //@staticMethods.135 //@staticMethods.136 //@staticMethods.137 //@staticMethods.138 //@staticMethods.139 //@staticMethods.140 //@staticMethods.141 //@staticMethods.142 //@staticMethods.143">
    <sMClass name="StringWrapper" usages="Wrapper"/>
  </sMContexts>
  <staticMethods name="not" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.not(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="xor" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.and(self, kermeta.standard.helper.BooleanWrapper.not(other)), kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(self), other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_549 = false;&#xA;&#x9;idIfCond_549 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Boolean&quot;));&#xA;&#xA;&#x9;if( idIfCond_549 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="or" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.or(self, other);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="implies" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other)), self));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="nand" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.0" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_550 = false;&#xA;&#x9;idIfCond_550 = self;&#xA;&#xA;&#x9;if( idIfCond_550 ) {&#xA;&#xA;&#x9;result = &quot;true&quot;;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = &quot;false&quot;;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="and" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.and(self, other);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.0" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.0" body="&#xA;&#x9;java.lang.Boolean idIfCond_551 = false;&#xA;&#x9;idIfCond_551 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_551 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.0" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_552 = false;&#xA;&#x9;idIfCond_552 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_552 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft118 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_553 = false;&#xA;&#x9;while( !idLoopCond_553 ) {&#xA;&#x9;idLoopCond_553 = it_ft118.isOff();&#xA;&#x9;if ( idLoopCond_553 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft118.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_554 = false;&#xA;&#x9;idIfCond_554 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_554 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_555 = false;&#xA;&#x9;idIfCond_555 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_555 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_556 = false;&#xA;&#x9;idIfCond_556 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_556 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.0" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.0" body="&#xA;&#x9;java.lang.Boolean idIfCond_557 = false;&#xA;&#x9;idIfCond_557 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_557 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft119 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_558 = false;&#xA;&#x9;while( !idLoopCond_558 ) {&#xA;&#x9;idLoopCond_558 = it_ft119.isOff();&#xA;&#x9;if ( idLoopCond_558 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft119.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_559 = false;&#xA;&#x9;idIfCond_559 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_559 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_560 = false;&#xA;&#x9;idIfCond_560 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_560 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft120 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_561 = false;&#xA;&#x9;while( !idLoopCond_561 ) {&#xA;&#x9;idLoopCond_561 = it_ft120.isOff();&#xA;&#x9;if ( idLoopCond_561 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft120.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.0" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.0" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.0" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.0" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.0" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.0" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.0" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.0" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_562 = false;&#xA;&#x9;idIfCond_562 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_562 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isLower" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_563 = false;&#xA;&#x9;idIfCond_563 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_563 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_564 = false;&#xA;&#x9;idIfCond_564 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_564 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLower(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLower(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_565 = false;&#xA;&#x9;idIfCond_565 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_565 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="mult" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_566 = false;&#xA;&#x9;idIfCond_566 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_566 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.times(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="minus" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_567 = false;&#xA;&#x9;idIfCond_567 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_567 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.minus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_568 = false;&#xA;&#x9;idIfCond_568 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_568 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_569 = false;&#xA;&#x9;idIfCond_569 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_569 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="mod" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_570 = false;&#xA;&#x9;idIfCond_570 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_570 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DivisionByZero&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_571 = false;&#xA;&#x9;idIfCond_571 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_571 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.mod(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="div" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_572 = false;&#xA;&#x9;idIfCond_572 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_572 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DivisionByZero&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_573 = false;&#xA;&#x9;idIfCond_573 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_573 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.div(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toReal" sMContext="//@sMContexts.1" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toReal(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_574 = false;&#xA;&#x9;idIfCond_574 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_574 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_575 = false;&#xA;&#x9;idIfCond_575 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_575 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.NotComparableException&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isGreater" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_576 = false;&#xA;&#x9;idIfCond_576 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_576 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_577 = false;&#xA;&#x9;idIfCond_577 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_577 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreater(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreater(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isGreaterOrEqual" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_578 = false;&#xA;&#x9;idIfCond_578 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_578 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_579 = false;&#xA;&#x9;idIfCond_579 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_579 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreaterOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreaterOrEqual(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="uminus" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.minus(0, self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.1" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toString(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="isLowerOrEqual" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_580 = false;&#xA;&#x9;idIfCond_580 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_580 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_581 = false;&#xA;&#x9;idIfCond_581 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_581 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLowerOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLowerOrEqual(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.1" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.1" body="&#xA;&#x9;java.lang.Boolean idIfCond_582 = false;&#xA;&#x9;idIfCond_582 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_582 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.1" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_583 = false;&#xA;&#x9;idIfCond_583 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_583 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft121 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_584 = false;&#xA;&#x9;while( !idLoopCond_584 ) {&#xA;&#x9;idLoopCond_584 = it_ft121.isOff();&#xA;&#x9;if ( idLoopCond_584 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft121.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_585 = false;&#xA;&#x9;idIfCond_585 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_585 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_586 = false;&#xA;&#x9;idIfCond_586 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_586 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_587 = false;&#xA;&#x9;idIfCond_587 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_587 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.1" body="&#xA;&#x9;java.lang.Boolean idIfCond_588 = false;&#xA;&#x9;idIfCond_588 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_588 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft122 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_589 = false;&#xA;&#x9;while( !idLoopCond_589 ) {&#xA;&#x9;idLoopCond_589 = it_ft122.isOff();&#xA;&#x9;if ( idLoopCond_589 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft122.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_590 = false;&#xA;&#x9;idIfCond_590 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_590 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_591 = false;&#xA;&#x9;idIfCond_591 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_591 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft123 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_592 = false;&#xA;&#x9;while( !idLoopCond_592 ) {&#xA;&#x9;idLoopCond_592 = it_ft123.isOff();&#xA;&#x9;if ( idLoopCond_592 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft123.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.1" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.1" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.1" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.1" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.1" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.1" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.1" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.1" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_593 = false;&#xA;&#x9;idIfCond_593 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_593 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.2" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_594 = false;&#xA;&#x9;idIfCond_594 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_594 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="mult" sMContext="//@sMContexts.2" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_595 = false;&#xA;&#x9;idIfCond_595 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_595 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.times(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="minus" sMContext="//@sMContexts.2" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_596 = false;&#xA;&#x9;idIfCond_596 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_596 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.minus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toInteger" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.RealUtil.toInteger(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="uminus" sMContext="//@sMContexts.2" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.minus(kermeta.standard.helper.IntegerWrapper.toReal(0), self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_597 = false;&#xA;&#x9;idIfCond_597 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_597 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_598 = false;&#xA;&#x9;idIfCond_598 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_598 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.RealUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="div" sMContext="//@sMContexts.2" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_599 = false;&#xA;&#x9;idIfCond_599 = kermeta.standard.helper.RealWrapper.equals(other, kermeta.standard.helper.IntegerWrapper.toReal(0));&#xA;&#xA;&#x9;if( idIfCond_599 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DivisionByZero&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_600 = false;&#xA;&#x9;idIfCond_600 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_600 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.VoidOperandError&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.RealUtil.div(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.2" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.RealUtil.toString(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_601 = false;&#xA;&#x9;idIfCond_601 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_601 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_602 = false;&#xA;&#x9;idIfCond_602 = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_602 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.NotComparableException&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.RealUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.2" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.2" body="&#xA;&#x9;java.lang.Boolean idIfCond_603 = false;&#xA;&#x9;idIfCond_603 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_603 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.2" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_604 = false;&#xA;&#x9;idIfCond_604 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_604 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft124 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_605 = false;&#xA;&#x9;while( !idLoopCond_605 ) {&#xA;&#x9;idLoopCond_605 = it_ft124.isOff();&#xA;&#x9;if ( idLoopCond_605 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft124.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_606 = false;&#xA;&#x9;idIfCond_606 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_606 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_607 = false;&#xA;&#x9;idIfCond_607 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_607 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_608 = false;&#xA;&#x9;idIfCond_608 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_608 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.2" body="&#xA;&#x9;java.lang.Boolean idIfCond_609 = false;&#xA;&#x9;idIfCond_609 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_609 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft125 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_610 = false;&#xA;&#x9;while( !idLoopCond_610 ) {&#xA;&#x9;idLoopCond_610 = it_ft125.isOff();&#xA;&#x9;if ( idLoopCond_610 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft125.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_611 = false;&#xA;&#x9;idIfCond_611 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_611 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_612 = false;&#xA;&#x9;idIfCond_612 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_612 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft126 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_613 = false;&#xA;&#x9;while( !idLoopCond_613 ) {&#xA;&#x9;idLoopCond_613 = it_ft126.isOff();&#xA;&#x9;if ( idLoopCond_613 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft126.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.2" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.2" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.2" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.2" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.2" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.2" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.2" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.2" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_614 = false;&#xA;&#x9;idIfCond_614 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_614 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_615 = false;&#xA;&#x9;idIfCond_615 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Character&quot;));&#xA;&#xA;&#x9;if( idIfCond_615 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.3" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.toString(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.3" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_616 = false;&#xA;&#x9;idIfCond_616 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_616 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.CallOnVoidTarget&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.3" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.3" body="&#xA;&#x9;java.lang.Boolean idIfCond_617 = false;&#xA;&#x9;idIfCond_617 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_617 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.3" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_618 = false;&#xA;&#x9;idIfCond_618 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_618 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft127 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_619 = false;&#xA;&#x9;while( !idLoopCond_619 ) {&#xA;&#x9;idLoopCond_619 = it_ft127.isOff();&#xA;&#x9;if ( idLoopCond_619 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft127.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_620 = false;&#xA;&#x9;idIfCond_620 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_620 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_621 = false;&#xA;&#x9;idIfCond_621 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_621 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_622 = false;&#xA;&#x9;idIfCond_622 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_622 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.3" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.3" body="&#xA;&#x9;java.lang.Boolean idIfCond_623 = false;&#xA;&#x9;idIfCond_623 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_623 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft128 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_624 = false;&#xA;&#x9;while( !idLoopCond_624 ) {&#xA;&#x9;idLoopCond_624 = it_ft128.isOff();&#xA;&#x9;if ( idLoopCond_624 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft128.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_625 = false;&#xA;&#x9;idIfCond_625 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_625 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_626 = false;&#xA;&#x9;idIfCond_626 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_626 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft129 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_627 = false;&#xA;&#x9;while( !idLoopCond_627 ) {&#xA;&#x9;idLoopCond_627 = it_ft129.isOff();&#xA;&#x9;if ( idLoopCond_627 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft129.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.3" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.3" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.3" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.3" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.3" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.3" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.3" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.3" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_628 = false;&#xA;&#x9;idIfCond_628 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_628 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="plus" sMContext="//@sMContexts.4" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_629 = false;&#xA;&#x9;idIfCond_629 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_629 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, kermeta.standard.helper.StringWrapper.toString(other));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="append" sMContext="//@sMContexts.4" body="&#xA;&#x9;java.lang.Boolean idIfCond_630 = false;&#xA;&#x9;idIfCond_630 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_630 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.CallOnVoidTarget&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.StringUtil.append(self, other);&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="getPropertyInfos" sMContext="//@sMContexts.4" body="&#xA;kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String> result = null;&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;java.lang.String> set_infos = ((kermeta.standard.OrderedSet&lt;java.lang.String>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;java.lang.String>&quot;));&#xA;&#xA;&#x9;kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String> map_infos = ((kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String>&quot;));&#xA;&#xA;&#x9;set_infos = kermeta.standard.helper.StringWrapper.split(self, &quot; &quot;);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft130 = set_infos.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_631 = false;&#xA;&#x9;while( !idLoopCond_631 ) {&#xA;&#x9;idLoopCond_631 = it_ft130.isOff();&#xA;&#x9;if ( idLoopCond_631 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String i = it_ft130.next();&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;java.lang.String> tmp_set_infos = kermeta.standard.helper.StringWrapper.split(i, &quot;=&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_632 = false;&#xA;&#x9;idIfCond_632 = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(tmp_set_infos.size(), 2);&#xA;&#xA;&#x9;if( idIfCond_632 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_633 = false;&#xA;&#x9;idIfCond_633 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(tmp_set_infos.elementAt(0)));&#xA;&#xA;&#x9;if( idIfCond_633 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_634 = false;&#xA;&#x9;idIfCond_634 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(tmp_set_infos.elementAt(1))), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(tmp_set_infos.elementAt(1), &quot;&quot;));&#xA;&#xA;&#x9;if( idIfCond_634 ) {&#xA;&#xA;&#x9;map_infos.put(tmp_set_infos.elementAt(0), tmp_set_infos.elementAt(1));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;result = map_infos;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String>"/>
  </staticMethods>
  <staticMethods name="equals" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_635 = false;&#xA;&#x9;idIfCond_635 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.String&quot;));&#xA;&#xA;&#x9;if( idIfCond_635 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.equals(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="toReal" sMContext="//@sMContexts.4" body="&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toReal(self);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_636 = false;&#xA;&#x9;idIfCond_636 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(result);&#xA;&#xA;&#x9;if( idIfCond_636 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringFormatException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Double"/>
  </staticMethods>
  <staticMethods name="toBoolean" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toBoolean(self);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_637 = false;&#xA;&#x9;idIfCond_637 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(result);&#xA;&#xA;&#x9;if( idIfCond_637 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringFormatException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="replaceExtension" sMContext="//@sMContexts.4" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = &quot;&quot;;&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;java.lang.String> set_str = kermeta.standard.helper.StringWrapper.split(kermeta.standard.helper.StringWrapper.replace(self, &quot;.&quot;, &quot;%&quot;), &quot;%&quot;);&#xA;&#xA;&#x9;java.lang.Integer inc_seg = 0;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft131 = set_str.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_638 = false;&#xA;&#x9;while( !idLoopCond_638 ) {&#xA;&#x9;idLoopCond_638 = it_ft131.isOff();&#xA;&#x9;if ( idLoopCond_638 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String seg = it_ft131.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_639 = false;&#xA;&#x9;idIfCond_639 = kermeta.standard.helper.IntegerWrapper.isLower(inc_seg, kermeta.standard.helper.IntegerWrapper.minus(set_str.size(), 1));&#xA;&#xA;&#x9;if( idIfCond_639 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(result, seg), &quot;.&quot;);&#xA;}&#xA;&#xA;&#xA;&#x9;inc_seg = kermeta.standard.helper.IntegerWrapper.plus(inc_seg, 1);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(result, new_extension);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="new_extension" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="contains" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.StringUtil.contains(self, str1);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="compareTo" sMContext="//@sMContexts.4" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_640 = false;&#xA;&#x9;idIfCond_640 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(other);&#xA;&#xA;&#x9;if( idIfCond_640 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.CallOnVoidTarget&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.compareTo(self, other);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="indexOf" sMContext="//@sMContexts.4" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.indexOf(self, str);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="elementAt" sMContext="//@sMContexts.4" body="&#xA;java.lang.Character result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_641 = false;&#xA;&#x9;idIfCond_641 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, kermeta.standard.helper.IntegerWrapper.minus(kermeta.standard.helper.StringWrapper.size(self), 1)));&#xA;&#xA;&#x9;if( idIfCond_641 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringIndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Character) org.kermeta.compil.runtime.helper.basetypes.StringUtil.elementAt(self, index);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Character"/>
  </staticMethods>
  <staticMethods name="size" sMContext="//@sMContexts.4" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.size(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="capName" sMContext="//@sMContexts.4" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.toUpperCase(kermeta.standard.helper.StringWrapper.substring(self, 0, 1)), kermeta.standard.helper.StringWrapper.substring(self, 1, kermeta.standard.helper.StringWrapper.size(self)));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="replace" sMContext="//@sMContexts.4" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.replace(self, str1, str2);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMParameters name="str2" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toUpperCase" sMContext="//@sMContexts.4" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toUpperCase(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toInteger" sMContext="//@sMContexts.4" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toInteger(self);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_642 = false;&#xA;&#x9;idIfCond_642 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(result);&#xA;&#xA;&#x9;if( idIfCond_642 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringFormatException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="toLowerCase" sMContext="//@sMContexts.4" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.toLowerCase(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="substring" sMContext="//@sMContexts.4" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_643 = false;&#xA;&#x9;idIfCond_643 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(startIndex, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(startIndex, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(subStringSize, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(subStringSize, startIndex));&#xA;&#xA;&#x9;if( idIfCond_643 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringUtil.substring(self, startIndex, subStringSize);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.StringIndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="startIndex" type="java.lang.Integer"/>
    <sMParameters name="subStringSize" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="toString" sMContext="//@sMContexts.4" body="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = self;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </staticMethods>
  <staticMethods name="split" sMContext="//@sMContexts.4" body="&#xA;kermeta.standard.OrderedSet&lt;java.lang.String> result = null;&#xA;&#xA;&#x9;result = (kermeta.standard.OrderedSet&lt;java.lang.String>) org.kermeta.compil.runtime.helper.basetypes.StringUtil.split(self, delimiter);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="delimiter" type="java.lang.String"/>
    <sMReturn type="kermeta.standard.OrderedSet&lt;java.lang.String>"/>
  </staticMethods>
  <staticMethods name="isKindOf" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="getMetaClass" sMContext="//@sMContexts.4" body="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self );&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </staticMethods>
  <staticMethods name="set" sMContext="//@sMContexts.4" body="&#xA;&#x9;java.lang.Boolean idIfCond_644 = false;&#xA;&#x9;idIfCond_644 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_644 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="checkInvariants" sMContext="//@sMContexts.4" body="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_645 = false;&#xA;&#x9;idIfCond_645 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_645 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft132 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_646 = false;&#xA;&#x9;while( !idLoopCond_646 ) {&#xA;&#x9;idLoopCond_646 = it_ft132.isOff();&#xA;&#x9;if ( idLoopCond_646 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft132.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_647 = false;&#xA;&#x9;idIfCond_647 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_647 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_648 = false;&#xA;&#x9;idIfCond_648 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_648 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_649 = false;&#xA;&#x9;idIfCond_649 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_649 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isVoid" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="oid" sMContext="//@sMContexts.4" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isInstanceOf" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName());&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="checkAllInvariants" sMContext="//@sMContexts.4" body="&#xA;&#x9;java.lang.Boolean idIfCond_650 = false;&#xA;&#x9;idIfCond_650 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(self, null);&#xA;&#xA;&#x9;if( idIfCond_650 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(self).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft133 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_651 = false;&#xA;&#x9;while( !idLoopCond_651 ) {&#xA;&#x9;idLoopCond_651 = it_ft133.isOff();&#xA;&#x9;if ( idLoopCond_651 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft133.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_652 = false;&#xA;&#x9;idIfCond_652 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_652 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_653 = false;&#xA;&#x9;idIfCond_653 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_653 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft134 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_654 = false;&#xA;&#x9;while( !idLoopCond_654 ) {&#xA;&#x9;idLoopCond_654 = it_ft134.isOff();&#xA;&#x9;if ( idLoopCond_654 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft134.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="isSet" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="get" sMContext="//@sMContexts.4" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="isFrozen" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="hashcode" sMContext="//@sMContexts.4" body="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </staticMethods>
  <staticMethods name="isNotEqual" sMContext="//@sMContexts.4" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </staticMethods>
  <staticMethods name="container" sMContext="//@sMContexts.4" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
  <staticMethods name="unset" sMContext="//@sMContexts.4" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="freeze" sMContext="//@sMContexts.4" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </staticMethods>
  <staticMethods name="containingResource" sMContext="//@sMContexts.4" body="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </staticMethods>
  <staticMethods name="asType" sMContext="//@sMContexts.4" body="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_655 = false;&#xA;&#x9;idIfCond_655 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_655 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </staticMethods>
</simk:SIMKModel>
