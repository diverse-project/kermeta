<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="ModelingUnit">
    <details key="require" value=""/>
    <details key="using" value="tests::one|kermeta::standard|kompose|ecore|decomposition|kermeta::utils|kermeta::io|kermeta::persistence|decomposition::oracle|ocompare|kermeta::language::structure|kermeta::language|kermeta::exceptions|kermeta::kunit|kermeta::ecore|kermeta|kermeta::interpreter|"/>
  </ecore:EAnnotation>
  <ecore:EAnnotation source="kermeta">
    <details key="executable" value="true"/>
  </ecore:EAnnotation>
  <ecore:EAnnotation source="kermeta">
    <details key="mainClass" value="tests::one::Main"/>
  </ecore:EAnnotation>
  <ecore:EAnnotation source="kermeta">
    <details key="mainOperation" value="main"/>
  </ecore:EAnnotation>
  <ecore:EAnnotation source="kermeta">
    <details key="executable" value="true"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="tests" nsURI="http://www.kermeta.org/decompose/test/kermeta_temp_uri"
      nsPrefix="">
    <eAnnotations source="kermeta">
      <details key="ecoreUri" value="http://www.kermeta.org/decompose/test"/>
    </eAnnotations>
    <eSubpackages name="one" nsURI="http://www.kermeta.org/decompose/test/one/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/decompose/test/one"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Main" eSuperTypes="#/8/language/structure/Object">
        <eOperations name="main">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.String toLoad = null;&#xA;&#xA;&#x9;toLoad = &quot;platform:/resource/fr.irisa.triskell.decompose.test/tests/one/initialA.ecore&quot;;&#xA;&#xA;&#x9;java.lang.String toSaveLeft = null;&#xA;&#xA;&#x9;toSaveLeft = &quot;platform:/resource/fr.irisa.triskell.decompose.test/tests/one/left&quot;;&#xA;&#xA;&#x9;java.lang.String toSaveRight = null;&#xA;&#xA;&#x9;toSaveRight = &quot;platform:/resource/fr.irisa.triskell.decompose.test/tests/one/right&quot;;&#xA;&#xA;&#x9;java.lang.String toSaveComposition = null;&#xA;&#xA;&#x9;toSaveComposition = &quot;platform:/resource/fr.irisa.triskell.decompose.test/tests/one/result&quot;;&#xA;&#xA;&#x9;java.lang.String extentionToSave = null;&#xA;&#xA;&#x9;extentionToSave = &quot;.ecore&quot;;&#xA;&#xA;&#x9;ecore.EcoreDecomposer decomposer = ((ecore.EcoreDecomposer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;ecore.EcoreDecomposer&quot;));&#xA;&#xA;&#x9;decomposition.KomposeEcoreFileBridge inputGenerator = ((decomposition.KomposeEcoreFileBridge) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.KomposeEcoreFileBridge&quot;));&#xA;&#xA;&#x9;decomposition.KomposeScriptBridge scriptGenerator = ((decomposition.KomposeScriptBridge) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.KomposeScriptBridge&quot;));&#xA;&#xA;&#x9;decomposition.oracle.OSupport oracleSupport = ((decomposition.oracle.OSupport) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.oracle.OSupport&quot;));&#xA;&#xA;&#x9;decomposition.KomposeScriptAll scriptAllGen = ((decomposition.KomposeScriptAll) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.KomposeScriptAll&quot;));&#xA;&#xA;&#x9;decomposition.oracle.OracleRunnerScript oracleGenerator = ((decomposition.oracle.OracleRunnerScript) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.oracle.OracleRunnerScript&quot;));&#xA;&#xA;&#x9;java.lang.String kompose_files = null;&#xA;&#xA;&#x9;kompose_files = &quot;platform:/resource/fr.irisa.triskell.decompose.test/tests/one/komposeComp.kompose&quot;;&#xA;&#xA;&#x9;java.lang.String kompose_scripts = null;&#xA;&#xA;&#x9;kompose_scripts = &quot;platform:/resource/fr.irisa.triskell.decompose.test/tests/one/scripts/komposelr_test&quot;;&#xA;&#xA;&#x9;java.lang.String kompose_scripts_ext = null;&#xA;&#xA;&#x9;kompose_scripts_ext = &quot;.kmt&quot;;&#xA;&#xA;&#x9;java.lang.String kompose_oracle_script = &quot;platform:/resource/fr.irisa.triskell.decompose.test/tests/one/scripts/oracleAll.kmt&quot;;&#xA;&#xA;&#x9;kompose.Mergeable oriModel = null;&#xA;&#xA;&#x9;oriModel = decomposer.loadModel(toLoad);&#xA;&#xA;&#x9;oracleSupport.initialize();&#xA;&#xA;&#x9;decomposer.initialize(oriModel);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(decomposer.getDependants()).add(&quot;EReference&quot;);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(decomposer.getDependants()).add(&quot;EAttribute&quot;);&#xA;&#xA;&#x9;decomposer.start();&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;java.lang.String> lefts = ((kermeta.standard.OrderedSet&lt;java.lang.String>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;java.lang.String>&quot;));&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;java.lang.String> rights = ((kermeta.standard.OrderedSet&lt;java.lang.String>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;java.lang.String>&quot;));&#xA;&#xA;&#x9;java.lang.Integer numeral = 0;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_1 = false;&#xA;&#x9;idIfCond_1 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(decomposer.getLeft()), null);&#xA;&#xA;&#x9;if( idIfCond_1 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kompose.Mergeable> it_ft1 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(decomposer.getLeft()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_2 = false;&#xA;&#x9;while( !idLoopCond_2 ) {&#xA;&#x9;idLoopCond_2 = it_ft1.isOff();&#xA;&#x9;if ( idLoopCond_2 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kompose.Mergeable l = it_ft1.next();&#xA;&#xA;&#x9;java.lang.String file = null;&#xA;&#xA;&#x9;file = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(toSaveLeft, kermeta.standard.helper.IntegerWrapper.toString(numeral)), extentionToSave);&#xA;&#xA;&#x9;lefts.add(file);&#xA;&#xA;&#x9;decomposer.saveModel(l, file);&#xA;&#xA;&#x9;numeral = kermeta.standard.helper.IntegerWrapper.plus(numeral, 1);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;numeral = 0;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_3 = false;&#xA;&#x9;idIfCond_3 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(decomposer.getRight()), null);&#xA;&#xA;&#x9;if( idIfCond_3 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kompose.Mergeable> it_ft2 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(decomposer.getRight()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_4 = false;&#xA;&#x9;while( !idLoopCond_4 ) {&#xA;&#x9;idLoopCond_4 = it_ft2.isOff();&#xA;&#x9;if ( idLoopCond_4 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kompose.Mergeable r = it_ft2.next();&#xA;&#xA;&#x9;java.lang.String file = null;&#xA;&#xA;&#x9;file = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(toSaveRight, kermeta.standard.helper.IntegerWrapper.toString(numeral)), extentionToSave);&#xA;&#xA;&#x9;rights.add(file);&#xA;&#xA;&#x9;decomposer.saveModel(r, file);&#xA;&#xA;&#x9;numeral = kermeta.standard.helper.IntegerWrapper.plus(numeral, 1);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;generating scripts&quot;);&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;java.lang.String> allScripts = ((kermeta.standard.OrderedSet&lt;java.lang.String>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;java.lang.String>&quot;));&#xA;&#xA;&#x9;kermeta.io.FileIO fileio = ((kermeta.io.FileIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.io.FileIO&quot;));&#xA;&#xA;&#x9;numeral = 0;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft3 = lefts.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_5 = false;&#xA;&#x9;while( !idLoopCond_5 ) {&#xA;&#x9;idLoopCond_5 = it_ft3.isOff();&#xA;&#x9;if ( idLoopCond_5 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String l = it_ft3.next();&#xA;&#xA;&#x9;java.lang.String r = rights.at(numeral);&#xA;&#xA;&#x9;java.lang.String resultFile = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(toSaveComposition, kermeta.standard.helper.IntegerWrapper.toString(numeral)), extentionToSave);&#xA;&#xA;&#x9;java.lang.String thisFile = kermeta.standard.helper.StringWrapper.plus(kompose_files, kermeta.standard.helper.IntegerWrapper.toString(numeral));&#xA;&#xA;&#x9;java.lang.String scriptFile = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kompose_scripts, kermeta.standard.helper.IntegerWrapper.toString(numeral)), kompose_scripts_ext);&#xA;&#xA;&#x9;java.lang.String inputStr = inputGenerator.generate(l, r, resultFile);&#xA;&#xA;&#x9;java.lang.String scriptStr = scriptGenerator.generate(numeral, thisFile);&#xA;&#xA;&#x9;allScripts.add(scriptFile);&#xA;&#xA;&#x9;oracleSupport.getSourceMapper().put(resultFile, toLoad);&#xA;&#xA;&#x9;java.lang.String matchFile = kermeta.standard.helper.StringWrapper.plus(resultFile, &quot;.match&quot;);&#xA;&#xA;&#x9;java.lang.String diffFile = kermeta.standard.helper.StringWrapper.plus(resultFile, &quot;.diff&quot;);&#xA;&#xA;&#x9;oracleSupport.getMatchResultMapper().put(resultFile, matchFile);&#xA;&#xA;&#x9;oracleSupport.getDiffResultMapper().put(resultFile, diffFile);&#xA;&#xA;&#x9;fileio.writeTextFile(thisFile, inputStr);&#xA;&#xA;&#x9;fileio.writeTextFile(scriptFile, scriptStr);&#xA;&#xA;&#x9;numeral = kermeta.standard.helper.IntegerWrapper.plus(numeral, 1);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;java.lang.String allScriptScr = scriptAllGen.generate(allScripts, numeral);&#xA;&#xA;&#x9;java.lang.String allScrFile = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kompose_scripts, &quot;all&quot;), kompose_scripts_ext);&#xA;&#xA;&#x9;fileio.writeTextFile(allScrFile, allScriptScr);&#xA;&#xA;&#x9;oracleSupport.setResultFile(kermeta.standard.helper.StringWrapper.plus(toLoad, &quot;.ocompare&quot;));&#xA;&#xA;&#x9;oracleSupport.doSave();&#xA;&#xA;&#x9;java.lang.String oracleScript = oracleGenerator.generate(oracleSupport.getResultFile());&#xA;&#xA;&#x9;java.lang.String oracleScriptFile = fileio.writeTextFile(kompose_oracle_script, oracleScript);&#xA;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EPackage name="ocompare" nsURI="http://www.kermeta.org/decompose/compare/kermeta_temp_uri"
      nsPrefix="">
    <eAnnotations source="kermeta">
      <details key="ecoreUri" value="http://www.kermeta.org/decompose/compare"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="CompareElement" eSuperTypes="#/8/language/structure/Object">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="matchURI" lowerBound="1"
          eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="originalURI" lowerBound="1"
          eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="diffURI" lowerBound="1"
          eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="resultURI" lowerBound="1"
          eType="#/9/EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Compare" eSuperTypes="#/8/language/structure/Object">
      <eStructuralFeatures xsi:type="ecore:EReference" name="toCompare" upperBound="-1"
          eType="#/6/CompareElement" containment="true"/>
    </eClassifiers>
  </ecore:EPackage>
  <ecore:EPackage name="decomposition" nsURI="http://www.kermeta.org/decomposer/kermeta_temp_uri"
      nsPrefix="">
    <eAnnotations source="kermeta">
      <details key="ecoreUri" value="http://www.kermeta.org/decomposer"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="KomposeEcoreFileBridge" eSuperTypes="#/8/language/structure/Object">
      <eOperations name="generate" eType="#/8/standard/JavaString">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;kermeta.utils.StringBuffer _res = ((kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.StringBuffer&quot;));&#xA;&#xA;&#x9;_res.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;ASCII\&quot;?>\n&lt;kompose:Composer xmi:version=\&quot;2.0\&quot; xmlns:xmi=\&quot;http://www.omg.org/XMI\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; xmlns:kompose=\&quot;http://www.kermeta.org/kompose\&quot; primaryModelURI=\&quot;&quot;);&#xA;&#xA;&#x9;_res.append(left);&#xA;&#xA;&#x9;_res.append(&quot;\&quot; aspectModelURI=\&quot;&quot;);&#xA;&#xA;&#x9;_res.append(right);&#xA;&#xA;&#x9;_res.append(&quot;\&quot; composedModelURI=\&quot;&quot;);&#xA;&#xA;&#x9;_res.append(mresult);&#xA;&#xA;&#x9;_res.append(&quot;\&quot;>\n&lt;/kompose:Composer>&quot;);&#xA;&#xA;&#x9;result = _res.toString();&#xA;&#xA;return result;&#xA;"/>
        </eAnnotations>
        <eParameters name="left" eType="#/8/standard/JavaString"/>
        <eParameters name="right" eType="#/8/standard/JavaString"/>
        <eParameters name="mresult" eType="#/8/standard/JavaString"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Decomposer" eSuperTypes="#/8/language/structure/Object">
      <eAnnotations source="kermeta">
        <details key="aspect" value="true"/>
      </eAnnotations>
      <eOperations name="getPropertyByContainement" eType="#/8/language/structure/Property">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;kermeta.language.structure.Property result = null;&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Property> properties = null;&#xA;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Property> result_ft4 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Property elem_ft4 = null;&#xA;&#xA;&#x9;result_ft4 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft4 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(container).getClassDefinition().getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_6 = false;&#xA;&#x9;while( !idLoopCond_6 ) {&#xA;&#x9;idLoopCond_6 = it_ft4.isOff();&#xA;&#x9;if ( idLoopCond_6 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft4 = it_ft4.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_7 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Property p = elem_ft4;&#xA;&#xA;&#x9;idIfCond_7 = kermeta.standard.helper.BooleanWrapper.not(p.getIsDerived());&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_7 ) {&#xA;&#xA;&#x9;result_ft4.add(elem_ft4);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;//callElement&#xA;properties = result_ft4;&#xA;//End of the Inlining of the function type: select&#xA;&#xA;&#xA;&#x9;result = null;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft5 = properties.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_8 = false;&#xA;&#x9;while( !idLoopCond_8 ) {&#xA;&#x9;idLoopCond_8 = it_ft5.isOff();&#xA;&#x9;if ( idLoopCond_8 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft5.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_9 = false;&#xA;&#x9;idIfCond_9 = kermeta.standard.helper.IntegerWrapper.equals(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_9 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_10 = false;&#xA;&#x9;idIfCond_10 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(contained, org.kermeta.compil.runtime.helper.language.ObjectUtil.get(container, p));&#xA;&#xA;&#x9;if( idIfCond_10 ) {&#xA;&#xA;&#x9;result = p;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objects = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(container, p);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft6 = objects.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_11 = false;&#xA;&#x9;while( !idLoopCond_11 ) {&#xA;&#x9;idLoopCond_11 = it_ft6.isOff();&#xA;&#x9;if ( idLoopCond_11 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object obj = it_ft6.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_12 = false;&#xA;&#x9;idIfCond_12 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(obj, contained);&#xA;&#xA;&#x9;if( idIfCond_12 ) {&#xA;&#xA;&#x9;result = p;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;return result;&#xA;"/>
        </eAnnotations>
        <eParameters name="container" eType="#/10/Mergeable"/>
        <eParameters name="contained" eType="#/10/Mergeable"/>
      </eOperations>
      <eOperations name="resouceContains" eType="#/8/standard/JavaBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_13 = false;&#xA;&#x9;idIfCond_13 = org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource(element).equals(this.getResource());&#xA;&#xA;&#x9;if( idIfCond_13 ) {&#xA;&#xA;&#x9;result = true;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
        </eAnnotations>
        <eParameters name="element" eType="#/8/language/structure/Object"/>
      </eOperations>
      <eOperations name="start">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;this.indexate(this.getOriginal());&#xA;&#xA;&#x9;this.createPlans();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;decomposition.DecompositionPlan> it_ft7 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;decomposition.DecompositionPlan>convertAsOrderedSet(this.getDecompositionPlans()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_14 = false;&#xA;&#x9;while( !idLoopCond_14 ) {&#xA;&#x9;idLoopCond_14 = it_ft7.isOff();&#xA;&#x9;if ( idLoopCond_14 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;decomposition.DecompositionPlan plan = it_ft7.next();&#xA;&#xA;&#x9;this.setCurrentPlan(plan);&#xA;&#xA;&#x9;this.decompose(null, this.getOriginal(), null, true);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="setResource">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;this.setResource(resource);&#xA;"/>
        </eAnnotations>
        <eParameters name="resource" eType="#/8/persistence/EMFResource"/>
      </eOperations>
      <eOperations name="recurseCombinatorics">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft8 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(plan.getKeys()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_15 = false;&#xA;&#x9;while( !idLoopCond_15 ) {&#xA;&#x9;idLoopCond_15 = it_ft8.isOff();&#xA;&#x9;if ( idLoopCond_15 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String key = it_ft8.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_16 = false;&#xA;&#x9;idIfCond_16 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getProcRKeys()).contains(key));&#xA;&#xA;&#x9;if( idIfCond_16 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getProcRKeys()).add(key);&#xA;&#xA;&#x9;decomposition.DecompositionPlan newPlanR = null;&#xA;&#xA;&#x9;newPlanR = this.clonePlan(plan);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(newPlanR.getKeys()).remove(key);&#xA;&#xA;&#x9;decomposition.AtomicPlanPart atomNewR = null;&#xA;&#xA;&#x9;atomNewR = newPlanR.getAtomicPlans().getValue(key);&#xA;&#xA;&#x9;atomNewR.setOperationType(decomposition.OperationType.getByName(&quot;ONESIDE&quot;));&#xA;&#xA;&#x9;atomNewR.setSide(true);&#xA;&#xA;&#x9;newPlanR.getAtomicPlans().put(key, atomNewR);&#xA;&#xA;&#x9;this.recurseCombinatorics(newPlanR);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_17 = false;&#xA;&#x9;idIfCond_17 = kermeta.standard.helper.BooleanWrapper.equals(newPlanR.getAtomicPlans().getValue(atomNewR.getInElement()).getSide(), true);&#xA;&#xA;&#x9;if( idIfCond_17 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_18 = false;&#xA;&#x9;idIfCond_18 = kermeta.standard.helper.IntegerWrapper.isGreater(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(atomNewR.getDependantOn()).size(), 0);&#xA;&#xA;&#x9;if( idIfCond_18 ) {&#xA;&#xA;&#x9;java.lang.Boolean onside = true;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft9 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(atomNewR.getDependantOn()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_19 = false;&#xA;&#x9;while( !idLoopCond_19 ) {&#xA;&#x9;idLoopCond_19 = it_ft9.isOff();&#xA;&#x9;if ( idLoopCond_19 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String dep = it_ft9.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(dep);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_20 = false;&#xA;&#x9;idIfCond_20 = newPlanR.getAtomicPlans().keys().contains(dep);&#xA;&#xA;&#x9;if( idIfCond_20 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_21 = false;&#xA;&#x9;idIfCond_21 = kermeta.standard.helper.BooleanWrapper.equals(newPlanR.getAtomicPlans().getValue(dep).getSide(), false);&#xA;&#xA;&#x9;if( idIfCond_21 ) {&#xA;&#xA;&#x9;onside = false;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_22 = false;&#xA;&#x9;idIfCond_22 = onside;&#xA;&#xA;&#x9;if( idIfCond_22 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;decomposition.DecompositionPlan>convertAsOrderedSet(this.getDecompositionPlans()).add(newPlanR);&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;decomposition.DecompositionPlan>convertAsOrderedSet(this.getDecompositionPlans()).add(newPlanR);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_23 = false;&#xA;&#x9;idIfCond_23 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getProcLKeys()).contains(key));&#xA;&#xA;&#x9;if( idIfCond_23 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getProcLKeys()).add(key);&#xA;&#xA;&#x9;decomposition.DecompositionPlan newPlanL = null;&#xA;&#xA;&#x9;newPlanL = this.clonePlan(plan);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(newPlanL.getKeys()).remove(key);&#xA;&#xA;&#x9;decomposition.AtomicPlanPart atomNewL = null;&#xA;&#xA;&#x9;atomNewL = newPlanL.getAtomicPlans().getValue(key);&#xA;&#xA;&#x9;atomNewL.setOperationType(decomposition.OperationType.getByName(&quot;ONESIDE&quot;));&#xA;&#xA;&#x9;atomNewL.setSide(false);&#xA;&#xA;&#x9;newPlanL.getAtomicPlans().put(key, atomNewL);&#xA;&#xA;&#x9;this.recurseCombinatorics(newPlanL);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;decomposition.DecompositionPlan>convertAsOrderedSet(this.getDecompositionPlans()).add(newPlanL);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_24 = false;&#xA;&#x9;idIfCond_24 = kermeta.standard.helper.BooleanWrapper.equals(newPlanL.getAtomicPlans().getValue(atomNewL.getInElement()).getSide(), false);&#xA;&#xA;&#x9;if( idIfCond_24 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_25 = false;&#xA;&#x9;idIfCond_25 = kermeta.standard.helper.IntegerWrapper.isGreater(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(atomNewL.getDependantOn()).size(), 0);&#xA;&#xA;&#x9;if( idIfCond_25 ) {&#xA;&#xA;&#x9;java.lang.Boolean onside = false;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft10 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(atomNewL.getDependantOn()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_26 = false;&#xA;&#x9;while( !idLoopCond_26 ) {&#xA;&#x9;idLoopCond_26 = it_ft10.isOff();&#xA;&#x9;if ( idLoopCond_26 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String dep = it_ft10.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(dep);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_27 = false;&#xA;&#x9;idIfCond_27 = newPlanL.getAtomicPlans().keys().contains(dep);&#xA;&#xA;&#x9;if( idIfCond_27 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_28 = false;&#xA;&#x9;idIfCond_28 = kermeta.standard.helper.BooleanWrapper.equals(newPlanL.getAtomicPlans().getValue(dep).getSide(), true);&#xA;&#xA;&#x9;if( idIfCond_28 ) {&#xA;&#xA;&#x9;onside = false;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_29 = false;&#xA;&#x9;idIfCond_29 = onside;&#xA;&#xA;&#x9;if( idIfCond_29 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;decomposition.DecompositionPlan>convertAsOrderedSet(this.getDecompositionPlans()).add(newPlanL);&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;decomposition.DecompositionPlan>convertAsOrderedSet(this.getDecompositionPlans()).add(newPlanL);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;"/>
        </eAnnotations>
        <eParameters name="plan" eType="#/7/DecompositionPlan"/>
      </eOperations>
      <eOperations name="checkNonVoid">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Property> properties = null;&#xA;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Property> result_ft11 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Property elem_ft11 = null;&#xA;&#xA;&#x9;result_ft11 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft11 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element).getClassDefinition().getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_30 = false;&#xA;&#x9;while( !idLoopCond_30 ) {&#xA;&#x9;idLoopCond_30 = it_ft11.isOff();&#xA;&#x9;if ( idLoopCond_30 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft11 = it_ft11.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_31 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Property p = elem_ft11;&#xA;&#xA;&#x9;idIfCond_31 = kermeta.standard.helper.BooleanWrapper.not(p.getIsDerived());&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_31 ) {&#xA;&#xA;&#x9;result_ft11.add(elem_ft11);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;//callElement&#xA;properties = result_ft11;&#xA;//End of the Inlining of the function type: select&#xA;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft12 = properties.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_32 = false;&#xA;&#x9;while( !idLoopCond_32 ) {&#xA;&#x9;idLoopCond_32 = it_ft12.isOff();&#xA;&#x9;if ( idLoopCond_32 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft12.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_33 = false;&#xA;&#x9;idIfCond_33 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_33 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objects = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;java.lang.Integer pos = 0;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft13 = objects.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_34 = false;&#xA;&#x9;while( !idLoopCond_34 ) {&#xA;&#x9;idLoopCond_34 = it_ft13.isOff();&#xA;&#x9;if ( idLoopCond_34 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object o = it_ft13.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_35 = false;&#xA;&#x9;idIfCond_35 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(o, null);&#xA;&#xA;&#x9;if( idIfCond_35 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.errorln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;problem in property &quot;, p.getName()), &quot; from &quot;), op), &quot; element &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)));&#xA;&#xA;&#x9;objects.remove(null);&#xA;}&#xA;&#xA;&#xA;&#x9;pos = kermeta.standard.helper.IntegerWrapper.plus(pos, 1);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;"/>
        </eAnnotations>
        <eParameters name="element" eType="#/8/language/structure/Object"/>
        <eParameters name="op" eType="#/8/standard/JavaString"/>
      </eOperations>
      <eOperations name="initializePlans">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;decomposition.AtomicPlanPart atomic = null;&#xA;&#xA;&#x9;atomic = ((decomposition.AtomicPlanPart) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.AtomicPlanPart&quot;));&#xA;&#xA;&#x9;atomic.setElement(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element));&#xA;&#xA;&#x9;atomic.setOperationType(decomposition.OperationType.getByName(&quot;CLONE&quot;));&#xA;&#xA;&#x9;atomic.setInElement(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(superElement));&#xA;&#xA;&#x9;plan.getAtomicPlans().put(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element), atomic);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(plan.getKeys()).add(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element));&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Property> ppts = null;&#xA;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Property> result_ft14 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Property elem_ft14 = null;&#xA;&#xA;&#x9;result_ft14 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft14 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element).getClassDefinition().getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_36 = false;&#xA;&#x9;while( !idLoopCond_36 ) {&#xA;&#x9;idLoopCond_36 = it_ft14.isOff();&#xA;&#x9;if ( idLoopCond_36 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft14 = it_ft14.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_37 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Property p = elem_ft14;&#xA;&#xA;&#x9;idIfCond_37 = kermeta.standard.helper.BooleanWrapper.not(p.getIsDerived());&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_37 ) {&#xA;&#xA;&#x9;result_ft14.add(elem_ft14);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;//callElement&#xA;ppts = result_ft14;&#xA;//End of the Inlining of the function type: select&#xA;&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Property> properties = null;&#xA;&#xA;&#x9;properties = null;&#xA;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Property> result_ft15 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Property elem_ft15 = null;&#xA;&#xA;&#x9;result_ft15 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft15 = ppts.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_38 = false;&#xA;&#x9;while( !idLoopCond_38 ) {&#xA;&#x9;idLoopCond_38 = it_ft15.isOff();&#xA;&#x9;if ( idLoopCond_38 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft15 = it_ft15.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_39 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Property p = elem_ft15;&#xA;&#xA;&#x9;idIfCond_39 = org.kermeta.compil.runtime.helper.language.TypeUtil.isSuperTypeOf(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kompose.Mergeable&quot;), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;p.getType()&quot;));&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_39 ) {&#xA;&#xA;&#x9;result_ft15.add(elem_ft15);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_40 = false;&#xA;&#x9;idIfCond_40 = kermeta.standard.helper.IntegerWrapper.isGreater(properties.size(), 0);&#xA;&#xA;&#x9;if( idIfCond_40 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft16 = properties.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_41 = false;&#xA;&#x9;while( !idLoopCond_41 ) {&#xA;&#x9;idLoopCond_41 = it_ft16.isOff();&#xA;&#x9;if ( idLoopCond_41 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft16.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_42 = false;&#xA;&#x9;idIfCond_42 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_42 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objects = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft17 = objects.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_43 = false;&#xA;&#x9;while( !idLoopCond_43 ) {&#xA;&#x9;idLoopCond_43 = it_ft17.isOff();&#xA;&#x9;if ( idLoopCond_43 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object obj = it_ft17.next();&#xA;&#xA;&#x9;kompose.Mergeable mergeable = null;&#xA;&#xA;&#x9;mergeable = (kompose.Mergeable) obj;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_44 = false;&#xA;&#x9;idIfCond_44 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(mergeable, null), org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getObjectIndex()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)));&#xA;&#xA;&#x9;if( idIfCond_44 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_45 = false;&#xA;&#x9;idIfCond_45 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getDependants()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element).toString()));&#xA;&#xA;&#x9;if( idIfCond_45 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_46 = false;&#xA;&#x9;idIfCond_46 = kermeta.standard.helper.BooleanWrapper.not(plan.getAtomicPlans().containsKey(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)));&#xA;&#xA;&#x9;if( idIfCond_46 ) {&#xA;&#xA;&#x9;kompose.Mergeable container = null;&#xA;&#xA;&#x9;container = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(mergeable);&#xA;&#xA;&#x9;this.initializePlans(plan, mergeable, container, decomposition.OperationType.getByName(&quot;CLONE&quot;), null);&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_47 = false;&#xA;&#x9;idIfCond_47 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(plan.getKeys()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;&#xA;&#x9;if( idIfCond_47 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(atomic.getDependantOn()).add(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(atomic.getDependantOn()).add(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;&#xA;&#x9;kompose.Mergeable container = null;&#xA;&#xA;&#x9;container = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(mergeable);&#xA;&#xA;&#x9;this.initializePlans(plan, mergeable, container, decomposition.OperationType.getByName(&quot;CLONE&quot;), null);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;kompose.Mergeable mergeable = null;&#xA;&#xA;&#x9;mergeable = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_48 = false;&#xA;&#x9;idIfCond_48 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(mergeable, null), org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getObjectIndex()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)));&#xA;&#xA;&#x9;if( idIfCond_48 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_49 = false;&#xA;&#x9;idIfCond_49 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getDependants()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element).toString()));&#xA;&#xA;&#x9;if( idIfCond_49 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_50 = false;&#xA;&#x9;idIfCond_50 = kermeta.standard.helper.BooleanWrapper.not(plan.getAtomicPlans().containsKey(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)));&#xA;&#xA;&#x9;if( idIfCond_50 ) {&#xA;&#xA;&#x9;kompose.Mergeable container = null;&#xA;&#xA;&#x9;container = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(mergeable);&#xA;&#xA;&#x9;this.initializePlans(plan, mergeable, container, decomposition.OperationType.getByName(&quot;CLONE&quot;), null);&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_51 = false;&#xA;&#x9;idIfCond_51 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(plan.getKeys()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;&#xA;&#x9;if( idIfCond_51 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(atomic.getDependantOn()).add(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(atomic.getDependantOn()).add(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;&#xA;&#x9;kompose.Mergeable container = null;&#xA;&#xA;&#x9;container = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(mergeable);&#xA;&#xA;&#x9;this.initializePlans(plan, mergeable, container, decomposition.OperationType.getByName(&quot;CLONE&quot;), null);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;"/>
        </eAnnotations>
        <eParameters name="plan" eType="#/7/DecompositionPlan"/>
        <eParameters name="element" eType="#/10/Mergeable"/>
        <eParameters name="superElement" eType="#/10/Mergeable"/>
        <eParameters name="currentOp" eType="#/7/OperationType"/>
        <eParameters name="direction" eType="#/8/standard/JavaBoolean"/>
      </eOperations>
      <eOperations name="dependsOn" eType="#/9/EString">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.String result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="element" eType="#/9/EString"/>
      </eOperations>
      <eOperations name="clone">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_52 = false;&#xA;&#x9;idIfCond_52 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).contains(element));&#xA;&#xA;&#x9;if( idIfCond_52 ) {&#xA;&#xA;&#x9;java.lang.Boolean isDependable = false;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_53 = false;&#xA;&#x9;idIfCond_53 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getDependants()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element).getClassDefinition().getName());&#xA;&#xA;&#x9;if( idIfCond_53 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;dependable: &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element).getClassDefinition())));&#xA;&#xA;&#x9;isDependable = true;&#xA;}&#xA;&#xA;&#xA;&#x9;kompose.Mergeable left = null;&#xA;&#xA;&#x9;left = (kompose.Mergeable) ((org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element)) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element)&quot;));&#xA;&#xA;&#x9;kompose.Mergeable right = null;&#xA;&#xA;&#x9;right = (kompose.Mergeable) ((org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element)) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element)&quot;));&#xA;&#xA;&#x9;java.lang.Boolean doAll = true;&#xA;&#xA;&#x9;java.lang.Boolean direction = false;&#xA;&#xA;&#x9;java.lang.Boolean sdirection = false;&#xA;&#xA;&#x9;decomposition.TriContainer trtmp = ((decomposition.TriContainer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.TriContainer&quot;));&#xA;&#xA;&#x9;trtmp.setElement(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element));&#xA;&#xA;&#x9;trtmp.setLeft(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(left));&#xA;&#xA;&#x9;trtmp.setRight(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(right));&#xA;&#xA;&#x9;trtmp.setAppliedOperation(decomposition.OperationType.getByName(&quot;CLONE&quot;));&#xA;&#xA;&#x9;this.getCurrentPlan().getNewMapper().put(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(left), left);&#xA;&#xA;&#x9;this.getCurrentPlan().getNewMapper().put(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(right), right);&#xA;&#xA;&#x9;this.getCurrentPlan().getMapper().put(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element), trtmp);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).add(element);&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Property> properties = null;&#xA;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Property> result_ft18 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Property elem_ft18 = null;&#xA;&#xA;&#x9;result_ft18 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft18 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element).getClassDefinition().getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_54 = false;&#xA;&#x9;while( !idLoopCond_54 ) {&#xA;&#x9;idLoopCond_54 = it_ft18.isOff();&#xA;&#x9;if ( idLoopCond_54 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft18 = it_ft18.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_55 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Property p = elem_ft18;&#xA;&#xA;&#x9;idIfCond_55 = kermeta.standard.helper.BooleanWrapper.not(p.getIsDerived());&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_55 ) {&#xA;&#xA;&#x9;result_ft18.add(elem_ft18);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;//callElement&#xA;properties = result_ft18;&#xA;//End of the Inlining of the function type: select&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_56 = false;&#xA;&#x9;idIfCond_56 = isDependable;&#xA;&#xA;&#x9;if( idIfCond_56 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft19 = properties.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_57 = false;&#xA;&#x9;while( !idLoopCond_57 ) {&#xA;&#x9;idLoopCond_57 = it_ft19.isOff();&#xA;&#x9;if ( idLoopCond_57 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft19.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_58 = false;&#xA;&#x9;idIfCond_58 = org.kermeta.compil.runtime.helper.language.TypeUtil.isSuperTypeOf(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kompose.Mergeable&quot;), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;p.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_58 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_59 = false;&#xA;&#x9;idIfCond_59 = kermeta.standard.helper.IntegerWrapper.equals(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_59 ) {&#xA;&#xA;&#x9;kompose.Mergeable mergeable = null;&#xA;&#xA;&#x9;mergeable = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_60 = false;&#xA;&#x9;idIfCond_60 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getObjectIndex()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;&#xA;&#x9;if( idIfCond_60 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_61 = false;&#xA;&#x9;idIfCond_61 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).contains(mergeable);&#xA;&#xA;&#x9;if( idIfCond_61 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_62 = false;&#xA;&#x9;idIfCond_62 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getAppliedOperation(), decomposition.OperationType.getByName(&quot;ONESIDE&quot;));&#xA;&#xA;&#x9;if( idIfCond_62 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;element: &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot; must be sided because of: &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)));&#xA;&#xA;&#x9;this.getCurrentPlan().getNewMapper().remove(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(left));&#xA;&#xA;&#x9;this.getCurrentPlan().getNewMapper().remove(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(right));&#xA;&#xA;&#x9;this.getCurrentPlan().getMapper().remove(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).remove(element);&#xA;&#xA;&#x9;sdirection = this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getSide();&#xA;&#xA;&#x9;doAll = false;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objects = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft20 = objects.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_63 = false;&#xA;&#x9;while( !idLoopCond_63 ) {&#xA;&#x9;idLoopCond_63 = it_ft20.isOff();&#xA;&#x9;if ( idLoopCond_63 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object obj = it_ft20.next();&#xA;&#xA;&#x9;kompose.Mergeable mergeable = null;&#xA;&#xA;&#x9;mergeable = (kompose.Mergeable) obj;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_64 = false;&#xA;&#x9;idIfCond_64 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getObjectIndex()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;&#xA;&#x9;if( idIfCond_64 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_65 = false;&#xA;&#x9;idIfCond_65 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).contains(mergeable);&#xA;&#xA;&#x9;if( idIfCond_65 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_66 = false;&#xA;&#x9;idIfCond_66 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getAppliedOperation(), decomposition.OperationType.getByName(&quot;ONESIDE&quot;));&#xA;&#xA;&#x9;if( idIfCond_66 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;element: &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot; must be sided because of: &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)));&#xA;&#xA;&#x9;this.getCurrentPlan().getNewMapper().remove(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(left));&#xA;&#xA;&#x9;this.getCurrentPlan().getNewMapper().remove(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(right));&#xA;&#xA;&#x9;this.getCurrentPlan().getMapper().remove(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).remove(element);&#xA;&#xA;&#x9;sdirection = this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getSide();&#xA;&#xA;&#x9;doAll = false;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_67 = false;&#xA;&#x9;idIfCond_67 = doAll;&#xA;&#xA;&#x9;if( idIfCond_67 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft21 = properties.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_68 = false;&#xA;&#x9;while( !idLoopCond_68 ) {&#xA;&#x9;idLoopCond_68 = it_ft21.isOff();&#xA;&#x9;if ( idLoopCond_68 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft21.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_69 = false;&#xA;&#x9;idIfCond_69 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.TypeUtil.isSuperTypeOf(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kompose.Mergeable&quot;), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;p.getType()&quot;)));&#xA;&#xA;&#x9;if( idIfCond_69 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_70 = false;&#xA;&#x9;idIfCond_70 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_70 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objects = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objectsL = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(left, p);&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objectsR = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(right, p);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft22 = objects.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_71 = false;&#xA;&#x9;while( !idLoopCond_71 ) {&#xA;&#x9;idLoopCond_71 = it_ft22.isOff();&#xA;&#x9;if ( idLoopCond_71 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object obj = it_ft22.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_72 = false;&#xA;&#x9;idIfCond_72 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(obj, null);&#xA;&#xA;&#x9;if( idIfCond_72 ) {&#xA;&#xA;&#x9;objectsL.add(obj);&#xA;&#xA;&#x9;objectsR.add(obj);&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_73 = false;&#xA;&#x9;idIfCond_73 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p), null);&#xA;&#xA;&#x9;if( idIfCond_73 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(left, p, org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(right, p, org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_74 = false;&#xA;&#x9;idIfCond_74 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_74 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objects = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Object> result_ft24 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Object elem_ft24 = null;&#xA;&#xA;&#x9;result_ft24 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Object>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft24 = objects.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_79 = false;&#xA;&#x9;while( !idLoopCond_79 ) {&#xA;&#x9;idLoopCond_79 = it_ft24.isOff();&#xA;&#x9;if ( idLoopCond_79 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft24 = it_ft24.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_80 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Object obj = elem_ft24;&#xA;&#xA;&#x9;idIfCond_80 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(obj, null);&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_80 ) {&#xA;&#xA;&#x9;result_ft24.add(elem_ft24);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft23 = result_ft24.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_75 = false;&#xA;&#x9;while( !idLoopCond_75 ) {&#xA;&#x9;idLoopCond_75 = it_ft23.isOff();&#xA;&#x9;if ( idLoopCond_75 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object obj = it_ft23.next();&#xA;&#xA;&#x9;kompose.Mergeable mergeable = null;&#xA;&#xA;&#x9;mergeable = (kompose.Mergeable) obj;&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;kompose.Mergeable> ctnr = null;&#xA;&#xA;&#x9;kompose.Mergeable ctnr2 = null;&#xA;&#xA;&#x9;ctnr2 = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(mergeable);&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property> prpts = null;&#xA;&#xA;&#x9;ctnr = ((kermeta.standard.OrderedSet&lt;kompose.Mergeable>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;kompose.Mergeable>&quot;));&#xA;&#xA;&#x9;prpts = ((kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_76 = false;&#xA;&#x9;idIfCond_76 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(element, ctnr2);&#xA;&#xA;&#x9;if( idIfCond_76 ) {&#xA;&#xA;&#x9;ctnr.add(element);&#xA;&#xA;&#x9;ctnr.add(ctnr2);&#xA;&#xA;&#x9;prpts.add(p);&#xA;&#xA;&#x9;kermeta.language.structure.Property prpt = null;&#xA;&#xA;&#x9;prpt = this.getPropertyByContainement(ctnr2, mergeable);&#xA;&#xA;&#x9;prpts.add(prpt);&#xA;}&#xA; else {&#xA;&#xA;&#x9;ctnr.add(element);&#xA;&#xA;&#x9;prpts.add(p);&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_77 = false;&#xA;&#x9;idIfCond_77 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).contains(mergeable));&#xA;&#xA;&#x9;if( idIfCond_77 ) {&#xA;&#xA;&#x9;this.decompose(ctnr, mergeable, prpts, null);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objectsL = null;&#xA;&#xA;&#x9;objectsL = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(left, p);&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objectsR = null;&#xA;&#xA;&#x9;objectsR = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(right, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_78 = false;&#xA;&#x9;idIfCond_78 = kermeta.standard.helper.BooleanWrapper.not(objectsL.contains(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getLeft())));&#xA;&#xA;&#x9;if( idIfCond_78 ) {&#xA;&#xA;&#x9;objectsL.add(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getLeft()));&#xA;&#xA;&#x9;objectsR.add(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getRight()));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;kompose.Mergeable mergeable = null;&#xA;&#xA;&#x9;mergeable = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_81 = false;&#xA;&#x9;idIfCond_81 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(mergeable, null);&#xA;&#xA;&#x9;if( idIfCond_81 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_82 = false;&#xA;&#x9;idIfCond_82 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getObjectIndex()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;&#xA;&#x9;if( idIfCond_82 ) {&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;kompose.Mergeable> ctnr = null;&#xA;&#xA;&#x9;kompose.Mergeable ctnr2 = null;&#xA;&#xA;&#x9;ctnr2 = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(mergeable);&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property> prpts = null;&#xA;&#xA;&#x9;ctnr = ((kermeta.standard.OrderedSet&lt;kompose.Mergeable>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;kompose.Mergeable>&quot;));&#xA;&#xA;&#x9;prpts = ((kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_83 = false;&#xA;&#x9;idIfCond_83 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(element, ctnr2);&#xA;&#xA;&#x9;if( idIfCond_83 ) {&#xA;&#xA;&#x9;ctnr.add(element);&#xA;&#xA;&#x9;ctnr.add(ctnr2);&#xA;&#xA;&#x9;prpts.add(p);&#xA;&#xA;&#x9;prpts.add(this.getPropertyByContainement(ctnr2, mergeable));&#xA;}&#xA; else {&#xA;&#xA;&#x9;ctnr.add(element);&#xA;&#xA;&#x9;prpts.add(p);&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_84 = false;&#xA;&#x9;idIfCond_84 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).contains(mergeable));&#xA;&#xA;&#x9;if( idIfCond_84 ) {&#xA;&#xA;&#x9;this.decompose(ctnr, mergeable, prpts, null);&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(left, p, this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getLeft()));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(right, p, this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getRight()));&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_85 = false;&#xA;&#x9;idIfCond_85 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p), null);&#xA;&#xA;&#x9;if( idIfCond_85 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(left, p, org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(right, p, org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_86 = false;&#xA;&#x9;idIfCond_86 = parent == null;&#xA;&#xA;&#x9;if( idIfCond_86 ) {&#xA;&#xA;&#x9;this.checkNonVoid(left, &quot;clone left&quot;);&#xA;&#xA;&#x9;this.checkNonVoid(right, &quot;clone right&quot;);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getLeft()).add(left);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getRight()).add(right);&#xA;}&#xA; else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Property> result_ft26 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Property elem_ft26 = null;&#xA;&#xA;&#x9;result_ft26 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft26 = iproperty.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_89 = false;&#xA;&#x9;while( !idLoopCond_89 ) {&#xA;&#x9;idLoopCond_89 = it_ft26.isOff();&#xA;&#x9;if ( idLoopCond_89 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft26 = it_ft26.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_90 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Property p = elem_ft26;&#xA;&#xA;&#x9;idIfCond_90 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p, null);&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_90 ) {&#xA;&#xA;&#x9;result_ft26.add(elem_ft26);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft25 = result_ft26.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_87 = false;&#xA;&#x9;while( !idLoopCond_87 ) {&#xA;&#x9;idLoopCond_87 = it_ft25.isOff();&#xA;&#x9;if ( idLoopCond_87 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft25.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_88 = false;&#xA;&#x9;idIfCond_88 = kermeta.standard.helper.IntegerWrapper.equals(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_88 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;clone setting singleL : &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(left)), &quot; in &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getLeft()))), &quot;for &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())), &quot; original &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;on p: &quot;), p.getName()));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;clone setting singleR : &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(right)), &quot; in &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getRight()))), &quot;for &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())), &quot; original &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;on p: &quot;), p.getName()));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getLeft()), p, left);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getRight()), p, right);&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;clone setting multiple L : &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(left)), &quot; in &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getLeft()))), &quot;for &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())), &quot; original &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;on p: &quot;), p.getName()));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;clone setting multiple R : &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(right)), &quot; in &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getRight()))), &quot;for &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())), &quot; original &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;on p: &quot;), p.getName()));&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objectsL = null;&#xA;&#xA;&#x9;objectsL = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getLeft()), p);&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objectsR = null;&#xA;&#xA;&#x9;objectsR = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getRight()), p);&#xA;&#xA;&#x9;objectsL.add(left);&#xA;&#xA;&#x9;objectsR.add(right);&#xA;}&#xA;&#xA;&#xA;&#x9;parent.remove(parent.one());&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.BooleanWrapper.toString(doAll), &quot; siding element: &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)));&#xA;&#xA;&#x9;this.side(parent, element, iproperty, sdirection);&#xA;}&#xA;&#xA;}&#xA;&#xA;"/>
        </eAnnotations>
        <eParameters name="parent" eType="#/10/Mergeable"/>
        <eParameters name="element" eType="#/10/Mergeable"/>
        <eParameters name="iproperty" eType="#/8/language/structure/Property"/>
      </eOperations>
      <eOperations name="indexate">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_91 = false;&#xA;&#x9;idIfCond_91 = this.resouceContains(element);&#xA;&#xA;&#x9;if( idIfCond_91 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_92 = false;&#xA;&#x9;idIfCond_92 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getObjectIndex()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)));&#xA;&#xA;&#x9;if( idIfCond_92 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getObjectIndex()).add(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element));&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Property> properties = null;&#xA;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Property> result_ft27 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Property elem_ft27 = null;&#xA;&#xA;&#x9;result_ft27 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft27 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element).getClassDefinition().getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_93 = false;&#xA;&#x9;while( !idLoopCond_93 ) {&#xA;&#x9;idLoopCond_93 = it_ft27.isOff();&#xA;&#x9;if ( idLoopCond_93 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft27 = it_ft27.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_94 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Property p = elem_ft27;&#xA;&#xA;&#x9;idIfCond_94 = kermeta.standard.helper.BooleanWrapper.not(p.getIsDerived());&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_94 ) {&#xA;&#xA;&#x9;result_ft27.add(elem_ft27);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;//callElement&#xA;properties = result_ft27;&#xA;//End of the Inlining of the function type: select&#xA;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft28 = properties.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_95 = false;&#xA;&#x9;while( !idLoopCond_95 ) {&#xA;&#x9;idLoopCond_95 = it_ft28.isOff();&#xA;&#x9;if ( idLoopCond_95 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft28.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_96 = false;&#xA;&#x9;idIfCond_96 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_96 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objects = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft29 = objects.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_97 = false;&#xA;&#x9;while( !idLoopCond_97 ) {&#xA;&#x9;idLoopCond_97 = it_ft29.isOff();&#xA;&#x9;if ( idLoopCond_97 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object obj = it_ft29.next();&#xA;&#xA;&#x9;this.indexate(obj);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;this.indexate(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p));&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;"/>
        </eAnnotations>
        <eParameters name="element" eType="#/8/language/structure/Object"/>
      </eOperations>
      <eOperations name="clonePlan" eType="#/7/DecompositionPlan">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;decomposition.DecompositionPlan result = null;&#xA;&#xA;&#x9;decomposition.DecompositionPlan newPlan = null;&#xA;&#xA;&#x9;newPlan = ((decomposition.DecompositionPlan) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.DecompositionPlan&quot;));&#xA;&#xA;&#x9;newPlan.initialize();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;decomposition.AtomicPlanPart> it_ft30 = plan.getAtomicPlans().values().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_98 = false;&#xA;&#x9;while( !idLoopCond_98 ) {&#xA;&#x9;idLoopCond_98 = it_ft30.isOff();&#xA;&#x9;if ( idLoopCond_98 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;decomposition.AtomicPlanPart aplan = it_ft30.next();&#xA;&#xA;&#x9;decomposition.AtomicPlanPart atomNew = null;&#xA;&#xA;&#x9;atomNew = ((decomposition.AtomicPlanPart) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.AtomicPlanPart&quot;));&#xA;&#xA;&#x9;atomNew.setElement(aplan.getElement());&#xA;&#xA;&#x9;atomNew.setOperationType(aplan.getOperationType());&#xA;&#xA;&#x9;atomNew.setSide(aplan.getSide());&#xA;&#xA;&#x9;atomNew.setInElement(aplan.getInElement());&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft31 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(aplan.getDependantOn()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_99 = false;&#xA;&#x9;while( !idLoopCond_99 ) {&#xA;&#x9;idLoopCond_99 = it_ft31.isOff();&#xA;&#x9;if ( idLoopCond_99 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String dep = it_ft31.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(atomNew.getDependantOn()).add(dep);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;newPlan.getAtomicPlans().put(atomNew.getElement(), atomNew);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft32 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(plan.getKeys()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_100 = false;&#xA;&#x9;while( !idLoopCond_100 ) {&#xA;&#x9;idLoopCond_100 = it_ft32.isOff();&#xA;&#x9;if ( idLoopCond_100 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String k = it_ft32.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(newPlan.getKeys()).add(k);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;result = newPlan;&#xA;&#xA;return result;&#xA;"/>
        </eAnnotations>
        <eParameters name="plan" eType="#/7/DecompositionPlan"/>
      </eOperations>
      <eOperations name="initialize" ordered="false">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;this.setOriginal(initial);&#xA;&#xA;&#x9;this.setNumeral(0);&#xA;"/>
        </eAnnotations>
        <eParameters name="initial" eType="#/10/Mergeable"/>
      </eOperations>
      <eOperations name="rename" eType="#/7/Rule">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;decomposition.Rule result = null;&#xA;&#xA;&#x9;result = null;&#xA;&#xA;return result;&#xA;"/>
        </eAnnotations>
        <eParameters name="element" eType="#/7/Named"/>
      </eOperations>
      <eOperations name="createPlans">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;decomposition.DecompositionPlan plan = null;&#xA;&#xA;&#x9;plan = ((decomposition.DecompositionPlan) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.DecompositionPlan&quot;));&#xA;&#xA;&#x9;plan.initialize();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;decomposition.DecompositionPlan>convertAsOrderedSet(this.getDecompositionPlans()).add(plan);&#xA;&#xA;&#x9;this.initializePlans(plan, this.getOriginal(), null, decomposition.OperationType.getByName(&quot;CLONE&quot;), null);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(plan.getKeys()).remove(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this.getOriginal()));&#xA;&#xA;&#x9;this.recurseCombinatorics(plan);&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="renameBefore" eType="#/7/Rule">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;decomposition.Rule result = null;&#xA;&#xA;&#x9;result = null;&#xA;&#xA;return result;&#xA;"/>
        </eAnnotations>
        <eParameters name="element" eType="#/7/Named"/>
      </eOperations>
      <eOperations name="decompose">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;this.getCurrentPlan().print();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;processing element: &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_101 = false;&#xA;&#x9;idIfCond_101 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this.getCurrentPlan().getAtomicPlans().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)).getOperationType(), decomposition.OperationType.getByName(&quot;ONESIDE&quot;));&#xA;&#xA;&#x9;if( idIfCond_101 ) {&#xA;&#xA;&#x9;this.side(parent, element, iproperty, this.getCurrentPlan().getAtomicPlans().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)).getSide());&#xA;}&#xA; else {&#xA;&#xA;&#x9;this.clone(parent, element, iproperty);&#xA;}&#xA;&#xA;"/>
        </eAnnotations>
        <eParameters name="parent" eType="#/10/Mergeable"/>
        <eParameters name="element" eType="#/10/Mergeable"/>
        <eParameters name="iproperty" eType="#/8/language/structure/Property"/>
        <eParameters name="direction" eType="#/8/standard/JavaBoolean"/>
      </eOperations>
      <eOperations name="side">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_102 = false;&#xA;&#x9;idIfCond_102 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).contains(element));&#xA;&#xA;&#x9;if( idIfCond_102 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;siding element: &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)));&#xA;&#xA;&#x9;kompose.Mergeable newElement = null;&#xA;&#xA;&#x9;newElement = (kompose.Mergeable) ((org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element)) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element)&quot;));&#xA;&#xA;&#x9;decomposition.TriContainer trtmp = ((decomposition.TriContainer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;decomposition.TriContainer&quot;));&#xA;&#xA;&#x9;trtmp.setElement(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_103 = false;&#xA;&#x9;idIfCond_103 = direction;&#xA;&#xA;&#x9;if( idIfCond_103 ) {&#xA;&#xA;&#x9;trtmp.setRight(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(newElement));&#xA;}&#xA; else {&#xA;&#xA;&#x9;trtmp.setLeft(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(newElement));&#xA;}&#xA;&#xA;&#xA;&#x9;trtmp.setSide(direction);&#xA;&#xA;&#x9;trtmp.setAppliedOperation(decomposition.OperationType.getByName(&quot;ONESIDE&quot;));&#xA;&#xA;&#x9;this.getCurrentPlan().getNewMapper().put(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(newElement), newElement);&#xA;&#xA;&#x9;this.getCurrentPlan().getMapper().put(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element), trtmp);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).add(element);&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Property> properties = null;&#xA;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Property> result_ft33 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Property elem_ft33 = null;&#xA;&#xA;&#x9;result_ft33 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft33 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(element).getClassDefinition().getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_104 = false;&#xA;&#x9;while( !idLoopCond_104 ) {&#xA;&#x9;idLoopCond_104 = it_ft33.isOff();&#xA;&#x9;if ( idLoopCond_104 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft33 = it_ft33.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_105 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Property p = elem_ft33;&#xA;&#xA;&#x9;idIfCond_105 = kermeta.standard.helper.BooleanWrapper.not(p.getIsDerived());&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_105 ) {&#xA;&#xA;&#x9;result_ft33.add(elem_ft33);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;//callElement&#xA;properties = result_ft33;&#xA;//End of the Inlining of the function type: select&#xA;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft34 = properties.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_106 = false;&#xA;&#x9;while( !idLoopCond_106 ) {&#xA;&#x9;idLoopCond_106 = it_ft34.isOff();&#xA;&#x9;if ( idLoopCond_106 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft34.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_107 = false;&#xA;&#x9;idIfCond_107 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.TypeUtil.isSuperTypeOf(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kompose.Mergeable&quot;), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;p.getType()&quot;)));&#xA;&#xA;&#x9;if( idIfCond_107 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_108 = false;&#xA;&#x9;idIfCond_108 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_108 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objects = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objectsN = null;&#xA;&#xA;&#x9;objectsN = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(newElement, p);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft35 = objects.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_109 = false;&#xA;&#x9;while( !idLoopCond_109 ) {&#xA;&#x9;idLoopCond_109 = it_ft35.isOff();&#xA;&#x9;if ( idLoopCond_109 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object obj = it_ft35.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_110 = false;&#xA;&#x9;idIfCond_110 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(obj, null);&#xA;&#xA;&#x9;if( idIfCond_110 ) {&#xA;&#xA;&#x9;objectsN.add(obj);&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_111 = false;&#xA;&#x9;idIfCond_111 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p), null);&#xA;&#xA;&#x9;if( idIfCond_111 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(newElement, p, org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_112 = false;&#xA;&#x9;idIfCond_112 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_112 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objects = null;&#xA;&#xA;&#x9;objects = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Object> result_ft37 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Object elem_ft37 = null;&#xA;&#xA;&#x9;result_ft37 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Object>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft37 = objects.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_119 = false;&#xA;&#x9;while( !idLoopCond_119 ) {&#xA;&#x9;idLoopCond_119 = it_ft37.isOff();&#xA;&#x9;if ( idLoopCond_119 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft37 = it_ft37.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_120 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Object obj = elem_ft37;&#xA;&#xA;&#x9;idIfCond_120 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(obj, null);&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_120 ) {&#xA;&#xA;&#x9;result_ft37.add(elem_ft37);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft36 = result_ft37.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_113 = false;&#xA;&#x9;while( !idLoopCond_113 ) {&#xA;&#x9;idLoopCond_113 = it_ft36.isOff();&#xA;&#x9;if ( idLoopCond_113 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object obj = it_ft36.next();&#xA;&#xA;&#x9;kompose.Mergeable mergeable = null;&#xA;&#xA;&#x9;mergeable = (kompose.Mergeable) obj;&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;kompose.Mergeable> ctnr = null;&#xA;&#xA;&#x9;kompose.Mergeable ctnr2 = null;&#xA;&#xA;&#x9;ctnr2 = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(mergeable);&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property> prpts = null;&#xA;&#xA;&#x9;ctnr = ((kermeta.standard.OrderedSet&lt;kompose.Mergeable>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;kompose.Mergeable>&quot;));&#xA;&#xA;&#x9;prpts = ((kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_114 = false;&#xA;&#x9;idIfCond_114 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(element, ctnr2);&#xA;&#xA;&#x9;if( idIfCond_114 ) {&#xA;&#xA;&#x9;ctnr.add(element);&#xA;&#xA;&#x9;ctnr.add(ctnr2);&#xA;&#xA;&#x9;prpts.add(p);&#xA;&#xA;&#x9;kermeta.language.structure.Property prpt = null;&#xA;&#xA;&#x9;prpt = this.getPropertyByContainement(ctnr2, mergeable);&#xA;&#xA;&#x9;prpts.add(prpt);&#xA;}&#xA; else {&#xA;&#xA;&#x9;ctnr.add(element);&#xA;&#xA;&#x9;prpts.add(p);&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_115 = false;&#xA;&#x9;idIfCond_115 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).contains(mergeable));&#xA;&#xA;&#x9;if( idIfCond_115 ) {&#xA;&#xA;&#x9;this.decompose(ctnr, mergeable, prpts, direction);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objectsN = null;&#xA;&#xA;&#x9;objectsN = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(newElement, p);&#xA;&#xA;&#x9;kompose.Mergeable mr = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_116 = false;&#xA;&#x9;idIfCond_116 = direction;&#xA;&#xA;&#x9;if( idIfCond_116 ) {&#xA;&#xA;&#x9;mr = this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getRight());&#xA;}&#xA; else {&#xA;&#xA;&#x9;mr = this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getLeft());&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_117 = false;&#xA;&#x9;idIfCond_117 = kermeta.standard.helper.BooleanWrapper.not(objectsN.contains(mr));&#xA;&#xA;&#x9;if( idIfCond_117 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_118 = false;&#xA;&#x9;idIfCond_118 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(mr, null);&#xA;&#xA;&#x9;if( idIfCond_118 ) {&#xA;&#xA;&#x9;objectsN.add(mr);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;kompose.Mergeable mergeable = null;&#xA;&#xA;&#x9;mergeable = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_121 = false;&#xA;&#x9;idIfCond_121 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(mergeable, null);&#xA;&#xA;&#x9;if( idIfCond_121 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_122 = false;&#xA;&#x9;idIfCond_122 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(this.getObjectIndex()).contains(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable));&#xA;&#xA;&#x9;if( idIfCond_122 ) {&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;kompose.Mergeable> ctnr = null;&#xA;&#xA;&#x9;kompose.Mergeable ctnr2 = null;&#xA;&#xA;&#x9;ctnr2 = (kompose.Mergeable) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(mergeable);&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property> prpts = null;&#xA;&#xA;&#x9;ctnr = ((kermeta.standard.OrderedSet&lt;kompose.Mergeable>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;kompose.Mergeable>&quot;));&#xA;&#xA;&#x9;prpts = ((kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_123 = false;&#xA;&#x9;idIfCond_123 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(element, ctnr2);&#xA;&#xA;&#x9;if( idIfCond_123 ) {&#xA;&#xA;&#x9;ctnr.add(element);&#xA;&#xA;&#x9;ctnr.add(ctnr2);&#xA;&#xA;&#x9;prpts.add(p);&#xA;&#xA;&#x9;prpts.add(this.getPropertyByContainement(ctnr2, mergeable));&#xA;}&#xA; else {&#xA;&#xA;&#x9;ctnr.add(element);&#xA;&#xA;&#x9;prpts.add(p);&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_124 = false;&#xA;&#x9;idIfCond_124 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getCurrentPlan().getProcessed()).contains(mergeable));&#xA;&#xA;&#x9;if( idIfCond_124 ) {&#xA;&#xA;&#x9;this.decompose(ctnr, mergeable, prpts, direction);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kompose.Mergeable mr = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_125 = false;&#xA;&#x9;idIfCond_125 = direction;&#xA;&#xA;&#x9;if( idIfCond_125 ) {&#xA;&#xA;&#x9;mr = this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getRight());&#xA;}&#xA; else {&#xA;&#xA;&#x9;mr = this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mergeable)).getLeft());&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_126 = false;&#xA;&#x9;idIfCond_126 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(mr, null);&#xA;&#xA;&#x9;if( idIfCond_126 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(newElement, p, mr);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_127 = false;&#xA;&#x9;idIfCond_127 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p), null);&#xA;&#xA;&#x9;if( idIfCond_127 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(newElement, p, org.kermeta.compil.runtime.helper.language.ObjectUtil.get(element, p));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_128 = false;&#xA;&#x9;idIfCond_128 = parent == null;&#xA;&#xA;&#x9;if( idIfCond_128 ) {&#xA;&#xA;&#x9;this.checkNonVoid(newElement, &quot;side&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_129 = false;&#xA;&#x9;idIfCond_129 = direction;&#xA;&#xA;&#x9;if( idIfCond_129 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getRight()).add(newElement);&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kompose.Mergeable>convertAsOrderedSet(this.getLeft()).add(newElement);&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Property> result_ft39 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Property elem_ft39 = null;&#xA;&#xA;&#x9;result_ft39 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Property>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Property>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft39 = iproperty.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_133 = false;&#xA;&#x9;while( !idLoopCond_133 ) {&#xA;&#x9;idLoopCond_133 = it_ft39.isOff();&#xA;&#x9;if ( idLoopCond_133 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft39 = it_ft39.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_134 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Property p = elem_ft39;&#xA;&#xA;&#x9;idIfCond_134 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p, null);&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_134 ) {&#xA;&#xA;&#x9;result_ft39.add(elem_ft39);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft38 = result_ft39.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_130 = false;&#xA;&#x9;while( !idLoopCond_130 ) {&#xA;&#x9;idLoopCond_130 = it_ft38.isOff();&#xA;&#x9;if ( idLoopCond_130 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft38.next();&#xA;&#xA;&#x9;kompose.Mergeable mr = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_131 = false;&#xA;&#x9;idIfCond_131 = direction;&#xA;&#xA;&#x9;if( idIfCond_131 ) {&#xA;&#xA;&#x9;mr = this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getRight());&#xA;}&#xA; else {&#xA;&#xA;&#x9;mr = this.getCurrentPlan().getNewMapper().getValue(this.getCurrentPlan().getMapper().getValue(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())).getLeft());&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_132 = false;&#xA;&#x9;idIfCond_132 = kermeta.standard.helper.IntegerWrapper.equals(p.getUpper(), 1);&#xA;&#xA;&#x9;if( idIfCond_132 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;side setting single : &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(newElement)), &quot; in &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mr)), &quot;for &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())), &quot; original &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;on p: &quot;), p.getName()));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(mr, p, newElement);&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;side setting multiple : &quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(newElement)), &quot; in &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(mr)), &quot;for &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(parent.one())), &quot; original &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;on p: &quot;), p.getName()));&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> objectsN = null;&#xA;&#xA;&#x9;objectsN = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(mr, p);&#xA;&#xA;&#x9;objectsN.add(newElement);&#xA;}&#xA;&#xA;&#xA;&#x9;parent.remove(parent.one());&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;"/>
        </eAnnotations>
        <eParameters name="parent" eType="#/10/Mergeable"/>
        <eParameters name="element" eType="#/10/Mergeable"/>
        <eParameters name="iproperty" eType="#/8/language/structure/Property"/>
        <eParameters name="direction" eType="#/8/standard/JavaBoolean"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="currentPlan" eType="#/7/DecompositionPlan"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="decompositionPlans" upperBound="-1"
          eType="#/7/DecompositionPlan" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="right" lowerBound="1"
          upperBound="-1" eType="#/10/Mergeable"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="procRKeys" upperBound="-1"
          eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="dependants" upperBound="-1"
          eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="objectIndex" upperBound="-1"
          eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="left" lowerBound="1"
          upperBound="-1" eType="#/10/Mergeable"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="original" lowerBound="1"
          eType="#/10/Mergeable"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="procLKeys" upperBound="-1"
          eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="numeral" eType="#/8/standard/JavaInteger"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="resource" eType="#/8/persistence/EMFResource"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="OperationType">
      <eLiterals name="CLONE" literal="CLONE"/>
      <eLiterals name="ONESIDE" value="1" literal="ONESIDE"/>
      <eLiterals name="RENAME" value="2" literal="RENAME"/>
      <eLiterals name="RENAMEBEFORE" value="3" literal="RENAMEBEFORE"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Named" eSuperTypes="#/10/Mergeable">
      <eOperations name="getName" lowerBound="1" eType="#/9/EString">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.String result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="setName" lowerBound="1">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value=""/>
        </eAnnotations>
        <eParameters name="name" eType="#/9/EString"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Rule" eSuperTypes="#/8/language/structure/Object"/>
    <eClassifiers xsi:type="ecore:EClass" name="CProperty" eSuperTypes="#/8/language/structure/Object"/>
    <eClassifiers xsi:type="ecore:EClass" name="TriContainer" eSuperTypes="#/8/language/structure/Object">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="element" eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="right" eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="left" eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="appliedOperation" eType="#/7/OperationType"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="side" eType="#/8/standard/JavaBoolean"
          defaultValueLiteral="false"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DecompositionPlan" eSuperTypes="#/8/language/structure/Object">
      <eOperations name="initialize">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;this.setAtomicPlans(((kermeta.utils.Hashtable&lt;java.lang.String, decomposition.AtomicPlanPart>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&lt;java.lang.String, decomposition.AtomicPlanPart>&quot;)));&#xA;&#xA;&#x9;this.setMapper(((kermeta.utils.Hashtable&lt;java.lang.String, decomposition.TriContainer>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&lt;java.lang.String, decomposition.TriContainer>&quot;)));&#xA;&#xA;&#x9;this.setNewMapper(((kermeta.utils.Hashtable&lt;java.lang.String, kompose.Mergeable>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&lt;java.lang.String, kompose.Mergeable>&quot;)));&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="print">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;plan : &quot;);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;decomposition.AtomicPlanPart> it_ft40 = this.getAtomicPlans().values().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_135 = false;&#xA;&#x9;while( !idLoopCond_135 ) {&#xA;&#x9;idLoopCond_135 = it_ft40.isOff();&#xA;&#x9;if ( idLoopCond_135 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;decomposition.AtomicPlanPart plan = it_ft40.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;  element: &quot;, plan.getElement()), &quot; contained in :&quot;), plan.getInElement()), &quot;-> &quot;), plan.getOperationType().getName()), &quot; : &quot;), kermeta.standard.helper.BooleanWrapper.toString(plan.getSide())));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_136 = false;&#xA;&#x9;idIfCond_136 = kermeta.standard.helper.IntegerWrapper.isGreater(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(plan.getDependantOn()).size(), 0);&#xA;&#xA;&#x9;if( idIfCond_136 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft41 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;java.lang.String>convertAsOrderedSet(plan.getDependantOn()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_137 = false;&#xA;&#x9;while( !idLoopCond_137 ) {&#xA;&#x9;idLoopCond_137 = it_ft41.isOff();&#xA;&#x9;if ( idLoopCond_137 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String dependant = it_ft41.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;   dependantOf: &quot;, dependant));&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="keys" upperBound="-1"
          eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="atomicPlans" containment="true">
        <eGenericType eClassifier="#/8/utils/Hashtable">
          <eTypeArguments eClassifier="#/8/standard/JavaString"/>
          <eTypeArguments eClassifier="#/7/AtomicPlanPart"/>
        </eGenericType>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="procPlan" upperBound="-1"
          eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="newMapper">
        <eGenericType eClassifier="#/8/utils/Hashtable">
          <eTypeArguments eClassifier="#/8/standard/JavaString"/>
          <eTypeArguments eClassifier="#/10/Mergeable"/>
        </eGenericType>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mapper" containment="true">
        <eGenericType eClassifier="#/8/utils/Hashtable">
          <eTypeArguments eClassifier="#/8/standard/JavaString"/>
          <eTypeArguments eClassifier="#/7/TriContainer"/>
        </eGenericType>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="processed" upperBound="-1"
          eType="#/10/Mergeable"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AtomicPlanPart" eSuperTypes="#/8/language/structure/Object">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="element" eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="inElement" eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="operationType" eType="#/7/OperationType"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="dependantOn" upperBound="-1"
          eType="#/8/standard/JavaString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="side" eType="#/8/standard/JavaBoolean"
          defaultValueLiteral="false"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="KomposeScriptAll" eSuperTypes="#/8/language/structure/Object">
      <eOperations name="generate" eType="#/8/standard/JavaString">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;kermeta.utils.StringBuffer _res = ((kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.StringBuffer&quot;));&#xA;&#xA;&#x9;_res.append(&quot;@mainClass \&quot;decompose::Test::all::Main\&quot;\n@mainOperation \&quot;main\&quot;\n\npackage decompose::Test::all;\nrequire kermeta\n&quot;);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft42 = scripts.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_138 = false;&#xA;&#x9;while( !idLoopCond_138 ) {&#xA;&#x9;idLoopCond_138 = it_ft42.isOff();&#xA;&#x9;if ( idLoopCond_138 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String script = it_ft42.next();&#xA;&#xA;&#x9;_res.append(&quot;require \&quot;&quot;);&#xA;&#xA;&#x9;_res.append(script);&#xA;&#xA;&#x9;_res.append(&quot;\&quot;\n&quot;);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;_res.append(&quot;\n\n&quot;);&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Integer i = 0;&#xA;&#x9;java.lang.Boolean idLoopCond_139 = false;&#xA;&#x9;while( !idLoopCond_139 ) {&#xA;&#x9;idLoopCond_139 = kermeta.standard.helper.IntegerWrapper.equals(i, numeralTop);&#xA;&#x9;if ( idLoopCond_139 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;_res.append(&quot;using decompose::Test::n&quot;);&#xA;&#xA;&#x9;_res.append(kermeta.standard.helper.IntegerWrapper.toString(i));&#xA;&#xA;&#x9;_res.append(&quot;\n&quot;);&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;_res.append(&quot;\n\nclass Main\n{\n\toperation main() : Void is do \n&quot;);&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Integer i = 0;&#xA;&#x9;java.lang.Boolean idLoopCond_140 = false;&#xA;&#x9;while( !idLoopCond_140 ) {&#xA;&#x9;idLoopCond_140 = kermeta.standard.helper.IntegerWrapper.equals(i, numeralTop);&#xA;&#x9;if ( idLoopCond_140 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;_res.append(&quot;\t\tvar main&quot;);&#xA;&#xA;&#x9;_res.append(kermeta.standard.helper.IntegerWrapper.toString(i));&#xA;&#xA;&#x9;_res.append(&quot;:decompose::Test::n&quot;);&#xA;&#xA;&#x9;_res.append(kermeta.standard.helper.IntegerWrapper.toString(i));&#xA;&#xA;&#x9;_res.append(&quot;::Main init decompose::Test::n&quot;);&#xA;&#xA;&#x9;_res.append(kermeta.standard.helper.IntegerWrapper.toString(i));&#xA;&#xA;&#x9;_res.append(&quot;::Main.new\n&quot;);&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;_res.append(&quot;&quot;);&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Integer i = 0;&#xA;&#x9;java.lang.Boolean idLoopCond_141 = false;&#xA;&#x9;while( !idLoopCond_141 ) {&#xA;&#x9;idLoopCond_141 = kermeta.standard.helper.IntegerWrapper.equals(i, numeralTop);&#xA;&#x9;if ( idLoopCond_141 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;_res.append(&quot;\t\tmain&quot;);&#xA;&#xA;&#x9;_res.append(kermeta.standard.helper.IntegerWrapper.toString(i));&#xA;&#xA;&#x9;_res.append(&quot;.main()\n&quot;);&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;_res.append(&quot;\tend\n}&quot;);&#xA;&#xA;&#x9;result = _res.toString();&#xA;&#xA;return result;&#xA;"/>
        </eAnnotations>
        <eParameters name="scripts">
          <eGenericType eClassifier="#/8/standard/Collection">
            <eTypeArguments eClassifier="#/8/standard/JavaString"/>
          </eGenericType>
        </eParameters>
        <eParameters name="numeralTop" eType="#/8/standard/JavaInteger"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="KomposeScriptBridge" eSuperTypes="#/8/language/structure/Object">
      <eOperations name="generate" eType="#/8/standard/JavaString">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;kermeta.utils.StringBuffer _res = ((kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.StringBuffer&quot;));&#xA;&#xA;&#x9;_res.append(&quot;@mainClass \&quot;decompose::Test::n&quot;);&#xA;&#xA;&#x9;_res.append(kermeta.standard.helper.IntegerWrapper.toString(numeral));&#xA;&#xA;&#x9;_res.append(&quot;::Main\&quot;\n@mainOperation \&quot;main\&quot;\n\n\npackage decompose::Test::n&quot;);&#xA;&#xA;&#x9;_res.append(kermeta.standard.helper.IntegerWrapper.toString(numeral));&#xA;&#xA;&#x9;_res.append(&quot;;\nrequire kermeta\nrequire \&quot;platform:/resource/org.kermeta.kompose.specialization.ecore.uno/kermeta/Ecore.kmt\&quot;\n\nusing ecore\n\n\nclass Main\n{\n\toperation main() : Void is do \n\t\tvar ecoreMain:ecore::Main init ecore::Main.new\n\t\tecoreMain.main(\&quot;&quot;);&#xA;&#xA;&#x9;_res.append(location);&#xA;&#xA;&#x9;_res.append(&quot;\&quot;)\n\tend\n}&quot;);&#xA;&#xA;&#x9;result = _res.toString();&#xA;&#xA;return result;&#xA;"/>
        </eAnnotations>
        <eParameters name="numeral" eType="#/8/standard/JavaInteger"/>
        <eParameters name="location" eType="#/8/standard/JavaString"/>
      </eOperations>
    </eClassifiers>
    <eSubpackages name="oracle" nsURI="http://www.kermeta.org/decomposition/oracle/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/decomposition/oracle"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="OSupport" eSuperTypes="#/8/language/structure/Object">
        <eOperations name="initialize">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.setSourceMapper(((kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String>&quot;)));&#xA;&#xA;&#x9;this.setMatchResultMapper(((kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String>&quot;)));&#xA;&#xA;&#x9;this.setDiffResultMapper(((kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&lt;java.lang.String, java.lang.String>&quot;)));&#xA;&#xA;&#x9;this.setIsCreated(false);&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="doLoad" eType="#/8/language/structure/Object">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;Load oracle compare from: &quot;, path));&#xA;&#xA;&#x9;kermeta.persistence.EMFResource resource = null;&#xA;&#xA;&#x9;kermeta.persistence.EMFRepository repository = ((kermeta.persistence.EMFRepository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFRepository&quot;));&#xA;&#xA;&#x9;resource = (kermeta.persistence.EMFResource) repository.getResource(path);&#xA;&#xA;&#x9;resource.load();&#xA;&#xA;&#x9;result = resource.instances().one();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="path" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="createModel">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.setModel(((ocompare.Compare) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;ocompare.Compare&quot;)));&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;java.lang.String> it_ft43 = this.getSourceMapper().keys().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_142 = false;&#xA;&#x9;while( !idLoopCond_142 ) {&#xA;&#x9;idLoopCond_142 = it_ft43.isOff();&#xA;&#x9;if ( idLoopCond_142 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;java.lang.String k = it_ft43.next();&#xA;&#xA;&#x9;ocompare.CompareElement compareElement = ((ocompare.CompareElement) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;ocompare.CompareElement&quot;));&#xA;&#xA;&#x9;compareElement.setOriginalURI(this.getSourceMapper().getValue(k));&#xA;&#xA;&#x9;compareElement.setResultURI(k);&#xA;&#xA;&#x9;compareElement.setDiffURI(this.getDiffResultMapper().getValue(k));&#xA;&#xA;&#x9;compareElement.setMatchURI(this.getMatchResultMapper().getValue(k));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;ocompare.CompareElement>convertAsOrderedSet(this.getModel().getToCompare()).add(compareElement);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;this.setIsCreated(true);&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="doSave">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_143 = false;&#xA;&#x9;idIfCond_143 = kermeta.standard.helper.BooleanWrapper.not(this.getIsCreated());&#xA;&#xA;&#x9;if( idIfCond_143 ) {&#xA;&#xA;&#x9;this.createModel();&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;Saving Oracle compare input: &quot;, this.getResultFile()));&#xA;&#xA;&#x9;kermeta.persistence.EMFResource resource = null;&#xA;&#xA;&#x9;kermeta.persistence.EMFRepository repository = ((kermeta.persistence.EMFRepository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFRepository&quot;));&#xA;&#xA;&#x9;resource = (kermeta.persistence.EMFResource) repository.createResource(this.getResultFile(), &quot;http://www.kermeta.org/decompose/compare&quot;);&#xA;&#xA;&#x9;resource.instances().add(this.getModel());&#xA;&#xA;&#x9;resource.save();&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="resultFile" eType="#/8/standard/JavaString"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="diffResultMapper" containment="true">
          <eGenericType eClassifier="#/8/utils/Hashtable">
            <eTypeArguments eClassifier="#/8/standard/JavaString"/>
            <eTypeArguments eClassifier="#/8/standard/JavaString"/>
          </eGenericType>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="sourceMapper" containment="true">
          <eGenericType eClassifier="#/8/utils/Hashtable">
            <eTypeArguments eClassifier="#/8/standard/JavaString"/>
            <eTypeArguments eClassifier="#/8/standard/JavaString"/>
          </eGenericType>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="matchResultMapper"
            containment="true">
          <eGenericType eClassifier="#/8/utils/Hashtable">
            <eTypeArguments eClassifier="#/8/standard/JavaString"/>
            <eTypeArguments eClassifier="#/8/standard/JavaString"/>
          </eGenericType>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="model" eType="#/6/Compare"
            containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isCreated" eType="#/8/standard/JavaBoolean"
            defaultValueLiteral="false"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OracleRunnerScript" eSuperTypes="#/8/language/structure/Object">
        <eOperations name="generate" eType="#/8/standard/JavaString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;kermeta.utils.StringBuffer _res = ((kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.StringBuffer&quot;));&#xA;&#xA;&#x9;_res.append(&quot;\n@mainClass \&quot;decompose::oracle::run::Main\&quot;\n@mainOperation \&quot;main\&quot;\n\npackage decompose::oracle::run;\nrequire kermeta\nrequire \&quot;platform:/resource/fr.irisa.triskell.decompose/src/kermeta/Oracle.kmt\&quot;\n\nusing decomposition\n\nclass Main\n{\n\toperation main() : Void is do \n\t\tvar oracle:Oracle init Oracle.new\n\t\toracle.initialize(\&quot;&quot;);&#xA;&#xA;&#x9;_res.append(location);&#xA;&#xA;&#x9;_res.append(&quot;\&quot;)\n\t\toracle.veredict()\n\tend\n}&quot;);&#xA;&#xA;&#x9;result = _res.toString();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="location" eType="#/8/standard/JavaString"/>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EPackage name="kermeta" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/kermeta_temp_uri"
      nsPrefix="">
    <eAnnotations source="kermeta">
      <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta"/>
    </eAnnotations>
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * The root package. See the other packages if you want to browse the classes of Kermeta api.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/kermeta_packages.png&quot;/>&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="DummyClass" abstract="true" eSuperTypes="#/8/language/structure/Object">
      <eAnnotations source="kermeta">
        <details key="documentation" value="This class is used to workaround an EMF bug, it doesn't really belong to Kermeta metamodel"/>
      </eAnnotations>
    </eClassifiers>
    <eSubpackages name="io" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/io/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/io"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains file input/output related classes. &#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/io_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains standard input/output related classes. &#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="FileIO" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Implementation of simple helpers to read ans write text files&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/io_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="writeTextFile">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writes a String in a text file&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_144 = false;&#xA;&#x9;idIfCond_144 = kermeta.standard.helper.StringWrapper.equals(filename, null);&#xA;&#xA;&#x9;if( idIfCond_144 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.FileNotFoundException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.FileNotFoundException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.SimpleFileIOUtil.writeTextFile(filename, text);&#xA;"/>
          </eAnnotations>
          <eParameters name="filename" eType="#/8/standard/JavaString"/>
          <eParameters name="text" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="readTextFile" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Reads a text file&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_145 = false;&#xA;&#x9;idIfCond_145 = kermeta.standard.helper.StringWrapper.equals(filename, null);&#xA;&#xA;&#x9;if( idIfCond_145 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.FileNotFoundException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.FileNotFoundException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean exists = null;&#xA;&#xA;&#x9;java.lang.Boolean isdirectory = null;&#xA;&#xA;&#x9;exists = (java.lang.Boolean) org.kermeta.compil.runtime.helper.io.SimpleFileIOUtil.fileExists(filename);&#xA;&#xA;&#x9;isdirectory = (java.lang.Boolean) org.kermeta.compil.runtime.helper.io.SimpleFileIOUtil.fileIsDirectory(filename);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_146 = false;&#xA;&#x9;idIfCond_146 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.not(exists), isdirectory);&#xA;&#xA;&#x9;if( idIfCond_146 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.FileNotFoundException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.FileNotFoundException&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.io.SimpleFileIOUtil.readTextFile(filename);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="filename" eType="#/8/standard/JavaString"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StdIO" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An implementation of StdIO : standard input/output&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/io_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="write">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writes the object to standard output&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_147 = false;&#xA;&#x9;idIfCond_147 = kermeta.standard.helper.StringWrapper.equals(object, null);&#xA;&#xA;&#x9;if( idIfCond_147 ) {&#xA;&#xA;&#x9;object = &quot;&lt;void>&quot;;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.write(object);&#xA;"/>
          </eAnnotations>
          <eParameters name="object" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="errorln">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writeln the object to error output&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_148 = false;&#xA;&#x9;idIfCond_148 = kermeta.standard.helper.StringWrapper.equals(object, null);&#xA;&#xA;&#x9;if( idIfCond_148 ) {&#xA;&#xA;&#x9;object = &quot;&lt;void>&quot;;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.errorln(object);&#xA;"/>
          </eAnnotations>
          <eParameters name="object" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="error">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writes the object to error output&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_149 = false;&#xA;&#x9;idIfCond_149 = kermeta.standard.helper.StringWrapper.equals(object, null);&#xA;&#xA;&#x9;if( idIfCond_149 ) {&#xA;&#xA;&#x9;object = &quot;&lt;void>&quot;;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.error(object);&#xA;"/>
          </eAnnotations>
          <eParameters name="object" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="writeln">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writeln the object to standard output&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_150 = false;&#xA;&#x9;idIfCond_150 = kermeta.standard.helper.StringWrapper.equals(object, null);&#xA;&#xA;&#x9;if( idIfCond_150 ) {&#xA;&#xA;&#x9;object = &quot;&lt;void>&quot;;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(object);&#xA;"/>
          </eAnnotations>
          <eParameters name="object" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="read" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Reads a String from standard input&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_151 = false;&#xA;&#x9;idIfCond_151 = kermeta.standard.helper.StringWrapper.equals(prompt, null);&#xA;&#xA;&#x9;if( idIfCond_151 ) {&#xA;&#xA;&#x9;prompt = &quot;&quot;;&#xA;}&#xA;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.io.StdIOUtil.read(prompt);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="prompt" eType="#/8/standard/JavaString"/>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="persistence" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/persistence/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/persistence"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains the classes that handle the serialization of models, in particular&#xD;&#xA; * EMF models.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/persistence_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Resource" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The main class that handle a loaded/saved model.&#xD;&#xA; * There are a few important things to note for the developer :&#xD;&#xA; * &#xD;&#xA; * - load a Resource : this loads a Collection of instances corresponding to the&#xD;&#xA; *   objects in the loaded model. If the Collection of instances is empty, than &#xD;&#xA; *&#x9; a ResourceLoadException is raised&#xD;&#xA; *&#xD;&#xA; * - save a Resource : this saves the collection of instances in a new file. This can&#xD;&#xA; *   be correctly done if and only if the instances saved are conform to the metamodel&#xD;&#xA; *   linked to this resource (this link does not need to be explicit. It is normally retrieved&#xD;&#xA; *   through the EMF model -- see Java wrapping &quot;Resource.java&quot;).&#xD;&#xA; * &#xD;&#xA; * - add/remove an instance to the Resource : this adds an element in the resource. It cannot&#xD;&#xA; *   be &quot;simply&quot; added because of the following potential errors :&#xD;&#xA; *&#xD;&#xA; *   - The object added is not conform to the metamodel -> Error&#xD;&#xA; *   - The object was already added in the resource -> Not a real error : we do nothing&#xD;&#xA; *   - The object to remove does not exist -> redirect to a collection-specific error&#xD;&#xA; *   - The object to remove is attached to an object in the collection -> &quot;dependency-violation&quot; exception?&#xD;&#xA;&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="saveWithNewURI">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Save a Resource in a file referenced by the new uri.&#xD;&#xA;&#x9; * note: this doesn't change the URI of the resource, it is only saved in another place &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="new_uri" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="normalizedUri" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Return a normalized version of the Uri of this resource&#xD;&#xA;&#x9; * in order to prevent several loading of the same file because they have diffent path that leads to them, kermeta uses normalizedURI&#xD;&#xA;&#x9; * for some of its functions (eg. repository.getResource )&#xD;&#xA;&#x9; * As EMF needs URI of the form platform:/resource or platform:/plugin, kermeta automatically&#xD;&#xA;&#x9; * normalize the uri when loading or saving. This is especially true for file:/ uri or relative uri (./ or / ) &#xD;&#xA;&#x9; * If you wish to know what concrete uri is used by kermeta when loading and saving you can use this function&#xD;&#xA;&#x9; * to check how a given uri is normalized by kermeta&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.RepositoryUtil.normalizeUri(uri);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="save">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Save a Resource in the file specified by the current value of uri &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
        </eOperations>
        <eOperations name="load">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Loads the Resource, thus making content of the Resource browsable.&#xD;&#xA;&#x9; * Raises a ResourceLoadException in case loaded Resource is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
        </eOperations>
        <eOperations name="instances" eType="#/8/persistence/Resource">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * The entities contained in the model-instance, that are provided when user loads a resource &#xD;&#xA;&#x9; * instances == rootContents&#xD;&#xA;&#x9; * this is a loop on Resource itself in order to get backward compatibility&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="deprecated" value="user should use the resource directly since this is a collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = this;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="loadWithoutChecking">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Loads the Resource, thus making content of the Resource browsable.&#xD;&#xA;&#x9; * Without raises a ResourceLoadException in case loaded Resource is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
        </eOperations>
        <eOperations name="findDanglingModelElements">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Search for elements referenced by one element contained by this resource that are not contained by this repository&#xD;&#xA;&#x9; * ie. element that EMF would claim as &quot;not contained in a resource&quot;&#xD;&#xA;&#x9; * checks only objects directly referenced by the elment in this resource, ignores inderecly referenced objects&#xD;&#xA;&#x9; * example of use :&#xD;&#xA;&#x9; *  var report : Set&amp;lt;DanglingDiagnostic&amp;gt;&#xD;&#xA;&#x9; *&#x9;report := resource.findDanglingModelElements()&#xD;&#xA;&#x9; *&#x9;report.each{ diag | stdio.writeln(diag.toString ) }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;kermeta.persistence.DanglingDiagnostic> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Set&lt;kermeta.persistence.DanglingDiagnostic>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;kermeta.persistence.DanglingDiagnostic>&quot;));&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft44 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Object>convertAsSet(this.getContents()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_152 = false;&#xA;&#x9;while( !idLoopCond_152 ) {&#xA;&#x9;idLoopCond_152 = it_ft44.isOff();&#xA;&#x9;if ( idLoopCond_152 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object containedObj = it_ft44.next();&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition classDef = null;&#xA;&#xA;&#x9;classDef = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(containedObj).getTypeDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_153 = false;&#xA;&#x9;idIfCond_153 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(classDef));&#xA;&#xA;&#x9;if( idIfCond_153 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft45 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(classDef.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_154 = false;&#xA;&#x9;while( !idLoopCond_154 ) {&#xA;&#x9;idLoopCond_154 = it_ft45.isOff();&#xA;&#x9;if ( idLoopCond_154 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property prop = it_ft45.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_155 = false;&#xA;&#x9;idIfCond_155 = kermeta.standard.helper.BooleanWrapper.not(prop.getIsDerived());&#xA;&#xA;&#x9;if( idIfCond_155 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_156 = false;&#xA;&#x9;idIfCond_156 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isGreater(prop.getUpper(), 1), kermeta.standard.helper.IntegerWrapper.equals(prop.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)));&#xA;&#xA;&#x9;if( idIfCond_156 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> referencedObjs = null;&#xA;&#xA;&#x9;referencedObjs = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(containedObj, prop);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_157 = false;&#xA;&#x9;idIfCond_157 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(referencedObjs));&#xA;&#xA;&#x9;if( idIfCond_157 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft46 = referencedObjs.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_158 = false;&#xA;&#x9;while( !idLoopCond_158 ) {&#xA;&#x9;idLoopCond_158 = it_ft46.isOff();&#xA;&#x9;if ( idLoopCond_158 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object referencedObj = it_ft46.next();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: exists&#xA;&#xA;java.lang.Boolean result_ft47 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft47 = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.persistence.Resource> it_ft47 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.persistence.Resource>convertAsSet(this.getRepository().getResources()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_160 = false;&#xA;&#x9;while( !idLoopCond_160 ) {&#xA;&#x9;idLoopCond_160 = kermeta.standard.helper.BooleanWrapper.or(it_ft47.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft47, false));&#xA;&#x9;if ( idLoopCond_160 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda = null;&#xA;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.persistence.Resource res2 = it_ft47.next();&#xA;&#xA;&#x9;result_lambda = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Object>convertAsSet(res2.getContents()).contains(referencedObj);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;&#x9;test_ft47 = kermeta.standard.helper.BooleanWrapper.or(test_ft47, result_lambda);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;result_ft47 = test_ft47;&#xA;//End of the Inlining of the function type: exists&#xA;java.lang.Boolean idIfCond_159 = false;&#xA;&#x9;idIfCond_159 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft47), kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.or(org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.String&quot;)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;))), org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Boolean&quot;)))));&#xA;&#xA;&#x9;if( idIfCond_159 ) {&#xA;&#xA;&#x9;kermeta.persistence.DanglingDiagnostic diagnostic = ((kermeta.persistence.DanglingDiagnostic) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.DanglingDiagnostic&quot;));&#xA;&#xA;&#x9;diagnostic.setDanglingElement(referencedObj);&#xA;&#xA;&#x9;diagnostic.setReferencingElement(containedObj);&#xA;&#xA;&#x9;diagnostic.setReferencingProperty(prop);&#xA;&#xA;&#x9;result.add(diagnostic);&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.Object referencedObj = null;&#xA;&#xA;&#x9;referencedObj = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(containedObj, prop);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_161 = false;&#xA;&#x9;idIfCond_161 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(referencedObj));&#xA;&#xA;&#x9;if( idIfCond_161 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: exists&#xA;&#xA;java.lang.Boolean result_ft48 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft48 = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.persistence.Resource> it_ft48 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.persistence.Resource>convertAsSet(this.getRepository().getResources()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_163 = false;&#xA;&#x9;while( !idLoopCond_163 ) {&#xA;&#x9;idLoopCond_163 = kermeta.standard.helper.BooleanWrapper.or(it_ft48.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft48, false));&#xA;&#x9;if ( idLoopCond_163 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda = null;&#xA;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.persistence.Resource res2 = it_ft48.next();&#xA;&#xA;&#x9;result_lambda = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Object>convertAsSet(res2.getContents()).contains(referencedObj);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;&#x9;test_ft48 = kermeta.standard.helper.BooleanWrapper.or(test_ft48, result_lambda);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;result_ft48 = test_ft48;&#xA;//End of the Inlining of the function type: exists&#xA;java.lang.Boolean idIfCond_162 = false;&#xA;&#x9;idIfCond_162 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft48), kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.or(org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.String&quot;)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;))), org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Boolean&quot;)))));&#xA;&#xA;&#x9;if( idIfCond_162 ) {&#xA;&#xA;&#x9;kermeta.persistence.DanglingDiagnostic diagnostic = ((kermeta.persistence.DanglingDiagnostic) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.DanglingDiagnostic&quot;));&#xA;&#xA;&#x9;diagnostic.setDanglingElement(referencedObj);&#xA;&#xA;&#x9;diagnostic.setReferencingElement(containedObj);&#xA;&#xA;&#x9;diagnostic.setReferencingProperty(prop);&#xA;&#xA;&#x9;result.add(diagnostic);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eClassifier="#/8/persistence/DanglingDiagnostic"/>
          </eGenericType>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="contents" ordered="false"
            upperBound="-1" eType="#/8/language/structure/Object" derived="true">
          <eAnnotations source="kermeta">
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * Returns the set of all Objects directly or indirectly contained by the Resource,&#xD;&#xA;&#x9; * or an empty set if the Resource is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="dependentResources"
            ordered="false" upperBound="-1" eType="#/8/persistence/Resource" derived="true">
          <eAnnotations source="kermeta">
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the set of Resources the current Resource, which must have been loaded,&#xD;&#xA;&#x9; * depends on, an empty set if current Resource has no dependency&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Uri of the Resource to load&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="#/8/standard/JavaBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Indicates weither this resource will be updated when saving the repository&#xD;&#xA;&#x9; * This is useful if the repository contains some metamodels that should not be saved.&#xD;&#xA;&#x9; *&#xD;&#xA;&#x9; * Note that in the current version, it doesn't ensure that you have not modified its content (using the freeze)&#xD;&#xA;&#x9; * If you modify the elements of such resource, other resource that depend on it will be incorrectly saved &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="repository" eType="#/8/persistence/Repository"
            eOpposite="#/8/persistence/Repository/resources">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Repository used to create the Resource&#xD;&#xA;&#x9; * This feature is supposed read only, otherwise it cannot garantee that an element is contained by only &#xD;&#xA;&#x9; * one Resource of a given Repository&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="metaModelURI" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Uri of the meta-model of the Resource to load&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#/8/standard/Set">
          <eTypeArguments eClassifier="#/8/language/structure/Object"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EMFResource" eSuperTypes="#/8/persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Extension of the Resource class definition that is specific to EMF Repository.&#xD;&#xA; * User is not supposed to directly create it. Otherwise it will not be correctly initialized&#xD;&#xA; * You must To create one &#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="saveWithNewURI">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Resource.saveWithNewURI(String)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::persistence::Resource"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.persistence.Saver.save(getValues(), new_uri, getMetaModelURI());&#xA;"/>
          </eAnnotations>
          <eParameters name="new_uri" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Set&lt;Object>.add(Object)&#xD;&#xA;&#x9; * Add an instance to the Resource &#xD;&#xA;&#x9; * Ensures that the instance is referenced by a one and only one Resource of the same Repository&#xD;&#xA;&#x9; * Ensures that the instance does not appear more than once in the Resource&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.persistence.Resource> result_ft50 = null;&#xA;&#xA;&#x9;kermeta.persistence.Resource elem_ft50 = null;&#xA;&#xA;&#x9;result_ft50 = ((kermeta.standard.Sequence&lt;kermeta.persistence.Resource>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.persistence.Resource>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.persistence.Resource> it_ft50 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.persistence.Resource>convertAsSet(this.getRepository().getResources()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_165 = false;&#xA;&#x9;while( !idLoopCond_165 ) {&#xA;&#x9;idLoopCond_165 = it_ft50.isOff();&#xA;&#x9;if ( idLoopCond_165 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft50 = it_ft50.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_166 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.persistence.Resource r = elem_ft50;&#xA;&#xA;&#x9;idIfCond_166 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(r, this), r.contains(instance));&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_166 ) {&#xA;&#xA;&#x9;result_ft50.add(elem_ft50);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.persistence.Resource> it_ft49 = result_ft50.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_164 = false;&#xA;&#x9;while( !idLoopCond_164 ) {&#xA;&#x9;idLoopCond_164 = it_ft49.isOff();&#xA;&#x9;if ( idLoopCond_164 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.persistence.Resource r = it_ft49.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;DVK ! another resource of the same repository was containing this element&quot;);&#xA;&#xA;&#x9;r.remove(instance);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.setContainingResource(instance, this);&#xA;&#xA;&#x9;kermeta.standard.SetSuper.super_add(this, instance);&#xA;"/>
          </eAnnotations>
          <eParameters name="instance" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="load">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Resource.load()&#xD;&#xA;&#x9; * In case the metamodelURI was not previously set, metamodelURI is filled with&#xD;&#xA;&#x9; * the nsuri of the root package of the metamodel used to load the Resource after&#xD;&#xA;&#x9; * a successful load&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::persistence::Resource"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.clear();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.persistence.Loader.load(getValues(), getUri(), getMetaModelURI());&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_167 = false;&#xA;&#x9;idIfCond_167 = kermeta.standard.helper.IntegerWrapper.equals(this.size(), 0);&#xA;&#xA;&#x9;if( idIfCond_167 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;Resource load failed!&quot;);&#xA;&#xA;&#x9;kermeta.exceptions.ResourceLoadException e = ((kermeta.exceptions.ResourceLoadException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ResourceLoadException&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(&quot;Resource load failed, no object was created in this resource from &quot;, this.getUri()));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="save">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Resource.save()&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::persistence::Resource"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_168 = false;&#xA;&#x9;idIfCond_168 = this.getIsReadOnly();&#xA;&#xA;&#x9;if( idIfCond_168 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ResourceSaveException e = ((kermeta.exceptions.ResourceSaveException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ResourceSaveException&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Cannot save a readonly resource. Probably this resource was indirectly loaded when loading another resource. \n&quot;, &quot;If you really intend to save this resource, you can set isReadOnly to false, but you must ensure to do so before any resource save.\n&quot;), &quot;Note : setting isReadOnly to false on the metamodel may lead to unpredictable results&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.persistence.Saver.save(getValues(), getUri(), getMetaModelURI());&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="loadWithoutChecking">
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::persistence::Resource"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.clear();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.persistence.Loader.load(getValues(), getUri(), getMetaModelURI());&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="saveAndValidateWithEMF" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Checks the Resource using the EMF validation function, and saves it if&#xD;&#xA;&#x9; * validation succeeds&#xD;&#xA;&#x9; * Applies validation to all root objects of the Resource&#xD;&#xA;&#x9; * Returns true if the validation reports no error, raises exceptions otherwise&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.ResourceUtil.save(this, this.uri, metaModelURI, &quot;EMF&quot;, this, true);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Set&lt;Object>.remove(Object)&#xD;&#xA;&#x9; * Remove the instance from the Resource&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_169 = false;&#xA;&#x9;idIfCond_169 = this.contains(instance);&#xA;&#xA;&#x9;if( idIfCond_169 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unSetContainingResource(instance);&#xA;&#xA;&#x9;kermeta.standard.SetSuper.super_remove(this, instance);&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="instance" eType="#/8/language/structure/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Repository" abstract="true" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Abstract resource container, that contains a list of available loaded resources, &#xD;&#xA; * and methods to create or get a resource given an URI.&#xD;&#xA; * A repository cannot contain 2 resources which points to the same file (ie. that have the same normalizedURI)&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="getResource" eType="#/8/persistence/Resource">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the Resource associated with the given uri if this uri is associated with&#xD;&#xA;&#x9; * an already created Resource of the Repository.&#xD;&#xA;&#x9; * If the Repository contains no Resource associated with the given uri, creates&#xD;&#xA;&#x9; * a new Resource and loads it.&#xD;&#xA;&#x9; * In order to prevent multiple load of the same file by using variant path to the same file, all URI used by this function are normalized&#xD;&#xA;&#x9; * Raises a ResourceCreate exception if the given uri does not point to an existing&#xD;&#xA;&#x9; * model file &#xD;&#xA;&#x9; * May also raises loading exceptions if this is the first retrieval of the resource&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.RepositoryUtil.initRepository(this);&#xA;&#xA;&#x9;java.lang.String normalisedUri = this.normalizeUri(uri);&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.persistence.Resource> it = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.persistence.Resource>convertAsSet(this.getResources()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_170 = false;&#xA;&#x9;while( !idLoopCond_170 ) {&#xA;&#x9;idLoopCond_170 = it.isOff();&#xA;&#x9;if ( idLoopCond_170 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;kermeta.persistence.Resource next = it.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_171 = false;&#xA;&#x9;idIfCond_171 = kermeta.standard.helper.StringWrapper.equals(normalisedUri, next.normalizedUri());&#xA;&#xA;&#x9;if( idIfCond_171 ) {&#xA;&#xA;&#x9;result = next;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_172 = false;&#xA;&#x9;idIfCond_172 = result == null;&#xA;&#xA;&#x9;if( idIfCond_172 ) {&#xA;&#xA;&#x9;result = this.createResource(uri, &quot;&quot;);&#xA;&#xA;&#x9;result.load();&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="uri" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="createResource" eType="#/8/persistence/Resource">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Creates a new Resource with given uri, and an optional mm_uri&#xD;&#xA;&#x9; * mm_uri is required when creating a new model from scratch.&#xD;&#xA;&#x9; * Raises a ResourceCreate exception in case the Repository already&#xD;&#xA;&#x9; * contains a Resource with the given uri&#xD;&#xA;&#x9; * If uri does not points to an existing model file (in the case of&#xD;&#xA;&#x9; * a model creation), calls to load() operation will fail as long as&#xD;&#xA;&#x9; * the model has not been saved once&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="kermeta.persistence.Resource result = null;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="uri" eType="#/8/standard/JavaString"/>
          <eParameters name="mm_uri" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="findDanglingModelElements">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Search for elements referenced by one element contained by this repository  that are not contained by this repository&#xD;&#xA;&#x9; * ie. element that EMF would claim as &quot;not contained in a resource&quot;&#xD;&#xA;&#x9; * example of use :&#xD;&#xA;&#x9; *  var report : Set&amp;lt;DanglingDiagnostic&amp;gt;&#xD;&#xA;     *&#x9;report := repository.findDanglingModelElements()&#xD;&#xA;     *&#x9;report.each{ diag | stdio.writeln(diag.toString ) }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;kermeta.persistence.DanglingDiagnostic> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Set&lt;kermeta.persistence.DanglingDiagnostic>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;kermeta.persistence.DanglingDiagnostic>&quot;));&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.persistence.Resource> it_ft51 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.persistence.Resource>convertAsSet(this.getResources()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_173 = false;&#xA;&#x9;while( !idLoopCond_173 ) {&#xA;&#x9;idLoopCond_173 = it_ft51.isOff();&#xA;&#x9;if ( idLoopCond_173 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.persistence.Resource res = it_ft51.next();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft52 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Object>convertAsSet(res.getContents()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_174 = false;&#xA;&#x9;while( !idLoopCond_174 ) {&#xA;&#x9;idLoopCond_174 = it_ft52.isOff();&#xA;&#x9;if ( idLoopCond_174 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object containedObj = it_ft52.next();&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition classDef = null;&#xA;&#xA;&#x9;classDef = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(containedObj).getTypeDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_175 = false;&#xA;&#x9;idIfCond_175 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(classDef));&#xA;&#xA;&#x9;if( idIfCond_175 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft53 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(classDef.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_176 = false;&#xA;&#x9;while( !idLoopCond_176 ) {&#xA;&#x9;idLoopCond_176 = it_ft53.isOff();&#xA;&#x9;if ( idLoopCond_176 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property prop = it_ft53.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_177 = false;&#xA;&#x9;idIfCond_177 = kermeta.standard.helper.BooleanWrapper.not(prop.getIsDerived());&#xA;&#xA;&#x9;if( idIfCond_177 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_178 = false;&#xA;&#x9;idIfCond_178 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isGreater(prop.getUpper(), 1), kermeta.standard.helper.IntegerWrapper.equals(prop.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)));&#xA;&#xA;&#x9;if( idIfCond_178 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> referencedObjs = null;&#xA;&#xA;&#x9;referencedObjs = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(containedObj, prop);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_179 = false;&#xA;&#x9;idIfCond_179 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(referencedObjs));&#xA;&#xA;&#x9;if( idIfCond_179 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft54 = referencedObjs.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_180 = false;&#xA;&#x9;while( !idLoopCond_180 ) {&#xA;&#x9;idLoopCond_180 = it_ft54.isOff();&#xA;&#x9;if ( idLoopCond_180 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object referencedObj = it_ft54.next();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: exists&#xA;&#xA;java.lang.Boolean result_ft55 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft55 = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.persistence.Resource> it_ft55 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.persistence.Resource>convertAsSet(this.getResources()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_182 = false;&#xA;&#x9;while( !idLoopCond_182 ) {&#xA;&#x9;idLoopCond_182 = kermeta.standard.helper.BooleanWrapper.or(it_ft55.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft55, false));&#xA;&#x9;if ( idLoopCond_182 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda = null;&#xA;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.persistence.Resource res2 = it_ft55.next();&#xA;&#xA;&#x9;result_lambda = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Object>convertAsSet(res2.getContents()).contains(referencedObj);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;&#x9;test_ft55 = kermeta.standard.helper.BooleanWrapper.or(test_ft55, result_lambda);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;result_ft55 = test_ft55;&#xA;//End of the Inlining of the function type: exists&#xA;java.lang.Boolean idIfCond_181 = false;&#xA;&#x9;idIfCond_181 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft55), kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.or(org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.String&quot;)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;))), org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Boolean&quot;)))));&#xA;&#xA;&#x9;if( idIfCond_181 ) {&#xA;&#xA;&#x9;kermeta.persistence.DanglingDiagnostic diagnostic = ((kermeta.persistence.DanglingDiagnostic) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.DanglingDiagnostic&quot;));&#xA;&#xA;&#x9;diagnostic.setDanglingElement(referencedObj);&#xA;&#xA;&#x9;diagnostic.setReferencingElement(containedObj);&#xA;&#xA;&#x9;diagnostic.setReferencingProperty(prop);&#xA;&#xA;&#x9;result.add(diagnostic);&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.Object referencedObj = null;&#xA;&#xA;&#x9;referencedObj = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(containedObj, prop);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_183 = false;&#xA;&#x9;idIfCond_183 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(referencedObj));&#xA;&#xA;&#x9;if( idIfCond_183 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: exists&#xA;&#xA;java.lang.Boolean result_ft56 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft56 = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.persistence.Resource> it_ft56 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.persistence.Resource>convertAsSet(this.getResources()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_185 = false;&#xA;&#x9;while( !idLoopCond_185 ) {&#xA;&#x9;idLoopCond_185 = kermeta.standard.helper.BooleanWrapper.or(it_ft56.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft56, false));&#xA;&#x9;if ( idLoopCond_185 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda = null;&#xA;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.persistence.Resource res2 = it_ft56.next();&#xA;&#xA;&#x9;result_lambda = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Object>convertAsSet(res2.getContents()).contains(referencedObj);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;&#x9;test_ft56 = kermeta.standard.helper.BooleanWrapper.or(test_ft56, result_lambda);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;result_ft56 = test_ft56;&#xA;//End of the Inlining of the function type: exists&#xA;java.lang.Boolean idIfCond_184 = false;&#xA;&#x9;idIfCond_184 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft56), kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.or(org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.String&quot;)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;))), org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(referencedObj, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Boolean&quot;)))));&#xA;&#xA;&#x9;if( idIfCond_184 ) {&#xA;&#xA;&#x9;kermeta.persistence.DanglingDiagnostic diagnostic = ((kermeta.persistence.DanglingDiagnostic) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.DanglingDiagnostic&quot;));&#xA;&#xA;&#x9;diagnostic.setDanglingElement(referencedObj);&#xA;&#xA;&#x9;diagnostic.setReferencingElement(containedObj);&#xA;&#xA;&#x9;diagnostic.setReferencingProperty(prop);&#xA;&#xA;&#x9;result.add(diagnostic);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eClassifier="#/8/persistence/DanglingDiagnostic"/>
          </eGenericType>
        </eOperations>
        <eOperations name="normalizeUri" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Return a normalized version of the Uri &#xD;&#xA;&#x9; * in order to prevent several loading of the same file because they have different path that leads to them, kermeta uses normalizedURI&#xD;&#xA;&#x9; * for some of its functions (eg. repository.getResource )&#xD;&#xA;&#x9; * As EMF needs URI of the form platform:/resource or platform:/plugin, kermeta automatically&#xD;&#xA;&#x9; * normalize the uri when loading or saving. This is especially true for file:/ uri or relative uri (./ or / ) &#xD;&#xA;&#x9; * If you wish to know what concrete uri is used by kermeta when loading and saving you can use this function&#xD;&#xA;&#x9; * to check how a given uri is normalized by kermeta &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.RepositoryUtil.normalizeUri(uri);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="uri" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="resources" ordered="false"
            upperBound="-1" eType="#/8/persistence/Resource" containment="true" eOpposite="#/8/persistence/Resource/repository">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Resources created by this Repository &#xD;&#xA;&#x9; * This feature is supposed read only, otherwise it cannot garantee that an element is contained by only &#xD;&#xA;&#x9; * one Resource of a given Repository&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DanglingDiagnostic" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * class used to gather the information required to make a user friendly report about a dangling element&#xD;&#xA; * (see. findDanglingModelElements())&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="toString" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * user friendly message build with those informations&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this.getDanglingElement()), &quot; referenced by &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this.getReferencingElement())), &quot;.&quot;), this.getReferencingProperty().getName()), &quot; is dangling&quot;);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencingProperty"
            eType="#/8/language/structure/Property">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Property used to reference the dangling element  &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencingElement"
            eType="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Element that has a reference to the dangling element  &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="danglingElement" eType="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Element that is not contained by a resource in the repository  &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EMFRepository" eSuperTypes="#/8/persistence/Repository">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Repository that stores and manages resources that come from EMF&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="createResource" eType="#/8/persistence/Resource">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Repository.createResource(String, String)&#xD;&#xA;&#x9; * Create a new resource for a model given by its uri, &#xD;&#xA;&#x9; * which meta-model is stored in file given by mm_uri&#xD;&#xA;&#x9; * If file already exists, you'll be able to call the load method to concretly load the model&#xD;&#xA;&#x9; * otherwise, you can only call the save method&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::persistence::Repository"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: collect&#xA;&#xA;kermeta.standard.Sequence&lt;java.lang.String> result_ft57 = null;&#xA;&#xA;&#x9;result_ft57 = ((kermeta.standard.Sequence&lt;java.lang.String>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;java.lang.String>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.persistence.Resource> it_ft57 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.persistence.Resource>convertAsSet(this.getResources()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_187 = false;&#xA;&#x9;while( !idLoopCond_187 ) {&#xA;&#x9;idLoopCond_187 = it_ft57.isOff();&#xA;&#x9;if ( idLoopCond_187 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.String result_lambda = null;&#xA;//Beginning of the Inlining of the lambda expression: collector&#xA;kermeta.persistence.Resource r = it_ft57.next();&#xA;&#xA;&#x9;result_lambda = r.getUri();&#xA;//End of the Inlining of the lambda expression: collector&#xA;&#xA;&#x9;result_ft57.add(result_lambda);&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: collect&#xA;java.lang.Boolean idIfCond_186 = false;&#xA;&#x9;idIfCond_186 = kermeta.standard.helper.BooleanWrapper.not(result_ft57.contains(uri));&#xA;&#xA;&#x9;if( idIfCond_186 ) {&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.basetypes.RepositoryUtil.createResource(this, uri, mm_uri);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.ResourceCreateException e = ((kermeta.exceptions.ResourceCreateException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ResourceCreateException&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Trying to create a resource already existing at &quot;, uri), &quot;.\n&quot;), &quot;Remove existing resource from repository first, or use \&quot;getResource\&quot; operation.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="uri" eType="#/8/standard/JavaString"/>
          <eParameters name="mm_uri" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="ignoreLoadErrors" eType="#/8/standard/JavaBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * When loading the Resources, &#xD;&#xA;&#x9; * if there are some errors while loading some objects, those objects are ignored&#xD;&#xA;&#x9; * by default, not setting this is considered as false.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="useInterpreterInternalResources"
            eType="#/8/standard/JavaBoolean" defaultValueLiteral="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * If true, tells to the save of the resources that they should also integrate the resources from Kermeta interpreter itself&#xD;&#xA;&#x9; * this is useful for example to make a dependency to framework.km&#xD;&#xA;&#x9; * by default, not setting this is considered as false.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="kunit" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/kunit/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/kunit"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * main features of the famous Unit test tool for Kermeta language&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/kunit_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains the implementation of a unit test tool. This is a clone of&#xD;&#xA; * JUnit architecture.&#xD;&#xA; * Reference : http://junit.sourceforge.net/doc/cookstour/cookstour.htm&#xD;&#xA; *&#xD;&#xA; * Usage example of kunit can be found in fr.irisa.triskell.kermeta.samples project.&#xD;&#xA; *&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/kunit_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="AbstractFallible" abstract="true"
          eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * to be written ############################&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="assertTrue">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** process the given condition and react if it is not satisfied */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
        </eOperations>
        <eOperations name="assertWithMsg">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;     * process the given condition and react with the given message&#xD;&#xA;     * if it is not satisfied&#xD;&#xA;     */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertTrueWithMsg">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;     * process the given condition and react with the given message&#xD;&#xA;     * if it is not satisfied&#xD;&#xA;     */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
          <eParameters name="message" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertEqual">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** process the two given string and react if they are not equal */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="expected" eType="#/8/standard/JavaString"/>
          <eParameters name="actual" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="distil" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xD;&#xA;&#x9; ** reduces all runs of white-space to a single space character&#xD;&#xA;&#x9; **/"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = &quot;&quot;;&#xA;&#xA;&#x9;java.lang.Boolean white = false;&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Integer i = 0;&#xA;&#x9;java.lang.Boolean idLoopCond_188 = false;&#xA;&#x9;while( !idLoopCond_188 ) {&#xA;&#x9;idLoopCond_188 = kermeta.standard.helper.IntegerWrapper.equals(i, kermeta.standard.helper.StringWrapper.size(s));&#xA;&#x9;if ( idLoopCond_188 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;java.lang.String c = kermeta.standard.helper.CharacterWrapper.toString(kermeta.standard.helper.StringWrapper.elementAt(s, i));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_189 = false;&#xA;&#x9;idIfCond_189 = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(kermeta.standard.helper.StringWrapper.indexOf(&quot; \n\t&quot;, c), 0);&#xA;&#xA;&#x9;if( idIfCond_189 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_190 = false;&#xA;&#x9;idIfCond_190 = kermeta.standard.helper.BooleanWrapper.not(white);&#xA;&#xA;&#x9;if( idIfCond_190 ) {&#xA;&#xA;&#x9;white = true;&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(result, &quot; &quot;);&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(result, c);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_191 = false;&#xA;&#x9;idIfCond_191 = white;&#xA;&#xA;&#x9;if( idIfCond_191 ) {&#xA;&#xA;&#x9;white = false;&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="s" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertSimilar">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if the two strings are not identical modulo-white-space&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;expected = this.distil(expected);&#xA;&#xA;&#x9;actual = this.distil(actual);&#xA;&#xA;&#x9;this.assertWithMsg(kermeta.standard.helper.StringWrapper.equals(expected, actual), kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;\nexpected\t:[&quot;, expected), &quot;] != \nactual  \t:[&quot;), actual), &quot;]&quot;));&#xA;"/>
          </eAnnotations>
          <eParameters name="expected" eType="#/8/standard/JavaString"/>
          <eParameters name="actual" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertFalseWithMsg">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;     * process the given condition and react with the given message&#xD;&#xA;     * if it is satisfied&#xD;&#xA;     */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
          <eParameters name="message" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertFalse">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** process the given condition and react if it is satisfied */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
        </eOperations>
        <eOperations name="fail">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** to be used if a failure reaction is needed */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="_assert">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** process the given condition and react if it is not satisfied */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AssertionFailedError" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** AssertionViolatedException are raised when assertions are violated */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Assert" eSuperTypes="#/8/kunit/AbstractFallible">
        <eOperations name="assertWithMsg">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** will fail if condition is false */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_192 = false;&#xA;&#x9;idIfCond_192 = kermeta.standard.helper.BooleanWrapper.not(condition);&#xA;&#xA;&#x9;if( idIfCond_192 ) {&#xA;&#xA;&#x9;this.fail(kermeta.standard.helper.StringWrapper.plus(&quot;assertTrueWithMsg failed : &quot;, msg));&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertTrue">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** will fail if condition is false */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_193 = false;&#xA;&#x9;idIfCond_193 = kermeta.standard.helper.BooleanWrapper.not(condition);&#xA;&#xA;&#x9;if( idIfCond_193 ) {&#xA;&#xA;&#x9;this.fail(&quot;assertTrue failed&quot;);&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
        </eOperations>
        <eOperations name="assertTrueWithMsg">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** will fail if condition is false */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_194 = false;&#xA;&#x9;idIfCond_194 = kermeta.standard.helper.BooleanWrapper.not(condition);&#xA;&#xA;&#x9;if( idIfCond_194 ) {&#xA;&#xA;&#x9;this.fail(kermeta.standard.helper.StringWrapper.plus(&quot;assertTrueWithMsg failed : &quot;, msg));&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertEqual">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** Will fail if the two strings are not identical */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_195 = false;&#xA;&#x9;idIfCond_195 = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.StringWrapper.equals(expected, actual));&#xA;&#xA;&#x9;if( idIfCond_195 ) {&#xA;&#xA;&#x9;this.fail(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;assertEqual failed\nexpected\t:[&quot;, expected), &quot;] != \nactual\t:[&quot;), actual), &quot;]&quot;));&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="expected" eType="#/8/standard/JavaString"/>
          <eParameters name="actual" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertFalseWithMsg">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** will fail if condition is true */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_196 = false;&#xA;&#x9;idIfCond_196 = condition;&#xA;&#xA;&#x9;if( idIfCond_196 ) {&#xA;&#xA;&#x9;this.fail(kermeta.standard.helper.StringWrapper.plus(&quot;assertTrueWithMsg failed : &quot;, msg));&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertFalse">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** will fail if condition is true */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_197 = false;&#xA;&#x9;idIfCond_197 = condition;&#xA;&#xA;&#x9;if( idIfCond_197 ) {&#xA;&#xA;&#x9;this.fail(&quot;assertTrue number failed&quot;);&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
        </eOperations>
        <eOperations name="fail">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** raise a AssertionViolatedException with the provided message */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;kermeta.kunit.AssertionFailedError exception = ((kermeta.kunit.AssertionFailedError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.AssertionFailedError&quot;));&#xA;&#xA;&#x9;exception.setMessage(msg);&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( exception );&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="_assert">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** Fails if condition is false */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_198 = false;&#xA;&#x9;idIfCond_198 = kermeta.standard.helper.BooleanWrapper.not(condition);&#xA;&#xA;&#x9;if( idIfCond_198 ) {&#xA;&#xA;&#x9;this.fail(&quot;assert failed&quot;);&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="InvalidTestCaseNameException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * This exception is rose if there is a problem on the name of the test method&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="InvalidParameterException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * This is for when we try to build a suite from a class that isn't a TestCase&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Fallible" abstract="true" eSuperTypes="#/8/kunit/AbstractFallible">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * This is represents the aspect of tests that they may go wrong.&#xD;&#xA; * it defines the ability to define the conditions for success&#xD;&#xA; * (assertions) and the mechanism for recording that those &#xD;&#xA; * conditions have not been met.&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="assertTrue">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is false&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this._assert(condition);&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
        </eOperations>
        <eOperations name="assertWithMsg">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is false&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Integer number = this.number();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_199 = false;&#xA;&#x9;idIfCond_199 = kermeta.standard.helper.BooleanWrapper.not(condition);&#xA;&#xA;&#x9;if( idIfCond_199 ) {&#xA;&#xA;&#x9;java.lang.String realMsg = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;assertion number &quot;, kermeta.standard.helper.IntegerWrapper.toString(number)), &quot; failed: &quot;), msg);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_200 = false;&#xA;&#x9;idIfCond_200 = this.mustStop();&#xA;&#xA;&#x9;if( idIfCond_200 ) {&#xA;&#xA;&#x9;kermeta.kunit.AssertionFailedError exception = ((kermeta.kunit.AssertionFailedError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.AssertionFailedError&quot;));&#xA;&#xA;&#x9;exception.setMessage(realMsg);&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( exception );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;this.getLogKermeta().addFailure(this, realMsg);&#xA;}&#xA;&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertEqual">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if the two strings are not identical&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.assertWithMsg(kermeta.standard.helper.StringWrapper.equals(expected, actual), kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;\nexpected\t:[&quot;, expected), &quot;] != \nactual\t:[&quot;), actual), &quot;]&quot;));&#xA;"/>
          </eAnnotations>
          <eParameters name="expected" eType="#/8/standard/JavaString"/>
          <eParameters name="actual" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="assertTrueWithMsg">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is false&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.assertWithMsg(condition, message);&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
          <eParameters name="message" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="mustStop" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_201 = false;&#xA;&#x9;idIfCond_201 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(this.getStopOnFailure());&#xA;&#xA;&#x9;if( idIfCond_201 ) {&#xA;&#xA;&#x9;this.setStopOnFailure(true);&#xA;}&#xA;&#xA;&#xA;&#x9;result = this.getStopOnFailure();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="assertFalseWithMsg">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is true&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.assertWithMsg(kermeta.standard.helper.BooleanWrapper.not(condition), message);&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
          <eParameters name="message" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="getLogKermeta" eType="#/8/kunit/Log">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * where failures will be put &#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="EMF_renameAs" value="getLogKermeta"/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="logDefined" value=""/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="kermeta.kunit.Log result = null;&#xA;return result;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="assertFalse">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is true&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this._assert(kermeta.standard.helper.BooleanWrapper.not(condition));&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
        </eOperations>
        <eOperations name="fail">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure &#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_202 = false;&#xA;&#x9;idIfCond_202 = this.mustStop();&#xA;&#xA;&#x9;if( idIfCond_202 ) {&#xA;&#xA;&#x9;kermeta.kunit.AssertionFailedError exception = ((kermeta.kunit.AssertionFailedError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.AssertionFailedError&quot;));&#xA;&#xA;&#x9;exception.setMessage(kermeta.standard.helper.StringWrapper.plus(&quot;explicit failure: &quot;, msg));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( exception );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;this.getLogKermeta().addFailure(this, kermeta.standard.helper.StringWrapper.plus(&quot;explicit failure: &quot;, msg));&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="number" eType="#/8/standard/JavaInteger">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * current order position of counter of assertions&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_203 = false;&#xA;&#x9;idIfCond_203 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(this.getRank());&#xA;&#xA;&#x9;if( idIfCond_203 ) {&#xA;&#xA;&#x9;this.setRank(0);&#xA;}&#xA;&#xA;&#xA;&#x9;this.setRank(kermeta.standard.helper.IntegerWrapper.plus(this.getRank(), 1));&#xA;&#xA;&#x9;result = this.getRank();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_assert">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is false&#xD;&#xA;   */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Integer number = this.number();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_204 = false;&#xA;&#x9;idIfCond_204 = kermeta.standard.helper.BooleanWrapper.not(condition);&#xA;&#xA;&#x9;if( idIfCond_204 ) {&#xA;&#xA;&#x9;java.lang.String msg = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;assertion number &quot;, kermeta.standard.helper.IntegerWrapper.toString(number)), &quot; failed&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_205 = false;&#xA;&#x9;idIfCond_205 = this.mustStop();&#xA;&#xA;&#x9;if( idIfCond_205 ) {&#xA;&#xA;&#x9;kermeta.kunit.AssertionFailedError exception = ((kermeta.kunit.AssertionFailedError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.AssertionFailedError&quot;));&#xA;&#xA;&#x9;exception.setMessage(msg);&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( exception );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;this.getLogKermeta().addFailure(this, msg);&#xA;}&#xA;&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="condition" eType="#/8/standard/JavaBoolean"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="stopOnFailure" eType="#/8/standard/JavaBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * Set this attribute to false if you wish your test to not stop if the assert fails.&#xD;&#xA;   * note : if set to false, the count of failures/errors may be bigger that the number of executed test operations&#xD;&#xA;   */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="rank" eType="#/8/standard/JavaInteger">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * counter of assertions in the test method&#xD;&#xA;   */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Log" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Log is a log of failures and errors that happened to fallibles since start was called&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="addSetUpError">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds errors which occur during the SetUp phase&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getHarnessErrors()).add(((kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Error&quot;)).initFrom(test, e).makeSetUp());&#xA;"/>
          </eAnnotations>
          <eParameters name="test" eType="#/8/kunit/Fallible"/>
          <eParameters name="e" eType="#/8/exceptions/Exception"/>
        </eOperations>
        <eOperations name="addTearDownError">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds errors which occur during the TearDown phase&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getHarnessErrors()).add(((kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Error&quot;)).initFrom(test, e).makeTearDown());&#xA;"/>
          </eAnnotations>
          <eParameters name="test" eType="#/8/kunit/Fallible"/>
          <eParameters name="e" eType="#/8/exceptions/Exception"/>
        </eOperations>
        <eOperations name="newAttempt">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Increments the runtests counter&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_206 = false;&#xA;&#x9;idIfCond_206 = kermeta.standard.helper.IntegerWrapper.equals(this.getRuntests(), null);&#xA;&#xA;&#x9;if( idIfCond_206 ) {&#xA;&#xA;&#x9;this.setRuntests(0);&#xA;}&#xA;&#xA;&#xA;&#x9;this.setRuntests(kermeta.standard.helper.IntegerWrapper.plus(1, this.getRuntests()));&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="addTestError">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds an error to the list of errors&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getErrors()).add(((kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Error&quot;)).initFrom(test, e));&#xA;"/>
          </eAnnotations>
          <eParameters name="test" eType="#/8/kunit/Fallible"/>
          <eParameters name="e" eType="#/8/exceptions/Exception"/>
        </eOperations>
        <eOperations name="addFailure">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds a failed test to the list of failed tests&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Failure>convertAsOrderedSet(this.getFailures()).add(((kermeta.kunit.Failure) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Failure&quot;)).initFrom(test, msg));&#xA;"/>
          </eAnnotations>
          <eParameters name="test" eType="#/8/kunit/Fallible"/>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="runtests" eType="#/8/standard/JavaInteger">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * number of test that were run&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="errors" upperBound="-1"
            eType="#/8/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * list of detected test errors&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="harnessErrors" upperBound="-1"
            eType="#/8/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9;* list of detected errors with the test harness&#xD;&#xA;&#x9;*/"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="failures" upperBound="-1"
            eType="#/8/kunit/Failure">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * list of detected assertion failures&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Failure" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Failure represents an assertion failure stored in a failure log&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="initFrom" eType="#/8/kunit/Failure">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * initialization of the failure&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.kunit.Failure result = null;&#xA;&#xA;&#x9;this.setFailure(fallible);&#xA;&#xA;&#x9;this.setMessage(msg);&#xA;&#xA;&#x9;result = this;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="fallible" eType="#/8/kunit/Fallible"/>
          <eParameters name="msg" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="toString" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * overwrite the default method, in order to add the message&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this.getFailure()), &quot; &quot;), this.getMessage());&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="message" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the stored message (given or generated one)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="failure" eType="#/8/kunit/Fallible">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the stored failure&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="ErrorKind">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * all kinds of error we can meet&#xD;&#xA; */"/>
        </eAnnotations>
        <eLiterals name="setUpError" literal="setUpError"/>
        <eLiterals name="testError" value="1" literal="testError"/>
        <eLiterals name="tearDownError" value="2" literal="tearDownError"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Error" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Error represents an occurrence of an exception in setUp, tearDown or a test&#xD;&#xA; * and is stored in a failure log&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="makeTearDown" eType="#/8/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Changes the type of an error to makeTearDownError, the best way to use&#xD;&#xA;&#x9; * this method is to call it after the init from line:&#xD;&#xA;&#x9; * var e : Error init Error.new.initFrom(f, e).makeTearDown&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.kunit.Error result = null;&#xA;&#xA;&#x9;this.setKind(kermeta.kunit.ErrorKind.getByName(&quot;tearDownError&quot;));&#xA;&#xA;&#x9;result = this;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="makeSetUp" eType="#/8/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Changes the type of an error to SetUpError, the best way to use&#xD;&#xA;&#x9; * this method is to call it after the init from line:&#xD;&#xA;&#x9; * var e : Error init Error.new.initFrom(f, e).makeSetUp&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.kunit.Error result = null;&#xA;&#xA;&#x9;this.setKind(kermeta.kunit.ErrorKind.getByName(&quot;setUpError&quot;));&#xA;&#xA;&#x9;result = this;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="initFrom" eType="#/8/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Sets up a new error with failable object and the exception that occurred&#xD;&#xA;&#x9; * by default it will be a test error. Use makeSetUp or makeTearDown to&#xD;&#xA;&#x9; * change its type&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.kunit.Error result = null;&#xA;&#xA;&#x9;this.setError(error);&#xA;&#xA;&#x9;this.setException(e);&#xA;&#xA;&#x9;this.setKind(kermeta.kunit.ErrorKind.getByName(&quot;testError&quot;));&#xA;&#xA;&#x9;result = this;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="error" eType="#/8/kunit/Fallible"/>
          <eParameters name="e" eType="#/8/exceptions/Exception"/>
        </eOperations>
        <eOperations name="toString" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * overwrite the default method, in order to add :&#xD;&#xA;&#x9; *   - the type&#xD;&#xA;&#x9; *   - the message&#xD;&#xA;&#x9; *   - the stack trace&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_207 = false;&#xA;&#x9;idIfCond_207 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this.getKind(), kermeta.kunit.ErrorKind.getByName(&quot;testError&quot;));&#xA;&#xA;&#x9;if( idIfCond_207 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this.getError());&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(this.getError()).getName(), &quot;.&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_208 = false;&#xA;&#x9;idIfCond_208 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this.getKind(), kermeta.kunit.ErrorKind.getByName(&quot;setUpError&quot;));&#xA;&#xA;&#x9;if( idIfCond_208 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(result, &quot;setUp()&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(result, &quot;tearDown()&quot;);&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(result, &quot; raised &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(this.getException()).getName());&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_209 = false;&#xA;&#x9;idIfCond_209 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(this.getException().getMessage(), null);&#xA;&#xA;&#x9;if( idIfCond_209 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(result, &quot;\n    Caused by: &quot;), this.getException().getMessage());&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(result, &quot;\n    (no message)&quot;);&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_210 = false;&#xA;&#x9;idIfCond_210 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(this.getException().getStackTrace(), null);&#xA;&#xA;&#x9;if( idIfCond_210 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(result, &quot;\n    Stack Trace:\n&quot;), this.getException().getStackTrace());&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(result, &quot;\n    (no stack trace)&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="exception" eType="#/8/exceptions/Exception">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the Kermeta exception corresponding to the error&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#/8/kunit/ErrorKind">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the nature of the stored error&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="error" eType="#/8/kunit/Fallible">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the stored error&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Test" abstract="true" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The abstact notion of a test which is runnable and which has a log&#xD;&#xA; * in which it can keep note of failures&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="setLogKermeta">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Initializes the log where failures and errors will be put&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="EMF_renameAs" value="setLogKermeta"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="paramNotVoid" value=""/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="logNotVoid" value=""/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.setLog(log);&#xA;"/>
          </eAnnotations>
          <eParameters name="log" eType="#/8/kunit/Log"/>
        </eOperations>
        <eOperations name="run">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Execute the test and verify its assertions&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="logNotVoid" value=""/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
        </eOperations>
        <eOperations name="initLog" eType="#/8/kunit/Log">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * called when run by the java testrunner&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.kunit.Log result = null;&#xA;&#xA;&#x9;this.setLog(((kermeta.kunit.Log) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Log&quot;)));&#xA;&#xA;&#x9;result = this.getLog();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="log" eType="#/8/kunit/Log">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;     * where failures and errors will be put &#xD;&#xA;     */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TestSuite" eSuperTypes="#/8/kunit/Test">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * A TestSuite is a structured collection of tests, using the&#xD;&#xA; * composite pattern, all tests are runnable and have a log&#xD;&#xA; * In addition a suite can be populated automatically from a&#xD;&#xA; * test case class with one test case object for each test&#xD;&#xA; * method in the class.&#xD;&#xA; *  You can make a suite and populate it manually like this:&#xD;&#xA; *&#xD;&#xA; *  var suite : TestSuite init TestSuite.new.&#xD;&#xA; *  suite.tests.add(t1)&#xD;&#xA; *&#xD;&#xA; *  Alternatively you can populate a suite automatically from&#xD;&#xA; *  a class that inherits TestCase and which has several methods&#xD;&#xA; *  called test:&#xD;&#xA; *&#xD;&#xA; *  var suite : TestSuite init TestSuite.new.addAllTestCasesFrom(InterestingTestCaseSet)&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="run" ordered="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * Run all the tests in the test suite&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::Test"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.kunit.Test> it_ft58 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Test>convertAsOrderedSet(this.getTests()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_211 = false;&#xA;&#x9;while( !idLoopCond_211 ) {&#xA;&#x9;idLoopCond_211 = it_ft58.isOff();&#xA;&#x9;if ( idLoopCond_211 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.kunit.Test t = it_ft58.next();&#xA;&#xA;&#x9;t.setLogKermeta(this.getLog());&#xA;&#xA;&#x9;t.run();&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="addAllTestCasesFromAspects">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9;  * to be written #####################################################&#xD;&#xA;&#x9;  */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Operation> result_ft60 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Operation elem_ft60 = null;&#xA;&#xA;&#x9;result_ft60 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Operation>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Operation>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Operation> it_ft60 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Operation>convertAsOrderedSet(anAspect.getOwnedOperation()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_213 = false;&#xA;&#x9;while( !idLoopCond_213 ) {&#xA;&#x9;idLoopCond_213 = it_ft60.isOff();&#xA;&#x9;if ( idLoopCond_213 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft60 = it_ft60.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_214 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Operation o = elem_ft60;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_215 = false;&#xA;&#x9;idIfCond_215 = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(kermeta.standard.helper.StringWrapper.size(o.getName()), 4);&#xA;&#xA;&#x9;if( idIfCond_215 ) {&#xA;&#xA;&#x9;idIfCond_214 = kermeta.standard.helper.StringWrapper.equals(kermeta.standard.helper.StringWrapper.substring(o.getName(), 0, 4), &quot;test&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;idIfCond_214 = false;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_214 ) {&#xA;&#xA;&#x9;result_ft60.add(elem_ft60);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Operation> it_ft59 = result_ft60.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_212 = false;&#xA;&#x9;while( !idLoopCond_212 ) {&#xA;&#x9;idLoopCond_212 = it_ft59.isOff();&#xA;&#x9;if ( idLoopCond_212 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Operation o = it_ft59.next();&#xA;&#xA;&#x9;kermeta.kunit.TestCase testCase = null;&#xA;&#xA;&#x9;testCase = (kermeta.kunit.TestCase) testCaseClass._new();&#xA;&#xA;&#x9;testCase.setTestMethodName(o.getName());&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Test>convertAsOrderedSet(this.getTests()).add(testCase);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="testCaseClass" eType="#/8/language/structure/Class"/>
          <eParameters name="anAspect" eType="#/8/language/structure/ClassDefinition"/>
        </eOperations>
        <eOperations name="addAllTestCasesFrom" eType="#/8/kunit/TestSuite">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9;  * Add to this suite, a set of test cases of type c, one for each&#xD;&#xA;&#x9;  * test method in class c. C must be a descendent of TestCase&#xD;&#xA;&#x9;  */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="testCaseClassIsATestCase" value=""/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.kunit.TestSuite result = null;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: exists&#xA;&#xA;java.lang.Boolean result_ft61 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft61 = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Class> it_ft61 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Class>convertAsSet(testCaseClass.getSuperClass()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_217 = false;&#xA;&#x9;while( !idLoopCond_217 ) {&#xA;&#x9;idLoopCond_217 = kermeta.standard.helper.BooleanWrapper.or(it_ft61.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(test_ft61, false));&#xA;&#x9;if ( idLoopCond_217 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda = null;&#xA;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Class sc = it_ft61.next();&#xA;&#xA;&#x9;result_lambda = sc.equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.kunit.TestCase&quot;));&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;&#x9;test_ft61 = kermeta.standard.helper.BooleanWrapper.or(test_ft61, result_lambda);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;result_ft61 = test_ft61;&#xA;//End of the Inlining of the function type: exists&#xA;java.lang.Boolean idIfCond_216 = false;&#xA;&#x9;idIfCond_216 = kermeta.standard.helper.BooleanWrapper.not(result_ft61);&#xA;&#xA;&#x9;if( idIfCond_216 ) {&#xA;&#xA;&#x9;kermeta.exceptions.Exception e = ((kermeta.kunit.InvalidParameterException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.InvalidParameterException&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(&quot;Cannot build a suite from class: &quot;, testCaseClass.getName()));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Operation> result_ft63 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Operation elem_ft63 = null;&#xA;&#xA;&#x9;result_ft63 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Operation>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Operation>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Operation> it_ft63 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Operation>convertAsSet(testCaseClass.getOwnedOperation()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_219 = false;&#xA;&#x9;while( !idLoopCond_219 ) {&#xA;&#x9;idLoopCond_219 = it_ft63.isOff();&#xA;&#x9;if ( idLoopCond_219 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft63 = it_ft63.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_220 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Operation o = elem_ft63;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_221 = false;&#xA;&#x9;idIfCond_221 = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(kermeta.standard.helper.StringWrapper.size(o.getName()), 4);&#xA;&#xA;&#x9;if( idIfCond_221 ) {&#xA;&#xA;&#x9;idIfCond_220 = kermeta.standard.helper.StringWrapper.equals(kermeta.standard.helper.StringWrapper.substring(o.getName(), 0, 4), &quot;test&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;idIfCond_220 = false;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_220 ) {&#xA;&#xA;&#x9;result_ft63.add(elem_ft63);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Operation> it_ft62 = result_ft63.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_218 = false;&#xA;&#x9;while( !idLoopCond_218 ) {&#xA;&#x9;idLoopCond_218 = it_ft62.isOff();&#xA;&#x9;if ( idLoopCond_218 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Operation o = it_ft62.next();&#xA;&#xA;&#x9;kermeta.kunit.TestCase testCase = null;&#xA;&#xA;&#x9;testCase = (kermeta.kunit.TestCase) testCaseClass._new();&#xA;&#xA;&#x9;testCase.setTestMethodName(o.getName());&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Test>convertAsOrderedSet(this.getTests()).add(testCase);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;result = this;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="testCaseClass" eType="#/8/language/structure/Class"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="tests" upperBound="-1"
            eType="#/8/kunit/Test">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * The collection of tests which will be ran as the suite&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TestCase" abstract="true" eSuperTypes="#/8/kunit/Test #/8/kunit/Fallible">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * A test case comprises one or more test methods plus&#xD;&#xA; * setUp and tearDown that build and destroy their test harness.&#xD;&#xA; * An instance of a subclass of TestCase should have its&#xD;&#xA; * testMethodName set to the name of one of its operations&#xD;&#xA; * which should be called whe the test is run. You can do this&#xD;&#xA; * yourself:&#xD;&#xA; *&#xD;&#xA; * var testCase : TestCase init MyTestCaseClass.new.setTestMethodName(&quot;testSomething&quot;)&#xD;&#xA; *&#xD;&#xA; * Alternatively if your TestCase Class has many methods whose&#xD;&#xA; * name begins with 'test' you can create a set of instaces already&#xD;&#xA; * set up with their testMethodName using the addAllTestCasesFrom&#xD;&#xA; * operation on TestSuite&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="getTestMethodName" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * accessor on the method name&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = this.get__testMethodName();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="run" ordered="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Execute the whole test case : SetUp, test method, TearDown&#xD;&#xA;&#x9; * The assertions of the test method are computed&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::Test"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.getLog().newAttempt();&#xA;&#xA;&#x9;{&#xA;try {&#xA;&#x9;this.setUp();&#xA;&#xA;&#x9;{&#xA;try {&#xA;&#x9;kermeta.interpreter.DynamicExpression de = ((kermeta.interpreter.DynamicExpression) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.interpreter.DynamicExpression&quot;));&#xA;&#xA;&#x9;de.initializeDefaults();&#xA;&#xA;&#x9;de.setSelfClass((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(this).getTypeDefinition());&#xA;&#xA;&#x9;de.parse(kermeta.standard.helper.StringWrapper.plus(&quot;self.&quot;, this.getTestMethodName()));&#xA;&#xA;&#x9;de.execute(this, ((kermeta.utils.Hashtable&lt;java.lang.String, kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&lt;java.lang.String, kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;{&#xA;try {&#xA;&#x9;this.tearDown();&#xA;} catch( org.kermeta.compil.runtime.helper.error.KRuntimeError ex_switcher_1 ) {&#xA;if( ex_switcher_1.getRealException() instanceof kermeta.exceptions.Exception ) {&#xA;kermeta.exceptions.Exception e = (kermeta.exceptions.Exception) ex_switcher_1.getRealException();&#xA;this.getLog().addTearDownError(this, e);&#xA;}&#xA;}&#xA;}&#xA;} catch( org.kermeta.compil.runtime.helper.error.KRuntimeError ex_switcher_2 ) {&#xA;if( ex_switcher_2.getRealException() instanceof kermeta.kunit.AssertionFailedError ) {&#xA;kermeta.kunit.AssertionFailedError afe = (kermeta.kunit.AssertionFailedError) ex_switcher_2.getRealException();&#xA;this.getLog().addFailure(this, kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(afe.getMessage(), &quot;\nstack trace:\n&quot;), afe.getStackTrace()));&#xA;}if( ex_switcher_2.getRealException() instanceof kermeta.exceptions.Exception ) {&#xA;kermeta.exceptions.Exception e1 = (kermeta.exceptions.Exception) ex_switcher_2.getRealException();&#xA;this.getLog().addTestError(this, e1);{&#xA;try {&#xA;&#x9;this.tearDown();&#xA;} catch( org.kermeta.compil.runtime.helper.error.KRuntimeError ex_switcher_3 ) {&#xA;if( ex_switcher_3.getRealException() instanceof kermeta.exceptions.Exception ) {&#xA;kermeta.exceptions.Exception e = (kermeta.exceptions.Exception) ex_switcher_3.getRealException();&#xA;this.getLog().addTearDownError(this, e);&#xA;}&#xA;}&#xA;}&#xA;}&#xA;}&#xA;}&#xA;} catch( org.kermeta.compil.runtime.helper.error.KRuntimeError ex_switcher_4 ) {&#xA;if( ex_switcher_4.getRealException() instanceof kermeta.exceptions.Exception ) {&#xA;kermeta.exceptions.Exception e = (kermeta.exceptions.Exception) ex_switcher_4.getRealException();&#xA;this.getLog().addSetUpError(this, e);&#xA;}&#xA;}&#xA;}&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * overwrites the default method for more informative output&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(this).getName(), &quot;.&quot;), this.getTestMethodName()), &quot;()&quot;);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="tearDown">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the things to be done after execution of the test method&#xD;&#xA;&#x9; * (designed to be overwritten in real TestCase classes) &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
        </eOperations>
        <eOperations name="raiseIfHasFailures">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * operation used when the TestCase is run from a java test runner, encapsulates the failures results&#xD;&#xA;&#x9; * into an AssertionFailedError so the TestRunner can detect it&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.String msg = &quot;&quot;;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_222 = false;&#xA;&#x9;idIfCond_222 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Failure>convertAsOrderedSet(this.getLog().getFailures()).empty());&#xA;&#xA;&#x9;if( idIfCond_222 ) {&#xA;&#xA;&#x9;msg = &quot;Failures: &quot;;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.kunit.Failure> it_ft64 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Failure>convertAsOrderedSet(this.getLog().getFailures()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_223 = false;&#xA;&#x9;while( !idLoopCond_223 ) {&#xA;&#x9;idLoopCond_223 = it_ft64.isOff();&#xA;&#x9;if ( idLoopCond_223 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.kunit.Failure f = it_ft64.next();&#xA;&#xA;&#x9;msg = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(msg, &quot;\n   &quot;), f.toString());&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;kermeta.kunit.AssertionFailedError exception = ((kermeta.kunit.AssertionFailedError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.AssertionFailedError&quot;));&#xA;&#xA;&#x9;exception.setMessage(msg);&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( exception );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_224 = false;&#xA;&#x9;idIfCond_224 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getLog().getErrors()).empty());&#xA;&#xA;&#x9;if( idIfCond_224 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.kunit.Error> it_ft65 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getLog().getErrors()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_225 = false;&#xA;&#x9;while( !idLoopCond_225 ) {&#xA;&#x9;idLoopCond_225 = it_ft65.isOff();&#xA;&#x9;if ( idLoopCond_225 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.kunit.Error f = it_ft65.next();&#xA;&#xA;&#x9;msg = &quot;Errors: &quot;;&#xA;&#xA;&#x9;msg = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(msg, &quot;\n   &quot;), f.toString());&#xA;&#xA;&#x9;kermeta.exceptions.Exception exception = ((kermeta.exceptions.Exception) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.Exception&quot;));&#xA;&#xA;&#x9;exception.setMessage(msg);&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( exception );&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getLog" eType="#/8/kunit/Log">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * accessor on the log&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::kunit::Fallible"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.kunit.Log result = null;&#xA;&#xA;&#x9;result = this.getLog();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="setTestMethodName" eType="#/8/kunit/TestCase">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Sets the name of the method from the concrete subclass of&#xD;&#xA;&#x9; *  TestCase that should be executed when this TestCase instance&#xD;&#xA;&#x9; * is run as a test.&#xD;&#xA;&#x9; * Throws invalidTestCaseNameException if the given string is not&#xD;&#xA;&#x9; * the name of a method in the test case&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.kunit.TestCase result = null;&#xA;&#xA;&#x9;this.set__testMethodName(name);&#xA;&#xA;&#x9;result = this;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="name" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="setUp">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the things to be done before execution of the test method&#xD;&#xA;&#x9; * (designed to be overwritten in real TestCase classes) &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value=""/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="__testMethodName" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the name of the method which corresponds to the test case in the test class&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TestRunner" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Create and use a test runner to run one or more tests and print the failure log. E.g.:&#xD;&#xA; * do&#xD;&#xA; *&#x9;     var suite : TestSuite init TestSuite.new.addAllTestCasesFrom(InterestingTestCaseSet)&#xD;&#xA; *&#x9;     var runner : TestRunner init TestRunner.new&#xD;&#xA; *&#x9;     runner.run(suite)&#xD;&#xA; *&#x9;     runner.printLogs&#xD;&#xA; * end&#xD;&#xA; *&#xD;&#xA; * Where InterestingTestCaseSet is a subclass of TestCase and contains several test... methods&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="printTestResult" ordered="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Prints the log or errors and failures from a test run.&#xD;&#xA;&#x9; * Run some tests first.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;\n---------------------------------------------  TEST RESULTS-----------------------------------------------\n&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_226 = false;&#xA;&#x9;idIfCond_226 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Failure>convertAsOrderedSet(this.getLog().getFailures()).empty());&#xA;&#xA;&#x9;if( idIfCond_226 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;\nFailures: &quot;);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.kunit.Failure> it_ft66 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Failure>convertAsOrderedSet(this.getLog().getFailures()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_227 = false;&#xA;&#x9;while( !idLoopCond_227 ) {&#xA;&#x9;idLoopCond_227 = it_ft66.isOff();&#xA;&#x9;if ( idLoopCond_227 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.kunit.Failure f = it_ft66.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;\n   &quot;, f.toString()));&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_228 = false;&#xA;&#x9;idIfCond_228 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getLog().getErrors()).empty());&#xA;&#xA;&#x9;if( idIfCond_228 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;\nErrors: &quot;);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.kunit.Error> it_ft67 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getLog().getErrors()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_229 = false;&#xA;&#x9;while( !idLoopCond_229 ) {&#xA;&#x9;idLoopCond_229 = it_ft67.isOff();&#xA;&#x9;if ( idLoopCond_229 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.kunit.Error e = it_ft67.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;\n   &quot;, e.toString()));&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_230 = false;&#xA;&#x9;idIfCond_230 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getLog().getHarnessErrors()).empty());&#xA;&#xA;&#x9;if( idIfCond_230 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;\nErrors from setUp or tearDown : &quot;);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.kunit.Error> it_ft68 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getLog().getHarnessErrors()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_231 = false;&#xA;&#x9;while( !idLoopCond_231 ) {&#xA;&#x9;idLoopCond_231 = it_ft68.isOff();&#xA;&#x9;if ( idLoopCond_231 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.kunit.Error e = it_ft68.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;\n   &quot;, e.toString()));&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;\n Summary: &quot;);&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;   Number of launched tests : &quot;, kermeta.standard.helper.IntegerWrapper.toString(this.getLog().getRuntests())));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;   Number of failures : &quot;, kermeta.standard.helper.IntegerWrapper.toString(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Failure>convertAsOrderedSet(this.getLog().getFailures()).size())));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;   Number of errors : &quot;, kermeta.standard.helper.IntegerWrapper.toString(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getLog().getErrors()).size())));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;   Number of errors in setUp or tearDown: &quot;, kermeta.standard.helper.IntegerWrapper.toString(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.kunit.Error>convertAsOrderedSet(this.getLog().getHarnessErrors()).size())));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(&quot;\n-------------------------------------------------------------------------------------------------------------------------------\n&quot;);&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="runTest">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Use this to run a test case or a test suite.&#xD;&#xA;&#x9; * If you want to run all the test.... methods in a TestCase class,&#xD;&#xA;&#x9; *  you can populate a suite with TestSuite.addAllTestCasesFrom&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="testNotVoid" value=""/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="logNotVoid" value=""/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.setLog(((kermeta.kunit.Log) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.Log&quot;)));&#xA;&#xA;&#x9;test.setLogKermeta(this.getLog());&#xA;&#xA;&#x9;test.run();&#xA;"/>
          </eAnnotations>
          <eParameters name="test" eType="#/8/kunit/Test"/>
        </eOperations>
        <eOperations name="run">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9;  * For backwards compatibility with old kunit, this takes a test case class&#xD;&#xA;&#x9;  * and creates the necessary suite, and runs it. DEPRECATED&#xD;&#xA;&#x9;  */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="cIsATestCase" value=""/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.runTest(((kermeta.kunit.TestSuite) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.kunit.TestSuite&quot;)).addAllTestCasesFrom(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;testCaseClass&quot;)));&#xA;"/>
          </eAnnotations>
          <eParameters name="testCaseClass" eType="#/8/language/structure/Class"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="log" eType="#/8/kunit/Log"
            containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Where to register the failures and errors&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="standard" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/standard/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/standard"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Defines value types &#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/primitive_types_view.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Defines Collection types &#xD;&#xA; * &lt;img src=&quot;./figures/collections_view.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains types dedicated to dealing with java objects&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/java_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Void" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The class Void &#xD;&#xA; * By convention it is a sub-type of everything&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="isInstanceOf" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = true;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="type" eType="#/8/language/structure/Type"/>
        </eOperations>
        <eOperations name="isVoid" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Return true&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = true;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the String identifier '&lt;void>'&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = &quot;&lt;void>&quot;;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueType" abstract="true" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The abstract class ValueType does not contain any feature.&#xD;&#xA; * However, any instance of a sub-class of ValueType will be passed by value &#xD;&#xA; * instead of by reference for any other objects.&#xD;&#xA; * that means that each time you := such object it will call the clone function associated to it (Not implemented yet except for Integer, String and boolean!!!)&#xD;&#xA; * &#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Comparable" abstract="true" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The abstract class Comparable defines a set of operation&#xD;&#xA; * to compare instances of a class.&#xD;&#xA; * Sub-classes only has to implement abstract operation compareTo.&#xD;&#xA; * All other methods are defined w.r.t. the compareTo operation&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="compareTo" eType="#/8/standard/JavaInteger">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * This method should be implemented by any class that inherits&#xD;&#xA;&#x9; * from Comparable.&#xD;&#xA;&#x9; * returns 0 if self = other&#xD;&#xA;&#x9; * returns > 0 if  self > other&#xD;&#xA;&#x9; * returns &lt; 0 if  self &lt; other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="RecopyInValueTypes" value="true"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="java.lang.Integer result = null;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="other" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="isGreaterOrEqual" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self >= other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="RecopyInValueTypes" value="true"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(this.compareTo(other), 0);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="other" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="isLowerOrEqual" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self &lt;= other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="RecopyInValueTypes" value="true"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(this.compareTo(other), 0);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="other" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="isLower" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self &lt; other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="RecopyInValueTypes" value="true"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(this.compareTo(other), 0);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="other" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="isGreater" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self > other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="RecopyInValueTypes" value="true"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(this.compareTo(other), 0);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="other" eType="#/8/language/structure/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Summable" abstract="true" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The abstract class Summable defines a set of operation&#xD;&#xA; * to sum instances of a class.&#xD;&#xA; * Sub-classes only has to implement abstract operation plus.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="plus">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Summarization method to be implemented by any summable class.&#xD;&#xA;&#x9; * The parameter must have the same type (or one of its subtypes)&#xD;&#xA;&#x9; *  than the current object .&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="RecopyInValueTypes" value="true"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="G result = null;&#xA;return result;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/Summable/G"/>
          <eParameters name="other">
            <eGenericType eTypeParameter="#/8/standard/Summable/G"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NotComparableException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * raised when two objects are not comparable&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="JavaBoolean" instanceClassName="java.lang.Boolean"/>
      <eClassifiers xsi:type="ecore:EDataType" name="JavaNumeric" instanceClassName="java.lang.Number"/>
      <eClassifiers xsi:type="ecore:EDataType" name="JavaInteger" instanceClassName="java.lang.Integer"/>
      <eClassifiers xsi:type="ecore:EDataType" name="JavaReal" instanceClassName="java.lang.Double"/>
      <eClassifiers xsi:type="ecore:EDataType" name="JavaCharacter" instanceClassName="java.lang.Character"/>
      <eClassifiers xsi:type="ecore:EDataType" name="JavaString" instanceClassName="java.lang.String"/>
      <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Object">
        <eAnnotations source="kermeta">
          <details key="alias" value="kermeta::standard::Integer"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Unlimited natural is used for reflection.&#xD;&#xA; * It is mapped to integer.equals().&#xD;&#xA; * Any negative number is interpreted as '*'&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Collection" abstract="true" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Collection is the root abstract class for all kermeta collections&#xD;&#xA; */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="EMF_needProperty" value="name=values isUnique=false isOrdered=false javaClass=org.eclipse.emf.common.util.EList"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="asOrderedSet">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new OrderedSet built from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="kermeta.standard.OrderedSet&lt;G> result = null;&#xA;return result;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/OrderedSet">
            <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="asSequence">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Sequence built from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="kermeta.standard.Sequence&lt;G> result = null;&#xA;return result;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Sequence">
            <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="containsAll" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if current Collection contains all elements of Collection elements&#xD;&#xA;&#x9; * See Collection&lt;G>.contains(Object)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = true;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = elements.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_333 = false;&#xA;&#x9;while( !idLoopCond_333 ) {&#xA;&#x9;idLoopCond_333 = kermeta.standard.helper.BooleanWrapper.or(it.isOff(), kermeta.standard.helper.BooleanWrapper.not(result));&#xA;&#x9;if ( idLoopCond_333 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;result = this.contains(it.next());&#xA;}&#xA;&#x9;}&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Collection">
              <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="excludes" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if the Collection does not contain element&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(this.contains(element));&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="isNotEmpty" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * OCL alignment API&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Collection contains at least&#xD;&#xA;&#x9; * one element &#xD;&#xA;&#x9; * See also Collection&lt;G>.contains(Object)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(this.empty());&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="addAll">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds all elements from the Collection elements in the current Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft84 = elements.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_334 = false;&#xA;&#x9;while( !idLoopCond_334 ) {&#xA;&#x9;idLoopCond_334 = it_ft84.isOff();&#xA;&#x9;if ( idLoopCond_334 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;G element = it_ft84.next();&#xA;&#xA;&#x9;this.add(element);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Collection">
              <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="includesAll" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * OCL API alignment, does the same as containsAll&#xD;&#xA;&#x9; * See Collection&lt;G>.containsAll(Collection&lt;G>)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = this.containsAll(elements);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Collection">
              <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="clear">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes all elements from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.clear(this);&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="size" eType="#/8/standard/JavaInteger">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the number of elements in the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.size(this);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="empty" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Collection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.equals(this.size(), 0);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="asBag">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag built from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="kermeta.standard.Bag&lt;G> result = null;&#xA;return result;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Bag">
            <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="one">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an element from the Collection or void if the Collection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_335 = false;&#xA;&#x9;idIfCond_335 = kermeta.standard.helper.IntegerWrapper.equals(this.size(), 0);&#xA;&#xA;&#x9;if( idIfCond_335 ) {&#xA;&#xA;&#x9;result = null;&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#xA;&#x9;result = it.next();&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/Collection/G"/>
        </eOperations>
        <eOperations name="sum">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Sum the element if they are summable (ie implement '+' operator by inheriting of the class Summable)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;G res = null;&#xA;&#xA;&#x9;kermeta.standard.Summable&lt;G> tmp = null;&#xA;&#xA;&#x9;G o = null;&#xA;&#xA;&#x9;o = this.one();&#xA;&#xA;&#x9;tmp = (kermeta.standard.Summable&lt;G>) o;&#xA;&#xA;&#x9;result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_336 = false;&#xA;&#x9;idIfCond_336 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(tmp, null);&#xA;&#xA;&#x9;if( idIfCond_336 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft85 = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_337 = false;&#xA;&#x9;while( !idLoopCond_337 ) {&#xA;&#x9;idLoopCond_337 = it_ft85.isOff();&#xA;&#x9;if ( idLoopCond_337 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;G elem = it_ft85.next();&#xA;&#xA;&#x9;o = elem;&#xA;&#xA;&#x9;tmp = (kermeta.standard.Summable&lt;G>) o;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_338 = false;&#xA;&#x9;idIfCond_338 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(tmp, null);&#xA;&#xA;&#x9;if( idIfCond_338 ) {&#xA;&#xA;&#x9;res = tmp.plus(res);&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = res;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/Collection/G"/>
        </eOperations>
        <eOperations name="isEmpty" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * OCL alignment API, does the same as empty&#xD;&#xA;&#x9; * See Collection&lt;G>.empty()&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = this.empty();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds an element in the Collection (default implementation)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.add(this, element);&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="contains" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Collection contains at least one&#xD;&#xA;&#x9; * instance of element, based on G.equals(elt : Object) definition&#xD;&#xA;&#x9; * Note: for checking whether a physical element is contained by the collection,&#xD;&#xA;&#x9; * make use of G.oid()&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_339 = false;&#xA;&#x9;while( !idLoopCond_339 ) {&#xA;&#x9;idLoopCond_339 = kermeta.standard.helper.BooleanWrapper.or(it.isOff(), result);&#xA;&#x9;if ( idLoopCond_339 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(it.next(), element);&#xA;}&#xA;&#x9;}&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="includes" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * OCL API alignment, doeas the same as contains&#xD;&#xA;&#x9; * See Collection&lt;G>.contains(Object)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = this.contains(element);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes all instances of element from the Collection, based on&#xD;&#xA;&#x9; * G.equals(Object) definition&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="doesntContainsElementAnymore" value=""/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;G elem = null;&#xA;&#xA;&#x9;&#xA;&#x9;elem = null;&#xA;//Beginning of the Inlining of the function type: detect&#xA;&#xA;G result_ft86 = null;&#xA;&#xA;&#x9;G elem_ft86 = null;&#xA;&#xA;&#x9;result_ft86 = null;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft86 = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_341 = false;&#xA;&#x9;while( !idLoopCond_341 ) {&#xA;&#x9;idLoopCond_341 = kermeta.standard.helper.BooleanWrapper.or(it_ft86.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(result_ft86, null));&#xA;&#x9;if ( idLoopCond_341 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft86 = it_ft86.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_342 = false;&#xA;//Beginning of the Inlining of the lambda expression: detector&#xA;G e = elem_ft86;&#xA;&#xA;&#x9;idIfCond_342 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(e, element);&#xA;//End of the Inlining of the lambda expression: detector&#xA;&#xA;&#xA;&#x9;if( idIfCond_342 ) {&#xA;&#xA;&#x9;result_ft86 = elem_ft86;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: detect&#xA;&#xA;&#x9;java.lang.Boolean idLoopCond_340 = false;&#xA;&#x9;while( !idLoopCond_340 ) {&#xA;&#x9;idLoopCond_340 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(elem, null);&#xA;&#x9;if ( idLoopCond_340 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(this, elem);&#xA;&#xA;&#x9;elem = null;&#xA;//Beginning of the Inlining of the function type: detect&#xA;&#xA;G result_ft87 = null;&#xA;&#xA;&#x9;G elem_ft87 = null;&#xA;&#xA;&#x9;result_ft87 = null;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft87 = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_343 = false;&#xA;&#x9;while( !idLoopCond_343 ) {&#xA;&#x9;idLoopCond_343 = kermeta.standard.helper.BooleanWrapper.or(it_ft87.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(result_ft87, null));&#xA;&#x9;if ( idLoopCond_343 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft87 = it_ft87.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_344 = false;&#xA;//Beginning of the Inlining of the lambda expression: detector&#xA;G e = elem_ft87;&#xA;&#xA;&#x9;idIfCond_344 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(e, element);&#xA;//End of the Inlining of the lambda expression: detector&#xA;&#xA;&#xA;&#x9;if( idIfCond_344 ) {&#xA;&#xA;&#x9;result_ft87 = elem_ft87;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: detect&#xA;&#xA;}&#xA;&#x9;}&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="excludesAll" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if the Collection contains no element of Collection elements&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = true;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = elements.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_345 = false;&#xA;&#x9;while( !idLoopCond_345 ) {&#xA;&#x9;idLoopCond_345 = kermeta.standard.helper.BooleanWrapper.or(it.isOff(), kermeta.standard.helper.BooleanWrapper.not(result));&#xA;&#x9;if ( idLoopCond_345 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(this.contains(it.next()));&#xA;}&#xA;&#x9;}&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Collection">
              <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="iterator">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an Iterator on the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Iterator&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Iterator&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Iterator&lt;G>&quot;));&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.iterator(this, result);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Iterator">
            <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="asSet">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set built from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="kermeta.standard.Set&lt;G> result = null;&#xA;return result;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="count" eType="#/8/standard/JavaInteger">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the number of instances of element in the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;G> result_ft88 = null;&#xA;&#xA;&#x9;G elem_ft88 = null;&#xA;&#xA;&#x9;result_ft88 = ((kermeta.standard.Sequence&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;G>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft88 = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_346 = false;&#xA;&#x9;while( !idLoopCond_346 ) {&#xA;&#x9;idLoopCond_346 = it_ft88.isOff();&#xA;&#x9;if ( idLoopCond_346 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft88 = it_ft88.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_347 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;G e = elem_ft88;&#xA;&#xA;&#x9;idIfCond_347 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(e, element);&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_347 ) {&#xA;&#xA;&#x9;result_ft88.add(elem_ft88);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;result = result_ft88.size();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="any">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an element from the Collection&#xD;&#xA;&#x9; * Raises an EmptyCollection exception if the Collection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_348 = false;&#xA;&#x9;idIfCond_348 = kermeta.standard.helper.IntegerWrapper.equals(this.size(), 0);&#xA;&#xA;&#x9;if( idIfCond_348 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.EmptyCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.EmptyCollection&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#xA;&#x9;result = it.next();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/Collection/G"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="values">
          <eGenericType eClassifier="#/8/standard/KermetaProperty_Collection_values">
            <eTypeArguments eTypeParameter="#/8/standard/Collection/G"/>
          </eGenericType>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Set">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * A Set is a non-ordered collection that contains distinct elements&#xD;&#xA; * (with regards to the G.equals(Object) operation)&#xD;&#xA; * not used for the moment @EMF_needProperty &quot;isUnique=true isOrdered=false javaClass=org.eclipse.emf.common.util.BasicEList&quot;&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="asOrderedSet">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asOrderedSet()&#xD;&#xA;&#x9; * Returns a new OrderedSet that contains all elements of current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.OrderedSet&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;G> s = ((kermeta.standard.OrderedSet&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/OrderedSet">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.add(G)&#xD;&#xA;&#x9; * Adds elt to the Set if it is not already contained by the&#xD;&#xA;&#x9; * Set, does nothing otherwise&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_349 = false;&#xA;&#x9;idIfCond_349 = kermeta.standard.helper.BooleanWrapper.not(this.contains(element));&#xA;&#xA;&#x9;if( idIfCond_349 ) {&#xA;&#xA;&#x9;super.add(element);&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Set/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="concatenate">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a ordered set of the bag elements sorted using the given comparator.&#xD;&#xA;&#x9; * The comparator must return :&lt;ul>&#xD;&#xA;&#x9; *   &lt;li>+1 if the second &lt;G> element is greater than the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>0 if the second &lt;G> element equals the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>-1 if the second &lt;G> element is lower than the first&lt;/li> &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Recursive sort of the given (ordered) set using the given comparator.&#xD;&#xA;&#x9; * The comparator must return :&lt;ul>&#xD;&#xA;&#x9; *   &lt;li>+1 if the second &lt;G> element is greater than the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>0 if the second &lt;G> element equals the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>-1 if the second &lt;G> element is lower than the first&lt;/li> &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Internal concatenation tool for recursive 'quickSort()' method&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.OrderedSet&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.OrderedSet&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;G>&quot;));&#xA;&#xA;&#x9;result.addAll(less);&#xA;&#xA;&#x9;result.addAll(pivot);&#xA;&#xA;&#x9;result.addAll(greater);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/OrderedSet">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
          <eParameters name="less">
            <eGenericType eClassifier="#/8/standard/OrderedSet">
              <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="pivot">
            <eGenericType eClassifier="#/8/standard/OrderedSet">
              <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="greater">
            <eGenericType eClassifier="#/8/standard/OrderedSet">
              <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="unionWithBag">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag corresponding to the union of the Bag elements&#xD;&#xA;&#x9; * with the current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Bag&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Bag&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&lt;G>&quot;));&#xA;&#xA;&#x9;result.addAll(this);&#xA;&#xA;&#x9;result.addAll(elements);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Bag">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Bag">
              <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="asSequence">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asSequence()&#xD;&#xA;&#x9; * Returns a new Sequence composed of all elements of current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Sequence&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.Sequence&lt;G> s = ((kermeta.standard.Sequence&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Sequence">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.remove(G)&#xD;&#xA;&#x9; * Removes the element from the Set if it is contained by the Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;G elem = null;&#xA;//Beginning of the Inlining of the function type: detect&#xA;&#xA;G result_ft89 = null;&#xA;&#xA;&#x9;G elem_ft89 = null;&#xA;&#xA;&#x9;result_ft89 = null;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft89 = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_350 = false;&#xA;&#x9;while( !idLoopCond_350 ) {&#xA;&#x9;idLoopCond_350 = kermeta.standard.helper.BooleanWrapper.or(it_ft89.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(result_ft89, null));&#xA;&#x9;if ( idLoopCond_350 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft89 = it_ft89.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_351 = false;&#xA;//Beginning of the Inlining of the lambda expression: detector&#xA;G e = elem_ft89;&#xA;&#xA;&#x9;idIfCond_351 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(e, element);&#xA;//End of the Inlining of the lambda expression: detector&#xA;&#xA;&#xA;&#x9;if( idIfCond_351 ) {&#xA;&#xA;&#x9;result_ft89 = elem_ft89;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;//callElement&#xA;elem = result_ft89;&#xA;//End of the Inlining of the function type: detect&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_352 = false;&#xA;&#x9;idIfCond_352 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(elem, null);&#xA;&#xA;&#x9;if( idIfCond_352 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(this, elem);&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Set/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="asSet">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asSet()&#xD;&#xA;&#x9; * Returns a new Set composed of all elements of current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.Set&lt;G> s = ((kermeta.standard.Set&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="equals" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Object.equals(Object)&#xD;&#xA;&#x9; * Returns a Boolean stating whether the provided element is equal to&#xD;&#xA;&#x9; * current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean isEqual = false;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_353 = false;&#xA;&#x9;idIfCond_353 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(element));&#xA;&#xA;&#x9;if( idIfCond_353 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_354 = false;&#xA;&#x9;idIfCond_354 = org.kermeta.compil.runtime.helper.language.TypeUtil.isInstance(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;G>&quot;), element);&#xA;&#xA;&#x9;if( idIfCond_354 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;G> collection = null;&#xA;&#xA;&#x9;collection = (kermeta.standard.Collection&lt;G>) element;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_355 = false;&#xA;&#x9;idIfCond_355 = kermeta.standard.helper.IntegerWrapper.equals(this.size(), collection.size());&#xA;&#xA;&#x9;if( idIfCond_355 ) {&#xA;&#xA;&#x9;G elem = null;&#xA;&#xA;&#x9;java.lang.Boolean ok = true;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_356 = false;&#xA;&#x9;while( !idLoopCond_356 ) {&#xA;&#x9;idLoopCond_356 = kermeta.standard.helper.BooleanWrapper.or(it.isOff(), kermeta.standard.helper.BooleanWrapper.not(ok));&#xA;&#x9;if ( idLoopCond_356 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem = it.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_357 = false;&#xA;&#x9;idIfCond_357 = kermeta.standard.helper.BooleanWrapper.not(collection.contains(elem));&#xA;&#xA;&#x9;if( idIfCond_357 ) {&#xA;&#xA;&#x9;ok = false;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;isEqual = ok;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = isEqual;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="intersection">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set corresponding to the intersection of the Set elements&#xD;&#xA;&#x9; * with the current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Set&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;G>&quot;));&#xA;&#xA;&#x9;G elem = null;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_358 = false;&#xA;&#x9;while( !idLoopCond_358 ) {&#xA;&#x9;idLoopCond_358 = it.isOff();&#xA;&#x9;if ( idLoopCond_358 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem = it.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_359 = false;&#xA;&#x9;idIfCond_359 = elements.contains(elem);&#xA;&#xA;&#x9;if( idIfCond_359 ) {&#xA;&#xA;&#x9;result.add(elem);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Collection">
              <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="minus">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set corresponding to the difference between the&#xD;&#xA;&#x9; * current Set and the Set elements, ie all elements contained by &#xD;&#xA;&#x9; * the current Set that do not appear in the elements Set &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Set&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;G>&quot;));&#xA;&#xA;&#x9;G elem = null;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_360 = false;&#xA;&#x9;while( !idLoopCond_360 ) {&#xA;&#x9;idLoopCond_360 = it.isOff();&#xA;&#x9;if ( idLoopCond_360 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem = it.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_361 = false;&#xA;&#x9;idIfCond_361 = kermeta.standard.helper.BooleanWrapper.not(elements.contains(elem));&#xA;&#xA;&#x9;if( idIfCond_361 ) {&#xA;&#xA;&#x9;result.add(elem);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Set">
              <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="union">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set corresponding to the union of the Set elements&#xD;&#xA;&#x9; * with the current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Set&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;G>&quot;));&#xA;&#xA;&#x9;result.addAll(this);&#xA;&#xA;&#x9;result.addAll(elements);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Set">
              <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="symmetricDifference">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set which contents corresponds to the symmetric&#xD;&#xA;&#x9; * difference between current Set and Set s, ie all elements of&#xD;&#xA;&#x9; * each Set that do not appear in the other one&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.Set&lt;G> res = s.minus(this);&#xA;&#xA;&#x9;result = this.minus(s);&#xA;&#xA;&#x9;result.addAll(res);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
          <eParameters name="s">
            <eGenericType eClassifier="#/8/standard/Set">
              <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="flatten">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set which content includes all non-Collection elements&#xD;&#xA;&#x9; * of the current Set, and, for each Collection element of the current&#xD;&#xA;&#x9; * Set, as many elements as the Collection contains&#xD;&#xA;&#x9; * Duplicates are removed&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;kermeta.language.structure.Object> result = null;&#xA;&#xA;&#x9;kermeta.standard.Set&lt;kermeta.language.structure.Object> res = ((kermeta.standard.Set&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;kermeta.language.structure.Object>&quot;));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_362 = false;&#xA;&#x9;idIfCond_362 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;G&quot;), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;&#xA;&#x9;if( idIfCond_362 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> col = null;&#xA;&#xA;&#x9;kermeta.language.structure.Object o = null;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft90 = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_363 = false;&#xA;&#x9;while( !idLoopCond_363 ) {&#xA;&#x9;idLoopCond_363 = it_ft90.isOff();&#xA;&#x9;if ( idLoopCond_363 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;G e = it_ft90.next();&#xA;&#xA;&#x9;col = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) e;&#xA;&#xA;&#x9;res.addAll(col);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = res;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eClassifier="#/8/language/structure/Object"/>
          </eGenericType>
        </eOperations>
        <eOperations name="asBag">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asBag()&#xD;&#xA;&#x9; * Returns a new Bag composed of all elements of current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Bag&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.Bag&lt;G> s = ((kermeta.standard.Bag&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Bag">
            <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
          </eGenericType>
        </eOperations>
        <eGenericSuperTypes eClassifier="#/8/standard/Collection">
          <eTypeArguments eTypeParameter="#/8/standard/Set/G"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Bag">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Bag is a concrete non-ordered Collection allowing duplicates&#xD;&#xA; * not used for the moment @EMF_needProperty &quot;isUnique=false isOrdered=false javaClass=org.eclipse.emf.common.util.BasicEList&quot;&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="asOrderedSet">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asOrderedSet()&#xD;&#xA;&#x9; * Returns a new OrderedSet containing elements of the Bag without duplicates&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.OrderedSet&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.OrderedSet&lt;G> s = ((kermeta.standard.OrderedSet&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/OrderedSet">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="including">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag which content includes the content of the&#xD;&#xA;&#x9; * current Bag and the element object&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Bag&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.Bag&lt;G> s = ((kermeta.standard.Bag&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;s.add(object);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Bag">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="object">
            <eGenericType eTypeParameter="#/8/standard/Bag/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="concatenate">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a sequence of the bag elements sorted using the given comparator.&#xD;&#xA;&#x9; * The comparator must return :&lt;ul>&#xD;&#xA;&#x9; *   &lt;li>+1 if the second &lt;G> element is greater than the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>0 if the second &lt;G> element equals the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>-1 if the second &lt;G> element is lower than the first&lt;/li> &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Recursive sort of the given sequence using the given comparator.&#xD;&#xA;&#x9; * The comparator must return :&lt;ul>&#xD;&#xA;&#x9; *   &lt;li>+1 if the second &lt;G> element is greater than the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>0 if the second &lt;G> element equals the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>-1 if the second &lt;G> element is lower than the first&lt;/li> &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Internal concatenation tool for recursive 'quickSort()' method&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Sequence&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Sequence&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;G>&quot;));&#xA;&#xA;&#x9;result.addAll(less);&#xA;&#xA;&#x9;result.addAll(pivot);&#xA;&#xA;&#x9;result.addAll(greater);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Sequence">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="less">
            <eGenericType eClassifier="#/8/standard/Sequence">
              <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="pivot">
            <eGenericType eClassifier="#/8/standard/Sequence">
              <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="greater">
            <eGenericType eClassifier="#/8/standard/Sequence">
              <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="asSequence">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asSequence()&#xD;&#xA;&#x9; * Returns a new Sequence containing all elements of current Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Sequence&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.Sequence&lt;G> s = ((kermeta.standard.Sequence&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Sequence">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="asSet">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asSet()&#xD;&#xA;&#x9; * Returns a new Set containing elements of the Bag without duplicates&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.Set&lt;G> s = ((kermeta.standard.Set&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="intersectionWithSet">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set corresponding to the intersection of a Set of&#xD;&#xA;&#x9; * elements and the Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Set&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;G>&quot;));&#xA;&#xA;&#x9;G elem = null;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = elements.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_364 = false;&#xA;&#x9;while( !idLoopCond_364 ) {&#xA;&#x9;idLoopCond_364 = it.isOff();&#xA;&#x9;if ( idLoopCond_364 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem = it.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_365 = false;&#xA;&#x9;idIfCond_365 = this.contains(elem);&#xA;&#xA;&#x9;if( idIfCond_365 ) {&#xA;&#xA;&#x9;result.add(elem);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Set">
              <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="excluding">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag which content includes the content of the&#xD;&#xA;&#x9; * current Bag from which all instances of object have been&#xD;&#xA;&#x9; * removed&#xD;&#xA; &#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Bag&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.Bag&lt;G> s = ((kermeta.standard.Bag&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;s.remove(object);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Bag">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="object">
            <eGenericType eTypeParameter="#/8/standard/Bag/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="intersection">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag corresponding to the intersection of elements&#xD;&#xA;&#x9; * and the Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Bag&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Bag&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&lt;G>&quot;));&#xA;&#xA;&#x9;G elem = null;&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Boolean idLoopCond_366 = false;&#xA;&#x9;while( !idLoopCond_366 ) {&#xA;&#x9;idLoopCond_366 = it.isOff();&#xA;&#x9;if ( idLoopCond_366 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem = it.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_367 = false;&#xA;&#x9;idIfCond_367 = elements.contains(elem);&#xA;&#xA;&#x9;if( idIfCond_367 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_368 = false;&#xA;&#x9;idIfCond_368 = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(this.count(elem), elements.count(elem));&#xA;&#xA;&#x9;if( idIfCond_368 ) {&#xA;&#xA;&#x9;result.add(elem);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;it = elements.iterator();&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Boolean idLoopCond_369 = false;&#xA;&#x9;while( !idLoopCond_369 ) {&#xA;&#x9;idLoopCond_369 = it.isOff();&#xA;&#x9;if ( idLoopCond_369 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem = it.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_370 = false;&#xA;&#x9;idIfCond_370 = this.contains(elem);&#xA;&#xA;&#x9;if( idIfCond_370 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_371 = false;&#xA;&#x9;idIfCond_371 = kermeta.standard.helper.IntegerWrapper.isLower(elements.count(elem), this.count(elem));&#xA;&#xA;&#x9;if( idIfCond_371 ) {&#xA;&#xA;&#x9;result.add(elem);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Bag">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Bag">
              <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="removeOne">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes one instance of element from the Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;G elem = null;&#xA;//Beginning of the Inlining of the function type: detect&#xA;&#xA;G result_ft91 = null;&#xA;&#xA;&#x9;G elem_ft91 = null;&#xA;&#xA;&#x9;result_ft91 = null;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft91 = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_372 = false;&#xA;&#x9;while( !idLoopCond_372 ) {&#xA;&#x9;idLoopCond_372 = kermeta.standard.helper.BooleanWrapper.or(it_ft91.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(result_ft91, null));&#xA;&#x9;if ( idLoopCond_372 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft91 = it_ft91.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_373 = false;&#xA;//Beginning of the Inlining of the lambda expression: detector&#xA;G e = elem_ft91;&#xA;&#xA;&#x9;idIfCond_373 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(e, element);&#xA;//End of the Inlining of the lambda expression: detector&#xA;&#xA;&#xA;&#x9;if( idIfCond_373 ) {&#xA;&#xA;&#x9;result_ft91 = elem_ft91;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;//callElement&#xA;elem = result_ft91;&#xA;//End of the Inlining of the function type: detect&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_374 = false;&#xA;&#x9;idIfCond_374 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(elem, null);&#xA;&#xA;&#x9;if( idIfCond_374 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(this, elem);&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Bag/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Object.equals(elt : Object)&#xD;&#xA;&#x9; * Returns a Boolean stating whether the provided element is equal to&#xD;&#xA;&#x9; * current Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean isEqual = false;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_375 = false;&#xA;&#x9;idIfCond_375 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(element));&#xA;&#xA;&#x9;if( idIfCond_375 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_376 = false;&#xA;&#x9;idIfCond_376 = org.kermeta.compil.runtime.helper.language.TypeUtil.isInstance(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;G>&quot;), element);&#xA;&#xA;&#x9;if( idIfCond_376 ) {&#xA;&#xA;&#x9;kermeta.standard.Bag&lt;G> collection = null;&#xA;&#xA;&#x9;collection = (kermeta.standard.Bag&lt;G>) element;&#xA;&#xA;&#x9;kermeta.standard.Set&lt;G> selfAsSet = this.asSet();&#xA;&#xA;&#x9;isEqual = selfAsSet.equals(collection.asSet());&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = isEqual;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="union">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag corresponding to the union of elements and&#xD;&#xA;&#x9; * current Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Bag&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Bag&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&lt;G>&quot;));&#xA;&#xA;&#x9;result.addAll(this);&#xA;&#xA;&#x9;result.addAll(elements);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Bag">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="#/8/standard/Collection">
              <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="flatten">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag which content includes all non-Collection elements&#xD;&#xA;&#x9; * of the current Set, and, for each Collection element of the current&#xD;&#xA;&#x9; * Bag, as many elements as the Collection contains&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Bag&lt;kermeta.language.structure.Object> result = null;&#xA;&#xA;&#x9;kermeta.standard.Bag&lt;kermeta.language.structure.Object> res = ((kermeta.standard.Bag&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&lt;kermeta.language.structure.Object>&quot;));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_377 = false;&#xA;&#x9;idIfCond_377 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;G&quot;), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;&#xA;&#x9;if( idIfCond_377 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> col = null;&#xA;&#xA;&#x9;kermeta.language.structure.Object o = null;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft92 = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_378 = false;&#xA;&#x9;while( !idLoopCond_378 ) {&#xA;&#x9;idLoopCond_378 = it_ft92.isOff();&#xA;&#x9;if ( idLoopCond_378 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;G e = it_ft92.next();&#xA;&#xA;&#x9;col = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) e;&#xA;&#xA;&#x9;res.addAll(col);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = res;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Bag">
            <eTypeArguments eClassifier="#/8/language/structure/Object"/>
          </eGenericType>
        </eOperations>
        <eOperations name="removeFromOid">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes the element identified by the provided Oid from the Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="doesntContainsElementAnymore" value=""/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;G elem = null;&#xA;//Beginning of the Inlining of the function type: detect&#xA;&#xA;G result_ft93 = null;&#xA;&#xA;&#x9;G elem_ft93 = null;&#xA;&#xA;&#x9;result_ft93 = null;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft93 = this.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_379 = false;&#xA;&#x9;while( !idLoopCond_379 ) {&#xA;&#x9;idLoopCond_379 = kermeta.standard.helper.BooleanWrapper.or(it_ft93.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(result_ft93, null));&#xA;&#x9;if ( idLoopCond_379 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft93 = it_ft93.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_380 = false;&#xA;//Beginning of the Inlining of the lambda expression: detector&#xA;G e = elem_ft93;&#xA;&#xA;&#x9;idIfCond_380 = kermeta.standard.helper.IntegerWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.oid(e), elementOid);&#xA;//End of the Inlining of the lambda expression: detector&#xA;&#xA;&#xA;&#x9;if( idIfCond_380 ) {&#xA;&#xA;&#x9;result_ft93 = elem_ft93;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;//callElement&#xA;elem = result_ft93;&#xA;//End of the Inlining of the function type: detect&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_381 = false;&#xA;&#x9;idIfCond_381 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(elem, null);&#xA;&#xA;&#x9;if( idIfCond_381 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(this, elem);&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="elementOid" eType="#/8/standard/JavaInteger"/>
        </eOperations>
        <eOperations name="asBag">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asBag()&#xD;&#xA;&#x9; * Returns a new Bag containing all elements of current Bag&#x9;&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Bag&lt;G> result = null;&#xA;&#xA;&#x9;kermeta.standard.Bag&lt;G> s = ((kermeta.standard.Bag&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&lt;G>&quot;));&#xA;&#xA;&#x9;s.addAll(this);&#xA;&#xA;&#x9;result = s;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Bag">
            <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
          </eGenericType>
        </eOperations>
        <eGenericSuperTypes eClassifier="#/8/standard/Collection">
          <eTypeArguments eTypeParameter="#/8/standard/Bag/G"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OrderedCollection" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An OrderedCollection is the root abstract class for all ordered Collections.&#xD;&#xA; * not used for the moment @EMF_needProperty &quot;isUnique=false isOrdered=true javaClass=org.eclipse.emf.common.util.BasicEList&quot;&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="last">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the last element in the OrderedCollection&#xD;&#xA;&#x9; * Raises an EmptyCollection exception if the OrderedCollection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_382 = false;&#xA;&#x9;idIfCond_382 = kermeta.standard.helper.IntegerWrapper.equals(this.size(), 0);&#xA;&#xA;&#x9;if( idIfCond_382 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.EmptyCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.EmptyCollection&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = this.elementAt(kermeta.standard.helper.IntegerWrapper.minus(this.size(), 1));&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/OrderedCollection/G"/>
        </eOperations>
        <eOperations name="indexOf" eType="#/8/standard/JavaInteger">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * Returns the index of the first instance of element in the OrderedCollection&#xD;&#xA;&#x9; * or -1 if the element is not contained by the OrderedCollection&#xD;&#xA;&#x9; * Raises an EmptyCollection exception if the OrderedCollection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_383 = false;&#xA;&#x9;idIfCond_383 = kermeta.standard.helper.IntegerWrapper.equals(this.size(), 0);&#xA;&#xA;&#x9;if( idIfCond_383 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.EmptyCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.EmptyCollection&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Integer i = 0;&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#xA;&#x9;java.lang.Boolean found = false;&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Boolean idLoopCond_384 = false;&#xA;&#x9;while( !idLoopCond_384 ) {&#xA;&#x9;idLoopCond_384 = kermeta.standard.helper.BooleanWrapper.or(found, it.isOff());&#xA;&#x9;if ( idLoopCond_384 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_385 = false;&#xA;&#x9;idIfCond_385 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(element, it.next());&#xA;&#xA;&#x9;if( idIfCond_385 ) {&#xA;&#xA;&#x9;found = true;&#xA;}&#xA; else {&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_386 = false;&#xA;&#x9;idIfCond_386 = found;&#xA;&#xA;&#x9;if( idIfCond_386 ) {&#xA;&#xA;&#x9;result = i;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.uminus(1);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/OrderedCollection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="removeAt">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes the element at rank index from the OrderedCollection&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the OrderedCollection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_387 = false;&#xA;&#x9;idIfCond_387 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, kermeta.standard.helper.IntegerWrapper.minus(this.size(), 1)));&#xA;&#xA;&#x9;if( idIfCond_387 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.removeAt(this, index);&#xA;"/>
          </eAnnotations>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
        </eOperations>
        <eOperations name="equals" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Object.equals(Object)&#xD;&#xA;&#x9; * Returns a Boolean stating whether the provided element is equal to&#xD;&#xA;&#x9; * current OrderedCollection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean isEqual = false;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_388 = false;&#xA;&#x9;idIfCond_388 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(element));&#xA;&#xA;&#x9;if( idIfCond_388 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_389 = false;&#xA;&#x9;idIfCond_389 = org.kermeta.compil.runtime.helper.language.TypeUtil.isInstance(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.OrderedCollection&lt;G>&quot;), element);&#xA;&#xA;&#x9;if( idIfCond_389 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;G> collection = null;&#xA;&#xA;&#x9;collection = (kermeta.standard.Collection&lt;G>) element;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_390 = false;&#xA;&#x9;idIfCond_390 = kermeta.standard.helper.IntegerWrapper.equals(this.size(), collection.size());&#xA;&#xA;&#x9;if( idIfCond_390 ) {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> selfIterator = this.iterator();&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> collectionIterator = collection.iterator();&#xA;&#xA;&#x9;java.lang.Boolean difference = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.helper.IntegerWrapper.equals(1, 1);&#xA;&#x9;java.lang.Boolean idLoopCond_391 = false;&#xA;&#x9;while( !idLoopCond_391 ) {&#xA;&#x9;idLoopCond_391 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.or(selfIterator.isOff(), collectionIterator.isOff()), difference);&#xA;&#x9;if ( idLoopCond_391 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_392 = false;&#xA;&#x9;idIfCond_392 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(selfIterator.next(), collectionIterator.next()));&#xA;&#xA;&#x9;if( idIfCond_392 ) {&#xA;&#xA;&#x9;difference = true;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;isEqual = kermeta.standard.helper.BooleanWrapper.not(difference);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = isEqual;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="first">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * Returns the first element in the OrderedCollection&#xD;&#xA;&#x9; * Raises an EmptyCollection exception if the OrderedCollection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_393 = false;&#xA;&#x9;idIfCond_393 = kermeta.standard.helper.IntegerWrapper.equals(this.size(), 0);&#xA;&#xA;&#x9;if( idIfCond_393 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.EmptyCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.EmptyCollection&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = this.elementAt(0);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/OrderedCollection/G"/>
        </eOperations>
        <eOperations name="elementAt">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the element at rank index in the OrderedCollection&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the OrderedCollection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_394 = false;&#xA;&#x9;idIfCond_394 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, kermeta.standard.helper.IntegerWrapper.minus(this.size(), 1)));&#xA;&#xA;&#x9;if( idIfCond_394 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = (G) org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.elementAt(this, index);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/OrderedCollection/G"/>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
        </eOperations>
        <eOperations name="addAt">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds element in the OrderedCollection at rank index&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the OrderedCollection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_395 = false;&#xA;&#x9;idIfCond_395 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, this.size()));&#xA;&#xA;&#x9;if( idIfCond_395 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.addAt(this, index, element);&#xA;"/>
          </eAnnotations>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/OrderedCollection/G"/>
          </eParameters>
        </eOperations>
        <eGenericSuperTypes eClassifier="#/8/standard/Collection">
          <eTypeArguments eTypeParameter="#/8/standard/OrderedCollection/G"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OrderedSet">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An OrderedSet is a Set that contained ordered distinct elements&#xD;&#xA; * not used for the moment @EMF_needProperty &quot;isUnique=true isOrdered=true javaClass=org.eclipse.emf.common.util.BasicEList&quot;&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="append">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new OrderedSet from current one with element&#xD;&#xA;&#x9; * inserted in head&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.OrderedSet&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.OrderedSet&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;G>&quot;));&#xA;&#xA;&#x9;result.addAll(this);&#xA;&#xA;&#x9;result.add(element);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/OrderedSet">
            <eTypeArguments eTypeParameter="#/8/standard/OrderedSet/G"/>
          </eGenericType>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="add" ordered="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * See Set&lt;G>.add(G)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;super.add(element);&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * See OrderedCollection&lt;G>.equals(Object) &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.OrderedCollectionSuper.super_equals(this, element);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="insertAt">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new OrderedSet from current one with element&#xD;&#xA;&#x9; * inserted at rank index&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.OrderedSet&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.OrderedSet&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;G>&quot;));&#xA;&#xA;&#x9;result.addAll(this);&#xA;&#xA;&#x9;result.addAt(index, subject);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/OrderedSet">
            <eTypeArguments eTypeParameter="#/8/standard/OrderedSet/G"/>
          </eGenericType>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
          <eParameters name="subject">
            <eGenericType eTypeParameter="#/8/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="preppend">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new OrderedSet from current one with element&#xD;&#xA;&#x9; * inserted in tail&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.OrderedSet&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.OrderedSet&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;G>&quot;));&#xA;&#xA;&#x9;result.add(element);&#xA;&#xA;&#x9;result.addAll(this);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/OrderedSet">
            <eTypeArguments eTypeParameter="#/8/standard/OrderedSet/G"/>
          </eGenericType>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="at">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns element at rank index in the sequence&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the OrderedSet&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_396 = false;&#xA;&#x9;idIfCond_396 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(index, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(index, this.size()));&#xA;&#xA;&#x9;if( idIfCond_396 ) {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Integer i = kermeta.standard.helper.IntegerWrapper.uminus(1);&#xA;&#x9;java.lang.Boolean idLoopCond_397 = false;&#xA;&#x9;while( !idLoopCond_397 ) {&#xA;&#x9;idLoopCond_397 = kermeta.standard.helper.IntegerWrapper.equals(i, index);&#xA;&#x9;if ( idLoopCond_397 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;result = it.next();&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/OrderedSet/G"/>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
        </eOperations>
        <eOperations name="subSet">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new OrderedSet composed of elements of current ordered&#xD;&#xA;&#x9; * set from rank min to rank max (order is respected)&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if min is negative, max is larger than &#xD;&#xA;&#x9; * the size of the ordered set or min is larger than max&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.OrderedSet&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.OrderedSet&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.OrderedSet&lt;G>&quot;));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_398 = false;&#xA;&#x9;idIfCond_398 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(min, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(max, this.size())), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(min, max));&#xA;&#xA;&#x9;if( idIfCond_398 ) {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#xA;&#x9;java.lang.Integer i = 0;&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Boolean idLoopCond_399 = false;&#xA;&#x9;while( !idLoopCond_399 ) {&#xA;&#x9;idLoopCond_399 = kermeta.standard.helper.IntegerWrapper.equals(i, min);&#xA;&#x9;if ( idLoopCond_399 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;it.next();&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Boolean idLoopCond_400 = false;&#xA;&#x9;while( !idLoopCond_400 ) {&#xA;&#x9;idLoopCond_400 = kermeta.standard.helper.IntegerWrapper.equals(i, kermeta.standard.helper.IntegerWrapper.plus(max, 1));&#xA;&#x9;if ( idLoopCond_400 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;result.add(it.next());&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/OrderedSet">
            <eTypeArguments eTypeParameter="#/8/standard/OrderedSet/G"/>
          </eGenericType>
          <eParameters name="min" eType="#/8/standard/JavaInteger"/>
          <eParameters name="max" eType="#/8/standard/JavaInteger"/>
        </eOperations>
        <eOperations name="addAt">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides OrderedCollection&lt;G>.addAt(Integer, G)&#xD;&#xA;&#x9; * Adds element in the OrderedSet at rank index if the ordered set does&#xD;&#xA;&#x9; * not already contain the element, does nothing otherwise&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_401 = false;&#xA;&#x9;idIfCond_401 = kermeta.standard.helper.BooleanWrapper.not(this.contains(element));&#xA;&#xA;&#x9;if( idIfCond_401 ) {&#xA;&#xA;&#x9;kermeta.standard.OrderedCollectionSuper.super_addAt(this, index, element);&#xA;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eGenericSuperTypes eClassifier="#/8/standard/Set">
          <eTypeArguments eTypeParameter="#/8/standard/OrderedSet/G"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#/8/standard/OrderedCollection">
          <eTypeArguments eTypeParameter="#/8/standard/OrderedSet/G"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Sequence">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * A Sequence is an OrderedCollection of elements allowing duplicates&#xD;&#xA; * not used for the moment @EMF_needProperty &quot;isUnique=false isOrdered=true javaClass=org.eclipse.emf.common.util.BasicEList&quot;&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="append">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new Sequence from current one with element&#xD;&#xA;&#x9; * inserted in head&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Sequence&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Sequence&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;G>&quot;));&#xA;&#xA;&#x9;result.addAll(this);&#xA;&#xA;&#x9;result.add(element);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Sequence">
            <eTypeArguments eTypeParameter="#/8/standard/Sequence/G"/>
          </eGenericType>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Sequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="insertAt">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new Sequence from current one with element&#xD;&#xA;&#x9; * inserted at rank index&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Sequence&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Sequence&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;G>&quot;));&#xA;&#xA;&#x9;result.addAll(this);&#xA;&#xA;&#x9;result.addAt(index, element);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Sequence">
            <eTypeArguments eTypeParameter="#/8/standard/Sequence/G"/>
          </eGenericType>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Sequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides OrderedCollection&lt;G>.equals(Object)&#xD;&#xA;&#x9; * Returns a Boolean stating whether the provided element is equal to&#xD;&#xA;&#x9; * current Sequence&#x9;&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.OrderedCollectionSuper.super_equals(this, element);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="subSequence">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new Sequence composed of elements of current sequence&#xD;&#xA;&#x9; * from rank min to rank max (order is respected)&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if min is negative, max is larger than &#xD;&#xA;&#x9; * the size of the sequence or min is larger than max&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Sequence&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Sequence&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;G>&quot;));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_402 = false;&#xA;&#x9;idIfCond_402 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(min, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(max, this.size())), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(min, max));&#xA;&#xA;&#x9;if( idIfCond_402 ) {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#xA;&#x9;java.lang.Integer i = 0;&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Boolean idLoopCond_403 = false;&#xA;&#x9;while( !idLoopCond_403 ) {&#xA;&#x9;idLoopCond_403 = kermeta.standard.helper.IntegerWrapper.equals(i, min);&#xA;&#x9;if ( idLoopCond_403 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;it.next();&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Boolean idLoopCond_404 = false;&#xA;&#x9;while( !idLoopCond_404 ) {&#xA;&#x9;idLoopCond_404 = kermeta.standard.helper.IntegerWrapper.equals(i, kermeta.standard.helper.IntegerWrapper.plus(max, 1));&#xA;&#x9;if ( idLoopCond_404 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;result.add(it.next());&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Sequence">
            <eTypeArguments eTypeParameter="#/8/standard/Sequence/G"/>
          </eGenericType>
          <eParameters name="min" eType="#/8/standard/JavaInteger"/>
          <eParameters name="max" eType="#/8/standard/JavaInteger"/>
        </eOperations>
        <eOperations name="preppend">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new Sequence from current one with element&#xD;&#xA;&#x9; * inserted in tail&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Sequence&lt;G> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Sequence&lt;G>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;G>&quot;));&#xA;&#xA;&#x9;result.add(element);&#xA;&#xA;&#x9;result.addAll(this);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Sequence">
            <eTypeArguments eTypeParameter="#/8/standard/Sequence/G"/>
          </eGenericType>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/standard/Sequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="at">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns element at rank index in the sequence&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the Sequence&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_405 = false;&#xA;&#x9;idIfCond_405 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(index, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(index, this.size()));&#xA;&#xA;&#x9;if( idIfCond_405 ) {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it = this.iterator();&#xA;&#xA;&#x9;&#xA;&#x9;java.lang.Integer i = kermeta.standard.helper.IntegerWrapper.uminus(1);&#xA;&#x9;java.lang.Boolean idLoopCond_406 = false;&#xA;&#x9;while( !idLoopCond_406 ) {&#xA;&#x9;idLoopCond_406 = kermeta.standard.helper.IntegerWrapper.equals(i, index);&#xA;&#x9;if ( idLoopCond_406 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;result = it.next();&#xA;&#xA;&#x9;i = kermeta.standard.helper.IntegerWrapper.plus(i, 1);&#xA;}&#xA;&#x9;}&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IndexOutOfBound&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/Sequence/G"/>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
        </eOperations>
        <eGenericSuperTypes eClassifier="#/8/standard/Bag">
          <eTypeArguments eTypeParameter="#/8/standard/Sequence/G"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#/8/standard/OrderedCollection">
          <eTypeArguments eTypeParameter="#/8/standard/Sequence/G"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Iterator" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Iterator to be used with Collection&#xD;&#xA; * See also Collection&lt;G>.getIterator()&#xD;&#xA; */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="EMF_needProperty" value="name=javaIterator javaClass=java.util.Iterator"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="EMF_needProperty" value="name=kermetaCollection classDefinitionQN=kermeta::standard::Collection"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="hasNext" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if the iterator has a next element&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.basetypes.IteratorUtil.hasNext(this);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isOff" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if the iterator is on the last element&#xD;&#xA;&#x9; * i.e. returns not self.hasNext()&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(this.hasNext());&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="next">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the next element of the iterator&#xD;&#xA;&#x9; * Raises IteratorIsOff exception in case the iterator is on the last element &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_407 = false;&#xA;&#x9;idIfCond_407 = kermeta.standard.helper.BooleanWrapper.not(this.hasNext());&#xA;&#xA;&#x9;if( idIfCond_407 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IteratorIsOff) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IteratorIsOff&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = (G) org.kermeta.compil.runtime.helper.basetypes.IteratorUtil.next(this);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/standard/Iterator/G"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="javaIterator">
          <eGenericType eClassifier="#/8/standard/KermetaProperty_Iterator_javaIterator">
            <eTypeArguments eTypeParameter="#/8/standard/Iterator/G"/>
          </eGenericType>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="kermetaCollection">
          <eGenericType eClassifier="#/8/standard/Collection">
            <eTypeArguments eTypeParameter="#/8/standard/Iterator/G"/>
          </eGenericType>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="UnknownJavaObject" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** &#xD;&#xA;  * This special object is used to represent java objects that cannot be concretely used with kermeta&#xD;&#xA;  * &lt;b>the only actions possible on these objects are : assignment and passing them as parameter&lt;/b>&#xD;&#xA;  * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/java_package.png&quot;/>&#xD;&#xA;  */"/>
        </eAnnotations>
        <eOperations name="toString" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA; &#x9; * NOT IMPLEMENTED&#xD;&#xA; &#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = &quot;toString of  UnknownJavaObject not implemented yet&quot;;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="KermetaProperty_Collection_values"
          instanceClassName="org.eclipse.emf.common.util.EList">
        <eTypeParameters name="G"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="KermetaProperty_Iterator_javaIterator"
          instanceClassName="java.util.Iterator">
        <eTypeParameters name="G"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="language" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/language/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/language"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains the implementation of Kermeta reflective collections.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/language_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="DummyClass" abstract="true" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="This class is used to workaround an EMF bug, it doesn't really belong to Kermeta metamodel"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReflectiveCollection">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * ReflectiveCollection is a special collection that is used to define the type &#xD;&#xA; * of attributes that have an upper multiplicity > 1 in a class. It indeed handles&#xD;&#xA; * the update of opposite property if such an attribute has got one.&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="add">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::Set&lt;G>.add(G)&#xD;&#xA;&#x9; * Add an element to this collection and update its opposite property if it exists.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.add(this, element);&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/language/ReflectiveCollection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="clear">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::Collection&lt;G>.clear(G)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.clear(this);&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::Set&lt;G>.remove(G)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.remove(this, element);&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/language/ReflectiveCollection/G"/>
          </eParameters>
        </eOperations>
        <eGenericSuperTypes eClassifier="#/8/standard/Set">
          <eTypeArguments eTypeParameter="#/8/language/ReflectiveCollection/G"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReflectiveSequence">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * ReflectiveSequence is an ordered ReflectiveCollection.&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="add">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::language::ReflectiveCollection&lt;G>.add(G)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::ReflectiveCollection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;kermeta.language.ReflectiveCollectionSuper.super_add(this, element);&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/language/ReflectiveSequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="removeAt">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::OrderedSet.removeAt(Integer)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveSequenceUtil.removeAt(this, index);&#xA;"/>
          </eAnnotations>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
        </eOperations>
        <eOperations name="clear">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::language::ReflectiveCollection&lt;G>.clear()&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::ReflectiveCollection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;kermeta.language.ReflectiveCollectionSuper.super_clear(this, );&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::OrderedSet.equals(Object)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::OrderedSet"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = super.equals(element);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="element" eType="#/8/language/structure/Object"/>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::language::ReflectiveCollection&lt;G>.remove(G)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::ReflectiveCollection"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;kermeta.language.ReflectiveCollectionSuper.super_remove(this, element);&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/language/ReflectiveSequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="addAt">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::OrderedSet.addAt(Integer)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::standard::OrderedSet"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveSequenceUtil.addAt(this, index, element);&#xA;"/>
          </eAnnotations>
          <eParameters name="index" eType="#/8/standard/JavaInteger"/>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/language/ReflectiveSequence/G"/>
          </eParameters>
        </eOperations>
        <eGenericSuperTypes eClassifier="#/8/standard/OrderedSet">
          <eTypeArguments eTypeParameter="#/8/language/ReflectiveSequence/G"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#/8/language/ReflectiveCollection">
          <eTypeArguments eTypeParameter="#/8/language/ReflectiveSequence/G"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eSubpackages name="behavior" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/language/behavior/kermeta_temp_uri"
          nsPrefix="">
        <eAnnotations source="kermeta">
          <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/language/behavior"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="CallExpression" abstract="true"
            eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Any callable expression inherits this class, e.g : &#xA;  - variable call&#xA;  - feature call ( &lt;code>a.b&lt;/code> : b is a feature call)&#xA;&#xA;&lt;img alt=&quot;&quot;  height=&quot;90%&quot; width=&quot;90%&quot;  src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_call_expressions.png&quot; />"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1"
              eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Kermeta calls can embedd expressions as parameters"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="A call must be named"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticTypeVariableBindings"
              upperBound="-1" eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Expression" abstract="true" eSuperTypes="#/8/language/structure/TypeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="The base class for every entity used to define a behavior in operation body."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticType" eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type of the Expression (set by type checking)"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallVariable" eSuperTypes="#/8/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="We call &quot;CallVariable&quot; the use of a variable in a statement.&#xA;in &lt;code>i := j + 1&lt;/code>, i and j are 2 CallVariables."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAtpre" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Tells whether this CallVariable represents a call to @pre in a postcondition"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallFeature" eSuperTypes="#/8/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="CallFeature is the model element that refers to the use of a feature, i.e either &#xA;a property or an operation in a statement. In &lt;code>stdio.writeln(&quot;hello&quot;)&lt;/code>, &#xA;&lt;code>writeln&lt;/code> is a CallFeature."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticEnumLiteral"
              eType="#/8/language/structure/EnumerationLiteral">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="target" eType="#/8/language/behavior/Expression"
              containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Target Expression (the owner of the feature)"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAtpre" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Tells whether this CallFeature represents a call to @pre in a postcondition"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticOperation"
              eType="#/8/language/structure/Operation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The method which will be executed (operation case)&#xA;and the result value passed to the caller"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticProperty" eType="#/8/language/structure/Property">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The object which will be returned (property case)"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallSuperOperation" eSuperTypes="#/8/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This class represents a call to the operataion in the parent class&#xA;&#x9;In the following example, the type of super(element) is CallSuperOperation:&#xA;&#xA;class ParentClass {&#xA;  operation op(element : Integer) : Integer is do&#xA;      result := element + 1&#xA;  end&#xA;}&#xA; *&#xA;class ChildClass {&#xA;  method op(element : Integer) : Integer is do&#xA;      result := super(element)&#xA;  end&#xA;}"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallResult" eSuperTypes="#/8/language/behavior/CallVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This class represents a call to the special internal variable &quot;result&quot; that is used to store the return value of any operation "/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallValue" eSuperTypes="#/8/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="CallValue refers to the use of the &lt;code>value&lt;/code> reserved keyword. This keyword is&#xA;only used in the body of the &lt;code>setter&lt;/code> part of derived properties."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Assignment" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Assignment is the model-element representation of the assignment statement &lt;code>x := y&lt;/code>&#xA;&lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_assign_expressions.png&quot;/>"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
              eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Value to be assigned, as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
              eType="#/8/language/behavior/CallExpression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Target of the assignment, as a CallExpression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isCast" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating whether current assignment corresponds to a cast operation "/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Block" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Block is the model-element representation for the &lt;code>do...end&lt;/code> block."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="statement" upperBound="-1"
              eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="List of statements composing the block"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="rescueBlock" upperBound="-1"
              eType="#/8/language/behavior/Rescue" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="List of rescues defined for the block"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Conditional" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Condition is the model-element representation for the &lt;code>&lt;/code> "/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="elseBody" eType="#/8/language/behavior/Expression"
              containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Optional else part of the conditional statement"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="condition" lowerBound="1"
              eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Condition expression of conditional statement"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="thenBody" lowerBound="1"
              eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Then part of the conditional statement"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Raise" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to raise exception block"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="expression" lowerBound="1"
              eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written #######################"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Rescue" eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to rescue exception block"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="exceptionName" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Name of the catched exception"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1"
              upperBound="-1" eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the rescue block, specified as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="exceptionType" lowerBound="1"
              eType="#/8/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type of the cathed exception"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeReference" eSuperTypes="#/8/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="TypeReference refers to the type used in a variable declaration"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Literal" abstract="true" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Literal refers to String values, Integer values, etc."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="EmptyExpression" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="As suggested by its name, this class represents an expression that do nothing. Like a &quot;nop&quot;"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="JavaStaticCall" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This class represent a call to an extern Java operation. &#xA;This Java operation must be static and have at least one RuntimeO"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1"
              eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Parameters of the Java static call provided as KerMeta expressions"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="jclass" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Qualified name of the targeted Java class"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="jmethod" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Name of the Java method to be launched in the identified Java class"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="LambdaExpression" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to lambda expression definition (&lt;code>function { e | stdio.writeln(e.toString) }&lt;/code>)&#xA;&lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_lambda_expressions.png&quot;/>"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1"
              eType="#/8/language/behavior/LambdaParameter" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Parameters of the lambda expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1"
              eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the lambda expression providede as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="LambdaParameter" eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to parameter definition in lambda expression"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1"
              eType="#/8/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written ################################"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Name of the lambda parameter"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="IntegerLiteral" eSuperTypes="#/8/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This expression is a literal representing an Integer value"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#/8/standard/JavaInteger">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The concrete value represented by this literal"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="StringLiteral" eSuperTypes="#/8/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This expression is a literal representing a String value, typically : &quot;my string&quot;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The concrete value represented by this literal"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="BooleanLiteral" eSuperTypes="#/8/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This expression is a literal representing a Boolean value, typically : true or false keyword"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The concrete value represented by this literal"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeLiteral" eSuperTypes="#/8/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This expression is a literal representing a Type.&#xA;for example, in &#xA;   Integer.new&#xA;Integer is a type literal representing the type kermeta::standard::Integer"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeref" lowerBound="1"
              eType="#/8/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The type refered by this literal"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VoidLiteral" eSuperTypes="#/8/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This class is used to represent the special expression void"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Loop" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Loop refers to &lt;code>from var x : X init a until booleanCondition loop ... end&lt;/code>"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="stopCondition" lowerBound="1"
              eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Stop condition of the loop, is interpreted as a Bollean value"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="initialization" eType="#/8/language/behavior/Expression"
              containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Initialization expression for the loop"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="#/8/language/behavior/Expression"
              containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the loop"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SelfExpression" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to &lt;code>self&lt;/code> use"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VariableDecl" eSuperTypes="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="refers to variable declaration &lt;code>var x : X init a&lt;/code>&#xA;&lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_var_expressions.png&quot;/>"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1"
              eType="#/8/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type of the declared variable"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="initialization" eType="#/8/language/behavior/Expression"
              containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Initialization expression for the variable&#xA;Default value is &lt;code>void&lt;/code> ????"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="identifier" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Initialization expression for the variable&#xA;Default value is &lt;code>void&lt;/code> ????"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="structure" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/language/structure/kermeta_temp_uri"
          nsPrefix="">
        <eAnnotations source="kermeta">
          <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/language/structure"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Contains the concrete implementation (including the operation bodies) &#xD;&#xA; * of the classes of the &lt;code>kermeta::reflection&lt;/code> package.&#xD;&#xA; * If you need more documentation, please take a look at the&#xD;&#xA; * &lt;code>kermeta::reflection&lt;/code> package which is more complete.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/language_structure_package.png&quot;/>&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/language_structure_visitor_view.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.Object">
          <eAnnotations source="kermeta">
            <details key="alias" value="kermeta::standard::String"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Object">
          <eAnnotations source="kermeta">
            <details key="alias" value="kermeta::standard::Boolean"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="#/8/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Every one knows what an operation is."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1"
              eType="#/8/language/structure/Parameter" containment="true" eOpposite="#/8/language/structure/Parameter/operation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Parameters of the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="#/8/language/structure/ClassDefinition"
              eOpposite="#/8/language/structure/ClassDefinition/ownedOperation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="ClassDefinition owning the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating whether the Operation is abstract"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="raisedException"
              upperBound="-1" eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Exceptions raised by the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" upperBound="-1"
              eType="#/8/language/structure/TypeVariable">
            <eAnnotations source="kermeta">
              <details key="documentation" value="TypeParameters of the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="post" upperBound="-1"
              eType="#/8/language/structure/Constraint" containment="true" eOpposite="#/8/language/structure/Constraint/postOwner">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Post-conditions of the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="#/8/language/behavior/Expression"
              containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the Operation, expressed as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="pre" upperBound="-1"
              eType="#/8/language/structure/Constraint" containment="true" eOpposite="#/8/language/structure/Constraint/preOwner">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Pre-conditions of the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="superOperation" eType="#/8/language/structure/Operation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Super-operation of the Operation, if any"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="#/8/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Class representing the property definition. Kermeta&lt;->Ecore equivalence:&#xA; - Property with isComposite == true or with type is a base type (String, Integer, Boolean)  : EAttribute&#xA; - Property with isComposite == false : EReference"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="getterBody" eType="#/8/language/behavior/Expression"
              containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="opposite" eType="#/8/language/structure/Property">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Opposite Property of the Property, void if the Property has no opposite"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isSetterAbstract"
              eType="#/8/standard/JavaBoolean" defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating wether the setter is abstract."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="#/8/language/structure/ClassDefinition"
              eOpposite="#/8/language/structure/ClassDefinition/ownedAttribute">
            <eAnnotations source="kermeta">
              <details key="documentation" value="ClassDefinition that owns the Property"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="If True, the value of the property is not stored but computed from other properties"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isID" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating whether the property allows to identify its containing Object"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating whether the Property is read-only"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="_default" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isGetterAbstract"
              eType="#/8/standard/JavaBoolean" defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating wether the getter is abstract."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="setterBody" eType="#/8/language/behavior/Expression"
              containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isComposite" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating whether the Property has a containment role"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Type" eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Alias to kermeta::standard::Integer"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="Base class definition for the &lt;b>use&lt;/b> of a type."/>
          </eAnnotations>
          <eOperations name="deepClone" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="isAbstract" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a copy of passed Object built by recursively copying values of&#xD;&#xA;&#x9; * all properties, no matter the property kind&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="isInstance" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Implements Type.isInstance(Object)&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;this&quot;));&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="element" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="isSuperTypeOf" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Implements Type.isSuperTypeOf(Type)&#xD;&#xA; &#x9; * For technical reason, the current implementation works only with Type that comes from a kermeta declaration (ie. in a require)&#xD;&#xA; &#x9; * it won't work with Type created programmaticaly by the user. If you need that, please ask to the kermeta developpers&#xD;&#xA; &#x9; * to extend it.&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.TypeUtil.hasSubType(this, object);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="object" eType="#/8/language/structure/Type"/>
          </eOperations>
          <eOperations name="clone" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="isAbstract" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a copy of passed Object built by recursively copying attribute&#xD;&#xA;&#x9; * properties, and referencing original reference properties values&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="isSubTypeOf" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Implements Type.isSubTypeOf(Type)&#xD;&#xA; &#x9; * For technical reason, the current implementation works only with Type that comes from a kermeta declaration (ie. in a require)&#xD;&#xA; &#x9; * it won't work with Type created programmaticaly by the user. If you need that, please ask to the kermeta developpers&#xD;&#xA; &#x9; * to extend it.&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.TypeUtil.isSuperTypeOf(object, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;this&quot;));&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="object" eType="#/8/language/structure/Type"/>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeContainer" eType="#/8/language/structure/TypeContainer"
              eOpposite="#/8/language/structure/TypeContainer/containedType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning TypeContainer, if any"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeContainer" abstract="true"
            eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Phantom class : EMF reflexive editors need that any element of a metamodel &#xA;has a direct or indirect containment relationship with the root model element of&#xA;the metamodel. This class resolves this technical requirement."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="containedType" upperBound="-1"
              eType="#/8/language/structure/Type" containment="true" eOpposite="#/8/language/structure/Type/typeContainer">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Contained types"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="#/8/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Item definition for enumeration"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="#/8/language/structure/Enumeration"
              transient="true" eOpposite="#/8/language/structure/Enumeration/ownedLiteral">
            <eAnnotations source="kermeta">
              <details key="ecore.isTransient" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning Enumeration"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeVariableBinding" eSuperTypes="#/8/language/structure/TypeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Definition of a binding between a TypeVariable and a Type"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1"
              eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Assigned Type"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="variable" lowerBound="1"
              eType="#/8/language/structure/TypeVariable">
            <eAnnotations source="kermeta">
              <details key="documentation" value="TypeVariable"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Object definition: all entities of Kermeta metamodel explicitly inherit from Object"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="EMF_needProperty" value="name=oid javaClass=java.lang.Integer"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="EMF_needProperty" value="name=container classDefinitionQN=kermeta::language::structure::Object"/>
          </eAnnotations>
          <eOperations name="isNotEqual" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * See kermeta::language::structure::Object.equals(Object)&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this, element));&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="element" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="isSet" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * True if the &lt;code>~property&lt;/code> of the object has been set&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(this, property);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="property" eType="#/8/language/structure/Property"/>
          </eOperations>
          <eOperations name="asType" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Implementation of OCL like cast. It returns self if the object object conforms to the type given as parameter.&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="WrapperValueTypeReturnType" value="java.lang.String=kermeta.language.structure.Object java.lang.Boolean=kermeta.language.structure.Object java.lang.Integer=kermeta.language.structure.Object java.lang.Double=kermeta.language.structure.Object java.lang.Character=kermeta.language.structure.Object java.lang.Number=kermeta.language.structure.Object"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="WrapperValueTypeSelfExpression" value="java.lang.String=kermeta.language.structure.Object java.lang.Boolean=kermeta.language.structure.Object java.lang.Integer=kermeta.language.structure.Object java.lang.Double=kermeta.language.structure.Object java.lang.Character=kermeta.language.structure.Object java.lang.Number=kermeta.language.structure.Object"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_408 = false;&#xA;&#x9;idIfCond_408 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(this, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;type&quot;));&#xA;&#xA;&#x9;if( idIfCond_408 ) {&#xA;&#xA;&#x9;result = this;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.TypeCastError&quot;)) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="type" eType="#/8/language/structure/Class"/>
          </eOperations>
          <eOperations name="hashcode" eType="#/8/standard/JavaInteger">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * code used in hashtable in order to identify an object in the hashtable keys&#xD;&#xA;&#x9; * This system is similar to the hashcode used in java. Please refer to java documentation&#xD;&#xA;&#x9; * for more information about hashcode&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(this);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="get" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/** &#xD;&#xA;&#x9; * Returns the instances of the given property for this Object.&#xD;&#xA;&#x9; *&#xD;&#xA;&#x9; * Example : &#xD;&#xA;&#x9; * &lt;pre>&#xD;&#xA;&#x9; * class A { reference attr : String }&#xD;&#xA;&#x9; * &lt;/pre>&#xD;&#xA;&#x9; * Using A :&#xD;&#xA;&#x9; * &lt;pre>&#xD;&#xA;&#x9; * operation getAProp() is do&#xD;&#xA;&#x9; *    var a : A&#xD;&#xA;&#x9; *    var s : String&#xD;&#xA;&#x9; *    var the_attr : Property init self.getMetaClass.ownedAttribute.one&#xD;&#xA;&#x9; *    s ?= a.get(the_attr)&#xD;&#xA;&#x9; * end&#xD;&#xA;&#x9; * &lt;/pre>&#xD;&#xA;&#x9; * The user has to cast&#xD;&#xA;&#x9; * the result of this method according to the type and the upper multiplicity&#xD;&#xA;&#x9; * of this property. If upper multiplicity > 1, than the effective type of the &#xD;&#xA;&#x9; * result is a Sequence&lt;ThePropertyName>. Otherwise, the type corresponds to &#xD;&#xA;&#x9; * the name of the given Property (i.e the type of the property instance).&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="WrapperValueTypeReturnType" value="java.lang.String=kermeta.language.structure.Object java.lang.Boolean=kermeta.language.structure.Object java.lang.Integer=kermeta.language.structure.Object java.lang.Double=kermeta.language.structure.Object java.lang.Character=kermeta.language.structure.Object java.lang.Number=kermeta.language.structure.Object"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(this, property);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="property" eType="#/8/language/structure/Property"/>
          </eOperations>
          <eOperations name="toString" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Implements Object.toString()&#xD;&#xA; &#x9; * Returns a String of form [qn:oid] where 'qn' is the qualified name of&#xD;&#xA; &#x9; * the object type, and oid the unique ID of the object&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;[&quot;, org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(this).getTypeDefinition().qualifiedName()), &quot;:&quot;), kermeta.standard.helper.IntegerWrapper.toString(org.kermeta.compil.runtime.helper.language.ObjectUtil.oid(this))), &quot;]&quot;);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="containingResource" eType="#/8/persistence/Resource">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the Resource currently containing (directly or indirectly) the Object &#xD;&#xA;&#x9; * or void if the object belongs to no Resource&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(this);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="isKindOf" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the current Object is an instance of the given Class&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(this).equals(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;cl&quot;));&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="cl" eType="#/8/language/structure/Class"/>
          </eOperations>
          <eOperations name="isInstanceOf" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the current Object conforms to given Type&#xD;&#xA;&#x9; * This means: is this object an instance of this type, or is it an instance of its subtype &#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(this, type.getClass().getName());&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="type" eType="#/8/language/structure/Type"/>
          </eOperations>
          <eOperations name="freeze">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Freeze the Object&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(this);&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="container" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the Object that contains current Object, void if the Object has&#xD;&#xA;&#x9; * no container&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="WrapperValueTypeReturnType" value="java.lang.String=kermeta.language.structure.Object java.lang.Boolean=kermeta.language.structure.Object java.lang.Integer=kermeta.language.structure.Object java.lang.Double=kermeta.language.structure.Object java.lang.Character=kermeta.language.structure.Object java.lang.Number=kermeta.language.structure.Object"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(this);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="checkInvariants">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Runs checking of invariants defined for the metaclass of the Object&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(this).getClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_409 = false;&#xA;&#x9;idIfCond_409 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(cd));&#xA;&#xA;&#x9;if( idIfCond_409 ) {&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft94 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_410 = false;&#xA;&#x9;while( !idLoopCond_410 ) {&#xA;&#x9;idLoopCond_410 = it_ft94.isOff();&#xA;&#x9;if ( idLoopCond_410 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property p = it_ft94.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(this, p);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_411 = false;&#xA;&#x9;idIfCond_411 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v)), org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;if( idIfCond_411 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_412 = false;&#xA;&#x9;idIfCond_412 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p.getLower()), kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(p.getUpper(), kermeta.standard.helper.IntegerWrapper.uminus(1)), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p.getUpper())));&#xA;&#xA;&#x9;if( idIfCond_412 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_413 = false;&#xA;&#x9;idIfCond_413 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(v));&#xA;&#xA;&#x9;if( idIfCond_413 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.ConstraintViolatedInv&quot;)) );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(this);&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="set">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Sets the &lt;code>element&lt;/code> to the &lt;code>~property&lt;/code> of the object &#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_414 = false;&#xA;&#x9;idIfCond_414 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(element, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;property.getType()&quot;));&#xA;&#xA;&#x9;if( idIfCond_414 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(this, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.IncompatibleTypeError&quot;));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(this)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toString(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;"/>
            </eAnnotations>
            <eParameters name="property" eType="#/8/language/structure/Property"/>
            <eParameters name="element" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="oid" eType="#/8/standard/JavaInteger">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the unique Oid of the Object&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(this);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="isVoid" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Object is Void&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="unset">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Remove the element set as the &lt;code>~property&lt;/code> of the object.&#xD;&#xA;&#x9; * The &lt;code>isSet(~property)&lt;/code> method will then return False&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(this, property);&#xA;"/>
            </eAnnotations>
            <eParameters name="property" eType="#/8/language/structure/Property"/>
          </eOperations>
          <eOperations name="equals" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * semantic equality,&#xD;&#xA;&#x9; * if you wish to test for object identity you need to use the method oid&#xD;&#xA;&#x9; * ex: x.oid == y.oid&#xD;&#xA;&#x9; * by default, (ie. if not overloaded), the equals method for class Object implements &#xD;&#xA;&#x9; * the most discriminating possible equivalence relation on objects; that is, for any non-null &#xD;&#xA;&#x9; * reference values x and y, this method returns true if and only if x and y refer to the same &#xD;&#xA;&#x9; * object (x.oid == y.oid has the value true). &#xD;&#xA;&#x9; *&#xD;&#xA;&#x9; * note1: the operator == is mapped to this &#xD;&#xA;&#x9; * note2: overloading this operation have some impact on the behavior on collection and hashtable that rely on it&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this, element);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="element" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="getMetaClass" eType="#/8/language/structure/Class">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the Class object that is the metaclass of current Object&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( this );&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="isFrozen" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Object is currently in a&#xD;&#xA;&#x9; * frozen state&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(this);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="checkAllInvariants">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Recursively runs checking of invariants defined for the metaclass of the Object&#xD;&#xA;&#x9; * and its supertypes&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="RecopyInValueTypes" value="true"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;&#x9;java.lang.Boolean idIfCond_415 = false;&#xA;&#x9;idIfCond_415 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(this, null);&#xA;&#xA;&#x9;if( idIfCond_415 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(this);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(this).getTypeDefinition();&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft95 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_416 = false;&#xA;&#x9;while( !idLoopCond_416 ) {&#xA;&#x9;idLoopCond_416 = it_ft95.isOff();&#xA;&#x9;if ( idLoopCond_416 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Property subObj = it_ft95.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_417 = false;&#xA;&#x9;idIfCond_417 = subObj.getIsComposite();&#xA;&#xA;&#x9;if( idIfCond_417 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_418 = false;&#xA;&#x9;idIfCond_418 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(this, subObj)).getTypeDefinition().getName(), &quot;ReflectiveSequence&quot;), kermeta.standard.helper.StringWrapper.equals(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(this, subObj)).getTypeDefinition().getName(), &quot;ReflectiveCollection&quot;));&#xA;&#xA;&#x9;if( idIfCond_418 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.get(this, subObj);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft96 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_419 = false;&#xA;&#x9;while( !idLoopCond_419 ) {&#xA;&#x9;idLoopCond_419 = it_ft96.isOff();&#xA;&#x9;if ( idLoopCond_419 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object aSubObjInstances = it_ft96.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(aSubObjInstances);&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants(org.kermeta.compil.runtime.helper.language.ObjectUtil.get(this, subObj));&#xA;}&#xA;&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;}&#xA;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTags" upperBound="-1"
              eType="#/8/language/structure/Tag" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="An object can contains a Tag.  &#xA;Be careful, owning a tag doesn't means that the tag applies to the Object&#xA;To know which Tags apply to the object use the &quot;tag&quot; reference"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="tag" upperBound="-1"
              eType="#/8/language/structure/Tag" eOpposite="#/8/language/structure/Tag/object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="An Object can be tagged by a Tag. &#xA;They are typically used to put comments/documentation on the object"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="oid" eType="#/8/language/structure/KermetaProperty_Object_oid"/>
          <eStructuralFeatures xsi:type="ecore:EReference" name="container" eType="#/8/language/structure/Object"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Object">
          <eAnnotations source="kermeta">
            <details key="alias" value="kermeta::standard::Integer"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" eSuperTypes="#/8/language/structure/TypedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value=" Model elements with a multiplicity [lower..upper] inherit this class"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" eType="#/8/standard/JavaInteger">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Max cardinality of the element, '-1' for '*'"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" eType="#/8/standard/JavaInteger">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Min cardinality of the element"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating whether duplicated elements are allowed"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating whether the element is ordered"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Object">
          <eAnnotations source="kermeta">
            <details key="alias" value="kermeta::standard::Integer"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true"
            eSuperTypes="#/8/language/structure/TypeContainer #/8/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstraction of the notion of typed element : each element &#xA;that is typed inherits this class."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type of the model element"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeDefinition" eSuperTypes="#/8/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This boolean allows to tell if this Type definition is an aspect or not&#xA;If it is an aspect, then at runtime, its definition will be merged with the definition of another&#xA;TypeDefinition that has exactly the same qualified name"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstraction for type definitions (ClassDefinition, ModelTypeDefinition, DataType inherit&#xA;this class)"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAspect" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true"
            eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Any element that contain a  name (example : Operation, Property) inherit this&#xA;class."/>
          </eAnnotations>
          <eOperations name="qualifiedName" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the qualified name of this named element. Qualified name is &#xD;&#xA;&#x9; * the list of the names of the packages hierarchically ordered, delimited by&#xD;&#xA;&#x9; * a &quot;::&quot;, followed by the name of this named element.&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;kermeta.language.structure.NamedElement elem = this;&#xA;&#xA;&#x9;result = this.getName();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_420 = false;&#xA;&#x9;idIfCond_420 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(org.kermeta.compil.runtime.helper.language.ObjectUtil.container(elem), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.NamedElement&quot;));&#xA;&#xA;&#x9;if( idIfCond_420 ) {&#xA;&#xA;&#x9;&#xA;&#x9;elem = (kermeta.language.structure.NamedElement) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(elem);&#xA;&#x9;java.lang.Boolean idLoopCond_421 = false;&#xA;&#x9;while( !idLoopCond_421 ) {&#xA;&#x9;idLoopCond_421 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(elem, null);&#xA;&#x9;if ( idLoopCond_421 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;result = kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(elem.getName(), &quot;::&quot;), result);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_422 = false;&#xA;&#x9;idIfCond_422 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(org.kermeta.compil.runtime.helper.language.ObjectUtil.container(elem), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.NamedElement&quot;));&#xA;&#xA;&#x9;if( idIfCond_422 ) {&#xA;&#xA;&#x9;elem = (kermeta.language.structure.NamedElement) org.kermeta.compil.runtime.helper.language.ObjectUtil.container(elem);&#xA;}&#xA; else {&#xA;&#xA;&#x9;elem = null;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1"
              eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Name of this named element"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="#/8/language/structure/ParameterizedType">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Returns the Attributes, References, and derived Properties owned by&#xA;the ClassDefinition of this Class."/>
          </eAnnotations>
          <eOperations name="deepClone" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="superOperation" value="kermeta::language::structure::Type"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.deepCloneObject(this, objectToClone);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="toString" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the String representation of this class. &#xD;&#xA;&#x9; *  Note : throws an exception if this class has no classDefinition&#xD;&#xA;&#x9; *  or if the classDefinition is not well constructed.&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="superOperation" value="kermeta::language::structure::Object"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = this.getTypeDefinition().getName();&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="equals" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="superOperation" value="kermeta::language::structure::Object"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ClassUtil.equals(this, other);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="other" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="_new" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Instantiates a new occurence for this Class&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(this.getClass().getName());&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="clone" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="superOperation" value="kermeta::language::structure::Type"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.cloneObject(this, objectToClone);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classDefinition"
              eType="#/8/language/structure/ClassDefinition" derived="true">
            <eAnnotations source="kermeta">
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the ClassDefinition for this class&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1"
              eType="#/8/language/structure/Property" derived="true">
            <eAnnotations source="kermeta">
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="Returns the Attributes, References, and derived Properties owned by&#xA;the ClassDefinition of this Class."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false" derived="true">
            <eAnnotations source="kermeta">
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="Returns a Boolean stating whether ClassDefinition of this Class is abstract."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" ordered="false"
              upperBound="-1" eType="#/8/language/structure/Operation" derived="true">
            <eAnnotations source="kermeta">
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="#/8/standard/JavaString"
              derived="true">
            <eAnnotations source="kermeta">
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="Returns the name of the ClassDefinition of this Class"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="superClass" ordered="false"
              upperBound="-1" eType="#/8/language/structure/Class" derived="true">
            <eAnnotations source="kermeta">
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DataType" abstract="true" eSuperTypes="#/8/language/structure/Type #/8/language/structure/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Special type definition for Enumeration, PrimitiveType"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#/8/language/structure/DataType">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Definition for Enumeration"/>
          </eAnnotations>
          <eOperations name="clone" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Implements kermeta::language::structure::Type.clone(Object)&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="superOperation" value="kermeta::language::structure::Type"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( &quot;NOT IMPLEMENTED&quot; );&#xA;&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" upperBound="-1"
              eType="#/8/language/structure/EnumerationLiteral" containment="true"
              eOpposite="#/8/language/structure/EnumerationLiteral/enumeration">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owned items in an Enumeration"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="#/8/language/structure/NamedElement #/8/language/structure/TypeDefinitionContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Package in kermeta. Each kermeta model must have a root package. "/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="nestedPackage" upperBound="-1"
              eType="#/8/language/structure/Package" containment="true" eOpposite="#/8/language/structure/Package/nestingPackage">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Nested Packages contained by the Package"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Uri of the Package"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="nestingPackage" eType="#/8/language/structure/Package"
              transient="true" eOpposite="#/8/language/structure/Package/nestedPackage">
            <eAnnotations source="kermeta">
              <details key="ecore.isTransient" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning Package, if any"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#/8/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Definition for operation parameter"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="operation" eType="#/8/language/structure/Operation"
              transient="true" eOpposite="#/8/language/structure/Operation/ownedParameter">
            <eAnnotations source="kermeta">
              <details key="ecore.isTransient" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning operation"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="#/8/language/structure/DataType #/8/language/structure/TypeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="The class definition for kermeta aliases. Above statement defines a primitive&#xD;&#xA;type called MyString, which instanceType is &lt;code>kermeta::standard::String&lt;/code>&#xD;&#xA;&lt;pre>alias MyString : kermeta::standard::String&lt;/pre>. Another example could be: &lt;code>root::apackage::AClass&lt;/code>&#xD;&#xA;&lt;pre>alias MyClass : root::apackage::AClass&lt;/pre>, thus a primitive type may be not a subtype of ValueType (ValueType is a concept from the Kermeta framework)."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="instanceType" eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The type the primitive type is linked with"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Tag" eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Tag is intended to be used to add documentation on a  model element,&#xA;or add some textual information that cannot be expressed with any&#xA;model element definition."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="object" lowerBound="1"
              upperBound="-1" eType="#/8/language/structure/Object" eOpposite="#/8/language/structure/Object/tag">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Objects to which the Tag is attached to"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="String value of the Tag"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Name of the Tag"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Constraint" eSuperTypes="#/8/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Constraint is part of a contract implementation in a Class definition or an operation.&#xA;Three kinds of constraints are available : pre, post, and inv (invariant constraint)"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="stereotype" eType="#/8/language/structure/ConstraintType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type of the Constraint (precond/postcond/inv)"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="preOwner" eType="#/8/language/structure/Operation"
              eOpposite="#/8/language/structure/Operation/pre">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning Operation if Constraint corresponds to pre-condition"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="postOwner" eType="#/8/language/structure/Operation"
              eOpposite="#/8/language/structure/Operation/post">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning Operation if Constraint corresponds to post-condition"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="invOwner" eType="#/8/language/structure/ClassDefinition"
              eOpposite="#/8/language/structure/ClassDefinition/inv">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning ClassDefinition if Constraint corresponds to invariant"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" eType="#/8/language/structure/ConstraintLanguage">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Language in which the constraint is expressed"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" ordered="false"
              lowerBound="1" eType="#/8/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the constraint, expressed as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ConstraintType">
          <eLiterals name="inv" literal="inv"/>
          <eLiterals name="pre" value="1" literal="pre"/>
          <eLiterals name="post" value="2" literal="post"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ConstraintLanguage">
          <eLiterals name="kermeta" literal="kermeta"/>
          <eLiterals name="ocl" value="1" literal="ocl"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ClassDefinition" eSuperTypes="#/8/language/structure/GenericTypeDefinition #/8/language/structure/TypeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="The definition of a class definition :)&#xA; &lt;pre>class A&#xA;{ &#xA;  attribute s : String&#xA;}&#xA;  &lt;/pre> is a class definition; in :&#xA;&lt;pre>&#xA;main() : A is do end&#xA;&lt;/pre>&#xA;A is a &lt;b>Class&lt;/b> : it corresponds to the &lt;b>use&lt;/b> of the class definition of A"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="allOperation" ordered="false"
              upperBound="-1" eType="#/8/language/structure/Operation" derived="true">
            <eAnnotations source="kermeta">
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns all the Operations of this ClassDefinition&#xD;&#xA;&#x9; * including the inherited ones&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="superType" upperBound="-1"
              eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Classes from which this ClassDefinition inherits."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="#/8/standard/JavaBoolean"
              defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Boolean stating whether the ClassDefinition is abstract (which means that&#xA;no instance can be allocated)"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="inv" upperBound="-1"
              eType="#/8/language/structure/Constraint" containment="true" eOpposite="#/8/language/structure/Constraint/invOwner">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Invariants defined for this ClassDefinition"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1"
              eType="#/8/language/structure/Property" containment="true" eOpposite="#/8/language/structure/Property/owningClass">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Attributes, References, and derived Properties owned by this ClassDefinition."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" upperBound="-1"
              eType="#/8/language/structure/Operation" containment="true" eOpposite="#/8/language/structure/Operation/owningClass">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Operations owned by this ClassDefinition."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="allAttribute" ordered="false"
              upperBound="-1" eType="#/8/language/structure/Property" derived="true">
            <eAnnotations source="kermeta">
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns all the Attributes, References, derived Properties of this &#xD;&#xA;&#x9; * ClassDefinition including the inherited ones&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="GenericTypeDefinition" abstract="true"
            eSuperTypes="#/8/language/structure/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstracts the definition of generic type definitions (i.e. type definitions that&#xA;can be parameterized), namely, for ClassDefinition and ModelTypeDefinition."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" upperBound="-1"
              eType="#/8/language/structure/TypeVariable" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type variables defined for the GenericTypeDefinition"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ParameterizedType" abstract="true"
            eSuperTypes="#/8/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstraction for Parameterized types, namely, Class and ModelType"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding"
              upperBound="-1" eType="#/8/language/structure/TypeVariableBinding" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Bindings between type variables and provided types "/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeDefinition" lowerBound="1"
              eType="#/8/language/structure/GenericTypeDefinition">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Definition of the Type"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="virtualTypeBinding"
              upperBound="-1" eType="#/8/language/structure/TypeVariableBinding" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeVariable" abstract="true"
            eSuperTypes="#/8/language/structure/TypeContainer #/8/language/structure/Type #/8/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Definition of a type variable for generic types :  &#xA;in class definition &lt;pre>class AClass&lt;X,Y> {}&lt;/pre>, X and Y are type variables."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="supertype" eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Reference to the supertype, if any"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ObjectTypeVariable" eSuperTypes="#/8/language/structure/TypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelType" eSuperTypes="#/8/language/structure/Type #/8/language/structure/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Type of a model, consisting of a set of included type definitions"/>
          </eAnnotations>
          <eOperations name="isModelTypeOf" eType="#/8/standard/JavaBoolean">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * To be written ##########################################&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ModelTypeUtil.isModelTypeOf(this, m);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="m" eType="#/8/language/structure/Model"/>
          </eOperations>
          <eOperations name="_new" eType="#/8/language/structure/Model">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * To be written ##########################################&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Model result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Model) org.kermeta.compil.runtime.helper.language.ModelTypeUtil.newObject(this);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="includedTypeDefinition"
              upperBound="-1" eType="#/8/language/structure/TypeDefinition">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelTypeVariable" eSuperTypes="#/8/language/structure/TypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="virtualType" upperBound="-1"
              eType="#/8/language/structure/VirtualType" containment="true" eOpposite="#/8/language/structure/VirtualType/modelType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VirtualType" eSuperTypes="#/8/language/structure/ObjectTypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classDefinition"
              lowerBound="1" eType="#/8/language/structure/ClassDefinition">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding"
              upperBound="-1" eType="#/8/language/structure/TypeVariableBinding" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelType" lowerBound="1"
              eType="#/8/language/structure/ModelTypeVariable" eOpposite="#/8/language/structure/ModelTypeVariable/virtualType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Model" eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Is the holder of a set of model elements (Object) that are compatible with the ModelType that has &#xA;instantiated this Model."/>
          </eAnnotations>
          <eOperations name="filter">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Returns a set of all the elements of the model that are instance of the given Type&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.standard.Set&lt;kermeta.language.structure.Object> result = null;&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: select&#xA;&#xA;kermeta.standard.Sequence&lt;kermeta.language.structure.Object> result_ft97 = null;&#xA;&#xA;&#x9;kermeta.language.structure.Object elem_ft97 = null;&#xA;&#xA;&#x9;result_ft97 = ((kermeta.standard.Sequence&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Sequence&lt;kermeta.language.structure.Object>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft97 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Object>convertAsOrderedSet(this.getContents()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_423 = false;&#xA;&#x9;while( !idLoopCond_423 ) {&#xA;&#x9;idLoopCond_423 = it_ft97.isOff();&#xA;&#x9;if ( idLoopCond_423 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft97 = it_ft97.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_424 = false;&#xA;//Beginning of the Inlining of the lambda expression: selector&#xA;kermeta.language.structure.Object o = elem_ft97;&#xA;&#xA;&#x9;idIfCond_424 = org.kermeta.compil.runtime.helper.language.TypeUtil.isInstance(typeName, o);&#xA;//End of the Inlining of the lambda expression: selector&#xA;&#xA;&#xA;&#x9;if( idIfCond_424 ) {&#xA;&#xA;&#x9;result_ft97.add(elem_ft97);&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: select&#xA;result = result_ft97.asSet();&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eGenericType eClassifier="#/8/standard/Set">
              <eTypeArguments eClassifier="#/8/language/structure/Object"/>
            </eGenericType>
            <eParameters name="typeName" eType="#/8/language/structure/Type"/>
          </eOperations>
          <eOperations name="addAllCompatible">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Add all the Object of the collection that are copmpatible with the ModelDefinition. Other objects are ignored.&#xD;&#xA; &#x9; * Returns the list of Object that have been added (One can check that some element have been ignored or not)&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.standard.Collection&lt;kermeta.language.structure.Object> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Set&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;kermeta.language.structure.Object>&quot;));&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft98 = objectsToAdd.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_425 = false;&#xA;&#x9;while( !idLoopCond_425 ) {&#xA;&#x9;idLoopCond_425 = it_ft98.isOff();&#xA;&#x9;if ( idLoopCond_425 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.language.structure.Object obj = it_ft98.next();&#xA;&#xA;&#x9;kermeta.language.structure.Object addedObject = this.addCompatible(obj);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_426 = false;&#xA;&#x9;idIfCond_426 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid(addedObject));&#xA;&#xA;&#x9;if( idIfCond_426 ) {&#xA;&#xA;&#x9;result.add(obj);&#xA;}&#xA;&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eGenericType eClassifier="#/8/standard/Collection">
              <eTypeArguments eClassifier="#/8/language/structure/Object"/>
            </eGenericType>
            <eParameters name="objectsToAdd">
              <eGenericType eClassifier="#/8/standard/Collection">
                <eTypeArguments eClassifier="#/8/language/structure/Object"/>
              </eGenericType>
            </eParameters>
          </eOperations>
          <eOperations name="add">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Add an object to the model. According to the ModelType, the typechecker will statically verify if the object can be added or not&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Object>convertAsOrderedSet(this.getContents());&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ModelUtil.add(this, obj);&#xA;"/>
            </eAnnotations>
            <eParameters name="obj" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="addCompatible" eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Add the Object if it is copmpatible with the ModelDefinition. Other objects are ignored.&#xD;&#xA; &#x9; * Returns the object if it has been added (One can check that some element have been ignored or not)&#xD;&#xA; &#x9; * return Void if not added&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Object>convertAsOrderedSet(this.getContents());&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ModelUtil.addCompatible(this, objectToAdd);&#xA;&#xA;return result;&#xA;"/>
            </eAnnotations>
            <eParameters name="objectToAdd" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eOperations name="remove">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Remove an object from the model&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.remove(contents, obj);&#xA;"/>
            </eAnnotations>
            <eParameters name="obj" eType="#/8/language/structure/Object"/>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="contents" upperBound="-1"
              eType="#/8/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Contents of this model..."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelingUnit" eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="The modeling unit is the root of any kermeta model. It contains packages, requires and usings.&#xA;It also reference others modeling unit."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="packages" upperBound="-1"
              eType="#/8/language/structure/Package" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="root packages contained by this ModelingUnit"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="includeFilters" upperBound="-1"
              eType="#/8/language/structure/Filter" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="list of filters that apply to this modeling unit.&#xA;This means that if the same unit was loaded without this filters, it would have loaded more content&#xA;only element whose qualified name begins with one of these filter will be loaded in the unit"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="excludeFilters" upperBound="-1"
              eType="#/8/language/structure/Filter" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="list of filters that apply to this modeling unit.&#xA;This means that if the same unit was loaded without this filters, it would have loaded more content&#xA;element whose qualified name begins with one of these filter will NOT be loaded in the unit"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="referencedModelingUnits"
              upperBound="-1" eType="#/8/language/structure/ModelingUnit">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="requires" upperBound="-1"
              eType="#/8/language/structure/Require" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Set of &quot;require&quot; statements associated with this ModelingUnit. Ie. list of the other&#xA;files required to run this unit"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="usings" upperBound="-1"
              eType="#/8/language/structure/Using" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Set of &quot;using&quot; statement associated with this ModelingUnit. Ie. list of &quot;syntatic shortcut&quot;&#xA;that can be used within this unit."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Require" eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Using" eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Filter" eSuperTypes="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Filter is the class that represent a filter on a ModelingUnit.&#xA;the qualifiedName represent the beginning of the matched names"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="#/8/standard/JavaString">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ProductType" eSuperTypes="#/8/language/structure/TypeContainer #/8/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Type corresponding to a set of Types&#xA;Only used in the context of FunctionType"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" unique="false"
              upperBound="-1" eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Types "/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="FunctionType" eSuperTypes="#/8/language/structure/TypeContainer #/8/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Type used to define the use of lambda expressions.&#xA; Uses :&#xA; &lt;pre>operation forAll(func : &lt;G -> Boolean>) : Boolean is do&#xA;     var test : Boolean init true&#xA;     from var it : Iterator&lt;G> init iterator&#xA;     until it.isOff&#xA;     loop&#xA;        test := test and func(it.next)&#xA;     end&#xA;     result := test&#xA; end&#xA; &lt;/pre>&#xA; *&#xA; In the above example, &amp;lt;G -> Boolean&amp;gt; is a function type f(G) -&amp;gt; &#xA; Boolean, with a parameter of type G and a return type of type Boolean&#xA; The operation &lt;code>forAll&lt;/code> takes a lambda expression as parameter."/>
          </eAnnotations>
          <eAnnotations source="kermeta.inv">
            <details key="resultType" value=""/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="right" eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Result type of the function"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="left" eType="#/8/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Parameters of the function (a ProductType for multiple parameters)"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VoidType" eSuperTypes="#/8/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Class definition for the &lt;pre>Void&lt;/pre> type"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeDefinitionContainer" abstract="true"
            eSuperTypes="#/8/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstraction of the notion of containment for type definitions. Now, kermeta metamodel contains one container&#xA;element, that is Package. In a later release, ModelTypeDefinition will be the main container for type and&#xA;package definition."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTypeDefinition"
              upperBound="-1" eType="#/8/language/structure/TypeDefinition" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Contained TypeDefinitions"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="KermetaProperty_Object_oid"
            instanceClassName="java.lang.Integer"/>
      </eSubpackages>
    </eSubpackages>
    <eSubpackages name="utils" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/utils/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/utils"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Contains special classes (Hashtable, Stack) that are not contained in Kermeta&#xD;&#xA; * metamodel&#xD;&#xA; * &#xD;&#xA; * &lt;img src=&quot;./figures/utils_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Contains special classes (Hashtable, Stack) that are not contained in Kermeta&#xD;&#xA; * metamodel&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="StringBuffer" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * This class mimic the behavior of the java's StringBuffer class. This enables better performance in long&#xA; * string concatenation.&lt;br>&#xA; * &lt;b>Only work on Strings&lt;/b>&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/utils_package.png&quot;/>&#xA; */"/>
        </eAnnotations>
        <eOperations name="append" eType="#/8/utils/StringBuffer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA;&#x9; * Append a given string at the end of this StringBuffer&#xA;&#x9; * @param arg0 A string to append at the end of this StringBuffer&#xA;&#x9; * @return A reference to this object&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.utils.StringBuffer result = null;&#xA;&#xA;&#x9;result = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.basetypes.StringBufferUtil.append(this, arg0);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="arg0" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="length" eType="#/8/standard/JavaInteger">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA;&#x9; * Return the length of the StringBuffer&#xA;&#x9; * @return length of the StringBuffer&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.StringBufferUtil.length(this);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA;&#x9; *Convert this StringBuffer to String and return its value&#xA;&#x9; *@return The string value of this StringBuffer&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta">
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.String stringValue = null;&#xA;&#xA;&#x9;stringValue = (java.lang.String) org.kermeta.compil.runtime.helper.basetypes.StringBufferUtil.toString(this);&#xA;&#xA;&#x9;result = stringValue;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Hashtable" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An implementation of hashtable&#xD;&#xA; * This implementation is for speed optimisation it cannot be serialized. &#xD;&#xA; * If your wish to serialize its content you need to copy its content into a classical ecore structure (attribute or references)&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/utils_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="K"/>
        <eTypeParameters name="V"/>
        <eOperations name="keys">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a set containing the hash keys of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Set&lt;K> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Set&lt;K>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Set&lt;K>&quot;));&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;K> it = this.keyIterator();&#xA;&#x9;java.lang.Boolean idLoopCond_427 = false;&#xA;&#x9;while( !idLoopCond_427 ) {&#xA;&#x9;idLoopCond_427 = it.isOff();&#xA;&#x9;if ( idLoopCond_427 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;result.add(it.next());&#xA;}&#xA;&#x9;}&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Set">
            <eTypeArguments eTypeParameter="#/8/utils/Hashtable/K"/>
          </eGenericType>
        </eOperations>
        <eOperations name="getValue">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the value for key 'key' if it exists, otherwise returns Void&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;V result = null;&#xA;&#xA;&#x9;result = (V) org.kermeta.compil.runtime.helper.basetypes.MapUtil.get(this, key);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/utils/Hashtable/V"/>
          <eParameters name="key">
            <eGenericType eTypeParameter="#/8/utils/Hashtable/K"/>
          </eParameters>
        </eOperations>
        <eOperations name="values">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a collection containing the elements of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Collection&lt;V> result = null;&#xA;&#xA;&#x9;result = ((kermeta.standard.Bag&lt;V>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.standard.Bag&lt;V>&quot;));&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;K> it_ft99 = this.keys().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_428 = false;&#xA;&#x9;while( !idLoopCond_428 ) {&#xA;&#x9;idLoopCond_428 = it_ft99.isOff();&#xA;&#x9;if ( idLoopCond_428 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;K k = it_ft99.next();&#xA;&#xA;&#x9;result.add(this.getValue(k));&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Collection">
            <eTypeArguments eTypeParameter="#/8/utils/Hashtable/V"/>
          </eGenericType>
        </eOperations>
        <eOperations name="containsKey" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#x9;&#xD;&#xA;&#x9; * Returns a Boolean stating whether a key is present or not in this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(this.getValue(key), null);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="key">
            <eGenericType eTypeParameter="#/8/utils/Hashtable/K"/>
          </eParameters>
        </eOperations>
        <eOperations name="clear">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes all elements from the Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.MapUtil.clear(this);&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="put">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds a entry into the Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.MapUtil.put(this, key, value);&#xA;"/>
          </eAnnotations>
          <eParameters name="key">
            <eGenericType eTypeParameter="#/8/utils/Hashtable/K"/>
          </eParameters>
          <eParameters name="value">
            <eGenericType eTypeParameter="#/8/utils/Hashtable/V"/>
          </eParameters>
        </eOperations>
        <eOperations name="size" eType="#/8/standard/JavaInteger">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the size of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.basetypes.MapUtil.size(this);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes the entry with key equals to 'key'&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.MapUtil.remove(this, key);&#xA;"/>
          </eAnnotations>
          <eParameters name="key">
            <eGenericType eTypeParameter="#/8/utils/Hashtable/K"/>
          </eParameters>
        </eOperations>
        <eOperations name="keyIterator">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an iterator over the Keys of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Iterator&lt;K> result = null;&#xA;&#xA;&#x9;result = (kermeta.standard.Iterator&lt;K>) org.kermeta.compil.runtime.helper.basetypes.MapUtil.keysIterator(this);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Iterator">
            <eTypeArguments eTypeParameter="#/8/utils/Hashtable/K"/>
          </eGenericType>
        </eOperations>
        <eOperations name="valueIterator">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an iterator over the values of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.standard.Iterator&lt;V> result = null;&#xA;&#xA;&#x9;result = (kermeta.standard.Iterator&lt;V>) org.kermeta.compil.runtime.helper.basetypes.MapUtil.valueIterator(this);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/standard/Iterator">
            <eTypeArguments eTypeParameter="#/8/utils/Hashtable/V"/>
          </eGenericType>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Stack">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An implementation of stack&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/utils_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="peek">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Gets the element at the top of the stack&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;result = this.first();&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/utils/Stack/G"/>
        </eOperations>
        <eOperations name="push">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Pushes an element into the stack&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.addAt(0, element);&#xA;"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="#/8/utils/Stack/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="pop">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Get and remove the element at the top of the stack&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;G result = null;&#xA;&#xA;&#x9;result = this.peek();&#xA;&#xA;&#x9;this.removeAt(0);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#/8/utils/Stack/G"/>
        </eOperations>
        <eGenericSuperTypes eClassifier="#/8/standard/Sequence">
          <eTypeArguments eTypeParameter="#/8/utils/Stack/G"/>
        </eGenericSuperTypes>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="ecore" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/ecore/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/ecore"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Contains the definition of a Kermeta classes used for compatibility with Ecore &#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/ecore_compatibility_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Kermeta representation of EMF EFeatureMapEntry&#xD;&#xA; * it contains the name of the required feature and the actual value&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/ecore_compatibility_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" eType="#/8/language/structure/Object"
            containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="eStructuralFeatureName"
            eType="#/8/standard/JavaString"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="exceptions" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/exceptions/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/exceptions"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Contains the definition of a Kermeta exception and a few basic exceptions.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/exceptions_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Exception" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Generic exceptions&#xD;&#xA; * The main class from which all the exception inherit&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="stackTrace" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;     * The stack trace as a String&#xD;&#xA;     * Filled by the interpreted when the exception is raised&#xD;&#xA;     */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="message" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** The message attached to the exception     */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="nestedException" eType="#/8/exceptions/Exception"
            containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** Any nested exception     */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RuntimeError" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Exception for interpreter exceptions */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="#/8/language/behavior/Expression"
            containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** The code that raised the exception */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallOnVoidTarget" eSuperTypes="#/8/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when a feature is called on void */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeCastError" eSuperTypes="#/8/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Occurs when a cast (Object::asType operation) fails&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NotImplementedException" eSuperTypes="#/8/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Use this exception when you want to forbid the access to an unimplemented operation &#xD;&#xA; * and invite to implement it&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="UpperBoundReachedError" eSuperTypes="#/8/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** &#xD;&#xA; * Use this exception when user tries to add an element to a property which type is collection&#xD;&#xA; * which has an upper bound != -1 ( ie *)&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AbstractClassInstantiationError"
          eSuperTypes="#/8/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Creation on an abstract class. Usually this is detected by the type-checker. The only&#xD;&#xA; * case where this happens is when instantiating a type variable, whose bound type turns&#xD;&#xA; * out to be abstract.&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IncompatibleTypeError" eSuperTypes="#/8/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Raised by the Object::set operation if the type of the &#xD;&#xA; * Object to set has an incompatible type.&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DivisionByZero" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** well-known attempt to divide with a zero valued divider */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OverflowError" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the figure oversteps the capacity of the numeric variable */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VoidOperandError" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** one of the required operands is void */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringIndexOutOfBound" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the data overstep the size of the string variable */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringFormatException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * to be written #########################################&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IndexOutOfBound" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when trying to access out of bounds elements */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EmptyCollection" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when trying to access element on an empty collection */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IteratorIsOff" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Occurs when calling next() operation while iterator is already&#xD;&#xA; * positioned on the last element of a collection&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IOException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** an interaction with the underlying system failed */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FileNotFoundException" eSuperTypes="#/8/exceptions/IOException">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the file has not be found on the underlying system */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConstraintViolatedPre" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the pre-condition is not satisfied */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConstraintViolatedPost" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the post-condition is not satisfied */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConstraintViolatedInv" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** some fixes declared in the invariant condition ave been changed */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceLoadException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when Resource loading fails for some reasons */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceSaveException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when Resource saving fails for some reasons */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceMixedLevelsException" eSuperTypes="#/8/exceptions/ResourceSaveException">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when Resource saving fails because an object refers to an element which &#xD;&#xA; * belongs to the Definition of the currently running program */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceCreateException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when trying to crate a Resource already existing in the Repository */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceUnconformityException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Raised when user tries to add an object that is not conform to the metamodel */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="UnregisteredMetamodelException"
          eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Raised when a resource cannot be loaded or saved because the URI used for &#xD;&#xA; * the  metamodel is not registered&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DynamicExpressionException" eSuperTypes="#/8/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * to be written #########################################&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="KRuntimeError" instanceClassName="org.kermeta.compil.runtime.helper.error.KRuntimeError"
          serializable="false"/>
    </eSubpackages>
    <eSubpackages name="interpreter" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/interpreter/kermeta_temp_uri"
        nsPrefix="">
      <eAnnotations source="kermeta">
        <details key="ecoreUri" value="http://www.kermeta.org/kermeta/1_2_0//kermeta/interpreter"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains a set of classes whose function is to evaluate a kermeta &#xD;&#xA; * expression written as a string.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/interpreter_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="DynamicExpression" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * DynamicExpression is a class used to make dynamic calls, i.e dynamic evaluation&#xD;&#xA; * of Kermeta statements represented in a string.&#xD;&#xA; * &#xD;&#xA; * An example :&#xD;&#xA; *   var de : DynamicExpression init DynamicExpression.new&#xD;&#xA; *   de.initializeDefaults&#xD;&#xA; *   de.formalParameters.put(&quot;a&quot;, String)&#xD;&#xA; *   de.parse(&quot;stdio.writeln(a)&quot;) // note: to execute a list of statements, you have to surround them with do..end&#xD;&#xA; *   var params : Hashtable&lt;String, Object> init Hashtable&lt;String, Object>.new&#xD;&#xA; *   params.put(&quot;a&quot;, &quot;hello world!&quot;)&#xD;&#xA; *   de.execute(void, params)&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/dynamic_expression_view.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="initializeDefaults" ordered="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Initializes the formalParameters with an empty set of parameters&#xD;&#xA;&#x9; * and the self type with void&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;&#x9;this.setFormalParameters(((kermeta.utils.Hashtable&lt;java.lang.String, kermeta.language.structure.Type>) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.utils.Hashtable&lt;java.lang.String, kermeta.language.structure.Type>&quot;)));&#xA;&#xA;&#x9;this.setSelfClass((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.Object&quot;).getTypeDefinition());&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="evalString" eType="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;     * Execute the expression given as a string.&#xD;&#xA;     * the self type and formal parameters are supposed to be set&#xD;&#xA;     * before calling this operation&#xD;&#xA;     */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_429 = false;&#xA;&#x9;idIfCond_429 = kermeta.standard.helper.BooleanWrapper.not(this.parse(body));&#xA;&#xA;&#x9;if( idIfCond_429 ) {&#xA;&#xA;&#x9;kermeta.exceptions.DynamicExpressionException e = ((kermeta.exceptions.DynamicExpressionException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DynamicExpressionException&quot;));&#xA;&#xA;&#x9;e.setMessage(&quot;evalString - expression contains errors&quot;);&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = this.execute(selfObj, actualParams);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="body" eType="#/8/standard/JavaString"/>
          <eParameters name="selfObj" eType="#/8/language/structure/Object"/>
          <eParameters name="actualParams">
            <eGenericType eClassifier="#/8/utils/Hashtable">
              <eTypeArguments eClassifier="#/8/standard/JavaString"/>
              <eTypeArguments eClassifier="#/8/language/structure/Object"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="parse" eType="#/8/standard/JavaBoolean">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Parse the expression as a string&#xD;&#xA;&#x9; * and updates the expression field and errors&#xD;&#xA;&#x9; * Returns true if the expression was parsed sucessfuly&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.interpreter.KermetaError>convertAsOrderedSet(this.getErrors()).clear();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_430 = false;&#xA;&#x9;idIfCond_430 = kermeta.standard.helper.BooleanWrapper.or(org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this.getFormalParameters(), null), org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this.getSelfClass(), null));&#xA;&#xA;&#x9;if( idIfCond_430 ) {&#xA;&#xA;&#x9;kermeta.exceptions.DynamicExpressionException e = ((kermeta.exceptions.DynamicExpressionException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DynamicExpressionException&quot;));&#xA;&#xA;&#x9;e.setMessage(&quot;parse precondition - formalParameters or selfType is void&quot;);&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.DynamicExpressionUtil.parse(this, expression);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_431 = false;&#xA;&#x9;idIfCond_431 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.interpreter.KermetaError>convertAsOrderedSet(this.getErrors()).size(), 0);&#xA;&#xA;&#x9;if( idIfCond_431 ) {&#xA;&#xA;&#x9;kermeta.exceptions.DynamicExpressionException e = ((kermeta.exceptions.DynamicExpressionException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DynamicExpressionException&quot;));&#xA;&#xA;&#x9;e.setMessage(&quot;parse result - expression contains errors&quot;);&#xA;&#xA;&#x9;//Beginning of the Inlining of the function type: each&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.interpreter.KermetaError> it_ft100 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.interpreter.KermetaError>convertAsOrderedSet(this.getErrors()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_432 = false;&#xA;&#x9;while( !idLoopCond_432 ) {&#xA;&#x9;idLoopCond_432 = it_ft100.isOff();&#xA;&#x9;if ( idLoopCond_432 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//Beginning of the Inlining of the lambda expression: func&#xA;kermeta.interpreter.KermetaError error = it_ft100.next();&#xA;&#xA;&#x9;kermeta.standard.helper.StringWrapper.append(e.getMessage(), kermeta.standard.helper.StringWrapper.plus(&quot;\n&quot;, error.getMessage()));&#xA;//End of the Inlining of the lambda expression: func&#xA;&#xA;}&#xA;&#x9;}&#xA;//End of the Inlining of the function type: each&#xA;&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="expression" eType="#/8/standard/JavaString"/>
        </eOperations>
        <eOperations name="execute" eType="#/8/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;     * Execute the expression in the given context&#xD;&#xA;     */"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_433 = false;&#xA;&#x9;idIfCond_433 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equals(this.getExpression(), null);&#xA;&#xA;&#x9;if( idIfCond_433 ) {&#xA;&#xA;&#x9;kermeta.exceptions.DynamicExpressionException e = ((kermeta.exceptions.DynamicExpressionException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DynamicExpressionException&quot;));&#xA;&#xA;&#x9;e.setMessage(&quot;execute precondition - expression is void&quot;);&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_434 = false;&#xA;&#x9;idIfCond_434 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual(org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.interpreter.KermetaError>convertAsOrderedSet(this.getErrors()).size(), 0);&#xA;&#xA;&#x9;if( idIfCond_434 ) {&#xA;&#xA;&#x9;kermeta.exceptions.DynamicExpressionException e = ((kermeta.exceptions.DynamicExpressionException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.exceptions.DynamicExpressionException&quot;));&#xA;&#xA;&#x9;e.setMessage(&quot;execute precondition - expression contains errors&quot;);&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.DynamicExpressionUtil.execute(this, selfObj, actualParams);&#xA;&#xA;return result;&#xA;"/>
          </eAnnotations>
          <eParameters name="selfObj" eType="#/8/language/structure/Object"/>
          <eParameters name="actualParams">
            <eGenericType eClassifier="#/8/utils/Hashtable">
              <eTypeArguments eClassifier="#/8/standard/JavaString"/>
              <eTypeArguments eClassifier="#/8/language/structure/Object"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="formalParameters">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Formal parameters of the expression (bindings between parameters' names and types)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="#/8/utils/Hashtable">
            <eTypeArguments eClassifier="#/8/standard/JavaString"/>
            <eTypeArguments eClassifier="#/8/language/structure/Type"/>
          </eGenericType>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="errors" upperBound="-1"
            eType="#/8/interpreter/KermetaError">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Parse errors and type errors&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="selfClass" eType="#/8/language/structure/ClassDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * The type of the self object&#xD;&#xA;&#x9; * or void if the expression is not to be executed&#xD;&#xA;&#x9; * in the context of an object&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="#/8/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the expression&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KermetaError" abstract="true" eSuperTypes="#/8/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Kermeta language error in a code written in Kermeta&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="message" eType="#/8/standard/JavaString">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Error message&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ParseError" eSuperTypes="#/8/interpreter/KermetaError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Kermeta error for parsing problems&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeError" eSuperTypes="#/8/interpreter/KermetaError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Type errors in a code written in Kermeta&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EPackage name="ecore" nsURI="http://www.eclipse.org/emf/2002/Ecore/kermeta_temp_uri"
      nsPrefix="">
    <eAnnotations source="kermeta">
      <details key="ecoreUri" value="http://www.eclipse.org/emf/2002/Ecore"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="EAttribute" eSuperTypes="#/9/EStructuralFeature">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="iD" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAttributeType" lowerBound="1"
          eType="#/9/EDataType" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EBoolean" instanceClassName="boolean">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Boolean"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="boolean"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EAnnotation" eSuperTypes="#/9/EModelElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="contents" upperBound="-1"
          eType="#/9/EObject" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eModelElement" eType="#/9/EModelElement"
          transient="true" eOpposite="#/9/EModelElement/eAnnotations">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="details" upperBound="-1"
          eType="#/9/EStringToStringMapEntry" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="source" eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="references" upperBound="-1"
          eType="#/9/EObject"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EString" instanceClassName="java.lang.String">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::String"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.String"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EClass" eSuperTypes="#/9/EClassifier">
      <eOperations name="getFeatureCount" eType="#/9/EInt">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.Integer result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getEStructuralFeature" eType="#/9/EStructuralFeature">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EStructuralFeature result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="featureName" eType="#/9/EString"/>
      </eOperations>
      <eOperations name="isSuperTypeOf" eType="#/9/EBoolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.Boolean result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="someClass" eType="#/9/EClass"/>
      </eOperations>
      <eOperations name="op_getEStructuralFeature" eType="#/9/EStructuralFeature">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EStructuralFeature result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="featureID" eType="#/9/EInt"/>
      </eOperations>
      <eOperations name="getFeatureID" eType="#/9/EInt">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.Integer result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="feature" eType="#/9/EStructuralFeature"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eGenericSuperTypes" upperBound="-1"
          eType="#/9/EGenericType" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAllOperations" upperBound="-1"
          eType="#/9/EOperation" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAttributes" upperBound="-1"
          eType="#/9/EAttribute" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAllGenericSuperTypes"
          upperBound="-1" eType="#/9/EGenericType" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAllStructuralFeatures"
          upperBound="-1" eType="#/9/EStructuralFeature" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eIDAttribute" eType="#/9/EAttribute"
          transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eStructuralFeatures"
          upperBound="-1" eType="#/9/EStructuralFeature" containment="true" eOpposite="#/9/EStructuralFeature/eContainingClass"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAllAttributes" upperBound="-1"
          eType="#/9/EAttribute" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="_abstract" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="_interface" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eReferences" upperBound="-1"
          eType="#/9/EReference" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAllContainments" upperBound="-1"
          eType="#/9/EReference" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eOperations" upperBound="-1"
          eType="#/9/EOperation" containment="true" eOpposite="#/9/EOperation/eContainingClass"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAllSuperTypes" upperBound="-1"
          eType="#/9/EClass" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAllReferences" upperBound="-1"
          eType="#/9/EReference" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eSuperTypes" upperBound="-1"
          eType="#/9/EClass"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EClassifier" abstract="true" eSuperTypes="#/9/ENamedElement">
      <eOperations name="getClassifierID" eType="#/9/EInt">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.Integer result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isInstance" eType="#/9/EBoolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.Boolean result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="object" eType="#/9/EJavaObject"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="instanceClassName" eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="defaultValue" eType="#/9/EJavaObject"
          transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="instanceClass" transient="true"
          derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
        <eGenericType eClassifier="#/9/EJavaClass">
          <eTypeArguments/>
        </eGenericType>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="instanceTypeName" eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eTypeParameters" upperBound="-1"
          eType="#/9/ETypeParameter" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ePackage" eType="#/9/EPackage"
          transient="true" eOpposite="#/9/EPackage/eClassifiers">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EJavaClass" instanceClassName="java.lang.Class">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Class"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_eTypeParameters" value="T"/>
      </eAnnotations>
      <eTypeParameters name="T"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EJavaObject" instanceClassName="java.lang.Object">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EDataType" eSuperTypes="#/9/EClassifier">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="serializable" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EEnum" eSuperTypes="#/9/EDataType">
      <eOperations name="getEEnumLiteral" eType="#/9/EEnumLiteral">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EEnumLiteral result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="value" eType="#/9/EInt"/>
      </eOperations>
      <eOperations name="op_getEEnumLiteral" eType="#/9/EEnumLiteral">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EEnumLiteral result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="name" eType="#/9/EString"/>
      </eOperations>
      <eOperations name="getEEnumLiteralByLiteral" eType="#/9/EEnumLiteral">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EEnumLiteral result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="literal" eType="#/9/EString"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eLiterals" upperBound="-1"
          eType="#/9/EEnumLiteral" containment="true" eOpposite="#/9/EEnumLiteral/eEnum"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EEnumLiteral" eSuperTypes="#/9/ENamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="eEnum" eType="#/9/EEnum"
          transient="true" eOpposite="#/9/EEnum/eLiterals">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#/9/EInt"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="instance" eType="#/9/EEnumerator"
          transient="true">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="literal" eType="#/9/EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EInt" instanceClassName="int">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Integer"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="int"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EEnumerator" instanceClassName="org.eclipse.emf.common.util.Enumerator"
        serializable="false">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="org.eclipse.emf.common.util.Enumerator"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EFactory" eSuperTypes="#/9/EModelElement">
      <eOperations name="createFromString" eType="#/9/EJavaObject">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="eDataType" eType="#/9/EDataType"/>
        <eParameters name="literalValue" eType="#/9/EString"/>
      </eOperations>
      <eOperations name="create" eType="#/9/EObject">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EObject result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="eClass" eType="#/9/EClass"/>
      </eOperations>
      <eOperations name="convertToString" eType="#/9/EString">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.String result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="eDataType" eType="#/9/EDataType"/>
        <eParameters name="instanceValue" eType="#/9/EJavaObject"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ePackage" lowerBound="1"
          eType="#/9/EPackage" transient="true" eOpposite="#/9/EPackage/eFactoryInstance">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EModelElement" abstract="true" eSuperTypes="#/10/Mergeable #/9/EObject">
      <eAnnotations source="kermeta">
        <details key="aspect" value="true"/>
      </eAnnotations>
      <eOperations name="getEAnnotation" eType="#/9/EAnnotation">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EAnnotation result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="source" eType="#/9/EString"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eAnnotations" upperBound="-1"
          eType="#/9/EAnnotation" containment="true" eOpposite="#/9/EAnnotation/eModelElement"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ENamedElement" abstract="true" eSuperTypes="#/9/EModelElement">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="#/9/EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EObject" eSuperTypes="#/8/language/structure/Object">
      <eOperations name="eIsProxy" eType="#/9/EBoolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.Boolean result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="eContainmentFeature" eType="#/9/EReference">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EReference result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="eGet" eType="#/9/EJavaObject">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="feature" eType="#/9/EStructuralFeature"/>
        <eParameters name="resolve" eType="#/9/EBoolean"/>
      </eOperations>
      <eOperations name="eCrossReferences">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
        </eAnnotations>
        <eGenericType eClassifier="#/9/EEList">
          <eTypeArguments/>
        </eGenericType>
      </eOperations>
      <eOperations name="op_eGet" eType="#/9/EJavaObject">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="feature" eType="#/9/EStructuralFeature"/>
      </eOperations>
      <eOperations name="eContents">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
        </eAnnotations>
        <eGenericType eClassifier="#/9/EEList">
          <eTypeArguments/>
        </eGenericType>
      </eOperations>
      <eOperations name="eSet">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value=""/>
        </eAnnotations>
        <eParameters name="feature" eType="#/9/EStructuralFeature"/>
        <eParameters name="newValue" eType="#/9/EJavaObject"/>
      </eOperations>
      <eOperations name="eAllContents">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
        </eAnnotations>
        <eGenericType eClassifier="#/9/ETreeIterator">
          <eTypeArguments/>
        </eGenericType>
      </eOperations>
      <eOperations name="eIsSet" eType="#/9/EBoolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.Boolean result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="feature" eType="#/9/EStructuralFeature"/>
      </eOperations>
      <eOperations name="eResource" eType="#/9/EResource">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="eClass" eType="#/9/EClass">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EClass result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="eUnset">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value=""/>
        </eAnnotations>
        <eParameters name="feature" eType="#/9/EStructuralFeature"/>
      </eOperations>
      <eOperations name="eContainingFeature" eType="#/9/EStructuralFeature">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EStructuralFeature result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="eContainer" eType="#/9/EObject">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EObject result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EOperation" eSuperTypes="#/9/ETypedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="eExceptions" upperBound="-1"
          eType="#/9/EClassifier"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eTypeParameters" upperBound="-1"
          eType="#/9/ETypeParameter" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eGenericExceptions" upperBound="-1"
          eType="#/9/EGenericType" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eParameters" upperBound="-1"
          eType="#/9/EParameter" containment="true" eOpposite="#/9/EParameter/eOperation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eContainingClass" eType="#/9/EClass"
          transient="true" eOpposite="#/9/EClass/eOperations">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EPackage" eSuperTypes="#/9/ENamedElement">
      <eOperations name="getEClassifier" eType="#/9/EClassifier">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="ecore.EClassifier result = null;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="name" eType="#/9/EString"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="nsURI" eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eSubpackages" upperBound="-1"
          eType="#/9/EPackage" containment="true" eOpposite="#/9/EPackage/eSuperPackage"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eSuperPackage" eType="#/9/EPackage"
          transient="true" eOpposite="#/9/EPackage/eSubpackages">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eFactoryInstance" lowerBound="1"
          eType="#/9/EFactory" transient="true" eOpposite="#/9/EFactory/ePackage">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="nsPrefix" eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eClassifiers" upperBound="-1"
          eType="#/9/EClassifier" containment="true" eOpposite="#/9/EClassifier/ePackage"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EParameter" eSuperTypes="#/9/ETypedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="eOperation" eType="#/9/EOperation"
          transient="true" eOpposite="#/9/EOperation/eParameters">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EReference" eSuperTypes="#/9/EStructuralFeature">
      <eStructuralFeatures xsi:type="ecore:EReference" name="eKeys" upperBound="-1"
          eType="#/9/EAttribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eOpposite" eType="#/9/EReference"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eReferenceType" lowerBound="1"
          eType="#/9/EClass" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="container" eType="#/9/EBoolean"
          transient="true" defaultValueLiteral="false" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="containment" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="resolveProxies" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EStructuralFeature" abstract="true"
        eSuperTypes="#/9/ETypedElement">
      <eOperations name="getContainerClass">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="kermeta.language.structure.Object result = null;&#xA;return result;"/>
        </eAnnotations>
        <eGenericType eClassifier="#/9/EJavaClass">
          <eTypeArguments/>
        </eGenericType>
      </eOperations>
      <eOperations name="getFeatureID" eType="#/9/EInt">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.Integer result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="defaultValueLiteral"
          eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="defaultValue" eType="#/9/EJavaObject"
          transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="changeable" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="_transient" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="derived" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="_volatile" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eContainingClass" eType="#/9/EClass"
          transient="true" eOpposite="#/9/EClass/eStructuralFeatures">
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="unsettable" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ETypedElement" abstract="true" eSuperTypes="#/9/ENamedElement">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="unique" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="ordered" eType="#/9/EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="many" eType="#/9/EBoolean"
          transient="true" defaultValueLiteral="false" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="required" eType="#/9/EBoolean"
          transient="true" defaultValueLiteral="false" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eGenericType" eType="#/9/EGenericType"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eType" eType="#/9/EClassifier"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="lowerBound" eType="#/9/EInt"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="upperBound" eType="#/9/EInt"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EStringToStringMapEntry" eSuperTypes="#/8/language/structure/Object">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="key" eType="#/9/EString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#/9/EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EGenericType" eSuperTypes="#/10/Mergeable #/9/EObject">
      <eAnnotations source="kermeta">
        <details key="aspect" value="true"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eClassifier" eType="#/9/EClassifier"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eUpperBound" eType="#/9/EGenericType"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eLowerBound" eType="#/9/EGenericType"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eTypeParameter" eType="#/9/ETypeParameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eTypeArguments" upperBound="-1"
          eType="#/9/EGenericType" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eRawType" lowerBound="1"
          eType="#/9/EClassifier" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="false"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="ecore.isTransient" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ETypeParameter" eSuperTypes="#/9/ENamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="eBounds" upperBound="-1"
          eType="#/9/EGenericType" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EBigDecimal" instanceClassName="java.math.BigDecimal">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.math.BigDecimal"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EBigInteger" instanceClassName="java.math.BigInteger">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.math.BigInteger"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EBooleanObject" instanceClassName="java.lang.Boolean">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Boolean"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Boolean"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EByte" instanceClassName="byte">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="byte"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EByteArray" instanceClassName="byte[]">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="byte[]"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EByteObject" instanceClassName="java.lang.Byte">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Byte"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EChar" instanceClassName="char">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="char"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="ECharacterObject" instanceClassName="java.lang.Character">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Character"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EDate" instanceClassName="java.util.Date">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.util.Date"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EDiagnosticChain" instanceClassName="org.eclipse.emf.common.util.DiagnosticChain"
        serializable="false">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="org.eclipse.emf.common.util.DiagnosticChain"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EDouble" instanceClassName="double">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Real"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="double"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EDoubleObject" instanceClassName="java.lang.Double">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Real"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Double"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EEList" instanceClassName="org.eclipse.emf.common.util.EList"
        serializable="false">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="org.eclipse.emf.common.util.EList"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_eTypeParameters" value="E"/>
      </eAnnotations>
      <eTypeParameters name="E"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EFeatureMap" instanceClassName="org.eclipse.emf.ecore.util.FeatureMap"
        serializable="false">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="org.eclipse.emf.ecore.util.FeatureMap"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EFeatureMapEntry" instanceClassName="org.eclipse.emf.ecore.util.FeatureMap$Entry"
        serializable="false">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::ecore::EFeatureMapEntry"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="org.eclipse.emf.ecore.util.FeatureMap$Entry"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EFloat" instanceClassName="float">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Real"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="float"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EFloatObject" instanceClassName="java.lang.Float">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Real"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Float"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EIntegerObject" instanceClassName="java.lang.Integer">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Integer"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Integer"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="ELong" instanceClassName="long">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="long"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="ELongObject" instanceClassName="java.lang.Long">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Long"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EMap" instanceClassName="java.util.Map"
        serializable="false">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.util.Map"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_eTypeParameters" value="K , V"/>
      </eAnnotations>
      <eTypeParameters name="K"/>
      <eTypeParameters name="V"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EResource" instanceClassName="org.eclipse.emf.ecore.resource.Resource"
        serializable="false">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="org.eclipse.emf.ecore.resource.Resource"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EResourceSet" instanceClassName="org.eclipse.emf.ecore.resource.ResourceSet"
        serializable="false">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="org.eclipse.emf.ecore.resource.ResourceSet"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EShort" instanceClassName="short">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="short"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="EShortObject" instanceClassName="java.lang.Short">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.Short"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="ETreeIterator" instanceClassName="org.eclipse.emf.common.util.TreeIterator"
        serializable="false">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="org.eclipse.emf.common.util.TreeIterator"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_eTypeParameters" value="E"/>
      </eAnnotations>
      <eTypeParameters name="E"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EcoreDecomposer" eSuperTypes="#/7/Decomposer">
      <eOperations name="saveModel" ordered="false">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;Saving Ecore Model on: &quot;, uri));&#xA;&#xA;&#x9;kermeta.persistence.EMFResource resource = null;&#xA;&#xA;&#x9;kermeta.persistence.EMFRepository repository = ((kermeta.persistence.EMFRepository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFRepository&quot;));&#xA;&#xA;&#x9;resource = (kermeta.persistence.EMFResource) repository.createResource(uri, &quot;http://www.eclipse.org/emf/2002/Ecore&quot;);&#xA;&#xA;&#x9;resource.instances().add(model);&#xA;&#xA;&#x9;resource.save();&#xA;"/>
        </eAnnotations>
        <eParameters name="model" eType="#/10/Mergeable"/>
        <eParameters name="uri" eType="#/8/standard/JavaString"/>
      </eOperations>
      <eOperations name="loadModel" eType="#/10/Mergeable">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xA;kompose.Mergeable result = null;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.io.StdIOUtil.writeln(kermeta.standard.helper.StringWrapper.plus(&quot;Load Ecore Model from: &quot;, path));&#xA;&#xA;&#x9;kermeta.persistence.EMFResource resource = null;&#xA;&#xA;&#x9;kermeta.persistence.EMFRepository repository = ((kermeta.persistence.EMFRepository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(&quot;kermeta.persistence.EMFRepository&quot;));&#xA;&#xA;&#x9;resource = (kermeta.persistence.EMFResource) repository.getResource(path);&#xA;&#xA;&#x9;resource.load();&#xA;&#xA;&#x9;this.setResource(resource);&#xA;&#xA;&#x9;result = (kompose.Mergeable) resource.instances().one();&#xA;&#xA;return result;&#xA;"/>
        </eAnnotations>
        <eParameters name="path" eType="#/8/standard/JavaString"/>
      </eOperations>
    </eClassifiers>
  </ecore:EPackage>
  <ecore:EPackage name="kompose" nsURI="http://www.kermeta.org/kompose/kermeta_temp_uri"
      nsPrefix="">
    <eAnnotations source="kermeta">
      <details key="ecoreUri" value="http://www.kermeta.org/kompose"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="ElementDirective" abstract="true"
        eSuperTypes="#/10/CompositionDirective">
      <eOperations name="execute">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value=""/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CompositionDirective" abstract="true"
        eSuperTypes="#/8/language/structure/Object">
      <eStructuralFeatures xsi:type="ecore:EReference" name="context" lowerBound="1"
          eType="#/10/Context"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Remove" eSuperTypes="#/10/Change"/>
    <eClassifiers xsi:type="ecore:EClass" name="Change" abstract="true" eSuperTypes="#/10/ElementDirective">
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
          eType="#/10/ElementRef" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="propertyName" eType="#/10/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#/10/ElementRef" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::String"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="java.lang.String"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Add" eSuperTypes="#/10/Change"/>
    <eClassifiers xsi:type="ecore:EClass" name="Create" eSuperTypes="#/10/ElementDirective">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="identifier" eType="#/10/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="className" eType="#/10/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Set" eSuperTypes="#/10/Change"/>
    <eClassifiers xsi:type="ecore:EClass" name="ElementRef" abstract="true" eSuperTypes="#/8/language/structure/Object"/>
    <eClassifiers xsi:type="ecore:EClass" name="NameRef" eSuperTypes="#/10/ElementRef">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="qname" eType="#/9/EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="IDRef" eSuperTypes="#/10/ElementRef">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="identifier" eType="#/9/EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Literal" eSuperTypes="#/10/ElementRef"/>
    <eClassifiers xsi:type="ecore:EClass" name="StringLiteral" eSuperTypes="#/10/Literal">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#/10/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="BooleanLiteral" eSuperTypes="#/10/Literal">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#/10/Boolean"
          defaultValueLiteral="false"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="boolean">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Boolean"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="boolean"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="IntegerLiteral" eSuperTypes="#/10/Literal">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#/10/Integer"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="int">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::Integer"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_instanceClassName" value="int"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="ecore.EDataType_isSerializable" value="true"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="VoidLiteral" eSuperTypes="#/10/Literal"/>
    <eClassifiers xsi:type="ecore:EClass" name="Context" eSuperTypes="#/8/language/structure/Object"/>
    <eClassifiers xsi:type="ecore:EClass" name="Composer" eSuperTypes="#/8/language/structure/Object">
      <eOperations name="compose" eType="#/10/Mergeable">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="kompose.Mergeable result = null;&#xA;return result;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="predirectivesPM" upperBound="-1"
          eType="#/10/ElementDirective" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="predirectivesAM" upperBound="-1"
          eType="#/10/ElementDirective" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="aspectModelURI" eType="#/10/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="postdirectives" upperBound="-1"
          eType="#/10/ElementDirective" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="primaryModelURI" eType="#/10/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="composedModelURI" eType="#/10/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Mergeable" abstract="true" eSuperTypes="#/8/language/structure/Object"/>
  </ecore:EPackage>
</xmi:XMI>
