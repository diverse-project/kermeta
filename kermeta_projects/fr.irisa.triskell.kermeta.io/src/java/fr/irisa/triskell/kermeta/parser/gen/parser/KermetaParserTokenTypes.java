// $ANTLR : "Kermeta.g" -> "KermetaParser.java"$

package fr.irisa.triskell.kermeta.parser.gen.parser;
import fr.irisa.triskell.kermeta.parser.gen.ast.*;
import org.eclipse.gymnast.runtime.core.parser.*;
import org.eclipse.gymnast.runtime.core.ast.*;

public interface KermetaParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int LITERAL_package = 4;
	int SEMI = 5;
	int ID = 6;
	int COL_COL = 7;
	int STRING_LITERAL = 8;
	int AT = 9;
	int CONTEXT_MULTI_LINE_COMMENT = 10;
	int LITERAL_require = 11;
	int LITERAL_excludeFilter = 12;
	int LPAREN = 13;
	int RPAREN = 14;
	int LITERAL_includeFilter = 15;
	int COMMA = 16;
	int LITERAL_using = 17;
	int LCURLY = 18;
	int RCURLY = 19;
	int LITERAL_modeltype = 20;
	int LT = 21;
	int GT = 22;
	int LITERAL_inherits = 23;
	int LITERAL_class = 24;
	int LITERAL_abstract = 25;
	int LITERAL_aspect = 26;
	int COLON = 27;
	int LSQUARE = 28;
	int RSQUARE = 29;
	int MINUS_GT = 30;
	int LITERAL_Void = 31;
	int LITERAL_inv = 32;
	int LITERAL_is = 33;
	int HASH = 34;
	int LITERAL_attribute = 35;
	int LITERAL_reference = 36;
	int LITERAL_property = 37;
	int LITERAL_readonly = 38;
	int LITERAL_getter = 39;
	int LITERAL_setter = 40;
	int LITERAL_from = 41;
	int LITERAL_raises = 42;
	int LITERAL_operation = 43;
	int LITERAL_method = 44;
	int LITERAL_pre = 45;
	int LITERAL_post = 46;
	int LITERAL_bag = 47;
	int LITERAL_set = 48;
	int LITERAL_seq = 49;
	int LITERAL_oset = 50;
	int DOT_DOT = 51;
	int STAR = 52;
	int PLUS = 53;
	int QMARK = 54;
	int INT_LITERAL = 55;
	int LITERAL_alias = 56;
	int LITERAL_enumeration = 57;
	int EQUALS = 58;
	int LITERAL_and = 59;
	int LITERAL_or = 60;
	int EQEQ = 61;
	int NEQ = 62;
	int GTE = 63;
	int LTE = 64;
	int MINUS = 65;
	int DIV = 66;
	int LITERAL_not = 67;
	int DOT = 68;
	int PIPE = 69;
	int LITERAL_self = 70;
	int LITERAL_super = 71;
	int LITERAL_result = 72;
	int LITERAL_value = 73;
	int LITERAL_do = 74;
	int LITERAL_end = 75;
	int LITERAL_function = 76;
	int LITERAL_rescue = 77;
	int LITERAL_until = 78;
	int LITERAL_loop = 79;
	int LITERAL_if = 80;
	int LITERAL_then = 81;
	int LITERAL_else = 82;
	int LITERAL_raise = 83;
	int LITERAL_var = 84;
	int LITERAL_init = 85;
	int LITERAL_extern = 86;
	int LITERAL_true = 87;
	int LITERAL_false = 88;
	int LITERAL_void = 89;
	int ATPRE = 90;
	int BANG = 91;
	int DOLLAR = 92;
	int GT_LT = 93;
	int LT_GT = 94;
	int CHAR_LITERAL = 95;
	int END_COMMENT = 96;
	int ESC = 97;
	int REAL_LITERAL = 98;
	int EXPONENT = 99;
	int DIGIT = 100;
	int WS = 101;
	int SINGLE_LINE_COMMENT = 102;
	int EMPTY_LINE_COMMENT = 103;
	int MULTI_LINE_COMMENT = 104;
}
