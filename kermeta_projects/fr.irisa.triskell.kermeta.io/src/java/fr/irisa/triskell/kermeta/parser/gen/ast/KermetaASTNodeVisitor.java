package fr.irisa.triskell.kermeta.parser.gen.ast;

/**
 * A Visitor pattern stub implementation for language Kermeta.
 *
 * @generated by Gymnast from kermeta.ast on 15 janv. 2008 09:12:26
 */
public class KermetaASTNodeVisitor {

	/**
	 * The external entry point used to perform a visit beginning at the given node.
	 * 
	 * @param node the KermetaASTNode to visit
	 */
	public final void visit(KermetaASTNode node) {
		node.accept(this);
	}

	/**
	 * Called just before <code>beginVisit</code> for each node being visited.
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param node the KermetaASTNode currently being visited
	 */
	public void preVisit(KermetaASTNode node) {
	}

	/**
	 * Called just after <code>endVisit</code> for each node being visited.
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param node the KermetaASTNode currently being visited
	 */
	public void postVisit(KermetaASTNode node) {
	}

	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the generic one called for node types that
	 * don't provide a specific overloaded form of <code>beginVisit</code>.
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param node the KermetaASTNode currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(KermetaASTNode node) {
		return true;
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the generic one called for node types that
	 * don't provide a specific overloaded form of <code>endVisit</code>.
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param node the KermetaASTNode currently being visited
	 */
	public void endVisit(KermetaASTNode node) {
	}

	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>KermetaTokenNode</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param tokenNode the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(KermetaTokenNode tokenNode) {
		return beginVisit((KermetaASTNode)tokenNode);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>KermetaTokenNode</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param tokenNode the node currently being visited
	 */
	public void endVisit(KermetaTokenNode tokenNode) {
		endVisit((KermetaASTNode)tokenNode);
	}

	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ScompUnit</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param scompUnit the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ScompUnit scompUnit) {
		return beginVisit((CompUnit)scompUnit);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ScompUnit</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param scompUnit the node currently being visited
	 */
	public void endVisit(ScompUnit scompUnit) {
		endVisit((CompUnit)scompUnit);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>CompUnit</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param compUnit the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(CompUnit compUnit) {
		return beginVisit((KermetaASTNode)compUnit);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>CompUnit</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param compUnit the node currently being visited
	 */
	public void endVisit(CompUnit compUnit) {
		endVisit((KermetaASTNode)compUnit);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>PackageDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param packageDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(PackageDecl packageDecl) {
		return beginVisit((KermetaASTNode)packageDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>PackageDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param packageDecl the node currently being visited
	 */
	public void endVisit(PackageDecl packageDecl) {
		endVisit((KermetaASTNode)packageDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>QualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qualifiedID the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(QualifiedID qualifiedID) {
		return beginVisit((StringLiteralOrQualifiedID)qualifiedID);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>QualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qualifiedID the node currently being visited
	 */
	public void endVisit(QualifiedID qualifiedID) {
		endVisit((StringLiteralOrQualifiedID)qualifiedID);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>KwOrNamedQualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param kwOrNamedQualifiedID the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(KwOrNamedQualifiedID kwOrNamedQualifiedID) {
		return beginVisit((KermetaASTNode)kwOrNamedQualifiedID);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>KwOrNamedQualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param kwOrNamedQualifiedID the node currently being visited
	 */
	public void endVisit(KwOrNamedQualifiedID kwOrNamedQualifiedID) {
		endVisit((KermetaASTNode)kwOrNamedQualifiedID);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>SqualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param squalifiedID the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(SqualifiedID squalifiedID) {
		return beginVisit((KwOrNamedQualifiedID)squalifiedID);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>SqualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param squalifiedID the node currently being visited
	 */
	public void endVisit(SqualifiedID squalifiedID) {
		endVisit((KwOrNamedQualifiedID)squalifiedID);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>QidSeparator</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qidSeparator the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(QidSeparator qidSeparator) {
		return beginVisit((KermetaTokenNode)qidSeparator);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>QidSeparator</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qidSeparator the node currently being visited
	 */
	public void endVisit(QidSeparator qidSeparator) {
		endVisit((KermetaTokenNode)qidSeparator);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>StringLiteralOrQualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringLiteralOrQualifiedID the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(StringLiteralOrQualifiedID stringLiteralOrQualifiedID) {
		return beginVisit((KermetaASTNode)stringLiteralOrQualifiedID);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>StringLiteralOrQualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringLiteralOrQualifiedID the node currently being visited
	 */
	public void endVisit(StringLiteralOrQualifiedID stringLiteralOrQualifiedID) {
		endVisit((KermetaASTNode)stringLiteralOrQualifiedID);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>StringLiteralContainer</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringLiteralContainer the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(StringLiteralContainer stringLiteralContainer) {
		return beginVisit((StringLiteralOrQualifiedID)stringLiteralContainer);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>StringLiteralContainer</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringLiteralContainer the node currently being visited
	 */
	public void endVisit(StringLiteralContainer stringLiteralContainer) {
		endVisit((StringLiteralOrQualifiedID)stringLiteralContainer);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Annotations</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotations the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Annotations annotations) {
		return beginVisit((KermetaASTNode)annotations);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Annotations</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotations the node currently being visited
	 */
	public void endVisit(Annotations annotations) {
		endVisit((KermetaASTNode)annotations);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Annotation</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotation the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Annotation annotation) {
		return beginVisit((KermetaASTNode)annotation);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Annotation</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotation the node currently being visited
	 */
	public void endVisit(Annotation annotation) {
		endVisit((KermetaASTNode)annotation);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Tag</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param tag the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Tag tag) {
		return beginVisit((Annotation)tag);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Tag</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param tag the node currently being visited
	 */
	public void endVisit(Tag tag) {
		endVisit((Annotation)tag);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ContextMultiLineComment</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param contextMultiLineComment the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ContextMultiLineComment contextMultiLineComment) {
		return beginVisit((Annotation)contextMultiLineComment);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ContextMultiLineComment</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param contextMultiLineComment the node currently being visited
	 */
	public void endVisit(ContextMultiLineComment contextMultiLineComment) {
		endVisit((Annotation)contextMultiLineComment);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ImportStmts</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param importStmts the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ImportStmts importStmts) {
		return beginVisit((KermetaASTNode)importStmts);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ImportStmts</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param importStmts the node currently being visited
	 */
	public void endVisit(ImportStmts importStmts) {
		endVisit((KermetaASTNode)importStmts);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ImportStmt</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param importStmt the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ImportStmt importStmt) {
		return beginVisit((KermetaASTNode)importStmt);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ImportStmt</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param importStmt the node currently being visited
	 */
	public void endVisit(ImportStmt importStmt) {
		endVisit((KermetaASTNode)importStmt);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ExcludeFilter</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param excludeFilter the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ExcludeFilter excludeFilter) {
		return beginVisit((KermetaASTNode)excludeFilter);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ExcludeFilter</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param excludeFilter the node currently being visited
	 */
	public void endVisit(ExcludeFilter excludeFilter) {
		endVisit((KermetaASTNode)excludeFilter);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>IncludeFilter</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param includeFilter the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(IncludeFilter includeFilter) {
		return beginVisit((KermetaASTNode)includeFilter);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>IncludeFilter</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param includeFilter the node currently being visited
	 */
	public void endVisit(IncludeFilter includeFilter) {
		endVisit((KermetaASTNode)includeFilter);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Filters</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param filters the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Filters filters) {
		return beginVisit((KermetaASTNode)filters);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Filters</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param filters the node currently being visited
	 */
	public void endVisit(Filters filters) {
		endVisit((KermetaASTNode)filters);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Filter</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param filter the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Filter filter) {
		return beginVisit((KermetaASTNode)filter);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Filter</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param filter the node currently being visited
	 */
	public void endVisit(Filter filter) {
		endVisit((KermetaASTNode)filter);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>UsingStmts</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param usingStmts the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(UsingStmts usingStmts) {
		return beginVisit((KermetaASTNode)usingStmts);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>UsingStmts</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param usingStmts the node currently being visited
	 */
	public void endVisit(UsingStmts usingStmts) {
		endVisit((KermetaASTNode)usingStmts);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>UsingStmt</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param usingStmt the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(UsingStmt usingStmt) {
		return beginVisit((KermetaASTNode)usingStmt);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>UsingStmt</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param usingStmt the node currently being visited
	 */
	public void endVisit(UsingStmt usingStmt) {
		endVisit((KermetaASTNode)usingStmt);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TopLevelDecls</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param topLevelDecls the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TopLevelDecls topLevelDecls) {
		return beginVisit((KermetaASTNode)topLevelDecls);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TopLevelDecls</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param topLevelDecls the node currently being visited
	 */
	public void endVisit(TopLevelDecls topLevelDecls) {
		endVisit((KermetaASTNode)topLevelDecls);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TopLevelDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param topLevelDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TopLevelDecl topLevelDecl) {
		return beginVisit((KermetaASTNode)topLevelDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TopLevelDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param topLevelDecl the node currently being visited
	 */
	public void endVisit(TopLevelDecl topLevelDecl) {
		endVisit((KermetaASTNode)topLevelDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AnnotableElement</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotableElement the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AnnotableElement annotableElement) {
		return beginVisit((KermetaASTNode)annotableElement);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AnnotableElement</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotableElement the node currently being visited
	 */
	public void endVisit(AnnotableElement annotableElement) {
		endVisit((KermetaASTNode)annotableElement);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>SubPackageDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param subPackageDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(SubPackageDecl subPackageDecl) {
		return beginVisit((AnnotableElement)subPackageDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>SubPackageDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param subPackageDecl the node currently being visited
	 */
	public void endVisit(SubPackageDecl subPackageDecl) {
		endVisit((AnnotableElement)subPackageDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ModelTypeDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param modelTypeDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ModelTypeDecl modelTypeDecl) {
		return beginVisit((AnnotableElement)modelTypeDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ModelTypeDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param modelTypeDecl the node currently being visited
	 */
	public void endVisit(ModelTypeDecl modelTypeDecl) {
		endVisit((AnnotableElement)modelTypeDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>QualifiedIDlst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qualifiedIDlst the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(QualifiedIDlst qualifiedIDlst) {
		return beginVisit((KermetaASTNode)qualifiedIDlst);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>QualifiedIDlst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qualifiedIDlst the node currently being visited
	 */
	public void endVisit(QualifiedIDlst qualifiedIDlst) {
		endVisit((KermetaASTNode)qualifiedIDlst);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ClassDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ClassDecl classDecl) {
		return beginVisit((AnnotableElement)classDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ClassDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classDecl the node currently being visited
	 */
	public void endVisit(ClassDecl classDecl) {
		endVisit((AnnotableElement)classDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ClassKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classKind the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ClassKind classKind) {
		return beginVisit((KermetaTokenNode)classKind);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ClassKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classKind the node currently being visited
	 */
	public void endVisit(ClassKind classKind) {
		endVisit((KermetaTokenNode)classKind);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AbstractModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param abstractModifier the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AbstractModifier abstractModifier) {
		return beginVisit((KermetaTokenNode)abstractModifier);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AbstractModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param abstractModifier the node currently being visited
	 */
	public void endVisit(AbstractModifier abstractModifier) {
		endVisit((KermetaTokenNode)abstractModifier);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AspectModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param aspectModifier the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AspectModifier aspectModifier) {
		return beginVisit((KwOrNamedQualifiedID)aspectModifier);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AspectModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param aspectModifier the node currently being visited
	 */
	public void endVisit(AspectModifier aspectModifier) {
		endVisit((KwOrNamedQualifiedID)aspectModifier);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Typelst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typelst the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Typelst typelst) {
		return beginVisit((KermetaASTNode)typelst);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Typelst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typelst the node currently being visited
	 */
	public void endVisit(Typelst typelst) {
		endVisit((KermetaASTNode)typelst);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TypeVarDecllst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeVarDecllst the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TypeVarDecllst typeVarDecllst) {
		return beginVisit((KermetaASTNode)typeVarDecllst);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TypeVarDecllst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeVarDecllst the node currently being visited
	 */
	public void endVisit(TypeVarDecllst typeVarDecllst) {
		endVisit((KermetaASTNode)typeVarDecllst);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TypeVarDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeVarDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TypeVarDecl typeVarDecl) {
		return beginVisit((KermetaASTNode)typeVarDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TypeVarDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeVarDecl the node currently being visited
	 */
	public void endVisit(TypeVarDecl typeVarDecl) {
		endVisit((KermetaASTNode)typeVarDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Type</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param type the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Type type) {
		return beginVisit((KermetaASTNode)type);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Type</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param type the node currently being visited
	 */
	public void endVisit(Type type) {
		endVisit((KermetaASTNode)type);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Basictype</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param basictype the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Basictype basictype) {
		return beginVisit((Type)basictype);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Basictype</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param basictype the node currently being visited
	 */
	public void endVisit(Basictype basictype) {
		endVisit((Type)basictype);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Prodtype</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param prodtype the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Prodtype prodtype) {
		return beginVisit((Type)prodtype);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Prodtype</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param prodtype the node currently being visited
	 */
	public void endVisit(Prodtype prodtype) {
		endVisit((Type)prodtype);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Functype</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param functype the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Functype functype) {
		return beginVisit((Type)functype);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Functype</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param functype the node currently being visited
	 */
	public void endVisit(Functype functype) {
		endVisit((Type)functype);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>VoidType</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param voidType the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(VoidType voidType) {
		return beginVisit((Type)voidType);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>VoidType</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param voidType the node currently being visited
	 */
	public void endVisit(VoidType voidType) {
		endVisit((Type)voidType);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ClassMemberDecls</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classMemberDecls the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ClassMemberDecls classMemberDecls) {
		return beginVisit((KermetaASTNode)classMemberDecls);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ClassMemberDecls</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classMemberDecls the node currently being visited
	 */
	public void endVisit(ClassMemberDecls classMemberDecls) {
		endVisit((KermetaASTNode)classMemberDecls);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AnnotableClassMemberDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotableClassMemberDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AnnotableClassMemberDecl annotableClassMemberDecl) {
		return beginVisit((KermetaASTNode)annotableClassMemberDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AnnotableClassMemberDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotableClassMemberDecl the node currently being visited
	 */
	public void endVisit(AnnotableClassMemberDecl annotableClassMemberDecl) {
		endVisit((KermetaASTNode)annotableClassMemberDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ClassMemberDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classMemberDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ClassMemberDecl classMemberDecl) {
		return beginVisit((KermetaASTNode)classMemberDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ClassMemberDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classMemberDecl the node currently being visited
	 */
	public void endVisit(ClassMemberDecl classMemberDecl) {
		endVisit((KermetaASTNode)classMemberDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Invariant</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param invariant the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Invariant invariant) {
		return beginVisit((ClassMemberDecl)invariant);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Invariant</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param invariant the node currently being visited
	 */
	public void endVisit(Invariant invariant) {
		endVisit((ClassMemberDecl)invariant);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Property</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param property the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Property property) {
		return beginVisit((ClassMemberDecl)property);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Property</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param property the node currently being visited
	 */
	public void endVisit(Property property) {
		endVisit((ClassMemberDecl)property);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>PropertyKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param propertyKind the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(PropertyKind propertyKind) {
		return beginVisit((KermetaTokenNode)propertyKind);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>PropertyKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param propertyKind the node currently being visited
	 */
	public void endVisit(PropertyKind propertyKind) {
		endVisit((KermetaTokenNode)propertyKind);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ReadOnlyModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param readOnlyModifier the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ReadOnlyModifier readOnlyModifier) {
		return beginVisit((KermetaTokenNode)readOnlyModifier);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ReadOnlyModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param readOnlyModifier the node currently being visited
	 */
	public void endVisit(ReadOnlyModifier readOnlyModifier) {
		endVisit((KermetaTokenNode)readOnlyModifier);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>GetterBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param getterBody the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(GetterBody getterBody) {
		return beginVisit((KermetaASTNode)getterBody);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>GetterBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param getterBody the node currently being visited
	 */
	public void endVisit(GetterBody getterBody) {
		endVisit((KermetaASTNode)getterBody);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>SetterBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param setterBody the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(SetterBody setterBody) {
		return beginVisit((KermetaASTNode)setterBody);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>SetterBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param setterBody the node currently being visited
	 */
	public void endVisit(SetterBody setterBody) {
		endVisit((KermetaASTNode)setterBody);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Operation</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operation the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Operation operation) {
		return beginVisit((ClassMemberDecl)operation);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Operation</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operation the node currently being visited
	 */
	public void endVisit(Operation operation) {
		endVisit((ClassMemberDecl)operation);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>OperationKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operationKind the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(OperationKind operationKind) {
		return beginVisit((KermetaTokenNode)operationKind);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>OperationKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operationKind the node currently being visited
	 */
	public void endVisit(OperationKind operationKind) {
		endVisit((KermetaTokenNode)operationKind);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Assertions</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param assertions the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Assertions assertions) {
		return beginVisit((KermetaASTNode)assertions);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Assertions</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param assertions the node currently being visited
	 */
	public void endVisit(Assertions assertions) {
		endVisit((KermetaASTNode)assertions);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Annotableassertion</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotableassertion the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Annotableassertion annotableassertion) {
		return beginVisit((KermetaASTNode)annotableassertion);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Annotableassertion</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotableassertion the node currently being visited
	 */
	public void endVisit(Annotableassertion annotableassertion) {
		endVisit((KermetaASTNode)annotableassertion);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Assertion</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param assertion the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Assertion assertion) {
		return beginVisit((KermetaASTNode)assertion);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Assertion</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param assertion the node currently being visited
	 */
	public void endVisit(Assertion assertion) {
		endVisit((KermetaASTNode)assertion);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Precondition</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param precondition the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Precondition precondition) {
		return beginVisit((Assertion)precondition);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Precondition</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param precondition the node currently being visited
	 */
	public void endVisit(Precondition precondition) {
		endVisit((Assertion)precondition);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Postcondition</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param postcondition the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Postcondition postcondition) {
		return beginVisit((Assertion)postcondition);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Postcondition</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param postcondition the node currently being visited
	 */
	public void endVisit(Postcondition postcondition) {
		endVisit((Assertion)postcondition);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>OperationBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operationBody the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(OperationBody operationBody) {
		return beginVisit((KermetaASTNode)operationBody);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>OperationBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operationBody the node currently being visited
	 */
	public void endVisit(OperationBody operationBody) {
		endVisit((KermetaASTNode)operationBody);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>OperationExpressionBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operationExpressionBody the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(OperationExpressionBody operationExpressionBody) {
		return beginVisit((OperationBody)operationExpressionBody);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>OperationExpressionBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operationExpressionBody the node currently being visited
	 */
	public void endVisit(OperationExpressionBody operationExpressionBody) {
		endVisit((OperationBody)operationExpressionBody);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>OperationEmptyBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operationEmptyBody the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(OperationEmptyBody operationEmptyBody) {
		return beginVisit((OperationBody)operationEmptyBody);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>OperationEmptyBody</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operationEmptyBody the node currently being visited
	 */
	public void endVisit(OperationEmptyBody operationEmptyBody) {
		endVisit((OperationBody)operationEmptyBody);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Params</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param params the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Params params) {
		return beginVisit((KermetaASTNode)params);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Params</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param params the node currently being visited
	 */
	public void endVisit(Params params) {
		endVisit((KermetaASTNode)params);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Param</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param param the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Param param) {
		return beginVisit((KermetaASTNode)param);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Param</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param param the node currently being visited
	 */
	public void endVisit(Param param) {
		endVisit((KermetaASTNode)param);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TypeRef</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeRef the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TypeRef typeRef) {
		return beginVisit((KermetaASTNode)typeRef);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TypeRef</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeRef the node currently being visited
	 */
	public void endVisit(TypeRef typeRef) {
		endVisit((KermetaASTNode)typeRef);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>CollectionType</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param collectionType the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(CollectionType collectionType) {
		return beginVisit((KermetaTokenNode)collectionType);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>CollectionType</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param collectionType the node currently being visited
	 */
	public void endVisit(CollectionType collectionType) {
		endVisit((KermetaTokenNode)collectionType);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Multiplicity</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicity the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Multiplicity multiplicity) {
		return beginVisit((KermetaASTNode)multiplicity);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Multiplicity</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicity the node currently being visited
	 */
	public void endVisit(Multiplicity multiplicity) {
		endVisit((KermetaASTNode)multiplicity);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>MultiplicityExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicityExpr the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(MultiplicityExpr multiplicityExpr) {
		return beginVisit((KermetaASTNode)multiplicityExpr);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>MultiplicityExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicityExpr the node currently being visited
	 */
	public void endVisit(MultiplicityExpr multiplicityExpr) {
		endVisit((KermetaASTNode)multiplicityExpr);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>SimpleMultiplicityExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param simpleMultiplicityExpr the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(SimpleMultiplicityExpr simpleMultiplicityExpr) {
		return beginVisit((KermetaTokenNode)simpleMultiplicityExpr);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>SimpleMultiplicityExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param simpleMultiplicityExpr the node currently being visited
	 */
	public void endVisit(SimpleMultiplicityExpr simpleMultiplicityExpr) {
		endVisit((KermetaTokenNode)simpleMultiplicityExpr);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>DataTypeDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param dataTypeDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(DataTypeDecl dataTypeDecl) {
		return beginVisit((AnnotableElement)dataTypeDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>DataTypeDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param dataTypeDecl the node currently being visited
	 */
	public void endVisit(DataTypeDecl dataTypeDecl) {
		endVisit((AnnotableElement)dataTypeDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>EnumDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(EnumDecl enumDecl) {
		return beginVisit((AnnotableElement)enumDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>EnumDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumDecl the node currently being visited
	 */
	public void endVisit(EnumDecl enumDecl) {
		endVisit((AnnotableElement)enumDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>EnumLiterals</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumLiterals the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(EnumLiterals enumLiterals) {
		return beginVisit((KermetaASTNode)enumLiterals);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>EnumLiterals</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumLiterals the node currently being visited
	 */
	public void endVisit(EnumLiterals enumLiterals) {
		endVisit((KermetaASTNode)enumLiterals);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>EnumLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumLiteral the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(EnumLiteral enumLiteral) {
		return beginVisit((KermetaASTNode)enumLiteral);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>EnumLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumLiteral the node currently being visited
	 */
	public void endVisit(EnumLiteral enumLiteral) {
		endVisit((KermetaASTNode)enumLiteral);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FExpressionLst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fExpressionLst the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FExpressionLst fExpressionLst) {
		return beginVisit((KermetaASTNode)fExpressionLst);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FExpressionLst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fExpressionLst the node currently being visited
	 */
	public void endVisit(FExpressionLst fExpressionLst) {
		endVisit((KermetaASTNode)fExpressionLst);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AsingleExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param asingleExpression the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AsingleExpression asingleExpression) {
		return beginVisit((KermetaASTNode)asingleExpression);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AsingleExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param asingleExpression the node currently being visited
	 */
	public void endVisit(AsingleExpression asingleExpression) {
		endVisit((KermetaASTNode)asingleExpression);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fExpression the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FExpression fExpression) {
		return beginVisit((KermetaASTNode)fExpression);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fExpression the node currently being visited
	 */
	public void endVisit(FExpression fExpression) {
		endVisit((KermetaASTNode)fExpression);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FAssignement</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fAssignement the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FAssignement fAssignement) {
		return beginVisit((FExpression)fAssignement);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FAssignement</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fAssignement the node currently being visited
	 */
	public void endVisit(FAssignement fAssignement) {
		endVisit((FExpression)fAssignement);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AssignementOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param assignementOp the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AssignementOp assignementOp) {
		return beginVisit((KermetaTokenNode)assignementOp);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AssignementOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param assignementOp the node currently being visited
	 */
	public void endVisit(AssignementOp assignementOp) {
		endVisit((KermetaTokenNode)assignementOp);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>LogicalExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param logicalExpression the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(LogicalExpression logicalExpression) {
		return beginVisit((KermetaASTNode)logicalExpression);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>LogicalExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param logicalExpression the node currently being visited
	 */
	public void endVisit(LogicalExpression logicalExpression) {
		endVisit((KermetaASTNode)logicalExpression);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>LogicalOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param logicalOp the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(LogicalOp logicalOp) {
		return beginVisit((KermetaTokenNode)logicalOp);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>LogicalOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param logicalOp the node currently being visited
	 */
	public void endVisit(LogicalOp logicalOp) {
		endVisit((KermetaTokenNode)logicalOp);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>RelationalExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param relationalExpression the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(RelationalExpression relationalExpression) {
		return beginVisit((KermetaASTNode)relationalExpression);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>RelationalExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param relationalExpression the node currently being visited
	 */
	public void endVisit(RelationalExpression relationalExpression) {
		endVisit((KermetaASTNode)relationalExpression);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>RelationalOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param relationalOp the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(RelationalOp relationalOp) {
		return beginVisit((KermetaTokenNode)relationalOp);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>RelationalOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param relationalOp the node currently being visited
	 */
	public void endVisit(RelationalOp relationalOp) {
		endVisit((KermetaTokenNode)relationalOp);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AdditiveExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param additiveExpression the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AdditiveExpression additiveExpression) {
		return beginVisit((KermetaASTNode)additiveExpression);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AdditiveExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param additiveExpression the node currently being visited
	 */
	public void endVisit(AdditiveExpression additiveExpression) {
		endVisit((KermetaASTNode)additiveExpression);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AdditiveOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param additiveOp the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AdditiveOp additiveOp) {
		return beginVisit((KermetaTokenNode)additiveOp);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AdditiveOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param additiveOp the node currently being visited
	 */
	public void endVisit(AdditiveOp additiveOp) {
		endVisit((KermetaTokenNode)additiveOp);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>MultiplicativeExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicativeExpression the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(MultiplicativeExpression multiplicativeExpression) {
		return beginVisit((KermetaASTNode)multiplicativeExpression);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>MultiplicativeExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicativeExpression the node currently being visited
	 */
	public void endVisit(MultiplicativeExpression multiplicativeExpression) {
		endVisit((KermetaASTNode)multiplicativeExpression);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>MultiplicativeOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicativeOp the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(MultiplicativeOp multiplicativeOp) {
		return beginVisit((KermetaTokenNode)multiplicativeOp);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>MultiplicativeOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicativeOp the node currently being visited
	 */
	public void endVisit(MultiplicativeOp multiplicativeOp) {
		endVisit((KermetaTokenNode)multiplicativeOp);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>UnaryExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param unaryExpression the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(UnaryExpression unaryExpression) {
		return beginVisit((KermetaASTNode)unaryExpression);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>UnaryExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param unaryExpression the node currently being visited
	 */
	public void endVisit(UnaryExpression unaryExpression) {
		endVisit((KermetaASTNode)unaryExpression);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>UnaryOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param unaryOp the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(UnaryOp unaryOp) {
		return beginVisit((KermetaTokenNode)unaryOp);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>UnaryOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param unaryOp the node currently being visited
	 */
	public void endVisit(UnaryOp unaryOp) {
		endVisit((KermetaTokenNode)unaryOp);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>PostfixExp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param postfixExp the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(PostfixExp postfixExp) {
		return beginVisit((KermetaASTNode)postfixExp);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>PostfixExp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param postfixExp the node currently being visited
	 */
	public void endVisit(PostfixExp postfixExp) {
		endVisit((KermetaASTNode)postfixExp);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Postfixlst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param postfixlst the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Postfixlst postfixlst) {
		return beginVisit((KermetaASTNode)postfixlst);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Postfixlst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param postfixlst the node currently being visited
	 */
	public void endVisit(Postfixlst postfixlst) {
		endVisit((KermetaASTNode)postfixlst);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Postfix</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param postfix the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Postfix postfix) {
		return beginVisit((KermetaASTNode)postfix);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Postfix</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param postfix the node currently being visited
	 */
	public void endVisit(Postfix postfix) {
		endVisit((KermetaASTNode)postfix);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Call</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param call the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Call call) {
		return beginVisit((Postfix)call);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Call</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param call the node currently being visited
	 */
	public void endVisit(Call call) {
		endVisit((Postfix)call);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>CallPostfix</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param callPostfix the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(CallPostfix callPostfix) {
		return beginVisit((Call)callPostfix);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>CallPostfix</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param callPostfix the node currently being visited
	 */
	public void endVisit(CallPostfix callPostfix) {
		endVisit((Call)callPostfix);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ParamPostfix</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param paramPostfix the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ParamPostfix paramPostfix) {
		return beginVisit((Postfix)paramPostfix);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ParamPostfix</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param paramPostfix the node currently being visited
	 */
	public void endVisit(ParamPostfix paramPostfix) {
		endVisit((Postfix)paramPostfix);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ActualParameterList</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param actualParameterList the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ActualParameterList actualParameterList) {
		return beginVisit((KermetaASTNode)actualParameterList);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ActualParameterList</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param actualParameterList the node currently being visited
	 */
	public void endVisit(ActualParameterList actualParameterList) {
		endVisit((KermetaASTNode)actualParameterList);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ActualParameter</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param actualParameter the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ActualParameter actualParameter) {
		return beginVisit((KermetaASTNode)actualParameter);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ActualParameter</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param actualParameter the node currently being visited
	 */
	public void endVisit(ActualParameter actualParameter) {
		endVisit((KermetaASTNode)actualParameter);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>LambdaPostfix</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param lambdaPostfix the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(LambdaPostfix lambdaPostfix) {
		return beginVisit((Call)lambdaPostfix);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>LambdaPostfix</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param lambdaPostfix the node currently being visited
	 */
	public void endVisit(LambdaPostfix lambdaPostfix) {
		endVisit((Call)lambdaPostfix);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>LambdaPostfixParamLst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param lambdaPostfixParamLst the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(LambdaPostfixParamLst lambdaPostfixParamLst) {
		return beginVisit((KermetaASTNode)lambdaPostfixParamLst);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>LambdaPostfixParamLst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param lambdaPostfixParamLst the node currently being visited
	 */
	public void endVisit(LambdaPostfixParamLst lambdaPostfixParamLst) {
		endVisit((KermetaASTNode)lambdaPostfixParamLst);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>LambdaPostfixParam</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param lambdaPostfixParam the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(LambdaPostfixParam lambdaPostfixParam) {
		return beginVisit((KermetaASTNode)lambdaPostfixParam);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>LambdaPostfixParam</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param lambdaPostfixParam the node currently being visited
	 */
	public void endVisit(LambdaPostfixParam lambdaPostfixParam) {
		endVisit((KermetaASTNode)lambdaPostfixParam);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>PrimitiveExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param primitiveExpression the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(PrimitiveExpression primitiveExpression) {
		return beginVisit((KermetaASTNode)primitiveExpression);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>PrimitiveExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param primitiveExpression the node currently being visited
	 */
	public void endVisit(PrimitiveExpression primitiveExpression) {
		endVisit((KermetaASTNode)primitiveExpression);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ParentExp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param parentExp the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ParentExp parentExp) {
		return beginVisit((PrimitiveExpression)parentExp);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ParentExp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param parentExp the node currently being visited
	 */
	public void endVisit(ParentExp parentExp) {
		endVisit((PrimitiveExpression)parentExp);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FSelfCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fSelfCall the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FSelfCall fSelfCall) {
		return beginVisit((PrimitiveExpression)fSelfCall);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FSelfCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fSelfCall the node currently being visited
	 */
	public void endVisit(FSelfCall fSelfCall) {
		endVisit((PrimitiveExpression)fSelfCall);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FSuperCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fSuperCall the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FSuperCall fSuperCall) {
		return beginVisit((PrimitiveExpression)fSuperCall);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FSuperCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fSuperCall the node currently being visited
	 */
	public void endVisit(FSuperCall fSuperCall) {
		endVisit((PrimitiveExpression)fSuperCall);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ResultCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param resultCall the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ResultCall resultCall) {
		return beginVisit((PrimitiveExpression)resultCall);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ResultCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param resultCall the node currently being visited
	 */
	public void endVisit(ResultCall resultCall) {
		endVisit((PrimitiveExpression)resultCall);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ValueCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param valueCall the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ValueCall valueCall) {
		return beginVisit((PrimitiveExpression)valueCall);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ValueCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param valueCall the node currently being visited
	 */
	public void endVisit(ValueCall valueCall) {
		endVisit((PrimitiveExpression)valueCall);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FBlock</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fBlock the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FBlock fBlock) {
		return beginVisit((PrimitiveExpression)fBlock);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FBlock</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fBlock the node currently being visited
	 */
	public void endVisit(FBlock fBlock) {
		endVisit((PrimitiveExpression)fBlock);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FLambdaExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLambdaExpression the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FLambdaExpression fLambdaExpression) {
		return beginVisit((PrimitiveExpression)fLambdaExpression);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FLambdaExpression</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLambdaExpression the node currently being visited
	 */
	public void endVisit(FLambdaExpression fLambdaExpression) {
		endVisit((PrimitiveExpression)fLambdaExpression);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FLambdaparamlst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLambdaparamlst the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FLambdaparamlst fLambdaparamlst) {
		return beginVisit((KermetaASTNode)fLambdaparamlst);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FLambdaparamlst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLambdaparamlst the node currently being visited
	 */
	public void endVisit(FLambdaparamlst fLambdaparamlst) {
		endVisit((KermetaASTNode)fLambdaparamlst);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FLambdaparam</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLambdaparam the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FLambdaparam fLambdaparam) {
		return beginVisit((KermetaASTNode)fLambdaparam);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FLambdaparam</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLambdaparam the node currently being visited
	 */
	public void endVisit(FLambdaparam fLambdaparam) {
		endVisit((KermetaASTNode)fLambdaparam);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FRescueLst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fRescueLst the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FRescueLst fRescueLst) {
		return beginVisit((KermetaASTNode)fRescueLst);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FRescueLst</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fRescueLst the node currently being visited
	 */
	public void endVisit(FRescueLst fRescueLst) {
		endVisit((KermetaASTNode)fRescueLst);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FRescue</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fRescue the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FRescue fRescue) {
		return beginVisit((KermetaASTNode)fRescue);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FRescue</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fRescue the node currently being visited
	 */
	public void endVisit(FRescue fRescue) {
		endVisit((KermetaASTNode)fRescue);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FLoop</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLoop the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FLoop fLoop) {
		return beginVisit((PrimitiveExpression)fLoop);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FLoop</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLoop the node currently being visited
	 */
	public void endVisit(FLoop fLoop) {
		endVisit((PrimitiveExpression)fLoop);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FConditional</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fConditional the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FConditional fConditional) {
		return beginVisit((PrimitiveExpression)fConditional);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FConditional</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fConditional the node currently being visited
	 */
	public void endVisit(FConditional fConditional) {
		endVisit((PrimitiveExpression)fConditional);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FRaiseException</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fRaiseException the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FRaiseException fRaiseException) {
		return beginVisit((PrimitiveExpression)fRaiseException);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FRaiseException</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fRaiseException the node currently being visited
	 */
	public void endVisit(FRaiseException fRaiseException) {
		endVisit((PrimitiveExpression)fRaiseException);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FVariableDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fVariableDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FVariableDecl fVariableDecl) {
		return beginVisit((PrimitiveExpression)fVariableDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FVariableDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fVariableDecl the node currently being visited
	 */
	public void endVisit(FVariableDecl fVariableDecl) {
		endVisit((PrimitiveExpression)fVariableDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FJavaStaticCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fJavaStaticCall the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FJavaStaticCall fJavaStaticCall) {
		return beginVisit((PrimitiveExpression)fJavaStaticCall);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FJavaStaticCall</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fJavaStaticCall the node currently being visited
	 */
	public void endVisit(FJavaStaticCall fJavaStaticCall) {
		endVisit((PrimitiveExpression)fJavaStaticCall);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLiteral the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FLiteral fLiteral) {
		return beginVisit((PrimitiveExpression)fLiteral);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fLiteral the node currently being visited
	 */
	public void endVisit(FLiteral fLiteral) {
		endVisit((PrimitiveExpression)fLiteral);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FBooleanLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fBooleanLiteral the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FBooleanLiteral fBooleanLiteral) {
		return beginVisit((FLiteral)fBooleanLiteral);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FBooleanLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fBooleanLiteral the node currently being visited
	 */
	public void endVisit(FBooleanLiteral fBooleanLiteral) {
		endVisit((FLiteral)fBooleanLiteral);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TrueOrFalse</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param trueOrFalse the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TrueOrFalse trueOrFalse) {
		return beginVisit((KermetaTokenNode)trueOrFalse);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TrueOrFalse</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param trueOrFalse the node currently being visited
	 */
	public void endVisit(TrueOrFalse trueOrFalse) {
		endVisit((KermetaTokenNode)trueOrFalse);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FIntegerLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fIntegerLiteral the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FIntegerLiteral fIntegerLiteral) {
		return beginVisit((FLiteral)fIntegerLiteral);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FIntegerLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fIntegerLiteral the node currently being visited
	 */
	public void endVisit(FIntegerLiteral fIntegerLiteral) {
		endVisit((FLiteral)fIntegerLiteral);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FStringLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fStringLiteral the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FStringLiteral fStringLiteral) {
		return beginVisit((FLiteral)fStringLiteral);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FStringLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fStringLiteral the node currently being visited
	 */
	public void endVisit(FStringLiteral fStringLiteral) {
		endVisit((FLiteral)fStringLiteral);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FVoidLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fVoidLiteral the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FVoidLiteral fVoidLiteral) {
		return beginVisit((FLiteral)fVoidLiteral);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FVoidLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fVoidLiteral the node currently being visited
	 */
	public void endVisit(FVoidLiteral fVoidLiteral) {
		endVisit((FLiteral)fVoidLiteral);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>FTypeOrVarLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fTypeOrVarLiteral the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(FTypeOrVarLiteral fTypeOrVarLiteral) {
		return beginVisit((FLiteral)fTypeOrVarLiteral);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>FTypeOrVarLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param fTypeOrVarLiteral the node currently being visited
	 */
	public void endVisit(FTypeOrVarLiteral fTypeOrVarLiteral) {
		endVisit((FLiteral)fTypeOrVarLiteral);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AtpreOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param atpreOp the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AtpreOp atpreOp) {
		return beginVisit((KermetaTokenNode)atpreOp);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AtpreOp</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param atpreOp the node currently being visited
	 */
	public void endVisit(AtpreOp atpreOp) {
		endVisit((KermetaTokenNode)atpreOp);
	}


}