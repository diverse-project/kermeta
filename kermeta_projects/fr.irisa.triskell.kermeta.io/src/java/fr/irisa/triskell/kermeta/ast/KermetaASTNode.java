package fr.irisa.triskell.kermeta.ast;

import antlr.Token;
import com.ibm.eclipse.ldt.core.ast.ASTNode;
import com.ibm.eclipse.ldt.core.ast.ASTNodeImpl;

/**
 * The superclass of all ASTNodes for language Kermeta.
 *
 * @generated by Gymnast from kermeta.ast on Mar 2, 2005 6:06:49 PM
 */
public abstract class KermetaASTNode extends ASTNodeImpl {

	protected KermetaASTNode _parent;

	/**
	 * @return the parent of this ASTNode or null if this is the root node of a tree
	 */
	public ASTNode getParent() {
		return _parent;
	}

	/**
	 * Construct a new KermetaASTNode.
	 */
	public KermetaASTNode() {
		super();
	}

	/**
	 * Construct a new KermetaASTNode.
	 *
	 * @param token a Token to initialize the offset and text for this node.
	 */
	public KermetaASTNode(Token token) {
		super(token);
	}

	/**
	 * The external entry point used to initiate the visitor on this node.
	 * 
	 * @param visitor the Visitor to visit this node tree
	 */
	public final void accept(KermetaASTNodeVisitor visitor) {
		visitor.preVisit(this);
		acceptImpl(visitor);
		visitor.postVisit(this);
	}

	/**
	 * This method can be overridden by subclasses which should provide exactly
	 * the same implementation.  Here <code>this</code> refers to the generic node
	 * class, but in the subclass implementations <code>this</code> will refer to
	 * the specific subclass type.  Thus the correct specific <code>beginVisit</code>
	 * and <code>endVisit</code> methods will be invoked for each subclass and the
	 * generic methods will be invoked for subclasses that don't need specific visitor
	 * behavior.
	 */
	public void acceptImpl(KermetaASTNodeVisitor visitor) {
		boolean visitChildren = visitor.beginVisit(this);
		if (visitChildren) visitChildren(visitor);
		visitor.endVisit(this);
	}

	/**
	 * Iterate through the children of this node and accept the visitor on each.
	 */
	protected void visitChildren(KermetaASTNodeVisitor visitor) {
		for (int i = 0; i < getChildCount(); i++) {
			ASTNode child = getChild(i);
			if (child instanceof KermetaASTNode) {
				KermetaASTNode c = (KermetaASTNode)child;
				c.accept(visitor);
			}
		}
	}

}
