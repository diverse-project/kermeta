package fr.irisa.triskell.kermeta.parser.gen.ast;

import org.eclipse.gymnast.runtime.core.ast.ASTNode;
import org.eclipse.gymnast.runtime.core.ast.TokenInfo;

/**
 *
 * @generated by Gymnast from kermeta.ast on 8 juil. 2008 12:04:11
 */
public class CallPostfix extends Call  {


	private KermetaTokenNode _dot;
	private KermetaTokenNode _name;
	private AtpreOp _atp;
	private Postfix _postfix;

	public KermetaTokenNode getDot() {
		return _dot;
	}
	public KermetaTokenNode getName() {
		return _name;
	}
	public AtpreOp getAtp() {
		return _atp;
	}
	public Postfix getPostfix() {
		return _postfix;
	}


	/**
	 * @return the number of children of this ASTNode
	 */
	public int getChildCount() {
		int count = 0;
		if (_dot != null) count++;
		if (_name != null) count++;
		if (_atp != null) count++;
		if (_postfix != null) count++;

		return count;
	}

	/**
	 * @param index the index of a child ASTNode to get
	 * @return the child ASTNode at the given index
	 * @throws IndexOutOfBoundsException when the index is out of bounds
	 */
	public ASTNode getChild(int index) {
		int count = -1;
		if ((_dot != null) && (++count == index)) return _dot;
		if ((_name != null) && (++count == index)) return _name;
		if ((_atp != null) && (++count == index)) return _atp;
		if ((_postfix != null) && (++count == index)) return _postfix;

		throw new IndexOutOfBoundsException();
	}
	
	/**
	 * Construct a new CallPostfix.
	 */
	public CallPostfix(
		TokenInfo dot,
		TokenInfo name,
		AtpreOp atp,
		Postfix postfix
	) {
		super();

		if (dot != null) {
			_dot = new KermetaTokenNode(dot);
			if (_dot._parent != null) throw new RuntimeException();
			_dot._parent = this;
		}
		if (name != null) {
			_name = new KermetaTokenNode(name);
			if (_name._parent != null) throw new RuntimeException();
			_name._parent = this;
		}
		if (atp != null) {
			_atp = atp;
			if (_atp._parent != null) throw new RuntimeException();
			_atp._parent = this;
		}
		if (postfix != null) {
			_postfix = postfix;
			if (_postfix._parent != null) throw new RuntimeException();
			_postfix._parent = this;
		}

	}

	/**
	 * This method overrides the superclass <code>acceptImpl</code> providing
	 * the same implementation.  Here <code>this</code> refers to this specific node
	 * class, so the <code>beginVisit</code> and <code>endVisit</code> methods
	 * specific to this type in the visitor will be invoked.
	 */
	public void acceptImpl(KermetaASTNodeVisitor visitor) {
		boolean visitChildren = visitor.beginVisit(this);
		if (visitChildren) visitChildren(visitor);
		visitor.endVisit(this);
	}

}
