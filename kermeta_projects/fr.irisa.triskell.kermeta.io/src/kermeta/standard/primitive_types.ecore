<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="CompilationUnit">
    <details key="require" value="../Standard.kmt|"/>
    <details key="using" value="kermeta::language::structure|kermeta::exceptions|kermeta::standard|"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="kermeta" nsURI="file:/home/paco/workspace/fr.irisa.triskell.kermeta.framework/dist/standard/primitive_types.ecore#/kermeta" nsPrefix="kermeta">
    <eSubpackages name="standard" nsURI="file:/home/paco/workspace/fr.irisa.triskell.kermeta.framework/dist/standard/primitive_types.ecore#/kermeta/standard" nsPrefix="standard">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xA; * Defines primitive types &#xA; * &lt;img src=&quot;./figures/primitive_types_view.png&quot;>&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Void">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The class Void &#xA; * By convention it is a sub-type of everything&#xA; */"/>
        </eAnnotations>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
        <eOperations name="isVoid" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := true&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Always true&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/isVoid"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := &quot;&lt;void>&quot;&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * overwritten, in order to return a default informative string value&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/toString"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isInstanceOf" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := true&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Returns always true&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/isInstanceOf"/>
          </eAnnotations>
          <eParameters name="type">
            <eType xsi:type="ecore:EClass" href="../reflection/reflection.ecore#/1/reflection/Type"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * Used for PrimitiveTypes like Integer,String, boolean&#xA; */"/>
        </eAnnotations>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueType" abstract="true" eSuperTypes="/1/standard/PrimitiveType">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The abstract class ValueType does not contain any feature&#xA; * but any instance of a sub-class of ValueType will be passed by value &#xA; * instead of by reference for any other objects.&#xA; * that means that each time you := such object it will call the clone function associated to it (Not implemented yet except for Integer, String and boolean!!!)&#xA; * &#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Comparable" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The abstract class Comparable defines a set of operation&#xA; * to compare instances of a class.&#xA; * Sub-classes only has to implement abstract operation compareTo.&#xA; * All other methods are defined w.r.t. the compareTo operation&#xA; */"/>
        </eAnnotations>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xA;  * This method should be implemented by any class that inherits&#xA;  * from Comparable.&#xA;  * returns 0 if self = other&#xA;  * returns > 0 if  self > other&#xA;  * returns &lt; 0 if  self &lt; other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="isGreater" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := (self.compareTo(other)) > (0)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return true if self > other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="isLower" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := (self.compareTo(other)) &lt; (0)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return true if self &lt; other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="isLowerOrEqual" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := (self.compareTo(other)) &lt;= (0)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return true if self &lt;= other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="isGreaterOrEqual" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := (self.compareTo(other)) >= (0)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return true if self >= other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Summable" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The abstract class Summable defines a set of operation&#xA; * to sum instances of a class.&#xA; * Sub-classes only has to implement abstract operation plus.&#xA;  */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
        <eOperations name="plus">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xA;  * Summarization method to be implemented by any summable class.&#xA;  * The parameter must have the same type (or one of its subtypes)&#xA;  *  than the current object .&#xA;  */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/Summable/G"/>
          <eParameters name="other">
            <eGenericType eTypeParameter="/1/standard/Summable/G"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NotComparableException">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * raized when two objects are not comparable&#xA; */"/>
        </eAnnotations>
        <eSuperTypes href="../exceptions/exceptions.ecore#/1/exceptions/Exception"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Boolean" eSuperTypes="/1/standard/PrimitiveType">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The Boolean type&#xA; */"/>
        </eAnnotations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Boolean) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Returns true if &lt;code>other&lt;/code> type is Boolean&#xA;  * and has the same boolean value than current object.&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/equals"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EClass" href="../reflection/reflection.ecore#/1/reflection/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="and" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~and(self, other)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return self and other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="not" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~not(self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return not self&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="or" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~or(self, other)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return self or other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="implies" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := not ((not ((self) and (other))) and (self))&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return self implies other&#xA;  * meaning : not( (not (self and other)) and self)&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="xor" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := ((self) and (not (other))) or ((not (self)) and (other))&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return self xor other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="nand" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := not ((self) and (other))&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return self nand other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := if self then&#xA;&#x9;&#x9;&quot;true&quot;&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;&quot;false&quot;&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Returns 'true' or 'false', depending on self  value&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/toString"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Numeric" abstract="true" eSuperTypes="/1/standard/Comparable /1/standard/ValueType">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The abstract class Numeric is the root class for all&#xA; * numeric types&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Integer" eSuperTypes="/1/standard/Numeric /1/standard/Summable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The class Integer&#xA; */"/>
        </eAnnotations>
        <eOperations name="times">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;from var i : kermeta::standard::Integer init 0&#xA;&#x9;until (i) == (self)&#xA;&#x9;loop&#xA;&#x9;&#x9;body(i)&#xA;&#x9;&#x9;i := (i) + (1)&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Iteration&#xA;  */"/>
          </eAnnotations>
          <eParameters name="body">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="kermeta::standard::Integer"/>
              <details key="1" value="alias Object : kermeta::language::structure::Object;"/>
            </eAnnotations>
            <eType xsi:type="ecore:EDataType" href="../Standard.ecore#/1/_KermetaSpecialTypesAlias_"/>
          </eParameters>
        </eOperations>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/compareTo">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.compareTo(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;raise kermeta::standard::NotComparableException.new&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Comparison&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.equals(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Returns true if &lt;code>other&lt;/code> type is Integer or Real&#xA;  * and has the same numeric value than current object.&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/equals"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EClass" href="../reflection/reflection.ecore#/1/reflection/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="plus" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Summable/plus">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.plus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns self + other&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Summable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="minus" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.minus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns self - other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="mult" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.times(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns self * other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="div" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if (other) == (0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#xA;&#x9;end&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.div(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns self / other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="mod" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if (other) == (0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#xA;&#x9;end&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.mod(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns self modulo other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="uminus" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := (0) - (self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns -self&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toReal" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toReal(self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Convert self as a Real&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isGreater" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/isGreater">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.isGreater(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreater(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return true if self > other&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="isLower" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/isLower">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.isLower(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLower(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return true if self &lt; other&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="isLowerOrEqual" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/isLowerOrEqual">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.isLowerOrEqual(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLowerOrEqual(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return true if self &lt;= other&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="isGreaterOrEqual" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/isGreaterOrEqual">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.isGreaterOrEqual(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreaterOrEqual(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * return true if self >= other&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toString(self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Numeric value in string format&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/toString"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Real" eSuperTypes="/1/standard/Numeric /1/standard/Summable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * class Real&#xA; */"/>
        </eAnnotations>
        <eOperations name="plus" eType="/1/standard/Real">
          <eAnnotations source="kermeta" references="/1/standard/Summable/plus">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.plus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns self + other&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Summable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Real"/>
        </eOperations>
        <eOperations name="minus" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.minus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns self - other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Real"/>
        </eOperations>
        <eOperations name="mult" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.times(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns self * other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Real"/>
        </eOperations>
        <eOperations name="div" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if (other) == (0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#xA;&#x9;end&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.div(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns self / other&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Real"/>
        </eOperations>
        <eOperations name="toInteger" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toInteger(self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Convert self as an Integer&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/compareTo">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Real) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Integer) then&#xA;&#x9;&#x9;&#x9;result := self.compareTo(other.asType(kermeta::standard::Integer).toReal)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;raise kermeta::standard::NotComparableException.new&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Comparison&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Real) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Integer) then&#xA;&#x9;&#x9;&#x9;result := self.equals(other.asType(kermeta::standard::Integer).toReal)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Returns true if &lt;code>other&lt;/code> type is Integer or Real&#xA;  * and has the same numeric value than current object.&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/equals"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EClass" href="../reflection/reflection.ecore#/1/reflection/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="uminus" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := (0.toReal) - (self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns -self&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toString(self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Returns numeric value in string format&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/toString"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Character" eSuperTypes="/1/standard/ValueType /1/standard/Comparable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The class Character&#xA; */"/>
        </eAnnotations>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/compareTo">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Comparaison&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Character) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Returns true if &lt;code>other&lt;/code> type is Character&#xA;  * and has the same letter value than current object.&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/equals"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EClass" href="../reflection/reflection.ecore#/1/reflection/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.toString(self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Conversion from Character to String&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/toString"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="String" eSuperTypes="/1/standard/ValueType /1/standard/Comparable /1/standard/Summable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The class String&#xA; */"/>
        </eAnnotations>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/compareTo">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Comparaison&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EDataType" href="collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::String) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Returns true if &lt;code>other&lt;/code> type is String&#xA;  * and has the same string value than current object.&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/equals"/>
          </eAnnotations>
          <eParameters name="other">
            <eType xsi:type="ecore:EClass" href="../reflection/reflection.ecore#/1/reflection/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="plus" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/standard/Summable/plus">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.plus(self, other.toString)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.plus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns a new string self + other&#xA;  */"/>
            <details key="superOperation" value="kermeta::standard::Summable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="append">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::String.append(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Appends other at the end of self&#xA;  * A more efficient method is kermeta::utils::StringBuffer::append(other)&#xA;  */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="elementAt" eType="/1/standard/Character">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if ((index) &lt; (0)) or ((index) > ((size) - (1))) then&#xA;&#x9;&#x9;raise kermeta::exceptions::StringIndexOutOfBound.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.elementAt(self, index)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns the character at index in the String&#xA;  */"/>
          </eAnnotations>
          <eParameters name="index" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="indexOf" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.indexOf(self, str)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns the index within this string of the first &#xA;  * occurrence of the specified substring&#xA;  */"/>
          </eAnnotations>
          <eParameters name="str" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="substring" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if ((((startIndex) >= (0)) and ((startIndex) &lt;= (size))) and ((endIndex) &lt;= (size))) and ((endIndex) >= (startIndex)) then&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.substring(self, startIndex, endIndex)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;raise kermeta::exceptions::StringIndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns a new string that is a substring of this string&#xA;  */"/>
          </eAnnotations>
          <eParameters name="startIndex" eType="/1/standard/Integer"/>
          <eParameters name="endIndex" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="size" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.size(self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns the number of characters in the current String&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * returns the string itself&#xA;  */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
            <references href="../language/structure.ecore#/1/language/structure/Object/toString"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="replace" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.replace(self, str1, str2)&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Replaces all occurances of str1 in the current string by the string str2&#xA;  */"/>
          </eAnnotations>
          <eParameters name="str1" eType="/1/standard/String"/>
          <eParameters name="str2" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="toBoolean" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toBoolean(self)&#xA;&#x9;if result.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::StringFormatException.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Parses the current string and returns true if the string is &quot;true&quot; and false if the string is &quot;false&quot;&#xA;  * The parsing is not case sensitive and if no boolean value is recognized then a StringFormatException is raised.&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toInteger" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toInteger(self)&#xA;&#x9;if result.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::StringFormatException.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Parses the current string into an integer.&#xA;  * if no integer value is recognized then a StringFormatException is raised.&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toReal" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toReal(self)&#xA;&#x9;if result.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::StringFormatException.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;  * Parses the current string into a real.&#xA;  * if no real value is recognized then a StringFormatException is raised.&#xA;  */"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Integer">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * Unlimited natural is used for reflection.&#xA; * It is mapped to integer.equals().&#xA; * Any negative number is interpreted as '*'&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EAnnotation source="dependentResource">
    <references href="../Standard.ecore#/0"/>
    <references href="../Standard.ecore#/1"/>
    <references href="collections.ecore#/0"/>
    <references href="collections.ecore#/1"/>
    <references href="../language/behavior.ecore#/0"/>
    <references href="../language/behavior.ecore#/1"/>
    <references href="../language/structure.ecore#/0"/>
    <references href="../language/structure.ecore#/1"/>
    <references href="../reflection/reflection.ecore#/0"/>
    <references href="../reflection/reflection.ecore#/1"/>
    <references href="../persistence/resource.ecore#/0"/>
    <references href="../persistence/resource.ecore#/1"/>
    <references href="../language/reflective_collections.ecore#/0"/>
    <references href="../language/reflective_collections.ecore#/1"/>
    <references href="../kunit/kunit.ecore#/0"/>
    <references href="../kunit/kunit.ecore#/1"/>
    <references href="../kunit/assert.ecore#/0"/>
    <references href="../kunit/assert.ecore#/1"/>
    <references href="../utils/hashtable.ecore#/0"/>
    <references href="../utils/hashtable.ecore#/1"/>
    <references href="../utils/stack.ecore#/0"/>
    <references href="../utils/stack.ecore#/1"/>
    <references href="../io/std_io.ecore#/0"/>
    <references href="../io/std_io.ecore#/1"/>
    <references href="../io/file_io.ecore#/0"/>
    <references href="../io/file_io.ecore#/1"/>
    <references href="../exceptions/exceptions.ecore#/0"/>
    <references href="../exceptions/exceptions.ecore#/1"/>
    <references href="../language/dynamic_expression.ecore#/0"/>
    <references href="../language/dynamic_expression.ecore#/1"/>
    <references href="java.ecore#/0"/>
    <references href="java.ecore#/1"/>
    <references href="../ecore/ecore_compatibility.ecore#/0"/>
    <references href="../ecore/ecore_compatibility.ecore#/1"/>
    <references href="../utils/StringBuffer.ecore#/0"/>
    <references href="../utils/StringBuffer.ecore#/1"/>
  </ecore:EAnnotation>
</xmi:XMI>
