<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="ModelingUnit">
    <details key="require" value="../Standard.kmt|"/>
    <details key="using" value="kermeta::persistence|kermeta::standard|"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="kermeta" nsURI="file:/home/paco/Desktop/cvs/fr.irisa.triskell.kermeta.framework/dist/persistence/resource.ecore#/" nsPrefix="kermeta">
    <eSubpackages name="persistence" nsURI="http://www.kermeta.org/kermeta/persistence" nsPrefix="persistence">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xA; * Contains the classes that handle the serialization of models, in particular&#xA; * EMF models.&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/persistence_package.png&quot;/>&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Resource" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * The main class that handle a loaded/saved model.&#xA; * There are a few important things to note for the developer :&#xA; * &#xA; * - load a Resource : this loads a Collection of instances corresponding to the&#xA; *   objects in the loaded model. If the Collection of instances is empty, than &#xA; *&#x9; a ResourceLoadException is raised&#xA; *&#xA; * - save a Resource : this saves the collection of instances in a new file. This can&#xA; *   be correctly done if and only if the instances saved are conform to the metamodel&#xA; *   linked to this resource (this link does not need to be explicit. It is normally retrieved&#xA; *   through the EMF model -- see Java wrapping &quot;Resource.java&quot;).&#xA; * &#xA; * - add/remove an instance to the Resource : this adds an element in the resource. It cannot&#xA; *   be &quot;simply&quot; added because of the following potential errors :&#xA; *&#xA; *   - The object added is not conform to the metamodel -> Error&#xA; *   - The object was already added in the resource -> Not a real error : we do nothing&#xA; *   - The object to remove does not exist -> redirect to a collection-specific error&#xA; *   - The object to remove is attached to an object in the collection -> &quot;dependency-violation&quot; exception?&#xA;&#xA; */"/>
        </eAnnotations>
        <eSuperTypes href="../standard/collections.ecore#/1/standard/Set"/>
        <eOperations name="instances">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * The entities contained in the model-instance, that are provided when user loads a resource &#xA;&#x9; * instances == rootContents&#xA;&#x9; * this is a loop on Resource itself in order to get backward compatibility&#xA;&#x9; * user should use the resource directly since this is a collection&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="save">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xA;&#x9; * Save a Resource in the file specified by the current value of uri &#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="saveWithNewURI">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Save a Resource in a file referenced by the new uri. &#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="new_uri">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="load">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xA;&#x9; * Loads the Resource, thus making content of the Resource browsable.&#xA;&#x9; * Raises a ResourceLoadException in case loaded Resource is empty&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xA;&#x9; * Uri of the Resource to load&#xA;&#x9; */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="metaModelURI">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xA;&#x9; * Uri of the meta-model of the Resource to load&#xA;&#x9; */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xA;&#x9; * Indicates weither this resource will be updated when saving the repository&#xA;&#x9; * This is useful if the repository contains some metamodels that should not be saved.&#xA;&#x9; *&#xA;&#x9; * Note that in the current version, it doesn't ensure that you have not modified its content (using the freeze)&#xA;&#x9; * If you modify the elements of such resource, other resource that depend on it will be incorrectly saved &#xA;&#x9; */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="repository" eType="/1/persistence/Repository" eOpposite="/1/persistence/Repository/resources">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA;&#x9; * Repository used to create the Resource&#xA;&#x9; * This feature is supposed read only, otherwise it cannot garantee that an element is contained by only &#xA;&#x9; * one Resource of a given Repository&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="dependentResources" ordered="false" upperBound="-1" eType="/1/persistence/Resource" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA;&#x9; * Returns the set of Resources the current Resource, which must have been loaded,&#xA;&#x9; * depends on, an empty set if current Resource has no dependency&#xA;&#x9; */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.getDependentResources(self, uri, metaModelURI, &quot;EMF&quot;)&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="contents" ordered="false" upperBound="-1" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="false"/>
            <details key="documentation" value="/** &#xA;&#x9; * Returns the set of all Objects directly or indirectly contained by the Resource,&#xA;&#x9; * or an empty set if the Resource is empty&#xA;&#x9; */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;var res : kermeta::standard::Set&lt;kermeta::language::structure::Object> init kermeta::standard::Set&lt;kermeta::language::structure::Object>.new&#xA;&#x9;res.addAll(self)&#xA;&#x9;var coll : kermeta::standard::Set&lt;kermeta::language::structure::Object>&#xA;&#x9;self.each{e | do&#xA;&#x9;&#x9;&#x9;coll ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getAllContainedObjects(e)&#xA;&#x9;&#x9;&#x9;res.addAll(coll)&#xA;&#x9;&#x9;end}&#xA;&#x9;result := res&#xA;end"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="../standard/collections.ecore#/1/standard/Object"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EMFResource" eSuperTypes="/1/persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * Extension of the Resource class definition that is specific to EMF Repository.&#xA; * User is not supposed to directly create it. Otherwise it will not be correctly initialized&#xA; * You must To create one &#xA; */"/>
        </eAnnotations>
        <eOperations name="saveWithNewURI">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self, new_uri, metaModelURI, &quot;EMF&quot;, self, false)&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Overrides Resource.saveWithNewURI(String)&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="new_uri">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="save">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if isReadOnly then&#xA;&#x9;&#x9;var e : kermeta::exceptions::ResourceSaveException init kermeta::exceptions::ResourceSaveException.new&#xA;&#x9;&#x9;e.message := ((((&quot;Cannot save a readonly resource. Probably this resource was indirectly loaded when loading another resource. \n&quot;) + (&quot;If you really intend to save this resource, you can set isReadOnly to false, but you must ensure to do so before any resource save.\n&quot;))) + (&quot;Note : setting isReadOnly to false on the metamodel may lead to unpredictable results&quot;))&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self, self.uri, metaModelURI, &quot;EMF&quot;, self, false)&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Overrides Resource.save()&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="saveAndValidateWithEMF">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self, self.uri, metaModelURI, &quot;EMF&quot;, self, true)&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Checks the Resource using the EMF validation function, and saves it if&#xA;&#x9; * validation succeeds&#xA;&#x9; * Applies validation to all root objects of the Resource&#xA;&#x9; * Returns true if the validation reports no error, raises exceptions otherwise&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="load">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;self.clear&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.load(self, uri, metaModelURI, &quot;EMF&quot;)&#xA;&#x9;if self.size.equals(0) then&#xA;&#x9;&#x9;stdio.writeln(&quot;Resource load failed!&quot;)&#xA;&#x9;&#x9;var e : kermeta::exceptions::ResourceLoadException init kermeta::exceptions::ResourceLoadException.new&#xA;&#x9;&#x9;e.message := &quot;Resource load failed, no object was created in this resource&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Overrides Resource.load()&#xA;&#x9; * In case the metamodelURI was not previously set, metamodelURI is filled with&#xA;&#x9; * the nsuri of the root package of the metamodel used to load the Resource after&#xA;&#x9; * a successful load&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;repository.resources.~select{r | do&#xA;&#x9;&#x9;&#x9;(r.isNotEqual(self)) and (r.contains(instance))&#xA;&#x9;&#x9;end}.each{r | do&#xA;&#x9;&#x9;&#x9;stdio.writeln(&quot;DVK ! another resource of the same repository was containing this element&quot;)&#xA;&#x9;&#x9;&#x9;r.remove(instance)&#xA;&#x9;&#x9;end}&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.setContainingResource(instance, self)&#xA;&#x9;super(instance)&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Overrides Set&lt;Object>.add(Object)&#xA;&#x9; * Add an instance to the Resource &#xA;&#x9; * Ensures that the instance is referenced by a one and only one Resource of the same Repository&#xA;&#x9; * Ensures that the instance does not appear more than once in the Resource&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="instance">
            <eType xsi:type="ecore:EDataType" href="../standard/collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if self.contains(instance) then&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.unSetContainingResource(instance)&#xA;&#x9;&#x9;super(instance)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Overrides Set&lt;Object>.remove(Object)&#xA;&#x9; * Remove the instance from the Resource&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="instance">
            <eType xsi:type="ecore:EDataType" href="../standard/collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMResource" eSuperTypes="/1/persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * NOT IMPLEMENTED&#xA; */"/>
        </eAnnotations>
        <eOperations name="save">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xA; &#x9; * NOT IMPLEMENTED&#xA; &#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="load">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xA; &#x9; * NOT IMPLEMENTED&#xA; &#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xA; &#x9; * NOT IMPLEMENTED&#xA; &#x9; */"/>
          </eAnnotations>
          <eParameters name="instance">
            <eType xsi:type="ecore:EDataType" href="../standard/collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xA; &#x9; * NOT IMPLEMENTED&#xA; &#x9; */"/>
          </eAnnotations>
          <eParameters name="instance">
            <eType xsi:type="ecore:EDataType" href="../standard/collections.ecore#/1/standard/Object"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Repository" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * Abstract resource container, that contains a list of available loaded resources, &#xA; * and methods to create or get a resource given an URI.&#xA; */"/>
        </eAnnotations>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
        <eOperations name="createResource">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xA;&#x9; * Creates a new Resource with given uri, and an optional mm_uri&#xA;&#x9; * mm_uri is required when creating a new model from scratch.&#xA;&#x9; * Raises a ResourceCreate exception in case the Repository already&#xA;&#x9; * contains a Resource with the given uri&#xA;&#x9; * If uri does not points to an existing model file (in the case of&#xA;&#x9; * a model creation), calls to load() operation will fail as long as&#xA;&#x9; * the model has not been saved once&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="uri">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
          <eParameters name="mm_uri">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="getResource">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var nUri : kermeta::standard::String&#xA;&#x9;var crt_nUri : kermeta::standard::String&#xA;&#x9;nUri ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Repository.normalizeUri(uri)&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Repository.initRepository(self)&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;kermeta::persistence::Resource> init resources.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;var next : kermeta::persistence::Resource init it.next&#xA;&#x9;&#x9;crt_nUri ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Repository.normalizeUri(next.uri)&#xA;&#x9;&#x9;if nUri.equals(crt_nUri) then&#xA;&#x9;&#x9;&#x9;result := next&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;if result.equals(void) then&#xA;&#x9;&#x9;result := self.createResource(uri, &quot;&quot;)&#xA;&#x9;&#x9;result.load&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Returns the Resource associated with the given uri if this uri is associated with&#xA;&#x9; * an already created Resource of the Repository.&#xA;&#x9; * If the Repository contains no Resource associated with the given uri, creates&#xA;&#x9; * a new Resource and loads it.&#xA;&#x9; * Raises a ResourceCreate exception if the given uri does not point to an existing&#xA;&#x9; * model file &#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="uri">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="findDanglingModelElements">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::persistence::DanglingDiagnostic>.new&#xA;&#x9;self.resources.each{res | do&#xA;&#x9;&#x9;&#x9;res.contents.each{containedObj | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var classDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;classDef ?= containedObj.getMetaClass.typeDefinition&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if classDef.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;classDef.allAttribute.each{prop | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if prop.isDerived.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((((prop.upper) > (1))) or (prop.upper.equals(1.uminus))) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var referencedObjs : kermeta::standard::Collection&lt;kermeta::standard::Object>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencedObjs ?= containedObj.get(prop)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if referencedObjs.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencedObjs.each{referencedObj | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((self.resources.exists{res2 | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;res2.contents.contains(referencedObj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}.~not) and (((((referencedObj.isKindOf(kermeta::standard::String)) or (referencedObj.isKindOf(kermeta::standard::Integer)))) or (referencedObj.isKindOf(kermeta::standard::Boolean))).~not)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var diagnostic : kermeta::persistence::DanglingDiagnostic init kermeta::persistence::DanglingDiagnostic.new&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.danglingElement := referencedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingElement := containedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingProperty ?= prop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(diagnostic)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var referencedObj : kermeta::standard::Object&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencedObj := containedObj.get(prop)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if referencedObj.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((self.resources.exists{res2 | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;res2.contents.contains(referencedObj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}.~not) and (((((referencedObj.isKindOf(kermeta::standard::String)) or (referencedObj.isKindOf(kermeta::standard::Integer)))) or (referencedObj.isKindOf(kermeta::standard::Boolean))).~not)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var diagnostic : kermeta::persistence::DanglingDiagnostic init kermeta::persistence::DanglingDiagnostic.new&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.danglingElement := referencedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingElement := containedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingProperty ?= prop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(diagnostic)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Search for elements referenced by one element contained by this repository  that are not contained by this repository&#xA;&#x9; * ie. element that EMF would claim as &quot;not contained in a resource&quot;&#xA;&#x9; * example of use :&#xA;&#x9; *  var report : Set&lt;DanglingDiagnostic>&#xA;     *&#x9;report := repository.findDanglingModelElements()&#xA;     *&#x9;report.each{ diag | stdio.writeln(diag.toString ) }&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="resources" ordered="false" upperBound="-1" eType="/1/persistence/Resource" containment="true" eOpposite="/1/persistence/Resource/repository">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA;&#x9; * Resources created by this Repository &#xA;&#x9; * This feature is supposed read only, otherwise it cannot garantee that an element is contained by only &#xA;&#x9; * one Resource of a given Repository&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DanglingDiagnostic">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * class used to gather the information required to make a user friendly report about a dangling element&#xA; * (see. findDanglingModelElements())&#xA; */"/>
        </eAnnotations>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
        <eOperations name="toString">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := ((((((((((danglingElement.toString) + (&quot; referenced by &quot;))) + (referencingElement.toString))) + (&quot;.&quot;))) + (referencingProperty.name))) + (&quot; is dangling&quot;))&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * user friendly message build with those informations&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="danglingElement">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="false"/>
            <details key="documentation" value="/**&#xA;&#x9; * Element that is not contained by a resource in the repository  &#xA;&#x9; */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="../standard/collections.ecore#/1/standard/Object"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="referencingElement">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="false"/>
            <details key="documentation" value="/**&#xA;&#x9; * Element that has a reference to the dangling element  &#xA;&#x9; */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="../standard/collections.ecore#/1/standard/Object"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencingProperty">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA;&#x9; * Property used to reference the dangling element  &#xA;&#x9; */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../kermeta_java.ecore#/1/language/structure/Property"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EMFRepository" eSuperTypes="/1/persistence/Repository">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * Repository that stores and manages resources that come from EMF&#xA; */"/>
        </eAnnotations>
        <eOperations name="createResource">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var nUri : kermeta::standard::String&#xA;&#x9;nUri ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Repository.normalizeUri(uri)&#xA;&#x9;if resources.collect{r | do&#xA;&#x9;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Repository.normalizeUri(r.uri)&#xA;&#x9;&#x9;end}.contains(nUri).~not then&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Repository.createResource(self, uri, mm_uri)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var e : kermeta::exceptions::ResourceCreateException init kermeta::exceptions::ResourceCreateException.new&#xA;&#x9;&#x9;e.message := ((((((&quot;Trying to create a resource already existing at &quot;) + (uri))) + (&quot;.\n&quot;))) + (&quot;Remove existing resource from repository first, or use \&quot;getResource\&quot; operation.&quot;))&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Overrides Repository.createResource(String, String)&#xA;&#x9; * Create a new resource for a model given by its uri, &#xA;&#x9; * which meta-model is stored in file given by mm_uri&#xA;&#x9; * If file already exists, you'll be able to call the load method to concretly load the model&#xA;&#x9; * otherwise, you can only call the save method&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="uri">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
          <eParameters name="mm_uri">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="useInterpreterInternalResources">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/** &#xA;&#x9; * If true, tells to the save of the resources that they should also integrate the resources from Kermeta interpreter itself&#xA;&#x9; * this is usefull for example to make a dependency to framework.km&#xA;&#x9; * by default, not setting this is considered as false.&#xA;&#x9; */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="ignoreLoadErrors">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xA;&#x9; * When loading the Resources, &#xA;&#x9; * if there are some errors while loading some objects, those objects are ignored&#xA;&#x9; * by default, not setting this is considered as false.&#xA;&#x9; */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMRepository" eSuperTypes="/1/persistence/Repository">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * Repository that stores and manages XMI files representing Kermeta models&#xA; */"/>
        </eAnnotations>
        <eOperations name="createResource">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := void&#xA;end"/>
            <details key="documentation" value="/**&#xA; &#x9; * NOT IMPLEMENTED&#xA; &#x9; */"/>
          </eAnnotations>
          <eParameters name="uri">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
          <eParameters name="mm_uri">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EAnnotation source="dependentResource">
    <references href="../Standard.ecore#/0"/>
    <references href="../Standard.ecore#/1"/>
    <references href="../standard/collections.ecore#/0"/>
    <references href="../standard/collections.ecore#/1"/>
    <references href="../standard/collections.ecore#/2"/>
    <references href="../standard/primitive_types.ecore#/0"/>
    <references href="../standard/primitive_types.ecore#/1"/>
    <references href="../language/structure.ecore#/0"/>
    <references href="../language/structure.ecore#/1"/>
    <references href="../kermeta_java.ecore#/0"/>
    <references href="../kermeta_java.ecore#/1"/>
    <references href="../language/reflective_collections.ecore#/0"/>
    <references href="../language/reflective_collections.ecore#/1"/>
    <references href="../kunit/kunit.ecore#/0"/>
    <references href="../kunit/kunit.ecore#/1"/>
    <references href="../kunit/kunit.ecore#/2"/>
    <references href="../kunit/assert.ecore#/0"/>
    <references href="../kunit/assert.ecore#/1"/>
    <references href="../kunit/assert.ecore#/2"/>
    <references href="../utils/utils.ecore#/0"/>
    <references href="../utils/utils.ecore#/1"/>
    <references href="../utils/StringBuffer.ecore#/0"/>
    <references href="../utils/StringBuffer.ecore#/1"/>
    <references href="../utils/hashtable.ecore#/0"/>
    <references href="../utils/hashtable.ecore#/1"/>
    <references href="../utils/stack.ecore#/0"/>
    <references href="../utils/stack.ecore#/1"/>
    <references href="../io/std_io.ecore#/0"/>
    <references href="../io/std_io.ecore#/1"/>
    <references href="../io/file_io.ecore#/0"/>
    <references href="../io/file_io.ecore#/1"/>
    <references href="../exceptions/exceptions.ecore#/0"/>
    <references href="../exceptions/exceptions.ecore#/1"/>
    <references href="../exceptions/exceptions.ecore#/2"/>
    <references href="../language/dynamic_expression.ecore#/0"/>
    <references href="../language/dynamic_expression.ecore#/1"/>
    <references href="../standard/java.ecore#/0"/>
    <references href="../standard/java.ecore#/1"/>
    <references href="../standard/java.ecore#/2"/>
    <references href="../ecore/ecore_compatibility.ecore#/0"/>
    <references href="../ecore/ecore_compatibility.ecore#/1"/>
    <references href="../ecore/ecore_compatibility.ecore#/2"/>
  </ecore:EAnnotation>
</xmi:XMI>
