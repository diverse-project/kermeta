<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="ModelingUnit">
    <details key="require" value="../Standard.kmt|"/>
    <details key="using" value="kermeta::kunit|kermeta::standard|"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="kermeta" nsURI="file:/home/paco/workspace/fr.irisa.triskell.kermeta.framework/dist/kunit/assert.ecore#/" nsPrefix="kermeta">
    <eSubpackages name="kunit" nsURI="http://www.kermeta.org/kermeta/kunit" nsPrefix="kunit">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xA; * main features of the famous Unit test tool for Kermeta language&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/kunit_package.png&quot;>&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="AbstractFallible" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * to be written ############################&#xA; */"/>
        </eAnnotations>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
        <eOperations name="assert">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** process the given condition and react if it is not satisfied */"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertWithMsg">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xA;     * process the given condition and react with the given message&#xA;     * if it is not satisfied&#xA;     */"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
          <eParameters name="msg">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="fail">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** to be used if a failure reaction is needed */"/>
          </eAnnotations>
          <eParameters name="msg">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertTrue">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** process the given condition and react if it is not satisfied */"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertTrueWithMsg">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xA;     * process the given condition and react with the given message&#xA;     * if it is not satisfied&#xA;     */"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
          <eParameters name="message">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertFalse">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** process the given condition and react if it is satisfied */"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertFalseWithMsg">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xA;     * process the given condition and react with the given message&#xA;     * if it is satisfied&#xA;     */"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
          <eParameters name="message">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertEqual">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** process the two given string and react if they are not equal */"/>
          </eAnnotations>
          <eParameters name="expected">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
          <eParameters name="actual">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertSimilar">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;expected := distil(expected)&#xA;&#x9;actual := distil(actual)&#xA;&#x9;assertWithMsg(expected.equals(actual), ((((((((&quot;\nexpected\t:[&quot;) + (expected))) + (&quot;] != \nactual\t:[&quot;))) + (actual))) + (&quot;]&quot;)))&#xA;end"/>
            <details key="documentation" value="/**&#xA;   * Log a failure if the two strings are not identical modulo-white-space&#xA;   */"/>
          </eAnnotations>
          <eParameters name="expected">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
          <eParameters name="actual">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="distil">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := &quot;&quot;&#xA;&#x9;var white : kermeta::standard::Boolean init false&#xA;&#x9;from var i : kermeta::standard::Integer init 0&#xA;&#x9;until i.equals(s.size)&#xA;&#x9;loop&#xA;&#x9;&#x9;var c : kermeta::standard::String init s.elementAt(i).toString&#xA;&#x9;&#x9;if ((&quot; \n\t&quot;.indexOf(c)) >= (0)) then&#xA;&#x9;&#x9;&#x9;if not (white) then&#xA;&#x9;&#x9;&#x9;&#x9;white := true&#xA;&#x9;&#x9;&#x9;&#x9;result := ((result) + (&quot; &quot;))&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := ((result) + (c))&#xA;&#x9;&#x9;&#x9;if white then&#xA;&#x9;&#x9;&#x9;&#x9;white := false&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;i := ((i) + (1))&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** &#xA;  ** reduces all runs of white-space to a single space character&#xA;  **/"/>
          </eAnnotations>
          <eParameters name="s">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AssertionFailedError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** AssertionViolatedException are raised when assertions are violated */"/>
        </eAnnotations>
        <eSuperTypes href="../exceptions/exceptions.ecore#/1/exceptions/Exception"/>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Assert">
        <eSuperTypes href="#/1/kunit/AbstractFallible"/>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
        <eOperations name="assert">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if not (condition) then&#xA;&#x9;&#x9;fail(&quot;assert failed&quot;)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** Fails if condition is false */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
            <references href="platform:/resource/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/assert.ecore#/1/kunit/Assert/assert"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertTrue">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if not (condition) then&#xA;&#x9;&#x9;fail(&quot;assertTrue failed&quot;)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is false */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
            <references href="platform:/resource/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/assert.ecore#/1/kunit/Assert/assertTrue"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertTrueWithMsg">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if not (condition) then&#xA;&#x9;&#x9;fail(((&quot;assertTrueWithMsg failed : &quot;) + (msg)))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is false */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
            <references href="platform:/resource/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/assert.ecore#/1/kunit/Assert/assertTrueWithMsg"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
          <eParameters name="msg">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertFalse">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if condition then&#xA;&#x9;&#x9;fail(&quot;assertTrue number failed&quot;)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is true */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
            <references href="platform:/resource/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/assert.ecore#/1/kunit/Assert/assertFalse"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertFalseWithMsg">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if condition then&#xA;&#x9;&#x9;fail(((&quot;assertTrueWithMsg failed : &quot;) + (msg)))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is true */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
            <references href="platform:/resource/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/assert.ecore#/1/kunit/Assert/assertFalseWithMsg"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
          <eParameters name="msg">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertWithMsg">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if not (condition) then&#xA;&#x9;&#x9;fail(((&quot;assertTrueWithMsg failed : &quot;) + (msg)))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is false */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
            <references href="platform:/resource/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/assert.ecore#/1/kunit/Assert/assertWithMsg"/>
          </eAnnotations>
          <eParameters name="condition">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          </eParameters>
          <eParameters name="msg">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="fail">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var exception : kermeta::kunit::AssertionFailedError init kermeta::kunit::AssertionFailedError.new&#xA;&#x9;exception.message := msg&#xA;&#x9;raise exception&#xA;end"/>
            <details key="documentation" value="/** raise a AssertionViolatedException with the provided message */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
            <references href="platform:/resource/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/assert.ecore#/1/kunit/Assert/fail"/>
          </eAnnotations>
          <eParameters name="msg">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="assertEqual">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if not (expected.equals(actual)) then&#xA;&#x9;&#x9;fail(((((((((&quot;assertEqual failed\nexpected\t:[&quot;) + (expected))) + (&quot;] != \nactual\t:[&quot;))) + (actual))) + (&quot;]&quot;)))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** Will fail if the two strings are not identical */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
            <references href="platform:/resource/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/assert.ecore#/1/kunit/Assert/assertEqual"/>
          </eAnnotations>
          <eParameters name="expected">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
          <eParameters name="actual">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EAnnotation source="dependentResource">
    <references href="../Standard.ecore#/0"/>
    <references href="../Standard.ecore#/1"/>
    <references href="../standard/collections.ecore#/0"/>
    <references href="../standard/collections.ecore#/1"/>
    <references href="../standard/primitive_types.ecore#/0"/>
    <references href="../standard/primitive_types.ecore#/1"/>
    <references href="../language/structure.ecore#/0"/>
    <references href="../language/structure.ecore#/1"/>
    <references href="../kermeta_java.ecore#/0"/>
    <references href="../kermeta_java.ecore#/1"/>
    <references href="../kermeta_java.ecore#/2"/>
    <references href="../language/reflective_collections.ecore#/0"/>
    <references href="../language/reflective_collections.ecore#/1"/>
    <references href="kunit.ecore#/0"/>
    <references href="kunit.ecore#/1"/>
    <references href="../utils/utils.ecore#/0"/>
    <references href="../utils/utils.ecore#/1"/>
    <references href="../utils/StringBuffer.ecore#/0"/>
    <references href="../utils/StringBuffer.ecore#/1"/>
    <references href="../utils/hashtable.ecore#/0"/>
    <references href="../utils/hashtable.ecore#/1"/>
    <references href="../utils/stack.ecore#/0"/>
    <references href="../utils/stack.ecore#/1"/>
    <references href="../io/std_io.ecore#/0"/>
    <references href="../io/std_io.ecore#/1"/>
    <references href="../io/file_io.ecore#/0"/>
    <references href="../io/file_io.ecore#/1"/>
    <references href="../exceptions/exceptions.ecore#/0"/>
    <references href="../exceptions/exceptions.ecore#/1"/>
    <references href="../exceptions/exceptions.ecore#/2"/>
    <references href="../language/dynamic_expression.ecore#/0"/>
    <references href="../language/dynamic_expression.ecore#/1"/>
    <references href="../language/dynamic_expression.ecore#/2"/>
    <references href="../persistence/resource.ecore#/0"/>
    <references href="../persistence/resource.ecore#/1"/>
    <references href="../standard/java.ecore#/0"/>
    <references href="../standard/java.ecore#/1"/>
    <references href="../ecore/ecore_compatibility.ecore#/0"/>
    <references href="../ecore/ecore_compatibility.ecore#/1"/>
  </ecore:EAnnotation>
</xmi:XMI>
