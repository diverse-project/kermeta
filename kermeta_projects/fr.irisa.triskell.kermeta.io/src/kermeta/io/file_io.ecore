<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="CompilationUnit">
    <details key="require" value="../Standard.kmt|"/>
    <details key="using" value="kermeta::standard|kermeta::language::structure|kermeta::exceptions|"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="kermeta" nsURI="file:/C:/David/workspaceRDL/fr.irisa.triskell.kermeta.framework/dist/io/file_io.ecore#/" nsPrefix="kermeta">
    <eSubpackages name="io" nsURI="file:/C:/David/workspaceRDL/fr.irisa.triskell.kermeta.framework/dist/io/file_io.ecore#//io" nsPrefix="io">
      <eClassifiers xsi:type="ecore:EClass" name="FileIO">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Implementation of simple helpers to read ans write text files&#xD;&#xA; */"/>
        </eAnnotations>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
        <eOperations name="writeTextFile">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if filename.equals(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::FileNotFoundException.new&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::io::SimpleFileIO.writeTextFile(filename, text)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Writes a String in a text file&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="filename">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
          <eParameters name="text">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="readTextFile">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if filename.equals(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::FileNotFoundException.new&#xA;&#xA;&#x9;end&#xA;&#x9;var exists : kermeta::standard::Boolean&#xA;&#x9;var isdirectory : kermeta::standard::Boolean&#xA;&#x9;exists ?= extern fr::irisa::triskell::kermeta::runtime::io::SimpleFileIO.fileExists(filename)&#xA;&#x9;isdirectory ?= extern fr::irisa::triskell::kermeta::runtime::io::SimpleFileIO.fileIsDirectory(filename)&#xA;&#x9;if (not (exists)) or (isdirectory) then&#xA;&#x9;&#x9;raise kermeta::exceptions::FileNotFoundException.new&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::io::SimpleFileIO.readTextFile(filename)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Reads a text file&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          <eParameters name="filename">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
        <eOperations name="getAbsolutePathFolder">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if foldername.equals(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::FileNotFoundException.new&#xA;&#xA;&#x9;end&#xA;&#x9;var path : kermeta::standard::String&#xA;&#x9;path ?= extern fr::irisa::triskell::kermeta::runtime::io::SimpleFileIO.getAbsolutePathFolder(foldername)&#xA;&#x9;if path.equals(&quot;Cannot find path.&quot;) then&#xA;&#x9;&#x9;raise kermeta::exceptions::FileNotFoundException.new&#xA;&#xA;&#x9;end&#xA;&#x9;result := path&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Gets the path of a folder from the folder of the current kermeta file&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          <eParameters name="foldername">
            <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/String"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EAnnotation source="dependentResource">
    <references href="../Standard.ecore#/0"/>
    <references href="../Standard.ecore#/1"/>
    <references href="../Standard.ecore#/2"/>
    <references href="../standard/collections.ecore#/0"/>
    <references href="../standard/collections.ecore#/1"/>
    <references href="../standard/primitive_types.ecore#/0"/>
    <references href="../standard/primitive_types.ecore#/1"/>
    <references href="../language/behavior.ecore#/0"/>
    <references href="../language/behavior.ecore#/1"/>
    <references href="../language/behavior.ecore#/2"/>
    <references href="../language/structure.ecore#/0"/>
    <references href="../language/structure.ecore#/1"/>
    <references href="../reflection/reflection.ecore#/0"/>
    <references href="../reflection/reflection.ecore#/1"/>
    <references href="../persistence/resource.ecore#/0"/>
    <references href="../persistence/resource.ecore#/1"/>
    <references href="../language/reflective_collections.ecore#/0"/>
    <references href="../language/reflective_collections.ecore#/1"/>
    <references href="../language/reflective_collections.ecore#/2"/>
    <references href="../kunit/kunit.ecore#/0"/>
    <references href="../kunit/kunit.ecore#/1"/>
    <references href="../kunit/kunit.ecore#/2"/>
    <references href="../kunit/assert.ecore#/0"/>
    <references href="../kunit/assert.ecore#/1"/>
    <references href="../utils/hashtable.ecore#/0"/>
    <references href="../utils/hashtable.ecore#/1"/>
    <references href="../utils/stack.ecore#/0"/>
    <references href="../utils/stack.ecore#/1"/>
    <references href="std_io.ecore#/0"/>
    <references href="std_io.ecore#/1"/>
    <references href="std_io.ecore#/2"/>
    <references href="#/0"/>
    <references href="#/1"/>
    <references href="../exceptions/exceptions.ecore#/0"/>
    <references href="../exceptions/exceptions.ecore#/1"/>
    <references href="../language/dynamic_expression.ecore#/0"/>
    <references href="../language/dynamic_expression.ecore#/1"/>
    <references href="../standard/java.ecore#/0"/>
    <references href="../standard/java.ecore#/1"/>
  </ecore:EAnnotation>
</xmi:XMI>
