<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="CompilationUnit">
    <details key="require" value="../Standard.kmt|"/>
    <details key="using" value="kermeta::standard|kermeta::utils|"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="kermeta" nsURI="file:/C:/eclipse3.3M5/eclipse/workspace/fr.irisa.triskell.kermeta.framework/dist/utils/hashtable.ecore#/" nsPrefix="kermeta">
    <eSubpackages name="utils" nsURI="file:/C:/eclipse3.3M5/eclipse/workspace/fr.irisa.triskell.kermeta.framework/dist/utils/hashtable.ecore#//utils" nsPrefix="utils">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Contains special classes (Hashtable, Stack) that are not contained in Kermeta&#xD;&#xA; * metamodel&#xD;&#xA; * &#xD;&#xA; * &lt;img src=&quot;./figures/utils_package.png&quot;>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Hashtable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An implementation of hashtable&#xD;&#xA; * This implementation is for speed optimisation it cannot be serialized. &#xD;&#xA; * If your wish to serialize its content you need to copy its content into a classical ecore structure (attribute or references)&#xD;&#xA; * &lt;img src=&quot;./figures/hashtable_view.png&quot;>&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="K"/>
        <eTypeParameters name="V"/>
        <eSuperTypes href="../language/structure.ecore#/1/language/structure/Object"/>
        <eOperations name="size">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.size(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns size of the Map&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Integer"/>
        </eOperations>
        <eOperations name="keyIterator">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.keysIterator(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns an iterator on the keys of the Map&#xD;&#xA;  */"/>
          </eAnnotations>
          <eGenericType>
            <eTypeArguments eTypeParameter="/1/utils/Hashtable/K"/>
            <eClassifier xsi:type="ecore:EClass" href="../standard/collections.ecore#/1/standard/Iterator"/>
          </eGenericType>
        </eOperations>
        <eOperations name="valueIterator">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.valueIterator(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns an iterator on the values of the Map&#xD;&#xA;  */"/>
          </eAnnotations>
          <eGenericType>
            <eTypeArguments eTypeParameter="/1/utils/Hashtable/V"/>
            <eClassifier xsi:type="ecore:EClass" href="../standard/collections.ecore#/1/standard/Iterator"/>
          </eGenericType>
        </eOperations>
        <eOperations name="getValue">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.get(self, key)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the value for key 'key'&#xD;&#xA;  */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/utils/Hashtable/V"/>
          <eParameters name="key">
            <eGenericType eTypeParameter="/1/utils/Hashtable/K"/>
          </eParameters>
        </eOperations>
        <eOperations name="put">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.put(self, key, ~value)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Adds a entry in the Hashtable&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="key">
            <eGenericType eTypeParameter="/1/utils/Hashtable/K"/>
          </eParameters>
          <eParameters name="value">
            <eGenericType eTypeParameter="/1/utils/Hashtable/V"/>
          </eParameters>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.remove(self, key)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Removes the entry which key equals 'key'&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="key">
            <eGenericType eTypeParameter="/1/utils/Hashtable/K"/>
          </eParameters>
        </eOperations>
        <eOperations name="clear">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.clear(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Removes all elements from the Hashtable&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="keys">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;K>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;K> init keyIterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;result.add(it.next)&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the keys of the Hashtable&#xD;&#xA;  */"/>
          </eAnnotations>
          <eGenericType>
            <eTypeArguments eTypeParameter="/1/utils/Hashtable/K"/>
            <eClassifier xsi:type="ecore:EClass" href="../standard/collections.ecore#/1/standard/Set"/>
          </eGenericType>
        </eOperations>
        <eOperations name="values">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;V>.new&#xA;&#x9;keys.each{k | result.add(self.getValue(k))}&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the keys of the Hashtable&#xD;&#xA;  */"/>
          </eAnnotations>
          <eGenericType>
            <eTypeArguments eTypeParameter="/1/utils/Hashtable/V"/>
            <eClassifier xsi:type="ecore:EClass" href="../standard/collections.ecore#/1/standard/Collection"/>
          </eGenericType>
        </eOperations>
        <eOperations name="containsKey">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := getValue(key).isNotEqual(void)&#xA;end"/>
            <details key="documentation" value="/** &#xD;&#xA;  * Returns a Boolean stating whether a key is present in the Map&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../standard/primitive_types.ecore#/1/standard/Boolean"/>
          <eParameters name="key">
            <eGenericType eTypeParameter="/1/utils/Hashtable/K"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EAnnotation source="dependentResource">
    <references href="../Standard.ecore#/0"/>
    <references href="../Standard.ecore#/1"/>
    <references href="../Standard.ecore#/2"/>
    <references href="../standard/collections.ecore#/0"/>
    <references href="../standard/collections.ecore#/1"/>
    <references href="../standard/collections.ecore#/2"/>
    <references href="../standard/primitive_types.ecore#/0"/>
    <references href="../standard/primitive_types.ecore#/1"/>
    <references href="../language/behavior.ecore#/0"/>
    <references href="../language/behavior.ecore#/1"/>
    <references href="../language/behavior.ecore#/2"/>
    <references href="../language/structure.ecore#/0"/>
    <references href="../language/structure.ecore#/1"/>
    <references href="../language/structure.ecore#/2"/>
    <references href="../reflection/reflection.ecore#/0"/>
    <references href="../reflection/reflection.ecore#/1"/>
    <references href="../reflection/reflection.ecore#/2"/>
    <references href="../persistence/resource.ecore#/0"/>
    <references href="../persistence/resource.ecore#/1"/>
    <references href="../persistence/resource.ecore#/2"/>
    <references href="../language/reflective_collections.ecore#/0"/>
    <references href="../language/reflective_collections.ecore#/1"/>
    <references href="../language/reflective_collections.ecore#/2"/>
    <references href="../kunit/kunit.ecore#/0"/>
    <references href="../kunit/kunit.ecore#/1"/>
    <references href="../kunit/kunit.ecore#/2"/>
    <references href="../kunit/assert.ecore#/0"/>
    <references href="../kunit/assert.ecore#/1"/>
    <references href="../kunit/assert.ecore#/2"/>
    <references href="stack.ecore#/0"/>
    <references href="stack.ecore#/1"/>
    <references href="stack.ecore#/2"/>
    <references href="../io/std_io.ecore#/0"/>
    <references href="../io/std_io.ecore#/1"/>
    <references href="../io/std_io.ecore#/2"/>
    <references href="../io/file_io.ecore#/0"/>
    <references href="../io/file_io.ecore#/1"/>
    <references href="../io/file_io.ecore#/2"/>
    <references href="../exceptions/exceptions.ecore#/0"/>
    <references href="../exceptions/exceptions.ecore#/1"/>
    <references href="../exceptions/exceptions.ecore#/2"/>
    <references href="../language/dynamic_expression.ecore#/0"/>
    <references href="../language/dynamic_expression.ecore#/1"/>
    <references href="../language/dynamic_expression.ecore#/2"/>
    <references href="../standard/java.ecore#/0"/>
    <references href="../standard/java.ecore#/1"/>
    <references href="../standard/java.ecore#/2"/>
    <references href="../ecore/ecore_compatibility.ecore#/0"/>
    <references href="../ecore/ecore_compatibility.ecore#/1"/>
    <references href="../ecore/ecore_compatibility.ecore#/2"/>
    <references href="StringBuffer.ecore#/0"/>
    <references href="StringBuffer.ecore#/1"/>
  </ecore:EAnnotation>
</xmi:XMI>
