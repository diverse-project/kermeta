<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="CompilationUnit">
    <details key="require" value="../standard/collections.kmt|../persistence/resource.kmt|"/>
    <details key="using" value="kermeta::reflection|"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="kermeta" nsURI="file:/C:/David/workspaceRDL/fr.irisa.triskell.kermeta.framework/dist/reflection/reflection.ecore#/" nsPrefix="kermeta">
    <eSubpackages name="reflection" nsURI="file:/C:/David/workspaceRDL/fr.irisa.triskell.kermeta.framework/dist/reflection/reflection.ecore#//reflection" nsPrefix="reflection">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains all the abstract classes used in the reflection mechanism. Implements the &lt;b>derived&#xD;&#xA; * properties&lt;/b> contained in the classes; declares the abstract operations.&#xD;&#xA; * Concrete implementation is in kermeta.language.structure.&#xD;&#xA; * &lt;img src=&quot;./figures/reflection_package.png&quot;>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String"/>
      <eClassifiers xsi:type="ecore:EClass" name="Object" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** &#xD;&#xA; * Object definition: all entities of Kermeta metamodel explicitly inherit from Object&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="getMetaClass" eType="/1/reflection/Class">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the Class object that is the metaclass of current Object&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="container" eType="/1/reflection/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the Object that contains current Object, void if the Object has&#xD;&#xA;  * no container&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="checkInvariants">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Runs checking of invariants defined for the metaclass of the Object&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="checkAllInvariants">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Recursively runs checking of invariants defined for the metaclass of the Object&#xD;&#xA;  * and its supertypes&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="equals" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * semantic equality,&#xD;&#xA;  * if you wish to test for object identity you need to use the method oid&#xD;&#xA;  * ex: x.oid == y.oid&#xD;&#xA;  * by default, (ie. if not overloaded), the equals method for class Object implements &#xD;&#xA;  * the most discriminating possible equivalence relation on objects; that is, for any non-null &#xD;&#xA;  * reference values x and y, this method returns true if and only if x and y refer to the same &#xD;&#xA;  * object (x.oid == y.oid has the value true). &#xD;&#xA;  *&#xD;&#xA;  * note1: the operator == is mapped to this &#xD;&#xA;  * note2: overloading this operation have some impact on the behavior on collection and hashtable that rely on it&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/reflection/Object"/>
        </eOperations>
        <eOperations name="isNotEqual" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * See kermeta::reflection::Object.equals(Object)&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/reflection/Object"/>
        </eOperations>
        <eOperations name="isKindOf" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns a Boolean stating whether the current Object is an instance of the given Class&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="cl" eType="/1/reflection/Class"/>
        </eOperations>
        <eOperations name="isInstanceOf" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns a Boolean stating whether the current Object conforms to given Type&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="type" eType="/1/reflection/Type"/>
        </eOperations>
        <eOperations name="asType" eType="/1/reflection/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Implementation of OCL like cast. It returns self if the object object conforms to the type given as parameter.&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="type" eType="/1/reflection/Class"/>
        </eOperations>
        <eOperations name="get" eType="/1/reflection/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** &#xD;&#xA;  * Returns the instances of the given property for this Object.&#xD;&#xA;  *&#xD;&#xA;  * Example : &#xD;&#xA;  * &lt;pre>&#xD;&#xA;  * class A { reference attr : String }&#xD;&#xA;  * &lt;/pre>&#xD;&#xA;  * Using A :&#xD;&#xA;  * &lt;pre>&#xD;&#xA;  * operation getAProp() is do&#xD;&#xA;  *    var a : A&#xD;&#xA;  *    var s : String&#xD;&#xA;  *    var the_attr : Property init self.getMetaClass.ownedAttribute.one&#xD;&#xA;  *    s ?= a.get(the_attr)&#xD;&#xA;  * end&#xD;&#xA;  * &lt;/pre>&#xD;&#xA;  * The user has to cast&#xD;&#xA;  * the result of this method according to the type and the upper multiplicity&#xD;&#xA;  * of this property. If upper multiplicity > 1, than the effective type of the &#xD;&#xA;  * result is a Sequence&lt;ThePropertyName>. Otherwise, the type corresponds to &#xD;&#xA;  * the name of the given Property (i.e the type of the property instance).&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="property" eType="/1/reflection/Property"/>
        </eOperations>
        <eOperations name="set">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Sets the &lt;code>element&lt;/code> to the &lt;code>~property&lt;/code> of the object &#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="property" eType="/1/reflection/Property"/>
          <eParameters name="element" eType="/1/reflection/Object"/>
        </eOperations>
        <eOperations name="isSet" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * True if the &lt;code>~property&lt;/code> of the object has been set&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="property" eType="/1/reflection/Property"/>
        </eOperations>
        <eOperations name="unset">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Remove the element set as the &lt;code>~property&lt;/code> of the object.&#xD;&#xA;  * The &lt;code>isSet(~property)&lt;/code> method will then return False&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="property" eType="/1/reflection/Property"/>
        </eOperations>
        <eOperations name="oid" eType="/1/reflection/Integer">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the unique Oid of the Object&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the String representation of the Object&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isFrozen" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns a Boolean stating whether the Object is currently in a&#xD;&#xA;  * frozen state&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="freeze">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Freeze the Object&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="isVoid" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns a Boolean stating whether the Object is Void&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="hashcode" eType="/1/reflection/Integer">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * code used in hashtable in order to identify an object in the hashtable keys&#xD;&#xA;  * This system is similar to the hashcode used in java. Please refer to java documentation&#xD;&#xA;  * for more information about hashcode&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="containingResource">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the Resource currently containing (directly or indirectly) the Object &#xD;&#xA;  * or void if the object belongs to no Resource&#xD;&#xA;  */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EClass" href="../persistence/resource.ecore#/1/persistence/Resource"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTag" ordered="false" upperBound="-1" eType="/1/reflection/Tag" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * An object can contains a Tag.  &#xD;&#xA;  * Be careful, owning a tag doesn't means that the tag applies to the Object&#xD;&#xA;  * To know which Tags apply to the object use the &quot;tag&quot; reference&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="tag" ordered="false" upperBound="-1" eType="/1/reflection/Tag" eOpposite="/1/reflection/Tag/object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * An Object can be tagged by a Tag. &#xD;&#xA;  * They are typically used to put comments/documentation on the object&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="boolean">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Alias for kermeta::standard::Boolean */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Alias for kermeta::standard::Integer */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Integer">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Alias for kermeta::standard::UnlimitedNatural */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ParameterizedType" abstract="true" eSuperTypes="/1/reflection/Type">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Abstraction for Parameterized types, namely, Class and ModelType&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="typeDefinition" lowerBound="1" eType="/1/reflection/GenericTypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Definition of the Type&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding" ordered="false" upperBound="-1" eType="/1/reflection/TypeVariableBinding" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Bindings between type variables and provided types &#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="virtualTypeBinding" ordered="false" upperBound="-1" eType="/1/reflection/TypeVariableBinding" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * To be written #################################&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Class" abstract="true" eSuperTypes="/1/reflection/ParameterizedType">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Type corresponding to the &lt;b>use&lt;/b> of a ClassDefinition (see ClassDefinition)&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="new" eType="/1/reflection/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Instantiates a new occurence for this Class&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="/1/reflection/String">
          <eAnnotations source="kermeta" references="/1/reflection/Object/toString">
            <details key="body" value="do&#xA;&#x9;result := self.typeDefinition.name&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the String representation of this class. &#xD;&#xA;  *  Note : throws an exception if this class has no classDefinition&#xD;&#xA;  *  or if the classDefinition is not well constructed.&#xD;&#xA;  */"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" ordered="false" upperBound="-1" eType="/1/reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the Attributes, References, and derived Properties owned by&#xD;&#xA;  * the ClassDefinition of this Class.&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.ownedAttribute&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" ordered="false" upperBound="-1" eType="/1/reflection/Operation" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the Operations owned by the ClassDefinition of this Class.&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.ownedOperation&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="superClass" ordered="false" upperBound="-1" eType="/1/reflection/Class" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the Classes of which the ClassDefinition of this Class inherits.&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.superType&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="/1/reflection/Boolean" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="false"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns a Boolean stating whether ClassDefinition of this Class is abstract.&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.isAbstract&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/reflection/String" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="false"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the name of the ClassDefinition of this Class&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result := typeDefinition.name&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ModelType" abstract="true" eSuperTypes="/1/reflection/Type /1/reflection/TypeDefinition">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Type of a model, consisting of a set of included type definitions&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="new" eType="/1/reflection/Model">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * To be written ##########################################&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isModelTypeOf" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * To be written ############################################&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="model" eType="/1/reflection/Model"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="includedTypeDefinition" ordered="false" upperBound="-1" eType="/1/reflection/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * To be written #######################################&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Model" abstract="true" eSuperTypes="/1/reflection/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Is the holder of a set of model elements (Object) that are compatible with the ModelType that has &#xD;&#xA; * instanciated this Model.&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="filter" ordered="false" upperBound="-1" eType="/1/reflection/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Returns a set of all the elements of the model that are instance of the given Type&#xD;&#xA;   */"/>
          </eAnnotations>
          <eParameters name="vtype" eType="/1/reflection/Type"/>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Add an object to the model. According to the ModelType, the typechecker will statically verify if the object can be added or not&#xD;&#xA;   */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="obj" eType="/1/reflection/Object"/>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Remove an object from the model&#xD;&#xA;   */"/>
          </eAnnotations>
          <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="obj" eType="/1/reflection/Object"/>
        </eOperations>
        <eOperations name="addAllCompatible">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Add all the Object of the collection that are copmpatible with the ModelDefinition. Other objects are ignored.&#xD;&#xA;   * Returns the list of Object that have been added (One can check that some element have been ignored or not)&#xD;&#xA;   */"/>
          </eAnnotations>
          <eGenericType>
            <eTypeArguments eClassifier="/1/reflection/Object"/>
            <eClassifier xsi:type="ecore:EClass" href="../standard/collections.ecore#/1/standard/Collection"/>
          </eGenericType>
          <eParameters name="objectsToAdd">
            <eType xsi:type="ecore:EClass" href="../standard/collections.ecore#/1/standard/Collection"/>
          </eParameters>
        </eOperations>
        <eOperations name="addCompatible" eType="/1/reflection/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Add the Object if it is copmpatible with the ModelDefinition. Other objects are ignored.&#xD;&#xA;   * Returns the object if it has been added (One can check that some element have been ignored or not)&#xD;&#xA;   * return Void if not added&#xD;&#xA;   */"/>
          </eAnnotations>
          <eParameters name="objectsToAdd" eType="/1/reflection/Object"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="contents" ordered="false" upperBound="-1" eType="/1/reflection/Object" changeable="false">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Contents of this model ...&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" abstract="true" eSuperTypes="/1/reflection/TypedElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; *  Model elements with a multiplicity [lower..upper] inherit this class&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Boolean stating whether the element is ordered&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Boolean stating whether duplicated elements are allowed&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" eType="/1/reflection/Integer">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Min cardinality of the element&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" eType="/1/reflection/UnlimitedNatural">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Max cardinality of the element, '-1' for '*'&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Constraint" abstract="true" eSuperTypes="/1/reflection/NamedElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Constraint is part of a contract implementation in a Class definition or an operation.&#xD;&#xA; * Three kinds of constraints are available : pre, post, and inv (invariant constraint)&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="invOwner" eType="/1/reflection/ClassDefinition" eOpposite="/1/reflection/ClassDefinition/inv">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Owning ClassDefinition if Constraint corresponds to invariant&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="preOwner" eType="/1/reflection/Operation" eOpposite="/1/reflection/Operation/pre">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Owning Operation if Constraint corresponds to pre-condition&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="postOwner" eType="/1/reflection/Operation" eOpposite="/1/reflection/Operation/post">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Owning Operation if Constraint corresponds to post-condition&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Operation" abstract="true" eSuperTypes="/1/reflection/MultiplicityElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Every one knows what an operation is.&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Boolean stating whether the Operation is abstract&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="pre" ordered="false" upperBound="-1" eType="/1/reflection/Constraint" containment="true" eOpposite="/1/reflection/Constraint/preOwner">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Pre-conditions of the Operation&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="post" ordered="false" upperBound="-1" eType="/1/reflection/Constraint" containment="true" eOpposite="/1/reflection/Constraint/postOwner">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Post-conditions of the Operation&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="superOperation" eType="/1/reflection/Operation">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Super-operation of the Operation, if any&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" lowerBound="1" eType="/1/reflection/ClassDefinition" eOpposite="/1/reflection/ClassDefinition/ownedOperation">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * ClassDefinition owning the Operation&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" ordered="false" upperBound="-1" eType="/1/reflection/TypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * TypeParameters of the Operation&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="raisedException" ordered="false" upperBound="-1" eType="/1/reflection/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Exceptions raised by the Operation&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1" eType="/1/reflection/Parameter" containment="true" eOpposite="/1/reflection/Parameter/operation">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Parameters of the Operation&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Tag" abstract="true" eSuperTypes="/1/reflection/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Tag is intended to be used to add documentation on a  model element,&#xD;&#xA; * or add some textual information that cannot be expressed with any&#xD;&#xA; * model element definition.&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="object" ordered="false" lowerBound="1" upperBound="-1" eType="/1/reflection/Object" eOpposite="/1/reflection/Object/tag">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Objects to which the Tag is attached to&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Name of the Tag&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * String value of the Tag&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Property" abstract="true" eSuperTypes="/1/reflection/MultiplicityElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Class representing the property definition. Kermeta&lt;->Ecore equivalence:&#xD;&#xA; *  - Property with isComposite == true or with type is a base type (String, Integer, Boolean)  : EAttribute&#xD;&#xA; *  - Property with isComposite == false : EReference&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="/1/reflection/ClassDefinition" eOpposite="/1/reflection/ClassDefinition/ownedAttribute">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * ClassDefinition that owns the Property&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="opposite" eType="/1/reflection/Property">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Opposite Property of the Property, void if the Property has no opposite&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Boolean stating whether the Property is read-only&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="default" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * To be written #######################################&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isComposite" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Boolean stating whether the Property has a containment role&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * If True, the value of the property is not stored but computed from other properties&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isID" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Boolean stating whether the property allows to identify its containing Object&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeContainer" abstract="true" eSuperTypes="/1/reflection/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Phantom class : EMF reflexive editors need that any element of a metamodel &#xD;&#xA; * has a direct or indirect containment relationship with the root model element of&#xD;&#xA; * the metamodel. This class resolves this technical requirement.&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="containedType" ordered="false" upperBound="-1" eType="/1/reflection/Type" containment="true" eOpposite="/1/reflection/Type/typeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Contained types&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualTypeContainer" abstract="true" eSuperTypes="/1/reflection/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * To be written #################################&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="virtualType" ordered="false" upperBound="-1" eType="/1/reflection/VirtualType" containment="true" eOpposite="/1/reflection/VirtualType/modelType">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * To be written ##########################################&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="GenericTypeDefinition" abstract="true" eSuperTypes="/1/reflection/TypeDefinition">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** &#xD;&#xA; * Abstracts the definition of generic type definitions (i.e. type definitions that&#xD;&#xA; * can be parameterized), namely, for ClassDefinition and ModelTypeDefinition.&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" ordered="false" upperBound="-1" eType="/1/reflection/TypeVariable" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Type variables defined for the GenericTypeDefinition&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClassDefinition" abstract="true" eSuperTypes="/1/reflection/TypeContainer /1/reflection/GenericTypeDefinition">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The definition of a class definition :)&#xD;&#xA; *  &lt;pre>class A&#xD;&#xA; *{ &#xD;&#xA; *   attribute s : String&#xD;&#xA; *}&#xD;&#xA; *   &lt;/pre> is a class definition; in :&#xD;&#xA; * &lt;pre>&#xD;&#xA; * main() : A is do end&#xD;&#xA; * &lt;/pre>&#xD;&#xA; * A is a &lt;b>Class&lt;/b> : it corresponds to the &lt;b>use&lt;/b> of the class definition of A&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Boolean stating whether the ClassDefinition is abstract (which means that&#xD;&#xA;  * no instance can be allocated)&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" ordered="false" upperBound="-1" eType="/1/reflection/Property" containment="true" eOpposite="/1/reflection/Property/owningClass">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Attributes, References, and derived Properties owned by this ClassDefinition.&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" ordered="false" upperBound="-1" eType="/1/reflection/Operation" containment="true" eOpposite="/1/reflection/Operation/owningClass">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Operations owned by this ClassDefinition.&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="inv" ordered="false" upperBound="-1" eType="/1/reflection/Constraint" containment="true" eOpposite="/1/reflection/Constraint/invOwner">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Invariants defined for this ClassDefinition&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="superType" ordered="false" upperBound="-1" eType="/1/reflection/Class">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Classes from which this ClassDefinition inherits.&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAttribute" ordered="false" upperBound="-1" eType="/1/reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns all the Attributes, References, derived Properties of this &#xD;&#xA;  * ClassDefinition including the inherited ones&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Property>.new&#xA;&#x9;result.addAll(self.ownedAttribute)&#xA;&#x9;self.superType.each{t | do&#xA;&#x9;&#x9;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;&#x9;&#x9;cDef ?= t.typeDefinition&#xA;&#x9;&#x9;&#x9;cDef.allAttribute.each{p | result.add(p)}&#xA;&#x9;&#x9;end}&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedCompositeAttribute" ordered="false" upperBound="-1" eType="/1/reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns only the Attributes (isComposite and not isDerived) owned by&#xD;&#xA;  * the ClassDefinition&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Property>.new&#xA;&#x9;self.ownedAttribute.each{oa | if (oa.isComposite) and (not (oa.isDerived)) then&#xA;&#x9;&#x9;&#x9;result.add(oa)&#xA;&#xA;&#x9;&#x9;end}&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allCompositeAttribute" ordered="false" upperBound="-1" eType="/1/reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns only all the Attributes (isComposite and not isDerived) of&#xD;&#xA;  * this ClassDefinition including the inherited ones&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Property>.new&#xA;&#x9;self.allAttribute.each{oa | if (oa.isComposite) and (not (oa.isDerived)) then&#xA;&#x9;&#x9;&#x9;result.add(oa)&#xA;&#xA;&#x9;&#x9;end}&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttributeAsReference" ordered="false" upperBound="-1" eType="/1/reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns only the References (not isComposite and not isDerived) owned by&#xD;&#xA;  * this ClassDefinition&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Property>.new&#xA;&#x9;self.ownedAttribute.each{oa | if (not (oa.isComposite)) and (not (oa.isDerived)) then&#xA;&#x9;&#x9;&#x9;result.add(oa)&#xA;&#xA;&#x9;&#x9;end}&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAttributeAsReference" ordered="false" upperBound="-1" eType="/1/reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns only all the References (not isComposite and not isDerived) of&#xD;&#xA;  * this ClassDefinition including the inherited ones&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Property>.new&#xA;&#x9;self.allAttribute.each{oa | if (not (oa.isComposite)) and (not (oa.isDerived)) then&#xA;&#x9;&#x9;&#x9;result.add(oa)&#xA;&#xA;&#x9;&#x9;end}&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttributeAsProperty" ordered="false" upperBound="-1" eType="/1/reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns only the Properties (not isComposite and isDerived) owned by&#xD;&#xA;  * this ClassDefinition&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Property>.new&#xA;&#x9;self.ownedAttribute.each{oa | if (not (oa.isComposite)) and (oa.isDerived) then&#xA;&#x9;&#x9;&#x9;result.add(oa)&#xA;&#xA;&#x9;&#x9;end}&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAttributeAsProperty" ordered="false" upperBound="-1" eType="/1/reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns only all the Properties (not isComposite and isDerived) of&#xD;&#xA;  * this ClassDefinition including the inherited ones&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Property>.new&#xA;&#x9;self.allAttribute.each{oa | if (not (oa.isComposite)) and (oa.isDerived) then&#xA;&#x9;&#x9;&#x9;result.add(oa)&#xA;&#xA;&#x9;&#x9;end}&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allOperation" ordered="false" upperBound="-1" eType="/1/reflection/Operation" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Returns all the Operations of this ClassDefinition&#xD;&#xA;  * including the inherited ones&#xD;&#xA;  */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Operation>.new&#xA;&#x9;result.addAll(self.ownedOperation)&#xA;&#x9;self.superType.each{t | do&#xA;&#x9;&#x9;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;&#x9;&#x9;cDef ?= t.typeDefinition&#xA;&#x9;&#x9;&#x9;cDef.allOperation.each{p | result.add(p)}&#xA;&#x9;&#x9;end}&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="/1/reflection/TypeContainer /1/reflection/NamedElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Abstraction of the notion of typed element : each element &#xD;&#xA; * that is typed inherits this class.&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="/1/reflection/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;     * Type of the model element&#xD;&#xA;     */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeVariable" abstract="true" eSuperTypes="/1/reflection/TypeContainer /1/reflection/Type /1/reflection/NamedElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Definition of a type variable for generic types :  &#xD;&#xA; * in class definition &lt;pre>class AClass&lt;X,Y> {}&lt;/pre>, X and Y are type variables.&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="supertype" eType="/1/reflection/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Reference to the supertype, if any&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ObjectTypeVariable" abstract="true" eSuperTypes="/1/reflection/TypeContainer /1/reflection/TypeVariable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * To be written ######################################&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualType" abstract="true" eSuperTypes="/1/reflection/ObjectTypeVariable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * To be written ######################################&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="classDefinition" lowerBound="1" eType="/1/reflection/ClassDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * To be written ######################################&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="modelType" lowerBound="1" eType="/1/reflection/VirtualTypeContainer" eOpposite="/1/reflection/VirtualTypeContainer/virtualType">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * To be written ######################################&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding" upperBound="-1" eType="/1/reflection/TypeVariableBinding">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * To be written ######################################&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ModelTypeVariable" abstract="true" eSuperTypes="/1/reflection/TypeVariable /1/reflection/VirtualTypeContainer">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * To be written ######################################&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ProductType" abstract="true" eSuperTypes="/1/reflection/TypeContainer /1/reflection/Type">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Type corresponding to a set of Types&#xD;&#xA; * Only used in the context of FunctionType&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1" upperBound="-1" eType="/1/reflection/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Types &#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FunctionType" abstract="true" eSuperTypes="/1/reflection/TypeContainer /1/reflection/Type">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Type used to define the use of lambda expressions.&#xD;&#xA; *  Uses :&#xD;&#xA; *  &lt;pre>operation forAll(func : &lt;G -> Boolean>) : Boolean is do&#xD;&#xA; *      var test : Boolean init true&#xD;&#xA; *      from var it : Iterator&lt;G> init iterator&#xD;&#xA; *      until it.isOff&#xD;&#xA; *      loop&#xD;&#xA; *         test := test and func(it.next)&#xD;&#xA; *      end&#xD;&#xA; *      result := test&#xD;&#xA; *  end&#xD;&#xA; *  &lt;/pre>&#xD;&#xA; *&#xD;&#xA; *  In the above example, &amp;lt;G -> Boolean&amp;gt; is a function type f(G) -&amp;gt; &#xD;&#xA; *  Boolean, with a parameter of type G and a return type of type Boolean&#xD;&#xA; *  The operation &lt;code>forAll&lt;/code> takes a lambda expression as parameter.&#xD;&#xA; */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.inv">
          <details key="resultType" value="not (right.isKindOf(kermeta::reflection::ProductType))"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="left" lowerBound="1" eType="/1/reflection/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Parameters of the function (a ProductType for multiple parameters)&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="right" eType="/1/reflection/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Result type of the function&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true" eSuperTypes="/1/reflection/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Base class definition for the &lt;b>use&lt;/b> of a type.&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="isInstance" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns a boolean stating if &lt;code>element&lt;/code> is an instance of the type&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/reflection/Object"/>
        </eOperations>
        <eOperations name="hasSubType" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns a boolean stating if the type is inherited by sub types&#xD;&#xA;  */"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/reflection/Type"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="typeContainer" eType="/1/reflection/TypeContainer" eOpposite="/1/reflection/TypeContainer/containedType">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Owning TypeContainer, if any&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeVariableBinding" abstract="true" eSuperTypes="/1/reflection/TypeContainer /1/reflection/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Definition of a binding between a TypeVariable and a Type&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="variable" lowerBound="1" eType="/1/reflection/TypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * TypeVariable&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="/1/reflection/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Assigned Type&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" abstract="true" eSuperTypes="/1/reflection/TypeContainer /1/reflection/DataType">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The class definition for kermeta aliases. Above statement defines a primitive&#xD;&#xA; * type called MyString, which instanceType is &lt;code>kermeta::standard::String&lt;/code>&#xD;&#xA; * &lt;pre>alias MyString : kermeta::standard::String&lt;/pre>&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="instanceType" eType="/1/reflection/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * The type the primitive type is linked with&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true" eSuperTypes="/1/reflection/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Any element that contain a  name (example : Operation, Property) inherit this&#xD;&#xA; * class.&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="qualifiedName" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var elem : kermeta::reflection::NamedElement init self&#xA;&#x9;result := self.name&#xA;&#x9;from elem ?= elem.container&#xA;&#x9;until elem.equals(void)&#xA;&#x9;loop&#xA;&#x9;&#x9;result := elem.name.plus(&quot;::&quot;).plus(result)&#xA;&#x9;&#x9;elem ?= elem.container&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Returns the qualified name of this named element. Qualified name is &#xD;&#xA;  * the list of the names of the packages hierarchically ordered, delimited by&#xD;&#xA;  * a &quot;::&quot;, followed by the name of this named element.&#xD;&#xA;  */"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;     * Name of this named element&#xD;&#xA;     */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SelfType" abstract="true" eSuperTypes="/1/reflection/Type">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Self type : DEPRECATED&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeDefinitionContainer" abstract="true" eSuperTypes="/1/reflection/NamedElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** &#xD;&#xA; * Abstraction of the notion of containment for type definitions. Now, kermeta metamodel contains one container&#xD;&#xA; * element, that is Package. In a later release, ModelTypeDefinition will be the main container for type and&#xD;&#xA; * package definition.&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTypeDefinition" ordered="false" upperBound="-1" eType="/1/reflection/TypeDefinition" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Contained TypeDefinitions&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Package" abstract="true" eSuperTypes="/1/reflection/TypeDefinitionContainer">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Package in kermeta. Each kermeta model must have a root package. &#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="nestedPackage" ordered="false" upperBound="-1" eType="/1/reflection/Package" containment="true" eOpposite="/1/reflection/Package/nestingPackage">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Nested Packages contained by the Package&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="nestingPackage" eType="/1/reflection/Package" eOpposite="/1/reflection/Package/nestedPackage">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Owning Package, if any&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * Uri of the Package&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ModelingUnit" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The modeling unit is the root of any kermeta model. It contains packages, requires and usings.&#xD;&#xA; * It also reference others modeling unit.&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="packages" ordered="false" upperBound="-1" eType="/1/reflection/Package" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * root packages contained by this ModelingUnit&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="requires" ordered="false" upperBound="-1" eType="/1/reflection/Require" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Set of &quot;require&quot; statements associated with this ModelingUnit. Ie. list of the other&#xD;&#xA;  * files required to run this unit&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="usings" ordered="false" upperBound="-1" eType="/1/reflection/Using" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Set of &quot;using&quot; statement associated with this ModelingUnit. Ie. list of &quot;syntatic shortcut&quot;&#xD;&#xA;  * that can be used within this unit.&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencedModelingUnits" ordered="false" upperBound="-1" eType="/1/reflection/ModelingUnit">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * To be written&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTags" ordered="false" upperBound="-1" eType="/1/reflection/Tag" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Tag directly owned by this ModelingUnit.  (typically the mainClass and mainOperation tags)&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="includeFilters" upperBound="-1" eType="/1/reflection/Filter" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * list of filters that apply to this modeling unit.&#xD;&#xA;  * This means that if the same unit was loaded without this filters, it would have loaded more content&#xD;&#xA;  * only element whose qualified name begins with one of these filter will be loaded in the unit&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="excludeFilters" upperBound="-1" eType="/1/reflection/Filter" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * list of filters that apply to this modeling unit.&#xD;&#xA;  * This means that if the same unit was loaded without this filters, it would have loaded more content&#xD;&#xA;  * element whose qualified name begins with one of these filter will NOT be loaded in the unit&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Filter" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Filter is the class that represent a filter on a ModelingUnit.&#xD;&#xA; * the qualifiedName represent the beginning of the matched names&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Require" abstract="true" eSuperTypes="/1/reflection/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * To be written&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * To be written&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Using" abstract="true" eSuperTypes="/1/reflection/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * To be written&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="/1/reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * To be written&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeDefinition" abstract="true" eSuperTypes="/1/reflection/NamedElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Abstraction for type definitions (ClassDefinition, ModelTypeDefinition, DataType inherit&#xD;&#xA; * this class)&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAspect" eType="/1/reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;  * This boolean allows to tell if this Type definition is an aspect or not&#xD;&#xA;  * If it is an aspect, then at runtime, its definition will be merged with the definition of another&#xD;&#xA;  * TypeDefinition that has exactly the same qualified name&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="baseAspects" upperBound="-1" eType="/1/reflection/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * References to the base classes&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VoidType" abstract="true" eSuperTypes="/1/reflection/Type">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Class definition for the &lt;pre>Void&lt;/pre> type&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DataType" abstract="true" eSuperTypes="/1/reflection/TypeDefinition /1/reflection/Type">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Special type definition for Enumeration, PrimitiveType&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Enumeration" abstract="true" eSuperTypes="/1/reflection/DataType">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Definition for Enumeration&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" ordered="false" upperBound="-1" eType="/1/reflection/EnumerationLiteral" containment="true" eOpposite="/1/reflection/EnumerationLiteral/enumeration">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Owned items in an Enumeration&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" abstract="true" eSuperTypes="/1/reflection/NamedElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Item definition for enumeration&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" lowerBound="1" eType="/1/reflection/Enumeration" eOpposite="/1/reflection/Enumeration/ownedLiteral">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Owning Enumeration&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Parameter" abstract="true" eSuperTypes="/1/reflection/MultiplicityElement">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Definition for operation parameter&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="operation" eType="/1/reflection/Operation" eOpposite="/1/reflection/Operation/ownedParameter">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;  * Owning operation&#xD;&#xA;  */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EAnnotation source="dependentResource">
    <references href="../standard/collections.ecore#/0"/>
    <references href="../standard/collections.ecore#/1"/>
    <references href="../standard/primitive_types.ecore#/0"/>
    <references href="../standard/primitive_types.ecore#/1"/>
    <references href="../Standard.ecore#/0"/>
    <references href="../Standard.ecore#/1"/>
    <references href="../language/behavior.ecore#/0"/>
    <references href="../language/behavior.ecore#/1"/>
    <references href="../language/structure.ecore#/0"/>
    <references href="../language/structure.ecore#/1"/>
    <references href="../persistence/resource.ecore#/0"/>
    <references href="../persistence/resource.ecore#/1"/>
    <references href="../language/reflective_collections.ecore#/0"/>
    <references href="../language/reflective_collections.ecore#/1"/>
    <references href="../kunit/kunit.ecore#/0"/>
    <references href="../kunit/kunit.ecore#/1"/>
    <references href="../kunit/assert.ecore#/0"/>
    <references href="../kunit/assert.ecore#/1"/>
    <references href="../utils/hashtable.ecore#/0"/>
    <references href="../utils/hashtable.ecore#/1"/>
    <references href="../utils/stack.ecore#/0"/>
    <references href="../utils/stack.ecore#/1"/>
    <references href="../utils/stack.ecore#/2"/>
    <references href="../io/std_io.ecore#/0"/>
    <references href="../io/std_io.ecore#/1"/>
    <references href="../io/file_io.ecore#/0"/>
    <references href="../io/file_io.ecore#/1"/>
    <references href="../exceptions/exceptions.ecore#/0"/>
    <references href="../exceptions/exceptions.ecore#/1"/>
    <references href="../language/dynamic_expression.ecore#/0"/>
    <references href="../language/dynamic_expression.ecore#/1"/>
    <references href="../standard/java.ecore#/0"/>
    <references href="../standard/java.ecore#/1"/>
    <references href="../standard/java.ecore#/2"/>
    <references href="../ecore/ecore_compatibility.ecore#/0"/>
    <references href="../ecore/ecore_compatibility.ecore#/1"/>
    <references href="../utils/StringBuffer.ecore#/0"/>
    <references href="../utils/StringBuffer.ecore#/1"/>
  </ecore:EAnnotation>
</xmi:XMI>
