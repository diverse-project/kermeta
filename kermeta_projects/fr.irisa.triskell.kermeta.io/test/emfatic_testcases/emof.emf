@namespace(uri="emof", prefix="http://schema.omg.org/spec/mof/2.0/emof.xmi")
package emof;

class Class extends Type {
  val Property[*]#owningClass ownedAttribute;
  val Operation[*]#owningClass ownedOperation;
  ref Class[*] superClass;
  attr Boolean isAbstract = "false";
}

abstract class DataType extends Type {
}

class Enumeration extends DataType {
  val EnumerationLiteral[*]#enumeration ownedLiteral;
}

class EnumerationLiteral extends NamedElement {
  transient ref Enumeration#ownedLiteral enumeration;
}

abstract class NamedElement extends Object {
  attr String name;
}

class Operation extends MultiplicityElement {
  ref Type[*] raisedException;
  val Parameter[*]#operation ownedParameter;
  transient ref Class#ownedOperation owningClass;
}

class Package extends NamedElement {
  val Package[*]#nestingPackage nestedPackage;
  transient ref Package#nestedPackage nestingPackage;
  val Type[*] ownedType;
  attr String uri;
}

class Parameter extends MultiplicityElement {
  transient ref Operation#ownedParameter operation;
}

class PrimitiveType extends DataType {
}

abstract class TypedElement extends NamedElement {
  ref Type type;
}

class Property extends MultiplicityElement {
  ref Property opposite;
  transient ref Class#ownedAttribute owningClass;
  attr Boolean isReadOnly = "false";
  attr String default;
  attr Boolean isComposite = "false";
  attr Boolean isDerived = "false";
  attr Boolean isID;
}

abstract class MultiplicityElement extends TypedElement {
  attr Boolean isOrdered = "false";
  attr Boolean isUnique = "true";
  attr Integer lower;
  attr UnlimitedNatural upper;
}

class Object extends Element {
  op Class getMetaClass();
  op Object container();
  op Boolean equals(Element element);
  op Element get(Property property);
  op void set(Property property, Element element);
  op Boolean isSet(Property property);
  op void unset(Property property);
}

class Element {
}

datatype Integer : Object;

datatype Boolean : Object;

datatype String : Object;

datatype UnlimitedNatural : Object;

class Factory extends Object {
  op Element createFromString(DataType dataType, String string);
  op String convertToString(DataType dataType, Element element);
  op Object create(Class metaClass);
  ref Package[1] ~package;
}

class Extent extends Element {
  op Boolean useContainment();
  op ReflectiveSequence objects();
}

class URIExtent extends Extent {
  op String contextURI();
  op String uri(Object object);
  op Object object(String uri);
}

abstract class Type extends NamedElement {
  op Boolean isInstance(Element element);
}

class Tag extends Object {
  ref Element[*] element;
  attr String name;
  attr String value;
}

class ReflectiveSequence extends ReflectiveCollection {
  op void addAt(Integer index, Element element);
  op Element get(Integer index);
  op Element removeAt(Integer index);
  op Element set(Integer index, Element element);
}

class ReflectiveCollection extends Element {
  op Boolean add(Element element);
  op Boolean addAll(ReflectiveSequence elements);
  op void clear();
  op Boolean remove(Element element);
  op Integer size();
}

