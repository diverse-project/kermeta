package org.kermeta.compil.runtime.helper.basetypes;

import java.lang.reflect.Field;
import java.util.HashMap;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.kermeta.kruntimeconfiguration.Configuration;
import org.kermeta.kruntimeconfiguration.Entry;
import org.kermeta.kruntimeconfiguration.KruntimeconfigurationPackage;


final public class PersistenceMapping {

	/**		The constant name for managing a base class.		*/
	private static final String _BASE_CLASS_NAME_ = "baseClassName";

	/**		The constant name for managing a generated class.		*/
	private static final String _GENERATED_CLASS_NAME_ = "generatedClassName";
	
	/**		The constant name for managing an uri.		*/
	private static final String _URI_ = "uri";
	
	/**		The constant name for managing the file extension.		*/
	private static final String _FILE_EXTENSION_ = "fileExtension";
	
	/**		The constant name for managing the factory.		*/
	private static final String _FACTORY_CLASS_NAME = "factoryClassName";
	
	/**
	 * Initialize the mapping used during the kermeta's process loading and saving.
	 * @param configuration
	 */
	static public void initialize(Configuration configuration) {
		String baseClassName = null;
		String generatedClassName = null;
		String uri = null;
		String fileExtension = null;
		String factoryClassName = null;
		for ( Entry e : configuration.getEntries() ) {
			if ( e.getKey().equals(_BASE_CLASS_NAME_) )
				baseClassName = e.getValue();
			else if ( e.getKey().equals(_GENERATED_CLASS_NAME_) )
				generatedClassName = e.getValue();
			else if ( e.getKey().equals(_URI_) )
				uri = e.getValue();
			else if ( e.getKey().equals(_FILE_EXTENSION_) )
				fileExtension = e.getValue();
			else if ( e.getKey().equals(_FACTORY_CLASS_NAME) )
				factoryClassName = e.getValue();
		}
		process(baseClassName, generatedClassName, uri, fileExtension, factoryClassName);
	}
	
	/**
	 * Initialize the mapping used during the kermeta's process loading and saving. 
	 * @param modelURI
	 */
	static public void initialize(String modelURI) {
		ResourceSet rs = new ResourceSetImpl();
		rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put("kruntimeconfiguration", new XMIResourceFactoryImpl());
		EPackage.Registry.INSTANCE.put( KruntimeconfigurationPackage.eNS_URI, KruntimeconfigurationPackage.eINSTANCE );
		Resource resource = rs.getResource( URI.createURI(modelURI), true);
		Configuration configuration = (Configuration) resource.getContents().get(0);
		initialize(configuration);
	}
	
	/**
	 * Add a mapping for the given metamodel uri between the real metamodel and the kermeta's generated one.
	 * The baseClassName and generatedClassName MUST be different.
	 * @param baseClassName The class' qualified name generated by EMF.
	 * @param generatedClassName The class' qualified name generated by Kermeta.
	 * @param uri The uri of the metamodel.
	 */
	static private void process(String baseClassName, String generatedClassName, String uri, String fileExtension, String factoryClassName) {
		assert( ! baseClassName.equals(generatedClassName) );
		try {
			// Getting in a reflexive way the java classes.
			Class<?> baseClass = PersistenceMapping.class.getClassLoader().loadClass(baseClassName);
			Class<?> generatedClass = PersistenceMapping.class.getClassLoader().loadClass(generatedClassName);
			Class<?> factoryClass = null;
			if ( factoryClassName != null )
				factoryClass = PersistenceMapping.class.getClassLoader().loadClass(factoryClassName);
			
			// Getting the value of the fiel eINSTANCE.
			Field field = baseClass.getField("eINSTANCE");
			EPackage basePackage = (EPackage) field.get(null);

			// Getting the value of the fiel eINSTANCE.
			field = generatedClass.getField("eINSTANCE");
			EPackage generatedPackage = (EPackage) field.get(null);
							
			// Register the extension with the default package.
			if ( fileExtension != null )
				if ( factoryClass != null )
					Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(fileExtension, factoryClass.newInstance());
				else
					Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(fileExtension, new XMIResourceFactoryImpl());					
			else
				if ( factoryClass != null )
					Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("*", factoryClass.newInstance());
				else
					Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("*", new XMIResourceFactoryImpl());					
			
			// Do the mapping.
			_saving.put( uri, basePackage );
			_loading.put( uri, generatedPackage );

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (NoSuchFieldException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InstantiationException e) {
			e.printStackTrace();
		}
	}
	
	/**		A table to map metamodel uri's with the corresponding package to use when loading a model.		*/
	static private HashMap<String, EPackage> _loading = new HashMap<String, EPackage>();

	/**		A table to map metamodel uri's with the corresponding package to use when saving a model.		*/
	static private HashMap<String, EPackage> _saving = new HashMap<String, EPackage>();

	/**
	 * Get the package to use for loading a model conformant to the metamodel with the given uri.
	 * @param metamodelURI
	 * @return
	 */
	static public EPackage getEPackageForLoading(String metamodelURI) {
		EPackage p = _loading.get( metamodelURI );
		//EPackage.Registry.INSTANCE.put( p.getNsURI(), p );
		return p;
	}
	
	/**
	 * Get the package to use for saving a model conformant to the metamodel with the given uri.
	 * @param metamodelURI
	 * @return
	 */
	static public EPackage getEPackageForSaving(String metamodelURI) {
		EPackage p = _saving.get( metamodelURI );
		//EPackage.Registry.INSTANCE.put( p.getNsURI(), p );
		return p;
	}
	
}
