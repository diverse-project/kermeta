/*******************************************************************************
 * $Id: BehaviorModelerProviderAdapterFactory.java,v 1.3 2007-07-23 09:21:23 cfaucher Exp $
 * License: EPL
 * Copyright: IRISA / INRIA / Universite de Rennes 1
 ******************************************************************************/
package fr.irisa.triskell.kermeta.graphicaleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;

import fr.irisa.triskell.kermeta.language.behavior.util.BehaviorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class BehaviorModelerProviderAdapterFactory extends
		BehaviorAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.Assignment} instances.
	 * 
	 * @generated
	 */
	private AssignmentModelerProvider assignmentModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.Expression} instances.
	 * 
	 * @generated
	 */
	private ExpressionModelerProvider expressionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.CallExpression} instances.
	 * 
	 * @generated
	 */
	private CallExpressionModelerProvider callexpressionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.Block} instances.
	 * 
	 * @generated
	 */
	private BlockModelerProvider blockModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.CallVariable} instances.
	 * 
	 * @generated
	 */
	private CallVariableModelerProvider callvariableModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.CallFeature} instances.
	 * 
	 * @generated
	 */
	private CallFeatureModelerProvider callfeatureModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.CallSuperOperation} instances.
	 * 
	 * @generated
	 */
	private CallSuperOperationModelerProvider callsuperoperationModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.CallResult} instances.
	 * 
	 * @generated
	 */
	private CallResultModelerProvider callresultModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.CallValue} instances.
	 * 
	 * @generated
	 */
	private CallValueModelerProvider callvalueModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.Conditional} instances.
	 * 
	 * @generated
	 */
	private ConditionalModelerProvider conditionalModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.Raise} instances.
	 * 
	 * @generated
	 */
	private RaiseModelerProvider raiseModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.Rescue} instances.
	 * 
	 * @generated
	 */
	private RescueModelerProvider rescueModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.TypeReference} instances.
	 * 
	 * @generated
	 */
	private TypeReferenceModelerProvider typereferenceModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.Literal} instances.
	 * 
	 * @generated
	 */
	private LiteralModelerProvider literalModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.EmptyExpression} instances.
	 * 
	 * @generated
	 */
	private EmptyExpressionModelerProvider emptyexpressionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.JavaStaticCall} instances.
	 * 
	 * @generated
	 */
	private JavaStaticCallModelerProvider javastaticcallModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.LambdaExpression} instances.
	 * 
	 * @generated
	 */
	private LambdaExpressionModelerProvider lambdaexpressionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.LambdaParameter} instances.
	 * 
	 * @generated
	 */
	private LambdaParameterModelerProvider lambdaparameterModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.IntegerLiteral} instances.
	 * 
	 * @generated
	 */
	private IntegerLiteralModelerProvider integerliteralModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.StringLiteral} instances.
	 * 
	 * @generated
	 */
	private StringLiteralModelerProvider stringliteralModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.BooleanLiteral} instances.
	 * 
	 * @generated
	 */
	private BooleanLiteralModelerProvider booleanliteralModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.TypeLiteral} instances.
	 * 
	 * @generated
	 */
	private TypeLiteralModelerProvider typeliteralModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.VoidLiteral} instances.
	 * 
	 * @generated
	 */
	private VoidLiteralModelerProvider voidliteralModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.Loop} instances.
	 * 
	 * @generated
	 */
	private LoopModelerProvider loopModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.SelfExpression} instances.
	 * 
	 * @generated
	 */
	private SelfExpressionModelerProvider selfexpressionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.behavior.VariableDecl} instances.
	 * 
	 * @generated
	 */
	private VariableDeclModelerProvider variabledeclModelerProvider;

	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public BehaviorModelerProviderAdapterFactory() {
		supportedTypes.add(ILabelFeatureProvider.class);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.Assignment}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAssignmentAdapter() {
		if (assignmentModelerProvider == null) {
			assignmentModelerProvider = new AssignmentModelerProvider(this);
		}

		return assignmentModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.Expression}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createExpressionAdapter() {
		if (expressionModelerProvider == null) {
			expressionModelerProvider = new ExpressionModelerProvider(this);
		}

		return expressionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.CallExpression}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallExpressionAdapter() {
		if (callexpressionModelerProvider == null) {
			callexpressionModelerProvider = new CallExpressionModelerProvider(
					this);
		}

		return callexpressionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.Block}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBlockAdapter() {
		if (blockModelerProvider == null) {
			blockModelerProvider = new BlockModelerProvider(this);
		}

		return blockModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.CallVariable}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallVariableAdapter() {
		if (callvariableModelerProvider == null) {
			callvariableModelerProvider = new CallVariableModelerProvider(this);
		}

		return callvariableModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.CallFeature}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallFeatureAdapter() {
		if (callfeatureModelerProvider == null) {
			callfeatureModelerProvider = new CallFeatureModelerProvider(this);
		}

		return callfeatureModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.CallSuperOperation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallSuperOperationAdapter() {
		if (callsuperoperationModelerProvider == null) {
			callsuperoperationModelerProvider = new CallSuperOperationModelerProvider(
					this);
		}

		return callsuperoperationModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.CallResult}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallResultAdapter() {
		if (callresultModelerProvider == null) {
			callresultModelerProvider = new CallResultModelerProvider(this);
		}

		return callresultModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.CallValue}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallValueAdapter() {
		if (callvalueModelerProvider == null) {
			callvalueModelerProvider = new CallValueModelerProvider(this);
		}

		return callvalueModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.Conditional}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createConditionalAdapter() {
		if (conditionalModelerProvider == null) {
			conditionalModelerProvider = new ConditionalModelerProvider(this);
		}

		return conditionalModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.Raise}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRaiseAdapter() {
		if (raiseModelerProvider == null) {
			raiseModelerProvider = new RaiseModelerProvider(this);
		}

		return raiseModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.Rescue}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRescueAdapter() {
		if (rescueModelerProvider == null) {
			rescueModelerProvider = new RescueModelerProvider(this);
		}

		return rescueModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.TypeReference}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTypeReferenceAdapter() {
		if (typereferenceModelerProvider == null) {
			typereferenceModelerProvider = new TypeReferenceModelerProvider(
					this);
		}

		return typereferenceModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.Literal}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLiteralAdapter() {
		if (literalModelerProvider == null) {
			literalModelerProvider = new LiteralModelerProvider(this);
		}

		return literalModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.EmptyExpression}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEmptyExpressionAdapter() {
		if (emptyexpressionModelerProvider == null) {
			emptyexpressionModelerProvider = new EmptyExpressionModelerProvider(
					this);
		}

		return emptyexpressionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.JavaStaticCall}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createJavaStaticCallAdapter() {
		if (javastaticcallModelerProvider == null) {
			javastaticcallModelerProvider = new JavaStaticCallModelerProvider(
					this);
		}

		return javastaticcallModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.LambdaExpression}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLambdaExpressionAdapter() {
		if (lambdaexpressionModelerProvider == null) {
			lambdaexpressionModelerProvider = new LambdaExpressionModelerProvider(
					this);
		}

		return lambdaexpressionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.LambdaParameter}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLambdaParameterAdapter() {
		if (lambdaparameterModelerProvider == null) {
			lambdaparameterModelerProvider = new LambdaParameterModelerProvider(
					this);
		}

		return lambdaparameterModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.IntegerLiteral}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createIntegerLiteralAdapter() {
		if (integerliteralModelerProvider == null) {
			integerliteralModelerProvider = new IntegerLiteralModelerProvider(
					this);
		}

		return integerliteralModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.StringLiteral}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStringLiteralAdapter() {
		if (stringliteralModelerProvider == null) {
			stringliteralModelerProvider = new StringLiteralModelerProvider(
					this);
		}

		return stringliteralModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.BooleanLiteral}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBooleanLiteralAdapter() {
		if (booleanliteralModelerProvider == null) {
			booleanliteralModelerProvider = new BooleanLiteralModelerProvider(
					this);
		}

		return booleanliteralModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.TypeLiteral}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTypeLiteralAdapter() {
		if (typeliteralModelerProvider == null) {
			typeliteralModelerProvider = new TypeLiteralModelerProvider(this);
		}

		return typeliteralModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.VoidLiteral}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createVoidLiteralAdapter() {
		if (voidliteralModelerProvider == null) {
			voidliteralModelerProvider = new VoidLiteralModelerProvider(this);
		}

		return voidliteralModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.Loop}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLoopAdapter() {
		if (loopModelerProvider == null) {
			loopModelerProvider = new LoopModelerProvider(this);
		}

		return loopModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.SelfExpression}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createSelfExpressionAdapter() {
		if (selfexpressionModelerProvider == null) {
			selfexpressionModelerProvider = new SelfExpressionModelerProvider(
					this);
		}

		return selfexpressionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.behavior.VariableDecl}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createVariableDeclAdapter() {
		if (variabledeclModelerProvider == null) {
			variabledeclModelerProvider = new VariableDeclModelerProvider(this);
		}

		return variabledeclModelerProvider;
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose() {
		if (assignmentModelerProvider != null) {
			assignmentModelerProvider.dispose();
		}
		if (expressionModelerProvider != null) {
			expressionModelerProvider.dispose();
		}
		if (callexpressionModelerProvider != null) {
			callexpressionModelerProvider.dispose();
		}
		if (blockModelerProvider != null) {
			blockModelerProvider.dispose();
		}
		if (callvariableModelerProvider != null) {
			callvariableModelerProvider.dispose();
		}
		if (callfeatureModelerProvider != null) {
			callfeatureModelerProvider.dispose();
		}
		if (callsuperoperationModelerProvider != null) {
			callsuperoperationModelerProvider.dispose();
		}
		if (callresultModelerProvider != null) {
			callresultModelerProvider.dispose();
		}
		if (callvalueModelerProvider != null) {
			callvalueModelerProvider.dispose();
		}
		if (conditionalModelerProvider != null) {
			conditionalModelerProvider.dispose();
		}
		if (raiseModelerProvider != null) {
			raiseModelerProvider.dispose();
		}
		if (rescueModelerProvider != null) {
			rescueModelerProvider.dispose();
		}
		if (typereferenceModelerProvider != null) {
			typereferenceModelerProvider.dispose();
		}
		if (literalModelerProvider != null) {
			literalModelerProvider.dispose();
		}
		if (emptyexpressionModelerProvider != null) {
			emptyexpressionModelerProvider.dispose();
		}
		if (javastaticcallModelerProvider != null) {
			javastaticcallModelerProvider.dispose();
		}
		if (lambdaexpressionModelerProvider != null) {
			lambdaexpressionModelerProvider.dispose();
		}
		if (lambdaparameterModelerProvider != null) {
			lambdaparameterModelerProvider.dispose();
		}
		if (integerliteralModelerProvider != null) {
			integerliteralModelerProvider.dispose();
		}
		if (stringliteralModelerProvider != null) {
			stringliteralModelerProvider.dispose();
		}
		if (booleanliteralModelerProvider != null) {
			booleanliteralModelerProvider.dispose();
		}
		if (typeliteralModelerProvider != null) {
			typeliteralModelerProvider.dispose();
		}
		if (voidliteralModelerProvider != null) {
			voidliteralModelerProvider.dispose();
		}
		if (loopModelerProvider != null) {
			loopModelerProvider.dispose();
		}
		if (selfexpressionModelerProvider != null) {
			selfexpressionModelerProvider.dispose();
		}
		if (variabledeclModelerProvider != null) {
			variabledeclModelerProvider.dispose();
		}
	}

}
