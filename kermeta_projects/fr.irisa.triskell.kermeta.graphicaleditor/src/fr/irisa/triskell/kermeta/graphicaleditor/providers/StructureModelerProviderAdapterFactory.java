/*******************************************************************************
 * $Id: StructureModelerProviderAdapterFactory.java,v 1.3 2007-02-06 17:45:46 cfaucher Exp $
 * License: EPL
 * Copyright: IRISA / INRIA / Universite de Rennes 1
 ******************************************************************************/
package fr.irisa.triskell.kermeta.graphicaleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.IDeletePartnerProvider;
import org.topcased.modeler.providers.ILabelFeatureProvider;

import fr.irisa.triskell.kermeta.language.structure.util.StructureAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class StructureModelerProviderAdapterFactory extends
		StructureAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Class} instances.
	 * 
	 * @generated
	 */
	private ClassModelerProvider classModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Object} instances.
	 * 
	 * @generated
	 */
	private ObjectModelerProvider objectModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Operation} instances.
	 * 
	 * @generated
	 */
	private OperationModelerProvider operationModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Property} instances.
	 * 
	 * @generated
	 */
	private PropertyModelerProvider propertyModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Type} instances.
	 * 
	 * @generated
	 */
	private TypeModelerProvider typeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.TypeContainer} instances.
	 * 
	 * @generated
	 */
	private TypeContainerModelerProvider typecontainerModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.EnumerationLiteral} instances.
	 * 
	 * @generated
	 */
	private EnumerationLiteralModelerProvider enumerationliteralModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.MultiplicityElement} instances.
	 * 
	 * @generated
	 */
	private MultiplicityElementModelerProvider multiplicityelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.DataType} instances.
	 * 
	 * @generated
	 */
	private DataTypeModelerProvider datatypeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Enumeration} instances.
	 * 
	 * @generated
	 */
	private EnumerationModelerProvider enumerationModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.NamedElement} instances.
	 * 
	 * @generated
	 */
	private NamedElementModelerProvider namedelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Package} instances.
	 * 
	 * @generated
	 */
	private PackageModelerProvider packageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Parameter} instances.
	 * 
	 * @generated
	 */
	private ParameterModelerProvider parameterModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.PrimitiveType} instances.
	 * 
	 * @generated
	 */
	private PrimitiveTypeModelerProvider primitivetypeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.TypedElement} instances.
	 * 
	 * @generated
	 */
	private TypedElementModelerProvider typedelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Tag} instances.
	 * 
	 * @generated
	 */
	private TagModelerProvider tagModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.Constraint} instances.
	 * 
	 * @generated
	 */
	private ConstraintModelerProvider constraintModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.ClassDefinition} instances.
	 * 
	 * @generated
	 */
	private ClassDefinitionModelerProvider classdefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.TypeVariable} instances.
	 * 
	 * @generated
	 */
	private TypeVariableModelerProvider typevariableModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.ProductType} instances.
	 * 
	 * @generated
	 */
	private ProductTypeModelerProvider producttypeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.FunctionType} instances.
	 * 
	 * @generated
	 */
	private FunctionTypeModelerProvider functiontypeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.TypeVariableBinding} instances.
	 * 
	 * @generated
	 */
	private TypeVariableBindingModelerProvider typevariablebindingModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.TypeDefinition} instances.
	 * 
	 * @generated
	 */
	private TypeDefinitionModelerProvider typedefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.VoidType} instances.
	 * 
	 * @generated
	 */
	private VoidTypeModelerProvider voidtypeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.ParameterizedType} instances.
	 * 
	 * @generated
	 */
	private ParameterizedTypeModelerProvider parameterizedtypeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.GenericTypeDefinition} instances.
	 * 
	 * @generated
	 */
	private GenericTypeDefinitionModelerProvider generictypedefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.ModelTypeDefinition} instances.
	 * 
	 * @generated
	 */
	private ModelTypeDefinitionModelerProvider modeltypedefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.ModelType} instances.
	 * 
	 * @generated
	 */
	private ModelTypeModelerProvider modeltypeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.triskell.kermeta.language.structure.TypeDefinitionContainer} instances.
	 * 
	 * @generated
	 */
	private TypeDefinitionContainerModelerProvider typedefinitioncontainerModelerProvider;

	/**
	 * This constructs an instance.
	 * 
	 * @generated NOT
	 */
	public StructureModelerProviderAdapterFactory() {
		supportedTypes.add(ILabelFeatureProvider.class);
        supportedTypes.add(IDeletePartnerProvider.class);
        //supportedTypes.add(IDeleteObjectProvider.class);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Class}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createClassAdapter() {
		if (classModelerProvider == null) {
			classModelerProvider = new ClassModelerProvider(this);
		}

		return classModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Object}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createObjectAdapter() {
		if (objectModelerProvider == null) {
			objectModelerProvider = new ObjectModelerProvider(this);
		}

		return objectModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Operation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOperationAdapter() {
		if (operationModelerProvider == null) {
			operationModelerProvider = new OperationModelerProvider(this);
		}

		return operationModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Property}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPropertyAdapter() {
		if (propertyModelerProvider == null) {
			propertyModelerProvider = new PropertyModelerProvider(this);
		}

		return propertyModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Type}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTypeAdapter() {
		if (typeModelerProvider == null) {
			typeModelerProvider = new TypeModelerProvider(this);
		}

		return typeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.TypeContainer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTypeContainerAdapter() {
		if (typecontainerModelerProvider == null) {
			typecontainerModelerProvider = new TypeContainerModelerProvider(
					this);
		}

		return typecontainerModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.EnumerationLiteral}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEnumerationLiteralAdapter() {
		if (enumerationliteralModelerProvider == null) {
			enumerationliteralModelerProvider = new EnumerationLiteralModelerProvider(
					this);
		}

		return enumerationliteralModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.MultiplicityElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMultiplicityElementAdapter() {
		if (multiplicityelementModelerProvider == null) {
			multiplicityelementModelerProvider = new MultiplicityElementModelerProvider(
					this);
		}

		return multiplicityelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.DataType}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataTypeAdapter() {
		if (datatypeModelerProvider == null) {
			datatypeModelerProvider = new DataTypeModelerProvider(this);
		}

		return datatypeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Enumeration}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEnumerationAdapter() {
		if (enumerationModelerProvider == null) {
			enumerationModelerProvider = new EnumerationModelerProvider(this);
		}

		return enumerationModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.NamedElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createNamedElementAdapter() {
		if (namedelementModelerProvider == null) {
			namedelementModelerProvider = new NamedElementModelerProvider(this);
		}

		return namedelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Package}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPackageAdapter() {
		if (packageModelerProvider == null) {
			packageModelerProvider = new PackageModelerProvider(this);
		}

		return packageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Parameter}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createParameterAdapter() {
		if (parameterModelerProvider == null) {
			parameterModelerProvider = new ParameterModelerProvider(this);
		}

		return parameterModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.PrimitiveType}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPrimitiveTypeAdapter() {
		if (primitivetypeModelerProvider == null) {
			primitivetypeModelerProvider = new PrimitiveTypeModelerProvider(
					this);
		}

		return primitivetypeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.TypedElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTypedElementAdapter() {
		if (typedelementModelerProvider == null) {
			typedelementModelerProvider = new TypedElementModelerProvider(this);
		}

		return typedelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Tag}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTagAdapter() {
		if (tagModelerProvider == null) {
			tagModelerProvider = new TagModelerProvider(this);
		}

		return tagModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.Constraint}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createConstraintAdapter() {
		if (constraintModelerProvider == null) {
			constraintModelerProvider = new ConstraintModelerProvider(this);
		}

		return constraintModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.ClassDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createClassDefinitionAdapter() {
		if (classdefinitionModelerProvider == null) {
			classdefinitionModelerProvider = new ClassDefinitionModelerProvider(
					this);
		}

		return classdefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.TypeVariable}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTypeVariableAdapter() {
		if (typevariableModelerProvider == null) {
			typevariableModelerProvider = new TypeVariableModelerProvider(this);
		}

		return typevariableModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.ProductType}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProductTypeAdapter() {
		if (producttypeModelerProvider == null) {
			producttypeModelerProvider = new ProductTypeModelerProvider(this);
		}

		return producttypeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.FunctionType}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFunctionTypeAdapter() {
		if (functiontypeModelerProvider == null) {
			functiontypeModelerProvider = new FunctionTypeModelerProvider(this);
		}

		return functiontypeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.TypeVariableBinding}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTypeVariableBindingAdapter() {
		if (typevariablebindingModelerProvider == null) {
			typevariablebindingModelerProvider = new TypeVariableBindingModelerProvider(
					this);
		}

		return typevariablebindingModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.TypeDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTypeDefinitionAdapter() {
		if (typedefinitionModelerProvider == null) {
			typedefinitionModelerProvider = new TypeDefinitionModelerProvider(
					this);
		}

		return typedefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.VoidType}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createVoidTypeAdapter() {
		if (voidtypeModelerProvider == null) {
			voidtypeModelerProvider = new VoidTypeModelerProvider(this);
		}

		return voidtypeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.ParameterizedType}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createParameterizedTypeAdapter() {
		if (parameterizedtypeModelerProvider == null) {
			parameterizedtypeModelerProvider = new ParameterizedTypeModelerProvider(
					this);
		}

		return parameterizedtypeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.GenericTypeDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGenericTypeDefinitionAdapter() {
		if (generictypedefinitionModelerProvider == null) {
			generictypedefinitionModelerProvider = new GenericTypeDefinitionModelerProvider(
					this);
		}

		return generictypedefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.ModelTypeDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createModelTypeDefinitionAdapter() {
		if (modeltypedefinitionModelerProvider == null) {
			modeltypedefinitionModelerProvider = new ModelTypeDefinitionModelerProvider(
					this);
		}

		return modeltypedefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.ModelType}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createModelTypeAdapter() {
		if (modeltypeModelerProvider == null) {
			modeltypeModelerProvider = new ModelTypeModelerProvider(this);
		}

		return modeltypeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link fr.irisa.triskell.kermeta.language.structure.TypeDefinitionContainer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTypeDefinitionContainerAdapter() {
		if (typedefinitioncontainerModelerProvider == null) {
			typedefinitioncontainerModelerProvider = new TypeDefinitionContainerModelerProvider(
					this);
		}

		return typedefinitioncontainerModelerProvider;
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose() {
		if (classModelerProvider != null)
			classModelerProvider.dispose();
		if (objectModelerProvider != null)
			objectModelerProvider.dispose();
		if (operationModelerProvider != null)
			operationModelerProvider.dispose();
		if (propertyModelerProvider != null)
			propertyModelerProvider.dispose();
		if (typeModelerProvider != null)
			typeModelerProvider.dispose();
		if (typecontainerModelerProvider != null)
			typecontainerModelerProvider.dispose();
		if (enumerationliteralModelerProvider != null)
			enumerationliteralModelerProvider.dispose();
		if (multiplicityelementModelerProvider != null)
			multiplicityelementModelerProvider.dispose();
		if (datatypeModelerProvider != null)
			datatypeModelerProvider.dispose();
		if (enumerationModelerProvider != null)
			enumerationModelerProvider.dispose();
		if (namedelementModelerProvider != null)
			namedelementModelerProvider.dispose();
		if (packageModelerProvider != null)
			packageModelerProvider.dispose();
		if (parameterModelerProvider != null)
			parameterModelerProvider.dispose();
		if (primitivetypeModelerProvider != null)
			primitivetypeModelerProvider.dispose();
		if (typedelementModelerProvider != null)
			typedelementModelerProvider.dispose();
		if (tagModelerProvider != null)
			tagModelerProvider.dispose();
		if (constraintModelerProvider != null)
			constraintModelerProvider.dispose();
		if (classdefinitionModelerProvider != null)
			classdefinitionModelerProvider.dispose();
		if (typevariableModelerProvider != null)
			typevariableModelerProvider.dispose();
		if (producttypeModelerProvider != null)
			producttypeModelerProvider.dispose();
		if (functiontypeModelerProvider != null)
			functiontypeModelerProvider.dispose();
		if (typevariablebindingModelerProvider != null)
			typevariablebindingModelerProvider.dispose();
		if (typedefinitionModelerProvider != null)
			typedefinitionModelerProvider.dispose();
		if (voidtypeModelerProvider != null)
			voidtypeModelerProvider.dispose();
		if (parameterizedtypeModelerProvider != null)
			parameterizedtypeModelerProvider.dispose();
		if (generictypedefinitionModelerProvider != null)
			generictypedefinitionModelerProvider.dispose();
		if (modeltypedefinitionModelerProvider != null)
			modeltypedefinitionModelerProvider.dispose();
		if (modeltypeModelerProvider != null)
			modeltypeModelerProvider.dispose();
		if (typedefinitioncontainerModelerProvider != null)
			typedefinitioncontainerModelerProvider.dispose();
	}

}
