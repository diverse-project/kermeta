@testOperation ""
@mainClass "testString::TestString"
@mainOperation "main_operation"

package testString;

require kermeta

// Testing the operations on a String : 
//
class TestString inherits kermeta::kunit::Assert {
 
    // Main operation that calls all the below ones
    operation main_operation() : kermeta::standard::String is do
		stdio.write("toto")
    end
    
    // throws an exception : == does not seem to work
    // error! more than failure
    operation testfailCompareTo() : Void is do
    	var comp : kermeta::standard::Integer init 0
    	comp := "String".compareTo("String")
    	stdio.writeln(comp)
    	assert(comp==0)

    	comp := "String".compareTo("Strong")
    	stdio.writeln(comp)
    	assert(comp!=0)

    	comp := "String".compareTo("Strin")
    	assert(comp!=0)
    	comp := "String".compareTo("string")
    	assert(comp!=0)
    end
    
    operation testCompareTo() : Void is do
    	var comp : kermeta::standard::Integer
    	comp := "String".compareTo("String")
    	stdio.write(comp)
    	assert(comp == 0)
    	comp := "String".compareTo("Strongl")
    	stdio.write(comp)
    	assert(comp !=0)
    end

    // Plus : "string1"+"string2"
    operation testplus() : kermeta::standard::String is do 
    	var v1 : kermeta::standard::String init "Prepend"
    	result := v1 + "_Append"
 	  	stdio.writeln(result)
    	assert(result.compareTo("Prepend_Append")==0)
    end
    
    // Plus again : 
    operation testplus_literal() : kermeta::standard::String is do
        var v1 : kermeta::standard::String init "Prependwithplus"
    	result := v1.plus("_Append")
    	stdio.writeln(result)
    	assert(result.compareTo("Prependwithplus_Append")==0)
    end

	// test the not-identity 
/*	operation  testfailop_equals() : kermeta::standard::Boolean is do 
        result := "toto".equals("titi")
       	assert(not(result))
    end
    
    // test the identity 
	operation  testop_equals() : kermeta::standard::Boolean is do 
        result := "titi".equals("titi")
        assert(result)
	end
	*/
	
	/**
	 * Appends other at the end of self
	 */
	operation testappend() : Void is do
		var str : kermeta::standard::String init "titi"
		str.append("toto")
		stdio.write(str)
		assert(str.compareTo("tititoto")==0)
	end
	
	/**
	 * returns the character at index in the String
	 */
	operation testelementAt() : Void is do
		assert("abcd".elementAt(2)=="car".elementAt(0))
	end
	
	/**
	 * returns the index within this string of the first 
	 * occurrence of the specified substring
	 */
	operation testindexOf() : Void is do
		assert("bonjour".indexOf("jou")==3)
	end
	
	
	/**
	 * returns a new string that is a substring of this string
	 */
	operation testsubString() : Void is do
		stdio.write("bonjour".substring(1, 4))
		assert("bonjour".substring(1, 4)=="onj")
	end
	
	operation testsize() : kermeta::standard::Integer is do
		assert("BlaBleBli".size == 9)
	end
	


}
