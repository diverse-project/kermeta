@testOperation "yes"
@mainClass "testBoolean::TestBoolean"
@mainOperation "testoptat"

package testBoolean;
require kermeta

// This class tests the logical operators on Booleans
// "and" is prioritary to "or"
class TestBoolean inherits kermeta::kunit::TestCase 
{

	operation testAssertTrue() is do
		
		assert(true)
		
	end

	// test true and true = true
	operation testoptat() : Void is do
		assert((true and true)==true)
	end
	
	operation testnott() : Void is do
		assert((not true)==false)
		assert((not false)==true)
	end
	

	
	// test true or true  = true
	operation testoptot() : Void is do
		assert((true or true)==true)
	end
	
	// true or false = true
	operation testoptof() : Void is do
		assert((true or false)==true)
	end
	
	// true and false = false
	operation testoptaf() : Void is do
		assert((true and false)==false)
	end
	
	// false or false
	operation testopfof() : Void is do
		assert ((false or false)==false)
	end
	
	// false or true
	operation testopfot() : Void is do 
		assert ((false or true)==true)
	end

	// test true or true and false == true or (true and false) == true
	operation testoportotaf() : Void is do
		assert((true or true and false)==false)
	end
	
	// test true or true and false == true or (true and false) == true
	operation testoptatof() : Void is do
		assert((true and true or false)==true)
	end
	
	// true and false and false
	operation testoptafaf() : Void is do
		assert((true and false and false)==false)
	end
	
	// true or false and false
	operation testoptofaf() : Void is do
		assert((true or false and false)==false)
	end
	
	// true or false and false or true or true == true
	operation testoptofafotot() : Void is do
		assert((true or false and false or true or true)==true)
	end
	
	// fiouf
	operation testoptofafototaf() : Void is do
		assert((true or false and false or true or true and false)==false)
	end
	
	// fiouf 2
	operation testoptofanf() : Void is do
		assert((true or false and not false)==true)
	end
	
	/** true implies true  = true*/
	operation testtit() : Void is do
		assert(true.implies(true) == true)
	end
	/** true implies false  = false*/
	operation testtif() : Void is do
		assert(true.implies(false) == false)
	end
	/** false implies true  = true*/
	operation testfit() : Void is do
		assert(false.implies(true) == true)
	end
	/** false implies false  = true*/
	operation testfif() : Void is do
		assert(false.implies(false) == true)
	end
	
	/** true xor true  = false*/
	operation testtxort() : Void is do
		assert(true.xor(true) == false)
	end
	/** true xor false  = true*/
	operation testtxorf() : Void is do
		assert(true.xor(false) == true)
	end
	/** false xor true  = true*/
	operation testfxort() : Void is do
		assert(false.xor(true) == true)
	end
	/** false xor false  = false*/
	operation testfxorf() : Void is do
		assert(false.xor(false) == false)
	end
	
}
