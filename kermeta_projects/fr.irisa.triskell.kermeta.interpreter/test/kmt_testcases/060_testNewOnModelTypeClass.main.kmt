/* ****************************************************************************
 * $Id: 060_testNewOnModelTypeClass.main.kmt,v 1.1 2007-01-26 15:20:07 dvojtise Exp $
 * Project : Kermeta interpreter
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * Creation date : January 2007
 * Authors : 
 *		dvojtise
 * Description : 
 *		test call of new in the context of model type
 ***************************************************************************
 */
@mainClass "testNewOnModelType::Test"
@mainOperation "test_simple"

package testNewOnModelType;

require kermeta

using kermeta::standard
using kermeta::kunit
using kermeta::exceptions

modeltype MainMT {
	class C1 {
		attribute name : String
		attribute aC2 : C2#aC1
	}
	class C2 {
		reference aC1 : C1#aC2
	}
}

modeltype MiniMT {
	class COne {
		attribute name : String
	}
}

class Test inherits kermeta::kunit::TestCase {

	operation test_simple() : Void is do
		var mainMT : MainMT init MainMT.new
		
		var miniMTTester : MiniMTTester<MainMT> init MiniMTTester<MainMT>.new
		miniMTTester.newMiniMT(mainMT)
		
		// verify that despite the operation deal with MiniMT::COne it has correctly created a MainMT::C1
		var elt : testNewOnModelType::MainMT::C1
		elt ?= mainMT.contents.one
		assert( elt.isKindOf(MainMT::C1)  )
		assert(elt.name == "hello")
		stdio.writeln(elt.toString)
	end

	
}

class MiniMTTester<MT : MiniMT> inherits kermeta::kunit::Assert {
	operation newMiniMT(mt : MT) : Void is do
		var newCOne : MT::COne
		newCOne := MT::COne.new()
		newCOne.name := "hello"
		//stdio.writeln(newCOne.toString)
		assert( newCOne.isKindOf(MT::COne) )
		mt.add(newCOne)
	end

}