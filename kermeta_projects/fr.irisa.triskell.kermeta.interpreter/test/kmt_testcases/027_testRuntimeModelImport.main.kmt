@mainClass "RuntimeModelImportTests::Main"
@mainOperation "testmain"


package RuntimeModelImportTests;


require kermeta
//require "../../../fr.irisa.triskell.kermeta/lib/kermeta_java.ecore"
using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard

class Main inherits kermeta::kunit::Test
{
    operation testmain() : Void is do 
     	var inputModel : Set<Package> init loadClassModel
     	
        

      	// do some verification in the loaded data
        
        stdio.writeln("\nBegin")

        //inputModel.each{ p | transfo.accept(p,0) }
       inputModel.each{ p | stdio.writeln(p.name ) }
       // find a package named "kmLogo"
       var kmlogopackage : Package init inputModel.detect{ p | (p.name.compareTo("kmLogo") == 0) }
       assert( kmlogopackage.name.compareTo("kmLogo") == 0)
       // find a package named "actions"       
       var actionpackage : Package 
       actionpackage ?= kmlogopackage.nestedPackage.detect{ p | (p.name.compareTo("actions") == 0) }       
       assert( actionpackage.name.compareTo("actions") == 0)
       // find a class named "Interpreter"
       var classTypeDef : TypeDefinition 
	   classTypeDef ?= actionpackage.ownedTypeDefinition.detect{ c | (c.name.compareTo("Interpreter") == 0) }
       var classClassTypeDef : ClassDefinition 
       classClassTypeDef ?= classTypeDef
       assert (classClassTypeDef.name.compareTo("Interpreter") == 0  )       
       // its parent must be "AbstractVisitor"
       var superClassType : Class 
       superClassType ?= classClassTypeDef.superType.one
       assert(superClassType.typeDefinition.name.compareTo("AbstractVisitor") == 0)
       
       // one of its feature must be "accumulator" of type "Integer"
       var accFProp : Property 
       accFProp ?= classClassTypeDef.ownedAttribute.detect{ k | k.name.compareTo("accumulator") == 0 }
       var propClassType : Class
       propClassType ?= accFProp.type
       assert(propClassType.typeDefinition.name.compareTo("Integer") == 0)
       stdio.write(propClassType.typeDefinition.toString)
       stdio.write("\nEnd")       
        
       
     
    end
    
    operation loadClassModel() : Set<Package> is do             
   		var repository : kermeta::persistence::EMFRepository init kermeta::persistence::EMFRepository.new 
   		            
   		var resource2 : kermeta::persistence::Resource init repository.createResource("../test/kmt_testcases/input_test_models/kmLogo.km", "../../fr.irisa.triskell.kermeta/lib/kermeta_java.ecore")     
   		
 	   resource2.load() 
 	   result :=  Set<Package>.new
       from var it : Iterator<kermeta::standard::Object> init resource2.instances.iterator
       until it.isOff
       loop
           var next : kermeta::standard::Object init it.next
           if (Package.isInstance(next)) then 
           		var aPackage : Package 
           		aPackage ?= next
           		result.add(aPackage)
           end
       end
       
   end
    
}