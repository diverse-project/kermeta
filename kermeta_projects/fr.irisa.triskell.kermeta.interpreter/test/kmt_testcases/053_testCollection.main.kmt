@testOperation "yes"
@mainClass "root::TestCollection"
@mainOperation "main"

package root;
require kermeta

using kermeta::standard

/*****************************************************************************
 * $Id: 031_testVariable.main.kmt,v 1.4 2005/05/13 16:41:13 ffleurey Exp $
 * Project : Kermeta (First iteration)
 * Creation date :  
 * File : testBooleanResults.kmt
 * 		
 * License : GPL
 * Copyright : IRISA / Universite de Rennes 1
 * Creation date : Mar 14, 2005
 * Author : François Tanguy
 * Description : test comparing operations, for string, integer(, real)
 * Note : compareTo returns an Integer not a boolean.
 ***************************************************************************
 */

class NonPrimitiveType {}

class TestCollection inherits kermeta::kunit::Test {

	operation main() : Void is do
	end

	
	
	operation testRemoveOnPrimitiveType() : Boolean is do
		var s : Set<Integer> init Set<Integer>.new
		s.add(1) s.add(2) s.add(3) s.add(4) s.add(5) s.add(6) s.add(7) s.add(8)
		s.remove(6)
		assert (s.size() == 7)
		result := (s.size() == 7)
	end
	
	
	
	operation testRemoveOnNonPrimitiveType() : Boolean is do
		var s : Set<NonPrimitiveType> init Set<NonPrimitiveType>.new
	
		var o1 : NonPrimitiveType init NonPrimitiveType.new
		var o2 : NonPrimitiveType init NonPrimitiveType.new
		var o3 : NonPrimitiveType init NonPrimitiveType.new
		var o4 : NonPrimitiveType init NonPrimitiveType.new
		var o5 : NonPrimitiveType init NonPrimitiveType.new
		var o6 : NonPrimitiveType init NonPrimitiveType.new 
		s.add(o1) s.add(o2) s.add(o3) s.add(o4) s.add(o5) s.add(o6)
				
		var o7 : NonPrimitiveType
		o7 := o4
		s.remove(o7)
		assert(	s.size() == 5	)
		result := (s.size() == 5)
	end

	operation testContainsOnPrimitiveType() : Boolean is do
		var s : Set<Integer> init Set<Integer>.new
		s.add(1) s.add(2) s.add(3) s.add(4) s.add(5) s.add(6) s.add(7) s.add(8)
		assert (s.contains(8) and s.contains(1) and s.contains(3))
		result := (s.contains(8) and s.contains(1) and s.contains(3))
	end
	
	
	
	operation testContainsOnNonPrimitiveType() : Boolean is do
		var s : Set<NonPrimitiveType> init Set<NonPrimitiveType>.new
	
		var o1 : NonPrimitiveType init NonPrimitiveType.new
		var o2 : NonPrimitiveType init NonPrimitiveType.new
		var o3 : NonPrimitiveType init NonPrimitiveType.new
		var o4 : NonPrimitiveType init NonPrimitiveType.new
		var o5 : NonPrimitiveType init NonPrimitiveType.new
		var o6 : NonPrimitiveType init NonPrimitiveType.new 
		s.add(o1) s.add(o2) s.add(o3) s.add(o4) s.add(o5) s.add(o6)
		assert( s.contains(o1) and s.contains(o6) and s.contains(o2)	)
		result := ( s.contains(o1) and s.contains(o6) and s.contains(o2)	)
	end

}