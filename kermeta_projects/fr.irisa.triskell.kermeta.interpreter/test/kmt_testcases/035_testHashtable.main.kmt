/*****************************************************************************
 * $Id: 035_testHashtable.main.kmt,v 1.8 2005-11-08 15:56:36 dvojtise Exp $
 * Project : Kermeta (First iteration)
 * Creation date :  
 * File : testHashtable.kmt
 * 		
 * License : GPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * Creation date : Apr 18 11:13:24 2005
 * Author : zdrey
 * Description : 
 *		test for Hashtable
 ***************************************************************************
 */

@testOperation "yes"
@mainClass "testHashtable::TestHashtable"
@mainOperation "setUp"

package testHashtable;

require kermeta

alias Integer : kermeta::standard::Integer;
alias String : kermeta::standard::String;


class TestHashtable inherits kermeta::kunit::Test
{
	
	attribute hashtable : kermeta::utils::Hashtable<Integer, String>
	
	// initialize things
	method setUp() : Void is do
		hashtable := kermeta::utils::Hashtable<Integer, String>.new
		hashtable.put(1,"one")
		hashtable.put(2,"two")
		hashtable.put(3,"three")
	end
	
	/**
	 * returns an iterator on the keys of the map
	 */
	operation testKeyIterator() : Void is do
		var it : kermeta::standard::Iterator<Integer>
		setUp()
		it := hashtable.keyIterator()
		stdio.writeln(it.next.toString)
		stdio.writeln(it.next.toString)
		stdio.writeln(it.next.toString)
	end

	
	/**
	 * returns an iterator on the keys of the map
	 */
	operation testValueIterator() : Void is do
		var it : kermeta::standard::Iterator<String>
		setUp()
		it := hashtable.valueIterator()
		stdio.writeln(it.next.toString)
		stdio.writeln(it.next.toString)
		stdio.writeln(it.next.toString)
	end
	
	/**
	 * returns an iterator on the keys of the map
	 */
	operation testGet() : Void is do
		setUp()
		assert(hashtable.get(1) == "one")
		assert(hashtable.get(2) == "two")
		assert(hashtable.get(3) == "three")
	end
	
	/**
	 * Adds a entry in the Hashtable
	 */
	operation testPut() : Void is do
		setUp()
		hashtable.put(1, "ONE")
		assert(hashtable.get(1) == "ONE")
		assert(hashtable.get(2) == "two")
		assert(hashtable.size == 3)
	end
	
	/**
	 * Removes the entry which key equals 'key'
	 */
	operation testRemove() : Void is do
		setUp()
		hashtable.remove(2)
		assert(hashtable.size == 2)
//		fail(hashtable.keyIterator.next == 1)
	end
	
	/**
	 * Remove all elements from the Hashtable
	 */
	operation testClear() : Void is do
		setUp()
		hashtable.clear()
		assert(hashtable.size == 0)
	end
	

}
