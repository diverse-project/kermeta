@mainClass "testLoadEcoreSplittedModel_withcyclicref::Main"
@mainOperation "testmain"

/** test that we can load file that reference themselves (Ie, split into several files
 * and without having to use the kermeta nothion of resourceset*/
package testLoadEcoreSplittedModel_withcyclicref;


require kermeta
//require "./input_test_models/ecore.kmt"
require "platform:/resource/fr.irisa.triskell.kermeta/lib/ecore.kmt"
using kermeta::persistence
using kermeta::standard
using ecore

class Main inherits kermeta::kunit::Test
{
    operation testmain() : Void is do 
        var inputModel : Set<ecore::EPackage> init loadClassModel
        

        
        stdio.write("Begin\n")
        //inputModel.each{ p | printPackageContent(p) }
        //check that we have correctly loaded each of the 3 classes
        var C1 : ecore::EClass 
 		C1 ?= inputModel.one.eClassifiers.one
        assertTrueWithMsg(C1.name.equals("C1"), "didn't find EClass named C1")
        var C2 : ecore::EClass 
		C2 ?= C1.eReferences.one.eType
		assertTrueWithMsg(C2 !=  void, "didn't find C2")
		stdio.writeln(C2.name + " " +C2.toString)
        assertTrueWithMsg(C2.name.equals("C2"), "didn't find EClass named C2")
        var C3 : ecore::EClass 
		C3 ?= C2.eReferences.one.eType
		assertTrueWithMsg(C3 !=  void, "didn't find C3")
		stdio.writeln(C3.name + " " +C3.toString)
        assertTrueWithMsg(C3.name.equals("C3"), "didn't find EClass named C3")
        
        var C1b : ecore::EClass 
		C1b ?= C3.eReferences.one.eType
		assertTrueWithMsg(C1b !=  void, "didn't find C1 after cycle")
		stdio.writeln(C1b.name + " " +C1b.toString)
        assertTrueWithMsg(C1b.name.equals("C1"), "didn't find EClass named C3")
        assertTrueWithMsg(C1 == C1b, "Retreived C1 is diferent from the original one")
      
    end
    
    operation printPackageContent(aPackage : EPackage)  is do 
    	stdio.writeln("Package " + aPackage.name)
    	aPackage.eClassifiers.each{c | stdio.writeln(  "   Class " + c.name)}         
    end
    
    operation loadClassModel() : Set<EPackage> is do             
   		var repository : EMFRepository init EMFRepository.new             
   		var resource : Resource init repository.createResource("../test/kmt_testcases/input_test_models/048_ecoremodelsplittedfiles_cyclicref1.ecore","../test/kmt_testcases/input_test_models/Ecore.ecore")
   		//var resource : Resource init repository.createResource("../kmt_testcases/input_test_models/048_ecoremodelsplittedfiles_cyclicref1.ecore","../kmt_testcases/input_test_models/Ecore.ecore")
   		resource.load()      
       
       	result := Set<EPackage>.new
       	from var it : Iterator<Object> init resource.instances.iterator
       	until it.isOff
       	loop
           var next : Object init it.next
           if (EPackage.isInstance(next)) then 
           		var aPackage : EPackage 
           		aPackage ?= next
           		//stdio.writeln(aPackage.name)
           		result.add(aPackage)
           end
       	end     
   end
    
}