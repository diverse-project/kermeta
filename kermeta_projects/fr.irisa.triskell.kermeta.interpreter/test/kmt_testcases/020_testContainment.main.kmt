@mainClass "testContainement::TestContainment"
@mainOperation "testSetOnAssign"
package testContainement;

require kermeta

// Test that the kermeta runtime handles the container of objects

class A {
	attribute lb : set B [*]
	attribute b : B
}

class B {

}

class TestContainment inherits kermeta::kunit::Test {


	operation testSetOnAssign() is do
		var a : A init A.new
		var b : B init B.new
		a.b := b
		assert(b.container == a)
	end
	
	operation testSetOnAdd() is do
		var a : A init A.new
		var b : B init B.new	
		a.lb.add(b)
		assert(b.container == a)
	end
	
	operation testUnsetSetOnAssign() is do
		var a : A init A.new
		var b : B init B.new
		// container should be initialized to void
		assert(b.container == void)
		a.b := b
		a.b := void
		assert(b.container == void)
	end
	
	operation testUnsetSetOnRemove() is do
		var a : A init A.new
		var b : B init B.new
		// container should be initialized to void
		assert(b.container == void)
		a.lb.add(b)
		a.lb.remove(b)
		assert(b.container == void)
	end
	
	operation testAssignVoidWhenNewAssign0() is do
		var a1 : A init A.new
		var b : B init B.new
		a1.b := void
		assert(b.container == void)
		assert(a1.b == void)
	end
	
	operation testAssignVoidWhenNewAssign() is do
		var a1 : A init A.new
		var a2 : A init A.new
		var b : B init B.new
		a1.b := b
		a2.b := b
		assert(b.container == a2)
		assert(a1.b == void)
	end
	
	operation testAssignVoidWhenNewAdd() is do
		var a1 : A init A.new
		var a2 : A init A.new
		var b : B init B.new
		a1.b := b
		a2.lb.add(b)
		assert(b.container == a2)
		assert(a1.b == void)
	end
	
	operation testRemoveWhenNewAdd() is do
		var a1 : A init A.new
		var a2 : A init A.new
		var b : B init B.new
		a1.lb.add(b)
		a2.lb.add(b)
		assert(b.container == a2)
		assert(a1.lb.size == 0)
	end
	
	operation testRemoveWhenNewAssign() is do
		var a1 : A init A.new
		var a2 : A init A.new
		var b : B init B.new
		a1.lb.add(b)
		a2.b := b
		assert(b.container == a2)
		assert(a1.lb.size == 0)
	end
	
	
}