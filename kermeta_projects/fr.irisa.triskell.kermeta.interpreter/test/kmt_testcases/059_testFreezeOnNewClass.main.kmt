@mainClass "testFreezeOnNewClass::Test"
@mainOperation "test_simpleClass"

package testFreezeOnNewClass;

require kermeta
require "./input_test_models/simpleMM.kmt"

using kermeta::standard
using kermeta::kunit
using simpleMM
using kermeta::exceptions

alias Boolean : kermeta::standard::Boolean;

class Test inherits kermeta::kunit::TestCase {

	operation test_simpleClass() : Void is do
		var newClass : kermeta::language::structure::Class init kermeta::language::structure::Class.new
		newClass.typeDefinition := ASimpleClass.typeDefinition

		newClass.freeze
		
		var newElt : ASimpleClass
		newElt ?= newClass.new

		assert( newElt.getMetaClass.equals(newClass) )

		newElt.name := "pouet"
		assert( newElt.name.equals("pouet") )
	end


	operation test_parametrizedClassOK() : Void is do
		var newClass : kermeta::language::structure::Class init kermeta::language::structure::Class.new

		var classDef : kermeta::language::structure::ClassDefinition
		classDef ?= AGenericClass<ClassA>.typeDefinition
		
		var newBinding : kermeta::language::structure::TypeVariableBinding init kermeta::language::structure::TypeVariableBinding.new
		newBinding.type := ClassA
		newBinding.variable := classDef.typeParameter.one

		newClass.typeDefinition := classDef
		newClass.typeParamBinding.clear
		newClass.typeParamBinding.add(newBinding)
		
		newClass.freeze

		var newElt : AGenericClass<ClassA>
		newElt ?= newClass.new
		
		assert( newElt.getMetaClass.equals(newClass) )
		
		newElt.name := "pouet"
		assert( newElt.name.equals("pouet") )
	end


	operation test_parametrizedClassFaultly() : Void is do
		var is_OK : Boolean init true
	
		var newClass : kermeta::language::structure::Class init kermeta::language::structure::Class.new

		var classDef : kermeta::language::structure::ClassDefinition
		classDef ?= AGenericClass<ClassA>.typeDefinition
		
		var newBinding1 : kermeta::language::structure::TypeVariableBinding init kermeta::language::structure::TypeVariableBinding.new
		newBinding1.type := ClassA
		newBinding1.variable := classDef.typeParameter.one
		
		var newBinding2 : kermeta::language::structure::TypeVariableBinding init kermeta::language::structure::TypeVariableBinding.new
		newBinding2.type := ClassB
		newBinding2.variable := classDef.typeParameter.one

		newClass.typeDefinition := classDef
		newClass.typeParamBinding.clear
		newClass.typeParamBinding.add(newBinding1)
		newClass.typeParamBinding.add(newBinding2)
		
		do
			newClass.freeze
			rescue(myError : ConstraintViolatedInv)
				stdio.writeln("Pouet pouet")
				is_OK := false
		end

		assert(is_OK == false)
	end
}