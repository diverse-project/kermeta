@mainClass "root::Main" 
@mainOperation "op2" 

package root;

require kermeta

using kermeta::utils
using kermeta::kunit
using kermeta::standard
using kermeta::language::structure

class Main inherits TestCase
{ 

	operation testOp1Class() : Void is
	do
		var coll : kermeta::standard::Set<kermeta::standard::Object> init kermeta::standard::Set<kermeta::standard::Object>.new
		var a1 : Class init Class.new
		coll.add(a1)
		assert(contains(coll, a1)==true)
	end
	
	operation testOp2Integer() : Void is
	do
		var coll : kermeta::standard::Set<kermeta::standard::Object> init kermeta::standard::Set<kermeta::standard::Object>.new
		var a1 : Integer init Integer.new
		a1 := 1
		coll.add(a1)
		assert(contains(coll, a1)==true)
	end
	
	operation testOp3Type() : Void is
	do
		var coll : kermeta::standard::Set<kermeta::standard::Object> init kermeta::standard::Set<kermeta::standard::Object>.new
		var a1 : Type init Type.new
		coll.add(a1)
		assert(contains(coll, a1)==true)
	end
	
	operation testOp4Hashtable() : Void is
	do
		var coll : kermeta::standard::Set<kermeta::standard::Object> init kermeta::standard::Set<kermeta::standard::Object>.new
		var a1 : Hashtable<kermeta::standard::String, Object> init Hashtable<kermeta::standard::String, Object>.new
		coll.add(a1)
		assert(contains(coll, a1)==true)
	end
	
	operation testOp5String() : Void is
	do
		var coll : kermeta::standard::Set<kermeta::standard::Object> init kermeta::standard::Set<kermeta::standard::Object>.new
		var a1 : String init String.new
		a1.append("coucou")
		coll.add(a1)
		assert(contains(coll, a1)==true)
	end
	
	
	operation contains<G>(coll : Set<G>, element : G) : Boolean is do
		result := false
		from var it : Iterator<G> init coll.iterator
		until it.isOff or result == true
		loop
			var o : G init it.next
			if o == element then 
				result := true 
			else
				stdio.writeln("loop - types are not equal : " + element.oid.toString + " <> " + o.oid.toString )
			end
		end
	end
	
	
}


class A {}