/*****************************************************************************
 * $Id: 035_testHashtableObjectKey.main.kmt,v 1.1 2007-02-23 10:01:11 dvojtise Exp $
 * Project : Kermeta (First iteration)
 * Creation date :  
 * File : testHashtable.kmt
 * 		
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * Creation date : Apr 18 11:13:24 2005
 * Author : zdrey
 * Description : 
 *		test for Hashtable
 ***************************************************************************
 */

@testOperation "yes"
@mainClass "testHashtableObjectKey::TestHashtable"
@mainOperation "mainTest"

package testHashtableObjectKey;

require kermeta

using kermeta::kunit
alias Integer : kermeta::standard::Integer;
alias String : kermeta::standard::String;

class MyKeyType
{
	attribute name : String
}

class TestHashtable inherits kermeta::kunit::TestCase
{
	
	reference hashtable : kermeta::utils::Hashtable<MyKeyType, String>
	
	attribute testKeySet : MyKeyType[0..*]
	
	/** used to manually start the test
	 */
	operation mainTest() is do
        var testRunner : TestRunner init TestRunner.new
		testRunner.run(TestHashtable)
		testRunner.printTestResult()
	end
	
	/** initialize things 
	 * automatically called by the test runner
	 */
	method setUp() : Void is do
		if(testKeySet.empty) then
			var aKey : MyKeyType  init MyKeyType.new
			aKey.name := "un"
			testKeySet.add(aKey)
			aKey := MyKeyType.new
			aKey.name := "deux"
			testKeySet.add(aKey)
			aKey := MyKeyType.new
			aKey.name := "trois"
			testKeySet.add(aKey)
		end
		hashtable := kermeta::utils::Hashtable<MyKeyType, String>.new
		testKeySet.elementAt(0)
		hashtable.put(testKeySet.elementAt(0),"one")
		hashtable.put(testKeySet.elementAt(1),"two")
		hashtable.put(testKeySet.elementAt(2),"three")
	end
	
	/**
	 * returns an iterator on the keys of the map
	 */
	operation testKeyIterator() : Void is do
		var it : kermeta::standard::Iterator<MyKeyType>
		setUp
		it := hashtable.keyIterator()
		stdio.writeln(it.next.toString)
		stdio.writeln(it.next.toString)
		stdio.writeln(it.next.toString)
	end

	
	/**
	 * returns an iterator on the keys of the map
	 */
	operation testValueIterator() : Void is do
		var it : kermeta::standard::Iterator<String>
		setUp
		it := hashtable.valueIterator()
		stdio.writeln(it.next.toString)
		stdio.writeln(it.next.toString)
		stdio.writeln(it.next.toString)
	end
	
	/**
	 * returns an iterator on the keys of the map
	 */
	operation testGet() : Void is do
  	    setUp
		assert(hashtable.getValue(testKeySet.elementAt(0)) == "one")
		assert(hashtable.getValue(testKeySet.elementAt(1)) == "two")
		assert(hashtable.getValue(testKeySet.elementAt(2)) == "three")
	end
	
	/**
	 * replaces an entry in the Hashtable
	 * adds an entry
	 */
	operation testPut() : Void is do
	    setUp
		hashtable.put(testKeySet.elementAt(0), "ONE")
		assert(hashtable.getValue(testKeySet.elementAt(0)) == "ONE")
		assert(hashtable.getValue(testKeySet.elementAt(1)) == "two")
		assert(hashtable.size == 3)
		var aKey : MyKeyType  init MyKeyType.new
		aKey.name := "quatre"
		hashtable.put(aKey, "four")
		assert(hashtable.size == 4)
	end
	
	/**
	 * Removes the entry which key equals 'key'
	 */
	operation testRemove() : Void is do
	    setUp
		hashtable.remove(testKeySet.elementAt(1))
		assert(hashtable.size == 2)
//		fail(hashtable.keyIterator.next == 1)
	end
	
	/**
	 * Remove all elements from the Hashtable
	 */
	operation testClear() : Void is do
	    setUp
		hashtable.clear()
		assert(hashtable.size == 0)
		assert(hashtable.getValue(testKeySet.elementAt(0)).isVoid)
	end
	
//	/** test that the values() method contains the values of the hashtable */ 
	operation testValues() : Void is do 
	    setUp
		assert(hashtable.values.size == hashtable.size) 
		assert(hashtable.values.contains("one"))
		assert(hashtable.values.contains("two"))
		assert(hashtable.values.contains("three"))
	end
	/** test that the keys() method contains the values of the hashtable */
	operation testKeys() : Void is do
	    setUp
		assert(hashtable.keys.size == hashtable.size)
		assert(hashtable.keys.contains(testKeySet.elementAt(0)))
		assert(hashtable.keys.contains(testKeySet.elementAt(1)))
		assert(hashtable.keys.contains(testKeySet.elementAt(2)))
	end

}
