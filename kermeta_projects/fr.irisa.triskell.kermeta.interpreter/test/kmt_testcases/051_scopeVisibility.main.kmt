/* $Id: 051_scopeVisibility.main.kmt,v 1.1 2006-07-21 10:24:30 dvojtise Exp $
 * Creation date: July 20, 2006
 * License: EPL
 * Copyright: INRIA/IRISA
 * Authors: dvojtise
 * test some scope and visibility issues
 */
@mainClass "scopeVisibility::Main"
@mainOperation "main"


package scopeVisibility;


require kermeta
using kermeta::standard

class Main inherits kermeta::kunit::Test 
{
    operation main() : Void is do 
        // TODO: implement 'main' operation
    end
    
    attribute attr_str : String
    
    operation op1() : Integer is do
    	result := 0
    end
 
    
    /** test visiblity of variable against attribute*/    	
	operation test2() is do
		attr_str := "hello"
		sub_test2

	end
	
	operation sub_test2() is do
		assertTrueWithMsg(attr_str == "hello", "attr_str is not == to hello but is " + attr_str)
		var attr_str : String init "bonjour"
		assert(attr_str == "bonjour")
	end
	
    /** test visiblity of variable against operation call*/
	operation test3() is do
		var i : Integer init 1
		var s : String
		
		i := op1
		assert(i == 0)
		i := 1
		
		i := self.op1
		assert(i == 0)
		//s := op1	// not valid since op1: String is declared later
	
		var op1 : String init "hello"
		
		//i := op1	// not valid anymore, now that we have overwritten it, use of self is now mandatory
		i := self.op1
		assert(i == 0)
		s := op1
		assert(op1 == "hello")
	end
	
	/** exception block visibility */
	operation test4() is do
		var str : String init "str1"				
		
		do
			raise "titi"
			str := "str2"
			assert(str == "str2")
			assertTrueWithMsg(false, "should have not passed here because of the raised exception")
		rescue (str : String)
			// str is now the one of the rescue statement
			assertTrueWithMsg(str == "titi","the str value was changed to " + str)
			str := "str3"
		end
		// initial string must not have changed
		assertTrueWithMsg(str=="str1", "str string was changed to " + str )
	end	
}