<!-- $Id: test_build.xml,v 1.10 2006-07-25 14:37:43 dvojtise Exp $ -->
<project name="run interpreter tests" default="all" basedir=".">
	
	<description>
        Run interpreter tests
    </description>
	
    <property name="report.dir" location="./reports"/>		
	<property name="eclipse.home" location="c:/eclipse3.1.1/eclipse"/>
	<property name="cobertura.dir" location="\\jersey\triskell\bin\multiplatform\cobertura-1.7"/>
	


	<property name="build.bin" location="../../build/class"/>
	<property name="src" location="../../src/java"/>
	<property name="test.src" location="../../test/junit"/>
    <property name="coverage.dir" location="${report.dir}/coverage"/>
    <property name="coverage.xml.dir" location="${report.dir}/coverage/xml"/>
    <property name="coverage.html.dir" location="${report.dir}/coverage/html"/>	

	<property name="instrumented.dir" location="instrumented"/>
	<property name="cobertura.lib.dir" location="${cobertura.dir}/lib"/>
	
	
	<property name="kermeta.interpreter.class" location="..\..\build\class"/>
	<property name="kermeta.interpreter.jar" location="..\..\..\fr.irisa.triskell.kermeta\lib\interpreter_kermeta.jar"/>
	<property name="kermeta.model.jar" location="..\..\..\fr.irisa.triskell.kermeta\lib\model_kermeta.jar"/>
	<property name="kermeta.io.jar" location="..\..\..\fr.irisa.triskell.kermeta\lib\io_kermeta.jar"/>
	<property name="traceability.jar" location="..\..\..\fr.irisa.triskell.kermeta\lib\traceability.jar"/>
	
	<property name="log4j.jar" location="..\..\..\fr.irisa.triskell.kermeta\lib\thirdparty\log4j.jar"/>
	<property name="antlr.jar" location="..\..\..\fr.irisa.triskell.kermeta\lib\thirdparty\antlr.jar"/>
	<property name="ldt-core.jar" location="..\..\..\fr.irisa.triskell.kermeta\lib\thirdparty\ldt-core.jar"/>
	
    <property name="emf.common.jar" location="${eclipse.home}/plugins/org.eclipse.emf.common_2.2.0.v200606271057.jar"/>
	<property name="emf.ecore.jar" location="${eclipse.home}/plugins/org.eclipse.emf.ecore_2.2.0.v200606271057.jar"/>
	<property name="emf.ecore.xmi.jar" location="${eclipse.home}/plugins/org.eclipse.emf.ecore.xmi_2.2.0.v200606271057.jar"/>
	
	<path id="interpreter.class.path">
	    <pathelement location="${kermeta.model.jar}"/>
	    <pathelement location="${kermeta.io.jar}"/>
	    <pathelement location="${kermeta.model.jar}"/>
	    <pathelement location="${traceability.jar}"/>
	    <pathelement location="${emf.common.jar}"/>
	    <pathelement location="${emf.ecore.jar}"/>
	    <pathelement location="${emf.ecore.xmi.jar}"/>
	    <pathelement location="${log4j.jar}"/>
	    <pathelement location="${antlr.jar}"/>
	    <pathelement location="${ldt-core.jar}"/>
	    <pathelement path="${java.class.path}"/>
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
		</fileset>
		<fileset dir="${cobertura.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<!--<path id="cobertura_classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
		</fileset>
		<fileset dir="${cobertura.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>-->

	<taskdef classpathref="interpreter.class.path" resource="tasks.properties"/>
		
	<target name="all" depends="compile_java,instrument,test,coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

	
	<target name="compile_java">
	    <mkdir dir="${build.bin}"/> 
		<javac srcdir="${src}:${test.src}" 
    	    destdir="${build.bin}"
   			debug="true">
   			<classpath >
   				<!--<pathelement path="${MTLcompiler.path}/bin"/>-->
   				<path refid="interpreter.class.path"/> 
   			</classpath>
   		</javac>
	</target>
	
	<target name="instrument" depends="compile_java">
		<!--
			Remove the coverage data file and any old instrumentation.
		-->
		<delete file="cobertura.ser"/>
		<delete dir="${instrumented.dir}" />
		<mkdir dir="${coverage.dir}"/>

		<!--
			Instrument the application classes, writing the
			instrumented classes into ${build.instrumented.dir}.
		-->
		<cobertura-instrument datafile="${coverage.dir}/basic_coverage.ser" todir="${instrumented.dir}">

			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${build.bin}">
				<!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>
	<target name="coverage-check">
		<cobertura-check branchrate="34" totallinerate="100" />
	</target>

	<target name="coverage-report">
		<!--
			Generate an XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report datafile="${coverage.dir}/basic_coverage.ser" 
			srcdir="${src}" destdir="${coverage.xml.dir}" format="xml" />
		<!--
			Generate a series of HTML files containing the coverage
			data in a user-readable form using nested source filesets.
		-->
		<cobertura-report datafile="${coverage.dir}/basic_coverage.ser" destdir="${coverage.html.dir}">
			<fileset dir="${src}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
	</target>
	
	<target name="test" 
		description="run interpreter tests" depends="compile_java">
	    <mkdir dir="${report.dir}"/> 
	    <mkdir dir="${report.dir}/html"/>
		<junit printsummary="yes" haltonfailure="no" showoutput="no">
		  <!--<classpath location="${instrumented.dir}" />-->
		  <classpath>
			  	<pathelement location="${instrumented.dir}"/>
		    	<pathelement location="${kermeta.interpreter.class}"/> <!-- this entry is normally not usefull because duplicate with the instrumented dir, 
		    	however for some unkown reason, sometimes some classes are not build correctly-->
				<path refid="interpreter.class.path"/> 
		  </classpath>
			<!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
			<!--<classpath refid="cobertura_classpath" />-->

		  <formatter type="plain"/>

		  <test name="kermeta_interpreter.test.JunitTestSuite" haltonfailure="no" todir="${report.dir}" outfile="TEST-interpreter-result">
		    <formatter type="xml"/>
		  </test>
		  <!--<batchtest todir="${reports.xml.dir}" unless="testcase">
			<fileset dir="${src}">
				<include name="**/*Test.java" />
			</fileset>
		  </batchtest>-->
		</junit>
		<junitreport todir="${report.dir}">
		  <fileset dir="${report.dir}">
		    <include name="TEST-*.xml"/>
		  </fileset>
		  <report format="frames" todir="${report.dir}/html"/>
		</junitreport>
	</target>
</project>
