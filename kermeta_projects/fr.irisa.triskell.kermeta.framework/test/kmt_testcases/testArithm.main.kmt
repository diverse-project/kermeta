/* ****************************************************************************
 * $Id: testArithm.main.kmt,v 1.4 2005-05-20 06:52:54 dvojtise Exp $
 * Project : Kermeta (First iteration)
 * Creation date :  
 * File : testArithm.kmt
 * 		
 * License : GPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * Creation date : Apr 18 11:13:24 2005
 * Author : zdrey
 * Description : 
 *		test for Integer
 ***************************************************************************
 */
@testOperation "yes"
@mainClass "testArithm::TestArithm"
@mainOperation "testoperation_ptm"

package testArithm;

require "../../src/kermeta/Standard.kmt"

//require "../../../fr.irisa.triskell.kermeta.framework/src/kermeta/test/unittest.kmt"
alias Integer : kermeta::standard::Integer;
// arithmetic operations - clone of 2_testArithm.main.kmt
class TestArithm inherits kermeta::kunit::TestCase {

	// test plus
	operation testop1() : Void is do
		assert(operation1(3)==8)
		assert(operation1(-3)==2)
		assert(operation1(0)==5)
	end
	
	// test minus
	operation testop2() : Void is do
		assert(operation2(3)==2)
		assert(operation2(-3)==8)
		assert(operation2(0)==5)
	end

	// test times
	operation testop3() : Void is do
		assert(operation3(3)==15)
		assert(operation3(-3)==-15)
		assert(operation3(0)==0)
	end
	
	
	// test div
	operation testop4() : Void is do
		assert(operation4(3)==1)
		assert(operation4(-3)==-1)
		assert(operation4bis()==0)
	end
	
	// div by Zero
	operation testfailop4() : Void is do
		assert(operation4(0)==0)
	end


	// priority : * on +
	operation testoperationpplus() : Integer is do
		// this should be : 3 + ( 7 * 2 )
		result := 3 + 7 * 2
		assert(result==17)
	end
	
	// priority : * on + (another order)
	operation testoperationpplusbis() : Integer is do
		result := 3 * 2 + 1
		assert(result==5)
	end
	
	// priority : * on -
	operation testoperationpminus() : Integer is do
		result := 3 - 7 * 2
		assert(result==-11)
	end
	
	// priority : * on -
	operation testoperationpminusbis() : Integer is do
		result := 3 * 7 - 2
		assert(result==19)
	end	
	
	// priority : * and / 
	operation testoperationpdivtimes() : Integer is do
		result := 3 * 8 / 3 * 4
		assert(result==32)
	end
	
	// priority : * and / 
	operation testoperationpdivtimesbis() : Integer is do
		result := 3 * ( 8 / 3 ) * 4
		assert(result==24)
	end	
	

    // plus times minus
    operation testoperation_ptm(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        var ~result : kermeta::standard::Integer
        var a : kermeta::standard::Integer
        a := 4
        ~result := ( 3 + a ) * num - 10
        result := ~result
    end

    // plus
    operation operation1(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 + num
    
    end
    

    // minus
    operation operation2(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 - num
    end

    // times
    operation operation3(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 * num
    end

    // div
    operation operation4(num : kermeta::standard::Integer) : kermeta::standard::Integer is do
        result := 5 / num
    end
    
    // div2 -> should be zero
	operation operation4bis() : Integer is do
		result := 0 / 4
	end
	



}


