<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="ModelingUnit">
    <details key="using" value="kermeta::standard|kermeta::exceptions|kermeta::interpreter|kermeta::utils|kermeta::language::structure|kermeta::persistence|kermeta::io|kermeta|kermeta::kunit|kermeta::ecore|kermeta::language|"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="kermeta" nsURI="http://www.kermeta.org/kermeta" nsPrefix="kermeta">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * The root package. See the other packages if you want to browse the classes of Kermeta api.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/kermeta_packages.png&quot;/>&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="DummyClass" abstract="true" eSuperTypes="/1/language/structure/Object">
      <eAnnotations source="kermeta">
        <details key="documentation" value="This class is used to workaround an EMF bug, it doesn't really belong to Kermeta metamodel"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="_KermetaSpecialTypesAlias_" instanceClassName="java.lang.Object"/>
    <eSubpackages name="standard" nsURI="http://www.kermeta.org/kermeta/standard" nsPrefix="standard">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Defines value types &#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/primitive_types_view.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EDataType" name="Object" instanceClassName="java.lang.Object">
        <eAnnotations source="kermeta">
          <details key="deprecated" value="please use directly kermeta::language::structure::Object"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Collection" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Collection is the root abstract class for all kermeta collections&#xD;&#xA; */"/>
          <details key="EMF_needReference" value="isUnique=false isOrdered=false javaClass=org.eclipse.emf.common.util.BasicEList"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="reject">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.~select{elem | do&#xA;&#x9;&#x9;&#x9;rejector(elem).~not&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Sequence composed of elements of the Collection that&#xD;&#xA;&#x9; * do not validate the rejector function&#xD;&#xA;&#x9; * example :&#xD;&#xA;&#x9; * aCollection2 := aCollection.reject { e | &#xD;&#xA;     *     \/* put here a condition that returns true for elements that must  be exclude in the resulting Collection *\/&#xD;&#xA;     * }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
          </eGenericType>
          <eParameters name="rejector" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="kermeta::standard::Boolean"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var elem : G&#xA;&#x9;from elem := self.detect{e | do&#xA;&#x9;&#x9;&#x9;e.equals(element)&#xA;&#x9;&#x9;end}&#xA;&#x9;until elem.equals(void)&#xA;&#x9;loop&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)&#xA;&#x9;&#x9;elem := self.detect{e | do&#xA;&#x9;&#x9;&#x9;&#x9;e.equals(element)&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes all instances of element from the Collection, based on&#xD;&#xA;&#x9; * G.equals(Object) definition&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="doesntContainsElementAnymore" value="contains(element).~not"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="count" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.~select{e | do&#xA;&#x9;&#x9;&#x9;e.equals(element)&#xA;&#x9;&#x9;end}.size&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the number of instances of element in the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="excludes" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.contains(element).~not&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if the Collection does not contain element&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="one">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if size.equals(0) then&#xA;&#x9;&#x9;result := void&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;&#x9;result := it.next&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an element from the Collection or void if the Collection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/Collection/G"/>
        </eOperations>
        <eOperations name="containsAll" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := true&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init elements.iterator&#xA;&#x9;until it.isOff.~or(result.~not)&#xA;&#x9;loop&#xA;&#x9;&#x9;result := self.contains(it.next)&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if current Collection contains all elements of Collection elements&#xD;&#xA;&#x9; * See Collection&lt;G>.contains(Object)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Collection">
              <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="sum">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var res : G&#xA;&#x9;var tmp : kermeta::standard::Summable&lt;G>&#xA;&#x9;var o : kermeta::standard::Object&#xA;&#x9;o := self.one&#xA;&#x9;tmp ?= o&#xA;&#x9;result := void&#xA;&#x9;if tmp.isNotEqual(void) then&#xA;&#x9;&#x9;self.each{elem | do&#xA;&#x9;&#x9;&#x9;&#x9;o := elem&#xA;&#x9;&#x9;&#x9;&#x9;tmp ?= o&#xA;&#x9;&#x9;&#x9;&#x9;if tmp.isNotEqual(void) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;res := tmp.plus(res)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;result := res&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Sum the element if they are summable (ie implement '+' operator by inheriting of the class Summable)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/Collection/G"/>
        </eOperations>
        <eOperations name="contains" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := false&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff.~or(result)&#xA;&#x9;loop&#xA;&#x9;&#x9;result := it.next.equals(element)&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Collection contains at least one&#xD;&#xA;&#x9; * instance of element, based on G.equals(elt : Object) definition&#xD;&#xA;&#x9; * Note: for checking whether a physical element is contained by the collection,&#xD;&#xA;&#x9; * make use of G.oid()&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="asSequence">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Sequence built from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.add(self, element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds an element in the Collection (default implementation)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="excludesAll" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := true&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init elements.iterator&#xA;&#x9;until it.isOff.~or(result.~not)&#xA;&#x9;loop&#xA;&#x9;&#x9;result := self.contains(it.next).~not&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if the Collection contains no element of Collection elements&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Collection">
              <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="includes" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.contains(element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * OCL API alignment, doeas the same as contains&#xD;&#xA;&#x9; * See Collection&lt;G>.contains(Object)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Collection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="clear">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.clear(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes all elements from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isEmpty" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.empty&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * OCL alignment API, does the same as empty&#xD;&#xA;&#x9; * See Collection&lt;G>.empty()&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="asBag">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag built from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Bag">
            <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="isUnique" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := true&#xA;&#x9;var s : kermeta::standard::Sequence&lt;T> init kermeta::standard::Sequence&lt;T>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff.~or(result.~not)&#xA;&#x9;loop&#xA;&#x9;&#x9;var t : T init collector(it.next)&#xA;&#x9;&#x9;if s.contains(t) then&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;s.add(t)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the the collector function evaluates to a&#xD;&#xA;&#x9; * different value for each element of the Collection&#xD;&#xA;&#x9; * example :&#xD;&#xA;&#x9; * aCollection2 := aCollection.isUnique { e | \/* put here an expression that must be unique for all elements, for example e.name *\/ }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eTypeParameters name="T"/>
          <eParameters name="collector" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="T"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="any">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if size.equals(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#xA;&#x9;end&#xA;&#x9;var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;result := it.next&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an element from the Collection&#xD;&#xA;&#x9; * Raises an EmptyCollection exception if the Collection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/Collection/G"/>
        </eOperations>
        <eOperations name="empty" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := size.equals(0)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Collection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="forAllCpl" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.forAll{x | do&#xA;&#x9;&#x9;&#x9;self.forAll{y | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;f(x, y)&#xA;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * To be written #####################################&#xD;&#xA;&#x9; * => result := self.forAll{x | self.forAll {y | f(x,y)}}&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="f" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="G"/>
              <details key="2" value="kermeta::standard::Boolean"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="existsCpl" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.exists{x | do&#xA;&#x9;&#x9;&#x9;self.exists{y | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;f(x, y)&#xA;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * To be written #####################################&#xD;&#xA;&#x9; * => result := self.exists{x | self.exists {y | f(x,y)}}&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="f" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="G"/>
              <details key="2" value="kermeta::standard::Boolean"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="isNotEmpty" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.empty.~not&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * OCL alignment API&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Collection contains at least&#xD;&#xA;&#x9; * one element &#xD;&#xA;&#x9; * See also Collection&lt;G>.contains(Object)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="detect">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var elem : G&#xA;&#x9;result := void&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff.~or(result.isNotEqual(void))&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if detector(elem) then&#xA;&#x9;&#x9;&#x9;result := elem&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an element of the Collection (usually the first) for which the detector function&#xD;&#xA;&#x9; * is not false&#xD;&#xA;&#x9; * Returns void if no elements is validated by the detector function&#xD;&#xA;&#x9; * example : &#xD;&#xA;&#x9; * anObject := aCollection.detect { e | \/* a condition *\/} // returns an element that fulfill the condition.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/Collection/G"/>
          <eParameters name="detector" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="kermeta::standard::Boolean"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="iterator">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Iterator&lt;G>.new&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.iterator(self, result)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an Iterator on the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Iterator">
            <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="addAll">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;elements.each{element | do&#xA;&#x9;&#x9;&#x9;add(element)&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds all elements from the Collection elements in the current Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Collection">
              <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="includesAll" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.containsAll(elements)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * OCL API alignment, does the same as containsAll&#xD;&#xA;&#x9; * See Collection&lt;G>.containsAll(Collection&lt;G>)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Collection">
              <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="select">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var elem : G&#xA;&#x9;result := kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if selector(elem) then&#xA;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Sequence composed of elements of the Collection that&#xD;&#xA;&#x9; * validate the selector function&#xD;&#xA;&#x9; * example :&#xD;&#xA;&#x9; * aCollection2 := aCollection.select { e | &#xD;&#xA;     *    \/* put here a condition that returns true for elements that must  be included in the resulting Collection *\/&#xD;&#xA;&#x9; * }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
          </eGenericType>
          <eParameters name="selector" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="kermeta::standard::Boolean"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="size" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.size(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the number of elements in the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="asOrderedSet">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new OrderedSet built from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="forAll" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var test : kermeta::standard::Boolean init true&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;test := test.~and(func(it.next))&#xA;&#x9;end&#xA;&#x9;result := test&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether no element of the Collection invalidates&#xD;&#xA;&#x9; * the condition specified by function func&#xD;&#xA;&#x9; * example : &#xD;&#xA;&#x9; * aBoolean := aCollection.forAll { e | \/* put here a condition *\/ } // return true if the condition is true for all elements in the collection.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="func" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="kermeta::standard::Boolean"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="exists" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var test : kermeta::standard::Boolean init false&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff.~or(test.isNotEqual(false))&#xA;&#x9;loop&#xA;&#x9;&#x9;test := test.~or(func(it.next))&#xA;&#x9;end&#xA;&#x9;result := test&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether at least one element of the Collection&#xD;&#xA;&#x9; * validates the condition specified by function func&#xD;&#xA;&#x9; * example :&#xD;&#xA;&#x9; * aBoolean := aCollection.exists { e | \/* a condition *\/} // returns true if at least one element fulfill the condition.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="func" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="kermeta::standard::Boolean"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="each">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;func(it.next)&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Runs function func on each element of the Collection&#xD;&#xA;&#x9; * example : &#xD;&#xA;&#x9; * aCollection.each { e | \/* do something with each element e of this collection *\/ }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="func" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="alias Object : kermeta::language::structure::Object;"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="asSet">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set built from the Collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eTypeParameter="/1/standard/Collection/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="collect">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Sequence&lt;T>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;result.add(collector(it.next))&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Sequence which content corresponds to the result&#xD;&#xA;&#x9; * of running the collector function for each element of the Collection&#xD;&#xA;&#x9; * The new collection size is the same as in the original collection, and which element types is the type of the result of the expression.&#xD;&#xA;&#x9; * example :&#xD;&#xA;&#x9; * aCollection2 := aCollection.collect { e | \/* put here an expression, for example e.name *\/ } &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments/>
          </eGenericType>
          <eTypeParameters name="T"/>
          <eParameters name="collector" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="T"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Set" eSuperTypes="/1/standard/Collection">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * A Set is a non-ordered collection that contains distinct elements&#xD;&#xA; * (with regards to the G.equals(Object) operation)&#xD;&#xA; */"/>
          <details key="EMF_needReference" value="isUnique=true isOrdered=false javaClass=org.eclipse.emf.common.util.BasicEList"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="intersection">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;G>.new&#xA;&#x9;var elem : G&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if elements.contains(elem) then&#xA;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set corresponding to the intersection of the Set elements&#xD;&#xA;&#x9; * with the current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Collection">
              <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="minus">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;G>.new&#xA;&#x9;var elem : G&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if elements.contains(elem).~not then&#xA;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set corresponding to the difference between the&#xD;&#xA;&#x9; * current Set and the Set elements, ie all elements contained by &#xD;&#xA;&#x9; * the current Set that do not appear in the elements Set &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Set">
              <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta" references="/1/standard/Collection/remove">
            <details key="body" value="do&#xA;&#x9;var elem : G init self.detect{e | do&#xA;&#x9;&#x9;&#x9;e.equals(element)&#xA;&#x9;&#x9;end}&#xA;&#x9;if elem.isNotEqual(void) then&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.remove(G)&#xD;&#xA;&#x9; * Removes the element from the Set if it is contained by the Set&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Set/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/equals">
            <details key="body" value="do&#xA;&#x9;var isEqual : kermeta::standard::Boolean init false&#xA;&#x9;if element.isVoid.~not then&#xA;&#x9;&#x9;if kermeta::standard::Collection&lt;G>.isInstance(element) then&#xA;&#x9;&#x9;&#x9;var collection : kermeta::standard::Collection&lt;G>&#xA;&#x9;&#x9;&#x9;collection ?= element&#xA;&#x9;&#x9;&#x9;if self.size.equals(collection.size) then&#xA;&#x9;&#x9;&#x9;&#x9;var elem : G&#xA;&#x9;&#x9;&#x9;&#x9;var ok : kermeta::standard::Boolean init true&#xA;&#x9;&#x9;&#x9;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;&#x9;&#x9;&#x9;until it.isOff.~or(ok.~not)&#xA;&#x9;&#x9;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if collection.contains(elem).~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ok := false&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;isEqual := ok&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;&#x9;result := isEqual&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Object.equals(Object)&#xD;&#xA;&#x9; * Returns a Boolean stating whether the provided element is equal to&#xD;&#xA;&#x9; * current Set&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="sortedBy">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := quickSort(self.asOrderedSet, comparator)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a ordered set of the bag elements sorted using the given comparator.&#xD;&#xA;&#x9; * The comparator must return :&lt;ul>&#xD;&#xA;&#x9; *   &lt;li>+1 if the second &lt;G> element is greater than the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>0 if the second &lt;G> element equals the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>-1 if the second &lt;G> element is lower than the first&lt;/li> &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
          <eParameters name="comparator" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="G"/>
              <details key="2" value="kermeta::standard::Integer"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta" references="/1/standard/Collection/add">
            <details key="body" value="do&#xA;&#x9;if self.contains(element).~not then&#xA;&#x9;&#x9;super(element)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.add(G)&#xD;&#xA;&#x9; * Adds elt to the Set if it is not already contained by the&#xD;&#xA;&#x9; * Set, does nothing otherwise&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Set/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="asSequence">
          <eAnnotations source="kermeta" references="/1/standard/Collection/asSequence">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::Sequence&lt;G> init kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asSequence()&#xD;&#xA;&#x9; * Returns a new Sequence composed of all elements of current Set&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="quickSort">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var less : kermeta::standard::OrderedSet&lt;G> init kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;var pivotList : kermeta::standard::OrderedSet&lt;G> init kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;var greater : kermeta::standard::OrderedSet&lt;G> init kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;if q.size.isLowerOrEqual(1) then&#xA;&#x9;&#x9;result := q&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var pivot : G init q.one&#xA;&#x9;&#x9;q.each{x | do&#xA;&#x9;&#x9;&#x9;&#x9;if comparator(x, pivot).equals(1) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;less.add(x)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;if comparator(x, pivot).equals(0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pivotList.add(x)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;if comparator(x, pivot).equals(1.uminus) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;greater.add(x)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;result := concatenate(quickSort(less, comparator), pivotList, quickSort(greater, comparator))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Recursive sort of the given (ordered) set using the given comparator.&#xD;&#xA;&#x9; * The comparator must return :&lt;ul>&#xD;&#xA;&#x9; *   &lt;li>+1 if the second &lt;G> element is greater than the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>0 if the second &lt;G> element equals the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>-1 if the second &lt;G> element is lower than the first&lt;/li> &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
          <eParameters name="q">
            <eGenericType eClassifier="/1/standard/OrderedSet">
              <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="comparator" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="G"/>
              <details key="2" value="kermeta::standard::Integer"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="concatenate">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;result.addAll(less)&#xA;&#x9;result.addAll(pivot)&#xA;&#x9;result.addAll(greater)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Internal concatenation tool for recursive 'quickSort()' method&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
          <eParameters name="less">
            <eGenericType eClassifier="/1/standard/OrderedSet">
              <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="pivot">
            <eGenericType eClassifier="/1/standard/OrderedSet">
              <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="greater">
            <eGenericType eClassifier="/1/standard/OrderedSet">
              <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="symmetricDifference">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var res : kermeta::standard::Set&lt;G> init s.minus(self)&#xA;&#x9;result := self.minus(s).addAll(res)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set which contents corresponds to the symmetric&#xD;&#xA;&#x9; * difference between current Set and Set s, ie all elements of&#xD;&#xA;&#x9; * each Set that do not appear in the other one&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
          <eParameters name="s">
            <eGenericType eClassifier="/1/standard/Set">
              <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="flatten">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var res : kermeta::standard::Set&lt;kermeta::standard::Object> init kermeta::standard::Set&lt;kermeta::standard::Object>.new&#xA;&#x9;if G.isKindOf(kermeta::standard::Collection&lt;kermeta::standard::Object>) then&#xA;&#x9;&#x9;var col : kermeta::standard::Collection&lt;kermeta::standard::Object>&#xA;&#x9;&#x9;var o : kermeta::standard::Object&#xA;&#x9;&#x9;self.each{e | do&#xA;&#x9;&#x9;&#x9;&#x9;o := e&#xA;&#x9;&#x9;&#x9;&#x9;col ?= o&#xA;&#x9;&#x9;&#x9;&#x9;res.addAll(col)&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;result := res&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set which content includes all non-Collection elements&#xD;&#xA;&#x9; * of the current Set, and, for each Collection element of the current&#xD;&#xA;&#x9; * Set, as many elements as the Collection contains&#xD;&#xA;&#x9; * Duplicates are removed&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eClassifier="/1/standard/Object"/>
          </eGenericType>
        </eOperations>
        <eOperations name="asOrderedSet">
          <eAnnotations source="kermeta" references="/1/standard/Collection/asOrderedSet">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::OrderedSet&lt;G> init kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asOrderedSet()&#xD;&#xA;&#x9; * Returns a new OrderedSet that contains all elements of current Set&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="asBag">
          <eAnnotations source="kermeta" references="/1/standard/Collection/asBag">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::Bag&lt;G> init kermeta::standard::Bag&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asBag()&#xD;&#xA;&#x9; * Returns a new Bag composed of all elements of current Set&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Bag">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="union">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;G>.new&#xA;&#x9;result.addAll(self)&#xA;&#x9;result.addAll(elements)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set corresponding to the union of the Set elements&#xD;&#xA;&#x9; * with the current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Set">
              <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="asSet">
          <eAnnotations source="kermeta" references="/1/standard/Collection/asSet">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::Set&lt;G> init kermeta::standard::Set&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asSet()&#xD;&#xA;&#x9; * Returns a new Set composed of all elements of current Set&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="unionWithBag">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;G>.new&#xA;&#x9;result := addAll(self)&#xA;&#x9;result := addAll(elements)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag corresponding to the union of the Bag elements&#xD;&#xA;&#x9; * with the current Set&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Bag">
            <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Bag">
              <eTypeArguments eTypeParameter="/1/standard/Set/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Bag" eSuperTypes="/1/standard/Collection">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Bag is a concrete non-ordered Collection allowing duplicates&#xD;&#xA; */"/>
          <details key="EMF_needReference" value="isUnique=false isOrdered=false javaClass=org.eclipse.emf.common.util.BasicEList"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="intersection">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;G>.new&#xA;&#x9;var elem : G&#xA;&#x9;var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;from it&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if elements.contains(elem) then&#xA;&#x9;&#x9;&#x9;if self.count(elem).isLowerOrEqual(elements.count(elem)) then&#xA;&#x9;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;it := elements.iterator&#xA;&#x9;from it&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if self.contains(elem) then&#xA;&#x9;&#x9;&#x9;if elements.count(elem).isLower(self.count(elem)) then&#xA;&#x9;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag corresponding to the intersection of elements&#xD;&#xA;&#x9; * and the Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Bag">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Bag">
              <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/equals">
            <details key="body" value="do&#xA;&#x9;var isEqual : kermeta::standard::Boolean init false&#xA;&#x9;if element.isVoid.~not then&#xA;&#x9;&#x9;if kermeta::standard::Collection&lt;G>.isInstance(element) then&#xA;&#x9;&#x9;&#x9;var collection : kermeta::standard::Bag&lt;G>&#xA;&#x9;&#x9;&#x9;collection ?= element&#xA;&#x9;&#x9;&#x9;var selfAsSet : kermeta::standard::Set&lt;G> init self.asSet&#xA;&#x9;&#x9;&#x9;isEqual := selfAsSet.equals(collection.asSet)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;&#x9;result := isEqual&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Object.equals(elt : Object)&#xD;&#xA;&#x9; * Returns a Boolean stating whether the provided element is equal to&#xD;&#xA;&#x9; * current Bag&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="sortedBy">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := quickSort(self.asSequence, comparator)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a sequence of the bag elements sorted using the given comparator.&#xD;&#xA;&#x9; * The comparator must return :&lt;ul>&#xD;&#xA;&#x9; *   &lt;li>+1 if the second &lt;G> element is greater than the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>0 if the second &lt;G> element equals the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>-1 if the second &lt;G> element is lower than the first&lt;/li> &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="comparator" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="G"/>
              <details key="2" value="kermeta::standard::Integer"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="asSequence">
          <eAnnotations source="kermeta" references="/1/standard/Collection/asSequence">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::Sequence&lt;G> init kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asSequence()&#xD;&#xA;&#x9; * Returns a new Sequence containing all elements of current Bag&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="quickSort">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var less : kermeta::standard::Sequence&lt;G> init kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;var pivotList : kermeta::standard::Sequence&lt;G> init kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;var greater : kermeta::standard::Sequence&lt;G> init kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;if q.size.isLowerOrEqual(1) then&#xA;&#x9;&#x9;result := q&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var pivot : G init q.one&#xA;&#x9;&#x9;q.each{x | do&#xA;&#x9;&#x9;&#x9;&#x9;if comparator(x, pivot).equals(1) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;less.add(x)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;if comparator(x, pivot).equals(0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pivotList.add(x)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;if comparator(x, pivot).equals(1.uminus) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;greater.add(x)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;result := concatenate(quickSort(less, comparator), pivotList, quickSort(greater, comparator))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Recursive sort of the given sequence using the given comparator.&#xD;&#xA;&#x9; * The comparator must return :&lt;ul>&#xD;&#xA;&#x9; *   &lt;li>+1 if the second &lt;G> element is greater than the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>0 if the second &lt;G> element equals the first&lt;/li> &#xD;&#xA;&#x9; *   &lt;li>-1 if the second &lt;G> element is lower than the first&lt;/li> &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="q">
            <eGenericType eClassifier="/1/standard/Sequence">
              <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="comparator" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="G"/>
              <details key="1" value="G"/>
              <details key="2" value="kermeta::standard::Integer"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="concatenate">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;result.addAll(less)&#xA;&#x9;result.addAll(pivot)&#xA;&#x9;result.addAll(greater)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Internal concatenation tool for recursive 'quickSort()' method&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="less">
            <eGenericType eClassifier="/1/standard/Sequence">
              <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="pivot">
            <eGenericType eClassifier="/1/standard/Sequence">
              <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
          <eParameters name="greater">
            <eGenericType eClassifier="/1/standard/Sequence">
              <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="excluding">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::Bag&lt;G> init kermeta::standard::Bag&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;s.remove(object)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag which content includes the content of the&#xD;&#xA;&#x9; * current Bag from which all instances of object have been&#xD;&#xA;&#x9; * removed&#xD;&#xA; &#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Bag">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="object">
            <eGenericType eTypeParameter="/1/standard/Bag/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="intersectionWithSet">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;G>.new&#xA;&#x9;var elem : G&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init elements.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if self.contains(elem) then&#xA;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Set corresponding to the intersection of a Set of&#xD;&#xA;&#x9; * elements and the Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Set">
              <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="flatten">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var res : kermeta::standard::Bag&lt;kermeta::standard::Object> init kermeta::standard::Bag&lt;kermeta::standard::Object>.new&#xA;&#x9;if G.isKindOf(kermeta::standard::Collection&lt;kermeta::standard::Object>) then&#xA;&#x9;&#x9;var col : kermeta::standard::Collection&lt;kermeta::standard::Object>&#xA;&#x9;&#x9;var o : kermeta::standard::Object&#xA;&#x9;&#x9;self.each{e | do&#xA;&#x9;&#x9;&#x9;&#x9;o := e&#xA;&#x9;&#x9;&#x9;&#x9;col ?= o&#xA;&#x9;&#x9;&#x9;&#x9;res.addAll(col)&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;result := res&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag which content includes all non-Collection elements&#xD;&#xA;&#x9; * of the current Set, and, for each Collection element of the current&#xD;&#xA;&#x9; * Bag, as many elements as the Collection contains&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Bag">
            <eTypeArguments eClassifier="/1/standard/Object"/>
          </eGenericType>
        </eOperations>
        <eOperations name="including">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::Bag&lt;G> init kermeta::standard::Bag&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;s.add(object)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag which content includes the content of the&#xD;&#xA;&#x9; * current Bag and the element object&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Bag">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="object">
            <eGenericType eTypeParameter="/1/standard/Bag/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="asOrderedSet">
          <eAnnotations source="kermeta" references="/1/standard/Collection/asOrderedSet">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::OrderedSet&lt;G> init kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asOrderedSet()&#xD;&#xA;&#x9; * Returns a new OrderedSet containing elements of the Bag without duplicates&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="asBag">
          <eAnnotations source="kermeta" references="/1/standard/Collection/asBag">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::Bag&lt;G> init kermeta::standard::Bag&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asBag()&#xD;&#xA;&#x9; * Returns a new Bag containing all elements of current Bag&#x9;&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Bag">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
        </eOperations>
        <eOperations name="union">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;G>.new&#xA;&#x9;result := addAll(self)&#xA;&#x9;result := addAll(elements)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a new Bag corresponding to the union of elements and&#xD;&#xA;&#x9; * current Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Bag">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
          <eParameters name="elements">
            <eGenericType eClassifier="/1/standard/Collection">
              <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="removeOne">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var elem : G init self.detect{e | do&#xA;&#x9;&#x9;&#x9;e.equals(element)&#xA;&#x9;&#x9;end}&#xA;&#x9;if elem.isNotEqual(void) then&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes one instance of element from the Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Bag/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="removeFromOid">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var elem : G init self.detect{e | do&#xA;&#x9;&#x9;&#x9;e.oid.equals(elementOid)&#xA;&#x9;&#x9;end}&#xA;&#x9;if elem.isNotEqual(void) then&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes the element identified by the provided Oid from the Bag&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="doesntContainsElementAnymore" value="exists{e | do&#xA;&#x9;&#x9;e.oid.equals(elementOid)&#xA;&#x9;end}.~not"/>
          </eAnnotations>
          <eParameters name="elementOid" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="asSet">
          <eAnnotations source="kermeta" references="/1/standard/Collection/asSet">
            <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::Set&lt;G> init kermeta::standard::Set&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;result := s&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Collection&lt;G>.asSet()&#xD;&#xA;&#x9; * Returns a new Set containing elements of the Bag without duplicates&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eTypeParameter="/1/standard/Bag/G"/>
          </eGenericType>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OrderedCollection" abstract="true" eSuperTypes="/1/standard/Collection">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An OrderedCollection is the root abstract class for all ordered Collections.&#xD;&#xA; */"/>
          <details key="EMF_needReference" value="isUnique=false isOrdered=true javaClass=org.eclipse.emf.common.util.BasicEList"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="addAt">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(size)) then&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.addAt(self, index, element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds element in the OrderedCollection at rank index&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the OrderedCollection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="index" eType="/1/standard/Integer"/>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/OrderedCollection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="removeAt">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(size.minus(1))) then&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.removeAt(self, index)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes the element at rank index from the OrderedCollection&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the OrderedCollection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="index" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="last">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if size.equals(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#xA;&#x9;end&#xA;&#x9;result := elementAt(size.minus(1))&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the last element in the OrderedCollection&#xD;&#xA;&#x9; * Raises an EmptyCollection exception if the OrderedCollection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/OrderedCollection/G"/>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/equals">
            <details key="body" value="do&#xA;&#x9;var isEqual : kermeta::standard::Boolean init false&#xA;&#x9;if element.isVoid.~not then&#xA;&#x9;&#x9;if kermeta::standard::OrderedCollection&lt;G>.isInstance(element) then&#xA;&#x9;&#x9;&#x9;var collection : kermeta::standard::Collection&lt;G>&#xA;&#x9;&#x9;&#x9;collection ?= element&#xA;&#x9;&#x9;&#x9;if self.size.equals(collection.size) then&#xA;&#x9;&#x9;&#x9;&#x9;var selfIterator : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;&#x9;&#x9;&#x9;var collectionIterator : kermeta::standard::Iterator&lt;G> init collection.iterator&#xA;&#x9;&#x9;&#x9;&#x9;var difference : kermeta::standard::Boolean init false&#xA;&#x9;&#x9;&#x9;&#x9;from void&#xA;&#x9;&#x9;&#x9;&#x9;until selfIterator.isOff.~or(collectionIterator.isOff).~or(difference)&#xA;&#x9;&#x9;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if selfIterator.next.equals(collectionIterator.next).~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;difference := true&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;isEqual := difference.~not&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;&#x9;result := isEqual&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Object.equals(Object)&#xD;&#xA;&#x9; * Returns a Boolean stating whether the provided element is equal to&#xD;&#xA;&#x9; * current OrderedCollection&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="indexOf" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if size.equals(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#xA;&#x9;end&#xA;&#x9;var i : kermeta::standard::Integer init 0&#xA;&#x9;var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;var found : kermeta::standard::Boolean init false&#xA;&#x9;from found&#xA;&#x9;until found.~or(it.isOff)&#xA;&#x9;loop&#xA;&#x9;&#x9;if element.equals(it.next) then&#xA;&#x9;&#x9;&#x9;found := true&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;i := i.plus(1)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;if found then&#xA;&#x9;&#x9;result := i&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result := 1.uminus&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * Returns the index of the first instance of element in the OrderedCollection&#xD;&#xA;&#x9; * or -1 if the element is not contained by the OrderedCollection&#xD;&#xA;&#x9; * Raises an EmptyCollection exception if the OrderedCollection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/OrderedCollection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="elementAt">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(size.minus(1))) then&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.elementAt(self, index)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the element at rank index in the OrderedCollection&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the OrderedCollection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/OrderedCollection/G"/>
          <eParameters name="index" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="first">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if size.equals(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#xA;&#x9;end&#xA;&#x9;result := elementAt(0)&#xA;end"/>
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * Returns the first element in the OrderedCollection&#xD;&#xA;&#x9; * Raises an EmptyCollection exception if the OrderedCollection is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/OrderedCollection/G"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OrderedSet" eSuperTypes="/1/standard/Set /1/standard/OrderedCollection">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An OrderedSet is a Set that contained ordered distinct elements&#xD;&#xA; */"/>
          <details key="EMF_needReference" value="isUnique=true isOrdered=true javaClass=org.eclipse.emf.common.util.BasicEList"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="append">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;result.addAll(self)&#xA;&#x9;result.add(element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new OrderedSet from current one with element&#xD;&#xA;&#x9; * inserted in head&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/OrderedSet/G"/>
          </eGenericType>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="addAt">
          <eAnnotations source="kermeta" references="/1/standard/OrderedCollection/addAt">
            <details key="body" value="do&#xA;&#x9;if self.contains(element).~not then&#xA;&#x9;&#x9;super(index, element)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides OrderedCollection&lt;G>.addAt(Integer, G)&#xD;&#xA;&#x9; * Adds element in the OrderedSet at rank index if the ordered set does&#xD;&#xA;&#x9; * not already contain the element, does nothing otherwise&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
          </eAnnotations>
          <eParameters name="index" eType="/1/standard/Integer"/>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="insertAt">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;result.addAll(self)&#xA;&#x9;result.addAt(index, subject)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new OrderedSet from current one with element&#xD;&#xA;&#x9; * inserted at rank index&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/OrderedSet/G"/>
          </eGenericType>
          <eParameters name="index" eType="/1/standard/Integer"/>
          <eParameters name="subject">
            <eGenericType eTypeParameter="/1/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="preppend">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;result.add(element)&#xA;&#x9;result.addAll(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new OrderedSet from current one with element&#xD;&#xA;&#x9; * inserted in tail&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/OrderedSet/G"/>
          </eGenericType>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/OrderedCollection/equals">
            <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * See OrderedCollection&lt;G>.equals(Object) &#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="at">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if index.isGreaterOrEqual(0).~and(index.isLowerOrEqual(self.size)) then&#xA;&#x9;&#x9;var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;&#x9;from var i : kermeta::standard::Integer init 1.uminus&#xA;&#x9;&#x9;until i.equals(index)&#xA;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;result := it.next&#xA;&#x9;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns element at rank index in the sequence&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the OrderedSet&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/OrderedSet/G"/>
          <eParameters name="index" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="add" ordered="false" eType="/1/standard/Void">
          <eAnnotations source="kermeta" references="/1/standard/Set/add">
            <details key="body" value="do&#xA;&#x9;super(element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * See Set&lt;G>.add(G)&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/OrderedSet/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="subSet">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;if min.isGreaterOrEqual(0).~and(max.isLowerOrEqual(self.size)).~and(min.isLowerOrEqual(max)) then&#xA;&#x9;&#x9;var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;&#x9;var i : kermeta::standard::Integer init 0&#xA;&#x9;&#x9;from i&#xA;&#x9;&#x9;until i.equals(min)&#xA;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;it.next&#xA;&#x9;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;from i&#xA;&#x9;&#x9;until i.equals(max.plus(1))&#xA;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;result.add(it.next)&#xA;&#x9;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new OrderedSet composed of elements of current ordered&#xD;&#xA;&#x9; * set from rank min to rank max (order is respected)&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if min is negative, max is larger than &#xD;&#xA;&#x9; * the size of the ordered set or min is larger than max&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eTypeParameter="/1/standard/OrderedSet/G"/>
          </eGenericType>
          <eParameters name="min" eType="/1/standard/Integer"/>
          <eParameters name="max" eType="/1/standard/Integer"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Sequence" eSuperTypes="/1/standard/Bag /1/standard/OrderedCollection">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * A Sequence is an OrderedCollection of elements allowing duplicates&#xD;&#xA; */"/>
          <details key="EMF_needReference" value="isUnique=false isOrdered=true javaClass=org.eclipse.emf.common.util.BasicEList"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="subSequence">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;if min.isGreaterOrEqual(0).~and(max.isLowerOrEqual(self.size)).~and(min.isLowerOrEqual(max)) then&#xA;&#x9;&#x9;var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;&#x9;var i : kermeta::standard::Integer init 0&#xA;&#x9;&#x9;from i&#xA;&#x9;&#x9;until i.equals(min)&#xA;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;it.next&#xA;&#x9;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;from i&#xA;&#x9;&#x9;until i.equals(max.plus(1))&#xA;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;result.add(it.next)&#xA;&#x9;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new Sequence composed of elements of current sequence&#xD;&#xA;&#x9; * from rank min to rank max (order is respected)&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if min is negative, max is larger than &#xD;&#xA;&#x9; * the size of the sequence or min is larger than max&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Sequence/G"/>
          </eGenericType>
          <eParameters name="min" eType="/1/standard/Integer"/>
          <eParameters name="max" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="append">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;result.addAll(self)&#xA;&#x9;result.add(element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new Sequence from current one with element&#xD;&#xA;&#x9; * inserted in head&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Sequence/G"/>
          </eGenericType>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Sequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="insertAt">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;result.addAll(self)&#xA;&#x9;result.addAt(index, element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new Sequence from current one with element&#xD;&#xA;&#x9; * inserted at rank index&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Sequence/G"/>
          </eGenericType>
          <eParameters name="index" eType="/1/standard/Integer"/>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Sequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/OrderedCollection/equals">
            <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides OrderedCollection&lt;G>.equals(Object)&#xD;&#xA;&#x9; * Returns a Boolean stating whether the provided element is equal to&#xD;&#xA;&#x9; * current Sequence&#x9;&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="preppend">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;result.add(element)&#xA;&#x9;result.addAll(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Builds and returns a new Sequence from current one with element&#xD;&#xA;&#x9; * inserted in tail&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Sequence">
            <eTypeArguments eTypeParameter="/1/standard/Sequence/G"/>
          </eGenericType>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/standard/Sequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="at">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if index.isGreaterOrEqual(0).~and(index.isLowerOrEqual(self.size)) then&#xA;&#x9;&#x9;var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;&#x9;from var i : kermeta::standard::Integer init 1.uminus&#xA;&#x9;&#x9;until i.equals(index)&#xA;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;result := it.next&#xA;&#x9;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns element at rank index in the sequence&#xD;&#xA;&#x9; * Raises IndexOutOfBound exception if provided index is lower than 0 or&#xD;&#xA;&#x9; * larger than the size of the Sequence&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/Sequence/G"/>
          <eParameters name="index" eType="/1/standard/Integer"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Iterator" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Iterator to be used with Collection&#xD;&#xA; * See also Collection&lt;G>.getIterator()&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="hasNext" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Iterator.hasNext(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if the iterator has a next element&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="next">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if hasNext.~not then&#xA;&#x9;&#x9;raise kermeta::exceptions::IteratorIsOff.new&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Iterator.next(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the next element of the iterator&#xD;&#xA;&#x9; * Raises IteratorIsOff exception in case the iterator is on the last element &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/Iterator/G"/>
        </eOperations>
        <eOperations name="isOff" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := hasNext.~not&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if the iterator is on the last element&#xD;&#xA;&#x9; * i.e. returns not self.hasNext()&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="UnknownJavaObject" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** &#xD;&#xA;  * This special object is used to represent java objects that cannot be concretely used with kermeta&#xD;&#xA;  * &lt;b>the only actions possible on these objects are : assignment and passing them as parameter&lt;/b>&#xD;&#xA;  * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/java_package.png&quot;/>&#xD;&#xA;  */"/>
        </eAnnotations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result := &quot;toString of  UnknownJavaObject not implemented yet&quot;&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA; &#x9; * NOT IMPLEMENTED&#xD;&#xA; &#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Void" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The class Void &#xD;&#xA; * By convention it is a sub-type of everything&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="isVoid" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/isVoid">
            <details key="body" value="do&#xA;&#x9;result := true&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Return true&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isInstanceOf" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/isInstanceOf">
            <details key="body" value="do&#xA;&#x9;result := true&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="type" eType="/1/language/structure/Type"/>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result := &quot;&lt;void>&quot;&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the String identifier '&lt;void>'&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueType" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The abstract class ValueType does not contain any feature.&#xD;&#xA; * However, any instance of a sub-class of ValueType will be passed by value &#xD;&#xA; * instead of by reference for any other objects.&#xD;&#xA; * that means that each time you := such object it will call the clone function associated to it (Not implemented yet except for Integer, String and boolean!!!)&#xD;&#xA; * &#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Comparable" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The abstract class Comparable defines a set of operation&#xD;&#xA; * to compare instances of a class.&#xD;&#xA; * Sub-classes only has to implement abstract operation compareTo.&#xD;&#xA; * All other methods are defined w.r.t. the compareTo operation&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="isLower" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.compareTo(other).isLower(0)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self &lt; other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="isGreaterOrEqual" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.compareTo(other).isGreaterOrEqual(0)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self >= other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * This method should be implemented by any class that inherits&#xD;&#xA;&#x9; * from Comparable.&#xD;&#xA;&#x9; * returns 0 if self = other&#xD;&#xA;&#x9; * returns > 0 if  self > other&#xD;&#xA;&#x9; * returns &lt; 0 if  self &lt; other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="isLowerOrEqual" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.compareTo(other).isLowerOrEqual(0)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self &lt;= other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="isGreater" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.compareTo(other).isGreater(0)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self > other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Summable" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The abstract class Summable defines a set of operation&#xD;&#xA; * to sum instances of a class.&#xD;&#xA; * Sub-classes only has to implement abstract operation plus.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="plus">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Summarization method to be implemented by any summable class.&#xD;&#xA;&#x9; * The parameter must have the same type (or one of its subtypes)&#xD;&#xA;&#x9; *  than the current object .&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/standard/Summable/G"/>
          <eParameters name="other">
            <eGenericType eTypeParameter="/1/standard/Summable/G"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NotComparableException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * raised when two objects are not comparable&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Boolean" eSuperTypes="/1/standard/ValueType">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The Boolean type&#xD;&#xA; */"/>
          <details key="EMF_instanceClassName" value="boolean"/>
        </eAnnotations>
        <eOperations name="not" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~not(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return not self&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="xor" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.~and(other.~not).~or(self.~not.~and(other))&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return self xor other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/equals">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Boolean) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if &lt;code>other&lt;/code> type is Boolean&#xD;&#xA;&#x9; * and has the same boolean value than current object.&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="or" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~or(self, other)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return self or other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="implies" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.~and(other).~not.~and(self).~not&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return self implies other&#xD;&#xA;&#x9; * meaning : not( (not (self and other)) and self)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="nand" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.~and(other).~not&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return self nand other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="orElse" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if self then&#xA;&#x9;&#x9;result := true&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result := right(void)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Short-circuit version of OR. This means that the function passed in parameter will be evaluated only if self is false&#xD;&#xA;&#x9; * Note: we don't have a dedicated operator in the syntax for it yet so here is an example of use :&#xD;&#xA;&#x9; *   self.orElse{v | functionThatReturnABoolean() }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="right" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="Void"/>
              <details key="1" value="kermeta::standard::Boolean"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result := if self then&#xA;&#x9;&#x9;&quot;true&quot;&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;&quot;false&quot;&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns 'true' or 'false', depending on self  value&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="andThen" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if self then&#xA;&#x9;&#x9;result := right(void)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Short-circuit version of AND. This means that the function passed in parameter will be evaluated only if self is true&#xD;&#xA;&#x9; * Note: we don't have a dedicated operator in the syntax for it yet so here is an example of use :&#xD;&#xA;&#x9; *   self.andThen{v | functionThatReturnABoolean() }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="right" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="Void"/>
              <details key="1" value="kermeta::standard::Boolean"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="and" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~and(self, other)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return self and other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Boolean"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Numeric" abstract="true" eSuperTypes="/1/standard/Comparable /1/standard/ValueType">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The abstract class Numeric is the root class for all&#xD;&#xA; * numeric types&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Integer" eSuperTypes="/1/standard/Numeric /1/standard/Summable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The class Integer&#xD;&#xA; */"/>
          <details key="EMF_instanceClassName" value="int"/>
        </eAnnotations>
        <eOperations name="plus" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Summable/plus">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.plus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns self + other&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Summable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="isLower" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/isLower">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.isLower(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLower(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self &lt; other&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="mult" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.times(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns self * other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="minus" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.minus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns self - other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/equals">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.equals(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if &lt;code>other&lt;/code> type is Integer or Real&#xD;&#xA;&#x9; * and has the same numeric value than current object.&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="mod" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.equals(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#xA;&#x9;end&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.mod(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns self modulo other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="div" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.equals(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#xA;&#x9;end&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.div(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns self / other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="toReal" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toReal(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Convert self as a Real&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/compareTo">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.compareTo(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;raise kermeta::standard::NotComparableException.new&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Comparison&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="isGreater" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/isGreater">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.isGreater(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreater(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self > other&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="isGreaterOrEqual" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/isGreaterOrEqual">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.isGreaterOrEqual(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreaterOrEqual(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self >= other&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="uminus" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := 0.minus(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns -self&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="times">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;from var i : kermeta::standard::Integer init 0&#xA;&#x9;until i.isGreaterOrEqual(self)&#xA;&#x9;loop&#xA;&#x9;&#x9;body(i)&#xA;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Iteration&#xD;&#xA;&#x9; */"/>
            <details key="EMF_static" value="IntegerUtil.times"/>
          </eAnnotations>
          <eParameters name="body" eType="/1/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.functionType">
              <details key="0" value="kermeta::standard::Integer"/>
              <details key="1" value="alias Object : kermeta::language::structure::Object;"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toString(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Numeric value in string format&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isLowerOrEqual" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/isLowerOrEqual">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Real) then&#xA;&#x9;&#x9;&#x9;result := self.toReal.isLowerOrEqual(other)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLowerOrEqual(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * return true if self &lt;= other&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Real" eSuperTypes="/1/standard/Numeric /1/standard/Summable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * class Real&#xD;&#xA; */"/>
          <details key="EMF_instanceClassName" value="java.lang.Double"/>
        </eAnnotations>
        <eOperations name="plus" eType="/1/standard/Real">
          <eAnnotations source="kermeta" references="/1/standard/Summable/plus">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.plus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns self + other&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Summable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Real"/>
        </eOperations>
        <eOperations name="mult" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.times(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns self * other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Real"/>
        </eOperations>
        <eOperations name="minus" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.minus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns self - other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Real"/>
        </eOperations>
        <eOperations name="toInteger" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toInteger(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Convert self as an Integer&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="uminus" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := 0.toReal.minus(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns -self&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/equals">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Real) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Integer) then&#xA;&#x9;&#x9;&#x9;result := self.equals(other.asType(kermeta::standard::Integer).toReal)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if &lt;code>other&lt;/code> type is Integer or Real&#xD;&#xA;&#x9; * and has the same numeric value than current object.&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="div" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.equals(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#xA;&#x9;end&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::VoidOperandError.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.div(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns self / other&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Real"/>
        </eOperations>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/compareTo">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Real) then&#xA;&#x9;&#x9;if other.getMetaClass.equals(kermeta::standard::Integer) then&#xA;&#x9;&#x9;&#x9;result := self.compareTo(other.asType(kermeta::standard::Integer).toReal)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;raise kermeta::standard::NotComparableException.new&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Comparison&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toString(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns numeric value in string format&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Character" eSuperTypes="/1/standard/ValueType /1/standard/Comparable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The class Character&#xD;&#xA; */"/>
          <details key="EMF_instanceClassName" value="char"/>
        </eAnnotations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/equals">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Character) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if &lt;code>other&lt;/code> type is Character&#xD;&#xA;&#x9; * and has the same letter value than current object.&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/compareTo">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Comparaison&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.toString(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Conversion from Character to String&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="String" eSuperTypes="/1/standard/ValueType /1/standard/Comparable /1/standard/Summable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The class String&#xD;&#xA; */"/>
          <details key="EMF_instanceClassName" value="java.lang.String"/>
        </eAnnotations>
        <eOperations name="append">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::String.append(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Appends other at the end of self&#xD;&#xA;&#x9; * A more efficient method is kermeta::utils::StringBuffer::append(other)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="plus" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/standard/Summable/plus">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.plus(self, other.toString)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.plus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns a new string self + other&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Summable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/equals">
            <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::String) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns true if &lt;code>other&lt;/code> type is String&#xD;&#xA;&#x9; * and has the same string value than current object.&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="toReal" eType="/1/standard/Real">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toReal(self)&#xA;&#x9;if result.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::StringFormatException.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Parses the current string into a real.&#xD;&#xA;&#x9; * if no real value is recognized then a StringFormatException is raised.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toBoolean" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toBoolean(self)&#xA;&#x9;if result.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::StringFormatException.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Parses the current string and returns true if the string is &quot;true&quot; and false if the string is &quot;false&quot;&#xD;&#xA;&#x9; * The parsing is not case sensitive and if no boolean value is recognized then a StringFormatException is raised.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="contains" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.contains(self, str1)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Return if a string is contained by another string&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="str1" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="compareTo" eType="/1/standard/Integer">
          <eAnnotations source="kermeta" references="/1/standard/Comparable/compareTo">
            <details key="body" value="do&#xA;&#x9;if other.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Comparaison&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Comparable"/>
          </eAnnotations>
          <eParameters name="other" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="indexOf" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.indexOf(self, str)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns the index within this string of the first &#xD;&#xA;&#x9; * occurrence of the specified substring&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="str" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="elementAt" eType="/1/standard/Character">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(size.minus(1))) then&#xA;&#x9;&#x9;raise kermeta::exceptions::StringIndexOutOfBound.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.elementAt(self, index)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns the character at index in the String&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="index" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="size" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.size(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns the number of characters in the current String&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="replace" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.replace(self, str1, str2)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Replaces all occurences of str1 in the current string by the string str2&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="str1" eType="/1/standard/String"/>
          <eParameters name="str2" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="toUpperCase" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toUpperCase(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Return the current string in upper case&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toInteger" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toInteger(self)&#xA;&#x9;if result.isVoid then&#xA;&#x9;&#x9;raise kermeta::exceptions::StringFormatException.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Parses the current string into an integer.&#xD;&#xA;&#x9; * if no integer value is recognized then a StringFormatException is raised.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toLowerCase" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toLowerCase(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Return the current string in lower case&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="substring" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if startIndex.isGreaterOrEqual(0).~and(startIndex.isLowerOrEqual(size)).~and(subStringSize.isLowerOrEqual(size)).~and(subStringSize.isGreaterOrEqual(startIndex)) then&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.substring(self, startIndex, subStringSize)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;raise kermeta::exceptions::StringIndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns a new string that is a substring of this string&#xD;&#xA;&#x9; * takes as parameters : the startIndex and the size of the substring&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="startIndex" eType="/1/standard/Integer"/>
          <eParameters name="subStringSize" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="split">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.split(self, delimiter)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Return of an ordered set of the splitted string&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/OrderedSet">
            <eTypeArguments eClassifier="/1/standard/String"/>
          </eGenericType>
          <eParameters name="delimiter" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * returns the string itself&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Object">
        <eAnnotations source="kermeta">
          <details key="alias" value="kermeta::standard::Integer"/>
          <details key="documentation" value="/**&#xD;&#xA; * Unlimited natural is used for reflection.&#xD;&#xA; * It is mapped to integer.equals().&#xD;&#xA; * Any negative number is interpreted as '*'&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="interpreter" nsURI="http://www.kermeta.org/kermeta/interpreter" nsPrefix="interpreter">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains a set of classes whose function is to evaluate a kermeta &#xD;&#xA; * expression written as a string.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/interpreter_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="DynamicExpression" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * DynamicExpression is a class used to make dynamic calls, i.e dynamic evaluation&#xD;&#xA; * of Kermeta statements represented in a string.&#xD;&#xA; * &#xD;&#xA; * An example :&#xD;&#xA; *   var de : DynamicExpression init DynamicExpression.new&#xD;&#xA; *   de.initializeDefaults&#xD;&#xA; *   de.formalParameters.put(&quot;a&quot;, String)&#xD;&#xA; *   de.parse(&quot;stdio.writeln(a)&quot;) // note: to execute a list of statements, you have to surround them with do..end&#xD;&#xA; *   var params : Hashtable&lt;String, Object> init Hashtable&lt;String, Object>.new&#xD;&#xA; *   params.put(&quot;a&quot;, &quot;hello world!&quot;)&#xD;&#xA; *   de.execute(void, params)&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/dynamic_expression_view.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="initializeDefaults" ordered="false" eType="/1/standard/Void">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;formalParameters := kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::language::structure::Type>.new&#xA;&#x9;selfClass ?= kermeta::standard::Object.typeDefinition&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Initializes the formalParameters with an empty set of parameters&#xD;&#xA;&#x9; * and the self type with void&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="execute" eType="/1/standard/Object">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if expression.equals(void) then&#xA;&#x9;&#x9;var e : kermeta::exceptions::DynamicExpressionException init kermeta::exceptions::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;execute precondition - expression is void&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;if errors.size.isNotEqual(0) then&#xA;&#x9;&#x9;var e : kermeta::exceptions::DynamicExpressionException init kermeta::exceptions::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;execute precondition - expression contains errors&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::DynamicExpression.execute(self, selfObj, actualParams)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;     * Execute the expression in the given context&#xD;&#xA;     */"/>
          </eAnnotations>
          <eParameters name="selfObj" eType="/1/standard/Object"/>
          <eParameters name="actualParams">
            <eGenericType eClassifier="/1/utils/Hashtable">
              <eTypeArguments eClassifier="/1/standard/String"/>
              <eTypeArguments eClassifier="/1/standard/Object"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="parse" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;errors.clear&#xA;&#x9;if formalParameters.equals(void).~or(selfClass.equals(void)) then&#xA;&#x9;&#x9;var e : kermeta::exceptions::DynamicExpressionException init kermeta::exceptions::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;parse precondition - formalParameters or selfType is void&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::DynamicExpression.parse(self, expression)&#xA;&#x9;if errors.size.isNotEqual(0) then&#xA;&#x9;&#x9;var e : kermeta::exceptions::DynamicExpressionException init kermeta::exceptions::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;parse result - expression contains errors&quot;&#xA;&#x9;&#x9;errors.each{error | do&#xA;&#x9;&#x9;&#x9;&#x9;e.message.append(&quot;\n&quot;.plus(error.message))&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Parse the expression as a string&#xD;&#xA;&#x9; * and updates the expression field and errors&#xD;&#xA;&#x9; * Returns true if the expression was parsed sucessfuly&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="expression" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="evalString" eType="/1/standard/Object">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if parse(body).~not then&#xA;&#x9;&#x9;var e : kermeta::exceptions::DynamicExpressionException init kermeta::exceptions::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;evalString - expression contains errors&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;result := execute(selfObj, actualParams)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;     * Execute the expression given as a string.&#xD;&#xA;     * the self type and formal parameters are supposed to be set&#xD;&#xA;     * before calling this operation&#xD;&#xA;     */"/>
          </eAnnotations>
          <eParameters name="body" eType="/1/standard/String"/>
          <eParameters name="selfObj" eType="/1/standard/Object"/>
          <eParameters name="actualParams">
            <eGenericType eClassifier="/1/utils/Hashtable">
              <eTypeArguments eClassifier="/1/standard/String"/>
              <eTypeArguments eClassifier="/1/standard/Object"/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the expression&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="errors" upperBound="-1" eType="/1/interpreter/KermetaError">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Parse errors and type errors&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="formalParameters">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Formal parameters of the expression (bindings between parameters' names and types)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/utils/Hashtable">
            <eTypeArguments eClassifier="/1/standard/String"/>
            <eTypeArguments eClassifier="/1/language/structure/Type"/>
          </eGenericType>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="selfClass" eType="/1/language/structure/ClassDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * The type of the self object&#xD;&#xA;&#x9; * or void if the expression is not to be executed&#xD;&#xA;&#x9; * in the context of an object&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KermetaError" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Kermeta language error in a code written in Kermeta&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="message" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Error message&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ParseError" eSuperTypes="/1/interpreter/KermetaError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Kermeta error for parsing problems&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeError" eSuperTypes="/1/interpreter/KermetaError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Type errors in a code written in Kermeta&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="utils" nsURI="http://www.kermeta.org/kermeta/utils" nsPrefix="utils">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Contains special classes (Hashtable, Stack) that are not contained in Kermeta&#xD;&#xA; * metamodel&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="StringBuffer" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xA; * This class mimic the behavior of the java's StringBuffer class. This enables better performance in long&#xA; * string concatenation.&lt;br>&#xA; * &lt;b>Only work on Strings&lt;/b>&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/utils_package.png&quot;/>&#xA; */"/>
        </eAnnotations>
        <eOperations name="append" eType="/1/utils/StringBuffer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::StringBuffer.append(self, arg0)&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Append a given string at the end of this StringBuffer&#xA;&#x9; * @param arg0 A string to append at the end of this StringBuffer&#xA;&#x9; * @return A reference to this object&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="arg0" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="length" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::StringBuffer.length(self)&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; * Return the length of the StringBuffer&#xA;&#x9; * @return length of the StringBuffer&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;var stringValue : kermeta::standard::String&#xA;&#x9;stringValue ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::StringBuffer.toString(self)&#xA;&#x9;result := stringValue&#xA;end"/>
            <details key="documentation" value="/**&#xA;&#x9; *Convert this StringBuffer to String and return its value&#xA;&#x9; *@return The string value of this StringBuffer&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Hashtable" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An implementation of hashtable&#xD;&#xA; * This implementation is for speed optimisation it cannot be serialized. &#xD;&#xA; * If your wish to serialize its content you need to copy its content into a classical ecore structure (attribute or references)&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/utils_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="K"/>
        <eTypeParameters name="V"/>
        <eOperations name="clear">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.clear(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes all elements from the Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getValue">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.get(self, key)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the value for key 'key' if it exists, otherwise returns Void&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/utils/Hashtable/V"/>
          <eParameters name="key">
            <eGenericType eTypeParameter="/1/utils/Hashtable/K"/>
          </eParameters>
        </eOperations>
        <eOperations name="containsKey" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := getValue(key).isNotEqual(void)&#xA;end"/>
            <details key="documentation" value="/**&#x9;&#xD;&#xA;&#x9; * Returns a Boolean stating whether a key is present or not in this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="key">
            <eGenericType eTypeParameter="/1/utils/Hashtable/K"/>
          </eParameters>
        </eOperations>
        <eOperations name="values">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;V>.new&#xA;&#x9;keys.each{k | do&#xA;&#x9;&#x9;&#x9;result.add(self.getValue(k))&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a collection containing the elements of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Collection">
            <eTypeArguments eTypeParameter="/1/utils/Hashtable/V"/>
          </eGenericType>
        </eOperations>
        <eOperations name="put">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.put(self, key, ~value)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds a entry into the Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="key">
            <eGenericType eTypeParameter="/1/utils/Hashtable/K"/>
          </eParameters>
          <eParameters name="value">
            <eGenericType eTypeParameter="/1/utils/Hashtable/V"/>
          </eParameters>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.remove(self, key)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Removes the entry with key equals to 'key'&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="key">
            <eGenericType eTypeParameter="/1/utils/Hashtable/K"/>
          </eParameters>
        </eOperations>
        <eOperations name="keys">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;K>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;K> init keyIterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;result.add(it.next)&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a set containing the hash keys of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eTypeParameter="/1/utils/Hashtable/K"/>
          </eGenericType>
        </eOperations>
        <eOperations name="keyIterator">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.keysIterator(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an iterator over the Keys of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Iterator">
            <eTypeArguments eTypeParameter="/1/utils/Hashtable/K"/>
          </eGenericType>
        </eOperations>
        <eOperations name="valueIterator">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.valueIterator(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns an iterator over the values of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Iterator">
            <eTypeArguments eTypeParameter="/1/utils/Hashtable/V"/>
          </eGenericType>
        </eOperations>
        <eOperations name="size" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.size(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the size of this Hashtable&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Stack" eSuperTypes="/1/standard/Sequence">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An implementation of stack&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/utils_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="pop">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := peek&#xA;&#x9;self.removeAt(0)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Get and remove the element at the top of the stack&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/utils/Stack/G"/>
        </eOperations>
        <eOperations name="peek">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.first&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Gets the element at the top of the stack&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eTypeParameter="/1/utils/Stack/G"/>
        </eOperations>
        <eOperations name="push">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;self.addAt(0, element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Pushes an element into the stack&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/utils/Stack/G"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="persistence" nsURI="http://www.kermeta.org/kermeta/persistence" nsPrefix="persistence">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains the classes that handle the serialization of models, in particular&#xD;&#xA; * EMF models.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/persistence_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Resource" abstract="true" eSuperTypes="/1/standard/Set">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The main class that handle a loaded/saved model.&#xD;&#xA; * There are a few important things to note for the developer :&#xD;&#xA; * &#xD;&#xA; * - load a Resource : this loads a Collection of instances corresponding to the&#xD;&#xA; *   objects in the loaded model. If the Collection of instances is empty, than &#xD;&#xA; *&#x9; a ResourceLoadException is raised&#xD;&#xA; *&#xD;&#xA; * - save a Resource : this saves the collection of instances in a new file. This can&#xD;&#xA; *   be correctly done if and only if the instances saved are conform to the metamodel&#xD;&#xA; *   linked to this resource (this link does not need to be explicit. It is normally retrieved&#xD;&#xA; *   through the EMF model -- see Java wrapping &quot;Resource.java&quot;).&#xD;&#xA; * &#xD;&#xA; * - add/remove an instance to the Resource : this adds an element in the resource. It cannot&#xD;&#xA; *   be &quot;simply&quot; added because of the following potential errors :&#xD;&#xA; *&#xD;&#xA; *   - The object added is not conform to the metamodel -> Error&#xD;&#xA; *   - The object was already added in the resource -> Not a real error : we do nothing&#xD;&#xA; *   - The object to remove does not exist -> redirect to a collection-specific error&#xD;&#xA; *   - The object to remove is attached to an object in the collection -> &quot;dependency-violation&quot; exception?&#xD;&#xA;&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="save">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Save a Resource in the file specified by the current value of uri &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="saveWithNewURI">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Save a Resource in a file referenced by the new uri. &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="new_uri" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="findDanglingModelElements">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::persistence::DanglingDiagnostic>.new&#xA;&#x9;self.contents.each{containedObj | do&#xA;&#x9;&#x9;&#x9;var classDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;&#x9;&#x9;classDef ?= containedObj.getMetaClass.typeDefinition&#xA;&#x9;&#x9;&#x9;if classDef.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;classDef.allAttribute.each{prop | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if prop.isDerived.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if prop.upper.isGreater(1).~or(prop.upper.equals(1.uminus)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var referencedObjs : kermeta::standard::Collection&lt;kermeta::standard::Object>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencedObjs ?= containedObj.get(prop)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if referencedObjs.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencedObjs.each{referencedObj | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if self.repository.resources.exists{res2 | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;res2.contents.contains(referencedObj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}.~not.~and(referencedObj.isKindOf(kermeta::standard::String).~or(referencedObj.isKindOf(kermeta::standard::Integer)).~or(referencedObj.isKindOf(kermeta::standard::Boolean)).~not) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var diagnostic : kermeta::persistence::DanglingDiagnostic init kermeta::persistence::DanglingDiagnostic.new&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.danglingElement := referencedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingElement := containedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingProperty := prop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(diagnostic)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var referencedObj : kermeta::standard::Object&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencedObj := containedObj.get(prop)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if referencedObj.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if self.repository.resources.exists{res2 | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;res2.contents.contains(referencedObj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}.~not.~and(referencedObj.isKindOf(kermeta::standard::String).~or(referencedObj.isKindOf(kermeta::standard::Integer)).~or(referencedObj.isKindOf(kermeta::standard::Boolean)).~not) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var diagnostic : kermeta::persistence::DanglingDiagnostic init kermeta::persistence::DanglingDiagnostic.new&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.danglingElement := referencedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingElement := containedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingProperty := prop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(diagnostic)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Search for elements referenced by one element contained by this resource that are not contained by this repository&#xD;&#xA;&#x9; * ie. element that EMF would claim as &quot;not contained in a resource&quot;&#xD;&#xA;&#x9; * checks only objects directly referenced by the elment in this resource, ignores inderecly referenced objects&#xD;&#xA;&#x9; * example of use :&#xD;&#xA;&#x9; *  var report : Set&amp;lt;DanglingDiagnostic&amp;gt;&#xD;&#xA;&#x9; *&#x9;report := resource.findDanglingModelElements()&#xD;&#xA;&#x9; *&#x9;report.each{ diag | stdio.writeln(diag.toString ) }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eClassifier="/1/persistence/DanglingDiagnostic"/>
          </eGenericType>
        </eOperations>
        <eOperations name="load">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Loads the Resource, thus making content of the Resource browsable.&#xD;&#xA;&#x9; * Raises a ResourceLoadException in case loaded Resource is empty&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="instances" eType="/1/persistence/Resource">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * The entities contained in the model-instance, that are provided when user loads a resource &#xD;&#xA;&#x9; * instances == rootContents&#xD;&#xA;&#x9; * this is a loop on Resource itself in order to get backward compatibility&#xD;&#xA;&#x9; * user should use the resource directly since this is a collection&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="dependentResources" ordered="false" upperBound="-1" eType="/1/persistence/Resource" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the set of Resources the current Resource, which must have been loaded,&#xD;&#xA;&#x9; * depends on, an empty set if current Resource has no dependency&#xD;&#xA;&#x9; */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.getDependentResources(self, uri, metaModelURI, &quot;EMF&quot;)&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="contents" ordered="false" upperBound="-1" eType="/1/standard/Object" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="false"/>
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * Returns the set of all Objects directly or indirectly contained by the Resource,&#xD;&#xA;&#x9; * or an empty set if the Resource is empty&#xD;&#xA;&#x9; */"/>
            <details key="isReadOnly" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermetaderivedProp.getter">
            <details key="body" value="do&#xA;&#x9;var res : kermeta::standard::Set&lt;kermeta::language::structure::Object> init kermeta::standard::Set&lt;kermeta::language::structure::Object>.new&#xA;&#x9;res.addAll(self)&#xA;&#x9;var coll : kermeta::standard::Set&lt;kermeta::language::structure::Object>&#xA;&#x9;self.each{e | do&#xA;&#x9;&#x9;&#x9;coll ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getAllContainedObjects(e)&#xA;&#x9;&#x9;&#x9;res.addAll(coll)&#xA;&#x9;&#x9;end}&#xA;&#x9;result := res&#xA;end"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="repository" eType="/1/persistence/Repository" eOpposite="/1/persistence/Repository/resources">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Repository used to create the Resource&#xD;&#xA;&#x9; * This feature is supposed read only, otherwise it cannot garantee that an element is contained by only &#xD;&#xA;&#x9; * one Resource of a given Repository&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="metaModelURI" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Uri of the meta-model of the Resource to load&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Indicates weither this resource will be updated when saving the repository&#xD;&#xA;&#x9; * This is useful if the repository contains some metamodels that should not be saved.&#xD;&#xA;&#x9; *&#xD;&#xA;&#x9; * Note that in the current version, it doesn't ensure that you have not modified its content (using the freeze)&#xD;&#xA;&#x9; * If you modify the elements of such resource, other resource that depend on it will be incorrectly saved &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Uri of the Resource to load&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EMFResource" eSuperTypes="/1/persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Extension of the Resource class definition that is specific to EMF Repository.&#xD;&#xA; * User is not supposed to directly create it. Otherwise it will not be correctly initialized&#xD;&#xA; * You must To create one &#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="remove">
          <eAnnotations source="kermeta" references="/1/standard/Set/remove">
            <details key="body" value="do&#xA;&#x9;if self.contains(instance) then&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.unSetContainingResource(instance)&#xA;&#x9;&#x9;super(instance)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Set&lt;Object>.remove(Object)&#xD;&#xA;&#x9; * Remove the instance from the Resource&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eParameters name="instance" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="save">
          <eAnnotations source="kermeta" references="/1/persistence/Resource/save">
            <details key="body" value="do&#xA;&#x9;if isReadOnly then&#xA;&#x9;&#x9;var e : kermeta::exceptions::ResourceSaveException init kermeta::exceptions::ResourceSaveException.new&#xA;&#x9;&#x9;e.message := &quot;Cannot save a readonly resource. Probably this resource was indirectly loaded when loading another resource. \n&quot;.plus(&quot;If you really intend to save this resource, you can set isReadOnly to false, but you must ensure to do so before any resource save.\n&quot;).plus(&quot;Note : setting isReadOnly to false on the metamodel may lead to unpredictable results&quot;)&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self, self.uri, metaModelURI, &quot;EMF&quot;, self, false)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Resource.save()&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::persistence::Resource"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="saveWithNewURI">
          <eAnnotations source="kermeta" references="/1/persistence/Resource/saveWithNewURI">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self, new_uri, metaModelURI, &quot;EMF&quot;, self, false)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Resource.saveWithNewURI(String)&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::persistence::Resource"/>
          </eAnnotations>
          <eParameters name="new_uri" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="saveAndValidateWithEMF" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self, self.uri, metaModelURI, &quot;EMF&quot;, self, true)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Checks the Resource using the EMF validation function, and saves it if&#xD;&#xA;&#x9; * validation succeeds&#xD;&#xA;&#x9; * Applies validation to all root objects of the Resource&#xD;&#xA;&#x9; * Returns true if the validation reports no error, raises exceptions otherwise&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="load">
          <eAnnotations source="kermeta" references="/1/persistence/Resource/load">
            <details key="body" value="do&#xA;&#x9;self.clear&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.load(self, uri, metaModelURI, &quot;EMF&quot;)&#xA;&#x9;if self.size.equals(0) then&#xA;&#x9;&#x9;stdio.writeln(&quot;Resource load failed!&quot;)&#xA;&#x9;&#x9;var e : kermeta::exceptions::ResourceLoadException init kermeta::exceptions::ResourceLoadException.new&#xA;&#x9;&#x9;e.message := &quot;Resource load failed, no object was created in this resource&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Resource.load()&#xD;&#xA;&#x9; * In case the metamodelURI was not previously set, metamodelURI is filled with&#xD;&#xA;&#x9; * the nsuri of the root package of the metamodel used to load the Resource after&#xD;&#xA;&#x9; * a successful load&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::persistence::Resource"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta" references="/1/standard/Set/add">
            <details key="body" value="do&#xA;&#x9;repository.resources.~select{r | do&#xA;&#x9;&#x9;&#x9;r.isNotEqual(self).~and(r.contains(instance))&#xA;&#x9;&#x9;end}.each{r | do&#xA;&#x9;&#x9;&#x9;stdio.writeln(&quot;DVK ! another resource of the same repository was containing this element&quot;)&#xA;&#x9;&#x9;&#x9;r.remove(instance)&#xA;&#x9;&#x9;end}&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.setContainingResource(instance, self)&#xA;&#x9;super(instance)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Set&lt;Object>.add(Object)&#xD;&#xA;&#x9; * Add an instance to the Resource &#xD;&#xA;&#x9; * Ensures that the instance is referenced by a one and only one Resource of the same Repository&#xD;&#xA;&#x9; * Ensures that the instance does not appear more than once in the Resource&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eParameters name="instance" eType="/1/standard/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMResource" eSuperTypes="/1/persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * NOT IMPLEMENTED&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="remove">
          <eAnnotations source="kermeta" references="/1/standard/Set/remove">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA; &#x9; * NOT IMPLEMENTED&#xD;&#xA; &#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eParameters name="instance" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="save">
          <eAnnotations source="kermeta" references="/1/persistence/Resource/save">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA; &#x9; * NOT IMPLEMENTED&#xD;&#xA; &#x9; */"/>
            <details key="superOperation" value="kermeta::persistence::Resource"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="load">
          <eAnnotations source="kermeta" references="/1/persistence/Resource/load">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA; &#x9; * NOT IMPLEMENTED&#xD;&#xA; &#x9; */"/>
            <details key="superOperation" value="kermeta::persistence::Resource"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta" references="/1/standard/Set/add">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA; &#x9; * NOT IMPLEMENTED&#xD;&#xA; &#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eParameters name="instance" eType="/1/standard/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Repository" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Abstract resource container, that contains a list of available loaded resources, &#xD;&#xA; * and methods to create or get a resource given an URI.&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="createResource" eType="/1/persistence/Resource">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Creates a new Resource with given uri, and an optional mm_uri&#xD;&#xA;&#x9; * mm_uri is required when creating a new model from scratch.&#xD;&#xA;&#x9; * Raises a ResourceCreate exception in case the Repository already&#xD;&#xA;&#x9; * contains a Resource with the given uri&#xD;&#xA;&#x9; * If uri does not points to an existing model file (in the case of&#xD;&#xA;&#x9; * a model creation), calls to load() operation will fail as long as&#xD;&#xA;&#x9; * the model has not been saved once&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="uri" eType="/1/standard/String"/>
          <eParameters name="mm_uri" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="findDanglingModelElements">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::persistence::DanglingDiagnostic>.new&#xA;&#x9;self.resources.each{res | do&#xA;&#x9;&#x9;&#x9;res.contents.each{containedObj | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var classDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;classDef ?= containedObj.getMetaClass.typeDefinition&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if classDef.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;classDef.allAttribute.each{prop | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if prop.isDerived.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if prop.upper.isGreater(1).~or(prop.upper.equals(1.uminus)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var referencedObjs : kermeta::standard::Collection&lt;kermeta::standard::Object>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencedObjs ?= containedObj.get(prop)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if referencedObjs.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencedObjs.each{referencedObj | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if self.resources.exists{res2 | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;res2.contents.contains(referencedObj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}.~not.~and(referencedObj.isKindOf(kermeta::standard::String).~or(referencedObj.isKindOf(kermeta::standard::Integer)).~or(referencedObj.isKindOf(kermeta::standard::Boolean)).~not) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var diagnostic : kermeta::persistence::DanglingDiagnostic init kermeta::persistence::DanglingDiagnostic.new&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.danglingElement := referencedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingElement := containedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingProperty := prop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(diagnostic)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var referencedObj : kermeta::standard::Object&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencedObj := containedObj.get(prop)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if referencedObj.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if self.resources.exists{res2 | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;res2.contents.contains(referencedObj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}.~not.~and(referencedObj.isKindOf(kermeta::standard::String).~or(referencedObj.isKindOf(kermeta::standard::Integer)).~or(referencedObj.isKindOf(kermeta::standard::Boolean)).~not) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var diagnostic : kermeta::persistence::DanglingDiagnostic init kermeta::persistence::DanglingDiagnostic.new&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.danglingElement := referencedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingElement := containedObj&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.referencingProperty := prop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(diagnostic)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Search for elements referenced by one element contained by this repository  that are not contained by this repository&#xD;&#xA;&#x9; * ie. element that EMF would claim as &quot;not contained in a resource&quot;&#xD;&#xA;&#x9; * example of use :&#xD;&#xA;&#x9; *  var report : Set&amp;lt;DanglingDiagnostic&amp;gt;&#xD;&#xA;     *&#x9;report := repository.findDanglingModelElements()&#xD;&#xA;     *&#x9;report.each{ diag | stdio.writeln(diag.toString ) }&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eGenericType eClassifier="/1/standard/Set">
            <eTypeArguments eClassifier="/1/persistence/DanglingDiagnostic"/>
          </eGenericType>
        </eOperations>
        <eOperations name="getResource" eType="/1/persistence/Resource">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Repository.initRepository(self)&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;kermeta::persistence::Resource> init resources.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;var next : kermeta::persistence::Resource init it.next&#xA;&#x9;&#x9;if uri.equals(next.uri) then&#xA;&#x9;&#x9;&#x9;result := next&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;if result.equals(void) then&#xA;&#x9;&#x9;result := self.createResource(uri, &quot;&quot;)&#xA;&#x9;&#x9;result.load&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the Resource associated with the given uri if this uri is associated with&#xD;&#xA;&#x9; * an already created Resource of the Repository.&#xD;&#xA;&#x9; * If the Repository contains no Resource associated with the given uri, creates&#xD;&#xA;&#x9; * a new Resource and loads it.&#xD;&#xA;&#x9; * Raises a ResourceCreate exception if the given uri does not point to an existing&#xD;&#xA;&#x9; * model file &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="uri" eType="/1/standard/String"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="resources" ordered="false" upperBound="-1" eType="/1/persistence/Resource" containment="true" eOpposite="/1/persistence/Resource/repository">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Resources created by this Repository &#xD;&#xA;&#x9; * This feature is supposed read only, otherwise it cannot garantee that an element is contained by only &#xD;&#xA;&#x9; * one Resource of a given Repository&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DanglingDiagnostic" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * class used to gather the information required to make a user friendly report about a dangling element&#xD;&#xA; * (see. findDanglingModelElements())&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result := danglingElement.toString.plus(&quot; referenced by &quot;).plus(referencingElement.toString).plus(&quot;.&quot;).plus(referencingProperty.name).plus(&quot; is dangling&quot;)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * user friendly message build with those informations&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="referencingElement" eType="/1/standard/Object">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="false"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Element that has a reference to the dangling element  &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="danglingElement" eType="/1/standard/Object">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="false"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Element that is not contained by a resource in the repository  &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencingProperty" eType="/1/language/structure/Property">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Property used to reference the dangling element  &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EMFRepository" eSuperTypes="/1/persistence/Repository">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Repository that stores and manages resources that come from EMF&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="createResource" eType="/1/persistence/Resource">
          <eAnnotations source="kermeta" references="/1/persistence/Repository/createResource">
            <details key="body" value="do&#xA;&#x9;if resources.collect{r | do&#xA;&#x9;&#x9;&#x9;r.uri&#xA;&#x9;&#x9;end}.contains(uri).~not then&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Repository.createResource(self, uri, mm_uri)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var e : kermeta::exceptions::ResourceCreateException init kermeta::exceptions::ResourceCreateException.new&#xA;&#x9;&#x9;e.message := &quot;Trying to create a resource already existing at &quot;.plus(uri).plus(&quot;.\n&quot;).plus(&quot;Remove existing resource from repository first, or use \&quot;getResource\&quot; operation.&quot;)&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides Repository.createResource(String, String)&#xD;&#xA;&#x9; * Create a new resource for a model given by its uri, &#xD;&#xA;&#x9; * which meta-model is stored in file given by mm_uri&#xD;&#xA;&#x9; * If file already exists, you'll be able to call the load method to concretly load the model&#xD;&#xA;&#x9; * otherwise, you can only call the save method&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::persistence::Repository"/>
          </eAnnotations>
          <eParameters name="uri" eType="/1/standard/String"/>
          <eParameters name="mm_uri" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="normalizeUri" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Repository.normalizeUri(uri)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Return a normalized version of the Uri&#xD;&#xA;&#x9; * As EMF needs URI of the form platform:/resource or platform:/plugin, kermeta automatically&#xD;&#xA;&#x9; * normalize the uri when loading or saving. This is especially true for file:/ uri or relative uri (./ or / ) &#xD;&#xA;&#x9; * If you wish to know what concrete uri is used by kermeta when loading and saving you can use this function&#xD;&#xA;&#x9; * to check how a given uri is normalized by kermeta&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="uri" eType="/1/standard/String"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="useInterpreterInternalResources" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * If true, tells to the save of the resources that they should also integrate the resources from Kermeta interpreter itself&#xD;&#xA;&#x9; * this is usefull for example to make a dependency to framework.km&#xD;&#xA;&#x9; * by default, not setting this is considered as false.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="ignoreLoadErrors" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * When loading the Resources, &#xD;&#xA;&#x9; * if there are some errors while loading some objects, those objects are ignored&#xD;&#xA;&#x9; * by default, not setting this is considered as false.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMRepository" eSuperTypes="/1/persistence/Repository">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Repository that stores and manages XMI files representing Kermeta models&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="createResource" eType="/1/persistence/Resource">
          <eAnnotations source="kermeta" references="/1/persistence/Repository/createResource">
            <details key="body" value="do&#xA;&#x9;result := void&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA; &#x9; * NOT IMPLEMENTED&#xD;&#xA; &#x9; */"/>
            <details key="superOperation" value="kermeta::persistence::Repository"/>
          </eAnnotations>
          <eParameters name="uri" eType="/1/standard/String"/>
          <eParameters name="mm_uri" eType="/1/standard/String"/>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="io" nsURI="http://www.kermeta.org/kermeta/io" nsPrefix="io">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains standard input/output related classes. &#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="FileIO" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Implementation of simple helpers to read ans write text files&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/io_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="writeTextFile">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if filename.equals(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::FileNotFoundException.new&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::io::SimpleFileIO.writeTextFile(filename, text)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writes a String in a text file&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="filename" eType="/1/standard/String"/>
          <eParameters name="text" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="readTextFile" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if filename.equals(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::FileNotFoundException.new&#xA;&#xA;&#x9;end&#xA;&#x9;var exists : kermeta::standard::Boolean&#xA;&#x9;var isdirectory : kermeta::standard::Boolean&#xA;&#x9;exists ?= extern fr::irisa::triskell::kermeta::runtime::io::SimpleFileIO.fileExists(filename)&#xA;&#x9;isdirectory ?= extern fr::irisa::triskell::kermeta::runtime::io::SimpleFileIO.fileIsDirectory(filename)&#xA;&#x9;if exists.~not.~or(isdirectory) then&#xA;&#x9;&#x9;raise kermeta::exceptions::FileNotFoundException.new&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::io::SimpleFileIO.readTextFile(filename)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Reads a text file&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="filename" eType="/1/standard/String"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StdIO" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * An implementation of StdIO : standard input/output&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/io_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="writeln">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if object.equals(void) then&#xA;&#x9;&#x9;object := &quot;&lt;void>&quot;&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.writeln(object)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writeln the object to standard output&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="object" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="errorln">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if object.equals(void) then&#xA;&#x9;&#x9;object := &quot;&lt;void>&quot;&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.errorln(object)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writeln the object to error output&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="object" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="error">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if object.equals(void) then&#xA;&#x9;&#x9;object := &quot;&lt;void>&quot;&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.error(object)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writes the object to error output&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="object" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="write">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if object.equals(void) then&#xA;&#x9;&#x9;object := &quot;&lt;void>&quot;&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.write(object)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Writes the object to standard output&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="object" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="read" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if prompt.equals(void) then&#xA;&#x9;&#x9;prompt := &quot;&quot;&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.read(prompt)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Reads a String from standard input&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="prompt" eType="/1/standard/String"/>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="kunit" nsURI="http://www.kermeta.org/kermeta/kunit" nsPrefix="kunit">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * main features of the famous Unit test tool for Kermeta language&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/kunit_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="InvalidTestCaseNameException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * This exception is rose if there is a problem on the name of the test method&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="InvalidParameterException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * This is for when we try to build a suite from a class that isn't a TestCase&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Fallible" abstract="true" eSuperTypes="/1/kunit/AbstractFallible">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * This is represents the aspect of tests that they may go wrong.&#xD;&#xA; * it defines the ability to define the conditions for success&#xD;&#xA; * (assertions) and the mechanism for recording that those &#xD;&#xA; * conditions have not been met.&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="assertTrue">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertTrue">
            <details key="body" value="do&#xA;&#x9;assert(condition)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is false&#xD;&#xA;   */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="getLog" eType="/1/kunit/Log">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;   * where failures will be put &#xD;&#xA;   */"/>
            <details key="EMF_renameAs" value="getLogKermeta"/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="logDefined" value="result.isNotEqual(void)"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="assertFalseWithMsg">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertFalseWithMsg">
            <details key="body" value="do&#xA;&#x9;assertWithMsg(condition.~not, message)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is true&#xD;&#xA;   */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
          <eParameters name="message" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="fail">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/fail">
            <details key="body" value="do&#xA;&#x9;if mustStop then&#xA;&#x9;&#x9;var exception : kermeta::kunit::AssertionFailedError init kermeta::kunit::AssertionFailedError.new&#xA;&#x9;&#x9;exception.message := &quot;explicit failure: &quot;.plus(msg)&#xA;&#x9;&#x9;raise exception&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;getLog.addFailure(self, &quot;explicit failure: &quot;.plus(msg))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure &#xD;&#xA;   */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assertEqual">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertEqual">
            <details key="body" value="do&#xA;&#x9;assertWithMsg(expected.equals(actual), &quot;\nexpected\t:[&quot;.plus(expected).plus(&quot;] != \nactual\t:[&quot;).plus(actual).plus(&quot;]&quot;))&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if the two strings are not identical&#xD;&#xA;   */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="expected" eType="/1/standard/String"/>
          <eParameters name="actual" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assertFalse">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertFalse">
            <details key="body" value="do&#xA;&#x9;assert(condition.~not)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is true&#xD;&#xA;   */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="assertTrueWithMsg">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertTrueWithMsg">
            <details key="body" value="do&#xA;&#x9;assertWithMsg(condition, message)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is false&#xD;&#xA;   */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
          <eParameters name="message" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assert">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assert">
            <details key="body" value="do&#xA;&#x9;var number : kermeta::standard::Integer init self.number&#xA;&#x9;if condition.~not then&#xA;&#x9;&#x9;var msg : kermeta::standard::String init &quot;assertion number &quot;.plus(number.toString).plus(&quot; failed&quot;)&#xA;&#x9;&#x9;if mustStop then&#xA;&#x9;&#x9;&#x9;var exception : kermeta::kunit::AssertionFailedError init kermeta::kunit::AssertionFailedError.new&#xA;&#x9;&#x9;&#x9;exception.message := msg&#xA;&#x9;&#x9;&#x9;raise exception&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;getLog.addFailure(self, msg)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is false&#xD;&#xA;   */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="number" eType="/1/standard/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if rank.isVoid then&#xA;&#x9;&#x9;rank := 0&#xA;&#xA;&#x9;end&#xA;&#x9;rank := rank.plus(1)&#xA;&#x9;result := rank&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * current order position of counter of assertions&#xD;&#xA;   */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="assertWithMsg">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertWithMsg">
            <details key="body" value="do&#xA;&#x9;var number : kermeta::standard::Integer init self.number&#xA;&#x9;if condition.~not then&#xA;&#x9;&#x9;var realMsg : kermeta::standard::String init &quot;assertion number &quot;.plus(number.toString).plus(&quot; failed: &quot;).plus(msg)&#xA;&#x9;&#x9;if mustStop then&#xA;&#x9;&#x9;&#x9;var exception : kermeta::kunit::AssertionFailedError init kermeta::kunit::AssertionFailedError.new&#xA;&#x9;&#x9;&#x9;exception.message := realMsg&#xA;&#x9;&#x9;&#x9;raise exception&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;getLog.addFailure(self, realMsg)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if condition is false&#xD;&#xA;   */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="mustStop" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if stopOnFailure.isVoid then&#xA;&#x9;&#x9;stopOnFailure := true&#xA;&#xA;&#x9;end&#xA;&#x9;result := stopOnFailure&#xA;end"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="stopOnFailure" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Set this attribute to false if you wish your test to not stop if the assert fails.&#xD;&#xA;   * note : if set to false, the count of failures/errors may be bigger that the number of executed test operations&#xD;&#xA;   */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="rank" eType="/1/standard/Integer" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;   * counter of assertions in the test method&#xD;&#xA;   */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Log" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Log is a log of failures and errors that happened to fallibles since start was called&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="addSetUpError">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;harnessErrors.add(kermeta::kunit::Error.new.initFrom(test, e).makeSetUp)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds errors which occur durint the SetUp phase&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="test" eType="/1/kunit/Fallible"/>
          <eParameters name="e" eType="/1/exceptions/Exception"/>
        </eOperations>
        <eOperations name="addTestError">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;errors.add(kermeta::kunit::Error.new.initFrom(test, e))&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds an error to the list of errors&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="test" eType="/1/kunit/Fallible"/>
          <eParameters name="e" eType="/1/exceptions/Exception"/>
        </eOperations>
        <eOperations name="addFailure">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;failures.add(kermeta::kunit::Failure.new.initFrom(test, msg))&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds a failed test to the list of failed tests&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="test" eType="/1/kunit/Fallible"/>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="addTearDownError">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;harnessErrors.add(kermeta::kunit::Error.new.initFrom(test, e).makeTearDown)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Adds errors which occur durint the TearDown phase&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="test" eType="/1/kunit/Fallible"/>
          <eParameters name="e" eType="/1/exceptions/Exception"/>
        </eOperations>
        <eOperations name="newAttempt">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if runtests.equals(void) then&#xA;&#x9;&#x9;runtests := 0&#xA;&#xA;&#x9;end&#xA;&#x9;runtests := 1.plus(runtests)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Increments the runtests counter&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="failures" upperBound="-1" eType="/1/kunit/Failure">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * list of detected assertion failures&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="errors" upperBound="-1" eType="/1/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * list of detected test errors&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="runtests" eType="/1/standard/Integer" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * number of test that were run&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="harnessErrors" upperBound="-1" eType="/1/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9;* list of detected errors with the test harness&#xD;&#xA;&#x9;*/"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Failure" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Failure represents an assertion failure stored in a failure log&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result := failure.toString.plus(&quot; &quot;).plus(message)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * overwrite the default method, in order to add the message&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="initFrom" eType="/1/kunit/Failure">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;failure := fallible&#xA;&#x9;message := msg&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * initialization of the failure&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="fallible" eType="/1/kunit/Fallible"/>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="message" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="false"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the stored message (given or generated one)&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="failure" eType="/1/kunit/Fallible">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the stored failure&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="ErrorKind">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * all kinds of error we can meet&#xD;&#xA; */"/>
        </eAnnotations>
        <eLiterals name="setUpError" literal="setUpError"/>
        <eLiterals name="testError" value="1" literal="testError"/>
        <eLiterals name="tearDownError" value="2" literal="tearDownError"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Error" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Error represents an occurrence of an exception in setUp, tearDown or a test&#xD;&#xA; * and is stored in a failure log&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="makeTearDown" eType="/1/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;kind := kermeta::kunit::ErrorKind.tearDownError&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Changes the type of an error to makeTearDownError, the best way to use&#xD;&#xA;&#x9; * this method is to call it after the init from line:&#xD;&#xA;&#x9; * var e : Error init Error.new.initFrom(f, e).makeTearDown&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="makeSetUp" eType="/1/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;kind := kermeta::kunit::ErrorKind.setUpError&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Changes the type of an error to SetUpError, the best way to use&#xD;&#xA;&#x9; * this method is to call it after the init from line:&#xD;&#xA;&#x9; * var e : Error init Error.new.initFrom(f, e).makeSetUp&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;if kind.equals(kermeta::kunit::ErrorKind.testError) then&#xA;&#x9;&#x9;result := error.toString&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result := error.getMetaClass.name.plus(&quot;.&quot;)&#xA;&#x9;&#x9;if kind.equals(kermeta::kunit::ErrorKind.setUpError) then&#xA;&#x9;&#x9;&#x9;result := result.plus(&quot;setUp()&quot;)&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := result.plus(&quot;tearDown()&quot;)&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;&#x9;result := result.plus(&quot; raised &quot;).plus(exception.getMetaClass.name)&#xA;&#x9;if exception.message.isNotEqual(void) then&#xA;&#x9;&#x9;result := result.plus(&quot;\n    Caused by: &quot;).plus(exception.message)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result := result.plus(&quot;\n    (no message)&quot;)&#xA;&#xA;&#x9;end&#xA;&#x9;if exception.stackTrace.isNotEqual(void) then&#xA;&#x9;&#x9;result := result.plus(&quot;\n    Stack Trace:\n&quot;).plus(exception.stackTrace)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result := result.plus(&quot;\n    (no stack trace)&quot;)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * overwrite the default method, in order to add :&#xD;&#xA;&#x9; *   - the type&#xD;&#xA;&#x9; *   - the message&#xD;&#xA;&#x9; *   - the stack trace&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="initFrom" eType="/1/kunit/Error">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;self.error := error&#xA;&#x9;exception := e&#xA;&#x9;kind := kermeta::kunit::ErrorKind.testError&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Sets up a new error with failable object and the exception that occurred&#xD;&#xA;&#x9; * by default it will be a test error. Use makeSetUp or makeTearDown to&#xD;&#xA;&#x9; * change its type&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="error" eType="/1/kunit/Fallible"/>
          <eParameters name="e" eType="/1/exceptions/Exception"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="error" eType="/1/kunit/Fallible">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the stored error&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="exception" eType="/1/exceptions/Exception">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the Kermeta exception corresponding to the error&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="/1/kunit/ErrorKind">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the nature of the stored error&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Test" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The abstact notion of a test which is runnable and which has a log&#xD;&#xA; * in which it can keep note of failures&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="setLog">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;self.log := log&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Initializes the log where failures and errors will be put&#xD;&#xA;&#x9; */"/>
            <details key="EMF_renameAs" value="setLogKermeta"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="paramNotVoid" value="log.isNotEqual(void)"/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="logNotVoid" value="self.log.isNotEqual(void)"/>
          </eAnnotations>
          <eParameters name="log" eType="/1/kunit/Log"/>
        </eOperations>
        <eOperations name="run">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Execute the test and verify its assertions&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="logNotVoid" value="self.log.isNotEqual(void)"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="initLog" eType="/1/kunit/Log">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;self.log := kermeta::kunit::Log.new&#xA;&#x9;result := self.log&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * called when run by the java testrunner&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="log" eType="/1/kunit/Log">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;     * where failures and errors will be put &#xD;&#xA;     */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TestSuite" eSuperTypes="/1/kunit/Test">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * A TestSuite is a structured collection of tests, using the&#xD;&#xA; * composite pattern, all tests are runnable and have a log&#xD;&#xA; * In addition a suite can be populated automatically from a&#xD;&#xA; * test case class with one test case object for each test&#xD;&#xA; * method in the class.&#xD;&#xA; *  You can make a suite and populate it manually like this:&#xD;&#xA; *&#xD;&#xA; *  var suite : TestSuite init TestSuite.new.&#xD;&#xA; *  suite.tests.add(t1)&#xD;&#xA; *&#xD;&#xA; *  Alternatively you can populate a suite automatically from&#xD;&#xA; *  a class that inherits TestCase and which has several methods&#xD;&#xA; *  called test:&#xD;&#xA; *&#xD;&#xA; *  var suite : TestSuite init TestSuite.new.addAllTestCasesFrom(InterestingTestCaseSet)&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="addAllTestCasesFrom" eType="/1/kunit/TestSuite">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;if testCaseClass.superClass.exists{sc | do&#xA;&#x9;&#x9;&#x9;sc.equals(kermeta::kunit::TestCase)&#xA;&#x9;&#x9;end}.~not then&#xA;&#x9;&#x9;var e : kermeta::exceptions::Exception init kermeta::kunit::InvalidParameterException.new&#xA;&#x9;&#x9;e.message := &quot;Cannot build a suite from class: &quot;.plus(testCaseClass.name)&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;testCaseClass.ownedOperation.~select{o | do&#xA;&#x9;&#x9;&#x9;if o.name.size.isGreaterOrEqual(4) then&#xA;&#x9;&#x9;&#x9;&#x9;o.name.substring(0, 4).equals(&quot;test&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;false&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end}.each{o | do&#xA;&#x9;&#x9;&#x9;var testCase : kermeta::kunit::TestCase&#xA;&#x9;&#x9;&#x9;testCase ?= testCaseClass.new&#xA;&#x9;&#x9;&#x9;testCase.setTestMethodName(o.name)&#xA;&#x9;&#x9;&#x9;self.tests.add(testCase)&#xA;&#x9;&#x9;end}&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9;  * Add to this suite, a set of test cases of type c, one for each&#xD;&#xA;&#x9;  * test method in class c. C must be a descendent of TestCase&#xD;&#xA;&#x9;  */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="testCaseClassIsATestCase" value="testCaseClass.superClass.contains(kermeta::kunit::TestCase)"/>
          </eAnnotations>
          <eParameters name="testCaseClass" eType="/1/language/structure/Class"/>
        </eOperations>
        <eOperations name="run" ordered="false" eType="/1/standard/Void">
          <eAnnotations source="kermeta" references="/1/kunit/Test/run">
            <details key="body" value="do&#xA;&#x9;tests.each{t | do&#xA;&#x9;&#x9;&#x9;t.setLog(log)&#xA;&#x9;&#x9;&#x9;t.run&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/** &#xD;&#xA;&#x9; * Run all the tests in the test suite&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::kunit::Test"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="addAllTestCasesFromAspects">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;anAspect.ownedOperation.~select{o | do&#xA;&#x9;&#x9;&#x9;if o.name.size.isGreaterOrEqual(4) then&#xA;&#x9;&#x9;&#x9;&#x9;o.name.substring(0, 4).equals(&quot;test&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;false&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end}.each{o | do&#xA;&#x9;&#x9;&#x9;var testCase : kermeta::kunit::TestCase&#xA;&#x9;&#x9;&#x9;testCase ?= testCaseClass.new&#xA;&#x9;&#x9;&#x9;testCase.setTestMethodName(o.name)&#xA;&#x9;&#x9;&#x9;self.tests.add(testCase)&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9;  * to be written #####################################################&#xD;&#xA;&#x9;  */"/>
          </eAnnotations>
          <eParameters name="testCaseClass" eType="/1/language/structure/Class"/>
          <eParameters name="anAspect" eType="/1/language/structure/ClassDefinition"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="tests" upperBound="-1" eType="/1/kunit/Test">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * The collection of tests which will be ran as the suite&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TestCase" abstract="true" eSuperTypes="/1/kunit/Test /1/kunit/Fallible">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * A test case comprises one or more test methods plus&#xD;&#xA; * setUp and tearDown that build and destroy their test harness.&#xD;&#xA; * An instance of a subclass of TestCase should have its&#xD;&#xA; * testMethodName set to the name of one of its operations&#xD;&#xA; * which should be called whe the test is run. You can do this&#xD;&#xA; * yourself:&#xD;&#xA; *&#xD;&#xA; * var testCase : TestCase init MyTestCaseClass.new.setTestMethodName(&quot;testSomething&quot;)&#xD;&#xA; *&#xD;&#xA; * Alternatively if your TestCase Class has many methods whose&#xD;&#xA; * name begins with 'test' you can create a set of instaces already&#xD;&#xA; * set up with their testMethodName using the addAllTestCasesFrom&#xD;&#xA; * operation on TestSuite&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="setUp">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the things to be done before execution of the test method&#xD;&#xA;&#x9; * (designed to be overwritten in real TestCase classes) &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="raiseIfHasFailures">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;var msg : kermeta::standard::String init &quot;&quot;&#xA;&#x9;if log.failures.empty.~not then&#xA;&#x9;&#x9;msg := &quot;Failures: &quot;&#xA;&#x9;&#x9;log.failures.each{f | do&#xA;&#x9;&#x9;&#x9;&#x9;msg := msg.plus(&quot;\n   &quot;).plus(f.toString)&#xA;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;var exception : kermeta::kunit::AssertionFailedError init kermeta::kunit::AssertionFailedError.new&#xA;&#x9;&#x9;exception.message := msg&#xA;&#x9;&#x9;raise exception&#xA;&#xA;&#x9;end&#xA;&#x9;if log.errors.empty.~not then&#xA;&#x9;&#x9;log.errors.each{f | do&#xA;&#x9;&#x9;&#x9;&#x9;msg := &quot;Errors: &quot;&#xA;&#x9;&#x9;&#x9;&#x9;msg := msg.plus(&quot;\n   &quot;).plus(f.toString)&#xA;&#x9;&#x9;&#x9;&#x9;var exception : kermeta::exceptions::Exception init kermeta::exceptions::Exception.new&#xA;&#x9;&#x9;&#x9;&#x9;exception.message := msg&#xA;&#x9;&#x9;&#x9;&#x9;raise exception&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * operation used when the TestCase is run from a java test runner, encapsulates the failures results&#xD;&#xA;&#x9; * into an AssertionFailedError so the TestRunner can detect it&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getLog" eType="/1/kunit/Log">
          <eAnnotations source="kermeta" references="/1/kunit/Fallible/getLog">
            <details key="body" value="do&#xA;&#x9;result := self.log&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * accessor on the log&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::kunit::Fallible"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="setTestMethodName" eType="/1/kunit/TestCase">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;__testMethodName := name&#xA;&#x9;result := self&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Sets the name of the method from the concrete subclass of&#xD;&#xA;&#x9; *  TestCase that should be executed when this TestCase instance&#xD;&#xA;&#x9; * is run as a test.&#xD;&#xA;&#x9; * Throws invalidTestCaseNameException if the given string is not&#xD;&#xA;&#x9; * the name of a method in the test case&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eParameters name="name" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="getTestMethodName" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := __testMethodName&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * accessor on the method name&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="/1/standard/String">
          <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
            <details key="body" value="do&#xA;&#x9;result := self.getMetaClass.name.plus(&quot;.&quot;).plus(getTestMethodName).plus(&quot;()&quot;)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * overwrites the default method for more informative output&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="run" ordered="false" eType="/1/standard/Void">
          <eAnnotations source="kermeta" references="/1/kunit/Test/run">
            <details key="body" value="do&#xA;&#x9;getLog.newAttempt&#xA;&#x9;do&#xA;&#x9;&#x9;setUp&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;var de : kermeta::interpreter::DynamicExpression init kermeta::interpreter::DynamicExpression.new&#xA;&#x9;&#x9;&#x9;de.initializeDefaults&#xA;&#x9;&#x9;&#x9;de.selfClass ?= self.getMetaClass.typeDefinition&#xA;&#x9;&#x9;&#x9;de.parse(&quot;self.&quot;.plus(self.getTestMethodName))&#xA;&#x9;&#x9;&#x9;de.execute(self, kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::standard::Object>.new)&#xA;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;tearDown&#xA;&#x9;&#x9;&#x9;rescue(e : kermeta::exceptions::Exception)&#xA;&#x9;&#x9;&#x9;&#x9;getLog.addTearDownError(self, e)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;rescue(afe : kermeta::kunit::AssertionFailedError)&#xA;&#x9;&#x9;&#x9;getLog.addFailure(self, afe.message.plus(&quot;\nstack trace:\n&quot;).plus(afe.stackTrace))&#xA;&#xA;&#x9;&#x9;rescue(e1 : kermeta::exceptions::Exception)&#xA;&#x9;&#x9;&#x9;getLog.addTestError(self, e1)&#xA;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;tearDown&#xA;&#x9;&#x9;&#x9;rescue(e : kermeta::exceptions::Exception)&#xA;&#x9;&#x9;&#x9;&#x9;getLog.addTearDownError(self, e)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;rescue(e : kermeta::exceptions::Exception)&#xA;&#x9;&#x9;getLog.addSetUpError(self, e)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Execute the whole test case : SetUp, test method, TearDown&#xD;&#xA;&#x9; * The assertions of the test method are computed&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::kunit::Test"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="tearDown">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the things to be done after execution of the test method&#xD;&#xA;&#x9; * (designed to be overwritten in real TestCase classes) &#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="__testMethodName" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * the name of the method which corresponds to the test case in the test class&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TestRunner" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Create and use a test runner to run one or more tests and print the failure log. E.g.:&#xD;&#xA; * do&#xD;&#xA; *&#x9;     var suite : TestSuite init TestSuite.new.addAllTestCasesFrom(InterestingTestCaseSet)&#xD;&#xA; *&#x9;     var runner : TestRunner init TestRunner.new&#xD;&#xA; *&#x9;     runner.run(suite)&#xD;&#xA; *&#x9;     runner.printLogs&#xD;&#xA; * end&#xD;&#xA; *&#xD;&#xA; * Where InterestingTestCaseSet is a subclass of TestCase and contains several test... methods&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="runTest">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;log := kermeta::kunit::Log.new&#xA;&#x9;test.setLog(log)&#xA;&#x9;test.run&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Use this to run a test case or a test suite.&#xD;&#xA;&#x9; * If you want to run all the test.... methods in a TestCase class,&#xD;&#xA;&#x9; *  you can populate a suite with TestSuite.addAllTestCasesFrom&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="testNotVoid" value="test.isNotEqual(void)"/>
          </eAnnotations>
          <eAnnotations source="kermeta.post">
            <details key="logNotVoid" value="log.isNotEqual(void)"/>
          </eAnnotations>
          <eParameters name="test" eType="/1/kunit/Test"/>
        </eOperations>
        <eOperations name="printTestResult" ordered="false" eType="/1/standard/Void">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;stdio.writeln(&quot;\n---------------------------------------------  TEST RESULTS-----------------------------------------------\n&quot;)&#xA;&#x9;if log.failures.empty.~not then&#xA;&#x9;&#x9;stdio.writeln(&quot;\nFailures: &quot;)&#xA;&#x9;&#x9;log.failures.each{f | do&#xA;&#x9;&#x9;&#x9;&#x9;stdio.writeln(&quot;\n   &quot;.plus(f.toString))&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;if log.errors.empty.~not then&#xA;&#x9;&#x9;stdio.writeln(&quot;\nErrors: &quot;)&#xA;&#x9;&#x9;log.errors.each{e | do&#xA;&#x9;&#x9;&#x9;&#x9;stdio.writeln(&quot;\n   &quot;.plus(e.toString))&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;if log.harnessErrors.empty.~not then&#xA;&#x9;&#x9;stdio.writeln(&quot;\nErrors from setUp or tearDown : &quot;)&#xA;&#x9;&#x9;log.harnessErrors.each{e | do&#xA;&#x9;&#x9;&#x9;&#x9;stdio.writeln(&quot;\n   &quot;.plus(e.toString))&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;&#x9;stdio.writeln(&quot;\n Summary: &quot;)&#xA;&#x9;stdio.writeln(&quot;   Number of launched tests : &quot;.plus(log.runtests.toString))&#xA;&#x9;stdio.writeln(&quot;   Number of failures : &quot;.plus(log.failures.size.toString))&#xA;&#x9;stdio.writeln(&quot;   Number of errors : &quot;.plus(log.errors.size.toString))&#xA;&#x9;stdio.writeln(&quot;   Number of errors in setUp or tearDown: &quot;.plus(log.harnessErrors.size.toString))&#xA;&#x9;stdio.writeln(&quot;\n-------------------------------------------------------------------------------------------------------------------------------\n&quot;)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Prints the log or errors and failures from a test run.&#xD;&#xA;&#x9; * Run some tests first.&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="run">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;runTest(kermeta::kunit::TestSuite.new.addAllTestCasesFrom(testCaseClass))&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9;  * For backwards compatibility with old kunit, this takes a test case class&#xD;&#xA;&#x9;  * and creates the necessary suite, and runs it. DEPRECATED&#xD;&#xA;&#x9;  */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.pre">
            <details key="cIsATestCase" value="testCaseClass.superClass.contains(kermeta::kunit::TestCase)"/>
          </eAnnotations>
          <eParameters name="testCaseClass" eType="/1/language/structure/Class"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="log" eType="/1/kunit/Log" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Where to register the failures and errors&#xD;&#xA;&#x9; */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AbstractFallible" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * to be written ############################&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="assertTrue">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** process the given condition and react if it is not satisfied */"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="distil" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := &quot;&quot;&#xA;&#x9;var white : kermeta::standard::Boolean init false&#xA;&#x9;from var i : kermeta::standard::Integer init 0&#xA;&#x9;until i.equals(s.size)&#xA;&#x9;loop&#xA;&#x9;&#x9;var c : kermeta::standard::String init s.elementAt(i).toString&#xA;&#x9;&#x9;if &quot; \n\t&quot;.indexOf(c).isGreaterOrEqual(0) then&#xA;&#x9;&#x9;&#x9;if white.~not then&#xA;&#x9;&#x9;&#x9;&#x9;white := true&#xA;&#x9;&#x9;&#x9;&#x9;result := result.plus(&quot; &quot;)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;result := result.plus(c)&#xA;&#x9;&#x9;&#x9;if white then&#xA;&#x9;&#x9;&#x9;&#x9;white := false&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** &#xD;&#xA;&#x9; ** reduces all runs of white-space to a single space character&#xD;&#xA;&#x9; **/"/>
          </eAnnotations>
          <eParameters name="s" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assertFalseWithMsg">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;     * process the given condition and react with the given message&#xD;&#xA;     * if it is satisfied&#xD;&#xA;     */"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
          <eParameters name="message" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="fail">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** to be used if a failure reaction is needed */"/>
          </eAnnotations>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assertEqual">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** process the two given string and react if they are not equal */"/>
          </eAnnotations>
          <eParameters name="expected" eType="/1/standard/String"/>
          <eParameters name="actual" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assertFalse">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** process the given condition and react if it is satisfied */"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="assertTrueWithMsg">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;     * process the given condition and react with the given message&#xD;&#xA;     * if it is not satisfied&#xD;&#xA;     */"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
          <eParameters name="message" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assert">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** process the given condition and react if it is not satisfied */"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="assertSimilar">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;expected := distil(expected)&#xA;&#x9;actual := distil(actual)&#xA;&#x9;assertWithMsg(expected.equals(actual), &quot;\nexpected\t:[&quot;.plus(expected).plus(&quot;] != \nactual\t:[&quot;).plus(actual).plus(&quot;]&quot;))&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;   * Log a failure if the two strings are not identical modulo-white-space&#xD;&#xA;   */"/>
          </eAnnotations>
          <eParameters name="expected" eType="/1/standard/String"/>
          <eParameters name="actual" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assertWithMsg">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;     * process the given condition and react with the given message&#xD;&#xA;     * if it is not satisfied&#xD;&#xA;     */"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AssertionFailedError" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** AssertionViolatedException are raised when assertions are violated */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Assert" eSuperTypes="/1/kunit/AbstractFallible">
        <eOperations name="assertTrue">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertTrue">
            <details key="body" value="do&#xA;&#x9;if condition.~not then&#xA;&#x9;&#x9;fail(&quot;assertTrue failed&quot;)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is false */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="assertFalseWithMsg">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertFalseWithMsg">
            <details key="body" value="do&#xA;&#x9;if condition then&#xA;&#x9;&#x9;fail(&quot;assertTrueWithMsg failed : &quot;.plus(msg))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is true */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="fail">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/fail">
            <details key="body" value="do&#xA;&#x9;var exception : kermeta::kunit::AssertionFailedError init kermeta::kunit::AssertionFailedError.new&#xA;&#x9;exception.message := msg&#xA;&#x9;raise exception&#xA;end"/>
            <details key="documentation" value="/** raise a AssertionViolatedException with the provided message */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assertEqual">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertEqual">
            <details key="body" value="do&#xA;&#x9;if expected.equals(actual).~not then&#xA;&#x9;&#x9;fail(&quot;assertEqual failed\nexpected\t:[&quot;.plus(expected).plus(&quot;] != \nactual\t:[&quot;).plus(actual).plus(&quot;]&quot;))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** Will fail if the two strings are not identical */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="expected" eType="/1/standard/String"/>
          <eParameters name="actual" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assertFalse">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertFalse">
            <details key="body" value="do&#xA;&#x9;if condition then&#xA;&#x9;&#x9;fail(&quot;assertTrue number failed&quot;)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is true */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="assertTrueWithMsg">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertTrueWithMsg">
            <details key="body" value="do&#xA;&#x9;if condition.~not then&#xA;&#x9;&#x9;fail(&quot;assertTrueWithMsg failed : &quot;.plus(msg))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is false */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
        <eOperations name="assert">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assert">
            <details key="body" value="do&#xA;&#x9;if condition.~not then&#xA;&#x9;&#x9;fail(&quot;assert failed&quot;)&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** Fails if condition is false */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
        </eOperations>
        <eOperations name="assertWithMsg">
          <eAnnotations source="kermeta" references="/1/kunit/AbstractFallible/assertWithMsg">
            <details key="body" value="do&#xA;&#x9;if condition.~not then&#xA;&#x9;&#x9;fail(&quot;assertTrueWithMsg failed : &quot;.plus(msg))&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="documentation" value="/** will fail if condition is false */"/>
            <details key="superOperation" value="kermeta::kunit::AbstractFallible"/>
          </eAnnotations>
          <eParameters name="condition" eType="/1/standard/Boolean"/>
          <eParameters name="msg" eType="/1/standard/String"/>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="ecore" nsURI="http://www.kermeta.org/kermeta/ecore" nsPrefix="ecore">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Contains the definition of a Kermeta classes used for compatibility with Ecore &#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/ecore_compatibility_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Kermeta representation of EMF EFeatureMapEntry&#xD;&#xA; * it contains the name of the required feature and the actual value&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/ecore_compatibility_package.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" eType="/1/language/structure/Object" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="eStructuralFeatureName" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="language" nsURI="http://www.kermeta.org/kermeta/language" nsPrefix="language">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains the implementation of Kermeta reflective collections.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/language_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="ReflectiveCollection" eSuperTypes="/1/standard/Set">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * ReflectiveCollection is a special collection that is used to define the type &#xD;&#xA; * of attributes that have an upper multiplicity > 1 in a class. It indeed handles&#xD;&#xA; * the update of opposite property if such an attribute has got one.&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="clear">
          <eAnnotations source="kermeta" references="/1/standard/Collection/clear">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.clear(self)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::Collection&lt;G>.clear(G)&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Collection"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta" references="/1/standard/Set/remove">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.remove(self, element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::Set&lt;G>.remove(G)&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/language/ReflectiveCollection/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta" references="/1/standard/Set/add">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.add(self, element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::Set&lt;G>.add(G)&#xD;&#xA;&#x9; * Add an element to this collection and update its opposite property if it exists.&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::Set"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/language/ReflectiveCollection/G"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReflectiveSequence" eSuperTypes="/1/standard/OrderedSet /1/language/ReflectiveCollection">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * ReflectiveSequence is an ordered ReflectiveCollection.&#xD;&#xA; */"/>
        </eAnnotations>
        <eTypeParameters name="G"/>
        <eOperations name="clear">
          <eAnnotations source="kermeta" references="/1/language/ReflectiveCollection/clear">
            <details key="body" value="do&#xA;&#x9;super()&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::language::ReflectiveCollection&lt;G>.clear()&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::ReflectiveCollection"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="addAt">
          <eAnnotations source="kermeta" references="/1/standard/OrderedSet/addAt">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveSequence.addAt(self, index, element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::OrderedSet.addAt(Integer)&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::OrderedSet"/>
          </eAnnotations>
          <eParameters name="index" eType="/1/standard/Integer"/>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/language/ReflectiveSequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="removeAt">
          <eAnnotations source="kermeta" references="/1/standard/OrderedCollection/removeAt">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveSequence.removeAt(self, index)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::OrderedSet.removeAt(Integer)&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
          </eAnnotations>
          <eParameters name="index" eType="/1/standard/Integer"/>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta" references="/1/language/ReflectiveCollection/remove">
            <details key="body" value="do&#xA;&#x9;super(element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::language::ReflectiveCollection&lt;G>.remove(G)&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::ReflectiveCollection"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/language/ReflectiveSequence/G"/>
          </eParameters>
        </eOperations>
        <eOperations name="equals" eType="/1/standard/Boolean">
          <eAnnotations source="kermeta" references="/1/standard/OrderedSet/equals">
            <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::standard::OrderedSet.equals(Object)&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::standard::OrderedSet"/>
          </eAnnotations>
          <eParameters name="element" eType="/1/standard/Object"/>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta" references="/1/language/ReflectiveCollection/add">
            <details key="body" value="do&#xA;&#x9;super(element)&#xA;end"/>
            <details key="documentation" value="/**&#xD;&#xA;&#x9; * Overrides kermeta::language::ReflectiveCollection&lt;G>.add(G)&#xD;&#xA;&#x9; */"/>
            <details key="superOperation" value="kermeta::language::ReflectiveCollection"/>
          </eAnnotations>
          <eParameters name="element">
            <eGenericType eTypeParameter="/1/language/ReflectiveSequence/G"/>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DummyClass" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="This class is used to workaround an EMF bug, it doesn't really belong to Kermeta metamodel"/>
        </eAnnotations>
      </eClassifiers>
      <eSubpackages name="structure" nsURI="http://www.kermeta.org/kermeta/language/structure" nsPrefix="structure">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Contains the concrete implementation (including the operation bodies) &#xD;&#xA; * of the classes of the &lt;code>kermeta::reflection&lt;/code> package.&#xD;&#xA; * If you need more documentation, please take a look at the&#xD;&#xA; * &lt;code>kermeta::reflection&lt;/code> package which is more complete.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/language_structure_package.png&quot;/>&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/language_structure_visitor_view.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Object">
          <eOperations name="isSet" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isSet(self, ~property)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * True if the &lt;code>~property&lt;/code> of the object has been set&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="property" eType="/1/language/structure/Property"/>
          </eOperations>
          <eOperations name="get" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Object.get(self, ~property)&#xA;end"/>
              <details key="documentation" value="/** &#xD;&#xA;&#x9; * Returns the instances of the given property for this Object.&#xD;&#xA;&#x9; *&#xD;&#xA;&#x9; * Example : &#xD;&#xA;&#x9; * &lt;pre>&#xD;&#xA;&#x9; * class A { reference attr : String }&#xD;&#xA;&#x9; * &lt;/pre>&#xD;&#xA;&#x9; * Using A :&#xD;&#xA;&#x9; * &lt;pre>&#xD;&#xA;&#x9; * operation getAProp() is do&#xD;&#xA;&#x9; *    var a : A&#xD;&#xA;&#x9; *    var s : String&#xD;&#xA;&#x9; *    var the_attr : Property init self.getMetaClass.ownedAttribute.one&#xD;&#xA;&#x9; *    s ?= a.get(the_attr)&#xD;&#xA;&#x9; * end&#xD;&#xA;&#x9; * &lt;/pre>&#xD;&#xA;&#x9; * The user has to cast&#xD;&#xA;&#x9; * the result of this method according to the type and the upper multiplicity&#xD;&#xA;&#x9; * of this property. If upper multiplicity > 1, than the effective type of the &#xD;&#xA;&#x9; * result is a Sequence&lt;ThePropertyName>. Otherwise, the type corresponds to &#xD;&#xA;&#x9; * the name of the given Property (i.e the type of the property instance).&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="property" eType="/1/language/structure/Property"/>
          </eOperations>
          <eOperations name="isKindOf" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := self.getMetaClass.equals(cl)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the current Object is an instance of the given Class&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="cl" eType="/1/language/structure/Class"/>
          </eOperations>
          <eOperations name="equals" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.equals(self, element)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * semantic equality,&#xD;&#xA;&#x9; * if you wish to test for object identity you need to use the method oid&#xD;&#xA;&#x9; * ex: x.oid == y.oid&#xD;&#xA;&#x9; * by default, (ie. if not overloaded), the equals method for class Object implements &#xD;&#xA;&#x9; * the most discriminating possible equivalence relation on objects; that is, for any non-null &#xD;&#xA;&#x9; * reference values x and y, this method returns true if and only if x and y refer to the same &#xD;&#xA;&#x9; * object (x.oid == y.oid has the value true). &#xD;&#xA;&#x9; *&#xD;&#xA;&#x9; * note1: the operator == is mapped to this &#xD;&#xA;&#x9; * note2: overloading this operation have some impact on the behavior on collection and hashtable that rely on it&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="element" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="getMetaClass" eType="/1/language/structure/Class">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getMetaClass(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the Class object that is the metaclass of current Object&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="set">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if element.isInstanceOf(~property.type) then&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.~set(self, ~property, element)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var e : kermeta::exceptions::IncompatibleTypeError init kermeta::exceptions::IncompatibleTypeError.new&#xA;&#x9;&#x9;e.message := &quot;IncompatibleTypeError : Cannot set property &quot;.plus(~property.name).plus(&quot; of object &quot;).plus(self.toString).plus(&quot; to &quot;).plus(element.toString).plus(&quot;.&quot;)&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Sets the &lt;code>element&lt;/code> to the &lt;code>~property&lt;/code> of the object &#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="property" eType="/1/language/structure/Property"/>
            <eParameters name="element" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="isFrozen" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isFrozen(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Object is currently in a&#xD;&#xA;&#x9; * frozen state&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="hashcode" eType="/1/language/structure/Integer">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.hashcode(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * code used in hashtable in order to identify an object in the hashtable keys&#xD;&#xA;&#x9; * This system is similar to the hashcode used in java. Please refer to java documentation&#xD;&#xA;&#x9; * for more information about hashcode&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="checkInvariants">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.checkInvariants(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Runs checking of invariants defined for the metaclass of the Object&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="isVoid" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := false&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the Object is Void&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="isNotEqual" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := equals(element).~not&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * See kermeta::language::structure::Object.equals(Object)&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="element" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="freeze">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.freeze(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Freeze the Object&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="unset">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.unSet(self, ~property)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Remove the element set as the &lt;code>~property&lt;/code> of the object.&#xD;&#xA;&#x9; * The &lt;code>isSet(~property)&lt;/code> method will then return False&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="property" eType="/1/language/structure/Property"/>
          </eOperations>
          <eOperations name="oid" eType="/1/language/structure/Integer">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.oid(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the unique Oid of the Object&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="container" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Object.container(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the Object that contains current Object, void if the Object has&#xD;&#xA;&#x9; * no container&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="containingResource" eType="/1/persistence/Resource">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getContainingResource(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the Resource currently containing (directly or indirectly) the Object &#xD;&#xA;&#x9; * or void if the object belongs to no Resource&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="isInstanceOf" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isInstanceOf(self, type)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a Boolean stating whether the current Object conforms to given Type&#xD;&#xA;&#x9; * This means: is this object an instance of this type, or is it an instance of its subtype &#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="type" eType="/1/language/structure/Type"/>
          </eOperations>
          <eOperations name="asType" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if isInstanceOf(type) then&#xA;&#x9;&#x9;result := self&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;raise kermeta::exceptions::TypeCastError.new&#xA;&#xA;&#x9;end&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Implementation of OCL like cast. It returns self if the object object conforms to the type given as parameter.&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="type" eType="/1/language/structure/Class"/>
          </eOperations>
          <eOperations name="checkAllInvariants">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;if self.isNotEqual(void) then&#xA;&#x9;&#x9;self.checkInvariants&#xA;&#x9;&#x9;var cd : kermeta::language::structure::ClassDefinition&#xA;&#x9;&#x9;cd ?= self.getMetaClass.typeDefinition&#xA;&#x9;&#x9;cd.allAttribute.each{subObj | do&#xA;&#x9;&#x9;&#x9;&#x9;if subObj.isComposite then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if self.get(subObj).getMetaClass.typeDefinition.name.equals(&quot;ReflectiveSequence&quot;).~or(self.get(subObj).getMetaClass.typeDefinition.name.equals(&quot;ReflectiveCollection&quot;)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var subObjInstances : kermeta::standard::Collection&lt;kermeta::language::structure::Object>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;subObjInstances ?= self.get(subObj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;subObjInstances.each{aSubObjInstances | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;aSubObjInstances.checkAllInvariants&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.get(subObj).checkAllInvariants&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Recursively runs checking of invariants defined for the metaclass of the Object&#xD;&#xA;&#x9; * and its supertypes&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="toString" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := &quot;[&quot;.plus(self.getMetaClass.typeDefinition.qualifiedName).plus(&quot;:&quot;).plus(oid.toString).plus(&quot;]&quot;)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Implements Object.toString()&#xD;&#xA; &#x9; * Returns a String of form [qn:oid] where 'qn' is the qualified name of&#xD;&#xA; &#x9; * the object type, and oid the unique ID of the object&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="tag" upperBound="-1" eType="/1/language/structure/Tag" eOpposite="/1/language/structure/Tag/object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="An Object can be tagged by a Tag. &#xA;They are typically used to put comments/documentation on the object"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTags" upperBound="-1" eType="/1/language/structure/Tag" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="An object can contains a Tag.  &#xA;Be careful, owning a tag doesn't means that the tag applies to the Object&#xA;To know which Tags apply to the object use the &quot;tag&quot; reference"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelType" eSuperTypes="/1/language/structure/Type /1/language/structure/TypeDefinition /1/language/structure/Object">
          <eOperations name="new" eType="/1/language/structure/Model">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::ModelType.newObject(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * To be written ##########################################&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="isModelTypeOf" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::ModelType.isModelTypeOf(self, m)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * To be written ##########################################&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="m" eType="/1/language/structure/Model"/>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="includedTypeDefinition" upperBound="-1" eType="/1/language/structure/TypeDefinition">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="/1/language/structure/ParameterizedType /1/language/structure/Object">
          <eOperations name="clone" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta" references="/1/language/structure/Type/clone">
              <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Class.cloneObject(self, objectToClone)&#xA;end"/>
              <details key="superOperation" value="kermeta::language::structure::Type"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="new" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Class.newObject(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Instantiates a new occurence for this Class&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eOperations name="deepClone" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta" references="/1/language/structure/Type/deepClone">
              <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Class.deepCloneObject(self, objectToClone)&#xA;end"/>
              <details key="superOperation" value="kermeta::language::structure::Type"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="equals" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta" references="/1/language/structure/Object/equals">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.equals(self, other)&#xA;end"/>
              <details key="superOperation" value="kermeta::language::structure::Object"/>
            </eAnnotations>
            <eParameters name="other" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="toString" eType="/1/language/structure/String">
            <eAnnotations source="kermeta" references="/1/language/structure/Object/toString">
              <details key="body" value="do&#xA;&#x9;result := self.typeDefinition.name&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the String representation of this class. &#xD;&#xA;&#x9; *  Note : throws an exception if this class has no classDefinition&#xD;&#xA;&#x9; *  or if the classDefinition is not well constructed.&#xD;&#xA;&#x9; */"/>
              <details key="superOperation" value="kermeta::language::structure::Object"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" ordered="false" upperBound="-1" eType="/1/language/structure/Operation" changeable="false" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;&#x9;var cDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.ownedOperation&#xA;end"/>
            </eAnnotations>
            <eAnnotations source="kermeta">
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="superClass" upperBound="-1" eType="/1/language/structure/Class" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Returns the Classes of which the ClassDefinition of this Class inherits."/>
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.setter">
              <details key="body" value="do&#xA;   //TODO: implement setterfor derived property superClass&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;&#x9;var cDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;var supertypes : kermeta::standard::OrderedSet&lt;kermeta::language::structure::Class> init kermeta::standard::OrderedSet&lt;kermeta::language::structure::Class>.new&#xA;&#x9;cDef.superType.each{elem | do&#xA;&#x9;&#x9;&#x9;if kermeta::language::structure::Class.isInstance(elem) then&#xA;&#x9;&#x9;&#x9;&#x9;var c : kermeta::language::structure::Class&#xA;&#x9;&#x9;&#x9;&#x9;c ?= elem&#xA;&#x9;&#x9;&#x9;&#x9;supertypes.add(c)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end}&#xA;&#x9;result := supertypes&#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="/1/language/structure/Boolean" changeable="false" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;&#x9;var cDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.isAbstract&#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/language/structure/String" changeable="false" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;&#x9;result := typeDefinition.name&#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classDefinition" eType="/1/language/structure/ClassDefinition" changeable="false" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the ClassDefinition for this class&#xD;&#xA;&#x9; */"/>
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;&#x9;result ?= typeDefinition&#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1" eType="/1/language/structure/Property" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Returns the Attributes, References, and derived Properties owned by&#xA;the ClassDefinition of this Class."/>
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.setter">
              <details key="body" value="do&#xA;   //TODO: implement setterfor derived property ownedAttribute&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;&#x9;var cDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.ownedAttribute&#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ClassDefinition" eSuperTypes="/1/language/structure/GenericTypeDefinition /1/language/structure/TypeContainer /1/language/structure/Object">
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" upperBound="-1" eType="/1/language/structure/Operation" containment="true" eOpposite="/1/language/structure/Operation/owningClass">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Operations owned by this ClassDefinition."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating whether the ClassDefinition is abstract (which means that&#xA;no instance can be allocated)"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="superType" upperBound="-1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Classes from which this ClassDefinition inherits."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="inv" upperBound="-1" eType="/1/language/structure/Constraint" containment="true" eOpposite="/1/language/structure/Constraint/invOwner">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Invariants defined for this ClassDefinition"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="allOperation" ordered="false" upperBound="-1" eType="/1/language/structure/Operation" changeable="false" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns all the Operations of this ClassDefinition&#xD;&#xA;&#x9; * including the inherited ones&#xD;&#xA;&#x9; */"/>
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::language::structure::Operation>.new&#xA;&#x9;result.addAll(self.ownedOperation)&#xA;&#x9;self.superType.each{t | do&#xA;&#x9;&#x9;&#x9;if kermeta::language::structure::Class.isInstance(t) then&#xA;&#x9;&#x9;&#x9;&#x9;var c : kermeta::language::structure::Class&#xA;&#x9;&#x9;&#x9;&#x9;c ?= t&#xA;&#x9;&#x9;&#x9;&#x9;var cDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;&#x9;&#x9;&#x9;cDef ?= c.typeDefinition&#xA;&#x9;&#x9;&#x9;&#x9;cDef.allOperation.each{p | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(p)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end}&#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="allAttribute" ordered="false" upperBound="-1" eType="/1/language/structure/Property" changeable="false" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns all the Attributes, References, derived Properties of this &#xD;&#xA;&#x9; * ClassDefinition including the inherited ones&#xD;&#xA;&#x9; */"/>
              <details key="isReadOnly" value="true"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::language::structure::Property>.new&#xA;&#x9;result.addAll(self.ownedAttribute)&#xA;&#x9;self.superType.each{t | do&#xA;&#x9;&#x9;&#x9;if kermeta::language::structure::Class.isInstance(t) then&#xA;&#x9;&#x9;&#x9;&#x9;var c : kermeta::language::structure::Class&#xA;&#x9;&#x9;&#x9;&#x9;c ?= t&#xA;&#x9;&#x9;&#x9;&#x9;var cDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;&#x9;&#x9;&#x9;cDef ?= c.typeDefinition&#xA;&#x9;&#x9;&#x9;&#x9;cDef.allAttribute.each{p | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(p)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end}&#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1" eType="/1/language/structure/Property" containment="true" eOpposite="/1/language/structure/Property/owningClass">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Attributes, References, and derived Properties owned by this ClassDefinition."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Model" eSuperTypes="/1/language/structure/Object">
          <eOperations name="addCompatible" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;contents&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Model.addCompatible(self, objectToAdd)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Add the Object if it is copmpatible with the ModelDefinition. Other objects are ignored.&#xD;&#xA; &#x9; * Returns the object if it has been added (One can check that some element have been ignored or not)&#xD;&#xA; &#x9; * return Void if not added&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eParameters name="objectToAdd" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="remove">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.remove(contents, obj)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Remove an object from the model&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eParameters name="obj" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="addAllCompatible">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::language::structure::Object>.new&#xA;&#x9;objectsToAdd.each{obj | do&#xA;&#x9;&#x9;&#x9;var addedObject : kermeta::language::structure::Object init addCompatible(obj)&#xA;&#x9;&#x9;&#x9;if addedObject.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;result.add(obj)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end}&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Add all the Object of the collection that are copmpatible with the ModelDefinition. Other objects are ignored.&#xD;&#xA; &#x9; * Returns the list of Object that have been added (One can check that some element have been ignored or not)&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eGenericType eClassifier="/1/standard/Collection">
              <eTypeArguments eClassifier="/1/language/structure/Object"/>
            </eGenericType>
            <eParameters name="objectsToAdd">
              <eGenericType eClassifier="/1/standard/Collection">
                <eTypeArguments eClassifier="/1/language/structure/Object"/>
              </eGenericType>
            </eParameters>
          </eOperations>
          <eOperations name="add">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;contents&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Model.add(self, obj)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Add an object to the model. According to the ModelType, the typechecker will statically verify if the object can be added or not&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eParameters name="obj" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="filter" ordered="false" upperBound="-1" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := contents.~select{o | do&#xA;&#x9;&#x9;&#x9;typeName.isInstance(o)&#xA;&#x9;&#x9;end}.asSet&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Returns a set of all the elements of the model that are instance of the given Type&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eParameters name="typeName" eType="/1/language/structure/Type"/>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="contents" upperBound="-1" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Contents of this model..."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Type" eSuperTypes="/1/language/structure/Object">
          <eOperations name="clone" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="isAbstract" value="true"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a copy of passed Object built by recursively copying attribute&#xD;&#xA;&#x9; * properties, and referencing original reference properties values&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="isSuperTypeOf" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Type.hasSubType(self, object)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Implements Type.isSuperTypeOf(Type)&#xD;&#xA; &#x9; * For technical reason, the current implementation works only with Type that comes from a kermeta declaration (ie. in a require)&#xD;&#xA; &#x9; * it won't work with Type created programmaticaly by the user. If you need that, please ask to the kermeta developpers&#xD;&#xA; &#x9; * to extend it.&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eParameters name="object" eType="/1/language/structure/Type"/>
          </eOperations>
          <eOperations name="deepClone" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="isAbstract" value="true"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns a copy of passed Object built by recursively copying values of&#xD;&#xA;&#x9; * all properties, no matter the property kind&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="isInstance" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := element.isInstanceOf(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Implements Type.isInstance(Object)&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
            <eParameters name="element" eType="/1/language/structure/Object"/>
          </eOperations>
          <eOperations name="isSubTypeOf" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;result := object.isSuperTypeOf(self)&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA; &#x9; * Implements Type.isSubTypeOf(Type)&#xD;&#xA; &#x9; * For technical reason, the current implementation works only with Type that comes from a kermeta declaration (ie. in a require)&#xD;&#xA; &#x9; * it won't work with Type created programmaticaly by the user. If you need that, please ask to the kermeta developpers&#xD;&#xA; &#x9; * to extend it.&#xD;&#xA; &#x9; */"/>
            </eAnnotations>
            <eParameters name="object" eType="/1/language/structure/Type"/>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeContainer" eType="/1/language/structure/TypeContainer" eOpposite="/1/language/structure/TypeContainer/containedType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning TypeContainer, if any"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="NamedElement" eSuperTypes="/1/language/structure/Object">
          <eOperations name="qualifiedName" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="body" value="do&#xA;&#x9;var elem : kermeta::language::structure::NamedElement init self&#xA;&#x9;result := self.name&#xA;&#x9;from elem ?= elem.container&#xA;&#x9;until elem.equals(void)&#xA;&#x9;loop&#xA;&#x9;&#x9;result := elem.name.plus(&quot;::&quot;).plus(result)&#xA;&#x9;&#x9;elem ?= elem.container&#xA;&#x9;end&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Returns the qualified name of this named element. Qualified name is &#xD;&#xA;&#x9; * the list of the names of the packages hierarchically ordered, delimited by&#xD;&#xA;&#x9; * a &quot;::&quot;, followed by the name of this named element.&#xD;&#xA;&#x9; */"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Name of this named element"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="/1/language/structure/DataType /1/language/structure/Object">
          <eOperations name="clone" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta" references="/1/language/structure/Type/clone">
              <details key="body" value="do&#xA;&#x9;raise &quot;NOT IMPLEMENTED&quot;&#xA;end"/>
              <details key="documentation" value="/**&#xD;&#xA;&#x9; * Implements kermeta::language::structure::Type.clone(Object)&#xD;&#xA;&#x9; */"/>
              <details key="superOperation" value="kermeta::language::structure::Type"/>
            </eAnnotations>
            <eParameters name="objectToClone" eType="/1/language/structure/Object"/>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" upperBound="-1" eType="/1/language/structure/EnumerationLiteral" containment="true" eOpposite="/1/language/structure/EnumerationLiteral/enumeration">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owned items in an Enumeration"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="FunctionType" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/Type /1/language/structure/Object">
          <eAnnotations source="kermeta.inv">
            <details key="resultType" value="right.isKindOf(kermeta::language::structure::ProductType).~not"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="left" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Parameters of the function (a ProductType for multiple parameters)"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="right" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Result type of the function"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String"/>
        <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean"/>
        <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="/1/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Every one knows what an operation is."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" upperBound="-1" eType="/1/language/structure/TypeVariable">
            <eAnnotations source="kermeta">
              <details key="documentation" value="TypeParameters of the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the Operation, expressed as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1" eType="/1/language/structure/Parameter" containment="true" eOpposite="/1/language/structure/Parameter/operation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Parameters of the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="post" upperBound="-1" eType="/1/language/structure/Constraint" containment="true" eOpposite="/1/language/structure/Constraint/postOwner">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Post-conditions of the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating whether the Operation is abstract"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="raisedException" upperBound="-1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Exceptions raised by the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="pre" upperBound="-1" eType="/1/language/structure/Constraint" containment="true" eOpposite="/1/language/structure/Constraint/preOwner">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Pre-conditions of the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="superOperation" eType="/1/language/structure/Operation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Super-operation of the Operation, if any"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="/1/language/structure/ClassDefinition" eOpposite="/1/language/structure/ClassDefinition/ownedOperation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="ClassDefinition owning the Operation"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="/1/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Class representing the property definition. Kermeta&lt;->Ecore equivalence:&#xA; - Property with isComposite == true or with type is a base type (String, Integer, Boolean)  : EAttribute&#xA; - Property with isComposite == false : EReference"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="default" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="opposite" eType="/1/language/structure/Property">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Opposite Property of the Property, void if the Property has no opposite"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="If True, the value of the property is not stored but computed from other properties"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="getterBody" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating whether the Property is read-only"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="setterBody" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="/1/language/structure/ClassDefinition" eOpposite="/1/language/structure/ClassDefinition/ownedAttribute">
            <eAnnotations source="kermeta">
              <details key="documentation" value="ClassDefinition that owns the Property"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isID" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating whether the property allows to identify its containing Object"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isSetterAbstract" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating wether the setter is abstract."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isGetterAbstract" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating wether the getter is abstract."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isComposite" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating whether the Property has a containment role"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeContainer" abstract="true" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Phantom class : EMF reflexive editors need that any element of a metamodel &#xA;has a direct or indirect containment relationship with the root model element of&#xA;the metamodel. This class resolves this technical requirement."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="containedType" upperBound="-1" eType="/1/language/structure/Type" containment="true" eOpposite="/1/language/structure/Type/typeContainer">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Contained types"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="/1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Item definition for enumeration"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="/1/language/structure/Enumeration" eOpposite="/1/language/structure/Enumeration/ownedLiteral">
            <eAnnotations source="kermeta">
              <details key="ecore.isTransient" value="true"/>
              <details key="documentation" value="Owning Enumeration"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeVariableBinding" eSuperTypes="/1/language/structure/TypeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Definition of a binding between a TypeVariable and a Type"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Assigned Type"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="variable" lowerBound="1" eType="/1/language/structure/TypeVariable">
            <eAnnotations source="kermeta">
              <details key="documentation" value="TypeVariable"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer"/>
        <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" eSuperTypes="/1/language/structure/TypedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value=" Model elements with a multiplicity [lower..upper] inherit this class"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating whether the element is ordered"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" eType="/1/language/structure/UnlimitedNatural">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Max cardinality of the element, '-1' for '*'"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" eType="/1/language/structure/Integer">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Min cardinality of the element"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating whether duplicated elements are allowed"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Integer"/>
        <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstraction of the notion of typed element : each element &#xA;that is typed inherits this class."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type of the model element"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeDefinition" eSuperTypes="/1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstraction for type definitions (ClassDefinition, ModelTypeDefinition, DataType inherit&#xA;this class)"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAspect" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DataType" abstract="true" eSuperTypes="/1/language/structure/Type /1/language/structure/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Special type definition for Enumeration, PrimitiveType"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="/1/language/structure/TypeDefinitionContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Package in kermeta. Each kermeta model must have a root package. "/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="nestingPackage" eType="/1/language/structure/Package" eOpposite="/1/language/structure/Package/nestedPackage">
            <eAnnotations source="kermeta">
              <details key="ecore.isTransient" value="true"/>
              <details key="documentation" value="Owning Package, if any"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="nestedPackage" upperBound="-1" eType="/1/language/structure/Package" containment="true" eOpposite="/1/language/structure/Package/nestingPackage">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Nested Packages contained by the Package"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Uri of the Package"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="/1/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Definition for operation parameter"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="operation" eType="/1/language/structure/Operation" eOpposite="/1/language/structure/Operation/ownedParameter">
            <eAnnotations source="kermeta">
              <details key="ecore.isTransient" value="true"/>
              <details key="documentation" value="Owning operation"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="/1/language/structure/DataType /1/language/structure/TypeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="The class definition for kermeta aliases. Above statement defines a primitive&#xD;&#xA;type called MyString, which instanceType is &lt;code>kermeta::standard::String&lt;/code>&#xD;&#xA;&lt;pre>alias MyString : kermeta::standard::String&lt;/pre>. Another example could be: &lt;code>root::apackage::AClass&lt;/code>&#xD;&#xA;&lt;pre>alias MyClass : root::apackage::AClass&lt;/pre>, thus a primitive type may be not a subtype of ValueType (ValueType is a concept from the Kermeta framework)."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="instanceType" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The type the primitive type is linked with"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Tag" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Tag is intended to be used to add documentation on a  model element,&#xA;or add some textual information that cannot be expressed with any&#xA;model element definition."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Name of the Tag"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="String value of the Tag"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="object" lowerBound="1" upperBound="-1" eType="/1/language/structure/Object" eOpposite="/1/language/structure/Object/tag">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Objects to which the Tag is attached to"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Constraint" eSuperTypes="/1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Constraint is part of a contract implementation in a Class definition or an operation.&#xA;Three kinds of constraints are available : pre, post, and inv (invariant constraint)"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" ordered="false" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the constraint, expressed as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="preOwner" eType="/1/language/structure/Operation" eOpposite="/1/language/structure/Operation/pre">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning Operation if Constraint corresponds to pre-condition"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="stereotype" eType="/1/language/structure/ConstraintType">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Type of the Constraint (precond/postcond/inv)"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="postOwner" eType="/1/language/structure/Operation" eOpposite="/1/language/structure/Operation/post">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning Operation if Constraint corresponds to post-condition"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" eType="/1/language/structure/ConstraintLanguage">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Language in which the constraint is expressed"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="invOwner" eType="/1/language/structure/ClassDefinition" eOpposite="/1/language/structure/ClassDefinition/inv">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Owning ClassDefinition if Constraint corresponds to invariant"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ConstraintType">
          <eLiterals name="inv" literal="inv"/>
          <eLiterals name="pre" value="1" literal="pre"/>
          <eLiterals name="post" value="2" literal="post"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ConstraintLanguage">
          <eLiterals name="kermeta" literal="kermeta"/>
          <eLiterals name="ocl" value="1" literal="ocl"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="GenericTypeDefinition" abstract="true" eSuperTypes="/1/language/structure/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstracts the definition of generic type definitions (i.e. type definitions that&#xA;can be parameterized), namely, for ClassDefinition and ModelTypeDefinition."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" upperBound="-1" eType="/1/language/structure/TypeVariable" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type variables defined for the GenericTypeDefinition"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ParameterizedType" abstract="true" eSuperTypes="/1/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstraction for Parameterized types, namely, Class and ModelType"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding" upperBound="-1" eType="/1/language/structure/TypeVariableBinding" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Bindings between type variables and provided types "/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeDefinition" lowerBound="1" eType="/1/language/structure/GenericTypeDefinition">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Definition of the Type"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="virtualTypeBinding" upperBound="-1" eType="/1/language/structure/TypeVariableBinding" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeVariable" abstract="true" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/Type /1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Definition of a type variable for generic types :  &#xA;in class definition &lt;pre>class AClass&lt;X,Y> {}&lt;/pre>, X and Y are type variables."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="supertype" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Reference to the supertype, if any"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ObjectTypeVariable" eSuperTypes="/1/language/structure/TypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelTypeVariable" eSuperTypes="/1/language/structure/TypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="virtualType" upperBound="-1" eType="/1/language/structure/VirtualType" containment="true" eOpposite="/1/language/structure/VirtualType/modelType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VirtualType" eSuperTypes="/1/language/structure/ObjectTypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelType" lowerBound="1" eType="/1/language/structure/ModelTypeVariable" eOpposite="/1/language/structure/ModelTypeVariable/virtualType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding" upperBound="-1" eType="/1/language/structure/TypeVariableBinding" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classDefinition" lowerBound="1" eType="/1/language/structure/ClassDefinition">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelingUnit" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="The modeling unit is the root of any kermeta model. It contains packages, requires and usings.&#xA;It also reference others modeling unit."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="usings" upperBound="-1" eType="/1/language/structure/Using" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Set of &quot;using&quot; statement associated with this ModelingUnit. Ie. list of &quot;syntatic shortcut&quot;&#xA;that can be used within this unit."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="packages" upperBound="-1" eType="/1/language/structure/Package" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="root packages contained by this ModelingUnit"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="includeFilters" upperBound="-1" eType="/1/language/structure/Filter" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="list of filters that apply to this modeling unit.&#xA;This means that if the same unit was loaded without this filters, it would have loaded more content&#xA;only element whose qualified name begins with one of these filter will be loaded in the unit"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="excludeFilters" upperBound="-1" eType="/1/language/structure/Filter" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="list of filters that apply to this modeling unit.&#xA;This means that if the same unit was loaded without this filters, it would have loaded more content&#xA;element whose qualified name begins with one of these filter will NOT be loaded in the unit"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="referencedModelingUnits" upperBound="-1" eType="/1/language/structure/ModelingUnit">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="requires" upperBound="-1" eType="/1/language/structure/Require" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Set of &quot;require&quot; statements associated with this ModelingUnit. Ie. list of the other&#xA;files required to run this unit"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Require" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Using" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="To be written"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Filter" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Filter is the class that represent a filter on a ModelingUnit.&#xA;the qualifiedName represent the beginning of the matched names"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ProductType" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Type corresponding to a set of Types&#xA;Only used in the context of FunctionType"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" unique="false" upperBound="-1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Types "/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VoidType" eSuperTypes="/1/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Class definition for the &lt;pre>Void&lt;/pre> type"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeDefinitionContainer" abstract="true" eSuperTypes="/1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Abstraction of the notion of containment for type definitions. Now, kermeta metamodel contains one container&#xA;element, that is Package. In a later release, ModelTypeDefinition will be the main container for type and&#xA;package definition."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTypeDefinition" upperBound="-1" eType="/1/language/structure/TypeDefinition" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Contained TypeDefinitions"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="behavior" nsURI="http://www.kermeta.org/kermeta/1_2_0//kermeta/language/behavior" nsPrefix="behavior">
        <eClassifiers xsi:type="ecore:EClass" name="CallExpression" abstract="true" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Any callable expression inherits this class, e.g : &#xA;  - variable call&#xA;  - feature call ( &lt;code>a.b&lt;/code> : b is a feature call)&#xA;&#xA;&lt;img alt=&quot;&quot;  height=&quot;90%&quot; width=&quot;90%&quot;  src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_call_expressions.png&quot; />"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticTypeVariableBindings" upperBound="-1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="A call must be named"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Kermeta calls can embedd expressions as parameters"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Expression" abstract="true" eSuperTypes="/1/language/structure/TypeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="The base class for every entity used to define a behavior in operation body."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticType" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type of the Expression (set by type checking)"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallVariable" eSuperTypes="/1/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="We call &quot;CallVariable&quot; the use of a variable in a statement.&#xA;in &lt;code>i := j + 1&lt;/code>, i and j are 2 CallVariables."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAtpre" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Tells whether this CallVariable represents a call to @pre in a postcondition"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallFeature" eSuperTypes="/1/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="CallFeature is the model element that refers to the use of a feature, i.e either &#xA;a property or an operation in a statement. In &lt;code>stdio.writeln(&quot;hello&quot;)&lt;/code>, &#xA;&lt;code>writeln&lt;/code> is a CallFeature."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticOperation" eType="/1/language/structure/Operation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The method which will be executed (operation case)&#xA;and the result value passed to the caller"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAtpre" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Tells whether this CallFeature represents a call to @pre in a postcondition"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="target" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Target Expression (the owner of the feature)"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticEnumLiteral" eType="/1/language/structure/EnumerationLiteral">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticProperty" eType="/1/language/structure/Property">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The object which will be returned (property case)"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallSuperOperation" eSuperTypes="/1/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This class represents a call to the operataion in the parent class&#xA;&#x9;In the following example, the type of super(element) is CallSuperOperation:&#xA;&#xA;class ParentClass {&#xA;  operation op(element : Integer) : Integer is do&#xA;      result := element + 1&#xA;  end&#xA;}&#xA; *&#xA;class ChildClass {&#xA;  method op(element : Integer) : Integer is do&#xA;      result := super(element)&#xA;  end&#xA;}"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallResult" eSuperTypes="/1/language/behavior/CallVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This class represents a call to the special internal variable &quot;result&quot; that is used to store the return value of any operation "/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallValue" eSuperTypes="/1/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="CallValue refers to the use of the &lt;code>value&lt;/code> reserved keyword. This keyword is&#xA;only used in the body of the &lt;code>setter&lt;/code> part of derived properties."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Assignment" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Assignment is the model-element representation of the assignment statement &lt;code>x := y&lt;/code>&#xA;&lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_assign_expressions.png&quot;/>"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Value to be assigned, as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1" eType="/1/language/behavior/CallExpression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Target of the assignment, as a CallExpression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isCast" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Boolean stating whether current assignment corresponds to a cast operation "/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Block" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Block is the model-element representation for the &lt;code>do...end&lt;/code> block."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="statement" upperBound="-1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="List of statements composing the block"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="rescueBlock" upperBound="-1" eType="/1/language/behavior/Rescue" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="List of rescues defined for the block"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Conditional" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Condition is the model-element representation for the &lt;code>&lt;/code> "/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="thenBody" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Then part of the conditional statement"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="condition" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Condition expression of conditional statement"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="elseBody" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Optional else part of the conditional statement"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Raise" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to raise exception block"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="expression" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written #######################"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Rescue" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to rescue exception block"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="exceptionName" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Name of the catched exception"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1" upperBound="-1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the rescue block, specified as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="exceptionType" lowerBound="1" eType="/1/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type of the cathed exception"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeReference" eSuperTypes="/1/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="TypeReference refers to the type used in a variable declaration"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Literal" abstract="true" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Literal refers to String values, Integer values, etc."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="EmptyExpression" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="As suggested by its name, this class represents an expression that do nothing. Like a &quot;nop&quot;"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="JavaStaticCall" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This class represent a call to an extern Java operation. &#xA;This Java operation must be static and have at least one RuntimeO"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="jmethod" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Name of the Java method to be launched in the identified Java class"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="jclass" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Qualified name of the targeted Java class"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Parameters of the Java static call provided as KerMeta expressions"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="LambdaExpression" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to lambda expression definition (&lt;code>function { e | stdio.writeln(e.toString) }&lt;/code>)&#xA;&lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_lambda_expressions.png&quot;/>"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the lambda expression providede as a KerMeta expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1" eType="/1/language/behavior/LambdaParameter" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Parameters of the lambda expression"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="LambdaParameter" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to parameter definition in lambda expression"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Name of the lambda parameter"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="/1/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="To be written ################################"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="IntegerLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This expression is a literal representing an Integer value"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="/1/language/structure/Integer">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="The concrete value represented by this literal"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="StringLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This expression is a literal representing a String value, typically : &quot;my string&quot;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="The concrete value represented by this literal"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="BooleanLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This expression is a literal representing a Boolean value, typically : true or false keyword"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="The concrete value represented by this literal"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This expression is a literal representing a Type.&#xA;for example, in &#xA;   Integer.new&#xA;Integer is a type literal representing the type kermeta::standard::Integer"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeref" lowerBound="1" eType="/1/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="The type refered by this literal"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VoidLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="This class is used to represent the special expression void"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Loop" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Loop refers to &lt;code>from var x : X init a until booleanCondition loop ... end&lt;/code>"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="initialization" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Initialization expression for the loop"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Body of the loop"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="stopCondition" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Stop condition of the loop, is interpreted as a Bollean value"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SelfExpression" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="Refers to &lt;code>self&lt;/code> use"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VariableDecl" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="refers to variable declaration &lt;code>var x : X init a&lt;/code>&#xA;&lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_var_expressions.png&quot;/>"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="initialization" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Initialization expression for the variable&#xA;Default value is &lt;code>void&lt;/code> ????"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="/1/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="Type of the declared variable"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="identifier" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="Initialization expression for the variable&#xA;Default value is &lt;code>void&lt;/code> ????"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
    <eSubpackages name="exceptions" nsURI="http://www.kermeta.org/kermeta/exceptions" nsPrefix="exceptions">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Contains the definition of a Kermeta exception and a few basic exceptions.&#xD;&#xA; * &lt;img src=&quot;platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/exceptions_package.png&quot;/>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Exception" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Generic exceptions&#xD;&#xA; * The main class from which all the exception inherit&#xD;&#xA; */"/>
          <details key="EMF_instanceClassName" value="java.lang.Exception"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="message" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/** The message attached to the exception     */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="nestedException" eType="/1/exceptions/Exception" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** Any nested exception     */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="stackTrace" eType="/1/standard/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/**&#xD;&#xA;     * The stack trace as a String&#xD;&#xA;     * Filled by the interpreted when the exception is raised&#xD;&#xA;     */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RuntimeError" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Exception for interpreter exceptions */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="/1/language/behavior/Expression" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** The code that raised the exception */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallOnVoidTarget" eSuperTypes="/1/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when a feature is called on void */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeCastError" eSuperTypes="/1/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Occurs when a cast (Object::asType operation) fails&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NotImplementedException" eSuperTypes="/1/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Use this exception when you want to forbid the access to an unimplemented operation &#xD;&#xA; * and invite to implement it&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="UpperBoundReachedError" eSuperTypes="/1/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** &#xD;&#xA; * Use this exception when user tries to add an element to a property which type is collection&#xD;&#xA; * which has an upper bound != -1 ( ie *)&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AbstractClassInstantiationError" eSuperTypes="/1/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Creation on an abstract class. Usually this is detected by the type-checker. The only&#xD;&#xA; * case where this happens is when instantiating a type variable, whose bound type turns&#xD;&#xA; * out to be abstract.&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IncompatibleTypeError" eSuperTypes="/1/exceptions/RuntimeError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Raised by the Object::set operation if the type of the &#xD;&#xA; * Object to set has an incompatible type.&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DivisionByZero" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** well-known attempt to divide with a zero valued divider */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OverflowError" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the figure oversteps the capacity of the numeric variable */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VoidOperandError" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** one of the required operands is void */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringIndexOutOfBound" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the data overstep the size of the string variable */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringFormatException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * to be written #########################################&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IndexOutOfBound" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when trying to access out of bounds elements */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EmptyCollection" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when trying to access element on an empty collection */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IteratorIsOff" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Occurs when calling next() operation while iterator is already&#xD;&#xA; * positioned on the last element of a collection&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IOException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** an interaction with the underlying system failed */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FileNotFoundException" eSuperTypes="/1/exceptions/IOException">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the file has not be found on the underlying system */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConstraintViolatedPre" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the pre-condition is not satisfied */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConstraintViolatedPost" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** the post-condition is not satisfied */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConstraintViolatedInv" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** some fixes declared in the invariant condition ave been changed */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceLoadException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when Resource loading fails for some reasons */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceSaveException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when Resource saving fails for some reasons */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceCreateException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Occurs when trying to crate a Resource already existing in the Repository */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceUnconformityException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Raised when user tries to add an object that is not conform to the metamodel */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DynamicExpressionException" eSuperTypes="/1/exceptions/Exception">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * to be written #########################################&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EAnnotation source="dependentResource"/>
</xmi:XMI>
