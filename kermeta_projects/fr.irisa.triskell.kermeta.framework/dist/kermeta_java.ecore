<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EAnnotation source="ModelingUnit">
    <details key="require" value="kermeta|"/>
  </ecore:EAnnotation>
  <ecore:EPackage name="kermeta" nsURI="http://www.kermeta.org/kermeta/1_0_0//kermeta" nsPrefix="kermeta">
    <eClassifiers xsi:type="ecore:EClass" name="DummyClass" abstract="true" eSuperTypes="/1/language/structure/Object">
      <eAnnotations source="kermeta">
        <details key="documentation" value="This class is used to workaround an EMF bug, it doesn't really belong to Kermeta metamodel"/>
      </eAnnotations>
    </eClassifiers>
    <eSubpackages name="language" nsURI="http://www.kermeta.org/kermeta/1_0_0//kermeta/language" nsPrefix="language">
      <eClassifiers xsi:type="ecore:EClass" name="DummyClass" abstract="true" eSuperTypes="/1/language/structure/Object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="This class is used to workaround an EMF bug, it doesn't really belong to Kermeta metamodel"/>
        </eAnnotations>
      </eClassifiers>
      <eSubpackages name="behavior" nsURI="http://www.kermeta.org/kermeta/1_0_0//kermeta/language/behavior" nsPrefix="behavior">
        <eClassifiers xsi:type="ecore:EClass" name="CallExpression" abstract="true" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Any callable expression inherits this class, e.g : &#xA; *   - variable call&#xA; *   - feature call ( &lt;code>a.b&lt;/code> : b is a feature call)&#xA; *&#xA; * &lt;img alt=&quot;&quot;  height=&quot;90%&quot; width=&quot;90%&quot;  src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_call_expressions.png&quot; />&#xA; *&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Kermeta calls can embedd expressions as parameters&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * A call must be named&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticTypeVariableBindings" upperBound="-1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * to be written #########################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Expression" abstract="true" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * The base class for every entity used to define a behavior in operation body.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticType" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Type of the Expression (set by type checking)&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallVariable" eSuperTypes="/1/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * We call &quot;CallVariable&quot; the use of a variable in a statement.&#xA; * in &lt;code>i := j + 1&lt;/code>, i and j are 2 CallVariables.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAtpre" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Tells whether this CallVariable represents a call to @pre in a postcondition&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallFeature" eSuperTypes="/1/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * CallFeature is the model element that refers to the use of a feature, i.e either &#xA; * a property or an operation in a statement. In &lt;code>stdio.writeln(&quot;hello&quot;)&lt;/code>, &#xA; * &lt;code>writeln&lt;/code> is a CallFeature.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="target" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Target Expression (the owner of the feature)&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAtpre" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Tells whether this CallFeature represents a call to @pre in a postcondition&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticProperty" eType="/1/language/structure/Property">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * The object which will be returned (property case)&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticOperation" eType="/1/language/structure/Operation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * The method which will be executed (operation case)&#xA; * and the result value passed to the caller&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="staticEnumLiteral" eType="/1/language/structure/EnumerationLiteral">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written #################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallSuperOperation" eSuperTypes="/1/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * This class represents a call to the operataion in the parent class&#xA; *&#x9;In the following example, the type of super(element) is CallSuperOperation:&#xA; *&#xA; * class ParentClass {&#xA; *   operation op(element : Integer) : Integer is do&#xA; *       result := element + 1&#xA; *   end&#xA; * }&#xA; *&#xA; * class ChildClass {&#xA; *   method op(element : Integer) : Integer is do&#xA; *       result := super(element)&#xA; *   end&#xA; * }&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallResult" eSuperTypes="/1/language/behavior/CallVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * This class represents a call to the special internal variable &quot;result&quot; that is used to store the return value of any operation &#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallValue" eSuperTypes="/1/language/behavior/CallExpression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * CallValue refers to the use of the &lt;code>value&lt;/code> reserved keyword. This keyword is&#xA; * only used in the body of the &lt;code>setter&lt;/code> part of derived properties.&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Assignment" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Assignment is the model-element representation of the assignment statement &lt;code>x := y&lt;/code>&#xA; * &lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_assign_expressions.png&quot;/>&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1" eType="/1/language/behavior/CallExpression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Target of the assignment, as a CallExpression&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Value to be assigned, as a KerMeta expression&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isCast" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating whether current assignment corresponds to a cast operation &#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Block" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Block is the model-element representation for the &lt;code>do...end&lt;/code> block.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="statement" upperBound="-1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * List of statements composing the block&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="rescueBlock" upperBound="-1" eType="/1/language/behavior/Rescue" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * List of rescues defined for the block&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Conditional" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Condition is the model-element representation for the &lt;code>&lt;/code> &#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="thenBody" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Then part of the conditional statement&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="elseBody" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Optional else part of the conditional statement&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="condition" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Condition expression of conditional statement&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Raise" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Refers to raise exception block&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="expression" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written #######################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Rescue" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Refers to rescue exception block&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1" upperBound="-1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Body of the rescue block, specified as a KerMeta expression&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="exceptionType" lowerBound="1" eType="/1/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Type of the cathed exception&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="exceptionName" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Name of the catched exception&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeReference" eSuperTypes="/1/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * TypeReference refers to the type used in a variable declaration&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Literal" abstract="true" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Literal refers to String values, Integer values, etc.&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="EmptyExpression" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * As suggested by its name, this class represents an expression that do nothing. Like a &quot;nop&quot;&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="JavaStaticCall" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * This class represent a call to an extern Java operation. &#xA; * This Java operation must be static and have at least one RuntimeO&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Parameters of the Java static call provided as KerMeta expressions&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="jclass" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Qualified name of the targeted Java class&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="jmethod" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Name of the Java method to be launched in the identified Java class&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="LambdaExpression" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Refers to lambda expression definition (&lt;code>function { e | stdio.writeln(e.toString) }&lt;/code>)&#xA; * &lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_lambda_expressions.png&quot;/>&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1" eType="/1/language/behavior/LambdaParameter" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Parameters of the lambda expression&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Body of the lambda expression providede as a KerMeta expression&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="LambdaParameter" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Refers to parameter definition in lambda expression&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Name of the lambda parameter&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="/1/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written ################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="IntegerLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * This expression is a literal representing an Integer value&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="/1/language/structure/Integer">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * The concrete value represented by this literal&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="StringLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * This expression is a literal representing a String value, typically : &quot;my string&quot;&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * The concrete value represented by this literal&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="BooleanLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * This expression is a literal representing a Boolean value, typically : true or false keyword&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * The concrete value represented by this literal&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * This expression is a literal representing a Type.&#xA; * for example, in &#xA; *    Integer.new&#xA; * Integer is a type literal representing the type kermeta::standard::Integer&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeref" lowerBound="1" eType="/1/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * The type refered by this literal&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VoidLiteral" eSuperTypes="/1/language/behavior/Literal">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * This class is used to represent the special expression void&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Loop" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Loop refers to &lt;code>from var x : X init a until booleanCondition loop ... end&lt;/code>&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="initialization" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Initialization expression for the loop&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Body of the loop&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="stopCondition" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Stop condition of the loop, is interpreted as a Bollean value&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SelfExpression" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Refers to &lt;code>self&lt;/code> use&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VariableDecl" eSuperTypes="/1/language/behavior/Expression">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * refers to variable declaration &lt;code>var x : X init a&lt;/code>&#xA; * &lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_var_expressions.png&quot;/>&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="initialization" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Initialization expression for the variable&#xA; * Default value is &lt;code>void&lt;/code> ????&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="identifier" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Initialization expression for the variable&#xA; * Default value is &lt;code>void&lt;/code> ????&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="/1/language/behavior/TypeReference" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Type of the declared variable&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="structure" nsURI="http://www.kermeta.org/kermeta/1_0_0//kermeta/language/structure" nsPrefix="structure">
        <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String"/>
        <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean"/>
        <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="/1/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Every one knows what an operation is.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating whether the Operation is abstract&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="raisedException" upperBound="-1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Exceptions raised by the Operation&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1" eType="/1/language/structure/Parameter" containment="true" eOpposite="/1/language/structure/Parameter/operation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Parameters of the Operation&#xA; */&#xA;"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="pre" upperBound="-1" eType="/1/language/structure/Constraint" containment="true" eOpposite="/1/language/structure/Constraint/preOwner">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Pre-conditions of the Operation&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="post" upperBound="-1" eType="/1/language/structure/Constraint" containment="true" eOpposite="/1/language/structure/Constraint/postOwner">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Post-conditions of the Operation&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Body of the Operation, expressed as a KerMeta expression&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="superOperation" eType="/1/language/structure/Operation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Super-operation of the Operation, if any&#xA; */&#x9;"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="/1/language/structure/ClassDefinition" eOpposite="/1/language/structure/ClassDefinition/ownedOperation">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * ClassDefinition owning the Operation&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" upperBound="-1" eType="/1/language/structure/TypeVariable">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * TypeParameters of the Operation&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="/1/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Class representing the property definition. Kermeta&lt;->Ecore equivalence:&#xA; *  - Property with isComposite == true or with type is a base type (String, Integer, Boolean)  : EAttribute&#xA; *  - Property with isComposite == false : EReference&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="opposite" eType="/1/language/structure/Property">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Opposite Property of the Property, void if the Property has no opposite&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="/1/language/structure/Boolean" defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating whether the Property is read-only&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="default" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * To be written #######################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isComposite" eType="/1/language/structure/Boolean" defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating whether the Property has a containment role&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" eType="/1/language/structure/Boolean" defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * If True, the value of the property is not stored but computed from other properties&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isID" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating whether the property allows to identify its containing Object&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="getterBody" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written ################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="setterBody" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written ####################################&#xA; */&#xA;"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isGetterAbstract" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating wether the getter is abstract.&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isSetterAbstract" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating wether the setter is abstract.&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="/1/language/structure/ClassDefinition" eOpposite="/1/language/structure/ClassDefinition/ownedAttribute">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * ClassDefinition that owns the Property&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Type" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Base class definition for the &lt;b>use&lt;/b> of a type.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeContainer" eType="/1/language/structure/TypeContainer" eOpposite="/1/language/structure/TypeContainer/containedType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Owning TypeContainer, if any&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeContainer" abstract="true" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Phantom class : EMF reflexive editors need that any element of a metamodel &#xA; * has a direct or indirect containment relationship with the root model element of&#xA; * the metamodel. This class resolves this technical requirement.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="containedType" upperBound="-1" eType="/1/language/structure/Type" containment="true" eOpposite="/1/language/structure/Type/typeContainer">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Contained types&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="/1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Item definition for enumeration&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="/1/language/structure/Enumeration" eOpposite="/1/language/structure/Enumeration/ownedLiteral">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Owning Enumeration&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeVariableBinding" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Definition of a binding between a TypeVariable and a Type&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="variable" lowerBound="1" eType="/1/language/structure/TypeVariable">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * TypeVariable&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Assigned Type&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="/1/language/structure/ParameterizedType">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Returns the Attributes, References, and derived Properties owned by&#xA; * the ClassDefinition of this Class.&#xA; */"/>
          </eAnnotations>
          <eOperations name="_new">
            <eAnnotations source="kermeta">
              <details key="isAbstract" value="true"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1" eType="/1/language/structure/Property" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Returns the Attributes, References, and derived Properties owned by&#xA; * the ClassDefinition of this Class.&#xA; */"/>
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.setter">
              <details key="body" value="do&#xA;   //TODO: implement setterfor derived property ownedAttribute&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;   //TODO: implement getterfor derived property ownedAttribute&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" upperBound="-1" eType="/1/language/structure/Operation" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Returns the Operations owned by the ClassDefinition of this Class.&#xA; */"/>
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.setter">
              <details key="body" value="do&#xA;   //TODO: implement setterfor derived property ownedOperation&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;   //TODO: implement getterfor derived property ownedOperation&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="superClass" upperBound="-1" eType="/1/language/structure/Class" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Returns the Classes of which the ClassDefinition of this Class inherits.&#xA; */"/>
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.setter">
              <details key="body" value="do&#xA;   //TODO: implement setterfor derived property superClass&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;   //TODO: implement getterfor derived property superClass&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="/1/language/structure/Boolean" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
              <details key="documentation" value="/**&#xA; * Returns a Boolean stating whether ClassDefinition of this Class is abstract.&#xA; */ &#xA;"/>
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.setter">
              <details key="body" value="do&#xA;   //TODO: implement setterfor derived property isAbstract&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;   //TODO: implement getterfor derived property isAbstract&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/language/structure/String" volatile="true" transient="true" derived="true">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="false"/>
              <details key="documentation" value="/**&#xA; * Returns the name of the ClassDefinition of this Class&#xA; */"/>
              <details key="isReadOnly" value="false"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.setter">
              <details key="body" value="do&#xA;   //TODO: implement setterfor derived property name&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
            <eAnnotations source="kermetaderivedProp.getter">
              <details key="body" value="do&#xA;   //TODO: implement getterfor derived property name&#xA;   raise kermeta::exceptions::NotImplementedException.new &#xA;end"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xA; * Object definition: all entities of Kermeta metamodel explicitly inherit from Object&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="tag" upperBound="-1" eType="/1/language/structure/Tag" eOpposite="/1/language/structure/Tag/object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * An Object can be tagged by a Tag. &#xA; * They are typically used to put comments/documentation on the object&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTags" upperBound="-1" eType="/1/language/structure/Tag" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * An object can contains a Tag.  &#xA; * Be careful, owning a tag doesn't means that the tag applies to the Object&#xA; * To know which Tags apply to the object use the &quot;tag&quot; reference&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Model" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Is the holder of a set of model elements (Object) that are compatible with the ModelType that has &#xA; * instantiated this Model.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="contents" upperBound="-1" eType="/1/language/structure/Object">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Contents of this model ...&#xA; */&#xA;"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelType" eSuperTypes="/1/language/structure/Type /1/language/structure/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Type of a model, consisting of a set of included type definitions&#xA; */"/>
          </eAnnotations>
          <eOperations name="_new">
            <eAnnotations source="kermeta">
              <details key="isAbstract" value="true"/>
            </eAnnotations>
          </eOperations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="includedTypeDefinition" upperBound="-1" eType="/1/language/structure/TypeDefinition">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written #######################################&#xA; */&#xA;"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer"/>
        <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" eSuperTypes="/1/language/structure/TypedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; *  Model elements with a multiplicity [lower..upper] inherit this class&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" eType="/1/language/structure/Boolean" defaultValueLiteral="false">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating whether the element is ordered&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="/1/language/structure/Boolean" defaultValueLiteral="true">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating whether duplicated elements are allowed&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" eType="/1/language/structure/Integer">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Min cardinality of the element&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" eType="/1/language/structure/UnlimitedNatural">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Max cardinality of the element, '-1' for '*'&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeDefinition" eSuperTypes="/1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Abstraction for type definitions (ClassDefinition, ModelTypeDefinition, DataType inherit&#xA; * this class)&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAspect" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DataType" abstract="true" eSuperTypes="/1/language/structure/Type /1/language/structure/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Special type definition for Enumeration, PrimitiveType&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="/1/language/structure/DataType">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Definition for Enumeration&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" upperBound="-1" eType="/1/language/structure/EnumerationLiteral" containment="true" eOpposite="/1/language/structure/EnumerationLiteral/enumeration">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Owned items in an Enumeration&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Any element that contain a  name (example : Operation, Property) inherit this&#xA; * class.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Name of this named element&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="/1/language/structure/NamedElement /1/language/structure/TypeDefinitionContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Package in kermeta. Each kermeta model must have a root package. &#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="nestedPackage" upperBound="-1" eType="/1/language/structure/Package" containment="true" eOpposite="/1/language/structure/Package/nestingPackage">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Nested Packages contained by the Package&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="nestingPackage" eType="/1/language/structure/Package" eOpposite="/1/language/structure/Package/nestedPackage">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Owning Package, if any&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Uri of the Package&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="/1/language/structure/MultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Definition for operation parameter&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="operation" eType="/1/language/structure/Operation" eOpposite="/1/language/structure/Operation/ownedParameter">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Owning operation&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="/1/language/structure/DataType /1/language/structure/TypeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * The class definition for kermeta aliases. Above statement defines a primitive&#xA; * type called MyString, which instanceType is &lt;code>kermeta::standard::String&lt;/code>&#xA; * &lt;pre>alias MyString : kermeta::standard::String&lt;/pre>&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="instanceType" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * The type the primitive type is linked with&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Abstraction of the notion of typed element : each element &#xA; * that is typed inherits this class.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Type of the model element&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Integer"/>
        <eClassifiers xsi:type="ecore:EClass" name="Tag" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Tag is intended to be used to add documentation on a  model element,&#xA; * or add some textual information that cannot be expressed with any&#xA; * model element definition.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Name of the Tag&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * String value of the Tag&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="object" lowerBound="1" upperBound="-1" eType="/1/language/structure/Object" eOpposite="/1/language/structure/Object/tag">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Objects to which the Tag is attached to&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Constraint" eSuperTypes="/1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Constraint is part of a contract implementation in a Class definition or an operation.&#xA; * Three kinds of constraints are available : pre, post, and inv (invariant constraint)&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" ordered="false" lowerBound="1" eType="/1/language/behavior/Expression" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Body of the constraint, expressed as a KerMeta expression&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="stereotype" eType="/1/language/structure/ConstraintType">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Type of the Constraint (precond/postcond/inv)&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" eType="/1/language/structure/ConstraintLanguage">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Language in which the constraint is expressed&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="invOwner" eType="/1/language/structure/ClassDefinition" eOpposite="/1/language/structure/ClassDefinition/inv">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Owning ClassDefinition if Constraint corresponds to invariant&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="preOwner" eType="/1/language/structure/Operation" eOpposite="/1/language/structure/Operation/pre">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Owning Operation if Constraint corresponds to pre-condition&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="postOwner" eType="/1/language/structure/Operation" eOpposite="/1/language/structure/Operation/post">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Owning Operation if Constraint corresponds to post-condition&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ConstraintLanguage">
          <eLiterals name="kermeta" literal="kermeta"/>
          <eLiterals name="ocl" value="1" literal="ocl"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ClassDefinition" eSuperTypes="/1/language/structure/GenericTypeDefinition /1/language/structure/TypeContainer">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * The definition of a class definition :)&#xA; *  &lt;pre>class A&#xA; *{ &#xA; *   attribute s : String&#xA; *}&#xA; *   &lt;/pre> is a class definition; in :&#xA; * &lt;pre>&#xA; * main() : A is do end&#xA; * &lt;/pre>&#xA; * A is a &lt;b>Class&lt;/b> : it corresponds to the &lt;b>use&lt;/b> of the class definition of A&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="inv" upperBound="-1" eType="/1/language/structure/Constraint" containment="true" eOpposite="/1/language/structure/Constraint/invOwner">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Invariants defined for this ClassDefinition&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="/1/language/structure/Boolean">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * Boolean stating whether the ClassDefinition is abstract (which means that&#xA; * no instance can be allocated)&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1" eType="/1/language/structure/Property" containment="true" eOpposite="/1/language/structure/Property/owningClass">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Attributes, References, and derived Properties owned by this ClassDefinition.&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" upperBound="-1" eType="/1/language/structure/Operation" containment="true" eOpposite="/1/language/structure/Operation/owningClass">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Operations owned by this ClassDefinition.&#xA; */&#xA;"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="superType" upperBound="-1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Classes from which this ClassDefinition inherits.&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ConstraintType">
          <eLiterals name="inv" literal="inv"/>
          <eLiterals name="pre" value="1" literal="pre"/>
          <eLiterals name="post" value="2" literal="post"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="GenericTypeDefinition" abstract="true" eSuperTypes="/1/language/structure/TypeDefinition">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xA; * Abstracts the definition of generic type definitions (i.e. type definitions that&#xA; * can be parameterized), namely, for ClassDefinition and ModelTypeDefinition.&#xA; */&#xA;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" upperBound="-1" eType="/1/language/structure/TypeVariable" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Type variables defined for the GenericTypeDefinition&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ParameterizedType" abstract="true" eSuperTypes="/1/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Abstraction for Parameterized types, namely, Class and ModelType&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="virtualTypeBinding" upperBound="-1" eType="/1/language/structure/TypeVariableBinding" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written #################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding" upperBound="-1" eType="/1/language/structure/TypeVariableBinding" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Bindings between type variables and provided types &#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeDefinition" lowerBound="1" eType="/1/language/structure/GenericTypeDefinition">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Definition of the Type&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeVariable" abstract="true" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/Type /1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Definition of a type variable for generic types :  &#xA; * in class definition &lt;pre>class AClass&lt;X,Y> {}&lt;/pre>, X and Y are type variables.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="supertype" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Reference to the supertype, if any&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ObjectTypeVariable" eSuperTypes="/1/language/structure/TypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * To be written ######################################&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VirtualTypeContainer" abstract="true" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * To be written #################################&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="virtualType" upperBound="-1" eType="/1/language/structure/VirtualType" containment="true" eOpposite="/1/language/structure/VirtualType/modelType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written #################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelTypeVariable" eSuperTypes="/1/language/structure/VirtualTypeContainer /1/language/structure/TypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * To be written #################################&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VirtualType" eSuperTypes="/1/language/structure/ObjectTypeVariable">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * To be written #################################&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classDefinition" lowerBound="1" eType="/1/language/structure/ClassDefinition">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written #################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelType" lowerBound="1" eType="/1/language/structure/VirtualTypeContainer" eOpposite="/1/language/structure/VirtualTypeContainer/virtualType">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written #################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding" upperBound="-1" eType="/1/language/structure/TypeVariableBinding" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written #################################&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelingUnit" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * The modeling unit is the root of any kermeta model. It contains packages, requires and usings.&#xA; * It also reference others modeling unit.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="packages" upperBound="-1" eType="/1/language/structure/Package" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * root packages contained by this ModelingUnit&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="requires" upperBound="-1" eType="/1/language/structure/Require" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Set of &quot;require&quot; statements associated with this ModelingUnit. Ie. list of the other&#xA; * files required to run this unit&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="usings" upperBound="-1" eType="/1/language/structure/Using" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Set of &quot;using&quot; statement associated with this ModelingUnit. Ie. list of &quot;syntatic shortcut&quot;&#xA; * that can be used within this unit.&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="referencedModelingUnits" upperBound="-1" eType="/1/language/structure/ModelingUnit">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * To be written&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="includeFilters" upperBound="-1" eType="/1/language/structure/Filter" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * list of filters that apply to this modeling unit.&#xA; * This means that if the same unit was loaded without this filters, it would have loaded more content&#xA; * only element whose qualified name begins with one of these filter will be loaded in the unit&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="excludeFilters" upperBound="-1" eType="/1/language/structure/Filter" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * list of filters that apply to this modeling unit.&#xA; * This means that if the same unit was loaded without this filters, it would have loaded more content&#xA; * element whose qualified name begins with one of these filter will NOT be loaded in the unit&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Require" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * To be written&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * To be written&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Using" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * To be written&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * To be written&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Filter" eSuperTypes="/1/language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Filter is the class that represent a filter on a ModelingUnit.&#xA; * the qualifiedName represent the beginning of the matched names&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="/1/language/structure/String">
            <eAnnotations source="kermeta">
              <details key="isComposite" value="true"/>
              <details key="documentation" value="/**&#xA; * To be written&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ProductType" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Type corresponding to a set of Types&#xA; * Only used in the context of FunctionType&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" unique="false" upperBound="-1" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Types &#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="FunctionType" eSuperTypes="/1/language/structure/TypeContainer /1/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Type used to define the use of lambda expressions.&#xA; *  Uses :&#xA; *  &lt;pre>operation forAll(func : &lt;G -> Boolean>) : Boolean is do&#xA; *      var test : Boolean init true&#xA; *      from var it : Iterator&lt;G> init iterator&#xA; *      until it.isOff&#xA; *      loop&#xA; *         test := test and func(it.next)&#xA; *      end&#xA; *      result := test&#xA; *  end&#xA; *  &lt;/pre>&#xA; *&#xA; *  In the above example, &amp;lt;G -> Boolean&amp;gt; is a function type f(G) -&amp;gt; &#xA; *  Boolean, with a parameter of type G and a return type of type Boolean&#xA; *  The operation &lt;code>forAll&lt;/code> takes a lambda expression as parameter.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="left" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Parameters of the function (a ProductType for multiple parameters)&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="right" eType="/1/language/structure/Type">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Result type of the function&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="VoidType" eSuperTypes="/1/language/structure/Type">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/**&#xA; * Class definition for the &lt;pre>Void&lt;/pre> type&#xA; */"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeDefinitionContainer" abstract="true" eSuperTypes="/1/language/structure/NamedElement">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** &#xA; * Abstraction of the notion of containment for type definitions. Now, kermeta metamodel contains one container&#xA; * element, that is Package. In a later release, ModelTypeDefinition will be the main container for type and&#xA; * package definition.&#xA; */"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTypeDefinition" upperBound="-1" eType="/1/language/structure/TypeDefinition" containment="true">
            <eAnnotations source="kermeta">
              <details key="documentation" value="/**&#xA; * Contained TypeDefinitions&#xA; */"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EAnnotation source="dependentResource">
    <references href="Standard.ecore#/0"/>
    <references href="Standard.ecore#/1"/>
    <references href="standard/collections.ecore#/0"/>
    <references href="standard/collections.ecore#/1"/>
    <references href="standard/primitive_types.ecore#/0"/>
    <references href="standard/primitive_types.ecore#/1"/>
    <references href="language/structure.ecore#/0"/>
    <references href="language/structure.ecore#/1"/>
    <references href="language/reflective_collections.ecore#/0"/>
    <references href="language/reflective_collections.ecore#/1"/>
    <references href="kunit/kunit.ecore#/0"/>
    <references href="kunit/kunit.ecore#/1"/>
    <references href="kunit/assert.ecore#/0"/>
    <references href="kunit/assert.ecore#/1"/>
    <references href="utils/utils.ecore#/0"/>
    <references href="utils/utils.ecore#/1"/>
    <references href="utils/StringBuffer.ecore#/0"/>
    <references href="utils/StringBuffer.ecore#/1"/>
    <references href="utils/hashtable.ecore#/0"/>
    <references href="utils/hashtable.ecore#/1"/>
    <references href="utils/stack.ecore#/0"/>
    <references href="utils/stack.ecore#/1"/>
    <references href="io/std_io.ecore#/0"/>
    <references href="io/std_io.ecore#/1"/>
    <references href="io/file_io.ecore#/0"/>
    <references href="io/file_io.ecore#/1"/>
    <references href="exceptions/exceptions.ecore#/0"/>
    <references href="exceptions/exceptions.ecore#/1"/>
    <references href="exceptions/exceptions.ecore#/2"/>
    <references href="language/dynamic_expression.ecore#/0"/>
    <references href="language/dynamic_expression.ecore#/1"/>
    <references href="persistence/resource.ecore#/0"/>
    <references href="persistence/resource.ecore#/1"/>
    <references href="standard/java.ecore#/0"/>
    <references href="standard/java.ecore#/1"/>
    <references href="ecore/ecore_compatibility.ecore#/0"/>
    <references href="ecore/ecore_compatibility.ecore#/1"/>
  </ecore:EAnnotation>
</xmi:XMI>
