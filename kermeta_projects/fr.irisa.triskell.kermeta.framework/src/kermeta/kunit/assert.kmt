/* $Id: assert.kmt,v 1.1 2007-07-13 07:42:12 dvojtise Exp $
 * Creation date: May 29, 2007
 * License:
 * Copyright:
 * Authors: Harry Lime (abstract) 
 */


package kermeta::kunit;


using kermeta::standard

abstract class AbstractFallible
{

    operation assert(condition: Boolean):Void is
	  	abstract
  	
    operation assertWithMsg(condition: Boolean, msg: String):Void 	is
	  	abstract

	operation fail(msg: String): Void is
		 abstract
		 
	operation assertTrue(condition: Boolean): Void is
		abstract
		
	operation assertTrueWithMsg(condition: Boolean, message: String): Void is
		abstract
	
	operation assertFalse(condition: Boolean): Void is
		abstract
		
	operation assertFalseWithMsg(condition: Boolean, message: String): Void is
		abstract
		 
 	operation assertEqual(expected: String, actual: String): Void is
		abstract

}


/**
 * AssertionViolatedException are raised when assertions are violated
 */
class AssertionFailedError inherits kermeta::exceptions::Exception { }

class Assert inherits AbstractFallible
{

	/**
	 * Fails if condition is false
	 */
	method assert(condition : Boolean) : Void is 
        do
            if not condition then 
            	fail("assert failed") 
            end
        end
	
	/**
	 * will fail if condition is false
	 */
	method assertTrue(condition : Boolean) : Void is 
        do
            if not condition then 
            	fail("assertTrue failed") 
            end
        end
	
	/**
	 * will fail if condition is false
	 */
	method assertTrueWithMsg(condition : Boolean, msg : String) : Void is 
        do
            if not condition then 
            	fail("assertTrueWithMsg failed : " + msg) 
            end 
        end
	
	/**
	 * will fail if condition is true
	 */
	method assertFalse(condition : Boolean) : Void is
        do
            if condition then 
            	fail("assertTrue number failed") 
            end
        end
	
	/**
	 * will fail if condition is true
	 */
	method assertFalseWithMsg(condition : Boolean, msg : String) : Void is
        do
            if condition then 
            	fail("assertTrueWithMsg failed : " + msg) 
            end 
        end
	
	/**
	 * will fail if condition is false
	 */
    method assertWithMsg(condition: Boolean, msg: String):Void 	is
	  	do
            if not condition then 
            	fail("assertTrueWithMsg failed : " + msg) 
            end 
		end

	/**
	 * raise a AssertionViolatedException with the provided message
	 */
	method fail(msg: String): Void is
		do
            var exception : AssertionFailedError init AssertionFailedError.new
            exception.message := msg
            raise exception
		end
		 
 	/**
 	 * Will fail if the two strings are not identical
 	 */
 	method assertEqual(expected: String, actual: String): Void is
		do
			if not expected.equals(actual) then
				fail( "assertEqual failed\nexpected\t:[" + expected + "] != \nactual\t:[" + actual + "]")
			end
		end

}
