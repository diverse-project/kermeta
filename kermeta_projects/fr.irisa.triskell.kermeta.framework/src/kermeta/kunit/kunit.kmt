/***************************************************
 * $Id: kunit.kmt,v 1.5 2005-04-22 01:34:50 ffleurey Exp $
 * Zoe Drey - 14/02/2005
 * Triskell Research Group
 * IRISA / INRIA / University of Rennes 1 (France)
 * Distributed under the terms of the GPL licence
 *
 * Implementation of a unit test tool. This is a clone of
 * JUnit architecture.
 *************************************************** */
package kermeta::kunit;

require "../Standard.kmt"
//require "../../../src/kermeta/standard/exceptions.kmt"


@Test "This is the clone of the JUnit Test abstract class" 
abstract class Test inherits Assert
{
	operation run() : Void is abstract
}

abstract class Assert
{	
	@assert "assert raise an AssertError if the condition is not true"
	operation assert(bool : kermeta::standard::Boolean) : Void is do
		if (bool == false) then
			// when exceptions work, we can replace instruction by this one :
//			raise kermeta::exceptions::AssertionError.new
			stdio.writeln("AssertionError")			

		else
			stdio.writeln("Tout va bien!")
		end		
		extern fr::irisa::triskell::kermeta::runtime::testing::kunit.assertTrue("AssertionError",bool)
	end
	
	@assert "assertTrue raise an AssertError if the condition is not true"
	operation assertTrue(bool : kermeta::standard::Boolean) : Void is do
		if (bool == false) then
			// when exceptions work, we can replace instruction by this one :
//			raise kermeta::exceptions::AssertionError.new
			stdio.writeln("AssertionError")

		end
		extern fr::irisa::triskell::kermeta::runtime::testing::kunit.assertTrue("AssertionError",bool)
	end
	operation fail(msg : kermeta::standard::String) : Void is do
		// when exceptions work, we can replace instruction by this one :
//			raise kermeta::exceptions::AssertionError.new
			stdio.writeln("AssertionError: "+msg)
		extern fr::irisa::triskell::kermeta::runtime::testing::kunit.fail(msg)
	end
	
}
 
@TestSuite "A test suite is meant as executing automatically a suite of test cases"
class TestSuite inherits Test
{
	attribute tests : kermeta::standard::Set<Test>

	//@addTest "add a test case in the suite of tests to run"
	operation addTest(test : Test) is do
		if (self.tests == Void) then
			self.tests := kermeta::standard::Set<Test>.new
		end
		self.tests.add(test)
	end

}

@TestCase "A test case is meant to definit a set of tests for a precise purpose"
class TestCase inherits Test
{
	@run "Run this test case"
	method run() : Void is do
	end
}