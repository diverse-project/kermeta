/* *************************************************
 * $Id: kunit.kmt,v 1.9 2005-06-09 17:48:28 ffleurey Exp $
 * Zoe Drey - 14/02/2005
 * Triskell Research Group
 * IRISA / INRIA / University of Rennes 1 (France)
 * Distributed under the terms of the GPL licence
 *
 * Implementation of a unit test tool. This is a clone of
 * JUnit architecture.
 *************************************************** */
package kermeta::kunit;

require "../Standard.kmt"

using kermeta::standard

/**
 * AssertionViolatedException are raised when assertions are violated
 */
class AssertionViolatedException inherits kermeta::exceptions::Exception 
{
	
}

/**
 * The abstract class assert defines a set of convinient operations
 * to assert expected behavior
 */
abstract class Assert
{	
	/**
	 * raises an exception if bool is false
	 */
	operation assert(bool : Boolean) : Void is do
		if not bool then fail("assert failed") end
	end
	
	/**
	 * raises an exception if bool is false
	 */
	operation assertTrue(bool : Boolean) : Void is do
		if not bool then fail("assertTrue failed") end
	end
	
	/**
	 * raises an exception if bool is false
	 */
	operation assertTrueWithMsg(bool : Boolean, msg : String) : Void is do
		if not bool then fail(msg) end
	end
	
	/**
	 * raise a AssertionViolatedException with the provided message
	 */
	operation fail(msg : kermeta::standard::String) : Void is do
		var exception : AssertionViolatedException init AssertionViolatedException.new
		exception.message := msg
		raise exception
	end
	
}

/**
 * Abstract class Test
 */
abstract class Test inherits Assert
{
	/**
	 * Run the test
	 */
	operation run() : Void is abstract
}

/**
 * A test cases
 */
class TestCase inherits Test
{
	/**
	 * Execute the test case
	 */
	method run() : Void is do
		// TODO : implement this
	end
}


/** 
 * A test suite is composed of a set of tests
 * (pattern composite)
 */
class TestSuite inherits Test
{
	/**
	 * The set of contained tests
	 */
	attribute tests : Test[0..*]

	/**
	 * Execute all tests of the suite
	 */
	method run() : Void is do
		tests.each{ t | t.run }
	end

}

