/** 
 * Contains special classes (Hashtable, Stack) that are not contained in Kermeta
 * metamodel
 * 
 * <img src="./figures/utils_package.png">
 */
package kermeta::utils;

require "../Standard.kmt"

using kermeta::standard

/* *************************************************
 * Franck FLEUREY - 14/02/2005
 * Triskell Research Group
 * IRISA / University of Rennes 1 (France)
 * Distributed under the terms of the EPL licence
 *
 * Implementation of Metacore hashtable types.
 *************************************************** */
 
/**
 * An implementation of hashtable
 * This implementation is for speed optimisation it cannot be serialized. 
 * If your wish to serialize its content you need to copy its content into a classical ecore structure (attribute or references)
 */
class Hashtable<K, V>
{
	/**
	 * Returns size of the Map
	 */
	operation size() : Integer is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.size(self)
	end

	/**
	 * Returns an iterator on the keys of the Map
	 */
	operation keyIterator() : Iterator<K> is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.keysIterator(self)
	end
	
	/**
	 * Returns an iterator on the values of the Map
	 */
	operation valueIterator() : Iterator<V> is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.valueIterator(self)
	end
	
	/**
	 * Returns the value for key 'key'
	 */
	operation getValue(key : K) : V is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.get(self,key)
	end
	
	/**
	 * Adds a entry in the Hashtable
	 */
	operation put(key : K, ~value : V) : Void is do
		extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.put(self,key, ~value)
	end
	
	/**
	 * Removes the entry which key equals 'key'
	 */
	operation remove(key : K) : Void is do
		extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.remove(self,key)
	end
	
	/**
	 * Removes all elements from the Hashtable
	 */
	operation clear() : Void is do
		extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.clear(self)
	end
	
	/**
	 * Returns the keys of the Hashtable
	 */
	operation keys() : Set<K> is do
		result := Set<K>.new
		from var it : Iterator<K> init keyIterator until it.isOff
		loop
			result.add(it.next)
		end
	end
	
	/**
	 * Returns the keys of the Hashtable
	 */
	operation values() : Collection<V> is do
		result := Bag<V>.new
		keys.each { k | result.add(self.getValue(k)) }
	end
	
	/**	
	 * Returns a Boolean stating whether a key is present in the Map
	 */
	operation containsKey(key : K) : Boolean is do
		result := getValue(key) != void
	end
	
	// TODO: complete this class
	// The rest might be writable in metacore directly
}