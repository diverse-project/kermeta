package kermeta::utils;

require "../Standard.kmt"

using kermeta::standard

/***************************************************
 * Franck FLEUREY - 14/02/2005
 * Triskell Research Group
 * IRISA / University of Rennes 1 (France)
 * Distributed under the terms of the GPL licence
 *
 * Implementation of Metacore hashtable types.
 *************************************************** */
 
/**
 * An implementation of hashtable
 */
class Hashtable<K, V>
{
	/**
	 * returns size of the map
	 */
	operation size() : Integer is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.size(self)
	end

	/**
	 * returns an iterator on the keys of the map
	 */
	operation keyIterator() : Iterator<K> is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.keysIterator(self)
	end
	
	/**
	 * returns an iterator on the keys of the map
	 */
	operation valueIterator() : Iterator<V> is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.valueIterator(self)
	end
	
	/**
	 * returns the value for key 'key'
	 */
	operation get(key : K) : V is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.get(self,key)
	end
	
	/**
	 * Adds a entry in the Hashtable
	 */
	operation put(key : K, ~value : V) : Void is do
		extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.put(self,key, ~value)
	end
	
	/**
	 * Removes the entry which key equals 'key'
	 */
	operation remove(key : K) : Void is do
		extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.remove(self,key)
	end
	
	/**
	 * Remove all elements from the Hashtable
	 */
	operation clear() : Void is do
		extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.clear(self)
	end
	
	// TODO: complete this class
	// The rest might be writable in metacore directly
	
}