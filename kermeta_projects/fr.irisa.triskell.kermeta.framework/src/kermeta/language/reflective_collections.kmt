/**
 * Contains the implementation of Kermeta reflective collections.
 */
package kermeta::language;

require "../Standard.kmt"
require "structure.kmt"

using kermeta::standard

/* *************************************************
 * $Id: reflective_collections.kmt,v 1.6 2006-05-23 12:26:46 zdrey Exp $
 * Franck FLEUREY - 17/02/2005
 * Triskell Research Group
 * IRISA / University of Rennes 1 (France)
 * Distributed under the terms of the GPL licence
 ************************************************* */
 
/**
 * ReflectiveCollection is a special collection that is used to define the type 
 * of attributes that have an upper multiplicity > 1 in a class. It indeed handles
 * the update of opposite property if such an attribute has got one.
 */
abstract class ReflectiveCollection<G> inherits Set<G>
{
	/** Add an element to this collection and update its opposite property if it exists. */
	method add(element : G) : Void is do
		extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.add(self, element)
	end
	
	method remove(element : G) : Void is do
		extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.remove(self, element)
	end
	
	method clear() : Void is do
		extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.clear(self)
	end
}

/**
 * ReflectiveSequence is an ordered ReflectiveCollection.
 */
abstract class ReflectiveSequence<G> inherits OrderedSet<G>, ReflectiveCollection<G> {
	
	method add(element : G) : Void from ReflectiveCollection is do
		super(element)
	end
	
	method remove(element : G) : Void from ReflectiveCollection is do
		super(element)
	end
	
	method clear() : Void from ReflectiveCollection is do
		super()
	end
	
	method addAt(index : Integer, element : G) : Void is do
		extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveSequence.addAt(self, index, element)
	end
	
	method removeAt(index : Integer) : Void is do
		extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveSequence.removeAt(self, index)
	end

}

