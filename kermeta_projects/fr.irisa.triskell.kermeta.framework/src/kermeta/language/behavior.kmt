/* $Id: behavior.kmt,v 1.13 2006-06-15 14:22:11 dvojtise Exp $
 * Project   : fr.irisa.triskell.kermeta.framework
 * File      : behavior.kmt
 * License   : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Mar 14, 2006
 * Authors   : 
 *		Franck Fleurey <ffleurey@irisa.fr>
 *		Zoé Drey <zdrey@irisa.fr>
 * 		Didier Vojtisek <dvojtise@irisa.fr>
 *
 */

/**
 * Contains all the classes used for the behavior of Kermeta (i.e the model representation
 * of operation bodies)
 */
package kermeta::language::behavior;

require "structure.kmt"

abstract class CallExpression inherits Expression
{
	attribute parameters : set Expression[0..*]
	attribute name : kermeta::reflection::String
	
	reference staticTypeVariableBindings : kermeta::language::structure::Type[*]
}
abstract class Expression inherits kermeta::reflection::Object, kermeta::reflection::TypeContainer 
{
	reference staticType : kermeta::language::structure::Type
}
class CallVariable inherits CallExpression, KMExpressionVisitable
{
	/** Implementation of the visitor design pattern on CallFeature objects */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallVariable(self, context)
		end
}
class CallFeature inherits CallExpression, KMExpressionVisitable
{
	
	reference staticOperation : kermeta::language::structure::Operation
	reference staticEnumLiteral : kermeta::language::structure::EnumerationLiteral
	reference staticProperty : kermeta::language::structure::Property

	/** Tells wether this CallFeature represents a call to @pre in a postcondition */
	attribute isAtpre : kermeta::reflection::Boolean
	attribute target : Expression
	
	/** Implementation of the visitor design pattern on CallFeature objects */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallFeature(self, context)
		end
}

/** This class represents a call to the operataion in the parent class
 *	In the following example, the type of super(element) is CallSuperOperation:
 *
 * class ParentClass {
 *   operation op(element : Integer) : Integer is do
 *       result := element + 1
 *   end
 * }
 *
 * class ChildClass {
 *   method op(element : Integer) : Integer is do
 *       result := super(element)
 *   end
 * }
 */
class CallSuperOperation inherits CallExpression, KMExpressionVisitable
{
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallSuperOperation(self, context)
		end
}

/** This class represents a call to the special internal variable "result" that is used to store the return value of any operation 
 */
class CallResult inherits CallVariable, KMExpressionVisitable
{
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallResult(self, context)
		end
}
class CallValue inherits CallExpression, KMExpressionVisitable
{
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallValue(self, context)
		end
}
class Assignment inherits Expression, KMExpressionVisitable
{
	attribute target : CallExpression[1..1]
	attribute ~value : Expression[1..1]
	attribute isCast : kermeta::reflection::Boolean
	
	/** Implementation of the visitor design pattern on Assignment objects */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitAssignment(self, context)
		end
}
class Block inherits Expression, KMExpressionVisitable
{
	attribute statement : set Expression[1..*]
	attribute rescueBlock : set Rescue[0..*]
	
	/** Implementation of the visitor design pattern on Block objects */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitBlock(self, context)
		end
}
class Conditional inherits Expression, KMExpressionVisitable
{
	attribute thenBody : Expression
	attribute elseBody : Expression
	attribute condition : Expression
	
	/** Implementation of the visitor design pattern on Conditional objects */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitConditional(self, context)
		end
}
abstract class Literal inherits Expression
{
}

/** As suggested by its name, this class represents an expression that do nothing. Like a "nop"
 */
class EmptyExpression inherits Expression, KMExpressionVisitable
{
	/** Implementation of the visitor design pattern on EmptyExpression objects */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitEmptyExpression(self, context)
		end
}

/** This expression is a literal representing an Integer value */
class IntegerLiteral inherits Literal, KMExpressionVisitable
{
	/** The concrete value represented by this literal */
	attribute ~value : kermeta::reflection::Integer
	
	/** Implementation of the visitor design pattern on IntegerLiteral objects */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitIntegerLiteral(self, context)
		end
}

/** This expression is a literal representing a String value, typically : "my string"  */
class StringLiteral inherits Literal, KMExpressionVisitable
{
	/** The concrete value represented by this literal */
	attribute ~value : kermeta::reflection::String
	/** Implementation of the visitor design pattern on StringLiteral objects */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitStringLiteral(self, context)
		end
}
/** This expression is a literal representing a Boolean value, typically : true or false keyword*/
class BooleanLiteral inherits Literal, KMExpressionVisitable
{
	/** The concrete value represented by this literal */
	attribute ~value : kermeta::reflection::Boolean
	/** Implementation of the visitor design pattern on BooleanLiteral objects */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitBooleanLiteral(self, context)
		end
}
/** This expression is a literal representing a Type.
 * for example, in 
 *    Integer.new
 * Integer is a type literal representing the type kermeta::standard::Integer
 */
class TypeLiteral inherits Literal, KMExpressionVisitable
{
	/** The type refered by this literal */
	attribute typeref : TypeReference[1..1]
	/** Implementation of the visitor design pattern on TypeLiteral objects */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitTypeLiteral(self, context)
		end
}
class TypeReference inherits kermeta::reflection::MultiplicityElement, KMExpressionVisitable
{
	/** Implementation of the visitor design pattern on BooleanLiteral objects */		
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitTypeReference(self, context)
		end
}
/** This class is used to represent the special expression void */
class VoidLiteral inherits Literal, KMExpressionVisitable
{
	/** Implementation of the visitor design pattern on VoidLiteral objects */		
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitVoidLiteral(self, context)
		end
}
class Loop inherits Expression, KMExpressionVisitable
{
	attribute initialization : Expression
	attribute body : Expression
	attribute stopCondition : Expression
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitLoop(self, context)
		end
}
class SelfExpression inherits Expression, KMExpressionVisitable
{
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitSelfExpression(self, context)
		end
}
class VariableDecl inherits Expression, KMExpressionVisitable
{
	attribute initialization : Expression[1..1]
	attribute identifier : kermeta::reflection::String
	attribute type : TypeReference
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitVariableDecl(self, context)
		end
}
class Raise inherits Expression, KMExpressionVisitable
{
	attribute expression : Expression[1..1]
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitRaise(self, context)
		end
}
class Rescue inherits kermeta::reflection::Object, KMExpressionVisitable
{
	attribute body : set Expression[1..*]
	attribute exceptionType : TypeReference[1..1]
	attribute exceptionName : kermeta::reflection::String
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitRescue(self, context)
		end
}
/** This class represent a call to an extern Java operation. 
 * This Java operation must be static and have at least one RuntimeO
 */
class JavaStaticCall inherits Expression, KMExpressionVisitable
{
	attribute parameters : set Expression[0..*]
	attribute jclass : kermeta::reflection::String
	attribute jmethod : kermeta::reflection::String
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitJavaStaticCall(self, context)
		end
}
class LambdaExpression inherits Expression, KMExpressionVisitable
{
	attribute parameters : set LambdaParameter[0..*]
	attribute body : Expression
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitLambdaExpression(self, context)
		end
}
class LambdaParameter inherits kermeta::reflection::Object, KMExpressionVisitable
{
	attribute name : kermeta::reflection::String
	attribute type : TypeReference
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitLambdaParameter(self, context)
		end
}

/** This class implements the visitor design pattern for all the classes of this Behavior package, in particular the classes that inherits from kermeta::behavior::Expression */
abstract class KMExpressionVisitor<ContextType, ResultType>
{
	operation visitCallVariable(node : CallVariable, context : ContextType) : ResultType is abstract
	operation visitCallFeature(node : CallFeature, context : ContextType) : ResultType is abstract
	operation visitCallSuperOperation(node : CallSuperOperation, context : ContextType) : ResultType is abstract
	operation visitCallResult(node : CallResult, context : ContextType) : ResultType is abstract
	operation visitCallValue(node : CallValue, context : ContextType) : ResultType is abstract
	operation visitAssignment(node : Assignment, context : ContextType) : ResultType is abstract
	operation visitBlock(node : Block, context : ContextType) : ResultType is abstract
	operation visitConditional(node : Conditional, context : ContextType) : ResultType is abstract
	operation visitEmptyExpression(node : EmptyExpression, context : ContextType) : ResultType is abstract
	operation visitIntegerLiteral(node : IntegerLiteral, context : ContextType) : ResultType is abstract
	operation visitStringLiteral(node : StringLiteral, context : ContextType) : ResultType is abstract
	operation visitBooleanLiteral(node : BooleanLiteral, context : ContextType) : ResultType is abstract
	operation visitTypeLiteral(node : TypeLiteral, context : ContextType) : ResultType is abstract
	operation visitTypeReference(node : TypeReference, context : ContextType) : ResultType is abstract
	operation visitVoidLiteral(node : VoidLiteral, context : ContextType) : ResultType is abstract
	operation visitLoop(node : Loop, context : ContextType) : ResultType is abstract
	operation visitSelfExpression(node : SelfExpression, context : ContextType) : ResultType is abstract
	operation visitVariableDecl(node : VariableDecl, context : ContextType) : ResultType is abstract
	operation visitRaise(node : Raise, context : ContextType) : ResultType is abstract
	operation visitRescue(node : Rescue, context : ContextType) : ResultType is abstract
	operation visitJavaStaticCall(node : JavaStaticCall, context : ContextType) : ResultType is abstract
	operation visitLambdaExpression(node : LambdaExpression, context : ContextType) : ResultType is abstract
	operation visitLambdaParameter(node : LambdaParameter, context : ContextType) : ResultType is abstract
}
/** All classes that can be visited using kermeta::behavior::KMExpressionVisitor must implement this class */
abstract class KMExpressionVisitable
{
	operation acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType is abstract
}

