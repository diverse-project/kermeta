/* $Id: behavior.kmt,v 1.19 2007-08-08 12:20:56 dtouzet Exp $
 * Project   : fr.irisa.triskell.kermeta.framework
 * File      : behavior.kmt
 * License   : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Mar 14, 2006
 * Authors   : 
 *		Franck Fleurey <ffleurey@irisa.fr>
 *		Zoé Drey <zdrey@irisa.fr>
 * 		Didier Vojtisek <dvojtise@irisa.fr>
 *
 */

/**
 * Contains all the classes that define the behavior of Kermeta (i.e the model representation
 * of operation bodies). It is the definition, in kermeta language, of the behavior part of the kermeta 
 * metamodel, viewed as a model.
 * You can also find some information about the behavior package here : <a href="http://www.kermeta.org/documents/manual/html.single">KermetaManual</a>
 */
package kermeta::language::behavior;

require "structure.kmt"

/**
 * Any callable expression inherits this class, e.g : 
 *   - variable call
 *   - feature call ( <code>a.b</code> : b is a feature call)
 *
 * <img alt=""  height="90%" width="90%"  src="http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_call_expressions.png" />
 *
 */
abstract class CallExpression inherits Expression
{
	/**
	 * To be written
	 */
	attribute parameters : set Expression[0..*]

	/**
	 * To be written
	 */
	attribute name : kermeta::standard::String
	
	/**
	 * To be written
	 */
	reference staticTypeVariableBindings : kermeta::language::structure::Type[*]
}


/**
 * The base class for every entity used to define a behavior in operation body.
 */
abstract class Expression inherits kermeta::language::structure::Object, kermeta::language::structure::TypeContainer 
{
	/**
	 * Type of the Expression (set by type checking)
	 */
	reference staticType : kermeta::language::structure::Type
}


/**
 * We call "CallVariable" the use of a variable in a statement.
 * in <code>i := j + 1</code>, i and j are 2 CallVariables.
 */
class CallVariable inherits CallExpression, KMExpressionVisitable
{
	/**
	 * Tells wether this CallVariable represents a call to @pre in a postcondition
	 */
	attribute isAtpre : kermeta::standard::Boolean
	
	/**
	 * Implementation of the visitor design pattern on CallFeature objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallVariable(self, context)
		end
}


/**
 * CallFeature is the model element that refers to the use of a feature, i.e either 
 * a property or an operation in a statement. In <code>stdio.writeln("hello")</code>, 
 * <code>writeln</code> is a CallFeature.
 */
class CallFeature inherits CallExpression, KMExpressionVisitable
{
	/**
	 * To be written
	 */
	reference staticOperation : kermeta::language::structure::Operation

	/**
	 * To be written
	 */
	reference staticEnumLiteral : kermeta::language::structure::EnumerationLiteral

	/**
	 * To be written
	 */
	reference staticProperty : kermeta::language::structure::Property

	/**
	 * Tells whether this CallFeature represents a call to @pre in a postcondition
	 */
	attribute isAtpre : kermeta::standard::Boolean

	/**
	 * Target Expression
	 */
	attribute target : Expression
	
	/**
	 * Implementation of the visitor design pattern on CallFeature objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallFeature(self, context)
		end
}


/**
 * This class represents a call to the operataion in the parent class
 *	In the following example, the type of super(element) is CallSuperOperation:
 *
 * class ParentClass {
 *   operation op(element : Integer) : Integer is do
 *       result := element + 1
 *   end
 * }
 *
 * class ChildClass {
 *   method op(element : Integer) : Integer is do
 *       result := super(element)
 *   end
 * }
 */
class CallSuperOperation inherits CallExpression, KMExpressionVisitable
{
	/**
	 * To be written
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallSuperOperation(self, context)
		end
}


/**
 * This class represents a call to the special internal variable "result" that is used to store the return value of any operation 
 */
class CallResult inherits CallVariable, KMExpressionVisitable
{
	/**
	 * To be written
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallResult(self, context)
		end
}


/**
 * CallValue refers to the use of the <code>value</code> reserved keyword. This keyword is
 * only used in the body of the <code>setter</code> part of derived properties.
 */
class CallValue inherits CallExpression, KMExpressionVisitable
{
	/**
	 * To be written
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallValue(self, context)
		end
}


/**
 * Assignment is the model-element representation of the assignment statement <code>x := y</code>
 * <img alt="" src="http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_assign_expressions.png"/>
 */
class Assignment inherits Expression, KMExpressionVisitable
{
	/**
	 * Target of the assignment, as a CallExpression
	 */
	attribute target : CallExpression[1..1]

	/**
	 * Value to be assigned, as a KerMeta expression
	 */
	attribute ~value : Expression[1..1]

	/**
	 * Boolean stating whether current assignment corresponds to a cast operation 
	 */
	attribute isCast : kermeta::standard::Boolean
	
	/**
	 * Implementation of the visitor design pattern on Assignment objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitAssignment(self, context)
		end
}


/**
 * Block is the model-element representation for the <code>do...end</code> block.
 */
class Block inherits Expression, KMExpressionVisitable
{
	/**
	 * List of statements composing the block
	 */
	attribute statement : set Expression[0..*]

	/**
	 * List of rescues defined for the block
	 */
	attribute rescueBlock : set Rescue[0..*]
	
	/**
	 * Implementation of the visitor design pattern on Block objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitBlock(self, context)
		end
}


/**
 * Condition is the model-element representation for the <code></code> 
 */
class Conditional inherits Expression, KMExpressionVisitable
{
	/**
	 * Then part of the conditional statement
	 */
	attribute thenBody : Expression[1..1]

	/**
	 * Optional else part of the conditional statement
	 */
	attribute elseBody : Expression[0..1]

	/**
	 * Condition expression of conditional statement
	 */
	attribute condition : Expression[1..1]
	
	/**
	 * Implementation of the visitor design pattern on Conditional objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitConditional(self, context)
		end
}


/**
 * Literal refers to String values, Integer values, etc.
 */
abstract class Literal inherits Expression { }


/**
 * As suggested by its name, this class represents an expression that do nothing. Like a "nop"
 */
class EmptyExpression inherits Expression, KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on EmptyExpression objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitEmptyExpression(self, context)
		end
}


/**
 * This expression is a literal representing an Integer value
 */
class IntegerLiteral inherits Literal, KMExpressionVisitable
{
	/**
	 * The concrete value represented by this literal
	 */
	attribute ~value : kermeta::standard::Integer
	
	/**
	 * Implementation of the visitor design pattern on IntegerLiteral objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitIntegerLiteral(self, context)
		end
}


/**
 * This expression is a literal representing a String value, typically : "my string"
 */
class StringLiteral inherits Literal, KMExpressionVisitable
{
	/**
	 * The concrete value represented by this literal
	 */
	attribute ~value : kermeta::standard::String

	/**
	 * Implementation of the visitor design pattern on StringLiteral objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitStringLiteral(self, context)
		end
}


/**
 * This expression is a literal representing a Boolean value, typically : true or false keyword
 */
class BooleanLiteral inherits Literal, KMExpressionVisitable
{
	/**
	 * The concrete value represented by this literal
	 */
	attribute ~value : kermeta::standard::Boolean

	/**
	 * Implementation of the visitor design pattern on BooleanLiteral objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitBooleanLiteral(self, context)
		end
}


/**
 * This expression is a literal representing a Type.
 * for example, in 
 *    Integer.new
 * Integer is a type literal representing the type kermeta::standard::Integer
 */
class TypeLiteral inherits Literal, KMExpressionVisitable
{
	/**
	 * The type refered by this literal
	 */
	attribute typeref : TypeReference[1..1]

	/**
	 * Implementation of the visitor design pattern on TypeLiteral objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitTypeLiteral(self, context)
		end
}


/**
 * TypeReference refers to the type used in a variable declaration
 */
class TypeReference inherits kermeta::language::structure::MultiplicityElement, KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on BooleanLiteral objects
	 */		
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitTypeReference(self, context)
		end
}


/**
 * This class is used to represent the special expression void
 */
class VoidLiteral inherits Literal, KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on VoidLiteral objects
	 */		
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitVoidLiteral(self, context)
		end
}


/**
 * Loop refers to <code>from var x : X init a until booleanCondition loop ... end</code>
 */
class Loop inherits Expression, KMExpressionVisitable
{
	/**
	 * Initialization expression for the loop
	 */
	attribute initialization : Expression[0..1]

	/**
	 * Body of the loop
	 */
	attribute body : Expression[0..1]

	/**
	 * Stop condition of the loop, is interpreted as a Bollean value
	 */
	attribute stopCondition : Expression[1..1]

	/**
	 * To be written
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitLoop(self, context)
		end
}


/**
 * Refers to <code>self</code> use
 */
class SelfExpression inherits Expression, KMExpressionVisitable
{
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitSelfExpression(self, context)
		end
}


/**
 * refers to variable declaration <code>var x : X init a</code>
 * <img alt="" src="http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_var_expressions.png"/>
 */
class VariableDecl inherits Expression, KMExpressionVisitable
{
	/**
	 * Initialization expression for the variable
	 * Default value is <code>void</code> ????
	 */
	attribute initialization : Expression[1..1]

	/**
	 * Name of the declared variable
	 */
	attribute identifier : kermeta::standard::String

	/**
	 * Type of the declared variable
	 */
	attribute type : TypeReference[1..1]

	/**
	 * To be written
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitVariableDecl(self, context)
		end
}


/**
 * Refers to raise exception block
 */
class Raise inherits Expression, KMExpressionVisitable
{
	/**
	 * To be written
	 */
	attribute expression : Expression[1..1]

	/**
	 * To be written
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitRaise(self, context)
		end
}


/**
 * Refers to rescue exception block
 */
class Rescue inherits kermeta::language::structure::Object, KMExpressionVisitable
{
	/**
	 * Body of the rescue block, specified as a KerMeta expression
	 */
	attribute body : set Expression[1..*]

	/**
	 * Type of the cathed exception
	 */
	attribute exceptionType : TypeReference[1..1]

	/**
	 * Name of the catched exception
	 */
	attribute exceptionName : kermeta::standard::String

	/**
	 * To be written
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitRescue(self, context)
		end
}


/**
 * This class represent a call to an extern Java operation. 
 * This Java operation must be static and have at least one RuntimeO
 */
class JavaStaticCall inherits Expression, KMExpressionVisitable
{
	/**
	 * Parameters of the Java static call provided as KerMeta expressions
	 */
	attribute parameters : set Expression[0..*]

	/**
	 * Qualified name of the targeted Java class
	 */
	attribute jclass : kermeta::standard::String

	/**
	 * Name of the Java method to be launched in the identified Java class
	 */
	attribute jmethod : kermeta::standard::String

	/**
	 * To be written
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitJavaStaticCall(self, context)
		end
}


/**
 * Refers to lambda expression definition (<code>function { e | stdio.writeln(e.toString) }</code>)
 * <img alt="" src="http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_lambda_expressions.png"/>
 */
class LambdaExpression inherits Expression, KMExpressionVisitable
{
	/**
	 * Parameters of the lambda expression
	 */
	attribute parameters : set LambdaParameter[0..*]

	/**
	 * Body of the lambda expression providede as a KerMeta expression
	 */
	attribute body : Expression[0..1]

	/**
	 *
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitLambdaExpression(self, context)
		end
}


/**
 * Refers to parameter definition in lambda expression
 */
class LambdaParameter inherits kermeta::language::structure::Object, KMExpressionVisitable
{
	/**
	 * Name of the lambda parameter
	 */
	attribute name : kermeta::standard::String

	/**
	 * To be written
	 */
	attribute type : TypeReference[1..1]

	/**
	 * To be written
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitLambdaParameter(self, context)
		end
}


/**
 * This class implements the visitor design pattern for all the classes of this Behavior package,
 * in particular the classes that inherits from kermeta::behavior::Expression
 */
abstract class KMExpressionVisitor<ContextType, ResultType>
{
	operation visitCallVariable(node : CallVariable, context : ContextType) : ResultType is do end
	operation visitCallFeature(node : CallFeature, context : ContextType) : ResultType is do end
	operation visitCallSuperOperation(node : CallSuperOperation, context : ContextType) : ResultType is do end
	operation visitCallResult(node : CallResult, context : ContextType) : ResultType is do end
	operation visitCallValue(node : CallValue, context : ContextType) : ResultType is do end
	operation visitAssignment(node : Assignment, context : ContextType) : ResultType is do end
	operation visitBlock(node : Block, context : ContextType) : ResultType is do end
	operation visitConditional(node : Conditional, context : ContextType) : ResultType is do end
	operation visitEmptyExpression(node : EmptyExpression, context : ContextType) : ResultType is do end
	operation visitIntegerLiteral(node : IntegerLiteral, context : ContextType) : ResultType is do end
	operation visitStringLiteral(node : StringLiteral, context : ContextType) : ResultType is do end
	operation visitBooleanLiteral(node : BooleanLiteral, context : ContextType) : ResultType is do end
	operation visitTypeLiteral(node : TypeLiteral, context : ContextType) : ResultType is do end
	operation visitTypeReference(node : TypeReference, context : ContextType) : ResultType is do end
	operation visitVoidLiteral(node : VoidLiteral, context : ContextType) : ResultType is do end
	operation visitLoop(node : Loop, context : ContextType) : ResultType is do end
	operation visitSelfExpression(node : SelfExpression, context : ContextType) : ResultType is do end
	operation visitVariableDecl(node : VariableDecl, context : ContextType) : ResultType is do end
	operation visitRaise(node : Raise, context : ContextType) : ResultType is do end
	operation visitRescue(node : Rescue, context : ContextType) : ResultType is do end
	operation visitJavaStaticCall(node : JavaStaticCall, context : ContextType) : ResultType is do end
	operation visitLambdaExpression(node : LambdaExpression, context : ContextType) : ResultType is do end
	operation visitLambdaParameter(node : LambdaParameter, context : ContextType) : ResultType is do end
}


/**
 * All classes that can be visited using kermeta::behavior::KMExpressionVisitor must implement this class
 */
abstract class KMExpressionVisitable
{
	operation acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType is abstract
}

