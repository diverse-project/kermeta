/* $Id: structure.kmt,v 1.47 2007-08-14 12:19:40 vmahe Exp $
 * Project : framework
 * File : structure.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Jul 04, 2005
 * Authors :
 *  Franck Fleurey  ffleurey@irisa.fr 
 *  Zoe Drey 		zdrey@irisa.fr
 *  Jean-Philippe Thibault 		jpthibault@irisa.fr
 */
 
/**
 * Contains the concrete implementation (including the operation bodies) 
 * of the classes of the <code>kermeta::reflection</code> package.
 * If you need more documentation, please take a look at the
 * <code>kermeta::reflection</code> package which is more complete.
 * <img src="./figures/language_structure_package.png">
 */
package kermeta::language::structure; 


require "../Standard.kmt"
require "behavior.kmt" 

/** Alias to kermeta::standard::String */
alias String : kermeta::standard::String;

/** Alias to kermeta::standard::Boolean */
alias Boolean : kermeta::standard::Boolean;

/** Alias to kermeta::standard::Integer */
alias Integer : kermeta::standard::Integer;

/** Alias to kermeta::standard::Real */
alias Real 	: kermeta::standard::Real;

/** Alias to kermeta::standard::UnlimitedNatural */
alias UnlimitedNatural : kermeta::standard::UnlimitedNatural;


/**
 * Implements kermeta::reflection::Object
 */
class Object inherits kermeta::reflection::Object, KMStructureVisitable
{
	/**
 	 * Implements kermeta::reflection::Object.getMetaClass()
 	 */
	method getMetaClass() : kermeta::reflection::Class from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getMetaClass(self)
	end

	/**
 	 * Implements kermeta::reflection::Object.container()
 	 */
	method container() : kermeta::reflection::Object from kermeta::reflection::Object is do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Object.container(self)
	end
	
	/**
 	 * Implements kermeta::reflection::Object.checkInvariants()
 	 */
	method checkInvariants() : Void from kermeta::reflection::Object is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.checkInvariants(self)
	end
	
	/**
 	 * Implements kermeta::reflection::Object.checkAllInvariants()
 	 */
	method checkAllInvariants() : Void from kermeta::reflection::Object is do
		if(self!=void) then
			// Call the invariant verification
			self.checkInvariants
			// Invariant checking on each value of self properties			
			self.getMetaClass.ownedAttribute.each { subObj |
				if ( subObj.isComposite) then
					if ( self.get(subObj).getMetaClass.typeDefinition.name.equals("ReflectiveSequence") 
						or self.get(subObj).getMetaClass.typeDefinition.name.equals("ReflectiveCollection") ) then

						var subObjInstances : kermeta::standard::Collection<kermeta::reflection::Object>
						subObjInstances ?= self.get(subObj)
						subObjInstances.each { aSubObjInstances | aSubObjInstances.checkAllInvariants }
					else
						self.get(subObj).checkAllInvariants
					end
				end
			}
		end
	end
	
	/**
 	 * Implements kermeta::reflection::Object.equals()
 	 */
	method equals(element : kermeta::reflection::Object) : Boolean from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.equals(self, element)
	end
	
	/**
 	 * Implements kermeta::reflection::Object.isNotEqual()
 	 */
	method isNotEqual(element : kermeta::reflection::Object) : Boolean from kermeta::reflection::Object is do
		result := not equals(element)
	end		
	
	/**
 	 * Implements kermeta::reflection::Object.isKindOf(Class)
 	 */
	method isKindOf(cl : kermeta::reflection::Class) : Boolean is do
		result := (self.getMetaClass.equals(cl))
	end
	
	/**
 	 * Implements kermeta::reflection::Object.get(Property)
 	 */
	method get(~property : kermeta::reflection::Property) : kermeta::reflection::Object from kermeta::reflection::Object is do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Object.get(self, ~property)
	end
	
	/**
 	 * Implements kermeta::reflection::Object.set(Property)
 	 */
	method ~set(~property : kermeta::reflection::Property, element : kermeta::reflection::Object) : Void from kermeta::reflection::Object is do
		if element.isInstanceOf(~property.type) then
			extern fr::irisa::triskell::kermeta::runtime::language::Object.~set(self, ~property, element)
		else
			var e : kermeta::exceptions::IncompatibleTypeError init kermeta::exceptions::IncompatibleTypeError.new
			e.message := "IncompatibleTypeError : Cannot set property " + ~property.name + " of object " + self.toString + " to " + element.toString + "."
			raise e
		end
	end
	
	/**
 	 * Implements kermeta::reflection::Object.isSet(Property)
 	 */
	method isSet(~property : kermeta::reflection::Property) : Boolean from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isSet(self, ~property)
	end
	
	/**
 	 * Implements kermeta::reflection::Object.unset(Property)
 	 */
	method unset(~property : kermeta::reflection::Property) : Void from kermeta::reflection::Object is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.unSet(self, ~property)
	end
	
	/**
 	 * Implements kermeta::reflection::Object.oid()
 	 */
	method oid() : Integer is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.oid(self)
	end
	
	/**
 	 * Implements kermeta::reflection::Object.toString()
 	 * Returns a String of form [qn:oid] where 'qn' is the qualified name of
 	 * the object type, and oid the unique ID of the object
 	 */
	method toString() : String is do
		result := "[" + self.getMetaClass.typeDefinition.qualifiedName + ":" + oid.toString + "]"
	end

	/**
 	 * Implements kermeta::reflection::Object.isFrozen()
 	 */	
	method isFrozen() : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isFrozen(self)
	end
	
	/**
 	 * Implements kermeta::reflection::Object.isVoid()
 	 */
	method isVoid() : Boolean is do
		result := false
	end

	/**
 	 * Implements kermeta::reflection::Object.hashcode()
 	 */	
	method hashcode() : Integer is do		
		// usually this method is not called when using hashtable because it directly tries the method hashcode in the RuntimeObject.java
		// which fall back here only if the method is not redefined
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.hashcode(self)
	end

	/**
 	 * Implements kermeta::reflection::Object.freeze()
 	 */	
	method freeze() : Void is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.freeze(self)
	end
	
	/**
 	 * Implements kermeta::reflection::Object.asType(Class)
 	 */
	method asType(type : kermeta::reflection::Class) : kermeta::reflection::Object is do
		if isInstanceOf(type) then result := self
		else raise kermeta::exceptions::TypeCastError.new
		end
	end
	
	/**
 	 * Implements kermeta::reflection::Object.isInstanceOf(Type)
 	 */
	method isInstanceOf(type : kermeta::reflection::Type) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isInstanceOf(self, type)
	end
	
	/**
	 * Implements kermeta::reflection::Object.containingResource()
	 */
	method containingResource() : kermeta::persistence::Resource is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getContainingResource(self)
	end
}


/**
 * Implements kermeta::reflection::ParametrizedType
 */
abstract class ParameterizedType inherits Type, kermeta::reflection::ParameterizedType, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitParameterizedType(self, context)
		end
}


/**
 * Implements kermeta::reflection::ModelType
 */
class ModelType inherits Type, TypeDefinition, kermeta::reflection::ModelType, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitModelType(self, context)
		end

	/**
 	 * Implements kermeta::reflection::ModelType.new()
 	 */
	method new() : kermeta::reflection::Model is
		do
			result ?= extern fr::irisa::triskell::kermeta::runtime::language::ModelType.newObject(self)
		end

	/**
 	 * Implements kermeta::reflection::ModelType.isModelTypeOf(Model)
 	 */
	method isModelTypeOf(m : kermeta::reflection::Model) : Boolean is
		do
			result ?= extern fr::irisa::triskell::kermeta::runtime::language::ModelType.isModelTypeOf(self, m)
		end
}


/**
 * Implements kermeta::reflection::Class
 */
class Class inherits ParameterizedType, kermeta::reflection::Class, KMStructureVisitable
{
	/**
 	 * Implements kermeta::reflection::Class.new()
 	 */
	method new() : kermeta::reflection::Object from kermeta::reflection::Class is 
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.newObject(self)
	end

	/**
 	 * Implements kermeta::language::structure::Type.clone(Object)
 	 */
	method clone(objectToClone : Object) : Object is
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.cloneObject(self, objectToClone)
	end

	/**
 	 * Implements kermeta::language::structure::Type.deepClone(Object)
 	 */	
	method deepClone(objectToClone : Object) : Object is
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.deepCloneObject(self, objectToClone)
	end
	/*
	method isInstance(object : kermeta::reflection::Object) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.isInstance(self, object)
	end 
	*/

	/**
 	 * Implements kermeta::language::structure::Type.hasSubType(Type)
 	 */	
	method hasSubType(object : kermeta::reflection::Type) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.hasSubType(self, object)
	end

	/**
 	 * Implements kermeta::language::structure::Object.equals(Object)
 	 */	
	method equals(other : kermeta::reflection::Object) : Boolean from Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.equals(self, other)
	end

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
	do
		result := visitor.visitClass(self, context)
	end
}


/**
 * Implements kermeta::reflection::MultiplicityElement
 */
class MultiplicityElement inherits TypedElement, kermeta::reflection::MultiplicityElement, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitMultiplicityElement(self, context)
		end
}


/**
 * Implements kermeta::reflection::Constraint
 */
class Constraint inherits kermeta::reflection::Constraint,NamedElement,kermeta::reflection::Operation, KMStructureVisitable
{
	/**
 	 * Language in which the constraint is expressed
 	 */
	attribute language : ConstraintLanguage

	/**
 	 * Type of the Constraint (precond/postcond/inv)
 	 */
	attribute stereotype : ConstraintType
	
	/**
 	 * Body of the constraint, expressed as a KerMeta expression
 	 */
	attribute body : kermeta::language::behavior::Expression

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitConstraint(self, context)
		end
}


/**
 * Enumeration listing supported constraint languages
 */
enumeration ConstraintLanguage {
	kermeta;
	ocl;
}


/**
 * Enumeration liting the different kinds of constraints
 */
enumeration ConstraintType {
	~pre;
    ~post;
    ~inv;
}


/**
 * Implements kermeta::reflection::Operation
 */
class Operation inherits MultiplicityElement, kermeta::reflection::Operation, KMStructureVisitable
{
	/**
 	 * Body of the Operation, expressed as a KerMeta expression
 	 */
	attribute body : kermeta::language::behavior::Expression

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitOperation(self, context)
		end
}


/**
 * Implements kermeta::reflection::Tag
 */
class Tag inherits Object, kermeta::reflection::Tag, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTag(self, context)
		end
}


/**
 * Implements kermeta::reflection::Property
 */
class Property inherits MultiplicityElement, kermeta::reflection::Property, KMStructureVisitable
{
	/**
 	 * To be written ################################
 	 */
	attribute getterBody : kermeta::language::behavior::Expression

	/**
 	 * To be written ####################################
 	 */
	attribute setterBody : kermeta::language::behavior::Expression
	
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitProperty(self, context)
		end
}


/**
 * Implements kermeta::reflection::TypeContainer
 */
abstract class TypeContainer inherits Object, kermeta::reflection::TypeContainer
{
}


/**
 * Implements kermeta::reflection::VirtualTypeContainer
 */
abstract class VirtualTypeContainer inherits Object, kermeta::reflection::VirtualTypeContainer
{
}


/**
 * Implements kermeta::reflection::GenericTypeDefinition
 */
class GenericTypeDefinition inherits TypeDefinition, kermeta::reflection::GenericTypeDefinition, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitGenericTypeDefinition(self, context)
		end
}


/**
 * Implements kermeta::reflection::ClassDefinition
 */
class ClassDefinition inherits TypeContainer, GenericTypeDefinition, kermeta::reflection::ClassDefinition, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitClassDefinition(self, context)
		end
}


/**
 * Implements kermeta::reflection::TypedElement
 */
class TypedElement inherits TypeContainer, NamedElement, kermeta::reflection::TypedElement, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypedElement(self, context)
		end
}


/**
 * Implements kermeta::reflection::TypeVariable
 */
abstract class TypeVariable inherits Type, NamedElement, kermeta::reflection::TypeVariable, KMStructureVisitable
{
}


/**
 * Implements kermeta::reflection::ObjectTypeVariable
 */
class ObjectTypeVariable inherits TypeContainer, TypeVariable, kermeta::reflection::ObjectTypeVariable, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitObjectTypeVariable(self, context)
		end
}


/**
 * Implements kermeta::reflection::VirtualType
 */
class VirtualType inherits ObjectTypeVariable, kermeta::reflection::VirtualType, KMStructureVisitable {

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitVirtualType(self, context)
		end
}


/**
 * Implements kermeta::reflection::ModelTypeVariable
 */
class ModelTypeVariable inherits TypeVariable, TypeContainer, VirtualTypeContainer, kermeta::reflection::ModelTypeVariable {

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitModelTypeVariable(self, context)
		end
}


/**
 * Implements kermeta::reflection::Model
 */
class Model inherits Object, kermeta::reflection::Model {

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitModel(self, context)
		end

	/**
	 * Implements kermeta::reflection::Model.filter(Type)
	 */
	method filter(typeName : kermeta::reflection::Type) : set kermeta::reflection::Object[0..*] is
		do
			result := contents.select { o | typeName.isInstance(o) }.asSet
		end

	/**
	 * Implements kermeta::reflection::Model.add(Object)
	 */
	method add(obj : kermeta::reflection::Object) : Void is
		do
			// This is only implemented as an extern so that at some point in the future, a runtime
			// typecheck might be added in the event that un-modeltype-safe adds start occurring
			
			// Cute hack. The java code for add is hard if contents hasn't already been accessed. So...
			contents
			extern fr::irisa::triskell::kermeta::runtime::language::Model.add(self, obj)
		end


	/**
	 * Implements kermeta::reflection::Model.remove(Object)
	 */
	method remove(obj : kermeta::reflection::Object) : Void is
		do
			// This is not really a hack.
			extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.remove(contents, obj)
		end


	/**
	 * Implements kermeta::reflection::Model.addAllCompatible(Collection<Object>)
	 */
	method addAllCompatible(objectsToAdd : kermeta::standard::Collection<Object>) : kermeta::standard::Collection<Object> is do
		// version writen in java: don't know if this is faster enough to worth it ...
		// Cute hack. The java code for add is hard if contents hasn't already been accessed. So...
		//contents
		//extern fr::irisa::triskell::kermeta::runtime::language::Model.addAllCompatible(self, objectsToAdd)
		
		// Let's do it in kermeta
		result := kermeta::standard::Set<Object>.new
		objectsToAdd.each { obj | 
			var addedObject : kermeta::reflection::Object init addCompatible(obj) 
			if(not addedObject.isVoid) then
				result.add(obj)
			end
		} 
	end

	/**
	 * Implements kermeta::reflection::Model.addCompatible(Object)
	 */	
	method addCompatible(objectToAdd : kermeta::reflection::Object) : kermeta::reflection::Object is do
		// Cute hack. The java code for addCompatible is hard if contents hasn't already been accessed. So...
		contents
		extern fr::irisa::triskell::kermeta::runtime::language::Model.addCompatible(self, objectToAdd)
	end
}


/**
 * Implements kermeta::reflection::ProductType
 */
class ProductType inherits TypeContainer, Type, kermeta::reflection::ProductType, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitProductType(self, context)
		end
}


/**
 * Implements kermeta::reflection::FunctionType
 */
class FunctionType inherits TypeContainer, Type, kermeta::reflection::FunctionType, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitFunctionType(self, context)
		end
}


/**
 * Implements kermeta::reflection::Type
 */
class Type inherits Object, kermeta::reflection::Type, KMStructureVisitable
{
	/**
	 * Returns a copy of passed Object built by recursively copying attribute
	 * properties, and referencing original reference properties values
	 */
	operation clone (objectToClone : Object) : Object is abstract

	/**
	 * Returns a copy of passed Object built by recursively copying values of
	 * all properties, no matter the property kind
	 */
	operation deepClone (objectToClone : Object) : Object is abstract

	/**
	 * Implements kermeta::reflection::Type.isInstance(Object)
	 */
	method isInstance(element : kermeta::reflection::Object) : Boolean from kermeta::reflection::Type is do
		result := element.isInstanceOf(self)
	end

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitType(self, context)
		end
}


/**
 * Implements kermeta::reflection::TypeVariableBinding
 */
class TypeVariableBinding inherits TypeContainer, Object, kermeta::reflection::TypeVariableBinding, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeVariableBinding(self, context)
		end
}


/**
 * Implements kermeta::reflection::PrimitiveType
 */
class PrimitiveType inherits TypeContainer, DataType, kermeta::reflection::PrimitiveType, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
	do
		result := visitor.visitPrimitiveType(self, context)
	end

	/**
	 * Implements kermeta::language::structure::Type.clone(Object)
	 */	
	method clone(objectToClone : Object) : Object is abstract		
}


/**
 * Implements kermeta::reflection::NamedElement
 */
class NamedElement inherits Object, kermeta::reflection::NamedElement, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitNamedElement(self, context)
		end
}

/*
class SelfType inherits Type, kermeta::reflection::SelfType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitSelfType(self, context)
		end
} */


/**
 * Implements kermeta::reflection::TypeDefinitionContainer
 */
class TypeDefinitionContainer inherits NamedElement, kermeta::reflection::TypeDefinitionContainer, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeDefinitionContainer(self, context)
		end
}


/**
 * Implements kermeta::reflection::Package
 */
class Package inherits TypeDefinitionContainer, kermeta::reflection::Package, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitPackage(self, context)
		end
}


/**
 * Implements kermeta::reflection::ModelingUnit
 */
class ModelingUnit inherits kermeta::reflection::ModelingUnit, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitModelingUnit(self, context)
		end
}

/**
 * Implements kermeta::reflection::Filter
 */
class Filter inherits kermeta::reflection::Filter, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitFilter(self, context)
		end
}


/**
 * Extends kermeta::reflection::Require with visitor pattern
 */
abstract class Require inherits kermeta::reflection::Require, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitRequire(self, context)
		end
}


/**
 * Extends kermeta::reflection::Using with visitor pattern
 */
abstract class Using inherits kermeta::reflection::Using, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitUsing(self, context)
		end
}


/**
 * Implements kermeta::reflection::TypeDefinition
 */
class TypeDefinition inherits NamedElement, kermeta::reflection::TypeDefinition, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeDefinition(self, context)
		end
}


/**
 * Implements kermeta::reflection::VoidType
 */
class VoidType inherits Type, kermeta::reflection::VoidType, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitVoidType(self, context)
		end
}


/**
 * Implements kermeta::reflection::DataType
 */
class DataType inherits TypeDefinition, Type, kermeta::reflection::DataType, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitDataType(self, context)
		end

	/**
	 * Implements kermeta::language::structure::Type.clone(Object)
	 */	
	method clone(objectToClone : Object) : Object is abstract
}


/**
 * Implements kermeta::reflection::Enumeration
 */
class Enumeration inherits DataType, kermeta::reflection::Enumeration, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitEnumeration(self, context)
		end

	/**
	 * Implements kermeta::language::structure::Type.clone(Object)
	 */
	method clone(objectToClone : Object) : Object is
	do
		raise "NOT IMPLEMENTED"
	end
}


/**
 * Implements kermeta::reflection::EnumerationLiteral
 */
class EnumerationLiteral inherits NamedElement, kermeta::reflection::EnumerationLiteral, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitEnumerationLiteral(self, context)
		end
}


/**
 * Implements kermeta::reflection::Parameter
 */
class Parameter inherits MultiplicityElement, kermeta::reflection::Parameter, KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitParameter(self, context)
		end
}


/**
 * Implementation of the Visitor pattern for the model elements contained in structure package
 */
abstract class KMStructureVisitor<ContextType, ResultType>
{
	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitClass(node : Class, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitMultiplicityElement(node : MultiplicityElement, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitOperation(node : Operation, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTag(node : Tag, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitProperty(node : Property, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitClassDefinition(node : ClassDefinition, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTypedElement(node : TypedElement, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitObjectTypeVariable(node : ObjectTypeVariable, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitVirtualType(node : VirtualType, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitModelTypeVariable(node : ModelTypeVariable, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitModel(node : Model, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitProductType(node : ProductType, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitFunctionType(node : FunctionType, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitType(node : Type, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTypeVariableBinding(node : TypeVariableBinding, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitPrimitiveType(node : PrimitiveType, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitNamedElement(node : NamedElement, context : ContextType) : ResultType is do end

	//operation visitSelfType(node : SelfType, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitPackage(node : Package, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTypeDefinition(node : TypeDefinition, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitVoidType(node : VoidType, context : ContextType) : ResultType is do end
	
	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitDataType(node : DataType, context : ContextType) : ResultType is do end
	
	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitEnumeration(node : Enumeration, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitEnumerationLiteral(node : EnumerationLiteral, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitParameter(node : Parameter, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitGenericTypeDefinition(node : GenericTypeDefinition, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitParameterizedType(node : ParameterizedType, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitModelType(node : ModelType, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTypeDefinitionContainer(node : TypeDefinitionContainer, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitConstraint(node : Constraint, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitModelingUnit(node : ModelingUnit, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitRequire(node : Require, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitUsing(node : Using, context : ContextType) : ResultType is do end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitFilter(node : Filter, context : ContextType) : ResultType is do end

}


/**
 * All the classes defined in this <code>kermeta::language::structure</code> package 
 * inherit this class. Part of Visitor pattern implementation.
 */
abstract class KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	operation acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType is abstract
}
