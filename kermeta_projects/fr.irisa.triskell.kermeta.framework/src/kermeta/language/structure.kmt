package kermeta::language::structure; 


require "../Standard.kmt"
require "behavior.kmt" 

alias String : kermeta::standard::String;
class Object inherits kermeta::reflection::Object, KMStructureVisitable
{
	method getMetaClass() : kermeta::reflection::Class from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getMetaClass(self)
	end
	
	method container() : kermeta::reflection::Object from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.container(self)
	end
	
	method equals(element : kermeta::reflection::Object) : Boolean from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.equals(self, element)
	end
	
	method isNotEqual(element : kermeta::reflection::Object) : Boolean from kermeta::reflection::Object is do
		result := not equals(element)
	end
	
	method get(~property : kermeta::reflection::Property) : kermeta::reflection::Object from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.get(self, ~property)
	end
	
	method ~set(~property : kermeta::reflection::Property, element : kermeta::reflection::Object) : Void from kermeta::reflection::Object is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.~set(self, ~property, element)
	end
	
	method isSet(~property : kermeta::reflection::Property) : Boolean from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isSet(self, ~property)
	end
	
	method unset(~property : kermeta::reflection::Property) : Void from kermeta::reflection::Object is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.unSet(self, ~property)
	end
	
	method oid() : Integer is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.oid(self)
	end
	
	method toString() : String is do
		result := "[" + self.getMetaClass.classDefinition.qualifiedName + ":" + oid.toString + "]"
	end
	
	method isFrozen() : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isFrozen(self)
	end
	
	method freeze() : Void is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.freeze(self)
	end
	
}
alias Boolean : kermeta::standard::Boolean;
alias Integer : kermeta::standard::Integer;
class Class inherits Type, kermeta::reflection::Class, KMStructureVisitable
{
	method new() : kermeta::reflection::Object from kermeta::reflection::Class is 
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.newObject(self)
	end

	method clone(objectToClone : Object) : Object is
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.cloneObject(self, objectToClone)
	end
	
	method isInstance(object : Object) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.isInstance(self, object)
	end 
	
	method isSubType(object : kermeta::reflection::Type) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.isSubType(self, object)
	end
	
	method equals(other : Object) : Boolean from Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.equals(self, other)
	end
	
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitClass(self, context)
		end
}
class MultiplicityElement inherits TypedElement, kermeta::reflection::MultiplicityElement, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitMultiplicityElement(self, context)
		end
}
class Operation inherits MultiplicityElement, kermeta::reflection::Operation, KMStructureVisitable
{
	attribute body : kermeta::language::behavior::Expression

	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitOperation(self, context)
		end
}
class Tag inherits Object, kermeta::reflection::Tag, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTag(self, context)
		end
}
class Property inherits MultiplicityElement, kermeta::reflection::Property, KMStructureVisitable
{

	attribute getterbody : kermeta::language::behavior::Expression
	attribute setterbody : kermeta::language::behavior::Expression
	
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitProperty(self, context)
		end
}
abstract class TypeContainer inherits Object, kermeta::reflection::TypeContainer
{
}
class ClassDefinition inherits TypeContainer, TypeDefinition, kermeta::reflection::ClassDefinition, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitClassDefinition(self, context)
		end
}
class TypedElement inherits TypeContainer, NamedElement, kermeta::reflection::TypedElement, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypedElement(self, context)
		end
}
class TypeVariable inherits TypeContainer, Type, NamedElement, kermeta::reflection::TypeVariable, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeVariable(self, context)
		end
}
class ProductType inherits TypeContainer, Type, kermeta::reflection::ProductType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitProductType(self, context)
		end
}
class FunctionType inherits TypeContainer, Type, kermeta::reflection::FunctionType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitFunctionType(self, context)
		end
}
class Type inherits Object, kermeta::reflection::Type, KMStructureVisitable
{
/*
	method isInstance(element : Object) : Boolean from kermeta::reflection::Type is do
		//TODO: implement operation isInstance
	end
*/

	operation clone(objectToClone : Object) : Object is abstract

	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitType(self, context)
		end
}
class TypeVariableBinding inherits TypeContainer, Object, kermeta::reflection::TypeVariableBinding, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeVariableBinding(self, context)
		end
}
class PrimitiveType inherits TypeContainer, DataType, kermeta::reflection::PrimitiveType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
	do
		result := visitor.visitPrimitiveType(self, context)
	end
			
	method clone(objectToClone : Object) : Object is abstract		

}

class NamedElement inherits Object, kermeta::reflection::NamedElement, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitNamedElement(self, context)
		end
}

class SelfType inherits Type, kermeta::reflection::SelfType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitSelfType(self, context)
		end
}
class Package inherits NamedElement, kermeta::reflection::Package, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitPackage(self, context)
		end
}
class TypeDefinition inherits NamedElement, kermeta::reflection::TypeDefinition, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeDefinition(self, context)
		end
}
class VoidType inherits Type, kermeta::reflection::VoidType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitVoidType(self, context)
		end
}
class DataType inherits TypeDefinition, Type, kermeta::reflection::DataType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitDataType(self, context)
		end
	
	method clone(objectToClone : Object) : Object is abstract
	
}
class Enumeration inherits DataType, kermeta::reflection::Enumeration, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitEnumeration(self, context)
		end

	method clone(objectToClone : Object) : Object is
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Enumeration.cloneObject(self, objectToClone)
	end
}

class EnumerationLiteral inherits NamedElement, kermeta::reflection::EnumerationLiteral, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitEnumerationLiteral(self, context)
		end
}
class Parameter inherits MultiplicityElement, kermeta::reflection::Parameter, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitParameter(self, context)
		end
}
alias UnlimitedNatural : kermeta::standard::UnlimitedNatural;
abstract class KMStructureVisitor<ContextType, ResultType>
{
	operation visitClass(node : Class, context : ContextType) : ResultType is abstract
	operation visitMultiplicityElement(node : MultiplicityElement, context : ContextType) : ResultType is abstract
	operation visitOperation(node : Operation, context : ContextType) : ResultType is abstract
	operation visitTag(node : Tag, context : ContextType) : ResultType is abstract
	operation visitProperty(node : Property, context : ContextType) : ResultType is abstract
	operation visitClassDefinition(node : ClassDefinition, context : ContextType) : ResultType is abstract
	operation visitTypedElement(node : TypedElement, context : ContextType) : ResultType is abstract
	operation visitTypeVariable(node : TypeVariable, context : ContextType) : ResultType is abstract
	operation visitProductType(node : ProductType, context : ContextType) : ResultType is abstract
	operation visitFunctionType(node : FunctionType, context : ContextType) : ResultType is abstract
	operation visitType(node : Type, context : ContextType) : ResultType is abstract
	operation visitTypeVariableBinding(node : TypeVariableBinding, context : ContextType) : ResultType is abstract
	operation visitPrimitiveType(node : PrimitiveType, context : ContextType) : ResultType is abstract
	operation visitNamedElement(node : NamedElement, context : ContextType) : ResultType is abstract
	operation visitSelfType(node : SelfType, context : ContextType) : ResultType is abstract
	operation visitPackage(node : Package, context : ContextType) : ResultType is abstract
	operation visitTypeDefinition(node : TypeDefinition, context : ContextType) : ResultType is abstract
	operation visitVoidType(node : VoidType, context : ContextType) : ResultType is abstract
	operation visitDataType(node : DataType, context : ContextType) : ResultType is abstract
	operation visitEnumeration(node : Enumeration, context : ContextType) : ResultType is abstract
	operation visitEnumerationLiteral(node : EnumerationLiteral, context : ContextType) : ResultType is abstract
	operation visitParameter(node : Parameter, context : ContextType) : ResultType is abstract
}
abstract class KMStructureVisitable
{
	operation acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType is abstract
}

