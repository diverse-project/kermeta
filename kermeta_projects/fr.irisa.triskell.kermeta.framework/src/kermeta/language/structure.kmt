package kermeta::language::structure;

require "../reflection/reflection.kmt"

alias String : kermeta::standard::String;
class Object inherits kermeta::reflection::Object, KMStructureVisitable
{
	reference tag : set Tag[0..*]#object
	operation getMetaClass() : Class is do
		//TODO: implement operation getMetaClass
	end
	operation container() : Object is do
		//TODO: implement operation container
	end
	operation equals(element : Object) : Boolean is do
		//TODO: implement operation equals
	end
	operation get(~property : Property) : Object is do
		//TODO: implement operation get
	end
	operation ~set(~property : Property, element : Object) : Void is do
		//TODO: implement operation set
	end
	operation isSet(~property : Property) : Boolean is do
		//TODO: implement operation isSet
	end
	operation unset(~property : Property) : Void is do
		//TODO: implement operation unset
	end
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitObject(self, context)
		end
}
alias Boolean : kermeta::standard::Boolean;
alias Integer : kermeta::standard::Integer;
class Class inherits Type, kermeta::reflection::Class, KMStructureVisitable
{
	reference classDefinition : ClassDefinition[1..1]
	attribut typeParamBinding : set TypeVariableBinding[0..*]
	property readonly ownedAttribute : set Property[0..*]
		getter is do
			//TODO: implement getter for derived property ownedAttribute
		end
	property readonly ownedOperation : set Operation[0..*]
		getter is do
			//TODO: implement getter for derived property ownedOperation
		end
	property readonly superClass : set Class[0..*]
		getter is do
			//TODO: implement getter for derived property superClass
		end
	property readonly isAbstract : Boolean
		getter is do
			//TODO: implement getter for derived property isAbstract
		end
	property readonly name : String
		getter is do
			//TODO: implement getter for derived property name
		end
	operation new() : Object is do
		//TODO: implement operation new
	end
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitClass(self, context)
		end
}
class MultiplicityElement inherits TypedElement, kermeta::reflection::MultiplicityElement, KMStructureVisitable
{
	attribut isOrdered : Boolean
	attribut isUnique : Boolean
	attribut lower : Integer
	attribut upper : UnlimitedNatural
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitMultiplicityElement(self, context)
		end
}
class Operation inherits MultiplicityElement, kermeta::reflection::Operation, KMStructureVisitable
{
	attribut isAbstract : Boolean
	attribut body : kermeta::behavior::Expression
	reference superOperation : Operation
	reference owningClass : ClassDefinition#ownedOperation
	reference typeParameter : set TypeVariable[0..*]
	reference raisedException : set Type[0..*]
	attribut ownedParameter : set Parameter[0..*]#~operation
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitOperation(self, context)
		end
}
class Tag inherits Object, kermeta::reflection::Tag, KMStructureVisitable
{
	reference object : set Object[1..*]#tag
	attribut name : String
	attribut value : String
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTag(self, context)
		end
}
class Property inherits MultiplicityElement, kermeta::reflection::Property, KMStructureVisitable
{
	attribut getterbody : kermeta::behavior::Expression
	attribut setterbody : kermeta::behavior::Expression
	reference owningClass : ClassDefinition#ownedAttributes
	reference opposite : Property
	attribut isReadOnly : Boolean
	attribut default : String
	attribut isComposite : Boolean
	attribut isDerived : Boolean
	attribut isID : Boolean
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitProperty(self, context)
		end
}
abstract class TypeContainer inherits Object, kermeta::reflection::TypeContainer
{
	attribut containedType : set Type[0..*]
}
class ClassDefinition inherits TypeContainer, TypeDefinition, kermeta::reflection::ClassDefinition, KMStructureVisitable
{
	attribut isAbstract : Boolean
	attribut ownedAttributes : set Property[0..*]#owningClass
	attribut ownedOperation : set Operation[0..*]#owningClass
	reference superType : set Type[0..*]
	attribut typeParameter : set TypeVariable[0..*]
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitClassDefinition(self, context)
		end
}
class TypedElement inherits TypeContainer, NamedElement, kermeta::reflection::TypedElement, KMStructureVisitable
{
	reference type : Type
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypedElement(self, context)
		end
}
class TypeVariable inherits TypeContainer, Type, NamedElement, kermeta::reflection::TypeVariable, KMStructureVisitable
{
	reference supertype : Type
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeVariable(self, context)
		end
}
class ProductType inherits TypeContainer, Type, kermeta::reflection::ProductType, KMStructureVisitable
{
	reference type : set Type[1..*]
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitProductType(self, context)
		end
}
class FunctionType inherits TypeContainer, Type, kermeta::reflection::FunctionType, KMStructureVisitable
{
	reference left : Type
	reference right : Type
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitFunctionType(self, context)
		end
}
class Type inherits Object, kermeta::reflection::Type, KMStructureVisitable
{
	operation isInstance(element : Object) : Boolean is do
		//TODO: implement operation isInstance
	end
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitType(self, context)
		end
}
class TypeVariableBinding inherits TypeContainer, Object, kermeta::reflection::TypeVariableBinding, KMStructureVisitable
{
	reference variable : TypeVariable[1..1]
	reference type : Type[1..1]
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeVariableBinding(self, context)
		end
}
class PrimitiveType inherits TypeContainer, DataType, kermeta::reflection::PrimitiveType, KMStructureVisitable
{
	reference instanceType : Type
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitPrimitiveType(self, context)
		end
}
class NamedElement inherits Object, kermeta::reflection::NamedElement, KMStructureVisitable
{
	attribut name : String
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitNamedElement(self, context)
		end
}
class SelfType inherits Type, kermeta::reflection::SelfType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitSelfType(self, context)
		end
}
class Package inherits NamedElement, kermeta::reflection::Package, KMStructureVisitable
{
	attribut ownedTypeDefinition : set TypeDefinition[0..*]
	attribut nestedPackage : set Package[0..*]#nestingPackage
	reference nestingPackage : Package#nestedPackage
	attribut uri : String
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitPackage(self, context)
		end
}
class TypeDefinition inherits NamedElement, kermeta::reflection::TypeDefinition, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeDefinition(self, context)
		end
}
class VoidType inherits Type, kermeta::reflection::VoidType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitVoidType(self, context)
		end
}
class DataType inherits TypeDefinition, Type, kermeta::reflection::DataType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitDataType(self, context)
		end
}
class Enumeration inherits DataType, kermeta::reflection::Enumeration, KMStructureVisitable
{
	attribut ownedLiteral : set EnumerationLiteral[0..*]#~enumeration
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitEnumeration(self, context)
		end
}
class EnumerationLiteral inherits NamedElement, kermeta::reflection::EnumerationLiteral, KMStructureVisitable
{
	reference ~enumeration : Enumeration#ownedLiteral
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitEnumerationLiteral(self, context)
		end
}
class Parameter inherits MultiplicityElement, kermeta::reflection::Parameter, KMStructureVisitable
{
	reference ~operation : Operation#ownedParameter
	method acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : ContextType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitParameter(self, context)
		end
}
alias UnlimitedNatural : kermeta::standard::UnlimitedNatural;
abstract class KMStructureVisitor<ContextType>
{
	operation visitObject(node : Object) : ContextType is abstract
	operation visitClass(node : Class) : ContextType is abstract
	operation visitMultiplicityElement(node : MultiplicityElement) : ContextType is abstract
	operation visitOperation(node : Operation) : ContextType is abstract
	operation visitTag(node : Tag) : ContextType is abstract
	operation visitProperty(node : Property) : ContextType is abstract
	operation visitClassDefinition(node : ClassDefinition) : ContextType is abstract
	operation visitTypedElement(node : TypedElement) : ContextType is abstract
	operation visitTypeVariable(node : TypeVariable) : ContextType is abstract
	operation visitProductType(node : ProductType) : ContextType is abstract
	operation visitFunctionType(node : FunctionType) : ContextType is abstract
	operation visitType(node : Type) : ContextType is abstract
	operation visitTypeVariableBinding(node : TypeVariableBinding) : ContextType is abstract
	operation visitPrimitiveType(node : PrimitiveType) : ContextType is abstract
	operation visitNamedElement(node : NamedElement) : ContextType is abstract
	operation visitSelfType(node : SelfType) : ContextType is abstract
	operation visitPackage(node : Package) : ContextType is abstract
	operation visitTypeDefinition(node : TypeDefinition) : ContextType is abstract
	operation visitVoidType(node : VoidType) : ContextType is abstract
	operation visitDataType(node : DataType) : ContextType is abstract
	operation visitEnumeration(node : Enumeration) : ContextType is abstract
	operation visitEnumerationLiteral(node : EnumerationLiteral) : ContextType is abstract
	operation visitParameter(node : Parameter) : ContextType is abstract
}
abstract class KMStructureVisitable
{
	operation acceptKMStructureVisitor<ContextType>(visitor : KMStructureVisitor<ContextType>, context : ContextType) : set ContextType[0..0] is abstract
}

