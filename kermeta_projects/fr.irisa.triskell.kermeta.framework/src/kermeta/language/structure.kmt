/* $Id: structure.kmt,v 1.28 2006-08-07 15:42:31 zdrey Exp $
 * Project : framework
 * File : structure.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Jul 04, 2005
 * Authors :
 *  Franck Fleurey  ffleurey@irisa.fr 
 *  Zoe Drey 		zdrey@irisa.fr
 *  Jean-Philippe Thibault 		jpthibault@irisa.fr
 */
 
/**
 * Contains the concrete implementation (including the operation bodies) 
 * of the classes of the kermeta::reflection package.
 */
package kermeta::language::structure; 


require "../Standard.kmt"
require "behavior.kmt" 

alias String : kermeta::standard::String;
class Object inherits kermeta::reflection::Object, KMStructureVisitable
{
	method getMetaClass() : kermeta::reflection::Class from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getMetaClass(self)
	end
	
	method container() : kermeta::reflection::Object from kermeta::reflection::Object is do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Object.container(self)
	end
	
	method checkInvariants() : Void from kermeta::reflection::Object is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.checkInvariants(self)
	end
	
	method checkAllInvariants() : Void from kermeta::reflection::Object is do
		if(self!=void) then
			// Call the invariant verification
			self.checkInvariants
			// Invariant checking on each value of self properties			
			self.getMetaClass.ownedAttribute.each { subObj |
				if ( subObj.isComposite) then
					if ( self.get(subObj).getMetaClass.typeDefinition.name.equals("ReflectiveSequence") 
						or self.get(subObj).getMetaClass.typeDefinition.name.equals("ReflectiveCollection") ) then

						var subObjInstances : kermeta::standard::Collection<kermeta::reflection::Object>
						subObjInstances ?= self.get(subObj)
						subObjInstances.each { aSubObjInstances | aSubObjInstances.checkAllInvariants }
					else
						self.get(subObj).checkAllInvariants
					end
				end
			}
		end
	end
	
	method equals(element : kermeta::reflection::Object) : Boolean from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.equals(self, element)
	end
	
	method isNotEqual(element : kermeta::reflection::Object) : Boolean from kermeta::reflection::Object is do
		result := not equals(element)
	end
	
	method get(~property : kermeta::reflection::Property) : kermeta::reflection::Object from kermeta::reflection::Object is do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Object.get(self, ~property)
	end
	
	method ~set(~property : kermeta::reflection::Property, element : kermeta::reflection::Object) : Void from kermeta::reflection::Object is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.~set(self, ~property, element)
	end
	
	method isSet(~property : kermeta::reflection::Property) : Boolean from kermeta::reflection::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isSet(self, ~property)
	end
	
	method unset(~property : kermeta::reflection::Property) : Void from kermeta::reflection::Object is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.unSet(self, ~property)
	end
	
	method oid() : Integer is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.oid(self)
	end
	
	method toString() : String is do
		result := "[" + self.getMetaClass.typeDefinition.qualifiedName + ":" + oid.toString + "]"
	end
	
	method isFrozen() : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isFrozen(self)
	end
	
	method isVoid() : Boolean is do
		result := false
	end
	
	method freeze() : Void is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.freeze(self)
	end
	
}
alias Boolean : kermeta::standard::Boolean;
alias Integer : kermeta::standard::Integer;


class ParameterizedType inherits Type, kermeta::reflection::ParameterizedType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitParameterizedType(self, context)
		end
}
class ModelType inherits ParameterizedType, kermeta::reflection::ModelType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitModelType(self, context)
		end
}

class Class inherits ParameterizedType, kermeta::reflection::Class, KMStructureVisitable
{
	method new() : kermeta::reflection::Object from kermeta::reflection::Class is 
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.newObject(self)
	end

	method clone(objectToClone : Object) : Object is
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.cloneObject(self, objectToClone)
	end
	
	method deepClone(objectToClone : Object) : Object is
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.deepCloneObject(self, objectToClone)
	end
	
	method isInstance(object : kermeta::reflection::Object) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.isInstance(self, object)
	end 
	
	method isSubType(object : kermeta::reflection::Type) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.isSubType(self, object)
	end
	
	method equals(other : kermeta::reflection::Object) : Boolean from Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.equals(self, other)
	end
	
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
	do
		result := visitor.visitClass(self, context)
	end
}


class MultiplicityElement inherits TypedElement, kermeta::reflection::MultiplicityElement, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitMultiplicityElement(self, context)
		end
}
class Constraint inherits kermeta::reflection::Constraint,NamedElement,kermeta::reflection::Operation, KMStructureVisitable
{
	attribute language : ConstraintLanguage
	attribute stereotype : ConstraintType
	
	attribute body : kermeta::language::behavior::Expression
	
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitConstraint(self, context)
		end
}
enumeration ConstraintLanguage {
	kermeta;
	ocl;
}
enumeration ConstraintType {
	~pre;
    ~post;
    ~inv;
}
class Operation inherits MultiplicityElement, kermeta::reflection::Operation, KMStructureVisitable
{
	attribute body : kermeta::language::behavior::Expression

	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitOperation(self, context)
		end
}
class Tag inherits Object, kermeta::reflection::Tag, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTag(self, context)
		end
}
class Property inherits MultiplicityElement, kermeta::reflection::Property, KMStructureVisitable
{

	attribute getterBody : kermeta::language::behavior::Expression
	attribute setterBody : kermeta::language::behavior::Expression
	
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitProperty(self, context)
		end
}
abstract class TypeContainer inherits Object, kermeta::reflection::TypeContainer
{
}
class GenericTypeDefinition inherits TypeDefinition, kermeta::reflection::GenericTypeDefinition, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitGenericTypeDefinition(self, context)
		end
}
class ClassDefinition inherits TypeContainer, GenericTypeDefinition, kermeta::reflection::ClassDefinition, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitClassDefinition(self, context)
		end
}
class ModelTypeDefinition inherits GenericTypeDefinition, TypeDefinitionContainer, kermeta::reflection::ModelTypeDefinition, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitModelTypeDefinition(self, context)
		end
}
class TypedElement inherits TypeContainer, NamedElement, kermeta::reflection::TypedElement, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypedElement(self, context)
		end
}
class TypeVariable inherits TypeContainer, Type, NamedElement, kermeta::reflection::TypeVariable, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeVariable(self, context)
		end
}
class ProductType inherits TypeContainer, Type, kermeta::reflection::ProductType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitProductType(self, context)
		end
}

class FunctionType inherits TypeContainer, Type, kermeta::reflection::FunctionType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitFunctionType(self, context)
		end
}

class Type inherits Object, kermeta::reflection::Type, KMStructureVisitable
{
	
	operation clone (objectToClone : Object) : Object is abstract


	operation deepClone (objectToClone : Object) : Object is abstract

/*
	method isInstance(element : Object) : Boolean from kermeta::reflection::Type is do
		//TODO: implement operation isInstance
	end
*/

	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitType(self, context)
		end
}


class TypeVariableBinding inherits TypeContainer, Object, kermeta::reflection::TypeVariableBinding, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeVariableBinding(self, context)
		end
}
class PrimitiveType inherits TypeContainer, DataType, kermeta::reflection::PrimitiveType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
	do
		result := visitor.visitPrimitiveType(self, context)
	end
			
	method clone(objectToClone : Object) : Object is abstract		

}

class NamedElement inherits Object, kermeta::reflection::NamedElement, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitNamedElement(self, context)
		end
}

/**
class SelfType inherits Type, kermeta::reflection::SelfType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitSelfType(self, context)
		end
} */
class TypeDefinitionContainer inherits NamedElement, kermeta::reflection::TypeDefinitionContainer, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeDefinitionContainer(self, context)
		end
}

class Package inherits TypeDefinitionContainer, kermeta::reflection::Package, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitPackage(self, context)
		end
}
class TypeDefinition inherits NamedElement, kermeta::reflection::TypeDefinition, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeDefinition(self, context)
		end
}
class VoidType inherits Type, kermeta::reflection::VoidType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitVoidType(self, context)
		end
}
class DataType inherits TypeDefinition, Type, kermeta::reflection::DataType, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitDataType(self, context)
		end
	
	method clone(objectToClone : Object) : Object is abstract
	
}
class Enumeration inherits DataType, kermeta::reflection::Enumeration, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitEnumeration(self, context)
		end

	method clone(objectToClone : Object) : Object is
	do
		raise "NOT IMPLEMENTED"
	end
}

class EnumerationLiteral inherits NamedElement, kermeta::reflection::EnumerationLiteral, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitEnumerationLiteral(self, context)
		end
}
class Parameter inherits MultiplicityElement, kermeta::reflection::Parameter, KMStructureVisitable
{
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitParameter(self, context)
		end
}
alias UnlimitedNatural : kermeta::standard::UnlimitedNatural;
abstract class KMStructureVisitor<ContextType, ResultType>
{
	operation visitClass(node : Class, context : ContextType) : ResultType is abstract
	operation visitMultiplicityElement(node : MultiplicityElement, context : ContextType) : ResultType is abstract
	operation visitOperation(node : Operation, context : ContextType) : ResultType is abstract
	operation visitTag(node : Tag, context : ContextType) : ResultType is abstract
	operation visitProperty(node : Property, context : ContextType) : ResultType is abstract
	operation visitClassDefinition(node : ClassDefinition, context : ContextType) : ResultType is abstract
	operation visitTypedElement(node : TypedElement, context : ContextType) : ResultType is abstract
	operation visitTypeVariable(node : TypeVariable, context : ContextType) : ResultType is abstract
	operation visitProductType(node : ProductType, context : ContextType) : ResultType is abstract
	operation visitFunctionType(node : FunctionType, context : ContextType) : ResultType is abstract
	operation visitType(node : Type, context : ContextType) : ResultType is abstract
	operation visitTypeVariableBinding(node : TypeVariableBinding, context : ContextType) : ResultType is abstract
	operation visitPrimitiveType(node : PrimitiveType, context : ContextType) : ResultType is abstract
	operation visitNamedElement(node : NamedElement, context : ContextType) : ResultType is abstract
	//operation visitSelfType(node : SelfType, context : ContextType) : ResultType is abstract
	operation visitPackage(node : Package, context : ContextType) : ResultType is abstract
	operation visitTypeDefinition(node : TypeDefinition, context : ContextType) : ResultType is abstract
	operation visitVoidType(node : VoidType, context : ContextType) : ResultType is abstract
	operation visitDataType(node : DataType, context : ContextType) : ResultType is abstract
	operation visitEnumeration(node : Enumeration, context : ContextType) : ResultType is abstract
	operation visitEnumerationLiteral(node : EnumerationLiteral, context : ContextType) : ResultType is abstract
	operation visitParameter(node : Parameter, context : ContextType) : ResultType is abstract
	operation visitGenericTypeDefinition(node : GenericTypeDefinition, context : ContextType) : ResultType is abstract
	operation visitModelTypeDefinition(node : ModelTypeDefinition, context : ContextType) : ResultType is abstract
	operation visitParameterizedType(node : ParameterizedType, context : ContextType) : ResultType is abstract
	operation visitModelType(node : ModelType, context : ContextType) : ResultType is abstract
	operation visitTypeDefinitionContainer(node : TypeDefinitionContainer, context : ContextType) : ResultType is abstract
	operation visitConstraint(node : Constraint, context : ContextType) : ResultType is abstract
	
}
abstract class KMStructureVisitable
{
	operation acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType is abstract
}
