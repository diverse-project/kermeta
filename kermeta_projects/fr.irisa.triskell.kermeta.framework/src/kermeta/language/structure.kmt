/* $Id: structure.kmt,v 1.61 2008-07-10 09:48:08 ftanguy Exp $
 * Project : framework
 * File : structure.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Jul 04, 2005
 * Authors :
 *  Franck Fleurey  ffleurey@irisa.fr 
 *  Zoe Drey 		zdrey@irisa.fr
 *  Jean-Philippe Thibault 		jpthibault@irisa.fr
 */
 
/**
 * Contains the concrete implementation (including the operation bodies) 
 * of the classes of the <code>kermeta::reflection</code> package.
 * If you need more documentation, please take a look at the
 * <code>kermeta::reflection</code> package which is more complete.
 * <img src="platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/language_structure_package.png"/>
 * <img src="platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/language_structure_visitor_view.png"/>
 */
@uri "http://www.kermeta.org/kermeta/language/structure"
package kermeta::language::structure; 


require "../Standard.kmt"
require "platform:/resource/fr.irisa.triskell.kermeta.model/build/ecore/kermeta_java.ecore"

using kermeta::standard

 @EMF_needProperty "name=oid isUnique=false isOrdered=false classDefinitionQN=kermeta::standard::Integer"
 @EMF_needProperty "name=container isUnique=false isOrdered=false classDefinitionQN=kermeta::language::structure::Object"
aspect class Object
{
	/**
	 * Returns the Class object that is the metaclass of current Object
	 */
	operation getMetaClass() : Class from Object is do
		@compiledJavaExtern "ExecutionContext.getInstance().getMetaClass( this.getClass().getName() );"
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getMetaClass(self)
	end

	/**
	 * Returns the Object that contains current Object, void if the Object has
	 * no container
	 */
	operation container() : Object from Object is do
		@compiledJavaExtern "ObjectUtil.container(this);"
		result := extern fr::irisa::triskell::kermeta::runtime::language::Object.container(self)
	end

	/**
	 * Runs checking of invariants defined for the metaclass of the Object
	 */	
	operation checkInvariants() : Void from Object is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.checkInvariants(self)
	end
	
	/**
	 * Recursively runs checking of invariants defined for the metaclass of the Object
	 * and its supertypes
	 */	
	operation checkAllInvariants() : Void from Object is do
		if(self!=void) then
			// Call the invariant verification
			self.checkInvariants
			// Invariant checking on each value of self properties			
			var cd : ClassDefinition
			cd ?= self.getMetaClass.typeDefinition
			cd.allAttribute.each { subObj |
				if ( subObj.isComposite) then
					if ( self.get(subObj).getMetaClass.typeDefinition.name.equals("ReflectiveSequence") 
						or self.get(subObj).getMetaClass.typeDefinition.name.equals("ReflectiveCollection") ) then

						var subObjInstances : kermeta::standard::Collection<Object>
						subObjInstances ?= self.get(subObj)
						subObjInstances.each { aSubObjInstances | aSubObjInstances.checkAllInvariants }
					else
						self.get(subObj).checkAllInvariants
					end
				end
			}
		end
	end

	/**
	 * semantic equality,
	 * if you wish to test for object identity you need to use the method oid
	 * ex: x.oid == y.oid
	 * by default, (ie. if not overloaded), the equals method for class Object implements 
	 * the most discriminating possible equivalence relation on objects; that is, for any non-null 
	 * reference values x and y, this method returns true if and only if x and y refer to the same 
	 * object (x.oid == y.oid has the value true). 
	 *
	 * note1: the operator == is mapped to this 
	 * note2: overloading this operation have some impact on the behavior on collection and hashtable that rely on it
	 */	
	operation equals(element : Object) : Boolean from Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.equals(self, element)
	end
	
	/**
	 * See kermeta::language::structure::Object.equals(Object)
	 */	
	operation isNotEqual(element : Object) : Boolean from Object is do
		result := not equals(element)
	end		
	
	/**
	 * Returns a Boolean stating whether the current Object is an instance of the given Class
	 */	
	operation isKindOf(cl : Class) : Boolean is do
		result := (self.getMetaClass.equals(cl))
	end
	
	/** 
	 * Returns the instances of the given property for this Object.
	 *
	 * Example : 
	 * <pre>
	 * class A { reference attr : String }
	 * </pre>
	 * Using A :
	 * <pre>
	 * operation getAProp() is do
	 *    var a : A
	 *    var s : String
	 *    var the_attr : Property init self.getMetaClass.ownedAttribute.one
	 *    s ?= a.get(the_attr)
	 * end
	 * </pre>
	 * The user has to cast
	 * the result of this method according to the type and the upper multiplicity
	 * of this property. If upper multiplicity > 1, than the effective type of the 
	 * result is a Sequence<ThePropertyName>. Otherwise, the type corresponds to 
	 * the name of the given Property (i.e the type of the property instance).
	 */
	operation get(~property : Property) : Object from Object is do
		@compiledJavaExtern "ObjectUtil.get(this, property);"
		result := extern fr::irisa::triskell::kermeta::runtime::language::Object.get(self, ~property)
	end
	
	/**
	 * Sets the <code>element</code> to the <code>~property</code> of the object 
	 */	
	operation ~set(~property : Property, element : Object) : Void from Object is do
		if element.isInstanceOf(~property.type) then
			@compiledJavaExtern "ObjectUtil.set(this, property, element);"
			extern fr::irisa::triskell::kermeta::runtime::language::Object.~set(self, ~property, element)
		else
			var e : kermeta::exceptions::IncompatibleTypeError init kermeta::exceptions::IncompatibleTypeError.new
			e.message := "IncompatibleTypeError : Cannot set property " + ~property.name + " of object " + self.toString + " to " + element.toString + "."
			raise e
		end
	end
	
	/**
	 * True if the <code>~property</code> of the object has been set
	 */	
	operation isSet(~property : Property) : Boolean from Object is do
		@compiledJavaExtern "ObjectUtil.isSet(this, property);"
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isSet(self, ~property)
	end
	
	/**
	 * Remove the element set as the <code>~property</code> of the object.
	 * The <code>isSet(~property)</code> method will then return False
	 */	
	operation unset(~property : Property) : Void from Object is do
		@compiledJavaExtern "ObjectUtil.unset(this, property);"
		extern fr::irisa::triskell::kermeta::runtime::language::Object.unSet(self, ~property)
	end
	
	/**
	 * Returns the unique Oid of the Object
	 */	
	operation oid() : Integer is do
		@compiledJavaExtern "ObjectUtil.getOID(this);"
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.oid(self)
	end
	
	/**
 	 * Implements Object.toString()
 	 * Returns a String of form [qn:oid] where 'qn' is the qualified name of
 	 * the object type, and oid the unique ID of the object
 	 */
	operation toString() : String is do
		result := "[" + self.getMetaClass.typeDefinition.qualifiedName + ":" + oid.toString + "]"
	end

	/**
	 * Returns a Boolean stating whether the Object is currently in a
	 * frozen state
	 */
	operation isFrozen() : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isFrozen(self)
	end

	/**
	 * Returns a Boolean stating whether the Object is Void
	 */
	operation isVoid() : Boolean is do
		result := false
	end

	/**
	 * code used in hashtable in order to identify an object in the hashtable keys
	 * This system is similar to the hashcode used in java. Please refer to java documentation
	 * for more information about hashcode
	 */
	operation hashcode() : Integer is do		
		// usually this method is not called when using hashtable because it directly tries the method hashcode in the RuntimeObject.java
		// which fall back here only if the method is not redefined
		@compiledJavaExtern "ObjectUtil.hashcode(this);"
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.hashcode(self)
	end

	/**
	 * Freeze the Object
	 */
	operation freeze() : Void is do
		extern fr::irisa::triskell::kermeta::runtime::language::Object.freeze(self)
	end

	/**
	 * Implementation of OCL like cast. It returns self if the object object conforms to the type given as parameter.
	 */
	operation asType(type : Class) : Object is do
		if isInstanceOf(type) then result := self
		else raise kermeta::exceptions::TypeCastError.new
		end
	end

	/**
	 * Returns a Boolean stating whether the current Object conforms to given Type
	 * This means: is this object an instance of this type, or is it an instance of its subtype 
	 */
	operation isInstanceOf(type : Type) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isInstanceOf(self, type)
	end
	
	/**
	 * Returns the Resource currently containing (directly or indirectly) the Object 
	 * or void if the object belongs to no Resource
	 */
	operation containingResource() : kermeta::persistence::Resource is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getContainingResource(self)
	end
}

aspect class ModelType
{

	/**
	 * To be written ##########################################
	 */
	operation new() : Model is
		do
			result ?= extern fr::irisa::triskell::kermeta::runtime::language::ModelType.newObject(self)
		end

	/**
	 * To be written ##########################################
	 */
	operation isModelTypeOf(m : Model) : Boolean is
		do
			result ?= extern fr::irisa::triskell::kermeta::runtime::language::ModelType.isModelTypeOf(self, m)
		end
		
}

aspect class Class
{

	property readonly ownedAttribute : set Property[0..*]
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.ownedAttribute
		end
		
	property readonly ownedOperation : set Operation[0..*]
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.ownedOperation
		end
		
	property readonly superClass : set Class[0..*]
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			var supertypes : OrderedSet<Class> init OrderedSet<Class>.new
			cDef.superType.each{ elem | 
				if ( Class.isInstance(elem) ) then
					var c : Class
					c ?= elem
					supertypes.add(c)
				end
			}
			result := supertypes
		end
		
	property readonly isAbstract : Boolean
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.isAbstract
		end
		
	/**
	 * Returns the ClassDefinition for this class
	 */
	property readonly classDefinition : ClassDefinition
		getter is do
			result ?= typeDefinition
		end
	
	property readonly name : String
		getter is do
			result := typeDefinition.name
		end

	/**
	 * Instantiates a new occurence for this Class
	 */
	operation new() : Object from Class is 
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.newObject(self)
	end

	method clone(objectToClone : Object) : Object is
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.cloneObject(self, objectToClone)
	end

	method deepClone(objectToClone : Object) : Object is
	do
		result := extern fr::irisa::triskell::kermeta::runtime::language::Class.deepCloneObject(self, objectToClone)
	end

	method equals(other : Object) : Boolean from kermeta::language::structure::Object is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.equals(self, other)
	end
	
	/**
	 * Returns the String representation of this class. 
	 *  Note : throws an exception if this class has no classDefinition
	 *  or if the classDefinition is not well constructed.
	 */
	method toString() : String is do
		result := self.typeDefinition.name
	end
}

aspect class ClassDefinition
{
		
	/**
	 * Returns all the Attributes, References, derived Properties of this 
	 * ClassDefinition including the inherited ones
	 */
	property readonly allAttribute : set Property[0..*]
		getter is do
 		    result := kermeta::standard::Set<Property>.new
 		    result.addAll(self.ownedAttribute)
		    self.superType.each{ t | 
		    	if Class.isInstance(t) then
		    		var c : Class
		    		c ?= t
		    		var cDef : ClassDefinition
			    	cDef ?= c.typeDefinition
		    		cDef.allAttribute.each{ p | 
						result.add(p)
					}
		    	end
			}
		end
		
	/**
	 * Returns all the Operations of this ClassDefinition
	 * including the inherited ones
	 */
	property readonly allOperation : set Operation[0..*]
		getter is do
 		    result := kermeta::standard::Set<Operation>.new
 		    result.addAll(self.ownedOperation)
		    self.superType.each{ t | 
		    	if Class.isInstance(t) then
		    		var c : Class
		    		c ?= t
		    		var cDef : ClassDefinition
			    	cDef ?= c.typeDefinition
		    		cDef.allOperation.each{ p | 
						result.add(p)
					}
		    	end
			}
	end
}

aspect class Model {

 	/**
 	 * Returns a set of all the elements of the model that are instance of the given Type
 	 */
	operation filter(typeName : Type) : set Object[0..*] is
		do
			result := contents.select { o | typeName.isInstance(o) }.asSet
		end

 	/**
 	 * Add an object to the model. According to the ModelType, the typechecker will statically verify if the object can be added or not
 	 */ 
	operation add(obj : Object) : Void is
		do
			// This is only implemented as an extern so that at some point in the future, a runtime
			// typecheck might be added in the event that un-modeltype-safe adds start occurring
			
			// Cute hack. The java code for add is hard if contents hasn't already been accessed. So...
			contents
			extern fr::irisa::triskell::kermeta::runtime::language::Model.add(self, obj)
		end

 	/**
 	 * Remove an object from the model
 	 */
	operation remove(obj : Object) : Void is
		do
			// This is not really a hack.
			extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.remove(contents, obj)
		end

 	/**
 	 * Add all the Object of the collection that are copmpatible with the ModelDefinition. Other objects are ignored.
 	 * Returns the list of Object that have been added (One can check that some element have been ignored or not)
 	 */
	operation addAllCompatible(objectsToAdd : kermeta::standard::Collection<Object>) : kermeta::standard::Collection<Object> is do
		// version writen in java: don't know if this is faster enough to worth it ...
		// Cute hack. The java code for add is hard if contents hasn't already been accessed. So...
		//contents
		//extern fr::irisa::triskell::kermeta::runtime::language::Model.addAllCompatible(self, objectsToAdd)
		
		// Let's do it in kermeta
		result := kermeta::standard::Set<Object>.new
		objectsToAdd.each { obj | 
			var addedObject : Object init addCompatible(obj) 
			if(not addedObject.isVoid) then
				result.add(obj)
			end
		} 
	end

 	/**
 	 * Add the Object if it is copmpatible with the ModelDefinition. Other objects are ignored.
 	 * Returns the object if it has been added (One can check that some element have been ignored or not)
 	 * return Void if not added
 	 */
	operation addCompatible(objectToAdd : Object) : Object is do
		// Cute hack. The java code for addCompatible is hard if contents hasn't already been accessed. So...
		contents
		result := extern fr::irisa::triskell::kermeta::runtime::language::Model.addCompatible(self, objectToAdd)
	end
}

aspect class Type
{
	/**
	 * Returns a copy of passed Object built by recursively copying attribute
	 * properties, and referencing original reference properties values
	 */
	operation clone (objectToClone : Object) : Object is abstract

	/**
	 * Returns a copy of passed Object built by recursively copying values of
	 * all properties, no matter the property kind
	 */
	operation deepClone (objectToClone : Object) : Object is abstract

	/**
	 * Implements Type.isInstance(Object)
	 */
	operation isInstance(element : Object) : Boolean from Type is do
		result := element.isInstanceOf(self)
	end
	
	/**
 	 * Implements Type.isSuperTypeOf(Type)
 	 * For technical reason, the current implementation works only with Type that comes from a kermeta declaration (ie. in a require)
 	 * it won't work with Type created programmaticaly by the user. If you need that, please ask to the kermeta developpers
 	 * to extend it.
 	 */	
	operation isSuperTypeOf(object : Type) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::language::Type.hasSubType(self, object)
	end
	
	/**
 	 * Implements Type.isSubTypeOf(Type)
 	 * For technical reason, the current implementation works only with Type that comes from a kermeta declaration (ie. in a require)
 	 * it won't work with Type created programmaticaly by the user. If you need that, please ask to the kermeta developpers
 	 * to extend it.
 	 */	
	operation isSubTypeOf(object : Type) : Boolean is do
		result := object.isSuperTypeOf(self)
	end
}

aspect class NamedElement
{
	/**
	 * Returns the qualified name of this named element. Qualified name is 
	 * the list of the names of the packages hierarchically ordered, delimited by
	 * a "::", followed by the name of this named element.
	 */
	operation qualifiedName() : String is do
		var elem : NamedElement init self
		result := self.name
		from elem ?= elem.container
		until elem == void 
		loop
			result := elem.name + "::" + result
			elem ?= elem.container
		end
	end	
}

aspect class Enumeration
{

	/**
	 * Implements kermeta::language::structure::Type.clone(Object)
	 */
	method clone(objectToClone : Object) : Object is
	do
		raise "NOT IMPLEMENTED"
	end
}

aspect class FunctionType {
	inv resultType is not right.isKindOf(ProductType)
}
