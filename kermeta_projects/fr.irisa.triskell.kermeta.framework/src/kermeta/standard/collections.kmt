/* *************************************************
 * $Id: collections.kmt,v 1.60 2009-01-20 13:13:06 dvojtise Exp $
 * Franck FLEUREY - 14/02/2005 
 * Triskell Research Group
 * IRISA / University of Rennes 1 (France)
 * Distributed under the terms of the EPL licence
 *
 * Implementation of Kermeta collection types.
 *************************************************** */

/**
 * Defines Collection types 
 * <img src="./figures/collections_view.png"/>
 */
 @uri "http://www.kermeta.org/kermeta/1_2_0//kermeta/standard"
package kermeta::standard;

require "value_types.kmt"

using kermeta::exceptions


@deprecated "please use directly kermeta::language::structure::Object"
alias Object : kermeta::language::structure::Object;

 
/**
 * Collection is the root abstract class for all kermeta collections
 */
 @EMF_needProperty "name=values isUnique=false isOrdered=false javaClass=org.eclipse.emf.common.util.EList"
abstract class Collection<G> 
{
	/**
	 * Returns a new Bag built from the Collection
	 */
	operation asBag() : Bag<G> is abstract
	
	/**
	 * Returns a new Set built from the Collection
	 */
	operation asSet() : Set<G> is abstract

	/**
	 * Returns a new OrderedSet built from the Collection
	 */
	operation asOrderedSet() : OrderedSet<G> is abstract

	/**
	 * Returns a new Sequence built from the Collection
	 */
	operation asSequence() : Sequence<G> is abstract
	
	/**
	 * Combinaison of ForAll on two elements in the collection 
	 * result := self.forAll{x | self.forAll {y | f(x,y)}}
	 * (where x and y are 2 elements of the Collection)
	 * typical use sample : ownedState.forAll{s1,s2| (s1.name==s2.name)implies(s1==s2)}
	 */
	operation forAllCpl(f : < [G, G] -> Boolean> ) : Boolean is do
   		result := self.forAll{x | self.forAll {y | f(x,y)}}
	end 

	/**
	 * Combinaison of exists on two elements in the collection
	 * => result := self.exists{x | self.exists {y | f(x,y)}}
	 */
	operation existsCpl(f : < [G, G] -> Boolean> ) : Boolean is do
   		result := self.exists{x | self.exists {y | f(x,y)}}
	end 
	
	/**
	 * Adds an element in the Collection (default implementation)
	 */
	operation add(element : G) : Void is do
		@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.add(this, element)"
		extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.add(self, element)
	end
	
	/**
	 * Removes all instances of element from the Collection, based on
	 * G.equals(Object) definition
	 */
	operation remove(element : G) : Void 
		post doesntContainsElementAnymore is not contains(element)
	is do
		var elem : G
		
		// In the case of the Collection contains several occurrences of 'element', we have to browse all the Collection to remove them
		from elem := self.detect { e | e == element }
        until elem == void
        loop
        	@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(this, elem)"
        	extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)
            elem := self.detect { e | e == element }
        end
	end
	
	/**
	 * Removes all elements from the Collection
	 */
	operation clear() : Void is do
		@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.clear(this)"
		extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.clear(self)
	end
	
	/**
	 * Adds all elements from the Collection elements in the current Collection
	 */
	operation addAll(elements : Collection<G>) : Void is do
		elements.each { element | add(element) } 
	end
	
	/**
	 * Returns a Boolean stating whether the Collection contains at least one
	 * instance of element, based on G.equals(elt : Object) definition
	 * Note: for checking whether a physical element is contained by the collection,
	 * make use of G.oid()
	 */
	operation contains(element : G) : Boolean is do
		result := false
		from var it : Iterator<G> init iterator
		until it.isOff or result
		loop
			result := (it.next == element) 
		end
	end
	
	/**
	 * OCL API alignment, doeas the same as contains
	 * See Collection<G>.contains(Object)
	 */
	operation includes(element :G): Boolean is do
		result := self.contains(element)
	end
	
	/**
	 * Returns true if current Collection contains all elements of Collection elements
	 * See Collection<G>.contains(Object)
	 */
	operation containsAll(elements : Collection<G>) : Boolean is do
		result := true
		from var it : Iterator<G> init elements.iterator
		until (it.isOff or not result)
		loop
			result := self.contains(it.next)
		end
	end
	
	/**
	 * OCL API alignment, does the same as containsAll
	 * See Collection<G>.containsAll(Collection<G>)
	 */
	operation includesAll(elements : Collection<G>) : Boolean is do
		result := self.containsAll(elements)
	end
	
	/**
	 * Returns true if the Collection does not contain element
	 */
	operation excludes(element : G) : Boolean is do
		result := not self.contains(element)
	end
	
	/**
	 * Returns true if the Collection contains no element of Collection elements
	 */
	operation excludesAll(elements : Collection<G>) : Boolean is do
		result := true
		from var it : Iterator<G> init elements.iterator
		until (it.isOff or not result)
		loop
			result := not self.contains(it.next)
		end
	end
	
	/**
	 * Returns the number of elements in the Collection
	 */
	operation size() : Integer is do
		@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.size(this)"
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.size(self)
	end
	
	/**
	 * Returns a Boolean stating whether the Collection is empty
	 */
	operation empty() : Boolean is do
		result := size == 0
	end
	
	/**
	 * OCL alignment API, does the same as empty
	 * See Collection<G>.empty()
	 */
	operation isEmpty() : Boolean is do
		result := self.empty
	end
	
	/**
	 * OCL alignment API
	 * Returns a Boolean stating whether the Collection contains at least
	 * one element 
	 * See also Collection<G>.contains(Object)
	 */
	operation isNotEmpty() : Boolean is do
		result := not self.empty
	end
	
	/**
	 * Returns an Iterator on the Collection
	 */
	operation iterator() : Iterator<G> is do
		result := Iterator<G>.new
		@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.iterator(this, result)"
		extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.iterator(self, result)
	end
	
	/**
	 * Returns an element from the Collection or void if the Collection is empty
	 */
	operation one() : G is do
		if size == 0 then
			result := void
		else
			var it : Iterator<G> init iterator
			result := it.next
		end
	end

	/**
	 * Returns an element from the Collection
	 * Raises an EmptyCollection exception if the Collection is empty
	 */
	operation any() : G is do
		if size == 0 then
			raise EmptyCollection.new
		end
		var it : Iterator<G> init iterator
		result := it.next
	end
	
	/**
	 * Runs function func on each element of the Collection
	 * example : 
	 * aCollection.each { e | \/* do something with each element e of this collection *\/ }
	 */
	operation each(func : <G -> Object>) : Void is do
		from var it : Iterator<G> init iterator
		until it.isOff
		loop
			func(it.next)
		end
	end
	
	/**
	 * Returns a Boolean stating whether no element of the Collection invalidates
	 * the condition specified by function func
	 * example : 
	 * aBoolean := aCollection.forAll { e | \/* put here a condition *\/ } // return true if the condition is true for all elements in the collection.
	 */
	operation forAll(func : <G -> Boolean>) : Boolean is do
    	var test : Boolean init true
        from var it : Iterator<G> init iterator
        until it.isOff
        loop
        	test := test and func(it.next)
        end
        result := test
    end
     
    /**
	 * Returns a Boolean stating whether at least one element of the Collection
	 * validates the condition specified by function func
	 * example :
	 * aBoolean := aCollection.exists { e | \/* a condition *\/} // returns true if at least one element fulfill the condition.
	 */
	operation exists(func : <G -> Boolean>) : Boolean is do
    	var test : Boolean init false
        from var it : Iterator<G> init iterator
        until it.isOff or (test != false)
        loop
        	test := test or func(it.next)
        end
        result := test
    end
	
	/**
	 * Returns a new Sequence which content corresponds to the result
	 * of running the collector function for each element of the Collection
	 * The new collection size is the same as in the original collection, and which element types is the type of the result of the expression.
	 * example :
	 * aCollection2 := aCollection.collect { e | \/* put here an expression, for example e.name *\/ } 
	 */
	operation collect<T> (collector : <G -> T>) : Sequence<T> is do
		result := Sequence<T>.new
		from var it : Iterator<G> init iterator
		until it.isOff
		loop
			result.add( collector(it.next) )
		end
	end
	
	/**
	 * Returns a Boolean stating whether the the collector function evaluates to a
	 * different value for each element of the Collection
	 * example :
	 * aCollection2 := aCollection.isUnique { e | \/* put here an expression that must be unique for all elements, for example e.name *\/ }
	 */
	operation isUnique<T> (collector : <G -> T>) : Boolean is do
		result := true
		var s : Sequence<T> init Sequence<T>.new
		from var it : Iterator<G> init iterator
		until it.isOff or not result
		loop
			var t : T init collector(it.next)
			if (s.contains(t)) then
				result := false
			else
				s.add(t)
			end
		end
	end
	
	/**
	 * Returns an element of the Collection (usually the first) for which the detector function
	 * is not false
	 * Returns void if no elements is validated by the detector function
	 * example : 
	 * anObject := aCollection.detect { e | \/* a condition *\/} // returns an element that fulfill the condition.
	 */
	operation detect(detector : <G -> Boolean>) : G is do
		var elem : G
		result := void
		from var it : Iterator<G> init iterator
		until it.isOff or result != void
		loop
			elem := it.next
			if detector(elem) then result := elem end
		end
	end
		
	/**
	 * Returns a new Sequence composed of elements of the Collection that
	 * validate the selector function
	 * example :
	 * aCollection2 := aCollection.select { e | 
     *    \/* put here a condition that returns true for elements that must  be included in the resulting Collection *\/
	 * }
	 */
	operation select(selector : <G -> Boolean>) : Sequence<G>  is do
		var elem : G
		result := Sequence<G>.new
		from var it : Iterator<G> init iterator
		until it.isOff
		loop
			elem := it.next
			if selector(elem) then result.add(elem) end
		end
	end
	
	/**
	 * Returns a new Sequence composed of elements of the Collection that
	 * do not validate the rejector function
	 * example :
	 * aCollection2 := aCollection.reject { e | 
     *     \/* put here a condition that returns true for elements that must  be exclude in the resulting Collection *\/
     * }
	 */
	operation reject(rejector : <G -> Boolean>) : Sequence<G>  is do
		result := self.select { elem | not rejector(elem) } 
	end
	
	/**
	 * Returns the number of instances of element in the Collection
	 */
	operation count(element : G) : Integer is do
		result := self.select{e | e == element}.size()
	end
	
	/**
	 * Sum the element if they are summable (ie implement '+' operator by inheriting of the class Summable)
	 */
	operation sum(): G is do
		var res : G 
		var tmp : Summable<G>
		var o : G
		o := self.one
		tmp ?= o
		result := void
		if (tmp != void) then
			self.each{ elem  | 
				o := elem
				tmp ?= o
				if (tmp != void) then
					res := tmp + res 
				end
			}
		end
		result := res		
	end
}


/**
 * A Set is a non-ordered collection that contains distinct elements
 * (with regards to the G.equals(Object) operation)
 * not used for the moment @EMF_needProperty "isUnique=true isOrdered=false javaClass=org.eclipse.emf.common.util.BasicEList"
 */
class Set<G> inherits Collection<G>
{
	/**
	 * Overrides Collection<G>.add(G)
	 * Adds elt to the Set if it is not already contained by the
	 * Set, does nothing otherwise
	 */
	method add(element : G) : Void is do
		if not self.contains(element) then
			super(element)
		end
	end

	/**
	 * Overrides Collection<G>.remove(G)
	 * Removes the element from the Set if it is contained by the Set
	 */
	method remove(element : G) : Void is do
		var elem : G init self.detect { e | e == element }
		if (elem != void) then
			@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(this, elem)"
			extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)
		end
	end

	/**
	 * Overrides Object.equals(Object)
	 * Returns a Boolean stating whether the provided element is equal to
	 * current Set
	 */
	method equals(element : Object) : Boolean is do
		var isEqual : Boolean init false
		if(not element.isVoid) then
			if(Collection<G>.isInstance(element)) then
				var collection : Collection<G>
				collection ?= element
				if(self.size() == collection.size()) then
					var elem : G
					var ok : Boolean init true
					from var it : Iterator<G> init self.iterator
					until (it.isOff or not ok) loop
						elem := it.next
						if(not collection.contains(elem)) then
							ok := false
						end
					end
					isEqual := ok
				end
			end
		end
		result := isEqual
	end
	
	/**
	 * Returns a new Set corresponding to the union of the Set elements
	 * with the current Set
	 */
	operation union(elements : Set<G>) : Set<G> is do
		result := Set<G>.new
		result.addAll(self)
		result.addAll(elements)
	end
	
	/**
	 * Returns a new Bag corresponding to the union of the Bag elements
	 * with the current Set
	 */
	operation unionWithBag(elements : Bag<G>) : Bag<G> is do
		result := Bag<G>.new				
		result.addAll(self)
		result.addAll(elements)
	end
	
	/**
	 * Returns a new Set corresponding to the intersection of the Set elements
	 * with the current Set
	 */
	operation intersection(elements : Collection<G>) : Set<G> is do
		result := Set<G>.new
		var elem : G
		from var it : Iterator<G> init self.iterator
		until it.isOff
		loop
			elem := it.next
			if elements.contains(elem) then
				result.add(elem)
			end
		end
	end
	
	/**
	 * Returns a new Set corresponding to the difference between the
	 * current Set and the Set elements, ie all elements contained by 
	 * the current Set that do not appear in the elements Set 
	 */
	operation minus(elements : Set<G>) : Set<G> is do
		result := Set<G>.new
		var elem : G
		from var it : Iterator<G> init self.iterator
		until it.isOff
		loop
			elem := it.next
			if not elements.contains(elem) then
				result.add(elem)
			end
		end
	end
	
	/**
	 * Overrides Collection<G>.asSet()
	 * Returns a new Set composed of all elements of current Set
	 */
	method asSet() : Set<G> is do
		var s : Set<G> init Set<G>.new
		s.addAll(self)
		result := s
	end
	
	/**
	 * Overrides Collection<G>.asOrderedSet()
	 * Returns a new OrderedSet that contains all elements of current Set
	 */
	method asOrderedSet() : OrderedSet<G> is do
		var s : OrderedSet<G> init OrderedSet<G>.new
		s.addAll(self)
		result := s
	end

	/**
	 * Overrides Collection<G>.asBag()
	 * Returns a new Bag composed of all elements of current Set
	 */
	method asBag() : Bag<G> is do
		var s : Bag<G> init Bag<G>.new
		s.addAll(self)
		result := s
	end

	/**
	 * Overrides Collection<G>.asSequence()
	 * Returns a new Sequence composed of all elements of current Set
	 */
	method asSequence() : Sequence<G> is do
		var s : Sequence<G> init Sequence<G>.new
		s.addAll(self)
		result := s
	end
	
	/**
	 * Returns a new Set which contents corresponds to the symmetric
	 * difference between current Set and Set s, ie all elements of
	 * each Set that do not appear in the other one
	 */
	operation symmetricDifference(s : Set<G>) : Set<G> is do
		var res : Set<G> init s.minus(self)
		result := self.minus(s)
		result.addAll(res)
	end
	
	/**
	 * Returns a new Set which content includes all non-Collection elements
	 * of the current Set, and, for each Collection element of the current
	 * Set, as many elements as the Collection contains
	 * Duplicates are removed
	 */
	operation flatten() : Set<Object> is do
		var res: Set<Object> init Set<Object>.new
		if (G.isKindOf(Collection<Object>)) then
			var col : Collection<Object>
			var o : Object 
			self.each{e |
				//o := e
				//col ?= o
				col ?= e
				res.addAll(col)
			}
		end
		result :=  res
	end
	
	/**
	 * Returns a ordered set of the bag elements sorted using the given comparator.
	 * The comparator must return :<ul>
	 *   <li>+1 if the second <G> element is greater than the first</li> 
	 *   <li>0 if the second <G> element equals the first</li> 
	 *   <li>-1 if the second <G> element is lower than the first</li> 
	 */
	/*operation sortedBy(comparator : <[G, G] -> Integer>) : OrderedSet<G>  is do
		result := quickSort(self.asOrderedSet, comparator) 
	end*/
	
	/**
	 * Recursive sort of the given (ordered) set using the given comparator.
	 * The comparator must return :<ul>
	 *   <li>+1 if the second <G> element is greater than the first</li> 
	 *   <li>0 if the second <G> element equals the first</li> 
	 *   <li>-1 if the second <G> element is lower than the first</li> 
	 */
	/*operation quickSort(q :OrderedSet<G>, comparator : <[G, G] -> Integer>) : OrderedSet<G> is do
		 var less : OrderedSet<G> init OrderedSet<G>.new
		 var pivotList : OrderedSet<G> init OrderedSet<G>.new
		 var greater : OrderedSet<G> init OrderedSet<G>.new
		   
	     if (q.size <= 1) then   
   		  	result := q
	     else
    	 	var pivot : G init q.one
     		q.each{x| 
     			if (comparator(x,pivot) == 1) then
     		 		less.add(x)
     		 	end
     	 		if (comparator(x,pivot) == 0) then
     	 			pivotList.add(x)
	     	 	end
   		  	 	if (comparator(x,pivot) == -1) then
     		 		greater.add(x)
     	 		end
     	 	}
	       result := concatenate(quickSort(less, comparator), pivotList, quickSort(greater, comparator))
		end	
	end*/
	
	/**
	 * Internal concatenation tool for recursive 'quickSort()' method
	 */
	operation concatenate(less : OrderedSet<G>, pivot : OrderedSet<G>, greater : OrderedSet<G>): OrderedSet<G> is do
		result := OrderedSet<G>.new
		result.addAll(less)
		result.addAll(pivot)
		result.addAll(greater)
	end
}


/**
 * Bag is a concrete non-ordered Collection allowing duplicates
 * not used for the moment @EMF_needProperty "isUnique=false isOrdered=false javaClass=org.eclipse.emf.common.util.BasicEList"
 */
class Bag<G> inherits Collection<G>
{
	/**
	 * Overrides Object.equals(elt : Object)
	 * Returns a Boolean stating whether the provided element is equal to
	 * current Bag
	 */
	method equals(element : Object) : Boolean is do
		var isEqual : Boolean init false
		if(not element.isVoid) then
			if(Collection<G>.isInstance(element)) then
				var collection : Bag<G>
				collection ?= element
				var selfAsSet : Set<G> init self.asSet()
				isEqual := selfAsSet.equals(collection.asSet())
			end
		end
		result := isEqual
	end

	/**
	 * Returns a new Bag corresponding to the union of elements and
	 * current Bag
	 */
	operation union(elements : Collection<G>) : Bag<G> is do
		result := Bag<G>.new
		result.addAll(self)
		result.addAll(elements)
	end
	
	/**
	 * Returns a new Bag corresponding to the intersection of elements
	 * and the Bag
	 */
	operation intersection(elements : Bag<G>) : Bag<G> is do
		result := Bag<G>.new
		var elem : G
		var it : Iterator<G> init self.iterator
		from it	until it.isOff
		loop
			elem := it.next
			if elements.contains(elem) then
				if(self.count(elem) <= elements.count(elem)) then
					result.add(elem)
				end
			end
		end
		it := elements.iterator
		from it until it.isOff
		loop
			elem := it.next
			if self.contains(elem) then
				if(elements.count(elem) < self.count(elem)) then
					result.add(elem)
				end
			end
		end
	end
	
	/**
	 * Returns a new Set corresponding to the intersection of a Set of
	 * elements and the Bag
	 */
	operation intersectionWithSet(elements : Set<G>) : Set<G> is do
		result := Set<G>.new
		var elem : G
		from var it : Iterator<G> init elements.iterator
		until it.isOff
		loop
			elem := it.next
			if self.contains(elem) then
				result.add(elem)
			end
		end
	end
	
	/**
	 * Removes the element identified by the provided Oid from the Bag
	 */
	operation removeFromOid(elementOid : Integer) : Void 
		post doesntContainsElementAnymore is not exists{e | e.oid == elementOid}
	is do
		var elem : G init self.detect { e | e.oid == elementOid }
		if (elem != void) then
			@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(this, elem)"
			extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)
		end
	end
	
	/**
	 * Removes one instance of element from the Bag
	 */
	operation removeOne(element : G) : Void is do
		var elem : G init self.detect { e | e == element }
		if (elem != void) then
			@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(this, elem)"
			extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)
		end
	end
	
	/**
	 * Overrides Collection<G>.asSet()
	 * Returns a new Set containing elements of the Bag without duplicates
	 */
	method asSet() : Set<G> is do
		var s : Set<G> init Set<G>.new
		s.addAll(self)
		result := s
	end
	
	/**
	 * Overrides Collection<G>.asOrderedSet()
	 * Returns a new OrderedSet containing elements of the Bag without duplicates
	 */
	method asOrderedSet() : OrderedSet<G> is do
		var s : OrderedSet<G> init OrderedSet<G>.new
		s.addAll(self)
		result := s
	end

	/**
	 * Overrides Collection<G>.asBag()
	 * Returns a new Bag containing all elements of current Bag	
	 */
	method asBag() : Bag<G> is do
		var s : Bag<G> init Bag<G>.new
		s.addAll(self)
		result := s
	end

	/**
	 * Overrides Collection<G>.asSequence()
	 * Returns a new Sequence containing all elements of current Bag
	 */
	method asSequence() : Sequence<G> is do
		var s : Sequence<G> init Sequence<G>.new
		s.addAll(self)
		result := s
	end
	
	/**
	 * Returns a new Bag which content includes the content of the
	 * current Bag and the element object
	 */
	operation including(object :G) : Bag<G> is do
		var s : Bag<G> init Bag<G>.new
		s.addAll(self)
		s.add(object)
		result := s	
	end

 	/**
	 * Returns a new Bag which content includes the content of the
	 * current Bag from which all instances of object have been
	 * removed
 	 */
	operation excluding(object :G) : Bag<G> is do
		var s : Bag<G> init Bag<G>.new
		s.addAll(self)
		s.remove(object)
		result := s	
	end
	
	/**
	 * Returns a new Bag which content includes all non-Collection elements
	 * of the current Set, and, for each Collection element of the current
	 * Bag, as many elements as the Collection contains
	 */
	operation flatten() : Bag<Object> is do
		var res: Bag<Object> init Bag<Object>.new
		if (G.isKindOf(Collection<Object>)) then
			var col : Collection<Object>
			var o : Object 
			self.each{e |
				//o := e
				//col ?= o
				col ?= e
				res.addAll(col)
			}
		end
		result := res
	end
	
	/**
	 * Returns a sequence of the bag elements sorted using the given comparator.
	 * The comparator must return :<ul>
	 *   <li>+1 if the second <G> element is greater than the first</li> 
	 *   <li>0 if the second <G> element equals the first</li> 
	 *   <li>-1 if the second <G> element is lower than the first</li> 
	 */
	/*operation sortedBy(comparator : <[G, G] -> Integer>) : Sequence<G>  is do
		result := quickSort(self.asSequence, comparator) 
	end*/
	
	/**
	 * Recursive sort of the given sequence using the given comparator.
	 * The comparator must return :<ul>
	 *   <li>+1 if the second <G> element is greater than the first</li> 
	 *   <li>0 if the second <G> element equals the first</li> 
	 *   <li>-1 if the second <G> element is lower than the first</li> 
	 */
	/*operation quickSort(q :Sequence<G>, comparator : <[G, G] -> Integer>) : Sequence<G> is do
		 var less : Sequence<G> init Sequence<G>.new
		 var pivotList : Sequence<G> init Sequence<G>.new
		 var greater : Sequence<G> init Sequence<G>.new
		 
	    if (q.size <= 1) then   
   		 	result := q
	    else
			var pivot : G init q.one
	     	q.each{x| 
    	 		if (comparator(x,pivot) == 1) then
     		 		less.add(x)
     	 		end
	     	 	if (comparator(x,pivot) == 0) then
    	 	 		pivotList.add(x)
     		 	end
	     	 	if (comparator(x,pivot) == -1) then
     	 			greater.add(x)
    	 	 	end
			}
			result := concatenate(quickSort(less, comparator), pivotList, quickSort(greater, comparator))
		end	
	end*/
	
	/**
	 * Internal concatenation tool for recursive 'quickSort()' method
	 */
	operation concatenate(less : Sequence<G>, pivot : Sequence<G>, greater : Sequence<G>): Sequence<G> is do
		result := Sequence<G>.new
		result.addAll(less)
		result.addAll(pivot)
		result.addAll(greater)
	end
}


/**
 * An OrderedCollection is the root abstract class for all ordered Collections.
 * not used for the moment @EMF_needProperty "isUnique=false isOrdered=true javaClass=org.eclipse.emf.common.util.BasicEList"
 */
abstract class OrderedCollection<G> inherits Collection<G> {
	
	/**
	 * Adds element in the OrderedCollection at rank index
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedCollection
	 */
	operation addAt(index : Integer, element : G) : Void is do
		if index < 0 or index > size then
			raise IndexOutOfBound.new
		end
		@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.addAt(this, index, element)"
		extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.addAt(self, index, element)
	end
	
	/**
	 * Removes the element at rank index from the OrderedCollection
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedCollection
	 */
	operation removeAt(index : Integer) : Void is do
		if index < 0 or index > size-1 then
			raise IndexOutOfBound.new
		end
		@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.removeAt(this, index)"
		extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.removeAt(self, index)
	end
	
	/**
	 * Returns the element at rank index in the OrderedCollection
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedCollection
	 */
	operation elementAt(index : Integer) : G is do
		if index < 0 or index > size-1 then
			raise IndexOutOfBound.new
		end
		@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.elementAt(this, index)"
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.elementAt(self, index)
	end
	
	/** 
	 * Returns the first element in the OrderedCollection
	 * Raises an EmptyCollection exception if the OrderedCollection is empty
	 */
	operation first() : G is do
		if size == 0 then
			raise EmptyCollection.new
		end
		result := elementAt(0)
	end
	
	/**
	 * Returns the last element in the OrderedCollection
	 * Raises an EmptyCollection exception if the OrderedCollection is empty
	 */
	operation last() : G is do
		if size == 0 then
			raise EmptyCollection.new
		end
		result := elementAt(size - 1)
	end

	/**
	 * Overrides Object.equals(Object)
	 * Returns a Boolean stating whether the provided element is equal to
	 * current OrderedCollection
	 */
	method equals(element : Object) : Boolean is do
		var isEqual : Boolean init false
		if (not element.isVoid) then
			if(OrderedCollection<G>.isInstance(element)) then
				var collection : Collection<G>
				collection ?= element
				if(self.size() == collection.size()) then
					var selfIterator : Iterator<G> init self.iterator()
					var collectionIterator : Iterator<G> init collection.iterator()
					var difference : Boolean init false
					from 1==1
					until (selfIterator.isOff() or collectionIterator.isOff() or difference)
					loop
						if(not (selfIterator.next == collectionIterator.next)) then
							difference := true
						end
					end
					isEqual := not difference
				end
			end
		end
		result := isEqual
	end
	
	/** 
	 * Returns the index of the first instance of element in the OrderedCollection
	 * or -1 if the element is not contained by the OrderedCollection
	 * Raises an EmptyCollection exception if the OrderedCollection is empty
	 */
	operation indexOf(element : G) : Integer is do
		if size == 0 then
			raise EmptyCollection.new
		end
		/*
		if not self.contains(element) then
			result := -1
		else
			var i : Integer init 0
			from var found : Boolean init false
			until found
			loop
				if(element == elementAt(i)) then
					found := true
				else
					i := i + 1
				end
			end
			result := i
		end
		*/
		var i : Integer init 0
		var it : Iterator<G> init iterator()
		var found : Boolean init false
		from found
		until (found or it.isOff)
		loop
			if(element == it.next) then
				found := true
			else
				i := i + 1
			end
		end
		if(found) then
			result := i
		else
			result := -1
		end
	end
}


/**
 * An OrderedSet is a Set that contained ordered distinct elements
 * not used for the moment @EMF_needProperty "isUnique=true isOrdered=true javaClass=org.eclipse.emf.common.util.BasicEList"
 */
class OrderedSet<G> inherits Set<G>, OrderedCollection<G>
{
	/**
	 * See Set<G>.add(G)
	 */
	method add(element : G) from Set is do
		super(element)
	end

	/**
	 * Overrides OrderedCollection<G>.addAt(Integer, G)
	 * Adds element in the OrderedSet at rank index if the ordered set does
	 * not already contain the element, does nothing otherwise
	 */
	method addAt(index : Integer, element : G) : Void is do
		if not self.contains(element) then
			
			/* Multiple inheritance patch for the compiler */
			/* initial code: */
			super(index, element)
			
			/* replaced by: 
			if index < 0 or index > size then
				raise IndexOutOfBound.new
			end
			@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.addAt(this, index, element)"
			extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.addAt(self, index, element)
			*/
			
		end
		// TODO : should it raise an exception otherwise ?
	end
	
	/**
	 * See OrderedCollection<G>.equals(Object) 
	 */
	method equals(element : Object) : Boolean from OrderedCollection is do
		result := super(element)
	end
	
	/**
	 * Builds and returns a new OrderedSet composed of elements of current ordered
	 * set from rank min to rank max (order is respected)
	 * Raises IndexOutOfBound exception if min is negative, max is larger than 
	 * the size of the ordered set or min is larger than max
	 */
	operation subSet(min : Integer, max : Integer) : OrderedSet<G> is do
		result := OrderedSet<G>.new
		if(min >= 0 and max <= self.size and min <= max) then
			var it : Iterator<G> init iterator()
			var i : Integer init 0
			from i until (i == min) loop
				it.next
				i := i + 1
			end
			from i until (i == max + 1) loop
				result.add(it.next)
				i := i + 1
			end
			/*
			self.each{e |
				var i : Integer init self.indexOf(e)
				if(i >= min and i <= max) then
					result.add(e)
				end
			}
			*/
		else
			raise IndexOutOfBound.new
		end
	end

	/**
	 * Builds and returns a new OrderedSet from current one with element
	 * inserted in head
	 */
	operation append(element : G ) : OrderedSet<G> is do
		result := OrderedSet<G>.new
		result.addAll(self)
		result.add(element)
	end
	
	/**
	 * Builds and returns a new OrderedSet from current one with element
	 * inserted in tail
	 */
	operation preppend(element : G ) : OrderedSet<G> is do
		result := OrderedSet<G>.new
		result.add(element)
		result.addAll(self)
	end
	
	/**
	 * Builds and returns a new OrderedSet from current one with element
	 * inserted at rank index
	 */
	operation insertAt(index : Integer, subject : G ) : OrderedSet<G> is do
		result := OrderedSet<G>.new
		result.addAll(self)
		result.addAt(index, subject)
	end
	
	/*
	operation subOrderedSet(lower : Integer, upper : Integer ) : OrderedSet<G> is do
		result := OrderedSet<G>.new
		
		from var i : Integer init lower until i<= upper
		loop
			result.add(self.at(i))
		end
	end
	*/

	/**
	 * Returns element at rank index in the sequence
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the OrderedSet
	 */
	operation at(index : Integer) : G is do
		if(index >= 0 and index <= self.size) then
			/*
			self.each{e |
				var i : Integer init self.indexOf(e)
				if (i == index) then 
					result := e
				end				
			}
			*/
			var it : Iterator<G> init iterator()
			from var i : Integer init -1
			until (i == index) loop
				result := it.next
				i := i + 1
			end
		else
			raise IndexOutOfBound.new
		end
	end
}


/**
 * A Sequence is an OrderedCollection of elements allowing duplicates
 * not used for the moment @EMF_needProperty "isUnique=false isOrdered=true javaClass=org.eclipse.emf.common.util.BasicEList"
 */
class Sequence<G> inherits Bag<G>, OrderedCollection<G>
{
	/**
	 * Overrides OrderedCollection<G>.equals(Object)
	 * Returns a Boolean stating whether the provided element is equal to
	 * current Sequence	
	 */
	method equals(element : Object) : Boolean from OrderedCollection is do
		result := super(element)
	end
	
	/**
	 * Builds and returns a new Sequence composed of elements of current sequence
	 * from rank min to rank max (order is respected)
	 * Raises IndexOutOfBound exception if min is negative, max is larger than 
	 * the size of the sequence or min is larger than max
	 */
	operation subSequence(min : Integer, max : Integer) : Sequence<G> is do
		result := Sequence<G>.new
		if(min >= 0 and max <= self.size and min <= max) then
			var it : Iterator<G> init iterator()
			var i : Integer init 0
			from i until (i == min) loop
				it.next
				i := i + 1
			end
			from i until (i == max + 1) loop
				result.add(it.next)
				i := i + 1
			end
			/*
			self.each{e |
				var i : Integer init self.indexOf(e)
				if(i >= min and i <= max) then
					result.add(e)
				end
			}
			*/
		else
			raise IndexOutOfBound.new
		end
	end
	
	/**
	 * Builds and returns a new Sequence from current one with element
	 * inserted in head
	 */
	operation append(element : G ) : Sequence<G> is do
		result := Sequence<G>.new
		result.addAll(self)
		result.add(element)
	end
	
	/**
	 * Builds and returns a new Sequence from current one with element
	 * inserted in tail
	 */
	operation preppend(element : G ) : Sequence<G> is do
		result := Sequence<G>.new
		result.add(element)
		result.addAll(self)
	end

	/**
	 * Builds and returns a new Sequence from current one with element
	 * inserted at rank index
	 */	
	operation insertAt(index : Integer, element : G) : Sequence<G> is do
		result := Sequence<G>.new
		result.addAll(self)
		result.addAt(index, element)
	end
	
	/**
	 * Returns element at rank index in the sequence
	 * Raises IndexOutOfBound exception if provided index is lower than 0 or
	 * larger than the size of the Sequence
	 */
	operation at(index : Integer) : G is do
		if(index >= 0 and index <= self.size) then
			var it : Iterator<G> init iterator()
			from var i : Integer init -1
			until (i == index) loop
				result := it.next
				i := i + 1
			end
			/*
			self.each{e |
				var i : Integer init self.indexOf(e)
				if (i == index) then 
					result := e
				end				
			}
			*/
		else
			raise IndexOutOfBound.new
		end
	end
}


/**
 * Iterator to be used with Collection
 * See also Collection<G>.getIterator()
 */
 @EMF_needProperty "name=javaIterator javaClass=java.util.Iterator"
 @EMF_needProperty "name=kermetaCollection classDefinitionQN=kermeta::standard::Collection"
class Iterator<G>
{
	/**
	 * Returns true if the iterator is on the last element
	 * i.e. returns not self.hasNext()
	 */
	operation isOff() : Boolean is do
		result := not hasNext
	end
	
	/**
	 * Returns true if the iterator has a next element
	 */
	operation hasNext() : Boolean is do
		@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.IteratorUtil.hasNext(this)"
	 	result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Iterator.hasNext(self)
	end
	
	/**
	 * Returns the next element of the iterator
	 * Raises IteratorIsOff exception in case the iterator is on the last element 
	 */
	operation next() : G is do
		if not hasNext then
			raise IteratorIsOff.new
		end
		@compiledJavaExtern "org.kermeta.compil.runtime.helper.basetypes.IteratorUtil.next(this)"
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Iterator.next(self)
	end
}
