package kermeta::exceptions;
require "../kermeta.kmt"
using kermeta::standard
using kermeta::utils
/*****************************************************************************
 * $Id:
 * Project : Kermeta (First iteration)
 * Creation date :  
 * File : testSuite.skel
 * License : GPL
 * Copyright : IRISA / Universite de Rennes 1
 * Creation date : Mar 14, 2005
 * Author : zdrey
 * Description :  
 *      Contains the main exceptions from which all the others inherit
 *
 ****************************************************************************/

/**
 * The main class from which all the exception inherit
 */
abstract class Exception
{
    // The name of the exception (find it with reflexion? -> property?)
    attribut name : String
    //
    attribut message : String

    // print the trace of the errors thrown by this exception
    // stack is given by the nested exceptions through the op. calls
    operation print_trace() : Stack<Exception> is do
    end
	
	operation print_message() : String is do
//		stdio.writeln(message)
	end
}


/**
 * Errors that prevent the program to be executed correctly
 */
class Error inherits Exception {
}

/**
 * Messages that do not compromise the execution of the program
 */ 
class Warning inherits Exception {
}

/**
 * Errors that lead to the end of the program execution
 */
class SystemExit inherits Exception {
}

/**
 * 
 * STANDARD ERRORS
 * 
 */


/** 
 *  SyntaxError that should be thrown when a wrong keyword is used 
 *  Using the Kermeta plugin editor could help to find this 
 *  error before interpretation
*/
class SyntaxError inherits Error {}

/** An attribute was not found for a given instance */ 
class AttributeError  inherits Error {}
/** An enumLiteral was not found for a given Enumeration */
class EnumError inherits Error {}
/** A variable was not found in local or global context */
class VariableError inherits Error {}

/** Specific class for assert Operation (for the future testSuite unit tool) */
class AssertionError inherits Error {}

/** Not implemented error : useful for abstract classes for which operations 
    implementation by the inheriting class is necessary*/
class NotImplementedError inherits Error {}
/** A variable or attribute that is assigned to an element that does not correspond
    to the expected type -- thrown by the TypeChecker? */
class TypeError inherits Error {}
/** An operation that fails can raise an ArithmError*/
class ArithmeticError inherits Error {}
/** An infinite recursion, or a loop which execution exceed a timestamp?*/
class InfiniteRecursionError inherits Error {}
/** A stack overflow error (like an infinite loop */
class StackOverflowError inherits Error {}

/**
 * 
 *  WARNINGS 
 *
 */
 
/** For an operation that is aimed to not exist anymore later */
class DeprecateWarning inherits Warning {}

class UnusedVariableWarning inherits Warning {}


/*****************************************************************************
 * 2-level specialized errors
 *****************************************************************************/ 

/*
 * ARITHMETIC ERRORS
 *
 */
 class ZeroDivisionError inherits ArithmeticError {}
 class OverflowError inherits ArithmeticError {}
