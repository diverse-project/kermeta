// $Id: value_types.kmt,v 1.15 2009-02-18 15:37:08 dvojtise Exp $
/* *************************************************
 * Franck FLEUREY - 11/02/2005
 * Triskell Research Group
 * IRISA / University of Rennes 1 (France)
 * Distributed under the terms of the EPL licence
 *
 * Implementation of Metacore base types.
 *************************************************** */

/**
 * Defines value types 
 * <img src="platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/primitive_types_view.png"/>
 */
 @uri "http://www.kermeta.org/kermeta/1_2_0//kermeta/standard"
 package kermeta::standard; 

require kermeta

using kermeta::language::structure
using kermeta::exceptions

/**
 * The class Void 
 * By convention it is a sub-type of everything
 */
class ~Void {

	/**
	 * Return true
	 */
	method isVoid() : Boolean is do
		result := true
	end

	/**
	 * Returns the String identifier '<void>'
	 */
	method toString() : String is do
		result := "<void>"
	end
	
	/**
	 * Returns true
	 */
	method isInstanceOf(type : Type) : Boolean is do
		result := true
	end
}


/**
 * The abstract class ValueType does not contain any feature.
 * However, any instance of a sub-class of ValueType will be passed by value 
 * instead of by reference for any other objects.
 * that means that each time you := such object it will call the clone function associated to it (Not implemented yet except for Integer, String and boolean!!!)
 * 
 */
abstract class  ValueType {
}


/**
 * The abstract class Comparable defines a set of operation
 * to compare instances of a class.
 * Sub-classes only has to implement abstract operation compareTo.
 * All other methods are defined w.r.t. the compareTo operation
 */
abstract class Comparable {
	
	/**
	 * This method should be implemented by any class that inherits
	 * from Comparable.
	 * returns 0 if self = other
	 * returns > 0 if  self > other
	 * returns < 0 if  self < other
	 */
	operation compareTo(other : Object) : Integer is abstract
	
	/**
	 * return true if self > other
	 */
	operation isGreater(other : Object) : Boolean is do
		result := self.compareTo(other) > 0
	end
	
	/**
	 * return true if self < other
	 */
	operation isLower(other : Object) : Boolean is do
		result := self.compareTo(other) < 0
	end
	
	/**
	 * return true if self <= other
	 */
	operation isLowerOrEqual(other : Object) : Boolean is do
		result := self.compareTo(other) <= 0
	end
	
	/**
	 * return true if self >= other
	 */
	operation isGreaterOrEqual(other : Object) : Boolean is do
		result := self.compareTo(other) >= 0
	end
}


/**
 * The abstract class Summable defines a set of operation
 * to sum instances of a class.
 * Sub-classes only has to implement abstract operation plus.
  */
abstract class Summable<G> {
	
	/**
	 * Summarization method to be implemented by any summable class.
	 * The parameter must have the same type (or one of its subtypes)
	 *  than the current object .
	 */
	operation plus(other : G) : G is abstract
}


/**
 * raised when two objects are not comparable
 */
class NotComparableException inherits kermeta::exceptions::Exception {
}


/**
 * The Boolean type
 */
class Boolean inherits ValueType
{
	/**
	 * Returns true if <code>other</code> type is Boolean
	 * and has the same boolean value than current object.
	 */
	method equals(other : Object) : Boolean is do
		if other.getMetaClass != Boolean then  
			result := false 
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.equals(self, other)
		end
	end

	/**
	 * return self and other
	 */ 
	operation ~and(other : Boolean) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~and(self, other)
	end
	
	/**
	 * return not self
	 */ 
	operation ~not() : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~not(self)
	end
	
	/**
	 * return self or other
	 */ 
	operation ~or(other : Boolean) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~or(self, other)
	end
	
	/**
	 * return self implies other
	 * http://en.wikipedia.org/wiki/Material_implication
	 * meaning : (not self) or other
	 */
	operation ~implies(other : Boolean) : Boolean is do
		result := (not self ) or other
	end
	
	/**
	 * return self xor other
	 */ 
	operation ~xor(other : Boolean) : Boolean is do
		result := ( self and (not other)) or ( (not self) and other)
	end
	
	/**
	 * return self nand other
	 */ 
	operation ~nand(other : Boolean) : Boolean is do
		result := not ( self and other)
	end
	
	/**
	 * Short-circuit version of AND. This means that the function passed in parameter will be evaluated only if self is true
	 * Note: we don't have a dedicated operator in the syntax for it yet so here is an example of use :
	 *   self.andThen{v | functionThatReturnABoolean() }
	 */
	operation andThen(right : <Void->Boolean>) : Boolean is do
		if self then result := right(void) else result := false end	
	end	
	
	/**
	 * Short-circuit version of OR. This means that the function passed in parameter will be evaluated only if self is false
	 * Note: we don't have a dedicated operator in the syntax for it yet so here is an example of use :
	 *   self.orElse{v | functionThatReturnABoolean() }
	 */
	operation orElse(right : <Void->Boolean>) : Boolean is do
		if self then result := true else result := right(void) end	
	end	
	
	/**
	 * Returns 'true' or 'false', depending on self  value
	 */
	method toString() : String is do
		result := if self then "true" else "false" end
	end
}


/**
 * The abstract class Numeric is the root class for all
 * numeric types
 */
abstract class Numeric inherits Comparable, ValueType { 
}


/**
 * The class Integer
 */
class Integer inherits Numeric, Summable<Integer>
{
	/**
	 * Iteration
	 */
	 operation times(body : <Integer->Object>) : Void is do
	 	from var i : Integer init 0
	 	until i >= self
	 	loop
	 		body(i)
	 		i := i + 1
	 	end
	 end 

	/**
	 * Comparison
	 */
	method compareTo(other : Object) : Integer is do
		if other.getMetaClass != Integer then
			// allow comparing with reals
			if other.getMetaClass == Real then
				result := self.toReal.compareTo(other)
			else
				raise NotComparableException.new
			end
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.compareTo(self,other)
		end
	end

	/**
	 * Returns true if <code>other</code> type is Integer or Real
	 * and has the same numeric value than current object.
	 */	
	method equals(other : Object) : Boolean is do
		if other.getMetaClass != Integer then
			// allow comparing with reals
			if other.getMetaClass == Real then
				result := self.toReal.equals(other)
			else
				result := false
			end
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.equals(self, other)
		end
	end

	/**
	 * returns self + other
	 */
	method plus(other : Integer) : Integer is do
		if other.isVoid then raise VoidOperandError.new else
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.plus(self,other)
        end
	end
	
	/**
	 * returns self - other
	 */
	operation minus(other : Integer) : Integer is do
		if other.isVoid then raise VoidOperandError.new else
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.minus(self,other)
        end
	end
	
	/**
	 * returns self * other
	 */
	operation mult(other : Integer) : Integer is do
		if other.isVoid then raise VoidOperandError.new else
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.times(self,other)
        end
	end
	
	/**
	 * returns self / other
	 */
	operation div(other : Integer) : Integer is do
		if other == 0 then raise DivisionByZero.new end
		if other.isVoid then raise VoidOperandError.new else
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.div(self,other)
        end
	end
	
	/**
	 * returns self modulo other
	 */
	operation mod(other : Integer) : Integer is do
		if other == 0 then raise DivisionByZero.new end
		if other.isVoid then raise VoidOperandError.new else
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.mod(self,other)
		end
	end
	
	/**
	 * returns -self
	 */
	operation uminus() : Integer is do
		result := 0 - self
	end
	
	/**
	 * Convert self as a Real
	 */
	operation toReal() : Real is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toReal(self)
	end
	
	/**
	 * return true if self > other
	 */
	method isGreater(other : Object) : Boolean is do
		if other.getMetaClass != Integer then
			// allow comparing with reals
			if other.getMetaClass == Real then
				result := self.toReal.isGreater(other)
			else
				result := false
			end
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreater(self, other)
		end
	end
	
	/**
	 * return true if self < other
	 */
	method isLower(other : Object) : Boolean is do
		if other.getMetaClass != Integer then
			// allow comparing with reals
			if other.getMetaClass == Real then
				result := self.toReal.isLower(other)
			else
				result := false
			end
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLower(self, other)
		end
	end
	
	/**
	 * return true if self <= other
	 */
	method isLowerOrEqual(other : Object) : Boolean is do
		if other.getMetaClass != Integer then
			// allow comparing with reals
			if other.getMetaClass == Real then
				result := self.toReal.isLowerOrEqual(other)
			else
				result := false
			end
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLowerOrEqual(self, other)
		end
	end
	
	/**
	 * return true if self >= other
	 */
	method isGreaterOrEqual(other : Object) : Boolean is do
		if other.getMetaClass != Integer then
			// allow comparing with reals
			if other.getMetaClass == Real then
				result := self.toReal.isGreaterOrEqual(other)
			else
				result := false
			end
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreaterOrEqual(self, other)
		end
	end
	
	/**
	 * Numeric value in string format
	 */
	method toString() : String is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toString(self)
	end
}


/**
 * class Real
 */
class Real inherits Numeric, Summable<Real>
{
	/**
	 * returns self + other
	 */
	method plus(other : Real) : Real is do
		if other.isVoid then raise VoidOperandError.new else
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.plus(self, other)
        end
	end
	
	/**
	 * returns self - other
	 */
	operation minus(other : Real) : Real is do
		if other.isVoid then raise VoidOperandError.new else
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.minus(self, other)
        end
	end
	
	/**
	 * returns self * other
	 */
	operation mult(other : Real) : Real is do
		if other.isVoid then raise VoidOperandError.new else
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.times(self, other)
        end
	end
	
	/**
	 * returns self / other
	 */
	operation div(other : Real) : Real is do
		if other == 0.toReal then raise DivisionByZero.new end
		if other.isVoid then raise VoidOperandError.new else
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.div(self, other)
        end
	end
	
	/**
	 * Convert self as an Integer
	 */
	operation toInteger() : Integer is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toInteger(self)
	end
	
	/**
	 * Comparison
	 */
	method compareTo(other : Object) : Integer is do
		if other.getMetaClass != Real then
			// allow comparing with integers
			if other.getMetaClass == Integer then
				result := self.compareTo(other.asType(Integer).toReal)
			else
				raise NotComparableException.new
			end
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.compareTo(self,other)
		end
	end

	/**
	 * Returns true if <code>other</code> type is Integer or Real
	 * and has the same numeric value than current object.
	 */	
	method equals(other : Object) : Boolean is do
		if other.getMetaClass != Real then
			// allow comparing with integers
			if other.getMetaClass == Integer then
				result := self.equals(other.asType(Integer).toReal)
			else
				result := false
			end
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.equals(self, other)
		end
	end
	
	/**
	 * returns -self
	 */
	operation uminus() : Real is do
		result := 0.toReal - self
	end
	
	/**
	 * Returns numeric value in string format
	 */
	method toString() : String is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toString(self)
	end
}


/**
 * The class Character
 */
class Character inherits ValueType, Comparable
{
	/**
	 * Comparaison
	 */
	method compareTo(other : Object) : Integer is do
		if other.isVoid then raise CallOnVoidTarget.new else	
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.compareTo(self,other)
        end
	end

	/**
	 * Returns true if <code>other</code> type is Character
	 * and has the same letter value than current object.
	 */	
	method equals(other : Object) : Boolean is do
		if other.getMetaClass != Character then
			result := false
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.equals(self, other)
		end
	end
	
	/**
	 * Conversion from Character to String
	 */
	method toString() : String is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.toString(self)
	end
}


/**
 * The class String
 */
class String inherits ValueType, Comparable, Summable<String>
{
	/**
	 * Comparaison
	 */
	method compareTo(other : Object) : Integer is do
		if other.isVoid then raise CallOnVoidTarget.new else		
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.compareTo(self,other)
        end
	end

	/**
	 * Returns true if <code>other</code> type is String
	 * and has the same string value than current object.
	 */	
	method equals(other : Object) : Boolean is do
		if other.getMetaClass != String then
			result := false
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.equals(self, other)
		end
	end
	
	/**
	 * returns a new string self + other
	 */
	method plus(other : String) : String is do
		if other.isVoid
		then
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.plus(self,other.toString)
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.plus(self,other)
        end
	end
	
	/**
	 * Appends other at the end of self
	 * A more efficient method is kermeta::utils::StringBuffer::append(other)
	 */
	operation append(other : String) : Void is do
		if other.isVoid then raise CallOnVoidTarget.new else
			extern fr::irisa::triskell::kermeta::runtime::basetypes::String.append(self,other)
		end
	end
	
	/**
	 * returns the character at index in the String
	 */
	operation elementAt(index : Integer) : Character is do
		if index < 0 or index > size-1 then
			raise StringIndexOutOfBound.new
		else
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.elementAt(self,index)
		end
	end
	
	/**
	 * returns the index within this string of the first 
	 * occurrence of the specified substring
	 */
	operation indexOf(str : String) : Integer is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.indexOf(self,str)
	end
	
	/**
	 * returns a new string that is a substring of this string
	 * takes as parameters : the startIndex and endIndex
	 */
	operation substring(startIndex : Integer, endIndex : Integer) : String is do
		if startIndex >= 0 and startIndex <= size and endIndex <= size and endIndex >= startIndex then
			result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.substring(self, startIndex, endIndex)
		else
			raise StringIndexOutOfBound.new
		end
	end
	
	/**
	 * returns the number of characters in the current String
	 */
	operation size() : Integer is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.size(self)
	end
	
	/**
	 * returns the string itself
	 */
	method toString() : String is do
		result := self
	end
	
	/**
	 * Replaces all occurences of str1 in the current string by the string str2
	 */
	operation replace(str1 : String, str2 : String) : String is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.replace(self, str1, str2)
	end
	
	/**
	 * Return the current string in lower case
	 */
	operation toLowerCase() : String is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toLowerCase(self)
	end
	
	/**
	 * Return the current string in upper case
	 */
	operation toUpperCase() : String is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toUpperCase(self)
	end
	
	/**
	 * Return if a string is contained by another string
	 */
	operation contains(str1 : String) : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.contains(self, str1)
	end
	
	/**
	 * Return of an ordered set of the splitted string
	 * Note that the delimiter is a regular expression (as the split operation in java) 
	 */
	operation split(delimiter : String) : Sequence<String> is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.split(self, delimiter)
	end
	
	/**
	 * Parses the current string and returns true if the string is "true" and false if the string is "false"
	 * The parsing is not case sensitive and if no boolean value is recognized then a StringFormatException is raised.
	 */
	operation toBoolean() : Boolean is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toBoolean(self)
		if result.isVoid then raise StringFormatException.new end
	end
	
	/**
	 * Parses the current string into an integer.
	 * if no integer value is recognized then a StringFormatException is raised.
	 */
	operation toInteger() : Integer is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toInteger(self)
		if result.isVoid then raise StringFormatException.new end
	end

	/**
	 * Parses the current string into a real.
	 * if no real value is recognized then a StringFormatException is raised.
	 */
	operation toReal() : Real is do
		result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.toReal(self)
		if result.isVoid then raise StringFormatException.new end
	end
}


/**
 * Unlimited natural is used for reflection.
 * It is mapped to integer.equals().
 * Any negative number is interpreted as '*'
 */
alias UnlimitedNatural : Integer;

/***************************************************
 *                  END OF FILE
 *************************************************** */ 
