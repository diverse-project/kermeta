/* $Id:$ 
 * Creation : October 13, 2009
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            jfalcou
 */

package kermeta::exceptions;


require "../Standard.kmt"

using kermeta::standard
using kermeta::utils
using kermeta::persistence

class ConstraintsDiagnostic 
{
	attribute setConstraints : Set<ConstraintViolatedInv>
	
	/* Initialize */
	operation initialize() : ConstraintsDiagnostic is do
		setConstraints := Set<ConstraintViolatedInv>.new
		result := self
	end
	
	/* Adds a ConstraintViolatedInv object to setConstraints */	
	operation add(cons : ConstraintViolatedInv) is do
		setConstraints.add(cons)
	end
	
	/* Prints the content */
	operation prettyPrint() : Void is do
		
		//stdio.writeln("Number of violated constraints : " + setConstraints.size.toString)
	
		//Clean the markers on the associated resources
		setConstraints.collect{constraint|constraint.constraintAppliedTo.containingResource.asType(EMFResource)}
					  .asSet
					  .each{resource|resource.clean}
					  
		//Add a marker for each violated constraints 
		setConstraints.each{c|
			var resource : EMFResource init c.constraintAppliedTo.containingResource().asType(EMFResource)
			stdio.writeln(c.message + " in file " + resource.uri)
			resource.mark(c.message)
		}
	end
}