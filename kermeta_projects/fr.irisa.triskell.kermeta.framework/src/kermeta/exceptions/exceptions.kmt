/** 
 * Contains the definition of a Kermeta exception and a few basic exceptions.
 * <img src="platform:/plugin/fr.irisa.triskell.kermeta.documentation/src/figures/exceptions_package.png"/>
 */
@uri "http://www.kermeta.org/kermeta/exceptions"
package kermeta::exceptions;

require "../Standard.kmt"

using kermeta::standard
using kermeta::utils

/* ****************************************************************************
 * $Id: exceptions.kmt,v 1.25 2008-07-31 08:37:37 dvojtise Exp $
 * Project : Kermeta framework
 * Creation date :  
 * File : exception.kmt
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * Creation date : Mar 14, 2005
 * Author : zdrey
 * Description :  
 *      Contains the main exceptions from which all the others inherit
 *
 *************************************************************************** */

/* ****************************************************************************
 * 1-General errors
 * ****************************************************************************/ 

/**
 * Generic exceptions
 * The main class from which all the exception inherit
 */
class Exception
{

    /** The message attached to the exception     */
    attribute message : String
    
    /** Any nested exception     */
    attribute nestedException : Exception
    
    /**
     * The stack trace as a String
     * Filled by the interpreted when the exception is raised
     */
    attribute stackTrace : String
}

/* ****************************************************************************
 * 2-Runtime errors
 * ****************************************************************************/ 

/** Exception for interpreter exceptions */
class RuntimeError inherits Exception {
	
	/** The code that raised the exception */
	attribute expression : kermeta::language::behavior::Expression
}

/** Occurs when a feature is called on void */
class CallOnVoidTarget inherits RuntimeError {}

/**
 * Occurs when a cast (Object::asType operation) fails
 */
class TypeCastError inherits RuntimeError {}

/**
 * Use this exception when you want to forbid the access to an unimplemented operation 
 * and invite to implement it
 */
class NotImplementedException inherits RuntimeError {}

/** 
 * Use this exception when user tries to add an element to a property which type is collection
 * which has an upper bound != -1 ( ie *)
 */
class UpperBoundReachedError inherits RuntimeError {}

/**
 * Creation on an abstract class. Usually this is detected by the type-checker. The only
 * case where this happens is when instantiating a type variable, whose bound type turns
 * out to be abstract.
 */
class AbstractClassInstantiationError inherits RuntimeError {}

/**
 * Raised by the Object::set operation if the type of the 
 * Object to set has an incompatible type.
 */
class IncompatibleTypeError inherits RuntimeError {}

/* ****************************************************************************
 * 3-Standard library related errors
 * ****************************************************************************/ 

/*
 * Arithmetic errors
 */
/** well-known attempt to divide with a zero valued divider */
class DivisionByZero inherits Exception {}

/** the figure oversteps the capacity of the numeric variable */
class OverflowError inherits Exception {}

/** one of the required operands is void */
class VoidOperandError inherits Exception {}
 
/*
 * String errors
 */
/** the data overstep the size of the string variable */
class StringIndexOutOfBound inherits Exception {}

/**
 * to be written #########################################
 */
class StringFormatException inherits Exception {}
  
/*
 * Collection related errors
 */  
/** Occurs when trying to access out of bounds elements */
class IndexOutOfBound inherits Exception {}

/** Occurs when trying to access element on an empty collection */
class EmptyCollection inherits Exception {}

/**
 * Occurs when calling next() operation while iterator is already
 * positioned on the last element of a collection
 */
class IteratorIsOff inherits Exception {}

/*
 * File Related Errors
 */
/** an interaction with the underlying system failed */
class IOException inherits Exception {}

/** the file has not be found on the underlying system */
class FileNotFoundException inherits IOException {}

/* ****************************************************************************
 * 4-Constraints related errors 
 * ****************************************************************************/ 
/** the pre-condition is not satisfied */
class ConstraintViolatedPre inherits Exception {}

/** the post-condition is not satisfied */
class ConstraintViolatedPost inherits Exception {}

/** some fixes declared in the invariant condition ave been changed */
class ConstraintViolatedInv inherits Exception {}


/* ****************************************************************************
 * 5-Resource related errors 
 * ****************************************************************************/

/** Occurs when Resource loading fails for some reasons */
class ResourceLoadException inherits Exception { }

/** Occurs when Resource saving fails for some reasons */
class ResourceSaveException inherits Exception { }

/** Occurs when Resource saving fails because an object refers to an element which 
 * belongs to the Definition of the currently running program */
class ResourceMixedLevelsException inherits ResourceSaveException { }

/** Occurs when trying to crate a Resource already existing in the Repository */
class ResourceCreateException inherits Exception { }

/** Raised when user tries to add an object that is not conform to the metamodel */
class ResourceUnconformityException inherits Exception { }

/** Raised when a resource cannot be loaded or saved because the URI used for 
 * the  metamodel is not registered
 */
class UnregisteredMetamodelException inherits Exception { }

/* ****************************************************************************
 * 6-Dynamic expressions related errors 
 * ****************************************************************************/

/**
 * to be written #########################################
 */
class DynamicExpressionException inherits Exception { }