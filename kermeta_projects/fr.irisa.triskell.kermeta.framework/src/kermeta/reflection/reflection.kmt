/* $Id: reflection.kmt,v 1.17 2006-05-04 15:22:42 jmottu Exp $
 * Project   : fr.irisa.triskell.kermeta.framework
 * File      : reflection.kmt
 * License   : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Mar 14, 2006
 * Authors   : 
 *		Franck Fleurey <ffleurey@irisa.fr>
 *		Zoé Drey <zdrey@irisa.fr>
 * 		Didier Vojtisek <dvojtise@irisa.fr>
 * Description :
 * 		Contains all the classes used in the reflection mecanism. It is used by kermeta.language.structure
 */
package kermeta::reflection;

require "../standard/collections.kmt"

alias String : kermeta::standard::String;
abstract class Object
{
	reference tag : set Tag[0..*]#object
	operation getMetaClass() : Class is abstract
	operation container() : Object is abstract
	operation checkInvariants() : Boolean is abstract
	operation equals(element : Object) : Boolean is abstract
	operation isNotEqual(element : Object) : Boolean is abstract
	operation get(~property : Property) : Object is abstract
	operation ~set(~property : Property, element : Object) : Void is abstract
	operation isSet(~property : Property) : Boolean is abstract
	operation unset(~property : Property) : Void is abstract
	operation oid() : Integer is abstract
	operation toString() : String is abstract
	operation isFrozen() : Boolean is abstract
	operation freeze() : Void is abstract
	operation isVoid() : Boolean is abstract
}
alias Boolean : kermeta::standard::Boolean;
alias Integer : kermeta::standard::Integer;
abstract class ParameterizedType inherits Type
{
	reference typeDefinition : GenericTypeDefinition[1..1]
	attribute typeParamBinding : set TypeVariableBinding[0..*]
}
abstract class Class inherits ParameterizedType
{
	property readonly ownedAttribute : set Property[0..*]
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.ownedAttribute
		end
	property readonly ownedOperation : set Operation[0..*]
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.ownedOperation
		end
	property readonly superClass : set Class[0..*]
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.superType
		end
	property readonly isAbstract : Boolean
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.isAbstract
		end
	property readonly name : String
		getter is do
			result := typeDefinition.name
		end
	operation new() : Object is abstract
	
	method toString() : String is do
		result := self.typeDefinition.name
	end
}
abstract class ModelType inherits ParameterizedType
{
	property readonly ownedTypeDefinition : set TypeDefinition[0..*]
		getter is do
			var mtDef : ModelTypeDefinition
			mtDef ?= typeDefinition
			result := mtDef.ownedTypeDefinition
		end
}
abstract class MultiplicityElement inherits TypedElement
{
	attribute isOrdered : Boolean
	attribute isUnique : Boolean
	attribute lower : Integer
	attribute upper : UnlimitedNatural
}
abstract class Constraint inherits NamedElement
{
}

abstract class Operation inherits MultiplicityElement
{
	attribute isAbstract : Boolean
	attribute ~pre : set Constraint[0..*]
	attribute ~post : set Constraint[0..*]
	
	reference superOperation : Operation
	reference owningClass : ClassDefinition#ownedOperation
	reference typeParameter : set TypeVariable[0..*]
	reference raisedException : set Type[0..*]
	attribute ownedParameter : set Parameter[0..*]#~operation
}
abstract class Tag inherits Object
{
	reference object : set Object[1..*]#tag
	attribute name : String
	attribute ~value : String
}
abstract class Property inherits MultiplicityElement
{
	reference owningClass : ClassDefinition#ownedAttribute
	reference opposite : Property
	attribute isReadOnly : Boolean
	attribute default : String
	attribute isComposite : Boolean
	attribute isDerived : Boolean
	attribute isID : Boolean
}
abstract class TypeContainer inherits Object
{
	attribute containedType : set Type[0..*]
}
abstract class GenericTypeDefinition inherits TypeDefinition
{
	attribute typeParameter : set TypeVariable[0..*]
}
abstract class ClassDefinition inherits TypeContainer, GenericTypeDefinition
{
	attribute isAbstract : Boolean
	attribute ownedAttribute : set Property[0..*]#owningClass
	attribute ownedOperation : set Operation[0..*]#owningClass
	attribute ~inv : set Constraint[0..*]
	
	reference superType : set Class[0..*]

	/** returns all the attributes of this classDefinition including the inherited ones and the derived ones */
	property readonly allOwnedAttribute : set Property[0..*]
		getter is do
 		    result := kermeta::standard::Set<Property>.new
 		    result.addAll(self.ownedAttribute)
		    self.superType.each{ t | 
		    	var cDef : ClassDefinition
		    	cDef ?= t.typeDefinition
				cDef.allOwnedAttribute.each{ p | 
					result.add(p)
				}
			}
		end
}
abstract class ModelTypeDefinition inherits GenericTypeDefinition, TypeDefinitionContainer
{
}
abstract class TypedElement inherits TypeContainer, NamedElement
{
	reference type : Type
}
abstract class TypeVariable inherits TypeContainer, Type, NamedElement
{
	reference supertype : Type
}
abstract class ProductType inherits TypeContainer, Type
{
	reference type : set Type[1..*]
}
abstract class FunctionType inherits TypeContainer, Type
{
	reference left : Type
	reference right : Type
}
abstract class Type inherits Object
{
	operation isInstance(element : Object) : Boolean is abstract
	operation isSubType(element : Type) : Boolean is abstract
}
abstract class TypeVariableBinding inherits TypeContainer, Object
{
	reference variable : TypeVariable[1..1]
	reference type : Type[1..1]
}
abstract class PrimitiveType inherits TypeContainer, DataType
{
	reference instanceType : Type
}
abstract class NamedElement inherits Object
{
	attribute name : String
	
	operation qualifiedName() : String is do
		var elem : NamedElement init self
		result := self.name
		from elem ?= elem.container
		until elem == void 
		loop
			result := elem.name + "::" + result
			elem ?= elem.container
		end
	end
	
}

/**
 * DEPRECATED
 */
abstract class SelfType inherits Type
{
}
abstract class TypeDefinitionContainer inherits NamedElement
{
	attribute ownedTypeDefinition : set TypeDefinition[0..*]
}
abstract class Package inherits TypeDefinitionContainer
{
	attribute nestedPackage : set Package[0..*]#nestingPackage
	reference nestingPackage : Package#nestedPackage
	attribute uri : String
}
abstract class TypeDefinition inherits NamedElement
{
}
abstract class VoidType inherits Type
{
}
abstract class DataType inherits TypeDefinition, Type
{
}
abstract class Enumeration inherits DataType
{
	attribute ownedLiteral : set EnumerationLiteral[0..*]#~enumeration
}
abstract class EnumerationLiteral inherits NamedElement
{
	reference ~enumeration : Enumeration#ownedLiteral
}
abstract class Parameter inherits MultiplicityElement
{
	reference ~operation : Operation#ownedParameter
}
alias UnlimitedNatural : kermeta::standard::UnlimitedNatural;

