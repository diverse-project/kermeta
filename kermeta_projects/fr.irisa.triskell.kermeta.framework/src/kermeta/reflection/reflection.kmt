/* $Id: reflection.kmt,v 1.24 2006-08-04 13:34:04 dvojtise Exp $
 * Project   : fr.irisa.triskell.kermeta.framework
 * File      : reflection.kmt
 * License   : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Mar 14, 2006
 * Authors   : 
 *		Franck Fleurey <ffleurey@irisa.fr>
 *		Zoé Drey <zdrey@irisa.fr>
 * 		Didier Vojtisek <dvojtise@irisa.fr>
 */
 
/**
 * Contains all the abstract classes used in the reflection mecanism. Implements the <b>derived
 * properties</b> contained in the classes; declares the abstract operations.
 * Concrete implementation is in kermeta.language.structure.
 */
package kermeta::reflection;

require "../standard/collections.kmt"

alias String : kermeta::standard::String;

/** 
 * Object type : all entities of Kermeta metamodel explicitely inherit Object.
 */
abstract class Object
{
	reference tag : set Tag[0..*]#object
	operation getMetaClass() : Class is abstract
	operation container() : Object is abstract
	operation checkInvariants() : Void is abstract
	operation checkAllInvariants() : Void is abstract
	operation equals(element : Object) : Boolean is abstract
	operation isNotEqual(element : Object) : Boolean is abstract
	
	/** 
	 * Returns the instances of the given property for this Object.
	 *
	 * Example : 
	 * <pre>
	 * class A { reference attr : String }
	 * </pre>
	 * Using A :
	 * <pre>
	 * operation getAProp() is do
	 *    var a : A
	 *    var s : String
	 *    var the_attr : Property init self.getMetaClass.ownedAttribute.one
	 *    s ?= a.get(the_attr)
	 * end
	 * </pre>
	 * The user has to cast
	 * the result of this method according to the type and the upper multiplicity
	 * of this property. If upper multiplicity > 1, than the effective type of the 
	 * result is a Sequence<ThePropertyName>. Otherwise, the type corresponds to 
	 * the name of the given Property (i.e the type of the property instance).
	 */
	operation get(~property : Property) : Object is abstract
	operation ~set(~property : Property, element : Object) : Void is abstract
	operation isSet(~property : Property) : Boolean is abstract
	operation unset(~property : Property) : Void is abstract
	operation oid() : Integer is abstract
	operation toString() : String is abstract
	operation isFrozen() : Boolean is abstract
	operation freeze() : Void is abstract
	operation isVoid() : Boolean is abstract
}

/** Alias for kermeta::standard::Boolean */
alias Boolean : kermeta::standard::Boolean;
/** Alias for kermeta::standard::Integer */
alias Integer : kermeta::standard::Integer;

/** Abstraction for Parameterized types, namely, Class and ModelType*/
abstract class ParameterizedType inherits Type
{
	reference typeDefinition : GenericTypeDefinition[1..1]
	attribute typeParamBinding : set TypeVariableBinding[0..*]
}
/** Type corresponding to the <b>use</b> of a ClassDefinition (see ClassDefinition)
 */
abstract class Class inherits ParameterizedType
{
	/** Returns the attributes, references, and derived properties owned by
	 *  the classDefinition of this class.
	 */
	property readonly ownedAttribute : set Property[0..*]
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.ownedAttribute
		end
		
	/** Returns the operations owned by the classDefinition of this class.
	 */
	property readonly ownedOperation : set Operation[0..*]
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.ownedOperation
		end
		
	/** Returns the Classes of which the classDefinition of this class inherits.
	 */
	property readonly superClass : set Class[0..*]
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.superType
		end
		
	/** Returns true if the classDefinition of this class is abstract.
	 */ 
	property readonly isAbstract : Boolean
		getter is do
			var cDef : ClassDefinition
			cDef ?= typeDefinition
			result := cDef.isAbstract
		end
	
	/** Returns the name of the classDefinition of this class
	 */
	property readonly name : String
		getter is do
			result := typeDefinition.name
		end
	operation new() : Object is abstract
	
	/** Returns the String representation of this class. 
	 *  Note : throws an exception if this class has no classDefinition
	 *  or if the classDefinition is not well constructed.
	 */
	method toString() : String is do
		result := self.typeDefinition.name
	end
}
/** Type corresponding to the <b>use</b> of a ModelTypeDefinition */
abstract class ModelType inherits ParameterizedType
{
	property readonly ownedTypeDefinition : set TypeDefinition[0..*]
		getter is do
			var mtDef : ModelTypeDefinition
			mtDef ?= typeDefinition
			result := mtDef.ownedTypeDefinition
		end
}
/** Element with a multiplicity [lower..upper] */
abstract class MultiplicityElement inherits TypedElement
{
	attribute isOrdered : Boolean
	attribute isUnique : Boolean
	attribute lower : Integer
	attribute upper : UnlimitedNatural
}
/** Class representing the constraint definition */
abstract class Constraint inherits NamedElement
{
	reference invOwner : ClassDefinition[0..1]#~inv
	reference preOwner : Operation[0..1]#~pre
	reference postOwner : Operation[0..1]#~post
}
/** Class representing the operation definition */
abstract class Operation inherits MultiplicityElement
{
	attribute isAbstract : Boolean
	attribute ~pre : set Constraint[0..*]#preOwner
	attribute ~post : set Constraint[0..*]#postOwner
	
	reference superOperation : Operation
	reference owningClass : ClassDefinition#ownedOperation
	reference typeParameter : set TypeVariable[0..*]
	reference raisedException : set Type[0..*]
	attribute ownedParameter : set Parameter[0..*]#~operation
}
/** Class representing the tag definition */
abstract class Tag inherits Object
{
	reference object : set Object[1..*]#tag
	attribute name : String
	attribute ~value : String
}
/** Class representing the property definition. Kermeta-Ecore equivalence:
 *  - Property with isComposite == true or with type is a base type (String, Integer, Boolean)  : EAttribute
 *  - Property with isComposite == false : EReference
 */
abstract class Property inherits MultiplicityElement
{
	reference owningClass : ClassDefinition#ownedAttribute
	reference opposite : Property
	attribute isReadOnly : Boolean
	attribute default : String
	attribute isComposite : Boolean
	attribute isDerived : Boolean
	attribute isID : Boolean
}
/** Phantom class : EMF reflexive editors need that any element of a metamodel 
 * has a direct or indirect containment relationship with the root model element of
 * the metamodel. This class resolves this technical requirement.
 */
abstract class TypeContainer inherits Object
{
	attribute containedType : set Type[0..*]
}
/** 
 * Abstracts the definition of generic type definitions (i.e. type definitions that
 * can be parameterized), namely, for ClassDefinition and ModelTypeDefinition.
 */
abstract class GenericTypeDefinition inherits TypeDefinition
{
	attribute typeParameter : set TypeVariable[0..*]
}
/** Defines a ClassDefinition. 
 *  <pre>class A
 *{ 
 *   attribute s : String
 *}
 *   </pre> is a class definition
 * in :
 * <pre>
 * main() : A is do end
 * </pre>
 * A is a Class : it is the use of the class definition of A
 */
abstract class ClassDefinition inherits TypeContainer, GenericTypeDefinition
{
	attribute isAbstract : Boolean
	
	/** Returns the attributes, references, and derived properties owned by
	 *  this class definition.
	 */
	attribute ownedAttribute : set Property[0..*]#owningClass
	
	/** Returns the operations owned by this class definition.
	 */
	attribute ownedOperation : set Operation[0..*]#owningClass
	attribute ~inv : set Constraint[0..*]#invOwner
	
	/** Returns the Classes of which this class definition inherits.
	 */
	reference superType : set Class[0..*]

	/** Returns all the attributes, references, derived properties of this 
	 *  class definition including the inherited ones
	 */
	property readonly allOwnedAttribute : set Property[0..*]
		getter is do
 		    result := kermeta::standard::Set<Property>.new
 		    result.addAll(self.ownedAttribute)
		    self.superType.each{ t | 
		    	var cDef : ClassDefinition
		    	cDef ?= t.typeDefinition
				cDef.allOwnedAttribute.each{ p | 
					result.add(p)
				}
			}
		end
}
/** Definition of a model type */
abstract class ModelTypeDefinition inherits GenericTypeDefinition, TypeDefinitionContainer
{
}
/** Abstraction of the notion of typed element : each element 
 * that is typed inherits this class. */
abstract class TypedElement inherits TypeContainer, NamedElement
{   
    /** The type of this model element */
	reference type : Type
}
/** Definition of a type variable for generic types :  
 * in class definition <pre>class AClass<X,Y> {}</pre>, X and Y are type variables.
 */
abstract class TypeVariable inherits TypeContainer, Type, NamedElement
{
	reference supertype : Type
}
abstract class ProductType inherits TypeContainer, Type
{
	reference type : set Type[1..*]
}
/**
 * Type used to define the use of lambda expressions.
 *  Uses :
 *  <pre>operation forAll(func : <G -> Boolean>) : Boolean is do
 *      var test : Boolean init true
 *      from var it : Iterator<G> init iterator
 *      until it.isOff
 *      loop
 *         test := test and func(it.next)
 *      end
 *      result := test
 *  end
 *  </pre>
 *
 *  In the above example, &lt;G -> Boolean&gt; is a function type f(G) -&gt; 
 *  Boolean, with a parameter of type G and a return type of type Boolean
 *  The operation <pre>forAll</pre> takes a lambda expression as parameter.
 */
abstract class FunctionType inherits TypeContainer, Type
{
	reference left : Type
	reference right : Type
}

abstract class Type inherits Object
{
	operation isInstance(element : Object) : Boolean is abstract
	operation isSubType(element : Type) : Boolean is abstract
}
abstract class TypeVariableBinding inherits TypeContainer, Object
{
	reference variable : TypeVariable[1..1]
	reference type : Type[1..1]
}
/** The class definition for kermeta aliases. */
abstract class PrimitiveType inherits TypeContainer, DataType
{
	reference instanceType : Type
}
/** The class definition of which others inherit when they represent a model element with a 
 * name (example : Operation, Property) 
 */
abstract class NamedElement inherits Object
{   
    /** Name of this named element */
	attribute name : String
	
	/** Returns the qualified name of this named element. Qualified name is 
	 * the list of the names of the packages hierarchically ordered, delimited by
	 * a "::", followed by the name of this named element.
	 */
	operation qualifiedName() : String is do
		var elem : NamedElement init self
		result := self.name
		from elem ?= elem.container
		until elem == void 
		loop
			result := elem.name + "::" + result
			elem ?= elem.container
		end
	end
	
}

/**
 * Self type : DEPRECATED
 */
abstract class SelfType inherits Type
{
}
/** 
 * Abstraction of the notion of containment for type definitions. Now, kermeta metamodel contains one container
 * element, that is Package. In a later release, ModelTypeDefinition will be the main container for type and
 * package definition.
 */
abstract class TypeDefinitionContainer inherits NamedElement
{
	attribute ownedTypeDefinition : set TypeDefinition[0..*]
}
/**
 * Package in kermeta. Each kermeta model must have a root package. 
 */
abstract class Package inherits TypeDefinitionContainer
{
	attribute nestedPackage : set Package[0..*]#nestingPackage
	reference nestingPackage : Package#nestedPackage
	attribute uri : String
}
/**
 * Abstraction for type definitions (ClassDefinition, ModelTypeDefinition, DataType inherit
 * this class)
 */
abstract class TypeDefinition inherits NamedElement
{
}
/** Class definition for the <pre>Void</pre> type */
abstract class VoidType inherits Type
{
}
/** Special type definition for Enumeration, PrimitiveType  */
abstract class DataType inherits TypeDefinition, Type
{
}
/** Definition for enumeration */
abstract class Enumeration inherits DataType
{   /** Owned item in enumeration */
	attribute ownedLiteral : set EnumerationLiteral[0..*]#~enumeration
}
/** Item definition for enumeration */
abstract class EnumerationLiteral inherits NamedElement
{   /* Owning enumeration */
	reference ~enumeration : Enumeration#ownedLiteral
}
/** Definition for operation parameter */
abstract class Parameter inherits MultiplicityElement
{   /** Owning operation */
	reference ~operation : Operation#ownedParameter
}
/** Alias for kermeta::standard::UnlimitedNatural */
alias UnlimitedNatural : kermeta::standard::UnlimitedNatural;

