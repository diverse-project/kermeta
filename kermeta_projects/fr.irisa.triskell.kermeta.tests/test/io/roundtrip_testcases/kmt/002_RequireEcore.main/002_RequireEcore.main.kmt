@mainClass "src::Main"
@mainOperation "main"
@uri "http://RequireEcore"
package src;

require "kermeta"
require "002_MetaModel.ecore"
using kermeta
using kermeta::persistence
using kermeta::standard
class Main
{
	operation main() : Void is
		do
			stdio.writeln("-----------------------------------------")
			stdio.writeln("Start")
			stdio.writeln("-----------------------------------------")
			var statemachine : StateMachine
			var repository : kermeta::persistence::EMFRepository init kermeta::persistence::EMFRepository.new
			var resource : kermeta::persistence::Resource init repository.createResource("./StateMachine.xmi", "./MetaModel.ecore")
			stdio.writeln("Before Load")
			resource.load
			stdio.writeln("After Load")
			statemachine ?= resource.instances.one
			statemachine.name := "Name1"
			statemachine.name := "Re-Name1"
			var s0 : State init State.new
			var setTrans : kermeta::standard::Set<Transition> init kermeta::standard::Set<Transition>.new
			var t1 : Transition init Transition.new
			var s1 : State init State.new
			s0.name := "State0"
			t1.name := "Transition"
			s1.name := "State1"
			t1.source := s0
			t1.target := s1
			setTrans.add(t1)
			s0.outgoing.addAll(setTrans)
			s1.incoming.addAll(setTrans)
			statemachine.top := s0
			resource.instances.remove(statemachine)
			resource.instances.add(statemachine)
			stdio.write("Look if the resource is correctly managed: ")
			resource.instances.each{o | do
					stdio.writeln(o.toString)
				end}
			stdio.writeln("Before Save")
			resource.save
			stdio.writeln("After Save")
		end

	operation truc(machin : String) : kermeta::standard::~Void is
		do
			var truc2 : String init "sdqf"
			stdio.writeln(machin)
		end

}
