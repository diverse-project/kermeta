/* $Id: 003_ComplexTest_rdl.main.kmt,v 1.1 2007-09-10 08:35:11 cfaucher Exp $
* Project    : RdlModel
* File       : rdl.kmt
* License    : EPL
* Copyright  : IRISA / INRIA / Universite de Rennes 1
* -------------------------------------------------------------------
* Creation date : 18 November 2005
* Modified By : 
*        Waqas Ahmed Saeed <wahmedsa@irisa.fr>
* Description : 
*       Contains classes corresponding to RDL meta-model
*/

package fr;

require "general.kmt"
require "http://www.eclipse.org/emf/2002/Ecore"

using kermeta::standard
using fr::irisa::triskell::rdl::models::ucs

package irisa
{
	package triskell
	{
		package rdl
		{
			package models
			{
				package rdl
				{
					/**
					 * definition of alias to palliate bug into ecore generation
					 */
							alias String : kermeta::standard::String;
							alias Boolean: kermeta::standard::Boolean;
							
							class RdlModel inherits Model
							{
								attribute requirementGroups : RequirementGroup[0..*]
							}
							abstract class Type inherits ModelElement
							{
							}
							class RequirementGroup inherits ModelElement
							{
								attribute number : TypeStructureNumber // Optional stufff
								attribute requirements : Requirement[0..*] // Each RDL sentence after translation is stored here
							}
							class TypeStructureNumber inherits Type
							{
								attribute numbers : String[0..*]
							}
							abstract class Quantifier inherits Type
							{
							}
							class QuantifierA inherits Quantifier
							{
							}
							class QuantifierNone inherits Quantifier
							{
							}
							class QuantifierThe inherits Quantifier
							{
							}
							class QuantifierOne inherits Quantifier
							{
							}
							class QuantifierThis inherits Quantifier
							{
							}
							class QuantifierEach inherits Quantifier
							{
							}
							abstract class Requirement inherits ModelElement
							{
							}
							abstract class RequirementBasic inherits Requirement
							{
							}
							class RequirementIfThenElse inherits Requirement
							{
								attribute condition : RequirementBasic
								attribute elsePart : RequirementBasic
								attribute thenPart : RequirementBasic
							}
							abstract class ObservableValue inherits ModelElement
							{
							}
							abstract class ObjectReference inherits ModelElement
							{
								attribute quantifier : Quantifier
							}
							abstract class RequirementBasicComposite inherits RequirementBasic
							{
							}
							abstract class RequirementBasicLeaf inherits RequirementBasic
							{
							}
							abstract class RequirementBasicCompositeLogical inherits RequirementBasicComposite
							{
								attribute left : RequirementBasic[1..1]
								attribute right : RequirementBasic[1..1]
							}
							abstract class RequirementBasicCompositeTemporal inherits RequirementBasicComposite
							{
								attribute condition : RequirementBasic[1..1]
								attribute consequence : RequirementBasic[1..1]
							}
							abstract class RequirementBasicCompositeTemporalSynchronous inherits RequirementBasicCompositeTemporal
							{
							}
							abstract class RequirementBasicCompositeTemporalAsynchronous inherits RequirementBasicCompositeTemporal
							{
							}
							class RequirementBasicCompositeTemporalWhen inherits RequirementBasicCompositeTemporalSynchronous
							{
							}
							class RequirementBasicCompositeTemporalBefore inherits RequirementBasicCompositeTemporalSynchronous
							{
							}
							class RequirementBasicCompositeTemporalAfter inherits RequirementBasicCompositeTemporalSynchronous
							{
							}
							class RequirementBasicCompositeTemporalWhile inherits RequirementBasicCompositeTemporalAsynchronous
							{
							}
							class RequirementBasicCompositeTemporalUntil inherits RequirementBasicCompositeTemporalAsynchronous
							{
							}
							class RequirementBasicCompositeLogicalAnd inherits RequirementBasicCompositeLogical
							{
							}
							class RequirementBasicCompositeLogicalImplies inherits RequirementBasicCompositeLogical
							{
							}
							class RequirementBasicCompositeLogicalOr inherits RequirementBasicCompositeLogical
							{
							}
							class RequirementNull inherits RequirementBasicLeaf
							{
							}
							abstract class ServiceActivation inherits RequirementBasicLeaf
							{
								attribute complements : ServiceActivationComplement[0..*]
								attribute subject : ServiceActivationSubject
							}
							abstract class ServiceActivationPotential inherits ServiceActivation
							{
							}
							class ServiceActivationCan inherits ServiceActivationPotential
							{
							}
							abstract class ServiceActivationReal inherits ServiceActivation
							{
							}
							abstract class ServiceActivationPast inherits ServiceActivationReal
							{
							}
							abstract class ServiceActivationPresent inherits ServiceActivationReal
							{
							}
							class ServiceActivationDid inherits ServiceActivationPast
							{
							}
							class ServiceActivationStops inherits ServiceActivationPresent
							{
							}
							class ServiceActivationStarts inherits ServiceActivationPresent
							{
							}
							class ServiceActivationDoes inherits ServiceActivationPresent
							{
							}
							abstract class ObjectDeclaration inherits RequirementBasicLeaf
							{
								attribute type : String
							}
							class ObjectDeclarationInstance inherits ObjectDeclaration
							{
							}
							class ObjectDeclarationSingleton inherits ObjectDeclaration
							{
							}
							abstract class ObservableProperty inherits RequirementBasicLeaf
							{
								attribute ~reference : ObservableReference
								attribute ~value : ObservableValue
							}
							abstract class ObservablePropertyComposite inherits ObservableProperty
							{
							}
							abstract class ObservablePropertyLeaf inherits ObservableProperty
							{
							}
							abstract class ObservablePropertyCompositeLogical inherits ObservablePropertyComposite
							{
								attribute left : ObservableProperty[1..1]
								attribute right : ObservableProperty[1..1]
							}
							class ObservablePropertyOr inherits ObservablePropertyCompositeLogical
							{
							}
							class ObservablePropertyAnd inherits ObservablePropertyCompositeLogical
							{
							}
							abstract class ObservablePropertyChange inherits ObservablePropertyLeaf
							{
							}
							abstract class ObservablePropertyStable inherits ObservablePropertyLeaf
							{
							}
							class ObservablePropertyBecomes inherits ObservablePropertyChange
							{
							}
							class ObservablePropertyRemains inherits ObservablePropertyChange
							{
							}
							class ObservablePropertyChanges inherits ObservablePropertyChange
							{
							}
							class ObservablePropertyMustBe inherits ObservablePropertyStable
							{
							}
							class ObservablePropertyIsNot inherits ObservablePropertyStable
							{
							}
							class ObservablePropertyIs inherits ObservablePropertyStable
							{
							}
							class ObservableValueComposite inherits ObservableValue
							{
								attribute subValues : ObservableValue[0..*]
							}
							abstract class ObservableValueLeaf inherits ObservableValue
							{
							}
							class ObservableValueNot inherits ObservableValueLeaf
							{
								attribute delegate : ObservableValue
							}
							class ObservableValueSimple inherits ObservableValueLeaf
							{
							}
							class ObservableReference inherits ObjectReference
							{
								attribute associatedOwners : ObservableReferenceOwner[0..*]
								attribute isImplicit : Boolean
								attribute owners : ObservableReferenceOwner[0..*]
							}
							class ObservableReferenceOwner inherits ObjectReference
							{
								attribute parent : ObservableReferenceOwner
							}
							abstract class ServiceActivationParticipant inherits ObjectReference
							{
							}
							class ServiceActivationSubject inherits ServiceActivationParticipant
							{
							}
							class ServiceActivationComplement inherits ServiceActivationParticipant
							{
							}
							
				}
			}
		}
	}
}

