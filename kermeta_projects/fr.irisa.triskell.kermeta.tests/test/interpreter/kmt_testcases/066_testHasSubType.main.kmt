@mainClass "Object::TestHasSubtype"
@mainOperation "main"

package Object;

require kermeta

using kermeta::standard
using kermeta::utils
using kermeta::language::structure
using kermeta::kunit

// ------------------
abstract class A<G> {}

class B<G> inherits A<G> {}

class C {}

class D<G> inherits C {}

class E inherits D<String>, B<Integer> {}
// ---------------------

class X{}
class Y inherits X {}
alias A_X : X;
alias A_Y : Y;
alias A_A_X : A_X;
alias A_A_Y : A_Y;

class TestHasSubtype inherits kermeta::kunit::TestCase {

	operation main() : Void is do
		var tr : TestRunner init TestRunner.new
		tr.run(TestHasSubtype)
		tr.printTestResult	
	end
	
	operation testHasSubtype1() : Void is do
		assert(A<C>.hasSubType(B<C>))
		assert(not B<C>.hasSubType(A<C>))
	end
	operation testHasSubtype2() : Void is do	
		assert(C.hasSubType(D<C>))
		assert(not D<C>.hasSubType(C))
	end
	operation testHasSubtype3() : Void is do	
		assert(C.hasSubType(D<String>))
		assert(not D<String>.hasSubType(C))
	end	
	
	operation testHasSubtype4() : Void is do
		assert(D<String>.hasSubType(E))
		assert(not E.hasSubType(D<String>))
	end
	
	operation testPrimitiveHasSubtype1() : Void is do
		assert(A_X.hasSubType(Y))
		assert(not Y.hasSubType(A_X))
	end
	
	operation testPrimitiveHasSubtype2() : Void is do	
		assertWithMsg(false,"Test disabled because it doesn't typecheck correctly, see test in io : testPrimitiveType2.kmt")
//		assert(A_A_X.hasSubType(Y))
//		assert(not Y.hasSubType(A_A_X))
	end
	
	operation testPrimitiveHasSubtype3() : Void is do
		assert(A_X.hasSubType(A_Y))
		assert(not A_Y.hasSubType(A_X))
	end
	
	operation testPrimitiveHasSubtype4() : Void is do
		assertWithMsg(false,"Test disabled because it doesn't typecheck correctly, see test in io : testPrimitiveType2.kmt")
//		assert(A_A_X.hasSubType(A_Y))
//		assert(not A_Y.hasSubType(A_A_X))
	end
	
	
	operation testPrimitiveHasSubtype5() : Void is do
		assert(X.hasSubType(A_Y))
		assert(not A_Y.hasSubType(X))
	end
	
	operation testPrimitiveHasSubtype6() : Void is do
		assertWithMsg(false,"Test disabled because it doesn't typecheck correctly, see test in io : testPrimitiveType2.kmt")
//		assert(X.hasSubType(A_A_Y))
//		assert(not A_A_Y.hasSubType(X))
	end


}