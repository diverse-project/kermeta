/* $Id: 072_testProperty.main.kmt,v 1.4 2008-04-09 12:59:08 dvojtise Exp $
 * Creation date: February 04, 2008
 * License:	EPL
 * Copyright:
 * Authors:
 *     Vincent Mahe
 */
@mainClass "testProperty::TestDerivedProperties"
@mainOperation "main"

package testProperty;

require kermeta

using kermeta::standard
using kermeta::utils
using kermeta::kunit


/**
 * checks the different cases about derived properties
 */
class TestDerivedProperties inherits kermeta::kunit::TestCase {

	operation main() : Void is do
		var tr : TestRunner init TestRunner.new
		tr.run(TestDerivedProperties)
		tr.printTestResult
	end
	
	/* checks the property with multiplicity [0..1] */
	operation testSingleProperty() : Void is do
		var a : A init A.new
		assert(a.i == void)
		
		// first getter test
		assert(a.p == void)
		
		// second getter test
		a.i := 3
		assert(a.p == 3)
		
		// setter test
		a.p := 5
		assert(a.i != void)
		assert(a.p != void)
		assertTrueWithMsg(a.i == 5," expecting a.i == 5, got " + a.i.toString)
		assertTrueWithMsg(a.p == 5," expecting a.p == 5, got " + a.p.toString)
		
		// setter reuse test
		a.p := 8
		assertTrueWithMsg(a.i != 5," expecting a.i != 5, got " + a.i.toString)
		assertTrueWithMsg(a.p != 5," expecting a.p != 5, got " + a.p.toString)
		assertTrueWithMsg(a.i == 8," expecting a.i == 8, got " + a.i.toString)
		assertTrueWithMsg(a.p == 8," expecting a.p == 8, got " + a.p.toString)
	end
	
	/* checks the property with multiplicity [0..*] */
	operation testCollectionProperty() : Void is do
		var b : B init B.new
		
		// first getter test
		assert(b.p.size == 0)
		
		// second getter test
		b.row.add(3)
		assert(b.p.size == 1)
		assert(b.p.one == 3)
		
		// "add on getter" test
		b.p.add(777) // do nothing because it adds 777 to a new collection each time !
		assert(b.row.size == 1)
		assert(b.p.size == 1)
		assertTrueWithMsg(not b.row.contains(777), "b.row contains 777")
		assertTrueWithMsg(not b.p.contains(777), "b.p contains 777")
		
		/* 0..* multiplicity => read-only properties so there is no
		   setter on derived collections */
		 // it is impossible to do b.p := OrderedSet<Integer>.new
	end
	
	/* checks the property with multiplicity [0..*]
	 * in this implementation dependant of the getter, it is possible to have some effect
	 * however, this seem to be a useless construct 
	 */
	operation testCollectionPropertyWithSideEffect() : Void is do
		var c : C init C.new
		
		// first getter test
		assert(c.p.size == 0)
		
		// second getter test
		c.row.add(3)
		assert(c.p.size == 1)
		assert(c.p.one == 3)
		
		// "add on getter" test
		c.p.add(777) // in this implementation dependant
		assert(c.row.size == 2)
		assert(c.p.size == 2)
		c.row.contains(777)
		assertTrueWithMsg(c.row.contains(777), "b.row doesn't contain 777")
		assertTrueWithMsg(c.p.contains(777), "b.p doesn't contain 777")
		
		/* 0..* multiplicity => read-only properties so there is no
		   setter on derived collections */
		 // it is impossible to do b.p := OrderedSet<Integer>.new
		 // so impossible to call the setter ...
	end
}

class A {
	reference i : kermeta::standard::Integer
	
	property p : kermeta::standard::Integer
		getter is do
			result := i
		end
		setter is do
		    // Note : do not use p here, because you reassign i to i (by traversing the getter !
			self.i := value
		end
}

class B {
	reference row : kermeta::standard::Integer[0..*]
	
	property p : kermeta::standard::Integer[0..*]
		getter is do
			result := OrderedSet<Integer>.new
			result.addAll(row)
		end
		setter is do
			row.clear
			row.addAll(value)
		end
}


class C {
	reference row : kermeta::standard::Integer[0..*]
	
	property p : kermeta::standard::Integer[0..*]
		getter is do
			result := row // useless / not recommanded
		end
		setter is do
			row.clear
			row.addAll(value)
		end
}