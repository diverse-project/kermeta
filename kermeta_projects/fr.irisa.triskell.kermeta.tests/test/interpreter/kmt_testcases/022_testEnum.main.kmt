/* $Id: 022_testEnum.main.kmt,v 1.7 2008-02-28 11:02:18 bmorin Exp $ */

@mainClass "testEnum::TestEnum"
@mainOperation "main"

package testEnum;

require kermeta

using kermeta::standard
using kermeta::kunit

enumeration Couleur {
	jaune;
	bleu;
	vert;
	rouge;
}

enumeration Jour {
	lundi;
	mardi;
	mercredi;
	jeudi;
}


class TestEnum inherits kermeta::kunit::TestCase {
	
	attribute c : Couleur
	
	operation main() : Void is do
		var tr : TestRunner init TestRunner.new
		tr.run(TestEnum)
		tr.printTestResult
	end	
	
	
	
	operation testCompareLiteral() : Couleur is
	do
		assert(Couleur.jaune == Couleur.jaune)
		assert(Couleur.jaune != Couleur.bleu)
		assert(Couleur.jaune != Jour.lundi)
		result := void
	end
	
	operation testAssignVar() is do
		var c : Couleur
		assert(c == void)
		c := Couleur.rouge
		assert(c == c)
		assert(c == Couleur.rouge)
		assert(c != Couleur.jaune)
		c := Couleur.vert
		assert(c == Couleur.vert)
		c := void
		assert(c == void)
		assert(c != Couleur.jaune)
	end
	
	operation testGeneric() is do
		var titi : Titi<Couleur> init Titi<Couleur>.new
		titi.titi := Couleur.rouge
		assert(titi.titi == Couleur.rouge)
		
	end
	
	operation testGenericParameter() is do
		var titi : Titi<Couleur> init Titi<Couleur>.new
		assert(titi.setTiti( Couleur.rouge ) == Couleur.rouge)
		assert(titi.titi == Couleur.rouge)
	end
	
	operation testGenericOperation() is do
		assert(identity(Couleur.rouge) == Couleur.rouge)
		var c : Couleur init Couleur.vert
		assert(identity(c) == Couleur.vert)
	end
	
	operation testCollection() is do
	
		var c : Couleur[*]
		
		c := OrderedSet<Couleur>.new
		assert(c.size == 0)
		
		c.add(Couleur.rouge)
		c.add(Couleur.vert)
		
		assert(c.size == 2)
		
		stdio.writeln(Couleur.rouge.toString)
		
		assert(not c.one.isVoid) // test for bug #3438
		c.each{ lit | stdio.writeln(lit.name)}
		
		assert(c.contains(Couleur.vert))
		
		assert(not c.contains(Couleur.bleu))
		c.remove(Couleur.rouge)
		assert(c.size == 1)
		assert(not c.contains(Couleur.rouge))
	
	end
	
	operation testCast1() is do
		var o : Object init Couleur.bleu
		var c : Couleur
		c ?= o
		assert(c == Couleur.bleu)
	end
	
	operation testCast2() is do
		var o : Object init Jour.lundi
		var c : Couleur
		c ?= o
		assert(c == void)
	end 
	
	operation testReflect() is do
		var p : kermeta::language::structure::Package   
		var e : kermeta::language::structure::Enumeration
		var jaune : kermeta::language::structure::EnumerationLiteral
		
		p ?= self.getMetaClass.typeDefinition.container
		e ?= p.ownedTypeDefinition.select{ t | t.name == "Couleur" }.one
		jaune := e.ownedLiteral.select{ l | l.name == "jaune" }.one
		
		assert(jaune == Couleur.jaune)
		 
		var c : Couleur
		
		c ?= jaune
		
		assert(c == Couleur.jaune)
		
		var j : Jour
		j ?= jaune
		
		assert(j == void)
		
	end
	
	operation testReflect2() is do
		var a : kermeta::language::structure::Property init getMetaClass.ownedAttribute.select{p | p.name == "c"}.one
		assert(a != void)
		do 
			self.getMetaClass.~set(a, Couleur.rouge)
		rescue (e : kermeta::exceptions::Exception) 
			assert(false)
		end
		self.assert(true)
	end
	
	operation testOpCall() is do
		assert(op(Couleur.jaune) == Couleur.jaune)
		var c : Couleur init Couleur.vert
		assert(c == Couleur.vert)
	end
	
	operation op(c : Couleur) : Couleur is do
		result := c
	end
	
	operation identity<T>(p : T) : T is do
		result := p
	end
   
   operation testEnumAttributeContainment() is do
		var c : ClassWithEnumAttributes init ClassWithEnumAttributes.new
		c.att1 := Couleur.vert
		assert(c.att1 == Couleur.vert)
		c.att2 := Couleur.vert
		assert(c.att2 == Couleur.vert)
		assert(c.att1 == Couleur.vert)
		assert(c.att1 == c.att2)
		stdio.writeln(c.att1.toString + c.att2.toString)
   end
   
}


class ClassWithEnumAttributes {
	attribute att1 : Couleur
	attribute att2 : Couleur
}

class Titi<G> {

	attribute titi : G
	
	operation setTiti(p : G) : G is do
		titi := p
		result := titi
	end
	
	
}

