<?xml version="1.0" encoding="UTF-8"?>
<kermeta_language_structure:ModelingUnit xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:kermeta_language_behavior="http://www.kermeta.org/kermeta/1_2_0//kermeta/language/behavior"
    xmlns:kermeta_language_structure="http://www.kermeta.org/kermeta/1_2_0//kermeta/language/structure" referencedModelingUnits="Ecore.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/Standard.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/collections.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/persistence/resource.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/utils.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/ecore/ecore_compatibility.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/primitive_types.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/kermeta_java.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/reflective_collections.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/kunit.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/kunit/assert.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/StringBuffer.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/hashtable.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/utils/stack.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/io/std_io.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/io/file_io.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/dynamic_expression.km#/ platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/java.km#/">
  <packages name="uml" uri="http://www.eclipse.org/uml2/2.1.0/UML">
    <ownedTypeDefinition xsi:type="kermeta_language_structure:PrimitiveType" name="Integer"
        instanceType="#//@packages.0/Integer/@containedType.0">
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/primitive_types.km#//@packages.0/standard/Integer"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:PrimitiveType" name="Boolean"
        instanceType="#//@packages.0/Boolean/@containedType.0">
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/primitive_types.km#//@packages.0/standard/Boolean"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:PrimitiveType" name="String"
        instanceType="#//@packages.0/String/@containedType.0">
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/primitive_types.km#//@packages.0/standard/String"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:PrimitiveType" name="UnlimitedNatural"
        instanceType="#//@packages.0/UnlimitedNatural/@containedType.0">
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/primitive_types.km#//@packages.0/standard/Integer"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Comment/@ownedTags.0"
        name="Comment" superType="#//@packages.0/Comment/@containedType.0">
      <ownedTags value="/**A comment is a textual annotation that can be attached to a set of elements.*/"
          object="#//@packages.0/Comment"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/Comment/body/@ownedTags.0" name="body" type="#//@packages.0/String"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**Specifies a string that is the comment.*/" object="#//@packages.0/Comment/body"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Comment/annotatedElement/@ownedTags.0" name="annotatedElement"
          type="#//@packages.0/Comment/annotatedElement/@containedType.0" upper="-1">
        <ownedTags value="/**References the Element(s) being commented.*/" object="#//@packages.0/Comment/annotatedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Element/@ownedTags.0"
        name="Element" isAbstract="true" superType="#//@packages.0/Element/@containedType.0">
      <ownedTags value="/**An element is a constituent of a model. As such, it has the capability of owning other elements.*/"
          object="#//@packages.0/Element"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EModelElement"/>
      <ownedAttribute tag="#//@packages.0/Element/ownedElement/@ownedTags.0" name="ownedElement"
          type="#//@packages.0/Element/ownedElement/@containedType.0" upper="-1" opposite="#//@packages.0/Element/owner"
          isDerived="true">
        <ownedTags value="/**The Elements owned by this element.*/" object="#//@packages.0/Element/ownedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/standard/primitive_types.km#//@packages.0/standard/Void"/>
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class"/>
                <typeref type="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Element/ownedElement/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Element/ownedElement/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Element/owner/@ownedTags.0" name="owner"
          type="#//@packages.0/Element/owner/@containedType.0" isOrdered="true" upper="1"
          opposite="#//@packages.0/Element/ownedElement" isDerived="true">
        <ownedTags value="/**The Element that owns this element.*/" object="#//@packages.0/Element/owner"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Element/owner/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Element/owner/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Element/owner/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Element/owner/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Element/ownedComment/@ownedTags.0" name="ownedComment"
          type="#//@packages.0/Element/ownedComment/@containedType.0" upper="-1" isComposite="true">
        <ownedTags value="/**The Comments owned by this element.*/" object="#//@packages.0/Element/ownedComment"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Comment"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Element/not_own_self/@ownedTags.0" name="not_own_self"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An element may not directly or indirectly own itself.&#xD;&#xA;not self.allOwnedElements()->includes(self)*/"
            object="#//@packages.0/Element/not_own_self"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/has_owner/@ownedTags.0" name="has_owner"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Elements that must be owned must have an owner.&#xD;&#xA;self.mustBeOwned() implies owner->notEmpty()*/"
            object="#//@packages.0/Element/has_owner"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/destroy/@ownedTags.0" name="destroy"
          type="#//@packages.0/Element/destroy/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Destroys this element by removing all cross references to/from it and removing it from its containing resource or object.*/"
            object="#//@packages.0/Element/destroy"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/hasKeyword/@ownedTags.0" name="hasKeyword"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether this element has the specified keyword.*/"
            object="#//@packages.0/Element/hasKeyword"/>
        <ownedParameter name="keyword" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getKeywords/@ownedTags.0" name="getKeywords"
          type="#//@packages.0/String" upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the keywords for this element.*/" object="#//@packages.0/Element/getKeywords"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/addKeyword/@ownedTags.0" name="addKeyword"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Adds the specified keyword to this element.*/" object="#//@packages.0/Element/addKeyword"/>
        <ownedParameter name="keyword" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/removeKeyword/@ownedTags.0" name="removeKeyword"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Removes the specified keyword from this element.*/" object="#//@packages.0/Element/removeKeyword"/>
        <ownedParameter name="keyword" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getNearestPackage/@ownedTags.0"
          name="getNearestPackage" type="#//@packages.0/Element/getNearestPackage/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the nearest package that owns (either directly or indirectly) this element, or the element itself (if it is a package).*/"
            object="#//@packages.0/Element/getNearestPackage"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getModel/@ownedTags.0" name="getModel"
          type="#//@packages.0/Element/getModel/@containedType.0" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the model that owns (either directly or indirectly) this element.*/"
            object="#//@packages.0/Element/getModel"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Model"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/isStereotypeApplicable/@ownedTags.0"
          name="isStereotypeApplicable" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether the specified stereotype is applicable to this element.*/"
            object="#//@packages.0/Element/isStereotypeApplicable"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/isStereotypeApplicable/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/isStereotypeRequired/@ownedTags.0"
          name="isStereotypeRequired" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether the specified stereotype is required for this element.*/"
            object="#//@packages.0/Element/isStereotypeRequired"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/isStereotypeRequired/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/isStereotypeApplied/@ownedTags.0"
          name="isStereotypeApplied" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether the specified stereotype is applied to this element.*/"
            object="#//@packages.0/Element/isStereotypeApplied"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/isStereotypeApplied/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/applyStereotype/@ownedTags.0" name="applyStereotype"
          type="#//@packages.0/Element/applyStereotype/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Applies the specified stereotype to this element.*/"
            object="#//@packages.0/Element/applyStereotype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EObject"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/applyStereotype/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/unapplyStereotype/@ownedTags.0"
          name="unapplyStereotype" type="#//@packages.0/Element/unapplyStereotype/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Unapplies the specified stereotype from this element.*/"
            object="#//@packages.0/Element/unapplyStereotype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EObject"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/unapplyStereotype/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getApplicableStereotypes/@ownedTags.0"
          name="getApplicableStereotypes" type="#//@packages.0/Element/getApplicableStereotypes/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the stereotypes that are applicable to this element, including those that are required and/or may already be applied.*/"
            object="#//@packages.0/Element/getApplicableStereotypes"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getApplicableStereotype/@ownedTags.0"
          name="getApplicableStereotype" type="#//@packages.0/Element/getApplicableStereotype/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the stereotype with the specified qualified name that is applicable to this element, or null if no such stereotype is applicable.*/"
            object="#//@packages.0/Element/getApplicableStereotype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        <ownedParameter name="qualifiedName" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getStereotypeApplications/@ownedTags.0"
          name="getStereotypeApplications" type="#//@packages.0/Element/getStereotypeApplications/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the stereotype applications for this element.*/"
            object="#//@packages.0/Element/getStereotypeApplications"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EObject"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getStereotypeApplication/@ownedTags.0"
          name="getStereotypeApplication" type="#//@packages.0/Element/getStereotypeApplication/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the application of the specified stereotype for this element, or null if no such stereotype application exists.*/"
            object="#//@packages.0/Element/getStereotypeApplication"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EObject"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/getStereotypeApplication/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getRequiredStereotypes/@ownedTags.0"
          name="getRequiredStereotypes" type="#//@packages.0/Element/getRequiredStereotypes/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the stereotypes that are required for this element.*/"
            object="#//@packages.0/Element/getRequiredStereotypes"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getRequiredStereotype/@ownedTags.0"
          name="getRequiredStereotype" type="#//@packages.0/Element/getRequiredStereotype/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the stereotype with the specified qualified name that is required for this element, or null if no such stereotype is required.*/"
            object="#//@packages.0/Element/getRequiredStereotype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        <ownedParameter name="qualifiedName" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getAppliedStereotypes/@ownedTags.0"
          name="getAppliedStereotypes" type="#//@packages.0/Element/getAppliedStereotypes/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the stereotypes that are applied to this element.*/"
            object="#//@packages.0/Element/getAppliedStereotypes"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getAppliedStereotype/@ownedTags.0"
          name="getAppliedStereotype" type="#//@packages.0/Element/getAppliedStereotype/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is  applied.*/"
            object="#//@packages.0/Element/getAppliedStereotype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        <ownedParameter name="qualifiedName" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getAppliedSubstereotypes/@ownedTags.0"
          name="getAppliedSubstereotypes" type="#//@packages.0/Element/getAppliedSubstereotypes/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the substereotypes of the specified stereotype that are applied to this element.*/"
            object="#//@packages.0/Element/getAppliedSubstereotypes"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/getAppliedSubstereotypes/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getAppliedSubstereotype/@ownedTags.0"
          name="getAppliedSubstereotype" type="#//@packages.0/Element/getAppliedSubstereotype/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the substereotype of the specified stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is applied.*/"
            object="#//@packages.0/Element/getAppliedSubstereotype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/getAppliedSubstereotype/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
        <ownedParameter name="qualifiedName" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/hasValue/@ownedTags.0" name="hasValue"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether this element has a (non-default) value for the property with the specified name in the specified stereotype.*/"
            object="#//@packages.0/Element/hasValue"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/hasValue/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
        <ownedParameter name="propertyName" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getValue/@ownedTags.0" name="getValue"
          type="Ecore.km#//@packages.0/EJavaObject" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the value of the property with the specified name in the specified stereotype for this element.*/"
            object="#//@packages.0/Element/getValue"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/getValue/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
        <ownedParameter name="propertyName" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/setValue/@ownedTags.0" name="setValue"
          type="#//@packages.0/Element/setValue/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the value of the property with the specified name in the specified stereotype for this element.*/"
            object="#//@packages.0/Element/setValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="stereotype" type="#//@packages.0/Element/setValue/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        </ownedParameter>
        <ownedParameter name="propertyName" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="newValue" type="Ecore.km#//@packages.0/EJavaObject"
            isOrdered="true" lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/createEAnnotation/@ownedTags.0"
          name="createEAnnotation" type="#//@packages.0/Element/createEAnnotation/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an annotation with the specified source and this element as its model element.*/"
            object="#//@packages.0/Element/createEAnnotation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EAnnotation"/>
        <ownedParameter name="source" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getRelationships/@ownedTags.0" name="getRelationships"
          type="#//@packages.0/Element/getRelationships/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**Retrieves the relationships in which this element is involved.*/"
            object="#//@packages.0/Element/getRelationships"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Relationship"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/op_getRelationships/@ownedTags.0"
          name="op_getRelationships" type="#//@packages.0/Element/op_getRelationships/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the relationships of the specified type in which this element is involved.*/"
            object="#//@packages.0/Element/op_getRelationships"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Relationship"/>
        <ownedParameter name="eClass" type="#//@packages.0/Element/op_getRelationships/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EClass"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getSourceDirectedRelationships/@ownedTags.0"
          name="getSourceDirectedRelationships" type="#//@packages.0/Element/getSourceDirectedRelationships/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the directed relationships for which this element is a source.*/"
            object="#//@packages.0/Element/getSourceDirectedRelationships"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/op_getSourceDirectedRelationships/@ownedTags.0"
          name="op_getSourceDirectedRelationships" type="#//@packages.0/Element/op_getSourceDirectedRelationships/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the directed relationships of the specified type for which this element is a source.*/"
            object="#//@packages.0/Element/op_getSourceDirectedRelationships"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
        <ownedParameter name="eClass" type="#//@packages.0/Element/op_getSourceDirectedRelationships/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EClass"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/getTargetDirectedRelationships/@ownedTags.0"
          name="getTargetDirectedRelationships" type="#//@packages.0/Element/getTargetDirectedRelationships/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the directed relationships for which this element is a target.*/"
            object="#//@packages.0/Element/getTargetDirectedRelationships"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/op_getTargetDirectedRelationships/@ownedTags.0"
          name="op_getTargetDirectedRelationships" type="#//@packages.0/Element/op_getTargetDirectedRelationships/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the directed relationships of the specified type for which this element is a target.*/"
            object="#//@packages.0/Element/op_getTargetDirectedRelationships"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
        <ownedParameter name="eClass" type="#//@packages.0/Element/op_getTargetDirectedRelationships/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EClass"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/allOwnedElements/@ownedTags.0" name="allOwnedElements"
          type="#//@packages.0/Element/allOwnedElements/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**The query allOwnedElements() gives all of the direct and indirect owned elements of an element.&#xD;&#xA;result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))*/"
            object="#//@packages.0/Element/allOwnedElements"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Element/mustBeOwned/@ownedTags.0" name="mustBeOwned"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.&#xD;&#xA;result = true*/"
            object="#//@packages.0/Element/mustBeOwned"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Package/@ownedTags.0"
        name="Package" superType="#//@packages.0/Package/@containedType.0 #//@packages.0/Package/@containedType.1 #//@packages.0/Package/@containedType.2">
      <ownedTags value="/**A package is used to group elements, and provides a namespace for the grouped elements.&#xD;&#xA;A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.&#xD;&#xA;Package specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.*/"
          object="#//@packages.0/Package"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateableElement"/>
      <ownedAttribute tag="#//@packages.0/Package/ownedType/@ownedTags.0" name="ownedType"
          type="#//@packages.0/Package/ownedType/@containedType.0" upper="-1" opposite="#//@packages.0/Type/package"
          isDerived="true">
        <ownedTags value="/**References the packaged elements that are Types.*/" object="#//@packages.0/Package/ownedType"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Package/ownedType/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Package/ownedType/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Package/ownedType/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Package/ownedType/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Package/packageMerge/@ownedTags.0" name="packageMerge"
          type="#//@packages.0/Package/packageMerge/@containedType.0" upper="-1" opposite="#//@packages.0/PackageMerge/receivingPackage"
          isComposite="true">
        <ownedTags value="/**References the PackageMerges that are owned by this Package.*/"
            object="#//@packages.0/Package/packageMerge"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageMerge"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Package/packagedElement/@ownedTags.0" name="packagedElement"
          type="#//@packages.0/Package/packagedElement/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**Specifies the packageable elements that are owned by this Package.*/"
            object="#//@packages.0/Package/packagedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Package/nestedPackage/@ownedTags.0" name="nestedPackage"
          type="#//@packages.0/Package/nestedPackage/@containedType.0" upper="-1"
          opposite="#//@packages.0/Package/nestingPackage" isDerived="true">
        <ownedTags value="/**References the packaged elements that are Packages.*/"
            object="#//@packages.0/Package/nestedPackage"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Package/nestedPackage/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Package/nestedPackage/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Package/nestedPackage/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Package/nestedPackage/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Package/nestingPackage/@ownedTags.0" name="nestingPackage"
          type="#//@packages.0/Package/nestingPackage/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Package/nestedPackage" isDerived="true">
        <ownedTags value="/**References the Package that owns this Package.*/" object="#//@packages.0/Package/nestingPackage"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Package/nestingPackage/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Package/nestingPackage/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Package/nestingPackage/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Package/nestingPackage/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Package/profileApplication/@ownedTags.0"
          name="profileApplication" type="#//@packages.0/Package/profileApplication/@containedType.0"
          upper="-1" opposite="#//@packages.0/ProfileApplication/applyingPackage"
          isComposite="true">
        <ownedTags value="/**References the ProfileApplications that indicate which profiles have been applied to the Package.*/"
            object="#//@packages.0/Package/profileApplication"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ProfileApplication"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Package/elements_public_or_private/@ownedTags.0"
          name="elements_public_or_private" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If an element that is owned by a package has visibility, it is public or private.&#xD;&#xA;self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)*/"
            object="#//@packages.0/Package/elements_public_or_private"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/createOwnedClass/@ownedTags.0" name="createOwnedClass"
          type="#//@packages.0/Package/createOwnedClass/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a(n) (abstract) class with the specified name as an owned type of this package.*/"
            object="#//@packages.0/Package/createOwnedClass"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="isAbstract" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/createOwnedEnumeration/@ownedTags.0"
          name="createOwnedEnumeration" type="#//@packages.0/Package/createOwnedEnumeration/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a enumeration with the specified name as an owned type of this package.*/"
            object="#//@packages.0/Package/createOwnedEnumeration"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Enumeration"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/createOwnedPrimitiveType/@ownedTags.0"
          name="createOwnedPrimitiveType" type="#//@packages.0/Package/createOwnedPrimitiveType/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a primitive type with the specified name as an owned type of this package.*/"
            object="#//@packages.0/Package/createOwnedPrimitiveType"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PrimitiveType"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/createOwnedInterface/@ownedTags.0"
          name="createOwnedInterface" type="#//@packages.0/Package/createOwnedInterface/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an interface with the specified name as an owned type of this package.*/"
            object="#//@packages.0/Package/createOwnedInterface"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/isProfileApplied/@ownedTags.0" name="isProfileApplied"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether the specified profile is applied to this package.*/"
            object="#//@packages.0/Package/isProfileApplied"/>
        <ownedParameter name="profile" type="#//@packages.0/Package/isProfileApplied/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/applyProfile/@ownedTags.0" name="applyProfile"
          type="#//@packages.0/Package/applyProfile/@containedType.0" upper="-1" isAbstract="true">
        <ownedTags value="/**Applies the current definition of the specified profile to this package and automatically applies required stereotypes in the profile to elements within this package's namespace hieararchy. If a different definition is already applied, automatically migrates any associated stereotype values on a &quot;best effort&quot; basis (matching classifiers and structural features by name).*/"
            object="#//@packages.0/Package/applyProfile"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EObject"/>
        <ownedParameter name="profile" type="#//@packages.0/Package/applyProfile/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/unapplyProfile/@ownedTags.0" name="unapplyProfile"
          type="#//@packages.0/Package/unapplyProfile/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**Unapplies the specified profile from this package and automatically unapplies stereotypes in the profile from elements within this package's namespace hieararchy.*/"
            object="#//@packages.0/Package/unapplyProfile"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EObject"/>
        <ownedParameter name="profile" type="#//@packages.0/Package/unapplyProfile/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/getAppliedProfiles/@ownedTags.0"
          name="getAppliedProfiles" type="#//@packages.0/Package/getAppliedProfiles/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the profiles that are applied to this package.*/"
            object="#//@packages.0/Package/getAppliedProfiles"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/getAllAppliedProfiles/@ownedTags.0"
          name="getAllAppliedProfiles" type="#//@packages.0/Package/getAllAppliedProfiles/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves all the profiles that are applied to this package, including profiles applied to its nesting package(s).*/"
            object="#//@packages.0/Package/getAllAppliedProfiles"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/getAppliedProfile/@ownedTags.0"
          name="getAppliedProfile" type="#//@packages.0/Package/getAppliedProfile/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the profile with the specified qualified name that is applied to this package, or null if no such profile is applied.*/"
            object="#//@packages.0/Package/getAppliedProfile"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
        <ownedParameter name="qualifiedName" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/op_getAppliedProfile/@ownedTags.0"
          name="op_getAppliedProfile" type="#//@packages.0/Package/op_getAppliedProfile/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the profile with the specified qualified name that is applied to this package or any of its nesting packages (if indicated), or null if no such profile is applied.*/"
            object="#//@packages.0/Package/op_getAppliedProfile"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
        <ownedParameter name="qualifiedName" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="recurse" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/getAllProfileApplications/@ownedTags.0"
          name="getAllProfileApplications" type="#//@packages.0/Package/getAllProfileApplications/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves all the profile applications for this package, including profile applications for its nesting package(s).*/"
            object="#//@packages.0/Package/getAllProfileApplications"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ProfileApplication"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/getProfileApplication/@ownedTags.0"
          name="getProfileApplication" type="#//@packages.0/Package/getProfileApplication/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the application of the specified profile to this package, or null if no such profile is applied.*/"
            object="#//@packages.0/Package/getProfileApplication"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ProfileApplication"/>
        <ownedParameter name="profile" type="#//@packages.0/Package/getProfileApplication/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/op_getProfileApplication/@ownedTags.0"
          name="op_getProfileApplication" type="#//@packages.0/Package/op_getProfileApplication/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the application of the specified profile to this package or any of its nesting packages (if indicated), or null if no such profile is applied.*/"
            object="#//@packages.0/Package/op_getProfileApplication"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ProfileApplication"/>
        <ownedParameter name="profile" type="#//@packages.0/Package/op_getProfileApplication/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
        </ownedParameter>
        <ownedParameter name="recurse" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/isModelLibrary/@ownedTags.0" name="isModelLibrary"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether this package is a model library.*/"
            object="#//@packages.0/Package/isModelLibrary"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/visibleMembers/@ownedTags.0" name="visibleMembers"
          type="#//@packages.0/Package/visibleMembers/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**The query visibleMembers() defines which members of a Package can be accessed outside it.&#xD;&#xA;result = member->select( m | self.makesVisible(m))*/"
            object="#//@packages.0/Package/visibleMembers"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Package/makesVisible/@ownedTags.0" name="makesVisible"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.&#xD;&#xA;self.member->includes(el)&#xD;&#xA;result = (ownedMember->includes(el)) or&#xA;(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or&#xA;(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())*/"
            object="#//@packages.0/Package/makesVisible"/>
        <ownedParameter name="el" type="#//@packages.0/Package/makesVisible/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        </ownedParameter>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/PackageableElement/@ownedTags.0"
        name="PackageableElement" isAbstract="true" superType="#//@packages.0/PackageableElement/@containedType.0 #//@packages.0/PackageableElement/@containedType.1">
      <ownedTags value="/**A packageable element indicates a named element that may be owned directly by a package.&#xD;&#xA;Packageable elements are able to serve as a template parameter.*/"
          object="#//@packages.0/PackageableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/NamedElement/@ownedTags.0"
        name="NamedElement" isAbstract="true" superType="#//@packages.0/NamedElement/@containedType.0">
      <ownedTags value="/**A named element is an element in a model that may have a name.&#xD;&#xA;A named element supports using a string expression to specify its name. This allows names of model elements to involve template parameters. The actual name is evaluated from the string expression only when it is sensible to do so (e.g., when a template is bound).*/"
          object="#//@packages.0/NamedElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/NamedElement/name/@ownedTags.0" name="name"
          type="#//@packages.0/String" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The name of the NamedElement.*/" object="#//@packages.0/NamedElement/name"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/NamedElement/visibility/@ownedTags.0" name="visibility"
          type="#//@packages.0/VisibilityKind" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.*/"
            object="#//@packages.0/NamedElement/visibility"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/NamedElement/qualifiedName/@ownedTags.0"
          name="qualifiedName" type="#//@packages.0/String" isOrdered="true" upper="1"
          isDerived="true">
        <ownedTags value="/**A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself.*/"
            object="#//@packages.0/NamedElement/qualifiedName"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/NamedElement/qualifiedName/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/NamedElement/qualifiedName/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/NamedElement/qualifiedName/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/NamedElement/qualifiedName/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/NamedElement/clientDependency/@ownedTags.0"
          name="clientDependency" type="#//@packages.0/NamedElement/clientDependency/@containedType.0"
          upper="-1" opposite="#//@packages.0/Dependency/client">
        <ownedTags value="/**Indicates the dependencies that reference the client.*/"
            object="#//@packages.0/NamedElement/clientDependency"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Dependency"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/NamedElement/namespace/@ownedTags.0" name="namespace"
          type="#//@packages.0/NamedElement/namespace/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Namespace/ownedMember" isDerived="true">
        <ownedTags value="/**Specifies the namespace that owns the NamedElement.*/"
            object="#//@packages.0/NamedElement/namespace"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/NamedElement/namespace/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/NamedElement/namespace/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/NamedElement/namespace/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/NamedElement/namespace/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/NamedElement/nameExpression/@ownedTags.0"
          name="nameExpression" type="#//@packages.0/NamedElement/nameExpression/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The string expression used to define the name of this named element.*/"
            object="#//@packages.0/NamedElement/nameExpression"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StringExpression"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/NamedElement/has_no_qualified_name/@ownedTags.0"
          name="has_no_qualified_name" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If there is no name, or one of the containing namespaces has no name, there is no qualified name.&#xD;&#xA;(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())&#xD;&#xA;  implies self.qualifiedName->isEmpty()*/"
            object="#//@packages.0/NamedElement/has_no_qualified_name"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/has_qualified_name/@ownedTags.0"
          name="has_qualified_name" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.&#xD;&#xA;(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies&#xA;  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))*/"
            object="#//@packages.0/NamedElement/has_qualified_name"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/visibility_needs_ownership/@ownedTags.0"
          name="visibility_needs_ownership" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If a NamedElement is not owned by a Namespace, it does not have a visibility.&#xD;&#xA;namespace->isEmpty() implies visibility->isEmpty()*/"
            object="#//@packages.0/NamedElement/visibility_needs_ownership"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/createDependency/@ownedTags.0"
          name="createDependency" type="#//@packages.0/NamedElement/createDependency/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a dependency between this named element and the specified supplier, owned by this named element's nearest package.*/"
            object="#//@packages.0/NamedElement/createDependency"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Dependency"/>
        <ownedParameter name="supplier" type="#//@packages.0/NamedElement/createDependency/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/getLabel/@ownedTags.0" name="getLabel"
          type="#//@packages.0/String" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves a localized label for this named element.*/"
            object="#//@packages.0/NamedElement/getLabel"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/op_getLabel/@ownedTags.0" name="op_getLabel"
          type="#//@packages.0/String" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves a label for this named element, localized if indicated.*/"
            object="#//@packages.0/NamedElement/op_getLabel"/>
        <ownedParameter name="localize" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/createUsage/@ownedTags.0" name="createUsage"
          type="#//@packages.0/NamedElement/createUsage/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a usage between this named element and the specified supplier, owned by this named element's nearest package.*/"
            object="#//@packages.0/NamedElement/createUsage"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Usage"/>
        <ownedParameter name="supplier" type="#//@packages.0/NamedElement/createUsage/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/getQualifiedName/@ownedTags.0"
          name="getQualifiedName" type="#//@packages.0/String" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.&#xD;&#xA;result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()&#xA;then &#xA;    self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))&#xA;else&#xA;    Set{}&#xA;endif*/"
            object="#//@packages.0/NamedElement/getQualifiedName"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/allNamespaces/@ownedTags.0"
          name="allNamespaces" type="#//@packages.0/NamedElement/allNamespaces/@containedType.0"
          isOrdered="true" upper="-1" isAbstract="true">
        <ownedTags value="/**The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.&#xD;&#xA;result = if self.namespace->isEmpty()&#xA;then Sequence{}&#xA;else self.namespace.allNamespaces()->prepend(self.namespace)&#xA;endif*/"
            object="#//@packages.0/NamedElement/allNamespaces"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/isDistinguishableFrom/@ownedTags.0"
          name="isDistinguishableFrom" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.&#xD;&#xA;result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)&#xA;then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()&#xA;else true&#xA;endif*/"
            object="#//@packages.0/NamedElement/isDistinguishableFrom"/>
        <ownedParameter name="n" type="#//@packages.0/NamedElement/isDistinguishableFrom/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        </ownedParameter>
        <ownedParameter name="ns" type="#//@packages.0/NamedElement/isDistinguishableFrom/@ownedParameter.1/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/separator/@ownedTags.0" name="separator"
          type="#//@packages.0/String" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query separator() gives the string that is used to separate names when constructing a qualified name.&#xD;&#xA;result = '::'*/"
            object="#//@packages.0/NamedElement/separator"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/NamedElement/allOwningPackages/@ownedTags.0"
          name="allOwningPackages" type="#//@packages.0/NamedElement/allOwningPackages/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**The query allOwningPackages() returns all the directly or indirectly owning packages.&#xD;&#xA;result = self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())*/"
            object="#//@packages.0/NamedElement/allOwningPackages"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="VisibilityKind">
      <ownedLiteral name="public"/>
      <ownedLiteral name="private"/>
      <ownedLiteral name="protected"/>
      <ownedLiteral name="package"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Dependency/@ownedTags.0"
        name="Dependency" superType="#//@packages.0/Dependency/@containedType.0 #//@packages.0/Dependency/@containedType.1">
      <ownedTags value="/**A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).*/"
          object="#//@packages.0/Dependency"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/Dependency/supplier/@ownedTags.0" name="supplier"
          type="#//@packages.0/Dependency/supplier/@containedType.0" lower="1" upper="-1">
        <ownedTags value="/**The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.*/"
            object="#//@packages.0/Dependency/supplier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Dependency/client/@ownedTags.0" name="client"
          type="#//@packages.0/Dependency/client/@containedType.0" lower="1" upper="-1"
          opposite="#//@packages.0/NamedElement/clientDependency">
        <ownedTags value="/**The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.*/"
            object="#//@packages.0/Dependency/client"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DirectedRelationship/@ownedTags.0"
        name="DirectedRelationship" isAbstract="true" superType="#//@packages.0/DirectedRelationship/@containedType.0">
      <ownedTags value="/**A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.*/"
          object="#//@packages.0/DirectedRelationship"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Relationship"/>
      <ownedAttribute tag="#//@packages.0/DirectedRelationship/source/@ownedTags.0"
          name="source" type="#//@packages.0/DirectedRelationship/source/@containedType.0"
          lower="1" upper="-1" isDerived="true">
        <ownedTags value="/**Specifies the sources of the DirectedRelationship.*/"
            object="#//@packages.0/DirectedRelationship/source"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/DirectedRelationship/source/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/DirectedRelationship/source/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/DirectedRelationship/source/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/DirectedRelationship/source/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/DirectedRelationship/target/@ownedTags.0"
          name="target" type="#//@packages.0/DirectedRelationship/target/@containedType.0"
          lower="1" upper="-1" isDerived="true">
        <ownedTags value="/**Specifies the targets of the DirectedRelationship.*/"
            object="#//@packages.0/DirectedRelationship/target"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/DirectedRelationship/target/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/DirectedRelationship/target/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/DirectedRelationship/target/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/DirectedRelationship/target/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Relationship/@ownedTags.0"
        name="Relationship" isAbstract="true" superType="#//@packages.0/Relationship/@containedType.0">
      <ownedTags value="/**Relationship is an abstract concept that specifies some kind of relationship between elements.*/"
          object="#//@packages.0/Relationship"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/Relationship/relatedElement/@ownedTags.0"
          name="relatedElement" type="#//@packages.0/Relationship/relatedElement/@containedType.0"
          lower="1" upper="-1" isDerived="true">
        <ownedTags value="/**Specifies the elements related by the Relationship.*/"
            object="#//@packages.0/Relationship/relatedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Relationship/relatedElement/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Relationship/relatedElement/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Relationship/relatedElement/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Relationship/relatedElement/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Namespace/@ownedTags.0"
        name="Namespace" isAbstract="true" superType="#//@packages.0/Namespace/@containedType.0">
      <ownedTags value="/**A namespace is an element in a model that contains a set of named elements that can be identified by name.*/"
          object="#//@packages.0/Namespace"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/Namespace/elementImport/@ownedTags.0" name="elementImport"
          type="#//@packages.0/Namespace/elementImport/@containedType.0" upper="-1"
          opposite="#//@packages.0/ElementImport/importingNamespace" isComposite="true">
        <ownedTags value="/**References the ElementImports owned by the Namespace.*/"
            object="#//@packages.0/Namespace/elementImport"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ElementImport"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Namespace/packageImport/@ownedTags.0" name="packageImport"
          type="#//@packages.0/Namespace/packageImport/@containedType.0" upper="-1"
          opposite="#//@packages.0/PackageImport/importingNamespace" isComposite="true">
        <ownedTags value="/**References the PackageImports owned by the Namespace.*/"
            object="#//@packages.0/Namespace/packageImport"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageImport"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Namespace/ownedRule/@ownedTags.0" name="ownedRule"
          type="#//@packages.0/Namespace/ownedRule/@containedType.0" upper="-1" opposite="#//@packages.0/Constraint/context"
          isComposite="true">
        <ownedTags value="/**Specifies a set of Constraints owned by this Namespace.*/"
            object="#//@packages.0/Namespace/ownedRule"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Namespace/member/@ownedTags.0" name="member"
          type="#//@packages.0/Namespace/member/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.*/"
            object="#//@packages.0/Namespace/member"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Namespace/member/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Namespace/member/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Namespace/member/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Namespace/member/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Namespace/importedMember/@ownedTags.0" name="importedMember"
          type="#//@packages.0/Namespace/importedMember/@containedType.0" upper="-1"
          isDerived="true">
        <ownedTags value="/**References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.*/"
            object="#//@packages.0/Namespace/importedMember"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Namespace/importedMember/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Namespace/importedMember/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Namespace/importedMember/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Namespace/importedMember/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Namespace/ownedMember/@ownedTags.0" name="ownedMember"
          type="#//@packages.0/Namespace/ownedMember/@containedType.0" upper="-1"
          opposite="#//@packages.0/NamedElement/namespace" isDerived="true">
        <ownedTags value="/**A collection of NamedElements owned by the Namespace.*/"
            object="#//@packages.0/Namespace/ownedMember"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Namespace/ownedMember/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Namespace/ownedMember/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Namespace/ownedMember/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Namespace/ownedMember/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Namespace/members_distinguishable/@ownedTags.0"
          name="members_distinguishable" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**All the members of a Namespace are distinguishable within it.&#xD;&#xA;membersAreDistinguishable()*/"
            object="#//@packages.0/Namespace/members_distinguishable"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Namespace/createElementImport/@ownedTags.0"
          name="createElementImport" type="#//@packages.0/Namespace/createElementImport/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an import of the specified element into this namespace with the specified visibility.*/"
            object="#//@packages.0/Namespace/createElementImport"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ElementImport"/>
        <ownedParameter name="element" type="#//@packages.0/Namespace/createElementImport/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
        </ownedParameter>
        <ownedParameter name="visibility" type="#//@packages.0/VisibilityKind" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Namespace/createPackageImport/@ownedTags.0"
          name="createPackageImport" type="#//@packages.0/Namespace/createPackageImport/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an import of the specified package into this namespace with the specified visibility.*/"
            object="#//@packages.0/Namespace/createPackageImport"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageImport"/>
        <ownedParameter name="package_" type="#//@packages.0/Namespace/createPackageImport/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
        </ownedParameter>
        <ownedParameter name="visibility" type="#//@packages.0/VisibilityKind" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Namespace/getImportedElements/@ownedTags.0"
          name="getImportedElements" type="#//@packages.0/Namespace/getImportedElements/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the elements imported by this namespace.*/"
            object="#//@packages.0/Namespace/getImportedElements"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Namespace/getImportedPackages/@ownedTags.0"
          name="getImportedPackages" type="#//@packages.0/Namespace/getImportedPackages/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the packages imported by this namespace.*/"
            object="#//@packages.0/Namespace/getImportedPackages"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Namespace/getImportedMembers/@ownedTags.0"
          name="getImportedMembers" type="#//@packages.0/Namespace/getImportedMembers/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.&#xD;&#xA;result = self.importMembers(self.elementImport.importedElement.asSet()-&#xA;>union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))*/"
            object="#//@packages.0/Namespace/getImportedMembers"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Namespace/getNamesOfMember/@ownedTags.0"
          name="getNamesOfMember" type="#//@packages.0/String" upper="-1" isAbstract="true">
        <ownedTags value="/**The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.&#xD;&#xA;The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.&#xD;&#xA;result = if self.ownedMember ->includes(element)&#xA;then Set{}->include(element.name)&#xA;else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in&#xA;  if elementImports->notEmpty()&#xA;  then elementImports->collect(el | el.getName())&#xA;  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))&#xA;  endif&#xA;endif*/"
            object="#//@packages.0/Namespace/getNamesOfMember"/>
        <ownedParameter name="element" type="#//@packages.0/Namespace/getNamesOfMember/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Namespace/membersAreDistinguishable/@ownedTags.0"
          name="membersAreDistinguishable" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.&#xD;&#xA;result = self.member->forAll( memb |&#xA;self.member->excluding(memb)->forAll(other |&#xA;memb.isDistinguishableFrom(other, self)))*/"
            object="#//@packages.0/Namespace/membersAreDistinguishable"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Namespace/importMembers/@ownedTags.0" name="importMembers"
          type="#//@packages.0/Namespace/importMembers/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.&#xD;&#xA;result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |&#xA;mem.imp.isDistinguishableFrom(mem, self)))*/"
            object="#//@packages.0/Namespace/importMembers"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
        <ownedParameter name="imps" type="#//@packages.0/Namespace/importMembers/@ownedParameter.0/@containedType.0"
            upper="-1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Namespace/excludeCollisions/@ownedTags.0"
          name="excludeCollisions" type="#//@packages.0/Namespace/excludeCollisions/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.&#xD;&#xA;result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))*/"
            object="#//@packages.0/Namespace/excludeCollisions"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
        <ownedParameter name="imps" type="#//@packages.0/Namespace/excludeCollisions/@ownedParameter.0/@containedType.0"
            upper="-1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
        </ownedParameter>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ElementImport/@ownedTags.0"
        name="ElementImport" superType="#//@packages.0/ElementImport/@containedType.0">
      <ownedTags value="/**An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.*/"
          object="#//@packages.0/ElementImport"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/ElementImport/visibility/@ownedTags.0" name="visibility"
          type="#//@packages.0/VisibilityKind" isOrdered="true" lower="1" upper="1"
          isComposite="true">
        <ownedTags value="/**Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.*/"
            object="#//@packages.0/ElementImport/visibility"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ElementImport/alias/@ownedTags.0" name="alias"
          type="#//@packages.0/String" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used.*/"
            object="#//@packages.0/ElementImport/alias"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ElementImport/importedElement/@ownedTags.0"
          name="importedElement" type="#//@packages.0/ElementImport/importedElement/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Specifies the PackageableElement whose name is to be added to a Namespace.*/"
            object="#//@packages.0/ElementImport/importedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ElementImport/importingNamespace/@ownedTags.0"
          name="importingNamespace" type="#//@packages.0/ElementImport/importingNamespace/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/Namespace/elementImport">
        <ownedTags value="/**Specifies the Namespace that imports a PackageableElement from another Package.*/"
            object="#//@packages.0/ElementImport/importingNamespace"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ElementImport/visibility_public_or_private/@ownedTags.0"
          name="visibility_public_or_private" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The visibility of an ElementImport is either public or private.&#xD;&#xA;self.visibility = #public or self.visibility = #private*/"
            object="#//@packages.0/ElementImport/visibility_public_or_private"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ElementImport/imported_element_is_public/@ownedTags.0"
          name="imported_element_is_public" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An importedElement has either public visibility or no visibility at all.&#xD;&#xA;self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public*/"
            object="#//@packages.0/ElementImport/imported_element_is_public"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ElementImport/getName/@ownedTags.0" name="getName"
          type="#//@packages.0/String" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.&#xD;&#xA;result = if self.alias->notEmpty() then&#xA;  self.alias&#xA;else&#xA;  self.importedElement.name&#xA;endif*/"
            object="#//@packages.0/ElementImport/getName"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/PackageImport/@ownedTags.0"
        name="PackageImport" superType="#//@packages.0/PackageImport/@containedType.0">
      <ownedTags value="/**A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.*/"
          object="#//@packages.0/PackageImport"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/PackageImport/visibility/@ownedTags.0" name="visibility"
          type="#//@packages.0/VisibilityKind" isOrdered="true" lower="1" upper="1"
          isComposite="true">
        <ownedTags value="/**Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not.*/"
            object="#//@packages.0/PackageImport/visibility"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/PackageImport/importedPackage/@ownedTags.0"
          name="importedPackage" type="#//@packages.0/PackageImport/importedPackage/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Specifies the Package whose members are imported into a Namespace.*/"
            object="#//@packages.0/PackageImport/importedPackage"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/PackageImport/importingNamespace/@ownedTags.0"
          name="importingNamespace" type="#//@packages.0/PackageImport/importingNamespace/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/Namespace/packageImport">
        <ownedTags value="/**Specifies the Namespace that imports the members from a Package.*/"
            object="#//@packages.0/PackageImport/importingNamespace"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/PackageImport/public_or_private/@ownedTags.0"
          name="public_or_private" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The visibility of a PackageImport is either public or private.&#xD;&#xA;self.visibility = #public or self.visibility = #private*/"
            object="#//@packages.0/PackageImport/public_or_private"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Constraint/@ownedTags.0"
        name="Constraint" superType="#//@packages.0/Constraint/@containedType.0">
      <ownedTags value="/**A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.*/"
          object="#//@packages.0/Constraint"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      <ownedAttribute tag="#//@packages.0/Constraint/constrainedElement/@ownedTags.0"
          name="constrainedElement" type="#//@packages.0/Constraint/constrainedElement/@containedType.0"
          isOrdered="true" upper="-1">
        <ownedTags value="/**The ordered set of Elements referenced by this Constraint.*/"
            object="#//@packages.0/Constraint/constrainedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Constraint/specification/@ownedTags.0" name="specification"
          type="#//@packages.0/Constraint/specification/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**A condition that must be true when evaluated in order for the constraint to be satisfied.*/"
            object="#//@packages.0/Constraint/specification"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Constraint/context/@ownedTags.0" name="context"
          type="#//@packages.0/Constraint/context/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Namespace/ownedRule">
        <ownedTags value="/**Specifies the namespace that owns the NamedElement.*/"
            object="#//@packages.0/Constraint/context"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Constraint/not_apply_to_self/@ownedTags.0"
          name="not_apply_to_self" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A constraint cannot be applied to itself.&#xD;&#xA;not constrainedElement->includes(self)*/"
            object="#//@packages.0/Constraint/not_apply_to_self"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Constraint/value_specification_boolean/@ownedTags.0"
          name="value_specification_boolean" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The value specification for a constraint must evaluate to a Boolean value.&#xD;&#xA;self.specification().booleanValue().isOclKindOf(Boolean)*/"
            object="#//@packages.0/Constraint/value_specification_boolean"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Constraint/boolean_value/@ownedTags.0" name="boolean_value"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The value specification for a constraint must evaluate to a Boolean value.&#xD;&#xA;true*/"
            object="#//@packages.0/Constraint/boolean_value"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Constraint/no_side_effects/@ownedTags.0"
          name="no_side_effects" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Evaluating the value specification for a constraint must not have side effects.&#xD;&#xA;true*/"
            object="#//@packages.0/Constraint/no_side_effects"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Constraint/not_applied_to_self/@ownedTags.0"
          name="not_applied_to_self" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A constraint cannot be applied to itself.&#xD;&#xA;not constrainedElement->includes(self)*/"
            object="#//@packages.0/Constraint/not_applied_to_self"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ValueSpecification/@ownedTags.0"
        name="ValueSpecification" isAbstract="true" superType="#//@packages.0/ValueSpecification/@containedType.0 #//@packages.0/ValueSpecification/@containedType.1">
      <ownedTags value="/**A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.&#xD;&#xA;ValueSpecification specializes ParameterableElement to specify that a value specification can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.*/"
          object="#//@packages.0/ValueSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TypedElement"/>
      <ownedOperation tag="#//@packages.0/ValueSpecification/isComputable/@ownedTags.0"
          name="isComputable" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.&#xD;&#xA;result = false*/"
            object="#//@packages.0/ValueSpecification/isComputable"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ValueSpecification/integerValue/@ownedTags.0"
          name="integerValue" type="#//@packages.0/Integer" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query integerValue() gives a single Integer value when one can be computed.&#xD;&#xA;result = Set{}*/"
            object="#//@packages.0/ValueSpecification/integerValue"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ValueSpecification/booleanValue/@ownedTags.0"
          name="booleanValue" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query booleanValue() gives a single Boolean value when one can be computed.&#xD;&#xA;result = Set{}*/"
            object="#//@packages.0/ValueSpecification/booleanValue"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ValueSpecification/stringValue/@ownedTags.0"
          name="stringValue" type="#//@packages.0/String" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query stringValue() gives a single String value when one can be computed.&#xD;&#xA;result = Set{}*/"
            object="#//@packages.0/ValueSpecification/stringValue"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ValueSpecification/unlimitedValue/@ownedTags.0"
          name="unlimitedValue" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.&#xD;&#xA;result = Set{}*/"
            object="#//@packages.0/ValueSpecification/unlimitedValue"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ValueSpecification/isNull/@ownedTags.0"
          name="isNull" type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1"
          isAbstract="true">
        <ownedTags value="/**The query isNull() returns true when it can be computed that the value is null.&#xD;&#xA;result = false*/"
            object="#//@packages.0/ValueSpecification/isNull"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TypedElement/@ownedTags.0"
        name="TypedElement" isAbstract="true" superType="#//@packages.0/TypedElement/@containedType.0">
      <ownedTags value="/**A typed element is a kind of named element that represents an element with a type.&#xD;&#xA;A typed element has a type.*/"
          object="#//@packages.0/TypedElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/TypedElement/type/@ownedTags.0" name="type"
          type="#//@packages.0/TypedElement/type/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**This information is derived from the return result for this Operation.&#xD;&#xA;The type of the TypedElement.*/"
            object="#//@packages.0/TypedElement/type"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Type/@ownedTags.0"
        name="Type" isAbstract="true" superType="#//@packages.0/Type/@containedType.0">
      <ownedTags value="/**A type is a named element that is used as the type for a typed element. A type can be contained in a package.&#xD;&#xA;A type constrains the values represented by a typed element.*/"
          object="#//@packages.0/Type"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      <ownedAttribute tag="#//@packages.0/Type/package/@ownedTags.0" name="package"
          type="#//@packages.0/Type/package/@containedType.0" isOrdered="true" upper="1"
          opposite="#//@packages.0/Package/ownedType" isDerived="true">
        <ownedTags value="/**Specifies the owning package of this classifier, if any.*/"
            object="#//@packages.0/Type/package"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Type/package/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Type/package/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Type/package/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Type/package/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Type/createAssociation/@ownedTags.0" name="createAssociation"
          type="#//@packages.0/Type/createAssociation/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a(n) (binary) association between this type and the specified other type, with the specified navigabilities, aggregations, names, lower bounds, and upper bounds, and owned by this type's nearest package.*/"
            object="#//@packages.0/Type/createAssociation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
        <ownedParameter name="end1IsNavigable" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="end1Aggregation" type="#//@packages.0/AggregationKind"
            isOrdered="true" lower="1" upper="1"/>
        <ownedParameter name="end1Name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="end1Lower" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="end1Upper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="end1Type" type="#//@packages.0/Type/createAssociation/@ownedParameter.5/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="end2IsNavigable" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="end2Aggregation" type="#//@packages.0/AggregationKind"
            isOrdered="true" lower="1" upper="1"/>
        <ownedParameter name="end2Name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="end2Lower" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="end2Upper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Type/getAssociations/@ownedTags.0" name="getAssociations"
          type="#//@packages.0/Type/getAssociations/@containedType.0" upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the associations in which this type is involved.*/"
            object="#//@packages.0/Type/getAssociations"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Type/conformsTo/@ownedTags.0" name="conformsTo"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.&#xD;&#xA;result = false*/"
            object="#//@packages.0/Type/conformsTo"/>
        <ownedParameter name="other" type="#//@packages.0/Type/conformsTo/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Association/@ownedTags.0"
        name="Association" superType="#//@packages.0/Association/@containedType.0 #//@packages.0/Association/@containedType.1">
      <ownedTags value="/**An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.*/"
          object="#//@packages.0/Association"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Relationship"/>
      <ownedAttribute tag="#//@packages.0/Association/ownedEnd/@ownedTags.0" name="ownedEnd"
          type="#//@packages.0/Association/ownedEnd/@containedType.0" isOrdered="true"
          upper="-1" opposite="#//@packages.0/Property/owningAssociation" isComposite="true">
        <ownedTags value="/**The ends that are owned by the association itself.*/"
            object="#//@packages.0/Association/ownedEnd"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Association/memberEnd/@ownedTags.0" name="memberEnd"
          type="#//@packages.0/Association/memberEnd/@containedType.0" isOrdered="true"
          lower="2" upper="-1" opposite="#//@packages.0/Property/association">
        <ownedTags value="/**Each end represents participation of instances of the classifier connected to the end in links of the association.*/"
            object="#//@packages.0/Association/memberEnd"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Association/isDerived/@ownedTags.0" name="isDerived"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether the association is derived from other model elements such as other associations or constraints.*/"
            object="#//@packages.0/Association/isDerived"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Association/endType/@ownedTags.0" name="endType"
          type="#//@packages.0/Association/endType/@containedType.0" isOrdered="true"
          lower="1" upper="-1" isDerived="true">
        <ownedTags value="/**References the classifiers that are used as types of the ends of the association.*/"
            object="#//@packages.0/Association/endType"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Association/endType/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Association/endType/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Association/endType/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Association/endType/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Association/navigableOwnedEnd/@ownedTags.0"
          name="navigableOwnedEnd" type="#//@packages.0/Association/navigableOwnedEnd/@containedType.0"
          upper="-1">
        <ownedTags value="/**The navigable ends that are owned by the association itself.*/"
            object="#//@packages.0/Association/navigableOwnedEnd"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Association/specialized_end_number/@ownedTags.0"
          name="specialized_end_number" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An association specializing another association has the same number of ends as the other association.&#xD;&#xA;self.parents()->forAll(p | p.memberEnd.size() = self.memberEnd.size())*/"
            object="#//@packages.0/Association/specialized_end_number"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Association/specialized_end_types/@ownedTags.0"
          name="specialized_end_types" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**When an association specializes another association, every end of the specific association corresponds to an end of the general association, and the specific end reaches the same type or a subtype of the more general end.&#xD;&#xA;true*/"
            object="#//@packages.0/Association/specialized_end_types"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Association/binary_associations/@ownedTags.0"
          name="binary_associations" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Only binary associations can be aggregations.&#xD;&#xA;self.memberEnd->exists(aggregation &lt;> Aggregation::none) implies self.memberEnd->size() = 2*/"
            object="#//@packages.0/Association/binary_associations"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Association/association_ends/@ownedTags.0"
          name="association_ends" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Association ends of associations with more than two ends must be owned by the association.&#xD;&#xA;if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)*/"
            object="#//@packages.0/Association/association_ends"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Association/isBinary/@ownedTags.0" name="isBinary"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether this association is a binary association, i.e. whether it has exactly two member ends.*/"
            object="#//@packages.0/Association/isBinary"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Association/getEndTypes/@ownedTags.0" name="getEndTypes"
          type="#//@packages.0/Association/getEndTypes/@containedType.0" isOrdered="true"
          upper="-1" isAbstract="true">
        <ownedTags value="/**endType is derived from the types of the member ends.&#xD;&#xA;result = self.memberEnd->collect(e | e.type)*/"
            object="#//@packages.0/Association/getEndTypes"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Classifier/@ownedTags.0"
        name="Classifier" isAbstract="true" superType="#//@packages.0/Classifier/@containedType.0 #//@packages.0/Classifier/@containedType.1 #//@packages.0/Classifier/@containedType.2 #//@packages.0/Classifier/@containedType.3">
      <ownedTags value="/**A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.&#xD;&#xA;A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.&#xD;&#xA;A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.&#xD;&#xA;Classifier is defined to be a kind of templateable element so that a classifier can be parameterized. It is also defined to be a kind of parameterable element so that a classifier can be a formal template parameter.*/"
          object="#//@packages.0/Classifier"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateableElement"/>
      <ownedAttribute tag="#//@packages.0/Classifier/isAbstract/@ownedTags.0" name="isAbstract"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.&#xD;&#xA;*/"
            object="#//@packages.0/Classifier/isAbstract"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/generalization/@ownedTags.0"
          name="generalization" type="#//@packages.0/Classifier/generalization/@containedType.0"
          upper="-1" opposite="#//@packages.0/Generalization/specific" isComposite="true">
        <ownedTags value="/**Specifies the Generalization relationships for this Classifier. These Generalizations navigaten to more general classifiers in the generalization hierarchy.*/"
            object="#//@packages.0/Classifier/generalization"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Generalization"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/powertypeExtent/@ownedTags.0"
          name="powertypeExtent" type="#//@packages.0/Classifier/powertypeExtent/@containedType.0"
          upper="-1" opposite="#//@packages.0/GeneralizationSet/powertype">
        <ownedTags value="/**Designates the GeneralizationSet of which the associated Classifier is a power type.*/"
            object="#//@packages.0/Classifier/powertypeExtent"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/GeneralizationSet"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/feature/@ownedTags.0" name="feature"
          type="#//@packages.0/Classifier/feature/@containedType.0" upper="-1" opposite="#//@packages.0/Feature/featuringClassifier"
          isDerived="true">
        <ownedTags value="/**Note that there may be members of the Classifier that are of the type Feature but are not included in this association, e.g. inherited features.&#xD;&#xA;Specifies each feature defined in the classifier.*/"
            object="#//@packages.0/Classifier/feature"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Feature"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Classifier/feature/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Classifier/feature/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Classifier/feature/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Classifier/feature/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/inheritedMember/@ownedTags.0"
          name="inheritedMember" type="#//@packages.0/Classifier/inheritedMember/@containedType.0"
          upper="-1" isDerived="true">
        <ownedTags value="/**Specifies all elements inherited by this classifier from the general classifiers.*/"
            object="#//@packages.0/Classifier/inheritedMember"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Classifier/inheritedMember/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Classifier/inheritedMember/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Classifier/inheritedMember/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Classifier/inheritedMember/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/redefinedClassifier/@ownedTags.0"
          name="redefinedClassifier" type="#//@packages.0/Classifier/redefinedClassifier/@containedType.0"
          upper="-1">
        <ownedTags value="/**References the Classifiers that are redefined by this Classifier.*/"
            object="#//@packages.0/Classifier/redefinedClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/general/@ownedTags.0" name="general"
          type="#//@packages.0/Classifier/general/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**References the general classifier in the Generalization relationship.&#xD;&#xA;Specifies the general Classifiers for this Classifier.*/"
            object="#//@packages.0/Classifier/general"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Classifier/general/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Classifier/general/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Classifier/general/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Classifier/general/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/substitution/@ownedTags.0" name="substitution"
          type="#//@packages.0/Classifier/substitution/@containedType.0" upper="-1"
          opposite="#//@packages.0/Substitution/substitutingClassifier" isComposite="true">
        <ownedTags value="/**References the substitutions that are owned by this Classifier.*/"
            object="#//@packages.0/Classifier/substitution"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Substitution"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/attribute/@ownedTags.0" name="attribute"
          type="#//@packages.0/Classifier/attribute/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**Refers to all of the Properties that are direct (i.e. not inherited or imported) attributes of the classifier.*/"
            object="#//@packages.0/Classifier/attribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Classifier/attribute/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Classifier/attribute/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Classifier/attribute/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Classifier/attribute/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/representation/@ownedTags.0"
          name="representation" type="#//@packages.0/Classifier/representation/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**References a collaboration use which indicates the collaboration that represents this classifier.*/"
            object="#//@packages.0/Classifier/representation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/CollaborationUse"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/collaborationUse/@ownedTags.0"
          name="collaborationUse" type="#//@packages.0/Classifier/collaborationUse/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**References the collaboration uses owned by the classifier.*/"
            object="#//@packages.0/Classifier/collaborationUse"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/CollaborationUse"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/ownedUseCase/@ownedTags.0" name="ownedUseCase"
          type="#//@packages.0/Classifier/ownedUseCase/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**References the use cases owned by this classifier.*/"
            object="#//@packages.0/Classifier/ownedUseCase"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/UseCase"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Classifier/useCase/@ownedTags.0" name="useCase"
          type="#//@packages.0/Classifier/useCase/@containedType.0" upper="-1" opposite="#//@packages.0/UseCase/subject">
        <ownedTags value="/**The set of use cases for which this Classifier is the subject.*/"
            object="#//@packages.0/Classifier/useCase"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/UseCase"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Classifier/no_cycles_in_generalization/@ownedTags.0"
          name="no_cycles_in_generalization" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.&#xD;&#xA;not self.allParents()->includes(self)*/"
            object="#//@packages.0/Classifier/no_cycles_in_generalization"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/generalization_hierarchies/@ownedTags.0"
          name="generalization_hierarchies" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.&#xD;&#xA;not self.allParents()->includes(self)*/"
            object="#//@packages.0/Classifier/generalization_hierarchies"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/specialize_type/@ownedTags.0"
          name="specialize_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A classifier may only specialize classifiers of a valid type.&#xD;&#xA;self.parents()->forAll(c | self.maySpecializeType(c))*/"
            object="#//@packages.0/Classifier/specialize_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/maps_to_generalization_set/@ownedTags.0"
          name="maps_to_generalization_set" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances also be its subclasses.&#xD;&#xA;true*/"
            object="#//@packages.0/Classifier/maps_to_generalization_set"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/getAllAttributes/@ownedTags.0"
          name="getAllAttributes" type="#//@packages.0/Classifier/getAllAttributes/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves all the attributes of this classifier, including those inherited from its parents.*/"
            object="#//@packages.0/Classifier/getAllAttributes"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/getOperations/@ownedTags.0" name="getOperations"
          type="#//@packages.0/Classifier/getOperations/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**Retrieves the operations of this classifier.*/" object="#//@packages.0/Classifier/getOperations"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/getAllOperations/@ownedTags.0"
          name="getAllOperations" type="#//@packages.0/Classifier/getAllOperations/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves all the operations of this classifier, including those inherited from its parents.*/"
            object="#//@packages.0/Classifier/getAllOperations"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/getOperation/@ownedTags.0" name="getOperation"
          type="#//@packages.0/Classifier/getOperation/@containedType.0" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the first operation with the specified name, parameter names, and parameter types from this classifier.*/"
            object="#//@packages.0/Classifier/getOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="parameterNames" type="#//@packages.0/String" upper="-1"/>
        <ownedParameter name="parameterTypes" type="#//@packages.0/Classifier/getOperation/@ownedParameter.2/@containedType.0"
            upper="-1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/op_getOperation/@ownedTags.0"
          name="op_getOperation" type="#//@packages.0/Classifier/op_getOperation/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the first operation with the specified name, parameter names, and parameter types from this classifier, ignoring case if indicated.*/"
            object="#//@packages.0/Classifier/op_getOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="parameterNames" type="#//@packages.0/String" upper="-1"/>
        <ownedParameter name="parameterTypes" type="#//@packages.0/Classifier/op_getOperation/@ownedParameter.2/@containedType.0"
            upper="-1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="ignoreCase" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/getUsedInterfaces/@ownedTags.0"
          name="getUsedInterfaces" type="#//@packages.0/Classifier/getUsedInterfaces/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the interfaces on which this classifier has a usage dependency.*/"
            object="#//@packages.0/Classifier/getUsedInterfaces"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/getAllUsedInterfaces/@ownedTags.0"
          name="getAllUsedInterfaces" type="#//@packages.0/Classifier/getAllUsedInterfaces/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves all the interfaces on which this classifier or any of its parents has a usage dependency.*/"
            object="#//@packages.0/Classifier/getAllUsedInterfaces"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/getGenerals/@ownedTags.0" name="getGenerals"
          type="#//@packages.0/Classifier/getGenerals/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**The general classifiers are the classifiers referenced by the generalization relationships.&#xD;&#xA;result = self.parents()*/"
            object="#//@packages.0/Classifier/getGenerals"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/getInheritedMembers/@ownedTags.0"
          name="getInheritedMembers" type="#//@packages.0/Classifier/getInheritedMembers/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**The inheritedMember association is derived by inheriting the inheritable members of the parents.&#xD;&#xA;result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))*/"
            object="#//@packages.0/Classifier/getInheritedMembers"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/allFeatures/@ownedTags.0" name="allFeatures"
          type="#//@packages.0/Classifier/allFeatures/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.&#xD;&#xA;result = member->select(oclIsKindOf(Feature))*/"
            object="#//@packages.0/Classifier/allFeatures"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Feature"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/parents/@ownedTags.0" name="parents"
          type="#//@packages.0/Classifier/parents/@containedType.0" upper="-1" isAbstract="true">
        <ownedTags value="/**The query parents() gives all of the immediate ancestors of a generalized Classifier.&#xD;&#xA;result = generalization.general*/"
            object="#//@packages.0/Classifier/parents"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/inheritableMembers/@ownedTags.0"
          name="inheritableMembers" type="#//@packages.0/Classifier/inheritableMembers/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.&#xD;&#xA;c.allParents()->includes(self)&#xD;&#xA;result = member->select(m | c.hasVisibilityOf(m))*/"
            object="#//@packages.0/Classifier/inheritableMembers"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        <ownedParameter name="c" type="#//@packages.0/Classifier/inheritableMembers/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/hasVisibilityOf/@ownedTags.0"
          name="hasVisibilityOf" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.&#xD;&#xA;self.allParents()->collect(c | c.member)->includes(n)&#xD;&#xA;result = if (self.inheritedMember->includes(n)) then (n.visibility &lt;> #private) else true*/"
            object="#//@packages.0/Classifier/hasVisibilityOf"/>
        <ownedParameter name="n" type="#//@packages.0/Classifier/hasVisibilityOf/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/conformsTo/@ownedTags.0" name="conformsTo"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true"
          superOperation="#//@packages.0/Type/conformsTo">
        <ownedTags value="/**The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.&#xD;&#xA;result = (self=other) or (self.allParents()->includes(other))*/"
            object="#//@packages.0/Classifier/conformsTo"/>
        <ownedParameter name="other" type="#//@packages.0/Classifier/conformsTo/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/inherit/@ownedTags.0" name="inherit"
          type="#//@packages.0/Classifier/inherit/@containedType.0" upper="-1" isAbstract="true">
        <ownedTags value="/**The inherit operation is overridden to exclude redefined properties.&#xD;&#xA;The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.&#xD;&#xA;result = inhs*/"
            object="#//@packages.0/Classifier/inherit"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        <ownedParameter name="inhs" type="#//@packages.0/Classifier/inherit/@ownedParameter.0/@containedType.0"
            upper="-1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/maySpecializeType/@ownedTags.0"
          name="maySpecializeType" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.&#xD;&#xA;result = self.oclIsKindOf(c.oclType)*/"
            object="#//@packages.0/Classifier/maySpecializeType"/>
        <ownedParameter name="c" type="#//@packages.0/Classifier/maySpecializeType/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Classifier/allParents/@ownedTags.0" name="allParents"
          type="#//@packages.0/Classifier/allParents/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.&#xD;&#xA;result = self.parents()->union(self.parents()->collect(p | p.allParents())*/"
            object="#//@packages.0/Classifier/allParents"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/RedefinableElement/@ownedTags.0"
        name="RedefinableElement" isAbstract="true" superType="#//@packages.0/RedefinableElement/@containedType.0">
      <ownedTags value="/**A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.*/"
          object="#//@packages.0/RedefinableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/RedefinableElement/isLeaf/@ownedTags.0"
          name="isLeaf" type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1"
          isComposite="true">
        <ownedTags value="/**Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.*/"
            object="#//@packages.0/RedefinableElement/isLeaf"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/RedefinableElement/redefinedElement/@ownedTags.0"
          name="redefinedElement" type="#//@packages.0/RedefinableElement/redefinedElement/@containedType.0"
          upper="-1" isDerived="true">
        <ownedTags value="/**The redefinable element that is being redefined by this element.*/"
            object="#//@packages.0/RedefinableElement/redefinedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/RedefinableElement/redefinedElement/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/RedefinableElement/redefinedElement/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/RedefinableElement/redefinedElement/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/RedefinableElement/redefinedElement/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/RedefinableElement/redefinitionContext/@ownedTags.0"
          name="redefinitionContext" type="#//@packages.0/RedefinableElement/redefinitionContext/@containedType.0"
          upper="-1" isDerived="true">
        <ownedTags value="/**References the contexts that this element may be redefined from.*/"
            object="#//@packages.0/RedefinableElement/redefinitionContext"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/RedefinableElement/redefinitionContext/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/RedefinableElement/redefinitionContext/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/RedefinableElement/redefinitionContext/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/RedefinableElement/redefinitionContext/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/RedefinableElement/redefinition_context_valid/@ownedTags.0"
          name="redefinition_context_valid" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element.&#xD;&#xA;self.redefinedElement->forAll(e | self.isRedefinitionContextValid(e))*/"
            object="#//@packages.0/RedefinableElement/redefinition_context_valid"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/RedefinableElement/redefinition_consistent/@ownedTags.0"
          name="redefinition_consistent" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A redefining element must be consistent with each redefined element.&#xD;&#xA;self.redefinedElement->forAll(re | re.isConsistentWith(self))*/"
            object="#//@packages.0/RedefinableElement/redefinition_consistent"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/RedefinableElement/isConsistentWith/@ownedTags.0"
          name="isConsistentWith" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.&#xD;&#xA;redefinee.isRedefinitionContextValid(self)&#xD;&#xA;result = false*/"
            object="#//@packages.0/RedefinableElement/isConsistentWith"/>
        <ownedParameter name="redefinee" type="#//@packages.0/RedefinableElement/isConsistentWith/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/RedefinableElement/isRedefinitionContextValid/@ownedTags.0"
          name="isRedefinitionContextValid" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.&#xD;&#xA;result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))*/"
            object="#//@packages.0/RedefinableElement/isRedefinitionContextValid"/>
        <ownedParameter name="redefined" type="#//@packages.0/RedefinableElement/isRedefinitionContextValid/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
        </ownedParameter>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TemplateableElement/@ownedTags.0"
        name="TemplateableElement" isAbstract="true" superType="#//@packages.0/TemplateableElement/@containedType.0">
      <ownedTags value="/**A templateable element is an element that can optionally be defined as a template and bound to other templates.*/"
          object="#//@packages.0/TemplateableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/TemplateableElement/templateBinding/@ownedTags.0"
          name="templateBinding" type="#//@packages.0/TemplateableElement/templateBinding/@containedType.0"
          upper="-1" opposite="#//@packages.0/TemplateBinding/boundElement" isComposite="true">
        <ownedTags value="/**The optional bindings from this element to templates.*/"
            object="#//@packages.0/TemplateableElement/templateBinding"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateBinding"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateableElement/ownedTemplateSignature/@ownedTags.0"
          name="ownedTemplateSignature" type="#//@packages.0/TemplateableElement/ownedTemplateSignature/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/TemplateSignature/template"
          isComposite="true">
        <ownedTags value="/**The optional template signature specifying the formal template parameters.*/"
            object="#//@packages.0/TemplateableElement/ownedTemplateSignature"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateSignature"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/TemplateableElement/parameterableElements/@ownedTags.0"
          name="parameterableElements" type="#//@packages.0/TemplateableElement/parameterableElements/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.&#xD;&#xA;result = allOwnedElements->select(oclIsKindOf(ParameterableElement))*/"
            object="#//@packages.0/TemplateableElement/parameterableElements"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/TemplateableElement/isTemplate/@ownedTags.0"
          name="isTemplate" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query isTemplate() returns whether this templateable element is actually a template.&#xD;&#xA;result = ownedTemplateSignature->notEmpty()*/"
            object="#//@packages.0/TemplateableElement/isTemplate"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TemplateBinding/@ownedTags.0"
        name="TemplateBinding" superType="#//@packages.0/TemplateBinding/@containedType.0">
      <ownedTags value="/**A template binding represents a relationship between a templateable element and a template. A template binding specifies the substitutions of actual parameters for the formal parameters of the template.*/"
          object="#//@packages.0/TemplateBinding"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/TemplateBinding/signature/@ownedTags.0"
          name="signature" type="#//@packages.0/TemplateBinding/signature/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The template signature for the template that is the target of the binding.*/"
            object="#//@packages.0/TemplateBinding/signature"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateSignature"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateBinding/parameterSubstitution/@ownedTags.0"
          name="parameterSubstitution" type="#//@packages.0/TemplateBinding/parameterSubstitution/@containedType.0"
          upper="-1" opposite="#//@packages.0/TemplateParameterSubstitution/templateBinding"
          isComposite="true">
        <ownedTags value="/**The parameter substitutions owned by this template binding.*/"
            object="#//@packages.0/TemplateBinding/parameterSubstitution"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameterSubstitution"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateBinding/boundElement/@ownedTags.0"
          name="boundElement" type="#//@packages.0/TemplateBinding/boundElement/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/TemplateableElement/templateBinding">
        <ownedTags value="/**The element that is bound by this binding.*/" object="#//@packages.0/TemplateBinding/boundElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateableElement"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/TemplateBinding/parameter_substitution_formal/@ownedTags.0"
          name="parameter_substitution_formal" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Each parameter substitution must refer to a formal template parameter of the target template signature.&#xD;&#xA;parameterSubstitution->forAll(b | template.parameter->includes(b.formal))*/"
            object="#//@packages.0/TemplateBinding/parameter_substitution_formal"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/TemplateBinding/one_parameter_substitution/@ownedTags.0"
          name="one_parameter_substitution" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A binding contains at most one parameter substitution for each formal template parameter of the target template signature.&#xD;&#xA;template.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() &lt;= 1)*/"
            object="#//@packages.0/TemplateBinding/one_parameter_substitution"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TemplateSignature/@ownedTags.0"
        name="TemplateSignature" superType="#//@packages.0/TemplateSignature/@containedType.0">
      <ownedTags value="/**A template signature bundles the set of formal template parameters for a templated element.*/"
          object="#//@packages.0/TemplateSignature"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/TemplateSignature/parameter/@ownedTags.0"
          name="parameter" type="#//@packages.0/TemplateSignature/parameter/@containedType.0"
          isOrdered="true" lower="1" upper="-1">
        <ownedTags value="/**The ordered set of all formal template parameters for this template signature.*/"
            object="#//@packages.0/TemplateSignature/parameter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateSignature/ownedParameter/@ownedTags.0"
          name="ownedParameter" type="#//@packages.0/TemplateSignature/ownedParameter/@containedType.0"
          isOrdered="true" upper="-1" opposite="#//@packages.0/TemplateParameter/signature"
          isComposite="true">
        <ownedTags value="/**The formal template parameters that are owned by this template signature.*/"
            object="#//@packages.0/TemplateSignature/ownedParameter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateSignature/template/@ownedTags.0"
          name="template" type="#//@packages.0/TemplateSignature/template/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/TemplateableElement/ownedTemplateSignature">
        <ownedTags value="/**The element that owns this template signature.*/" object="#//@packages.0/TemplateSignature/template"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateableElement"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/TemplateSignature/own_elements/@ownedTags.0"
          name="own_elements" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Parameters must own the elements they parameter or those elements must be owned by the element being templated.&#xD;&#xA;templatedElement.ownedElement->includesAll(parameter.parameteredElement - parameter.ownedParameteredElement)*/"
            object="#//@packages.0/TemplateSignature/own_elements"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TemplateParameter/@ownedTags.0"
        name="TemplateParameter" superType="#//@packages.0/TemplateParameter/@containedType.0">
      <ownedTags value="/**A template parameter exposes a parameterable element as a formal template parameter of a template.*/"
          object="#//@packages.0/TemplateParameter"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/TemplateParameter/signature/@ownedTags.0"
          name="signature" type="#//@packages.0/TemplateParameter/signature/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/TemplateSignature/ownedParameter">
        <ownedTags value="/**The template signature that owns this template parameter.*/"
            object="#//@packages.0/TemplateParameter/signature"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateSignature"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateParameter/parameteredElement/@ownedTags.0"
          name="parameteredElement" type="#//@packages.0/TemplateParameter/parameteredElement/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/ParameterableElement/templateParameter">
        <ownedTags value="/**The element exposed by this template parameter.*/" object="#//@packages.0/TemplateParameter/parameteredElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateParameter/ownedParameteredElement/@ownedTags.0"
          name="ownedParameteredElement" type="#//@packages.0/TemplateParameter/ownedParameteredElement/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/ParameterableElement/owningTemplateParameter"
          isComposite="true">
        <ownedTags value="/**The element that is owned by this template parameter.*/"
            object="#//@packages.0/TemplateParameter/ownedParameteredElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateParameter/default/@ownedTags.0"
          name="default" type="#//@packages.0/TemplateParameter/default/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**The element that is the default for this formal template parameter.*/"
            object="#//@packages.0/TemplateParameter/default"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateParameter/ownedDefault/@ownedTags.0"
          name="ownedDefault" type="#//@packages.0/TemplateParameter/ownedDefault/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The element that is owned by this template parameter for the purpose of providing a default.*/"
            object="#//@packages.0/TemplateParameter/ownedDefault"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/TemplateParameter/must_be_compatible/@ownedTags.0"
          name="must_be_compatible" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The default must be compatible with the formal template parameter.&#xD;&#xA;default->notEmpty() implies default->isCompatibleWith(parameteredElement)*/"
            object="#//@packages.0/TemplateParameter/must_be_compatible"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ParameterableElement/@ownedTags.0"
        name="ParameterableElement" isAbstract="true" superType="#//@packages.0/ParameterableElement/@containedType.0">
      <ownedTags value="/**A parameterable element is an element that can be exposed as a formal template parameter for a template, or specified as an actual parameter in a binding of a template.*/"
          object="#//@packages.0/ParameterableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/ParameterableElement/owningTemplateParameter/@ownedTags.0"
          name="owningTemplateParameter" type="#//@packages.0/ParameterableElement/owningTemplateParameter/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/TemplateParameter/ownedParameteredElement">
        <ownedTags value="/**The formal template parameter that owns this element.*/"
            object="#//@packages.0/ParameterableElement/owningTemplateParameter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ParameterableElement/templateParameter/@ownedTags.0"
          name="templateParameter" type="#//@packages.0/ParameterableElement/templateParameter/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/TemplateParameter/parameteredElement">
        <ownedTags value="/**The template parameter that exposes this element as a formal parameter.*/"
            object="#//@packages.0/ParameterableElement/templateParameter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ParameterableElement/isCompatibleWith/@ownedTags.0"
          name="isCompatibleWith" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. Subclasses should override this operation to specify different compatibility constraints.&#xD;&#xA;result = p->oclIsKindOf(self.oclType)*/"
            object="#//@packages.0/ParameterableElement/isCompatibleWith"/>
        <ownedParameter name="p" type="#//@packages.0/ParameterableElement/isCompatibleWith/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ParameterableElement/isTemplateParameter/@ownedTags.0"
          name="isTemplateParameter" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.&#xD;&#xA;result = templateParameter->notEmpty()*/"
            object="#//@packages.0/ParameterableElement/isTemplateParameter"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TemplateParameterSubstitution/@ownedTags.0"
        name="TemplateParameterSubstitution" superType="#//@packages.0/TemplateParameterSubstitution/@containedType.0">
      <ownedTags value="/**A template parameter substitution relates the actual parameter(s) to a formal template parameter as part of a template binding.*/"
          object="#//@packages.0/TemplateParameterSubstitution"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/TemplateParameterSubstitution/formal/@ownedTags.0"
          name="formal" type="#//@packages.0/TemplateParameterSubstitution/formal/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The formal template parameter that is associated with this substitution.*/"
            object="#//@packages.0/TemplateParameterSubstitution/formal"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateParameterSubstitution/actual/@ownedTags.0"
          name="actual" type="#//@packages.0/TemplateParameterSubstitution/actual/@containedType.0"
          lower="1" upper="-1">
        <ownedTags value="/**The elements that are the actual parameters for this substitution.*/"
            object="#//@packages.0/TemplateParameterSubstitution/actual"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateParameterSubstitution/ownedActual/@ownedTags.0"
          name="ownedActual" type="#//@packages.0/TemplateParameterSubstitution/ownedActual/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**The actual parameters that are owned by this substitution.*/"
            object="#//@packages.0/TemplateParameterSubstitution/ownedActual"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TemplateParameterSubstitution/templateBinding/@ownedTags.0"
          name="templateBinding" type="#//@packages.0/TemplateParameterSubstitution/templateBinding/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/TemplateBinding/parameterSubstitution">
        <ownedTags value="/**The optional bindings from this element to templates.*/"
            object="#//@packages.0/TemplateParameterSubstitution/templateBinding"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateBinding"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/TemplateParameterSubstitution/must_be_compatible/@ownedTags.0"
          name="must_be_compatible" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The actual parameter must be compatible with the formal template parameter, e.g. the actual parameter for a class template parameter must be a class.&#xD;&#xA;actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))*/"
            object="#//@packages.0/TemplateParameterSubstitution/must_be_compatible"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Generalization/@ownedTags.0"
        name="Generalization" superType="#//@packages.0/Generalization/@containedType.0">
      <ownedTags value="/**A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.&#xD;&#xA;A generalization relates a specific classifier to a more general classifier, and is owned by the specific classifier.*/"
          object="#//@packages.0/Generalization"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/Generalization/isSubstitutable/@ownedTags.0"
          name="isSubstitutable" type="#//@packages.0/Boolean" isOrdered="true" upper="1"
          isComposite="true">
        <ownedTags value="/**Indicates whether the specific classifier can be used wherever the general classifier can be used. If true, the execution traces of the specific classifier will be a superset of the execution traces of the general classifier.*/"
            object="#//@packages.0/Generalization/isSubstitutable"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Generalization/general/@ownedTags.0" name="general"
          type="#//@packages.0/Generalization/general/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**References the general classifier in the Generalization relationship.*/"
            object="#//@packages.0/Generalization/general"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Generalization/generalizationSet/@ownedTags.0"
          name="generalizationSet" type="#//@packages.0/Generalization/generalizationSet/@containedType.0"
          upper="-1" opposite="#//@packages.0/GeneralizationSet/generalization">
        <ownedTags value="/**Designates a set in which instances of Generalization is considered members.*/"
            object="#//@packages.0/Generalization/generalizationSet"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/GeneralizationSet"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Generalization/specific/@ownedTags.0" name="specific"
          type="#//@packages.0/Generalization/specific/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/Classifier/generalization">
        <ownedTags value="/**References the specializing classifier in the Generalization relationship.*/"
            object="#//@packages.0/Generalization/specific"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Generalization/generalization_same_classifier/@ownedTags.0"
          name="generalization_same_classifier" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Every Generalization associated with a given GeneralizationSet must have the same general Classifier. That is, all Generalizations for a particular GeneralizationSet must have the same superclass.&#xD;&#xA;true*/"
            object="#//@packages.0/Generalization/generalization_same_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/GeneralizationSet/@ownedTags.0"
        name="GeneralizationSet" superType="#//@packages.0/GeneralizationSet/@containedType.0">
      <ownedTags value="/**A generalization set is a packageable element whose instances define collections of subsets of generalization relationships.*/"
          object="#//@packages.0/GeneralizationSet"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      <ownedAttribute tag="#//@packages.0/GeneralizationSet/isCovering/@ownedTags.0"
          name="isCovering" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet.*/"
            object="#//@packages.0/GeneralizationSet/isCovering"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/GeneralizationSet/isDisjoint/@ownedTags.0"
          name="isDisjoint" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty. For example, Person could have two Generalization relationships, each with the different specific Classifier: Manager or Staff. This would be disjoint because every instance of Person must either be a Manager or Staff. In contrast, Person could have two Generalization relationships involving two specific (and non-covering) Classifiers: Sales Person and Manager. This GeneralizationSet would not be disjoint because there are instances of Person which can be a Sales Person and a Manager.*/"
            object="#//@packages.0/GeneralizationSet/isDisjoint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/GeneralizationSet/powertype/@ownedTags.0"
          name="powertype" type="#//@packages.0/GeneralizationSet/powertype/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/Classifier/powertypeExtent">
        <ownedTags value="/**Designates the Classifier that is defined as the power type for the associated GeneralizationSet.*/"
            object="#//@packages.0/GeneralizationSet/powertype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/GeneralizationSet/generalization/@ownedTags.0"
          name="generalization" type="#//@packages.0/GeneralizationSet/generalization/@containedType.0"
          upper="-1" opposite="#//@packages.0/Generalization/generalizationSet">
        <ownedTags value="/**Designates the instances of Generalization which are members of a given GeneralizationSet.*/"
            object="#//@packages.0/GeneralizationSet/generalization"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Generalization"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/GeneralizationSet/generalization_same_classifier/@ownedTags.0"
          name="generalization_same_classifier" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.&#xD;&#xA;generalization->collect(g | g.general)->asSet()->size() &lt;= 1*/"
            object="#//@packages.0/GeneralizationSet/generalization_same_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/GeneralizationSet/maps_to_generalization_set/@ownedTags.0"
          name="maps_to_generalization_set" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances be its subclasses.&#xD;&#xA;true*/"
            object="#//@packages.0/GeneralizationSet/maps_to_generalization_set"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Feature/@ownedTags.0"
        name="Feature" isAbstract="true" superType="#//@packages.0/Feature/@containedType.0">
      <ownedTags value="/**A feature declares a behavioral or structural characteristic of instances of classifiers.*/"
          object="#//@packages.0/Feature"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
      <ownedAttribute tag="#//@packages.0/Feature/isStatic/@ownedTags.0" name="isStatic"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true).*/"
            object="#//@packages.0/Feature/isStatic"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Feature/featuringClassifier/@ownedTags.0"
          name="featuringClassifier" type="#//@packages.0/Feature/featuringClassifier/@containedType.0"
          upper="-1" opposite="#//@packages.0/Classifier/feature" isDerived="true">
        <ownedTags value="/**The Classifiers that have this Feature as a feature.*/"
            object="#//@packages.0/Feature/featuringClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Feature/featuringClassifier/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Feature/featuringClassifier/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Feature/featuringClassifier/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Feature/featuringClassifier/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Substitution/@ownedTags.0"
        name="Substitution" superType="#//@packages.0/Substitution/@containedType.0">
      <ownedTags value="/**A substitution is a relationship between two classifiers signifies that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.*/"
          object="#//@packages.0/Substitution"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Realization"/>
      <ownedAttribute tag="#//@packages.0/Substitution/contract/@ownedTags.0" name="contract"
          type="#//@packages.0/Substitution/contract/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The contract with which the substituting classifier complies.*/"
            object="#//@packages.0/Substitution/contract"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Substitution/substitutingClassifier/@ownedTags.0"
          name="substitutingClassifier" type="#//@packages.0/Substitution/substitutingClassifier/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/Classifier/substitution">
        <ownedTags value="/**Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.*/"
            object="#//@packages.0/Substitution/substitutingClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Realization/@ownedTags.0"
        name="Realization" superType="#//@packages.0/Realization/@containedType.0">
      <ownedTags value="/**Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.*/"
          object="#//@packages.0/Realization"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Abstraction"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Abstraction/@ownedTags.0"
        name="Abstraction" superType="#//@packages.0/Abstraction/@containedType.0">
      <ownedTags value="/**An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints.*/"
          object="#//@packages.0/Abstraction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Dependency"/>
      <ownedAttribute tag="#//@packages.0/Abstraction/mapping/@ownedTags.0" name="mapping"
          type="#//@packages.0/Abstraction/mapping/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**An composition of an Expression that states the abstraction relationship between the supplier and the client. In some cases, such as Derivation, it is usually formal and unidirectional; in other cases, such as Trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the elements is not specified.*/"
            object="#//@packages.0/Abstraction/mapping"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OpaqueExpression"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/OpaqueExpression/@ownedTags.0"
        name="OpaqueExpression" superType="#//@packages.0/OpaqueExpression/@containedType.0">
      <ownedTags value="/**An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.&#xD;&#xA;Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result.*/"
          object="#//@packages.0/OpaqueExpression"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      <ownedAttribute tag="#//@packages.0/OpaqueExpression/body/@ownedTags.0" name="body"
          type="#//@packages.0/String" isOrdered="true" isUnique="false" upper="-1"
          isComposite="true">
        <ownedTags value="/**The text of the expression, possibly in multiple languages.*/"
            object="#//@packages.0/OpaqueExpression/body"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/OpaqueExpression/language/@ownedTags.0"
          name="language" type="#//@packages.0/String" isOrdered="true" upper="-1"
          isComposite="true">
        <ownedTags value="/**Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.*/"
            object="#//@packages.0/OpaqueExpression/language"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/OpaqueExpression/result/@ownedTags.0" name="result"
          type="#//@packages.0/OpaqueExpression/result/@containedType.0" isOrdered="true"
          upper="1" isDerived="true">
        <ownedTags value="/**Restricts an opaque expression to return exactly one return result. When the invocation of the opaque expression completes, a single set of values is returned to its owner. This association is derived from the single return result parameter of the associated behavior.*/"
            object="#//@packages.0/OpaqueExpression/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Parameter"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/OpaqueExpression/result/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/OpaqueExpression/result/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/OpaqueExpression/result/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/OpaqueExpression/result/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/OpaqueExpression/behavior/@ownedTags.0"
          name="behavior" type="#//@packages.0/OpaqueExpression/behavior/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**Specifies the behavior of the opaque expression.*/" object="#//@packages.0/OpaqueExpression/behavior"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/OpaqueExpression/language_body_size/@ownedTags.0"
          name="language_body_size" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If the language attribute is not empty, then the size of the body and language arrays must be the same.&#xD;&#xA;language->notEmpty() implies (body->size() = language->size())*/"
            object="#//@packages.0/OpaqueExpression/language_body_size"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/OpaqueExpression/only_return_result_parameters/@ownedTags.0"
          name="only_return_result_parameters" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The behavior may only have return result parameters.&#xD;&#xA;self.behavior.notEmpty() implies&#xD;&#xA;  self.behavior.ownedParameters->select(p | p.direction&lt;>#return)->isEmpty()*/"
            object="#//@packages.0/OpaqueExpression/only_return_result_parameters"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/OpaqueExpression/one_return_result_parameter/@ownedTags.0"
          name="one_return_result_parameter" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The behavior must have exactly one return result parameter.&#xD;&#xA;self.behavior.notEmpty() implies&#xD;&#xA;  self.behavior.ownedParameter->select(p | p.direction=#return)->size() = 1*/"
            object="#//@packages.0/OpaqueExpression/one_return_result_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getResult" type="#//@packages.0/OpaqueExpression/getResult/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Parameter"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/OpaqueExpression/value/@ownedTags.0" name="value"
          type="#//@packages.0/Integer" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query value() gives an integer value for an expression intended to produce one.&#xD;&#xA;self.isIntegral()&#xD;&#xA;true*/"
            object="#//@packages.0/OpaqueExpression/value"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/OpaqueExpression/isIntegral/@ownedTags.0"
          name="isIntegral" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query isIntegral() tells whether an expression is intended to produce an integer.&#xD;&#xA;result = false*/"
            object="#//@packages.0/OpaqueExpression/isIntegral"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/OpaqueExpression/isPositive/@ownedTags.0"
          name="isPositive" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query isPositive() tells whether an integer expression has a positive value.&#xD;&#xA;self.isIntegral()&#xD;&#xA;result = false*/"
            object="#//@packages.0/OpaqueExpression/isPositive"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/OpaqueExpression/isNonNegative/@ownedTags.0"
          name="isNonNegative" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query isNonNegative() tells whether an integer expression has a non-negative value.&#xD;&#xA;self.isIntegral()&#xD;&#xA;result = false*/"
            object="#//@packages.0/OpaqueExpression/isNonNegative"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Parameter/@ownedTags.0"
        name="Parameter" superType="#//@packages.0/Parameter/@containedType.0 #//@packages.0/Parameter/@containedType.1">
      <ownedTags value="/**A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.&#xD;&#xA;Parameters are allowed to be treated as connectable elements.&#xD;&#xA;Parameters have support for streaming, exceptions, and parameter sets.*/"
          object="#//@packages.0/Parameter"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MultiplicityElement"/>
      <ownedAttribute tag="#//@packages.0/Parameter/parameterSet/@ownedTags.0" name="parameterSet"
          type="#//@packages.0/Parameter/parameterSet/@containedType.0" upper="-1"
          opposite="#//@packages.0/ParameterSet/parameter">
        <ownedTags value="/**The parameter sets containing the parameter. See ParameterSet.*/"
            object="#//@packages.0/Parameter/parameterSet"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterSet"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Parameter/operation/@ownedTags.0" name="operation"
          type="#//@packages.0/Parameter/operation/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**References the Operation owning this parameter.*/" object="#//@packages.0/Parameter/operation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Parameter/direction/@ownedTags.0" name="direction"
          type="#//@packages.0/ParameterDirectionKind" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Indicates whether a parameter is being sent into or out of a behavioral element.*/"
            object="#//@packages.0/Parameter/direction"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Parameter/default/@ownedTags.0" name="default"
          type="#//@packages.0/String" isOrdered="true" upper="1" isDerived="true">
        <ownedTags value="/**Specifies a String that represents a value to be used when no argument is supplied for the Parameter.*/"
            object="#//@packages.0/Parameter/default"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Parameter/default/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Parameter/default/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Parameter/default/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Parameter/default/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Parameter/defaultValue/@ownedTags.0" name="defaultValue"
          type="#//@packages.0/Parameter/defaultValue/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.*/"
            object="#//@packages.0/Parameter/defaultValue"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Parameter/isException/@ownedTags.0" name="isException"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Tells whether an output parameter may emit a value to the exclusion of the other outputs.*/"
            object="#//@packages.0/Parameter/isException"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Parameter/isStream/@ownedTags.0" name="isStream"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Tells whether an input parameter may accept values while its behavior is executing, or whether an output parameter post values while the behavior is executing.*/"
            object="#//@packages.0/Parameter/isStream"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Parameter/effect/@ownedTags.0" name="effect"
          type="#//@packages.0/ParameterEffectKind" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**Specifies the effect that the owner of the parameter has on values passed in or out of the parameter.*/"
            object="#//@packages.0/Parameter/effect"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Parameter/connector_end/@ownedTags.0" name="connector_end"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A parameter may only be associated with a connector end within the context of a collaboration.&#xD;&#xA;self.end.notEmpty() implies self.collaboration.notEmpty()*/"
            object="#//@packages.0/Parameter/connector_end"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Parameter/stream_and_exception/@ownedTags.0"
          name="stream_and_exception" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A parameter cannot be a stream and exception at the same time.&#xD;&#xA;true*/"
            object="#//@packages.0/Parameter/stream_and_exception"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Parameter/not_exception/@ownedTags.0" name="not_exception"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An input parameter cannot be an exception.&#xD;&#xA;true*/"
            object="#//@packages.0/Parameter/not_exception"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Parameter/reentrant_behaviors/@ownedTags.0"
          name="reentrant_behaviors" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Reentrant behaviors cannot have stream parameters.&#xD;&#xA;true*/"
            object="#//@packages.0/Parameter/reentrant_behaviors"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Parameter/in_and_out/@ownedTags.0" name="in_and_out"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Only in and inout parameters may have a delete effect. Only out, inout, and return parameters may have a create effect.&#xD;&#xA;true*/"
            object="#//@packages.0/Parameter/in_and_out"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getDefault" type="#//@packages.0/String" isOrdered="true"
          upper="1" isAbstract="true"/>
      <ownedOperation name="isSetDefault" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true"/>
      <ownedOperation name="setDefault" type="#//@packages.0/Parameter/setDefault/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newDefault" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation name="unsetDefault" type="#//@packages.0/Parameter/unsetDefault/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Parameter/setBooleanDefaultValue/@ownedTags.0"
          name="setBooleanDefaultValue" type="#//@packages.0/Parameter/setBooleanDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this parameter to the specified Boolean value.*/"
            object="#//@packages.0/Parameter/setBooleanDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="value" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Parameter/setIntegerDefaultValue/@ownedTags.0"
          name="setIntegerDefaultValue" type="#//@packages.0/Parameter/setIntegerDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this parameter to the specified integer value.*/"
            object="#//@packages.0/Parameter/setIntegerDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="value" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Parameter/setStringDefaultValue/@ownedTags.0"
          name="setStringDefaultValue" type="#//@packages.0/Parameter/setStringDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this parameter to the specified string value.*/"
            object="#//@packages.0/Parameter/setStringDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="value" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Parameter/setUnlimitedNaturalDefaultValue/@ownedTags.0"
          name="setUnlimitedNaturalDefaultValue" type="#//@packages.0/Parameter/setUnlimitedNaturalDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this parameter to the specified unlimited natural value.*/"
            object="#//@packages.0/Parameter/setUnlimitedNaturalDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="value" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Parameter/setNullDefaultValue/@ownedTags.0"
          name="setNullDefaultValue" type="#//@packages.0/Parameter/setNullDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this parameter to the null value.*/"
            object="#//@packages.0/Parameter/setNullDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/MultiplicityElement/@ownedTags.0"
        name="MultiplicityElement" isAbstract="true" superType="#//@packages.0/MultiplicityElement/@containedType.0">
      <ownedTags value="/**A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.*/"
          object="#//@packages.0/MultiplicityElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/MultiplicityElement/isOrdered/@ownedTags.0"
          name="isOrdered" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.*/"
            object="#//@packages.0/MultiplicityElement/isOrdered"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/MultiplicityElement/isUnique/@ownedTags.0"
          name="isUnique" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.*/"
            object="#//@packages.0/MultiplicityElement/isUnique"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/MultiplicityElement/upper/@ownedTags.0"
          name="upper" type="#//@packages.0/UnlimitedNatural" isOrdered="true" upper="1"
          isDerived="true">
        <ownedTags value="/**Specifies the upper bound of the multiplicity interval.*/"
            object="#//@packages.0/MultiplicityElement/upper"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/MultiplicityElement/upper/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/MultiplicityElement/upper/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/MultiplicityElement/upper/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/MultiplicityElement/upper/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/MultiplicityElement/lower/@ownedTags.0"
          name="lower" type="#//@packages.0/Integer" isOrdered="true" upper="1" isDerived="true">
        <ownedTags value="/**Specifies the lower bound of the multiplicity interval.*/"
            object="#//@packages.0/MultiplicityElement/lower"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/MultiplicityElement/lower/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/MultiplicityElement/lower/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/MultiplicityElement/lower/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/MultiplicityElement/lower/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/MultiplicityElement/upperValue/@ownedTags.0"
          name="upperValue" type="#//@packages.0/MultiplicityElement/upperValue/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The specification of the upper bound for this multiplicity.*/"
            object="#//@packages.0/MultiplicityElement/upperValue"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/MultiplicityElement/lowerValue/@ownedTags.0"
          name="lowerValue" type="#//@packages.0/MultiplicityElement/lowerValue/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The specification of the lower bound for this multiplicity.*/"
            object="#//@packages.0/MultiplicityElement/lowerValue"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/upper_gt_0/@ownedTags.0"
          name="upper_gt_0" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A multiplicity must define at least one valid cardinality that is greater than zero.&#xD;&#xA;upperBound()->notEmpty() implies upperBound() > 0*/"
            object="#//@packages.0/MultiplicityElement/upper_gt_0"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/lower_ge_0/@ownedTags.0"
          name="lower_ge_0" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The lower bound must be a non-negative integer literal.&#xD;&#xA;lowerBound()->notEmpty() implies lowerBound() >= 0*/"
            object="#//@packages.0/MultiplicityElement/lower_ge_0"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/upper_ge_lower/@ownedTags.0"
          name="upper_ge_lower" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The upper bound must be greater than or equal to the lower bound.&#xD;&#xA;(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()*/"
            object="#//@packages.0/MultiplicityElement/upper_ge_lower"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/value_specification_no_side_effects/@ownedTags.0"
          name="value_specification_no_side_effects" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If a non-literal ValueSpecification is used for the lower or upper bound, then evaluating that specification must not have side effects.&#xD;&#xA;true*/"
            object="#//@packages.0/MultiplicityElement/value_specification_no_side_effects"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/value_specification_constant/@ownedTags.0"
          name="value_specification_constant" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If a non-literal ValueSpecification is used for the lower or upper bound, then that specification must be a constant expression.&#xD;&#xA;true*/"
            object="#//@packages.0/MultiplicityElement/value_specification_constant"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="setLower" type="#//@packages.0/MultiplicityElement/setLower/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newLower" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation name="setUpper" type="#//@packages.0/MultiplicityElement/setUpper/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newUpper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/getLower/@ownedTags.0"
          name="getLower" type="#//@packages.0/Integer" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The derived lower attribute must equal the lowerBound.&#xD;&#xA;result = lowerBound()*/"
            object="#//@packages.0/MultiplicityElement/getLower"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/getUpper/@ownedTags.0"
          name="getUpper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The derived upper attribute must equal the upperBound.&#xD;&#xA;result = upperBound()*/"
            object="#//@packages.0/MultiplicityElement/getUpper"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/isMultivalued/@ownedTags.0"
          name="isMultivalued" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.&#xD;&#xA;upperBound()->notEmpty()&#xD;&#xA;result = upperBound() > 1*/"
            object="#//@packages.0/MultiplicityElement/isMultivalued"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/includesCardinality/@ownedTags.0"
          name="includesCardinality" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.&#xD;&#xA;upperBound()->notEmpty() and lowerBound()->notEmpty()&#xD;&#xA;result = (lowerBound() &lt;= C) and (upperBound() >= C)*/"
            object="#//@packages.0/MultiplicityElement/includesCardinality"/>
        <ownedParameter name="C" type="#//@packages.0/Integer" isOrdered="true" lower="1"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/includesMultiplicity/@ownedTags.0"
          name="includesMultiplicity" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.&#xD;&#xA;self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()&#xD;&#xA;result = (self.lowerBound() &lt;= M.lowerBound()) and (self.upperBound() >= M.upperBound())*/"
            object="#//@packages.0/MultiplicityElement/includesMultiplicity"/>
        <ownedParameter name="M" type="#//@packages.0/MultiplicityElement/includesMultiplicity/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MultiplicityElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/lowerBound/@ownedTags.0"
          name="lowerBound" type="#//@packages.0/Integer" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The query lowerBound() returns the lower bound of the multiplicity as an integer.&#xD;&#xA;result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif*/"
            object="#//@packages.0/MultiplicityElement/lowerBound"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/upperBound/@ownedTags.0"
          name="upperBound" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.&#xD;&#xA;result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif*/"
            object="#//@packages.0/MultiplicityElement/upperBound"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/compatibleWith/@ownedTags.0"
          name="compatibleWith" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**The operation compatibleWith takes another multiplicity as input. It checks if one multiplicity is compatible with another.&#xD;&#xA;result = Integer.allInstances()->forAll(i : Integer | self.includesCardinality(i) implies other.includesCardinality(i))*/"
            object="#//@packages.0/MultiplicityElement/compatibleWith"/>
        <ownedParameter name="other" type="#//@packages.0/MultiplicityElement/compatibleWith/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MultiplicityElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MultiplicityElement/is/@ownedTags.0" name="is"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The operation is determines if the upper and lower bound of the ranges are the ones given.&#xD;&#xA;result = (lowerbound = self.lowerbound and upperbound = self.upperbound)*/"
            object="#//@packages.0/MultiplicityElement/is"/>
        <ownedParameter name="lowerbound" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="upperbound" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ConnectableElement/@ownedTags.0"
        name="ConnectableElement" isAbstract="true" superType="#//@packages.0/ConnectableElement/@containedType.0 #//@packages.0/ConnectableElement/@containedType.1">
      <ownedTags value="/**ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.&#xD;&#xA;A connectable element may be exposed as a connectable element template parameter.*/"
          object="#//@packages.0/ConnectableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TypedElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
      <ownedAttribute tag="#//@packages.0/ConnectableElement/end/@ownedTags.0" name="end"
          type="#//@packages.0/ConnectableElement/end/@containedType.0" isOrdered="true"
          upper="-1" isDerived="true">
        <ownedTags value="/**Denotes a connector that attaches to this connectable element.*/"
            object="#//@packages.0/ConnectableElement/end"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectorEnd"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ConnectableElement/end/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ConnectableElement/end/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ConnectableElement/end/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ConnectableElement/end/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation name="getEnds" type="#//@packages.0/ConnectableElement/getEnds/@containedType.0"
          upper="-1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectorEnd"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ConnectableElementTemplateParameter/@ownedTags.0"
        name="ConnectableElementTemplateParameter" superType="#//@packages.0/ConnectableElementTemplateParameter/@containedType.0">
      <ownedTags value="/**A connectable element template parameter exposes a connectable element as a formal parameter for a template.*/"
          object="#//@packages.0/ConnectableElementTemplateParameter"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ConnectorEnd/@ownedTags.0"
        name="ConnectorEnd" superType="#//@packages.0/ConnectorEnd/@containedType.0">
      <ownedTags value="/**A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.*/"
          object="#//@packages.0/ConnectorEnd"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MultiplicityElement"/>
      <ownedAttribute tag="#//@packages.0/ConnectorEnd/definingEnd/@ownedTags.0" name="definingEnd"
          type="#//@packages.0/ConnectorEnd/definingEnd/@containedType.0" isOrdered="true"
          upper="1" isDerived="true">
        <ownedTags value="/**A derived association referencing the corresponding association end on the association which types the connector owing this connector end. This association is derived by selecting the association end at the same place in the ordering of association ends as this connector end.&#xD;&#xA;*/"
            object="#//@packages.0/ConnectorEnd/definingEnd"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ConnectorEnd/definingEnd/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ConnectorEnd/definingEnd/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ConnectorEnd/definingEnd/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ConnectorEnd/definingEnd/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ConnectorEnd/partWithPort/@ownedTags.0"
          name="partWithPort" type="#//@packages.0/ConnectorEnd/partWithPort/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**Indicates the role of the internal structure of a classifier with the port to which the connector end is attached.*/"
            object="#//@packages.0/ConnectorEnd/partWithPort"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ConnectorEnd/role/@ownedTags.0" name="role"
          type="#//@packages.0/ConnectorEnd/role/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.&#xD;&#xA;*/"
            object="#//@packages.0/ConnectorEnd/role"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectableElement"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ConnectorEnd/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the connector end may not be more general than the multiplicity of the association typing the owning connector.&#xD;&#xA;true*/"
            object="#//@packages.0/ConnectorEnd/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ConnectorEnd/part_with_port_empty/@ownedTags.0"
          name="part_with_port_empty" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If a connector end is attached to a port of the containing classifier, partWithPort will be empty.&#xD;&#xA;true*/"
            object="#//@packages.0/ConnectorEnd/part_with_port_empty"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ConnectorEnd/role_and_part_with_port/@ownedTags.0"
          name="role_and_part_with_port" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If a connector end references both a role and a partWithPort, then the role must be a port that is defined by the type of the partWithPort.&#xD;&#xA;true*/"
            object="#//@packages.0/ConnectorEnd/role_and_part_with_port"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ConnectorEnd/self_part_with_port/@ownedTags.0"
          name="self_part_with_port" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The property held in self.partWithPort must not be a Port.&#xD;&#xA;true*/"
            object="#//@packages.0/ConnectorEnd/self_part_with_port"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getDefiningEnd" type="#//@packages.0/ConnectorEnd/getDefiningEnd/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Property/@ownedTags.0"
        name="Property" superType="#//@packages.0/Property/@containedType.0 #//@packages.0/Property/@containedType.1 #//@packages.0/Property/@containedType.2 #//@packages.0/Property/@containedType.3">
      <ownedTags value="/**A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.&#xD;&#xA;A property represents a set of instances that are owned by a containing classifier instance.&#xD;&#xA;A property has the capability of being a deployment target in a deployment relationship. This enables modeling the deployment to hierarchical nodes that have properties functioning as internal parts.&#xD;&#xA;Property represents a declared state of one or more instances in terms of a named relationship to a value or values. When a property is an attribute of a classifier, the value or values are related to the instance of the classifier by being held in slots of the instance. When a property is an association end, the value or values are related to the instance or instances at the other end(s) of the association. The range of valid values represented by the property can be controlled by setting the property's type.&#xD;&#xA;Property specializes ParameterableElement to specify that a property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.*/"
          object="#//@packages.0/Property"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuralFeature"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DeploymentTarget"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateableElement"/>
      <ownedAttribute tag="#//@packages.0/Property/class/@ownedTags.0" name="class"
          type="#//@packages.0/Property/class/@containedType.0" isOrdered="true" upper="1">
        <ownedTags value="/**References the Class that owns the Property.*/" object="#//@packages.0/Property/class"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/datatype/@ownedTags.0" name="datatype"
          type="#//@packages.0/Property/datatype/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/DataType/ownedAttribute">
        <ownedTags value="/**The DataType that owns this Property.*/" object="#//@packages.0/Property/datatype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DataType"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/isDerived/@ownedTags.0" name="isDerived"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**If isDerived is true, the value of the attribute is derived from information elsewhere.&#xD;&#xA;Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.*/"
            object="#//@packages.0/Property/isDerived"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/isDerivedUnion/@ownedTags.0" name="isDerivedUnion"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether the property is derived as the union of all of the properties that are constrained to subset it.*/"
            object="#//@packages.0/Property/isDerivedUnion"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/default/@ownedTags.0" name="default"
          type="#//@packages.0/String" isOrdered="true" upper="1" isDerived="true">
        <ownedTags value="/**Specifies a String that represents a value to be used when no argument is supplied for the Property.&#xD;&#xA;A String that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.*/"
            object="#//@packages.0/Property/default"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Property/default/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Property/default/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Property/default/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Property/default/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/aggregation/@ownedTags.0" name="aggregation"
          type="#//@packages.0/AggregationKind" isOrdered="true" lower="1" upper="1"
          isComposite="true">
        <ownedTags value="/**Specifies the kind of aggregation that applies to the Property.*/"
            object="#//@packages.0/Property/aggregation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/isComposite/@ownedTags.0" name="isComposite"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isDerived="true">
        <ownedTags value="/**If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.&#xD;&#xA;This is a derived value, indicating whether the aggregation of the Property is composite or not.*/"
            object="#//@packages.0/Property/isComposite"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Property/isComposite/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Property/isComposite/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Property/isComposite/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Property/isComposite/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/redefinedProperty/@ownedTags.0"
          name="redefinedProperty" type="#//@packages.0/Property/redefinedProperty/@containedType.0"
          upper="-1">
        <ownedTags value="/**References the properties that are redefined by this property.*/"
            object="#//@packages.0/Property/redefinedProperty"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/owningAssociation/@ownedTags.0"
          name="owningAssociation" type="#//@packages.0/Property/owningAssociation/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/Association/ownedEnd">
        <ownedTags value="/**References the owning association of this property, if any.*/"
            object="#//@packages.0/Property/owningAssociation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/defaultValue/@ownedTags.0" name="defaultValue"
          type="#//@packages.0/Property/defaultValue/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**A ValueSpecification that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.*/"
            object="#//@packages.0/Property/defaultValue"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/opposite/@ownedTags.0" name="opposite"
          type="#//@packages.0/Property/opposite/@containedType.0" isOrdered="true"
          upper="1" isDerived="true">
        <ownedTags value="/**In the case where the property is one navigable end of a binary association with both ends navigable, this gives the other end.*/"
            object="#//@packages.0/Property/opposite"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Property/opposite/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Property/opposite/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Property/opposite/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Property/opposite/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/subsettedProperty/@ownedTags.0"
          name="subsettedProperty" type="#//@packages.0/Property/subsettedProperty/@containedType.0"
          upper="-1">
        <ownedTags value="/**References the properties of which this property is constrained to be a subset.*/"
            object="#//@packages.0/Property/subsettedProperty"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/association/@ownedTags.0" name="association"
          type="#//@packages.0/Property/association/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Association/memberEnd">
        <ownedTags value="/**References the association of which this property is a member, if any.*/"
            object="#//@packages.0/Property/association"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/qualifier/@ownedTags.0" name="qualifier"
          type="#//@packages.0/Property/qualifier/@containedType.0" isOrdered="true"
          upper="-1" opposite="#//@packages.0/Property/associationEnd" isComposite="true">
        <ownedTags value="/**An optional list of ordered qualifier attributes for the end. If the list is empty, then the Association is not qualified.*/"
            object="#//@packages.0/Property/qualifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Property/associationEnd/@ownedTags.0" name="associationEnd"
          type="#//@packages.0/Property/associationEnd/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Property/qualifier">
        <ownedTags value="/**Designates the optional association end that owns a qualifier attribute.*/"
            object="#//@packages.0/Property/associationEnd"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Property/multiplicity_of_composite/@ownedTags.0"
          name="multiplicity_of_composite" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A multiplicity of a composite aggregation must not have an upper bound greater than 1.&#xD;&#xA;A multiplicity on an aggregate end of a composite aggregation must not have an upper bound greater than 1.&#xD;&#xA;isComposite implies (upperBound()->isEmpty() or upperBound() &lt;= 1)*/"
            object="#//@packages.0/Property/multiplicity_of_composite"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/subsetting_context_conforms/@ownedTags.0"
          name="subsetting_context_conforms" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.&#xD;&#xA;self.subsettedProperty->notEmpty() implies&#xA;  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |&#xA;    self.subsettedProperty->forAll(sp |&#xA;      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))*/"
            object="#//@packages.0/Property/subsetting_context_conforms"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/redefined_property_inherited/@ownedTags.0"
          name="redefined_property_inherited" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A redefined property must be inherited from a more general classifier containing the redefining property.&#xD;&#xA;if (redefinedProperty->notEmpty()) then&#xD;&#xA;  (redefinitionContext->notEmpty() and&#xD;&#xA;      redefinedProperty->forAll(rp|&#xD;&#xA;        ((redefinitionContext->collect(fc|&#xD;&#xA;          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp))*/"
            object="#//@packages.0/Property/redefined_property_inherited"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/subsetting_rules/@ownedTags.0"
          name="subsetting_rules" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.&#xD;&#xA;self.subsettedProperty->forAll(sp |&#xA;  self.type.conformsTo(sp.type) and&#xA;    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies&#xA;      self.upperBound()&lt;=sp.upperBound() ))*/"
            object="#//@packages.0/Property/subsetting_rules"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/navigable_readonly/@ownedTags.0"
          name="navigable_readonly" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Only a navigable property can be marked as readOnly.&#xD;&#xA;isReadOnly implies isNavigable()*/"
            object="#//@packages.0/Property/navigable_readonly"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/derived_union_is_derived/@ownedTags.0"
          name="derived_union_is_derived" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A derived union is derived.&#xD;&#xA;isDerivedUnion implies isDerived*/"
            object="#//@packages.0/Property/derived_union_is_derived"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/derived_union_is_read_only/@ownedTags.0"
          name="derived_union_is_read_only" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A derived union is read only.&#xD;&#xA;isDerivedUnion implies isReadOnly*/"
            object="#//@packages.0/Property/derived_union_is_read_only"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/subsetted_property_names/@ownedTags.0"
          name="subsetted_property_names" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A property may not subset a property with the same name.&#xD;&#xA;true*/"
            object="#//@packages.0/Property/subsetted_property_names"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/deployment_target/@ownedTags.0"
          name="deployment_target" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A Property can be a DeploymentTarget if it is a kind of Node and functions as a part in the internal structure of an encompassing Node.&#xD;&#xA;true*/"
            object="#//@packages.0/Property/deployment_target"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/binding_to_attribute/@ownedTags.0"
          name="binding_to_attribute" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A binding of a property template parameter representing an attribute must be to an attribute.&#xD;&#xA;(isAttribute(self) and (templateParameterSubstitution->notEmpty())&#xD;&#xA;  implies (templateParameterSubstitution->forAll(ts | isAttribute(ts.formal)))*/"
            object="#//@packages.0/Property/binding_to_attribute"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getDefault" type="#//@packages.0/String" isOrdered="true"
          upper="1" isAbstract="true"/>
      <ownedOperation name="isSetDefault" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true"/>
      <ownedOperation name="setDefault" type="#//@packages.0/Property/setDefault/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newDefault" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation name="setIsComposite" type="#//@packages.0/Property/setIsComposite/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newIsComposite" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation name="setOpposite" type="#//@packages.0/Property/setOpposite/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newOpposite" type="#//@packages.0/Property/setOpposite/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation name="unsetDefault" type="#//@packages.0/Property/unsetDefault/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/setIsNavigable/@ownedTags.0" name="setIsNavigable"
          type="#//@packages.0/Property/setIsNavigable/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the navigability of this property as indicated.*/"
            object="#//@packages.0/Property/setIsNavigable"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="isNavigable" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/getOtherEnd/@ownedTags.0" name="getOtherEnd"
          type="#//@packages.0/Property/getOtherEnd/@containedType.0" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the other end of the (binary) association in which this property is a member end.*/"
            object="#//@packages.0/Property/getOtherEnd"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/setBooleanDefaultValue/@ownedTags.0"
          name="setBooleanDefaultValue" type="#//@packages.0/Property/setBooleanDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this property to the specified Boolean value.*/"
            object="#//@packages.0/Property/setBooleanDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="value" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/setIntegerDefaultValue/@ownedTags.0"
          name="setIntegerDefaultValue" type="#//@packages.0/Property/setIntegerDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this property to the specified integer value.*/"
            object="#//@packages.0/Property/setIntegerDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="value" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/setStringDefaultValue/@ownedTags.0"
          name="setStringDefaultValue" type="#//@packages.0/Property/setStringDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this property to the specified string value.*/"
            object="#//@packages.0/Property/setStringDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="value" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/setUnlimitedNaturalDefaultValue/@ownedTags.0"
          name="setUnlimitedNaturalDefaultValue" type="#//@packages.0/Property/setUnlimitedNaturalDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this property to the specified unlimited natural value.*/"
            object="#//@packages.0/Property/setUnlimitedNaturalDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="value" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/setNullDefaultValue/@ownedTags.0"
          name="setNullDefaultValue" type="#//@packages.0/Property/setNullDefaultValue/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Sets the default value for this property to the null value.*/"
            object="#//@packages.0/Property/setNullDefaultValue"/>
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/isAttribute/@ownedTags.0" name="isAttribute"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query isAttribute() is true if the Property is defined as an attribute of some classifier.&#xD;&#xA;result = Classifier.allInstances->exists(c | c.attribute->includes(p))*/"
            object="#//@packages.0/Property/isAttribute"/>
        <ownedParameter name="p" type="#//@packages.0/Property/isAttribute/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/getOpposite/@ownedTags.0" name="getOpposite"
          type="#//@packages.0/Property/getOpposite/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.&#xD;&#xA;result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2&#xA;  then&#xA;    let otherEnd = (association.memberEnd - self)->any() in&#xA;      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif&#xA;    else Set {}&#xA;    endif*/"
            object="#//@packages.0/Property/getOpposite"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/isComposite.1/@ownedTags.0" name="isComposite"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The value of isComposite is true only if aggregation is composite.&#xD;&#xA;result = (self.aggregation = #composite)*/"
            object="#//@packages.0/Property/isComposite.1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/subsettingContext/@ownedTags.0"
          name="subsettingContext" type="#//@packages.0/Property/subsettingContext/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.&#xD;&#xA;result = if association->notEmpty()&#xA;then association.endType-type&#xA;else if classifier->notEmpty() then Set{classifier} else Set{} endif&#xA;endif*/"
            object="#//@packages.0/Property/subsettingContext"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Property/isNavigable/@ownedTags.0" name="isNavigable"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query isNavigable() indicates whether it is possible to navigate across the property.&#xD;&#xA;result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)*/"
            object="#//@packages.0/Property/isNavigable"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DeploymentTarget/@ownedTags.0"
        name="DeploymentTarget" isAbstract="true" superType="#//@packages.0/DeploymentTarget/@containedType.0">
      <ownedTags value="/**A deployment target is the location for a deployed artifact.*/"
          object="#//@packages.0/DeploymentTarget"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/DeploymentTarget/deployment/@ownedTags.0"
          name="deployment" type="#//@packages.0/DeploymentTarget/deployment/@containedType.0"
          upper="-1" opposite="#//@packages.0/Deployment/location" isComposite="true">
        <ownedTags value="/**The set of Deployments for a DeploymentTarget.*/" object="#//@packages.0/DeploymentTarget/deployment"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Deployment"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/DeploymentTarget/deployedElement/@ownedTags.0"
          name="deployedElement" type="#//@packages.0/DeploymentTarget/deployedElement/@containedType.0"
          upper="-1" isDerived="true">
        <ownedTags value="/**The set of elements that are manifested in an Artifact that is involved in Deployment to a DeploymentTarget.*/"
            object="#//@packages.0/DeploymentTarget/deployedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/DeploymentTarget/deployedElement/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/DeploymentTarget/deployedElement/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/DeploymentTarget/deployedElement/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/DeploymentTarget/deployedElement/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/DeploymentTarget/getDeployedElements/@ownedTags.0"
          name="getDeployedElements" type="#//@packages.0/DeploymentTarget/getDeployedElements/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**result = ((self.deployment->collect(deployedArtifact))->collect(manifestation))->collect(utilizedElement)*/"
            object="#//@packages.0/DeploymentTarget/getDeployedElements"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Deployment/@ownedTags.0"
        name="Deployment" superType="#//@packages.0/Deployment/@containedType.0">
      <ownedTags value="/**A deployment is the allocation of an artifact or artifact instance to a deployment target.&#xD;&#xA;A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.*/"
          object="#//@packages.0/Deployment"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Dependency"/>
      <ownedAttribute tag="#//@packages.0/Deployment/deployedArtifact/@ownedTags.0"
          name="deployedArtifact" type="#//@packages.0/Deployment/deployedArtifact/@containedType.0"
          upper="-1">
        <ownedTags value="/**The Artifacts that are deployed onto a Node. This association specializes the supplier association.*/"
            object="#//@packages.0/Deployment/deployedArtifact"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DeployedArtifact"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Deployment/configuration/@ownedTags.0" name="configuration"
          type="#//@packages.0/Deployment/configuration/@containedType.0" upper="-1"
          opposite="#//@packages.0/DeploymentSpecification/deployment" isComposite="true">
        <ownedTags value="/**The specification of properties that parameterize the deployment and execution of one or more Artifacts.*/"
            object="#//@packages.0/Deployment/configuration"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DeploymentSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Deployment/location/@ownedTags.0" name="location"
          type="#//@packages.0/Deployment/location/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/DeploymentTarget/deployment">
        <ownedTags value="/**The DeployedTarget which is the target of a Deployment.*/"
            object="#//@packages.0/Deployment/location"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DeploymentTarget"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DeployedArtifact/@ownedTags.0"
        name="DeployedArtifact" isAbstract="true" superType="#//@packages.0/DeployedArtifact/@containedType.0">
      <ownedTags value="/**A deployed artifact is an artifact or artifact instance that has been deployed to a deployment target.*/"
          object="#//@packages.0/DeployedArtifact"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DeploymentSpecification/@ownedTags.0"
        name="DeploymentSpecification" superType="#//@packages.0/DeploymentSpecification/@containedType.0">
      <ownedTags value="/**A deployment specification specifies a set of properties that determine execution parameters of a component artifact that is deployed on a node. A deployment specification can be aimed at a specific type of container. An artifact that reifies or implements deployment specification properties is a deployment descriptor.*/"
          object="#//@packages.0/DeploymentSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Artifact"/>
      <ownedAttribute tag="#//@packages.0/DeploymentSpecification/deploymentLocation/@ownedTags.0"
          name="deploymentLocation" type="#//@packages.0/String" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address'.*/"
            object="#//@packages.0/DeploymentSpecification/deploymentLocation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/DeploymentSpecification/executionLocation/@ownedTags.0"
          name="executionLocation" type="#//@packages.0/String" isOrdered="true" upper="1"
          isComposite="true">
        <ownedTags value="/**The location where a component Artifact executes. This may be a local or remote location.*/"
            object="#//@packages.0/DeploymentSpecification/executionLocation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/DeploymentSpecification/deployment/@ownedTags.0"
          name="deployment" type="#//@packages.0/DeploymentSpecification/deployment/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/Deployment/configuration">
        <ownedTags value="/**The deployment with which the DeploymentSpecification is associated.*/"
            object="#//@packages.0/DeploymentSpecification/deployment"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Deployment"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/DeploymentSpecification/deployed_elements/@ownedTags.0"
          name="deployed_elements" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The deployedElements of a DeploymentTarget that are involved in a Deployment that has an associated Deployment-Specification is a kind of Component (i.e. the configured components).&#xD;&#xA;self.deployment->forAll (d | d.location.deployedElements->forAll (de |&#xD;&#xA;  de.oclIsKindOf(Component)))*/"
            object="#//@packages.0/DeploymentSpecification/deployed_elements"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/DeploymentSpecification/deployment_target/@ownedTags.0"
          name="deployment_target" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The DeploymentTarget of a DeploymentSpecification is a kind of ExecutionEnvironment.&#xD;&#xA;result = self.deployment->forAll (d | d.location..oclIsKindOf(ExecutionEnvironment))*/"
            object="#//@packages.0/DeploymentSpecification/deployment_target"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Artifact/@ownedTags.0"
        name="Artifact" superType="#//@packages.0/Artifact/@containedType.0 #//@packages.0/Artifact/@containedType.1">
      <ownedTags value="/**An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.&#xD;&#xA;An artifact is the source of a deployment to a node.*/"
          object="#//@packages.0/Artifact"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DeployedArtifact"/>
      <ownedAttribute tag="#//@packages.0/Artifact/fileName/@ownedTags.0" name="fileName"
          type="#//@packages.0/String" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator.*/"
            object="#//@packages.0/Artifact/fileName"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Artifact/nestedArtifact/@ownedTags.0" name="nestedArtifact"
          type="#//@packages.0/Artifact/nestedArtifact/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**The Artifacts that are defined (nested) within the Artifact.&#xD;&#xA;The association is a specialization of the ownedMember association from Namespace to NamedElement.&#xD;&#xA;*/"
            object="#//@packages.0/Artifact/nestedArtifact"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Artifact"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Artifact/manifestation/@ownedTags.0" name="manifestation"
          type="#//@packages.0/Artifact/manifestation/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact.*/"
            object="#//@packages.0/Artifact/manifestation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Manifestation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Artifact/ownedOperation/@ownedTags.0" name="ownedOperation"
          type="#//@packages.0/Artifact/ownedOperation/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**The Operations defined for the Artifact. The association is a specialization of the ownedMember association.*/"
            object="#//@packages.0/Artifact/ownedOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Artifact/ownedAttribute/@ownedTags.0" name="ownedAttribute"
          type="#//@packages.0/Artifact/ownedAttribute/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**The attributes or association ends defined for the Artifact.&#xD;&#xA;The association is a specialization of the ownedMember association.&#xD;&#xA;*/"
            object="#//@packages.0/Artifact/ownedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Artifact/createOwnedOperation/@ownedTags.0"
          name="createOwnedOperation" type="#//@packages.0/Artifact/createOwnedOperation/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this artifact.*/"
            object="#//@packages.0/Artifact/createOwnedOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="parameterNames" type="#//@packages.0/String" upper="-1"/>
        <ownedParameter name="parameterTypes" type="#//@packages.0/Artifact/createOwnedOperation/@ownedParameter.2/@containedType.0"
            upper="-1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="returnType" type="#//@packages.0/Artifact/createOwnedOperation/@ownedParameter.3/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Artifact/createOwnedAttribute/@ownedTags.0"
          name="createOwnedAttribute" type="#//@packages.0/Artifact/createOwnedAttribute/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this artifact.*/"
            object="#//@packages.0/Artifact/createOwnedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="type" type="#//@packages.0/Artifact/createOwnedAttribute/@ownedParameter.1/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="lower" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="upper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Manifestation/@ownedTags.0"
        name="Manifestation" superType="#//@packages.0/Manifestation/@containedType.0">
      <ownedTags value="/**A manifestation is the concrete physical rendering of one or more model elements by an artifact.*/"
          object="#//@packages.0/Manifestation"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Abstraction"/>
      <ownedAttribute tag="#//@packages.0/Manifestation/utilizedElement/@ownedTags.0"
          name="utilizedElement" type="#//@packages.0/Manifestation/utilizedElement/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The model element that is utilized in the manifestation in an Artifact.*/"
            object="#//@packages.0/Manifestation/utilizedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Operation/@ownedTags.0"
        name="Operation" superType="#//@packages.0/Operation/@containedType.0 #//@packages.0/Operation/@containedType.1 #//@packages.0/Operation/@containedType.2">
      <ownedTags value="/**An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.&#xD;&#xA;An operation may invoke both the execution of method behaviors as well as other behavioral responses.&#xD;&#xA;Operation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.*/"
          object="#//@packages.0/Operation"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioralFeature"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateableElement"/>
      <ownedAttribute tag="#//@packages.0/Operation/interface/@ownedTags.0" name="interface"
          type="#//@packages.0/Operation/interface/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Interface/ownedOperation">
        <ownedTags value="/**The Interface that owns this Operation.*/" object="#//@packages.0/Operation/interface"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/class/@ownedTags.0" name="class"
          type="#//@packages.0/Operation/class/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Class/ownedOperation">
        <ownedTags value="/**The class that owns the operation.*/" object="#//@packages.0/Operation/class"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/isQuery/@ownedTags.0" name="isQuery"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).*/"
            object="#//@packages.0/Operation/isQuery"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/isOrdered/@ownedTags.0" name="isOrdered"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isDerived="true">
        <ownedTags value="/**This information is derived from the return result for this Operation.&#xD;&#xA;Specifies whether the return parameter is ordered or not, if present.*/"
            object="#//@packages.0/Operation/isOrdered"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/isOrdered/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/isOrdered/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/isOrdered/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/isOrdered/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/isUnique/@ownedTags.0" name="isUnique"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isDerived="true">
        <ownedTags value="/**This information is derived from the return result for this Operation.&#xD;&#xA;Specifies whether the return parameter is unique or not, if present.*/"
            object="#//@packages.0/Operation/isUnique"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/isUnique/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/isUnique/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/isUnique/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/isUnique/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/lower/@ownedTags.0" name="lower"
          type="#//@packages.0/Integer" isOrdered="true" upper="1" isDerived="true">
        <ownedTags value="/**This information is derived from the return result for this Operation.&#xD;&#xA;Specifies the lower multiplicity of the return parameter, if present.*/"
            object="#//@packages.0/Operation/lower"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/lower/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/lower/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/lower/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/lower/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/upper/@ownedTags.0" name="upper"
          type="#//@packages.0/UnlimitedNatural" isOrdered="true" upper="1" isDerived="true">
        <ownedTags value="/**This information is derived from the return result for this Operation.&#xD;&#xA;Specifies the upper multiplicity of the return parameter, if present.*/"
            object="#//@packages.0/Operation/upper"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/upper/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/upper/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/upper/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/upper/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/precondition/@ownedTags.0" name="precondition"
          type="#//@packages.0/Operation/precondition/@containedType.0" upper="-1">
        <ownedTags value="/**An optional set of Constraints on the state of the system when the Operation is invoked.*/"
            object="#//@packages.0/Operation/precondition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/postcondition/@ownedTags.0" name="postcondition"
          type="#//@packages.0/Operation/postcondition/@containedType.0" upper="-1">
        <ownedTags value="/**An optional set of Constraints specifying the state of the system when the Operation is completed.*/"
            object="#//@packages.0/Operation/postcondition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/redefinedOperation/@ownedTags.0"
          name="redefinedOperation" type="#//@packages.0/Operation/redefinedOperation/@containedType.0"
          upper="-1">
        <ownedTags value="/**References the Operations that are redefined by this Operation.*/"
            object="#//@packages.0/Operation/redefinedOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/datatype/@ownedTags.0" name="datatype"
          type="#//@packages.0/Operation/datatype/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/DataType/ownedOperation">
        <ownedTags value="/**The DataType that owns this Operation.*/" object="#//@packages.0/Operation/datatype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DataType"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/bodyCondition/@ownedTags.0" name="bodyCondition"
          type="#//@packages.0/Operation/bodyCondition/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**An optional Constraint on the result values of an invocation of this Operation.*/"
            object="#//@packages.0/Operation/bodyCondition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Operation/type/@ownedTags.0" name="type"
          type="#//@packages.0/Operation/type/@containedType.0" isOrdered="true" upper="1"
          isDerived="true">
        <ownedTags value="/**This information is derived from the return result for this Operation.&#xD;&#xA;Specifies the return result of the operation, if present.*/"
            object="#//@packages.0/Operation/type"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/type/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/type/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Operation/type/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Operation/type/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Operation/at_most_one_return/@ownedTags.0"
          name="at_most_one_return" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'&#xD;&#xA;self.ownedParameter->select(par | par.direction = #return)->size() &lt;= 1*/"
            object="#//@packages.0/Operation/at_most_one_return"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Operation/only_body_for_query/@ownedTags.0"
          name="only_body_for_query" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A bodyCondition can only be specified for a query operation.&#xD;&#xA;bodyCondition->notEmpty() implies isQuery*/"
            object="#//@packages.0/Operation/only_body_for_query"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getLower" type="#//@packages.0/Integer" isOrdered="true"
          lower="1" upper="1" isAbstract="true"/>
      <ownedOperation name="getUpper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
          lower="1" upper="1" isAbstract="true"/>
      <ownedOperation name="setIsOrdered" type="#//@packages.0/Operation/setIsOrdered/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newIsOrdered" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation name="setIsUnique" type="#//@packages.0/Operation/setIsUnique/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newIsUnique" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation name="setLower" type="#//@packages.0/Operation/setLower/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newLower" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation name="setType" type="#//@packages.0/Operation/setType/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newType" type="#//@packages.0/Operation/setType/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation name="setUpper" type="#//@packages.0/Operation/setUpper/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:VoidType"/>
        <ownedParameter name="newUpper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Operation/getReturnResult/@ownedTags.0"
          name="getReturnResult" type="#//@packages.0/Operation/getReturnResult/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the (only) return result parameter for this operation.*/"
            object="#//@packages.0/Operation/getReturnResult"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Parameter"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Operation/isOrdered.1/@ownedTags.0" name="isOrdered"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false.&#xD;&#xA;result = if returnResult()->notEmpty() then returnResult()->any().isOrdered else false endif*/"
            object="#//@packages.0/Operation/isOrdered.1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Operation/isUnique.1/@ownedTags.0" name="isUnique"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.&#xD;&#xA;result = if returnResult()->notEmpty() then returnResult()->any().isUnique else true endif*/"
            object="#//@packages.0/Operation/isUnique.1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Operation/lowerBound/@ownedTags.0" name="lowerBound"
          type="#//@packages.0/Integer" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower is not defined.&#xD;&#xA;result = if returnResult()->notEmpty() then returnResult()->any().lower else Set{} endif*/"
            object="#//@packages.0/Operation/lowerBound"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Operation/upperBound/@ownedTags.0" name="upperBound"
          type="#//@packages.0/UnlimitedNatural" isOrdered="true" lower="1" upper="1"
          isAbstract="true">
        <ownedTags value="/**If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper is not defined.&#xD;&#xA;result = if returnResult()->notEmpty() then returnResult()->any().upper else Set{} endif*/"
            object="#//@packages.0/Operation/upperBound"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Operation/getType/@ownedTags.0" name="getType"
          type="#//@packages.0/Operation/getType/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.&#xD;&#xA;result = if returnResult()->notEmpty() then returnResult()->any().type else Set{} endif*/"
            object="#//@packages.0/Operation/getType"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Operation/returnResult/@ownedTags.0" name="returnResult"
          type="#//@packages.0/Operation/returnResult/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty set&#xD;&#xA;result = ownedParameter->select (par | par.direction = #return)*/"
            object="#//@packages.0/Operation/returnResult"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Parameter"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/BehavioralFeature/@ownedTags.0"
        name="BehavioralFeature" isAbstract="true" superType="#//@packages.0/BehavioralFeature/@containedType.0 #//@packages.0/BehavioralFeature/@containedType.1">
      <ownedTags value="/**A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.&#xD;&#xA;A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.&#xD;&#xA;A behavioral feature owns zero or more parameter sets.*/"
          object="#//@packages.0/BehavioralFeature"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Feature"/>
      <ownedAttribute tag="#//@packages.0/BehavioralFeature/ownedParameter/@ownedTags.0"
          name="ownedParameter" type="#//@packages.0/BehavioralFeature/ownedParameter/@containedType.0"
          isOrdered="true" upper="-1" isComposite="true">
        <ownedTags value="/**Specifies the ordered set of formal parameters of this BehavioralFeature.*/"
            object="#//@packages.0/BehavioralFeature/ownedParameter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Parameter"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/BehavioralFeature/isAbstract/@ownedTags.0"
          name="isAbstract" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**If true, then the behavioral feature does not have an implementation, and one must be supplied by a more specific element. If false, the behavioral feature must have an implementation in the classifier or one must be inherited from a more general element.*/"
            object="#//@packages.0/BehavioralFeature/isAbstract"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/BehavioralFeature/method/@ownedTags.0" name="method"
          type="#//@packages.0/BehavioralFeature/method/@containedType.0" upper="-1"
          opposite="#//@packages.0/Behavior/specification">
        <ownedTags value="/**A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).*/"
            object="#//@packages.0/BehavioralFeature/method"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/BehavioralFeature/concurrency/@ownedTags.0"
          name="concurrency" type="#//@packages.0/CallConcurrencyKind" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a class with isActive being false). Active instances control access to their own behavioral features.*/"
            object="#//@packages.0/BehavioralFeature/concurrency"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/BehavioralFeature/raisedException/@ownedTags.0"
          name="raisedException" type="#//@packages.0/BehavioralFeature/raisedException/@containedType.0"
          upper="-1">
        <ownedTags value="/**References the Types representing exceptions that may be raised during an invocation of this feature.&#xD;&#xA;The signals that the behavioral feature raises as exceptions.*/"
            object="#//@packages.0/BehavioralFeature/raisedException"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/BehavioralFeature/ownedParameterSet/@ownedTags.0"
          name="ownedParameterSet" type="#//@packages.0/BehavioralFeature/ownedParameterSet/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**The ParameterSets owned by this BehavioralFeature.*/"
            object="#//@packages.0/BehavioralFeature/ownedParameterSet"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterSet"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/BehavioralFeature/createReturnResult/@ownedTags.0"
          name="createReturnResult" type="#//@packages.0/BehavioralFeature/createReturnResult/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a return result parameter with the specified name and type.*/"
            object="#//@packages.0/BehavioralFeature/createReturnResult"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Parameter"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="type" type="#//@packages.0/BehavioralFeature/createReturnResult/@ownedParameter.1/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Behavior/@ownedTags.0"
        name="Behavior" isAbstract="true" superType="#//@packages.0/Behavior/@containedType.0">
      <ownedTags value="/**Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.&#xD;&#xA;A behavior owns zero or more parameter sets.*/"
          object="#//@packages.0/Behavior"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      <ownedAttribute tag="#//@packages.0/Behavior/isReentrant/@ownedTags.0" name="isReentrant"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Tells whether the behavior can be invoked while it is still executing from a previous invocation.*/"
            object="#//@packages.0/Behavior/isReentrant"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Behavior/redefinedBehavior/@ownedTags.0"
          name="redefinedBehavior" type="#//@packages.0/Behavior/redefinedBehavior/@containedType.0"
          upper="-1">
        <ownedTags value="/**References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.*/"
            object="#//@packages.0/Behavior/redefinedBehavior"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Behavior/ownedParameter/@ownedTags.0" name="ownedParameter"
          type="#//@packages.0/Behavior/ownedParameter/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**References a list of parameters to the behavior which describes the order and type of arguments that can be given when the behavior is invoked and of the values which will be returned when the behavior completes its execution.&#xD;&#xA;*/"
            object="#//@packages.0/Behavior/ownedParameter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Parameter"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Behavior/context/@ownedTags.0" name="context"
          type="#//@packages.0/Behavior/context/@containedType.0" isOrdered="true"
          upper="1" isDerived="true">
        <ownedTags value="/**The classifier that is the context for the execution of the behavior. If the behavior is owned by a BehavioredClassifier, that classifier is the context. Otherwise, the context is the first BehavioredClassifier reached by following the chain of owner relationships. For example, following this algorithm, the context of an entry action in a state machine is the classifier that owns the state machine. The features of the context classifier as well as the elements visible to the context classifier are visible to the behavior.*/"
            object="#//@packages.0/Behavior/context"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioredClassifier"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Behavior/context/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Behavior/context/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Behavior/context/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Behavior/context/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Behavior/precondition/@ownedTags.0" name="precondition"
          type="#//@packages.0/Behavior/precondition/@containedType.0" upper="-1">
        <ownedTags value="/**An optional set of Constraints specifying what must be fulfilled when the behavior is invoked.*/"
            object="#//@packages.0/Behavior/precondition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Behavior/postcondition/@ownedTags.0" name="postcondition"
          type="#//@packages.0/Behavior/postcondition/@containedType.0" upper="-1">
        <ownedTags value="/**An optional set of Constraints specifying what is fulfilled after the execution of the behavior is completed, if its precondition was fulfilled before its invocation.*/"
            object="#//@packages.0/Behavior/postcondition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Behavior/ownedParameterSet/@ownedTags.0"
          name="ownedParameterSet" type="#//@packages.0/Behavior/ownedParameterSet/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**The ParameterSets owned by this Behavior.*/" object="#//@packages.0/Behavior/ownedParameterSet"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ParameterSet"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Behavior/specification/@ownedTags.0" name="specification"
          type="#//@packages.0/Behavior/specification/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/BehavioralFeature/method">
        <ownedTags value="/**Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. If a behavior does not have a specification, it is directly associated with a classifier (i.e., it is the behavior of the classifier as a whole).*/"
            object="#//@packages.0/Behavior/specification"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioralFeature"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Behavior/parameters_match/@ownedTags.0"
          name="parameters_match" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The parameters of the behavior must match the parameters of the implemented behavioral feature.&#xD;&#xA;true*/"
            object="#//@packages.0/Behavior/parameters_match"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Behavior/feature_of_context_classifier/@ownedTags.0"
          name="feature_of_context_classifier" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The implemented behavioral feature must be a feature (possibly inherited) of the context classifier of the behavior.&#xD;&#xA;true*/"
            object="#//@packages.0/Behavior/feature_of_context_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Behavior/must_realize/@ownedTags.0" name="must_realize"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If the implemented behavioral feature has been redefined in the ancestors of the owner of the behavior, then the behavior must realize the latest redefining behavioral feature.&#xD;&#xA;true*/"
            object="#//@packages.0/Behavior/must_realize"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Behavior/most_one_behaviour/@ownedTags.0"
          name="most_one_behaviour" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**There may be at most one behavior for a given pairing of classifier (as owner of the behavior) and behavioral feature (as specification of the behavior).&#xD;&#xA;true*/"
            object="#//@packages.0/Behavior/most_one_behaviour"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getContext" type="#//@packages.0/Behavior/getContext/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioredClassifier"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Class/@ownedTags.0"
        name="Class" superType="#//@packages.0/Class/@containedType.0 #//@packages.0/Class/@containedType.1">
      <ownedTags value="/**A class describes a set of objects that share the same specifications of features, constraints, and semantics.&#xD;&#xA;A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.&#xD;&#xA;A class has the capability to have an internal structure and ports.&#xD;&#xA;Class has derived association that indicates how it may be extended through one or more stereotypes. Stereotype is the only kind of metaclass that cannot be extended by stereotypes.*/"
          object="#//@packages.0/Class"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/EncapsulatedClassifier"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioredClassifier"/>
      <ownedAttribute tag="#//@packages.0/Class/nestedClassifier/@ownedTags.0" name="nestedClassifier"
          type="#//@packages.0/Class/nestedClassifier/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**References all the Classifiers that are defined (nested) within the Class.*/"
            object="#//@packages.0/Class/nestedClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Class/ownedOperation/@ownedTags.0" name="ownedOperation"
          type="#//@packages.0/Class/ownedOperation/@containedType.0" isOrdered="true"
          upper="-1" opposite="#//@packages.0/Operation/class" isComposite="true">
        <ownedTags value="/**The operations owned by the class.*/" object="#//@packages.0/Class/ownedOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Class/superClass/@ownedTags.0" name="superClass"
          type="#//@packages.0/Class/superClass/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**This gives the superclasses of a class.*/" object="#//@packages.0/Class/superClass"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Class/superClass/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Class/superClass/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Class/superClass/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Class/superClass/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Class/isActive/@ownedTags.0" name="isActive"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Determines whether an object specified by this class is active or not. If true, then the owning class is referred to as an active class. If false, then such a class is referred to as a passive class.*/"
            object="#//@packages.0/Class/isActive"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Class/ownedReception/@ownedTags.0" name="ownedReception"
          type="#//@packages.0/Class/ownedReception/@containedType.0" upper="-1" isComposite="true">
        <ownedTags value="/**Receptions that objects of this class are willing to accept.*/"
            object="#//@packages.0/Class/ownedReception"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Reception"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Class/extension/@ownedTags.0" name="extension"
          type="#//@packages.0/Class/extension/@containedType.0" upper="-1" opposite="#//@packages.0/Extension/metaclass"
          isDerived="true">
        <ownedTags value="/**References the Extensions that specify additional properties of the metaclass. The property is derived from the extensions whose memberEnds are typed by the Class.*/"
            object="#//@packages.0/Class/extension"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Extension"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Class/extension/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Class/extension/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Class/extension/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Class/extension/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Class/passive_class/@ownedTags.0" name="passive_class"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A passive class may not own receptions.&#xD;&#xA;not self.isActive implies self.ownedReception.isEmpty()*/"
            object="#//@packages.0/Class/passive_class"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getExtensions" type="#//@packages.0/Class/getExtensions/@containedType.0"
          upper="-1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Extension"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Class/createOwnedOperation/@ownedTags.0"
          name="createOwnedOperation" type="#//@packages.0/Class/createOwnedOperation/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this class.*/"
            object="#//@packages.0/Class/createOwnedOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="parameterNames" type="#//@packages.0/String" upper="-1"/>
        <ownedParameter name="parameterTypes" type="#//@packages.0/Class/createOwnedOperation/@ownedParameter.2/@containedType.0"
            upper="-1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="returnType" type="#//@packages.0/Class/createOwnedOperation/@ownedParameter.3/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Class/isMetaclass/@ownedTags.0" name="isMetaclass"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether this class is a metaclass.*/" object="#//@packages.0/Class/isMetaclass"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/BehavioredClassifier/@ownedTags.0"
        name="BehavioredClassifier" isAbstract="true" superType="#//@packages.0/BehavioredClassifier/@containedType.0">
      <ownedTags value="/**A behaviored classifier may have an interface realization.&#xD;&#xA;A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.*/"
          object="#//@packages.0/BehavioredClassifier"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      <ownedAttribute tag="#//@packages.0/BehavioredClassifier/ownedBehavior/@ownedTags.0"
          name="ownedBehavior" type="#//@packages.0/BehavioredClassifier/ownedBehavior/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**References behavior specifications owned by a classifier.*/"
            object="#//@packages.0/BehavioredClassifier/ownedBehavior"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/BehavioredClassifier/classifierBehavior/@ownedTags.0"
          name="classifierBehavior" type="#//@packages.0/BehavioredClassifier/classifierBehavior/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**A behavior specification that specifies the behavior of the classifier itself.*/"
            object="#//@packages.0/BehavioredClassifier/classifierBehavior"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/BehavioredClassifier/interfaceRealization/@ownedTags.0"
          name="interfaceRealization" type="#//@packages.0/BehavioredClassifier/interfaceRealization/@containedType.0"
          upper="-1" opposite="#//@packages.0/InterfaceRealization/implementingClassifier"
          isComposite="true">
        <ownedTags value="/**The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.*/"
            object="#//@packages.0/BehavioredClassifier/interfaceRealization"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InterfaceRealization"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/BehavioredClassifier/ownedTrigger/@ownedTags.0"
          name="ownedTrigger" type="#//@packages.0/BehavioredClassifier/ownedTrigger/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**References Trigger descriptions owned by a Classifier.*/"
            object="#//@packages.0/BehavioredClassifier/ownedTrigger"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Trigger"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/BehavioredClassifier/class_behavior/@ownedTags.0"
          name="class_behavior" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If a behavior is classifier behavior, it does not have a specification.&#xD;&#xA;self.classifierBehavior.notEmpty() implies self.specification.isEmpty()*/"
            object="#//@packages.0/BehavioredClassifier/class_behavior"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/BehavioredClassifier/getImplementedInterfaces/@ownedTags.0"
          name="getImplementedInterfaces" type="#//@packages.0/BehavioredClassifier/getImplementedInterfaces/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the interfaces on which this behaviored classifier has an interface realization dependency.*/"
            object="#//@packages.0/BehavioredClassifier/getImplementedInterfaces"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/BehavioredClassifier/getAllImplementedInterfaces/@ownedTags.0"
          name="getAllImplementedInterfaces" type="#//@packages.0/BehavioredClassifier/getAllImplementedInterfaces/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves all the interfaces on which this behaviored classifier or any of its parents has an interface realization dependency.*/"
            object="#//@packages.0/BehavioredClassifier/getAllImplementedInterfaces"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InterfaceRealization/@ownedTags.0"
        name="InterfaceRealization" superType="#//@packages.0/InterfaceRealization/@containedType.0">
      <ownedTags value="/**An interface realization is a specialized realization relationship between a classifier and an interface. This relationship signifies that the realizing classifier conforms to the contract specified by the interface.*/"
          object="#//@packages.0/InterfaceRealization"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Realization"/>
      <ownedAttribute tag="#//@packages.0/InterfaceRealization/contract/@ownedTags.0"
          name="contract" type="#//@packages.0/InterfaceRealization/contract/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**References the Interface specifying the conformance contract.*/"
            object="#//@packages.0/InterfaceRealization/contract"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InterfaceRealization/implementingClassifier/@ownedTags.0"
          name="implementingClassifier" type="#//@packages.0/InterfaceRealization/implementingClassifier/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/BehavioredClassifier/interfaceRealization">
        <ownedTags value="/**References the BehavioredClassifier that owns this Interfacerealization (i.e., the classifier that realizes the Interface to which it points).*/"
            object="#//@packages.0/InterfaceRealization/implementingClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioredClassifier"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Interface/@ownedTags.0"
        name="Interface" superType="#//@packages.0/Interface/@containedType.0">
      <ownedTags value="/**An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. An interface specifies a contract; any instance of a classifier that realizes the interface must fulfill that contract. The obligations that may be associated with an interface are in the form of various kinds of constraints (such as pre- and post-conditions) or protocol specifications, which may impose ordering restrictions on interactions through the interface.&#xD;&#xA;Interfaces may include receptions (in addition to operations).&#xD;&#xA;Since an interface specifies conformance characteristics, it does not own detailed behavior specifications. Instead, interfaces may own a protocol state machine that specifies event sequences and pre/post conditions for the operations and receptions described by the interface.*/"
          object="#//@packages.0/Interface"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      <ownedAttribute tag="#//@packages.0/Interface/ownedAttribute/@ownedTags.0" name="ownedAttribute"
          type="#//@packages.0/Interface/ownedAttribute/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**The attributes (i.e. the properties) owned by the class.*/"
            object="#//@packages.0/Interface/ownedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interface/ownedOperation/@ownedTags.0" name="ownedOperation"
          type="#//@packages.0/Interface/ownedOperation/@containedType.0" isOrdered="true"
          upper="-1" opposite="#//@packages.0/Operation/interface" isComposite="true">
        <ownedTags value="/**The operations owned by the class.*/" object="#//@packages.0/Interface/ownedOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interface/nestedClassifier/@ownedTags.0"
          name="nestedClassifier" type="#//@packages.0/Interface/nestedClassifier/@containedType.0"
          isOrdered="true" upper="-1" isComposite="true">
        <ownedTags value="/**References all the Classifiers that are defined (nested) within the Class.*/"
            object="#//@packages.0/Interface/nestedClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interface/redefinedInterface/@ownedTags.0"
          name="redefinedInterface" type="#//@packages.0/Interface/redefinedInterface/@containedType.0"
          upper="-1">
        <ownedTags value="/**References all the Interfaces redefined by this Interface.*/"
            object="#//@packages.0/Interface/redefinedInterface"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interface/ownedReception/@ownedTags.0" name="ownedReception"
          type="#//@packages.0/Interface/ownedReception/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**Receptions that objects providing this interface are willing to accept.*/"
            object="#//@packages.0/Interface/ownedReception"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Reception"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interface/protocol/@ownedTags.0" name="protocol"
          type="#//@packages.0/Interface/protocol/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**References a protocol state machine specifying the legal sequences of the invocation of the behavioral features described in the interface.*/"
            object="#//@packages.0/Interface/protocol"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ProtocolStateMachine"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Interface/visibility/@ownedTags.0" name="visibility"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The visibility of all features owned by an interface must be public.&#xD;&#xA;self.feature->forAll(f | f.visibility = #public)*/"
            object="#//@packages.0/Interface/visibility"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Interface/createOwnedOperation/@ownedTags.0"
          name="createOwnedOperation" type="#//@packages.0/Interface/createOwnedOperation/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this interface.*/"
            object="#//@packages.0/Interface/createOwnedOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="parameterNames" type="#//@packages.0/String" upper="-1"/>
        <ownedParameter name="parameterTypes" type="#//@packages.0/Interface/createOwnedOperation/@ownedParameter.2/@containedType.0"
            upper="-1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="returnType" type="#//@packages.0/Interface/createOwnedOperation/@ownedParameter.3/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Interface/createOwnedAttribute/@ownedTags.0"
          name="createOwnedAttribute" type="#//@packages.0/Interface/createOwnedAttribute/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this interface.*/"
            object="#//@packages.0/Interface/createOwnedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="type" type="#//@packages.0/Interface/createOwnedAttribute/@ownedParameter.1/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="lower" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="upper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Reception/@ownedTags.0"
        name="Reception" superType="#//@packages.0/Reception/@containedType.0">
      <ownedTags value="/**A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. A reception designates a signal and specifies the expected behavioral response. The details of handling a signal are specified by the behavior associated with the reception or the classifier itself.*/"
          object="#//@packages.0/Reception"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioralFeature"/>
      <ownedAttribute tag="#//@packages.0/Reception/signal/@ownedTags.0" name="signal"
          type="#//@packages.0/Reception/signal/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**The signal that this reception handles.*/" object="#//@packages.0/Reception/signal"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Signal"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Reception/not_query/@ownedTags.0" name="not_query"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A Reception can not be a query.&#xD;&#xA;not self.isQuery*/"
            object="#//@packages.0/Reception/not_query"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Signal/@ownedTags.0"
        name="Signal" superType="#//@packages.0/Signal/@containedType.0">
      <ownedTags value="/**A signal is a specification of send request instances communicated between objects. The receiving object handles the received request instances as specified by its receptions. The data carried by a send request (which was passed to it by the send invocation occurrence that caused that request) are represented as attributes of the signal. A signal is defined independently of the classifiers handling the signal occurrence.*/"
          object="#//@packages.0/Signal"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      <ownedAttribute tag="#//@packages.0/Signal/ownedAttribute/@ownedTags.0" name="ownedAttribute"
          type="#//@packages.0/Signal/ownedAttribute/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**The attributes owned by the signal.*/" object="#//@packages.0/Signal/ownedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Signal/createOwnedAttribute/@ownedTags.0"
          name="createOwnedAttribute" type="#//@packages.0/Signal/createOwnedAttribute/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this signal.*/"
            object="#//@packages.0/Signal/createOwnedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="type" type="#//@packages.0/Signal/createOwnedAttribute/@ownedParameter.1/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="lower" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="upper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ProtocolStateMachine/@ownedTags.0"
        name="ProtocolStateMachine" superType="#//@packages.0/ProtocolStateMachine/@containedType.0">
      <ownedTags value="/**A protocol state machine is always defined in the context of a classifier. It specifies which operations of the classifier can be called in which state and under which condition, thus specifying the allowed call sequences on the classifier's operations. A protocol state machine presents the possible and permitted transitions on the instances of its context classifier, together with the operations which carry the transitions. In this manner, an instance lifecycle can be created for a classifier, by specifying the order in which the operations can be activated and the states through which an instance progresses during its existence.*/"
          object="#//@packages.0/ProtocolStateMachine"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StateMachine"/>
      <ownedAttribute tag="#//@packages.0/ProtocolStateMachine/conformance/@ownedTags.0"
          name="conformance" type="#//@packages.0/ProtocolStateMachine/conformance/@containedType.0"
          upper="-1" opposite="#//@packages.0/ProtocolConformance/specificMachine"
          isComposite="true">
        <ownedTags value="/**Conformance between protocol state machines.*/" object="#//@packages.0/ProtocolStateMachine/conformance"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ProtocolConformance"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ProtocolStateMachine/protocol_transitions/@ownedTags.0"
          name="protocol_transitions" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**All transitions of a protocol state machine must be protocol transitions. (transitions as extended by the ProtocolStateMachines package)&#xD;&#xA;region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))*/"
            object="#//@packages.0/ProtocolStateMachine/protocol_transitions"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ProtocolStateMachine/entry_exit_do/@ownedTags.0"
          name="entry_exit_do" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The states of a protocol state machine cannot have entry, exit, or do activity actions.&#xD;&#xA;region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies&#xA;(v.entry->isEmpty() and v.exit->isEmpty() and v.doActivity->isEmpty())))&#xA;*/"
            object="#//@packages.0/ProtocolStateMachine/entry_exit_do"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ProtocolStateMachine/deep_or_shallow_history/@ownedTags.0"
          name="deep_or_shallow_history" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Protocol state machines cannot have deep or shallow history pseudostates.&#xD;&#xA;region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Psuedostate) implies&#xA;((v.kind &lt;> #deepHistory) and (v.kind &lt;> #shallowHistory)))))&#xA;*/"
            object="#//@packages.0/ProtocolStateMachine/deep_or_shallow_history"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ProtocolStateMachine/ports_connected/@ownedTags.0"
          name="ports_connected" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If two ports are connected, then the protocol state machine of the required interface (if defined) must be conformant to the protocol state machine of the provided interface (if defined).&#xD;&#xA;true*/"
            object="#//@packages.0/ProtocolStateMachine/ports_connected"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/StateMachine/@ownedTags.0"
        name="StateMachine" superType="#//@packages.0/StateMachine/@containedType.0">
      <ownedTags value="/**State machines can be used to express the behavior of part of a system. Behavior is modeled as a traversal of a graph of state nodes interconnected by one or more joined transition arcs that are triggered by the dispatching of series of (event) occurrences. During this traversal, the state machine executes a series of activities associated with various elements of the state machine.*/"
          object="#//@packages.0/StateMachine"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      <ownedAttribute tag="#//@packages.0/StateMachine/region/@ownedTags.0" name="region"
          type="#//@packages.0/StateMachine/region/@containedType.0" lower="1" upper="-1"
          opposite="#//@packages.0/Region/stateMachine" isComposite="true">
        <ownedTags value="/**The regions owned directly by the state machine.*/" object="#//@packages.0/StateMachine/region"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Region"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StateMachine/submachineState/@ownedTags.0"
          name="submachineState" type="#//@packages.0/StateMachine/submachineState/@containedType.0"
          upper="-1" opposite="#//@packages.0/State/submachine">
        <ownedTags value="/**References the submachine(s) in case of a submachine state. Multiple machines are referenced in case of a concurrent state.*/"
            object="#//@packages.0/StateMachine/submachineState"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StateMachine/connectionPoint/@ownedTags.0"
          name="connectionPoint" type="#//@packages.0/StateMachine/connectionPoint/@containedType.0"
          upper="-1" opposite="#//@packages.0/Pseudostate/stateMachine" isComposite="true">
        <ownedTags value="/**The connection points defined for this state machine. They represent the interface of the state machine when used as part of submachine state.*/"
            object="#//@packages.0/StateMachine/connectionPoint"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Pseudostate"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StateMachine/extendedStateMachine/@ownedTags.0"
          name="extendedStateMachine" type="#//@packages.0/StateMachine/extendedStateMachine/@containedType.0"
          upper="-1">
        <ownedTags value="/**The state machines of which this is an extension.*/"
            object="#//@packages.0/StateMachine/extendedStateMachine"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StateMachine"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/StateMachine/classifier_context/@ownedTags.0"
          name="classifier_context" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The classifier context of a state machine cannot be an interface.&#xD;&#xA;context->notEmpty() implies not context.oclIsKindOf(Interface)*/"
            object="#//@packages.0/StateMachine/classifier_context"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StateMachine/context_classifier/@ownedTags.0"
          name="context_classifier" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The context classifier of the method state machine of a behavioral feature must be the classifier that owns the behavioral feature.&#xD;&#xA;specification->notEmpty() implies (context->notEmpty() and specification->featuringClassifier->exists (c | c = context))*/"
            object="#//@packages.0/StateMachine/context_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StateMachine/connection_points/@ownedTags.0"
          name="connection_points" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The connection points of a state machine are pseudostates of kind entry point or exit point.&#xD;&#xA;conectionPoint->forAll (c | c.kind = #entryPoint or c.kind = #exitPoint)*/"
            object="#//@packages.0/StateMachine/connection_points"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StateMachine/method/@ownedTags.0" name="method"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A state machine as the method for a behavioral feature cannot have entry/exit connection points.&#xD;&#xA;specification->notEmpty() implies connectionPoint->isEmpty()*/"
            object="#//@packages.0/StateMachine/method"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StateMachine/LCA/@ownedTags.0" name="LCA"
          type="#//@packages.0/StateMachine/LCA/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The operation LCA(s1,s2) returns an orthogonal state or region which is the least common ancestor of states s1 and s2, based on the statemachine containment hierarchy.&#xD;&#xA;true*/"
            object="#//@packages.0/StateMachine/LCA"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
        <ownedParameter name="s1" type="#//@packages.0/StateMachine/LCA/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
        </ownedParameter>
        <ownedParameter name="s2" type="#//@packages.0/StateMachine/LCA/@ownedParameter.1/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StateMachine/ancestor/@ownedTags.0" name="ancestor"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query ancestor(s1, s2) checks whether s2 is an ancestor state of state s1. context StateMachine::ancestor (s1 : State, s2 : State) : Boolean&#xD;&#xA;&#xD;&#xA;result = if (s2 = s1) then&#xA;true&#xA;else if (s1.container->isEmpty) then&#xA;true&#xA;else if (s2.container->isEmpty) then&#xA;false&#xA;else (ancestor (s1, s2.container))*/"
            object="#//@packages.0/StateMachine/ancestor"/>
        <ownedParameter name="s1" type="#//@packages.0/StateMachine/ancestor/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
        </ownedParameter>
        <ownedParameter name="s2" type="#//@packages.0/StateMachine/ancestor/@ownedParameter.1/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StateMachine/isRedefinitionContextValid/@ownedTags.0"
          name="isRedefinitionContextValid" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true" superOperation="#//@packages.0/RedefinableElement/isRedefinitionContextValid">
        <ownedTags value="/**The query isRedefinitionContextValid() specifies whether the redefinition contexts of a statemachine are properly related to the redefinition contexts of the specified statemachine to allow this element to redefine the other. The containing classifier of a redefining statemachine must redefine the containing classifier of the redefined statemachine.&#xD;&#xA;result = true*/"
            object="#//@packages.0/StateMachine/isRedefinitionContextValid"/>
        <ownedParameter name="redefined" type="#//@packages.0/StateMachine/isRedefinitionContextValid/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
        </ownedParameter>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Region/@ownedTags.0"
        name="Region" superType="#//@packages.0/Region/@containedType.0 #//@packages.0/Region/@containedType.1">
      <ownedTags value="/**A region is an orthogonal part of either a composite state or a state machine. It contains states and transitions.*/"
          object="#//@packages.0/Region"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
      <ownedAttribute tag="#//@packages.0/Region/subvertex/@ownedTags.0" name="subvertex"
          type="#//@packages.0/Region/subvertex/@containedType.0" upper="-1" opposite="#//@packages.0/Vertex/container"
          isComposite="true">
        <ownedTags value="/**The set of vertices that are owned by this region.*/"
            object="#//@packages.0/Region/subvertex"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Vertex"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Region/transition/@ownedTags.0" name="transition"
          type="#//@packages.0/Region/transition/@containedType.0" upper="-1" opposite="#//@packages.0/Transition/container"
          isComposite="true">
        <ownedTags value="/**The set of transitions owned by the region. Note that internal transitions are owned by a region, but applies to the source state.*/"
            object="#//@packages.0/Region/transition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Transition"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Region/state/@ownedTags.0" name="state"
          type="#//@packages.0/Region/state/@containedType.0" isOrdered="true" upper="1"
          opposite="#//@packages.0/State/region">
        <ownedTags value="/**The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.*/"
            object="#//@packages.0/Region/state"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Region/extendedRegion/@ownedTags.0" name="extendedRegion"
          type="#//@packages.0/Region/extendedRegion/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**The region of which this region is an extension.*/" object="#//@packages.0/Region/extendedRegion"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Region"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Region/stateMachine/@ownedTags.0" name="stateMachine"
          type="#//@packages.0/Region/stateMachine/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/StateMachine/region">
        <ownedTags value="/**The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.*/"
            object="#//@packages.0/Region/stateMachine"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StateMachine"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Region/initial_vertex/@ownedTags.0" name="initial_vertex"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A region can have at most one initial vertex&#xD;&#xA;self.subvertex->select (v | v.oclIsKindOf(Pseudostate))->&#xA;select(p : Pseudostate | p.kind = #initial)->size() &lt;= 1&#xA;*/"
            object="#//@packages.0/Region/initial_vertex"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Region/deep_history_vertex/@ownedTags.0"
          name="deep_history_vertex" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A region can have at most one deep history vertex&#xD;&#xA;self.subvertex->select (v | v.oclIsKindOf(Pseudostate))->&#xA;select(p : Pseudostate | p.kind = #deepHistory)->size() &lt;= 1&#xA;*/"
            object="#//@packages.0/Region/deep_history_vertex"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Region/shallow_history_vertex/@ownedTags.0"
          name="shallow_history_vertex" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A region can have at most one shallow history vertex&#xD;&#xA;self.subvertex->select(v | v.oclIsKindOf(Pseudostate))->&#xA;select(p : Pseudostate | p.kind = #shallowHistory)->size() &lt;= 1&#xA;*/"
            object="#//@packages.0/Region/shallow_history_vertex"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Region/owned/@ownedTags.0" name="owned"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If a Region is owned by a StateMachine, then it cannot also be owned by a State and vice versa.&#xD;&#xA;(stateMachine->notEmpty() implies state->isEmpty()) and (state->notEmpty() implies stateMachine->isEmpty())*/"
            object="#//@packages.0/Region/owned"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Region/redefinitionContext/@ownedTags.0"
          name="redefinitionContext" type="#//@packages.0/Region/redefinitionContext/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The redefinition context of a region is the nearest containing statemachine&#xD;&#xA;result = let sm = containingStateMachine() in&#xA;if sm.context->isEmpty() or sm.general->notEmpty() then&#xA;sm&#xA;else&#xA;sm.context&#xA;endif*/"
            object="#//@packages.0/Region/redefinitionContext"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Region/isRedefinitionContextValid/@ownedTags.0"
          name="isRedefinitionContextValid" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true" superOperation="#//@packages.0/RedefinableElement/isRedefinitionContextValid">
        <ownedTags value="/**The query isRedefinitionContextValid() specifies whether the redefinition contexts of a region are properly related to the redefinition contexts of the specified region to allow this element to redefine the other. The containing statemachine/state of a redefining region must redefine the containing statemachine/state of the redefined region.&#xD;&#xA;result = true*/"
            object="#//@packages.0/Region/isRedefinitionContextValid"/>
        <ownedParameter name="redefined" type="#//@packages.0/Region/isRedefinitionContextValid/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Region/containingStateMachine/@ownedTags.0"
          name="containingStateMachine" type="#//@packages.0/Region/containingStateMachine/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The operation containingStateMachine() returns the sate machine in which this Region is defined&#xD;&#xA;result = if stateMachine->isEmpty() &#xA;then&#xA;state.containingStateMachine()&#xA;else&#xA;stateMachine&#xA;endif*/"
            object="#//@packages.0/Region/containingStateMachine"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StateMachine"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Region/belongsToPSM/@ownedTags.0" name="belongsToPSM"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The operation belongsToPSM () checks if the region belongs to a protocol state machine&#xD;&#xA;result = if not stateMachine->isEmpty() then&#xA;oclIsTypeOf(ProtocolStateMachine)&#xA;else if not state->isEmpty() then&#xA;state.container.belongsToPSM ()&#xA;else false*/"
            object="#//@packages.0/Region/belongsToPSM"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Vertex/@ownedTags.0"
        name="Vertex" isAbstract="true" superType="#//@packages.0/Vertex/@containedType.0">
      <ownedTags value="/**A vertex is an abstraction of a node in a state machine graph. In general, it can be the source or destination of any number of transitions.*/"
          object="#//@packages.0/Vertex"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/Vertex/incoming/@ownedTags.0" name="incoming"
          type="#//@packages.0/Vertex/incoming/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**Specifies the transitions entering this vertex.*/" object="#//@packages.0/Vertex/incoming"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Transition"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Vertex/incoming/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Vertex/incoming/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Vertex/incoming/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Vertex/incoming/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Vertex/outgoing/@ownedTags.0" name="outgoing"
          type="#//@packages.0/Vertex/outgoing/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**Specifies the transitions departing from this vertex.*/"
            object="#//@packages.0/Vertex/outgoing"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Transition"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Vertex/outgoing/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Vertex/outgoing/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Vertex/outgoing/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Vertex/outgoing/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Vertex/container/@ownedTags.0" name="container"
          type="#//@packages.0/Vertex/container/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Region/subvertex">
        <ownedTags value="/**The region that contains this vertex.*/" object="#//@packages.0/Vertex/container"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Region"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Vertex/containingStateMachine/@ownedTags.0"
          name="containingStateMachine" type="#//@packages.0/Vertex/containingStateMachine/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The operation containingStateMachine() returns the state machine in which this Vertex is defined&#xD;&#xA;result = if not container->isEmpty()&#xA;then&#xA;-- the container is a region&#xA;container.containingStateMachine()&#xA;else if (oclIsKindOf(Pseudostate)) then&#xA;-- entry or exit point?&#xA;if (kind = #entryPoint) or (kind = #exitPoint) then&#xA;stateMachine&#xA;else if (oclIsKindOf(ConnectionPointReference)) then&#xA;state.containingStateMachine() -- no other valid cases possible&#xA;endif&#xA;*/"
            object="#//@packages.0/Vertex/containingStateMachine"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StateMachine"/>
      </ownedOperation>
      <ownedOperation name="getIncomings" type="#//@packages.0/Vertex/getIncomings/@containedType.0"
          upper="-1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Transition"/>
      </ownedOperation>
      <ownedOperation name="getOutgoings" type="#//@packages.0/Vertex/getOutgoings/@containedType.0"
          upper="-1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Transition"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Transition/@ownedTags.0"
        name="Transition" superType="#//@packages.0/Transition/@containedType.0 #//@packages.0/Transition/@containedType.1">
      <ownedTags value="/**A transition is a directed relationship between a source vertex and a target vertex. It may be part of a compound transition, which takes the state machine from one state configuration to another, representing the complete response of the state machine to an occurrence of an event of a particular type.*/"
          object="#//@packages.0/Transition"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
      <ownedAttribute tag="#//@packages.0/Transition/kind/@ownedTags.0" name="kind"
          type="#//@packages.0/TransitionKind" isOrdered="true" lower="1" upper="1"
          isComposite="true">
        <ownedTags value="/**Indicates  the precise type of the transition.*/" object="#//@packages.0/Transition/kind"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Transition/container/@ownedTags.0" name="container"
          type="#//@packages.0/Transition/container/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/Region/transition">
        <ownedTags value="/**Designates the region that owns this transition.*/" object="#//@packages.0/Transition/container"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Region"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Transition/redefinedTransition/@ownedTags.0"
          name="redefinedTransition" type="#//@packages.0/Transition/redefinedTransition/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**The transition that is redefined by this transition.*/"
            object="#//@packages.0/Transition/redefinedTransition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Transition"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Transition/guard/@ownedTags.0" name="guard"
          type="#//@packages.0/Transition/guard/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**A guard is a constraint that provides a fine-grained control over the firing of the transition. The guard is evaluated when an event occurrence is dispatched by the state machine. If the guard is true at that time, the transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed.*/"
            object="#//@packages.0/Transition/guard"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Transition/effect/@ownedTags.0" name="effect"
          type="#//@packages.0/Transition/effect/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies an optional behavior to be performed when the transition fires.*/"
            object="#//@packages.0/Transition/effect"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Transition/trigger/@ownedTags.0" name="trigger"
          type="#//@packages.0/Transition/trigger/@containedType.0" upper="-1" isComposite="true">
        <ownedTags value="/**Specifies the triggers that may fire the transition.*/"
            object="#//@packages.0/Transition/trigger"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Trigger"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Transition/target/@ownedTags.0" name="target"
          type="#//@packages.0/Transition/target/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**Designates the target vertex that is reached when the transition is taken.*/"
            object="#//@packages.0/Transition/target"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Vertex"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Transition/source/@ownedTags.0" name="source"
          type="#//@packages.0/Transition/source/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**Designates the originating vertex (state or pseudostate) of the transition.*/"
            object="#//@packages.0/Transition/source"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Vertex"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Transition/fork_segment_guards/@ownedTags.0"
          name="fork_segment_guards" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A fork segment must not have guards or triggers.&#xD;&#xA;(source.oclIsKindOf(Pseudostate) and source.kind = #fork) implies (guard->isEmpty() and trigger->isEmpty())*/"
            object="#//@packages.0/Transition/fork_segment_guards"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Transition/join_segment_guards/@ownedTags.0"
          name="join_segment_guards" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A join segment must not have guards or triggers.&#xD;&#xA;(target.oclIsKindOf(Pseudostate) and target.kind = #join) implies (guard->isEmpty() and trigger->isEmpty())*/"
            object="#//@packages.0/Transition/join_segment_guards"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Transition/fork_segment_state/@ownedTags.0"
          name="fork_segment_state" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A fork segment must always target a state.&#xD;&#xA;(source.oclIsKindOf(Pseudostate) and source.kind = #fork) implies (target.oclIsKindOf(State))*/"
            object="#//@packages.0/Transition/fork_segment_state"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Transition/join_segment_state/@ownedTags.0"
          name="join_segment_state" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A join segment must always originate from a state.&#xD;&#xA;(target.oclIsKindOf(Pseudostate) and target.kind = #join) implies (source.oclIsKindOf(State))*/"
            object="#//@packages.0/Transition/join_segment_state"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Transition/outgoing_pseudostates/@ownedTags.0"
          name="outgoing_pseudostates" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Transitions outgoing pseudostates may not have a trigger.&#xD;&#xA;source.oclIsKindOf(Pseudostate) and&#xA;((source.kind &lt;> #junction) and (source.kind &lt;> #join) and (source.kind &lt;> #initial)) implies trigger->isEmpty()&#xA;*/"
            object="#//@packages.0/Transition/outgoing_pseudostates"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Transition/initial_transition/@ownedTags.0"
          name="initial_transition" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An initial transition at the topmost level (region of a statemachine) either has no trigger or it has a trigger with the stereotype &lt;&lt;create>>.&#xD;&#xA;self.source.oclIsKindOf(Pseudostate) implies&#xA;(self.source.oclAsType(Pseudostate).kind = #initial) implies&#xA;(self.source.container = self.stateMachine.top) implies&#xA;((self.trigger->isEmpty) or&#xA;(self.trigger.stereotype.name = 'create'))&#xA;*/"
            object="#//@packages.0/Transition/initial_transition"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Transition/signatures_compatible/@ownedTags.0"
          name="signatures_compatible" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**In case of more than one trigger, the signatures of these must be compatible in case the parameters of the signal are assigned to local variables/attributes.&#xD;&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/Transition/signatures_compatible"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Transition/redefinitionContext/@ownedTags.0"
          name="redefinitionContext" type="#//@packages.0/Transition/redefinitionContext/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The redefinition context of a transition is the nearest containing statemachine.&#xD;&#xA;result = let sm = containingStateMachine() in&#xA;if sm.context->isEmpty() or sm.general->notEmpty() then&#xA;sm&#xA;else&#xA;sm.context&#xA;endif*/"
            object="#//@packages.0/Transition/redefinitionContext"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Transition/containingStateMachine/@ownedTags.0"
          name="containingStateMachine" type="#//@packages.0/Transition/containingStateMachine/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query containingStateMachine() returns the state machine that contains the transition either directly or transitively.&#xD;&#xA;result = container.containingStateMachine()*/"
            object="#//@packages.0/Transition/containingStateMachine"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StateMachine"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="TransitionKind">
      <ownedLiteral name="internal"/>
      <ownedLiteral name="local"/>
      <ownedLiteral name="external"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Trigger/@ownedTags.0"
        name="Trigger" superType="#//@packages.0/Trigger/@containedType.0">
      <ownedTags value="/**A trigger relates an event to a behavior that may affect an instance of the classifier.&#xD;&#xA;A trigger specification may be qualified by the port on which the event occurred.*/"
          object="#//@packages.0/Trigger"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/Trigger/event/@ownedTags.0" name="event"
          type="#//@packages.0/Trigger/event/@containedType.0" isOrdered="true" lower="1"
          upper="1">
        <ownedTags value="/**The event that causes the trigger.*/" object="#//@packages.0/Trigger/event"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Event"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Trigger/port/@ownedTags.0" name="port" type="#//@packages.0/Trigger/port/@containedType.0"
          upper="-1">
        <ownedTags value="/**A optional port of the receiver object on which the behavioral feature is invoked.*/"
            object="#//@packages.0/Trigger/port"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Port"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Event/@ownedTags.0"
        name="Event" isAbstract="true" superType="#//@packages.0/Event/@containedType.0">
      <ownedTags value="/**An event is the specification of some occurrence that may potentially trigger effects by an object.*/"
          object="#//@packages.0/Event"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Port/@ownedTags.0"
        name="Port" superType="#//@packages.0/Port/@containedType.0">
      <ownedTags value="/**A port is a property of a classifier that specifies a distinct interaction point between that classifier and its environment or between the (behavior of the) classifier and its internal parts. Ports are connected to properties of the classifier by connectors through which requests can be made to invoke the behavioral features of a classifier. A Port may specify the services a classifier provides (offers) to its environment as well as the services that a classifier expects (requires) of its environment.&#xD;&#xA;A port has an associated protocol state machine.*/"
          object="#//@packages.0/Port"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      <ownedAttribute tag="#//@packages.0/Port/isBehavior/@ownedTags.0" name="isBehavior"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether requests arriving at this port are sent to the classifier behavior of this classifier. Such ports are referred to as behavior port. Any invocation of a behavioral feature targeted at a behavior port will be handled by the instance of the owning classifier itself, rather than by any instances that this classifier may contain.*/"
            object="#//@packages.0/Port/isBehavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Port/isService/@ownedTags.0" name="isService"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**If true indicates that this port is used to provide the published functionality of a classifier; if false, this port is used to implement the classifier but is not part of the essential externally-visible functionality of the classifier and can, therefore, be altered or deleted along with the internal implementation of the classifier and other properties that are considered part of its implementation.*/"
            object="#//@packages.0/Port/isService"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Port/required/@ownedTags.0" name="required"
          type="#//@packages.0/Port/required/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**References the interfaces specifying the set of operations and receptions which the classifier expects its environment to handle. This association is derived as the set of interfaces required by the type of the port or its supertypes.*/"
            object="#//@packages.0/Port/required"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Port/required/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Port/required/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Port/required/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Port/required/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Port/redefinedPort/@ownedTags.0" name="redefinedPort"
          type="#//@packages.0/Port/redefinedPort/@containedType.0" upper="-1">
        <ownedTags value="/**A port may be redefined when its containing classifier is specialized. The redefining port may have additional interfaces to those that are associated with the redefined port or it may replace an interface by one of its subtypes.*/"
            object="#//@packages.0/Port/redefinedPort"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Port"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Port/provided/@ownedTags.0" name="provided"
          type="#//@packages.0/Port/provided/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**References the interfaces specifying the set of operations and receptions which the classifier offers to its environment, and which it will handle either directly or by forwarding it to a part of its internal structure. This association is derived from the interfaces realized by the type of the port or by the type of the port, if the port was typed by an interface.&#xD;&#xA;*/"
            object="#//@packages.0/Port/provided"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Port/provided/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Port/provided/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Port/provided/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Port/provided/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Port/protocol/@ownedTags.0" name="protocol"
          type="#//@packages.0/Port/protocol/@containedType.0" isOrdered="true" upper="1">
        <ownedTags value="/**References an optional protocol state machine which describes valid interactions at this interaction point.*/"
            object="#//@packages.0/Port/protocol"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ProtocolStateMachine"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Port/required_interfaces/@ownedTags.0" name="required_interfaces"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The required interfaces of a port must be provided by elements to which the port is connected.&#xD;&#xA;true*/"
            object="#//@packages.0/Port/required_interfaces"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Port/port_aggregation/@ownedTags.0" name="port_aggregation"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Port.aggregation must be composite.&#xD;&#xA;true*/"
            object="#//@packages.0/Port/port_aggregation"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Port/port_destroyed/@ownedTags.0" name="port_destroyed"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**When a port is destroyed, all connectors attached to this port will be destroyed also.&#xD;&#xA;true*/"
            object="#//@packages.0/Port/port_destroyed"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Port/default_value/@ownedTags.0" name="default_value"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A defaultValue for port cannot be specified when the type of the Port is an Interface&#xD;&#xA;true*/"
            object="#//@packages.0/Port/default_value"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getProvideds" type="#//@packages.0/Port/getProvideds/@containedType.0"
          upper="-1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedOperation>
      <ownedOperation name="getRequireds" type="#//@packages.0/Port/getRequireds/@containedType.0"
          upper="-1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/State/@ownedTags.0"
        name="State" superType="#//@packages.0/State/@containedType.0 #//@packages.0/State/@containedType.1 #//@packages.0/State/@containedType.2">
      <ownedTags value="/**A state models a situation during which some (usually implicit) invariant condition holds.&#xD;&#xA;The states of protocol state machines are exposed to the users of their context classifiers. A protocol state represents an exposed stable situation of its context classifier: when an instance of the classifier is not processing any operation, users of this instance can always know its state configuration.*/"
          object="#//@packages.0/State"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Vertex"/>
      <ownedAttribute tag="#//@packages.0/State/isComposite/@ownedTags.0" name="isComposite"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isDerived="true">
        <ownedTags value="/**A state with isComposite=true is said to be a composite state. A composite state is a state that contains at least one region.*/"
            object="#//@packages.0/State/isComposite"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/State/isComposite/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/State/isComposite/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/State/isComposite/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/State/isComposite/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/isOrthogonal/@ownedTags.0" name="isOrthogonal"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isDerived="true">
        <ownedTags value="/**A state with isOrthogonal=true is said to be an orthogonal composite state. An orthogonal composite state contains two or more regions.*/"
            object="#//@packages.0/State/isOrthogonal"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/State/isOrthogonal/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/State/isOrthogonal/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/State/isOrthogonal/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/State/isOrthogonal/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/isSimple/@ownedTags.0" name="isSimple"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isDerived="true">
        <ownedTags value="/**A state with isSimple=true is said to be a simple state. A simple state does not have any regions and it does not refer to any submachine state machine.*/"
            object="#//@packages.0/State/isSimple"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/State/isSimple/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/State/isSimple/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/State/isSimple/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/State/isSimple/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/isSubmachineState/@ownedTags.0" name="isSubmachineState"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isDerived="true">
        <ownedTags value="/**A state with isSubmachineState=true is said to be a submachine state. Such a state refers to a state machine (submachine).*/"
            object="#//@packages.0/State/isSubmachineState"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/State/isSubmachineState/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/State/isSubmachineState/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/State/isSubmachineState/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/State/isSubmachineState/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/submachine/@ownedTags.0" name="submachine"
          type="#//@packages.0/State/submachine/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/StateMachine/submachineState">
        <ownedTags value="/**The state machine that is to be inserted in place of the (submachine) state.*/"
            object="#//@packages.0/State/submachine"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StateMachine"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/connection/@ownedTags.0" name="connection"
          type="#//@packages.0/State/connection/@containedType.0" upper="-1" opposite="#//@packages.0/ConnectionPointReference/state"
          isComposite="true">
        <ownedTags value="/**The entry and exit connection points used in conjunction with this (submachine) state, i.e. as targets and sources, respectively, in the region with the submachine state. A connection point reference references the corresponding definition of a connection point pseudostate in the statemachine referenced by the submachinestate.*/"
            object="#//@packages.0/State/connection"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectionPointReference"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/connectionPoint/@ownedTags.0" name="connectionPoint"
          type="#//@packages.0/State/connectionPoint/@containedType.0" upper="-1"
          opposite="#//@packages.0/Pseudostate/state" isComposite="true">
        <ownedTags value="/**The entry and exit pseudostates of a composite state. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite states.*/"
            object="#//@packages.0/State/connectionPoint"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Pseudostate"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/redefinedState/@ownedTags.0" name="redefinedState"
          type="#//@packages.0/State/redefinedState/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**The state of which this state is a redefinition.*/" object="#//@packages.0/State/redefinedState"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/stateInvariant/@ownedTags.0" name="stateInvariant"
          type="#//@packages.0/State/stateInvariant/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies conditions that are always true when this state is the current state. In protocol state machines, state invariants are additional conditions to the preconditions of the outgoing transitions, and to the postcondition of the incoming transitions.&#xD;&#xA;*/"
            object="#//@packages.0/State/stateInvariant"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/entry/@ownedTags.0" name="entry" type="#//@packages.0/State/entry/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**An optional behavior that is executed whenever this state is entered regardless of the transition taken to reach the state. If defined, entry actions are always executed to completion prior to any internal behavior or transitions performed within the state.&#xD;&#xA;*/"
            object="#//@packages.0/State/entry"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/exit/@ownedTags.0" name="exit" type="#//@packages.0/State/exit/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**An optional behavior that is executed whenever this state is exited regardless of which transition was taken out of the state. If defined, exit actions are always executed to completion only after all internal activities and transition actions have completed execution.*/"
            object="#//@packages.0/State/exit"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/doActivity/@ownedTags.0" name="doActivity"
          type="#//@packages.0/State/doActivity/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**An optional behavior that is executed while being in the state. The execution starts when this state is entered, and stops either by itself, or when the state is exited, whichever comes first.*/"
            object="#//@packages.0/State/doActivity"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/deferrableTrigger/@ownedTags.0" name="deferrableTrigger"
          type="#//@packages.0/State/deferrableTrigger/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**A list of triggers that are candidates to be retained by the state machine if they trigger no transitions out of the state (not consumed). A deferred trigger is retained until the state machine reaches a state configuration where it is no longer deferred.&#xD;&#xA;*/"
            object="#//@packages.0/State/deferrableTrigger"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Trigger"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/State/region/@ownedTags.0" name="region"
          type="#//@packages.0/State/region/@containedType.0" upper="-1" opposite="#//@packages.0/Region/state"
          isComposite="true">
        <ownedTags value="/**The regions owned directly by the state.*/" object="#//@packages.0/State/region"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Region"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/State/submachine_states/@ownedTags.0" name="submachine_states"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Only submachine states can have connection point references.&#xD;&#xA;isSubmachineState implies connection->notEmpty ( )*/"
            object="#//@packages.0/State/submachine_states"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/destinations_or_sources_of_transitions/@ownedTags.0"
          name="destinations_or_sources_of_transitions" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The connection point references used as destinations/sources of transitions associated with a submachine state must be defined as entry/exit points in the submachine state machine.&#xD;&#xA;self.isSubmachineState implies (self.connection->forAll (cp |&#xD;&#xA;cp.entry->forAll (p | p.statemachine = self.submachine) and&#xD;&#xA;cp.exit->forAll (p | p.statemachine = self.submachine)))*/"
            object="#//@packages.0/State/destinations_or_sources_of_transitions"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/submachine_or_regions/@ownedTags.0"
          name="submachine_or_regions" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A state is not allowed to have both a submachine and regions.&#xD;&#xA;isComposite implies not isSubmachineState*/"
            object="#//@packages.0/State/submachine_or_regions"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/composite_states/@ownedTags.0" name="composite_states"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Only composite states can have entry or exit pseudostates defined.&#xD;&#xA;connectionPoint->notEmpty() implies isComoposite*/"
            object="#//@packages.0/State/composite_states"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/entry_or_exit/@ownedTags.0" name="entry_or_exit"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Only entry or exit pseudostates can serve as connection points.&#xD;&#xA;connectionPoint->forAll(cp|cp.kind = #entry or cp.kind = #exit)*/"
            object="#//@packages.0/State/entry_or_exit"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/isSimple.1/@ownedTags.0" name="isSimple"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**A simple state is a state without any regions.&#xD;&#xA;result = region.isEmpty()*/"
            object="#//@packages.0/State/isSimple.1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/isComposite.1/@ownedTags.0" name="isComposite"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**A composite state is a state with at least one region.&#xD;&#xA;result = region.notEmpty()*/"
            object="#//@packages.0/State/isComposite.1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/isOrthogonal.1/@ownedTags.0" name="isOrthogonal"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**An orthogonal state is a composite state with at least 2 regions&#xD;&#xA;result = (region->size () > 1)*/"
            object="#//@packages.0/State/isOrthogonal.1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/isSubmachineState.1/@ownedTags.0"
          name="isSubmachineState" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Only submachine states can have a reference statemachine.&#xD;&#xA;result = submachine.notEmpty()*/"
            object="#//@packages.0/State/isSubmachineState.1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/redefinitionContext/@ownedTags.0"
          name="redefinitionContext" type="#//@packages.0/State/redefinitionContext/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The redefinition context of a state is the nearest containing statemachine.&#xD;&#xA;result = let sm = containingStateMachine() in&#xA;if sm.context->isEmpty() or sm.general->notEmpty() then&#xA;sm&#xA;else&#xA;sm.context&#xA;endif*/"
            object="#//@packages.0/State/redefinitionContext"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/State/isRedefinitionContextValid/@ownedTags.0"
          name="isRedefinitionContextValid" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isAbstract="true" superOperation="#//@packages.0/RedefinableElement/isRedefinitionContextValid">
        <ownedTags value="/**The query isRedefinitionContextValid() specifies whether the redefinition contexts of a state are properly related to the redefinition contexts of the specified state to allow this element to redefine the other. The containing region of a redefining state must redefine the containing region of the redefined state.&#xD;&#xA;result = true*/"
            object="#//@packages.0/State/isRedefinitionContextValid"/>
        <ownedParameter name="redefined" type="#//@packages.0/State/isRedefinitionContextValid/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
        </ownedParameter>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ConnectionPointReference/@ownedTags.0"
        name="ConnectionPointReference" superType="#//@packages.0/ConnectionPointReference/@containedType.0">
      <ownedTags value="/**A connection point reference represents a usage (as part of a submachine state) of an entry/exit point defined in the statemachine reference by the submachine state.*/"
          object="#//@packages.0/ConnectionPointReference"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Vertex"/>
      <ownedAttribute tag="#//@packages.0/ConnectionPointReference/entry/@ownedTags.0"
          name="entry" type="#//@packages.0/ConnectionPointReference/entry/@containedType.0"
          upper="-1">
        <ownedTags value="/**The entryPoint kind pseudo states corresponding to this connection point.*/"
            object="#//@packages.0/ConnectionPointReference/entry"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Pseudostate"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ConnectionPointReference/exit/@ownedTags.0"
          name="exit" type="#//@packages.0/ConnectionPointReference/exit/@containedType.0"
          upper="-1">
        <ownedTags value="/**The exitPoints kind pseudo states corresponding to this connection point.*/"
            object="#//@packages.0/ConnectionPointReference/exit"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Pseudostate"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ConnectionPointReference/state/@ownedTags.0"
          name="state" type="#//@packages.0/ConnectionPointReference/state/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/State/connection">
        <ownedTags value="/**The State in which the connection point refreshens are defined.*/"
            object="#//@packages.0/ConnectionPointReference/state"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ConnectionPointReference/entry_pseudostates/@ownedTags.0"
          name="entry_pseudostates" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The entry Pseudostates must be Pseudostates with kind entryPoint.&#xD;&#xA;entry->notEmpty() implies entry->forAll(e | e.kind = #entryPoint)*/"
            object="#//@packages.0/ConnectionPointReference/entry_pseudostates"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ConnectionPointReference/exit_pseudostates/@ownedTags.0"
          name="exit_pseudostates" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The exit Pseudostates must be Pseudostates with kind exitPoint.&#xD;&#xA;exit->notEmpty() implies exit->forAll(e | e.kind = #exitPoint)*/"
            object="#//@packages.0/ConnectionPointReference/exit_pseudostates"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Pseudostate/@ownedTags.0"
        name="Pseudostate" superType="#//@packages.0/Pseudostate/@containedType.0">
      <ownedTags value="/**A pseudostate is an abstraction that encompasses different types of transient vertices in the state machine graph.*/"
          object="#//@packages.0/Pseudostate"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Vertex"/>
      <ownedAttribute tag="#//@packages.0/Pseudostate/kind/@ownedTags.0" name="kind"
          type="#//@packages.0/PseudostateKind" isOrdered="true" lower="1" upper="1"
          isComposite="true">
        <ownedTags value="/**Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice.*/"
            object="#//@packages.0/Pseudostate/kind"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Pseudostate/stateMachine/@ownedTags.0" name="stateMachine"
          type="#//@packages.0/Pseudostate/stateMachine/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/StateMachine/connectionPoint">
        <ownedTags value="/**The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.*/"
            object="#//@packages.0/Pseudostate/stateMachine"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StateMachine"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Pseudostate/state/@ownedTags.0" name="state"
          type="#//@packages.0/Pseudostate/state/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/State/connectionPoint">
        <ownedTags value="/**The State that owns this pseudostate and in which it appears.*/"
            object="#//@packages.0/Pseudostate/state"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Pseudostate/initial_vertex/@ownedTags.0"
          name="initial_vertex" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An initial vertex can have at most one outgoing transition.&#xD;&#xA;(self.kind = #initial) implies (self.outgoing->size &lt;= 1)*/"
            object="#//@packages.0/Pseudostate/initial_vertex"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Pseudostate/history_vertices/@ownedTags.0"
          name="history_vertices" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**History vertices can have at most one outgoing transition.&#xD;&#xA;((self.kind = #deepHistory) or (self.kind = #shallowHistory)) implies&#xA;(self.outgoing->size &lt;= 1)&#xA;*/"
            object="#//@packages.0/Pseudostate/history_vertices"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Pseudostate/join_vertex/@ownedTags.0" name="join_vertex"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**In a complete statemachine, a join vertex must have at least two incoming transitions and exactly one outgoing transition.&#xD;&#xA;(self.kind = #join) implies&#xA;((self.outgoing->size = 1) and (self.incoming->size >= 2))&#xA;*/"
            object="#//@packages.0/Pseudostate/join_vertex"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Pseudostate/transitions_incoming/@ownedTags.0"
          name="transitions_incoming" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**All transitions incoming a join vertex must originate in different regions of an orthogonal state.&#xD;&#xA;(self.kind = #join) implies&#xA;  self.incoming->forAll (t1, t2 | t1&lt;>t2 implies&#xA;    (self.stateMachine.LCA(t1.source, t2.source).container.isOrthogonal))*/"
            object="#//@packages.0/Pseudostate/transitions_incoming"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Pseudostate/fork_vertex/@ownedTags.0" name="fork_vertex"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**In a complete statemachine, a fork vertex must have at least two outgoing transitions and exactly one incoming transition.&#xD;&#xA;(self.kind = #fork) implies&#xA;((self.incoming->size = 1) and (self.outgoing->size >= 2))&#xA;*/"
            object="#//@packages.0/Pseudostate/fork_vertex"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Pseudostate/transitions_outgoing/@ownedTags.0"
          name="transitions_outgoing" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**All transitions outgoing a fork vertex must target states in different regions of an orthogonal state.&#xD;&#xA;(self.kind = #fork) implies&#xA;  self.outgoing->forAll (t1, t2 | t1&lt;>t2 implies&#xA;    (self.stateMachine.LCA(t1.target, t2.target).container.isOrthogonal))*/"
            object="#//@packages.0/Pseudostate/transitions_outgoing"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Pseudostate/junction_vertex/@ownedTags.0"
          name="junction_vertex" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**In a complete statemachine, a junction vertex must have at least one incoming and one outgoing transition.&#xD;&#xA;(self.kind = #junction) implies&#xA;((self.incoming->size >= 1) and (self.outgoing->size >= 1))&#xA;*/"
            object="#//@packages.0/Pseudostate/junction_vertex"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Pseudostate/choice_vertex/@ownedTags.0"
          name="choice_vertex" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**In a complete statemachine, a choice vertex must have at least one incoming and one outgoing transition.&#xD;&#xA;(self.kind = #choice) implies&#xA;((self.incoming->size >= 1) and (self.outgoing->size >= 1))&#xA;*/"
            object="#//@packages.0/Pseudostate/choice_vertex"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Pseudostate/outgoing_from_initial/@ownedTags.0"
          name="outgoing_from_initial" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The outgoing transition from and initial vertex may have a behavior, but not a trigger or a guard.&#xD;&#xA;(self.kind = #initial) implies (self.outgoing.guard->isEmpty()&#xD;&#xA;  and self.outgoing.trigger->isEmpty())*/"
            object="#//@packages.0/Pseudostate/outgoing_from_initial"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="PseudostateKind">
      <ownedLiteral name="initial"/>
      <ownedLiteral name="deepHistory"/>
      <ownedLiteral name="shallowHistory"/>
      <ownedLiteral name="join"/>
      <ownedLiteral name="fork"/>
      <ownedLiteral name="junction"/>
      <ownedLiteral name="choice"/>
      <ownedLiteral name="entryPoint"/>
      <ownedLiteral name="exitPoint"/>
      <ownedLiteral name="terminate"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ProtocolConformance/@ownedTags.0"
        name="ProtocolConformance" superType="#//@packages.0/ProtocolConformance/@containedType.0">
      <ownedTags value="/**Protocol state machines can be redefined into more specific protocol state machines, or into behavioral state machines. Protocol conformance declares that the specific protocol state machine specifies a protocol that conforms to the general state machine one, or that the specific behavioral state machine abide by the protocol of the general protocol state machine.*/"
          object="#//@packages.0/ProtocolConformance"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/ProtocolConformance/generalMachine/@ownedTags.0"
          name="generalMachine" type="#//@packages.0/ProtocolConformance/generalMachine/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Specifies the protocol state machine to which the specific state machine conforms.*/"
            object="#//@packages.0/ProtocolConformance/generalMachine"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ProtocolStateMachine"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ProtocolConformance/specificMachine/@ownedTags.0"
          name="specificMachine" type="#//@packages.0/ProtocolConformance/specificMachine/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/ProtocolStateMachine/conformance">
        <ownedTags value="/**Specifies the state machine which conforms to the general state machine.*/"
            object="#//@packages.0/ProtocolConformance/specificMachine"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ProtocolStateMachine"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/EncapsulatedClassifier/@ownedTags.0"
        name="EncapsulatedClassifier" isAbstract="true" superType="#//@packages.0/EncapsulatedClassifier/@containedType.0">
      <ownedTags value="/**A classifier has the ability to own ports as specific and type checked interaction points.*/"
          object="#//@packages.0/EncapsulatedClassifier"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredClassifier"/>
      <ownedAttribute tag="#//@packages.0/EncapsulatedClassifier/ownedPort/@ownedTags.0"
          name="ownedPort" type="#//@packages.0/EncapsulatedClassifier/ownedPort/@containedType.0"
          upper="-1" isDerived="true">
        <ownedTags value="/**References a set of ports that an encapsulated classifier owns.*/"
            object="#//@packages.0/EncapsulatedClassifier/ownedPort"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Port"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/EncapsulatedClassifier/ownedPort/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/EncapsulatedClassifier/ownedPort/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/EncapsulatedClassifier/ownedPort/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/EncapsulatedClassifier/ownedPort/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/StructuredClassifier/@ownedTags.0"
        name="StructuredClassifier" isAbstract="true" superType="#//@packages.0/StructuredClassifier/@containedType.0">
      <ownedTags value="/**A structured classifier is an abstract metaclass that represents any classifier whose behavior can be fully or partly described by the collaboration of owned or referenced instances.*/"
          object="#//@packages.0/StructuredClassifier"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      <ownedAttribute tag="#//@packages.0/StructuredClassifier/ownedAttribute/@ownedTags.0"
          name="ownedAttribute" type="#//@packages.0/StructuredClassifier/ownedAttribute/@containedType.0"
          isOrdered="true" upper="-1" isComposite="true">
        <ownedTags value="/**References the properties owned by the classifier.*/"
            object="#//@packages.0/StructuredClassifier/ownedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StructuredClassifier/part/@ownedTags.0"
          name="part" type="#//@packages.0/StructuredClassifier/part/@containedType.0"
          upper="-1" isDerived="true">
        <ownedTags value="/**References the properties specifying instances that the classifier owns by composition. This association is derived, selecting those owned properties where isComposite is true.*/"
            object="#//@packages.0/StructuredClassifier/part"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/StructuredClassifier/part/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/StructuredClassifier/part/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/StructuredClassifier/part/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/StructuredClassifier/part/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StructuredClassifier/role/@ownedTags.0"
          name="role" type="#//@packages.0/StructuredClassifier/role/@containedType.0"
          upper="-1" isDerived="true">
        <ownedTags value="/**References the roles that instances may play in this classifier.*/"
            object="#//@packages.0/StructuredClassifier/role"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectableElement"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/StructuredClassifier/role/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/StructuredClassifier/role/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/StructuredClassifier/role/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/StructuredClassifier/role/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StructuredClassifier/ownedConnector/@ownedTags.0"
          name="ownedConnector" type="#//@packages.0/StructuredClassifier/ownedConnector/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**References the connectors owned by the classifier.*/"
            object="#//@packages.0/StructuredClassifier/ownedConnector"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Connector"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/StructuredClassifier/multiplicities/@ownedTags.0"
          name="multiplicities" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicities on connected elements must be consistent.&#xD;&#xA;true*/"
            object="#//@packages.0/StructuredClassifier/multiplicities"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StructuredClassifier/createOwnedAttribute/@ownedTags.0"
          name="createOwnedAttribute" type="#//@packages.0/StructuredClassifier/createOwnedAttribute/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this structured classifier.*/"
            object="#//@packages.0/StructuredClassifier/createOwnedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="type" type="#//@packages.0/StructuredClassifier/createOwnedAttribute/@ownedParameter.1/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="lower" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="upper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Connector/@ownedTags.0"
        name="Connector" superType="#//@packages.0/Connector/@containedType.0">
      <ownedTags value="/**Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only.&#xD;&#xA;A delegation connector is a connector that links the external contract of a component (as specified by its ports) to the internal realization of that behavior by the component's parts. It represents the forwarding of signals (operation requests and events): a signal that arrives at a port that has a delegation connector to a part or to another port will be passed on to that target for handling.&#xD;&#xA;An assembly connector is a connector between two components that defines that one component provides the services that another component requires. An assembly connector is a connector that is defined from a required interface or port to a provided interface or port.*/"
          object="#//@packages.0/Connector"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Feature"/>
      <ownedAttribute tag="#//@packages.0/Connector/type/@ownedTags.0" name="type"
          type="#//@packages.0/Connector/type/@containedType.0" isOrdered="true" upper="1">
        <ownedTags value="/**An optional association that specifies the link corresponding to this connector.*/"
            object="#//@packages.0/Connector/type"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Connector/redefinedConnector/@ownedTags.0"
          name="redefinedConnector" type="#//@packages.0/Connector/redefinedConnector/@containedType.0"
          upper="-1">
        <ownedTags value="/**A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector. The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.*/"
            object="#//@packages.0/Connector/redefinedConnector"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Connector"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Connector/end/@ownedTags.0" name="end" type="#//@packages.0/Connector/end/@containedType.0"
          isOrdered="true" lower="2" upper="-1" isComposite="true">
        <ownedTags value="/**A connector consists of at least two connector ends, each representing the participation of instances of the classifiers typing the connectable elements attached to this end. The set of connector ends is ordered.*/"
            object="#//@packages.0/Connector/end"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectorEnd"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Connector/kind/@ownedTags.0" name="kind"
          type="#//@packages.0/ConnectorKind" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**Indicates the kind of connector.*/" object="#//@packages.0/Connector/kind"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Connector/contract/@ownedTags.0" name="contract"
          type="#//@packages.0/Connector/contract/@containedType.0" upper="-1">
        <ownedTags value="/**The set of Behaviors that specify the valid interaction patterns across the connector.*/"
            object="#//@packages.0/Connector/contract"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Connector/types/@ownedTags.0" name="types"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The types of the connectable elements that the ends of a connector are attached to must conform to the types of the association ends of the association that types the connector, if any.&#xD;&#xA;true*/"
            object="#//@packages.0/Connector/types"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Connector/compatible/@ownedTags.0" name="compatible"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The connectable elements attached to the ends of a connector must be compatible.&#xD;&#xA;true*/"
            object="#//@packages.0/Connector/compatible"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Connector/roles/@ownedTags.0" name="roles"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The ConnectableElements attached as roles to each ConnectorEnd owned by a Connector must be roles of the Classifier that owned the Connector, or they must be ports of such roles.&#xD;&#xA;true*/"
            object="#//@packages.0/Connector/roles"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Connector/between_interfaces_ports/@ownedTags.0"
          name="between_interfaces_ports" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A delegation connector must only be defined between used Interfaces or Ports of the same kind, e.g. between two provided Ports or between two required Ports.&#xD;&#xA;true*/"
            object="#//@packages.0/Connector/between_interfaces_ports"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Connector/between_interface_port_implements/@ownedTags.0"
          name="between_interface_port_implements" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If a delegation connector is defined between a used Interface or Port and an internal Part Classifier, then that Classifier must have an 'implements' relationship to the Interface type of that Port.&#xD;&#xA;true*/"
            object="#//@packages.0/Connector/between_interface_port_implements"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Connector/between_interface_port_signature/@ownedTags.0"
          name="between_interface_port_signature" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If a delegation connector is defined between a source Interface or Port and a target Interface or Port, then the target Interface must support a signature compatible subset of Operations of the source Interface or Port.&#xD;&#xA;true*/"
            object="#//@packages.0/Connector/between_interface_port_signature"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Connector/union_signature_compatible/@ownedTags.0"
          name="union_signature_compatible" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**In a complete model, if a source Port has delegation connectors to a set of delegated target Ports, then the union of the Interfaces of these target Ports must be signature compatible with the Interface that types the source Port.&#xD;&#xA;true*/"
            object="#//@packages.0/Connector/union_signature_compatible"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Connector/assembly_connector/@ownedTags.0"
          name="assembly_connector" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An assembly connector must only be defined from a required Interface or Ports to a provided Interface or Port.&#xD;&#xA;true*/"
            object="#//@packages.0/Connector/assembly_connector"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="ConnectorKind">
      <ownedLiteral name="assembly"/>
      <ownedLiteral name="delegation"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Extension/@ownedTags.0"
        name="Extension" superType="#//@packages.0/Extension/@containedType.0">
      <ownedTags value="/**An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes.*/"
          object="#//@packages.0/Extension"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
      <ownedAttribute tag="#//@packages.0/Extension/isRequired/@ownedTags.0" name="isRequired"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isDerived="true">
        <ownedTags value="/**Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the multiplicity of the Property referenced by Extension::ownedEnd; a multiplicity of 1 means that isRequired is true, but otherwise it is false. Since the default multiplicity of an ExtensionEnd is 0..1, the default value of isRequired is false.*/"
            object="#//@packages.0/Extension/isRequired"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Extension/isRequired/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Extension/isRequired/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Extension/isRequired/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Extension/isRequired/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Extension/metaclass/@ownedTags.0" name="metaclass"
          type="#//@packages.0/Extension/metaclass/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/Class/extension" isDerived="true">
        <ownedTags value="/**References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd.*/"
            object="#//@packages.0/Extension/metaclass"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Extension/metaclass/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Extension/metaclass/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Extension/metaclass/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Extension/metaclass/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Extension/non_owned_end/@ownedTags.0" name="non_owned_end"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The non-owned end of an Extension is typed by a Class.&#xD;&#xA;metaclassEnd()->notEmpty() and metaclass()->oclIsKindOf(Class)*/"
            object="#//@packages.0/Extension/non_owned_end"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Extension/is_binary/@ownedTags.0" name="is_binary"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An Extension is binary, i.e., it has only two memberEnds.&#xD;&#xA;memberEnd->size() = 2*/"
            object="#//@packages.0/Extension/is_binary"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Extension/getStereotypeEnd/@ownedTags.0"
          name="getStereotypeEnd" type="#//@packages.0/Extension/getStereotypeEnd/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the extension end that is typed by a stereotype (as opposed to a metaclass).*/"
            object="#//@packages.0/Extension/getStereotypeEnd"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Extension/getStereotype/@ownedTags.0" name="getStereotype"
          type="#//@packages.0/Extension/getStereotype/@containedType.0" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the stereotype that extends a metaclass through this extension.*/"
            object="#//@packages.0/Extension/getStereotype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Extension/metaclassEnd/@ownedTags.0" name="metaclassEnd"
          type="#//@packages.0/Extension/metaclassEnd/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).&#xD;&#xA;result = memberEnd->reject(ownedEnd)*/"
            object="#//@packages.0/Extension/metaclassEnd"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Extension/getMetaclass/@ownedTags.0" name="getMetaclass"
          type="#//@packages.0/Extension/getMetaclass/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).&#xD;&#xA;result = metaclassEnd().type*/"
            object="#//@packages.0/Extension/getMetaclass"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Extension/isRequired.1/@ownedTags.0" name="isRequired"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.&#xD;&#xA;result = (ownedEnd->lowerBound() = 1)*/"
            object="#//@packages.0/Extension/isRequired.1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExtensionEnd/@ownedTags.0"
        name="ExtensionEnd" superType="#//@packages.0/ExtensionEnd/@containedType.0">
      <ownedTags value="/**An extension end is used to tie an extension to a stereotype when extending a metaclass.&#xD;&#xA;The default multiplicity of an extension end is 0..1.*/"
          object="#//@packages.0/ExtensionEnd"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      <ownedOperation tag="#//@packages.0/ExtensionEnd/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of ExtensionEnd is 0..1 or 1.&#xD;&#xA;(self->lowerBound() = 0 or self->lowerBound() = 1) and self->upperBound() = 1*/"
            object="#//@packages.0/ExtensionEnd/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ExtensionEnd/aggregation/@ownedTags.0" name="aggregation"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The aggregation of an ExtensionEnd is composite.&#xD;&#xA;self.aggregation = #composite*/"
            object="#//@packages.0/ExtensionEnd/aggregation"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Stereotype/@ownedTags.0"
        name="Stereotype" superType="#//@packages.0/Stereotype/@containedType.0">
      <ownedTags value="/**A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.*/"
          object="#//@packages.0/Stereotype"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      <ownedAttribute tag="#//@packages.0/Stereotype/icon/@ownedTags.0" name="icon"
          type="#//@packages.0/Stereotype/icon/@containedType.0" upper="-1" isComposite="true">
        <ownedTags value="/**Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.*/"
            object="#//@packages.0/Stereotype/icon"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Image"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Stereotype/name_not_clash/@ownedTags.0"
          name="name_not_clash" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Stereotype names should not clash with keyword names for the extended model element.&#xD;&#xA;true*/"
            object="#//@packages.0/Stereotype/name_not_clash"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/generalize/@ownedTags.0" name="generalize"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A Stereotype may only generalize or specialize another Stereotype.&#xD;&#xA;generalization.general->forAll(e |e.oclIsKindOf(Stereotype)) and generalization.specific->forAll(e | e.oclIsKindOf(Stereotype)) */"
            object="#//@packages.0/Stereotype/generalize"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/createExtension/@ownedTags.0"
          name="createExtension" type="#//@packages.0/Stereotype/createExtension/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a(n) (required) extension of the specified metaclass with this stereotype.*/"
            object="#//@packages.0/Stereotype/createExtension"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Extension"/>
        <ownedParameter name="metaclass" type="#//@packages.0/Stereotype/createExtension/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
        </ownedParameter>
        <ownedParameter name="isRequired" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/getProfile/@ownedTags.0" name="getProfile"
          type="#//@packages.0/Stereotype/getProfile/@containedType.0" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the profile that owns this stereotype.*/" object="#//@packages.0/Stereotype/getProfile"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/getKeyword/@ownedTags.0" name="getKeyword"
          type="#//@packages.0/String" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the localized keyword for this stereotype.*/"
            object="#//@packages.0/Stereotype/getKeyword"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/op_getKeyword/@ownedTags.0" name="op_getKeyword"
          type="#//@packages.0/String" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the keyword for this stereotype, localized if indicated.*/"
            object="#//@packages.0/Stereotype/op_getKeyword"/>
        <ownedParameter name="localize" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/getExtendedMetaclasses/@ownedTags.0"
          name="getExtendedMetaclasses" type="#//@packages.0/Stereotype/getExtendedMetaclasses/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the metaclasses extended by this stereotype.*/"
            object="#//@packages.0/Stereotype/getExtendedMetaclasses"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/getAllExtendedMetaclasses/@ownedTags.0"
          name="getAllExtendedMetaclasses" type="#//@packages.0/Stereotype/getAllExtendedMetaclasses/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves all the metaclasses extended by this stereotype, including the metaclasses extended by its superstereotypes.*/"
            object="#//@packages.0/Stereotype/getAllExtendedMetaclasses"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/getDefinition/@ownedTags.0" name="getDefinition"
          type="#//@packages.0/Stereotype/getDefinition/@containedType.0" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the current definition (Ecore representation) of this stereotype.*/"
            object="#//@packages.0/Stereotype/getDefinition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EClass"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/createIcon/@ownedTags.0" name="createIcon"
          type="#//@packages.0/Stereotype/createIcon/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an icon with the specified location for this stereotype.*/"
            object="#//@packages.0/Stereotype/createIcon"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Image"/>
        <ownedParameter name="location" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Stereotype/op_createIcon/@ownedTags.0" name="op_createIcon"
          type="#//@packages.0/Stereotype/op_createIcon/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an icon with the specified format and content for this stereotype.*/"
            object="#//@packages.0/Stereotype/op_createIcon"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Image"/>
        <ownedParameter name="format" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="content" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Image/@ownedTags.0"
        name="Image" superType="#//@packages.0/Image/@containedType.0">
      <ownedTags value="/**Physical definition of a graphical image.*/" object="#//@packages.0/Image"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/Image/content/@ownedTags.0" name="content"
          type="#//@packages.0/String" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based).*/"
            object="#//@packages.0/Image/content"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Image/location/@ownedTags.0" name="location"
          type="#//@packages.0/String" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype.*/"
            object="#//@packages.0/Image/location"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Image/format/@ownedTags.0" name="format"
          type="#//@packages.0/String" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**This indicates the format of the content - which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP.&#xD;&#xA;&#xD;&#xA;In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example &quot;SVG&quot; could instead be expressed as &quot;MIME: image/svg+xml&quot;.*/"
            object="#//@packages.0/Image/format"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Profile/@ownedTags.0"
        name="Profile" superType="#//@packages.0/Profile/@containedType.0">
      <ownedTags value="/**A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.*/"
          object="#//@packages.0/Profile"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
      <ownedAttribute tag="#//@packages.0/Profile/ownedStereotype/@ownedTags.0" name="ownedStereotype"
          type="#//@packages.0/Profile/ownedStereotype/@containedType.0" upper="-1"
          isDerived="true">
        <ownedTags value="/**References the Stereotypes that are owned by the Profile.*/"
            object="#//@packages.0/Profile/ownedStereotype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Profile/ownedStereotype/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Profile/ownedStereotype/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Profile/ownedStereotype/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Profile/ownedStereotype/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Profile/metaclassReference/@ownedTags.0"
          name="metaclassReference" type="#//@packages.0/Profile/metaclassReference/@containedType.0"
          upper="-1">
        <ownedTags value="/**References a metaclass that may be extended.*/" object="#//@packages.0/Profile/metaclassReference"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ElementImport"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Profile/metamodelReference/@ownedTags.0"
          name="metamodelReference" type="#//@packages.0/Profile/metamodelReference/@containedType.0"
          upper="-1">
        <ownedTags value="/**References a package containing (directly or indirectly) metaclasses that may be extended.*/"
            object="#//@packages.0/Profile/metamodelReference"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageImport"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Profile/metaclass_reference_not_specialized/@ownedTags.0"
          name="metaclass_reference_not_specialized" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An element imported as a metaclassReference is not specialized or generalized in a Profile.&#xD;&#xA;self.metaclassReference.importedElement->&#xD;&#xA;  select(c | c.oclIsKindOf(Classifier) and&#xD;&#xA;    (c.generalization.namespace = self or&#xD;&#xA;      (c.specialization.namespace = self) )->isEmpty()*/"
            object="#//@packages.0/Profile/metaclass_reference_not_specialized"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/references_same_metamodel/@ownedTags.0"
          name="references_same_metamodel" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel.&#xD;&#xA;self.metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages())->&#xD;&#xA;  union(self.metaclassReference.importedElement.allOwningPackages() )->notEmpty()*/"
            object="#//@packages.0/Profile/references_same_metamodel"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/create/@ownedTags.0" name="create"
          type="#//@packages.0/Profile/create/@containedType.0" isOrdered="true" lower="1"
          upper="1" isAbstract="true">
        <ownedTags value="/**Creates and returns an instance of (the Ecore representation of) the specified classifier defined in this profile.*/"
            object="#//@packages.0/Profile/create"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EObject"/>
        <ownedParameter name="classifier" type="#//@packages.0/Profile/create/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/createOwnedStereotype/@ownedTags.0"
          name="createOwnedStereotype" type="#//@packages.0/Profile/createOwnedStereotype/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a(n) (abstract) stereotype with the specified name as an owned stereotype of this profile.*/"
            object="#//@packages.0/Profile/createOwnedStereotype"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Stereotype"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="isAbstract" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/isDefined/@ownedTags.0" name="isDefined"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether this profile is defined.*/" object="#//@packages.0/Profile/isDefined"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/define/@ownedTags.0" name="define"
          type="#//@packages.0/Profile/define/@containedType.0" isOrdered="true" upper="1"
          isAbstract="true">
        <ownedTags value="/**Defines this profile by (re)creating Ecore representations of its current contents.*/"
            object="#//@packages.0/Profile/define"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EPackage"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/op_define/@ownedTags.0" name="op_define"
          type="#//@packages.0/Profile/op_define/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Defines this profile by (re)creating Ecore representations of its current contents, using the specified options, diagnostics, and context.*/"
            object="#//@packages.0/Profile/op_define"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EPackage"/>
        <ownedParameter name="options" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" lower="1" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/getDefinition/@ownedTags.0" name="getDefinition"
          type="#//@packages.0/Profile/getDefinition/@containedType.0" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the current definition (Ecore representation) of this profile.*/"
            object="#//@packages.0/Profile/getDefinition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EPackage"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/op_getDefinition/@ownedTags.0" name="op_getDefinition"
          type="#//@packages.0/Profile/op_getDefinition/@containedType.0" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the current definition (Ecore representation) of the specified named element in this profile.*/"
            object="#//@packages.0/Profile/op_getDefinition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/ENamedElement"/>
        <ownedParameter name="namedElement" type="#//@packages.0/Profile/op_getDefinition/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/getReferencedMetaclasses/@ownedTags.0"
          name="getReferencedMetaclasses" type="#//@packages.0/Profile/getReferencedMetaclasses/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the metaclasses referenced by this profile.*/"
            object="#//@packages.0/Profile/getReferencedMetaclasses"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/getReferencedMetamodels/@ownedTags.0"
          name="getReferencedMetamodels" type="#//@packages.0/Profile/getReferencedMetamodels/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the metamodels referenced by this profile.*/"
            object="#//@packages.0/Profile/getReferencedMetamodels"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Model"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Profile/getOwnedExtensions/@ownedTags.0"
          name="getOwnedExtensions" type="#//@packages.0/Profile/getOwnedExtensions/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Retrieves the extensions owned by this profile, excluding non-required extensions if indicated.*/"
            object="#//@packages.0/Profile/getOwnedExtensions"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Extension"/>
        <ownedParameter name="requiredOnly" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Model/@ownedTags.0"
        name="Model" superType="#//@packages.0/Model/@containedType.0">
      <ownedTags value="/**A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.*/"
          object="#//@packages.0/Model"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
      <ownedAttribute tag="#//@packages.0/Model/viewpoint/@ownedTags.0" name="viewpoint"
          type="#//@packages.0/String" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The name of the viewpoint that is expressed by a model (This name may refer to a profile definition).*/"
            object="#//@packages.0/Model/viewpoint"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Model/isMetamodel/@ownedTags.0" name="isMetamodel"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Determines whether this model is a metamodel.*/" object="#//@packages.0/Model/isMetamodel"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ParameterSet/@ownedTags.0"
        name="ParameterSet" superType="#//@packages.0/ParameterSet/@containedType.0">
      <ownedTags value="/**A parameter set is an element that provides alternative sets of inputs or outputs that a behavior may use.*/"
          object="#//@packages.0/ParameterSet"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/ParameterSet/parameter/@ownedTags.0" name="parameter"
          type="#//@packages.0/ParameterSet/parameter/@containedType.0" lower="1"
          upper="-1" opposite="#//@packages.0/Parameter/parameterSet">
        <ownedTags value="/**Parameters in the parameter set.*/" object="#//@packages.0/ParameterSet/parameter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Parameter"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ParameterSet/condition/@ownedTags.0" name="condition"
          type="#//@packages.0/ParameterSet/condition/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**Constraint that should be satisfied for the owner of the parameters in an input parameter set to start execution using the values provided for those parameters, or the owner of the parameters in an output parameter set to end execution providing the values for those parameters, if all preconditions and conditions on input parameter sets were satisfied.*/"
            object="#//@packages.0/ParameterSet/condition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ParameterSet/same_parameterized_entity/@ownedTags.0"
          name="same_parameterized_entity" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The parameters in a parameter set must all be inputs or all be outputs of the same parameterized entity, and the parameter set is owned by that entity.&#xD;&#xA;true*/"
            object="#//@packages.0/ParameterSet/same_parameterized_entity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ParameterSet/input/@ownedTags.0" name="input"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If a behavior has input parameters that are in a parameter set, then any inputs that are not in a parameter set must be streaming. Same for output parameters.&#xD;&#xA;true*/"
            object="#//@packages.0/ParameterSet/input"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ParameterSet/two_parameter_sets/@ownedTags.0"
          name="two_parameter_sets" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Two parameter sets cannot have exactly the same set of parameters.&#xD;&#xA;true*/"
            object="#//@packages.0/ParameterSet/two_parameter_sets"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="CallConcurrencyKind">
      <ownedLiteral name="sequential"/>
      <ownedLiteral name="guarded"/>
      <ownedLiteral name="concurrent"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DataType/@ownedTags.0"
        name="DataType" superType="#//@packages.0/DataType/@containedType.0">
      <ownedTags value="/**A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.*/"
          object="#//@packages.0/DataType"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      <ownedAttribute tag="#//@packages.0/DataType/ownedAttribute/@ownedTags.0" name="ownedAttribute"
          type="#//@packages.0/DataType/ownedAttribute/@containedType.0" isOrdered="true"
          upper="-1" opposite="#//@packages.0/Property/datatype" isComposite="true">
        <ownedTags value="/**The Attributes owned by the DataType.*/" object="#//@packages.0/DataType/ownedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/DataType/ownedOperation/@ownedTags.0" name="ownedOperation"
          type="#//@packages.0/DataType/ownedOperation/@containedType.0" isOrdered="true"
          upper="-1" opposite="#//@packages.0/Operation/datatype" isComposite="true">
        <ownedTags value="/**The Operations owned by the DataType.*/" object="#//@packages.0/DataType/ownedOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/DataType/createOwnedOperation/@ownedTags.0"
          name="createOwnedOperation" type="#//@packages.0/DataType/createOwnedOperation/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this data type.*/"
            object="#//@packages.0/DataType/createOwnedOperation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="parameterNames" type="#//@packages.0/String" upper="-1"/>
        <ownedParameter name="parameterTypes" type="#//@packages.0/DataType/createOwnedOperation/@ownedParameter.2/@containedType.0"
            upper="-1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="returnType" type="#//@packages.0/DataType/createOwnedOperation/@ownedParameter.3/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/DataType/createOwnedAttribute/@ownedTags.0"
          name="createOwnedAttribute" type="#//@packages.0/DataType/createOwnedAttribute/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this data type.*/"
            object="#//@packages.0/DataType/createOwnedAttribute"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            upper="1"/>
        <ownedParameter name="type" type="#//@packages.0/DataType/createOwnedAttribute/@ownedParameter.1/@containedType.0"
            isOrdered="true" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Type"/>
        </ownedParameter>
        <ownedParameter name="lower" type="#//@packages.0/Integer" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="upper" type="#//@packages.0/UnlimitedNatural" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/OperationTemplateParameter/@ownedTags.0"
        name="OperationTemplateParameter" superType="#//@packages.0/OperationTemplateParameter/@containedType.0">
      <ownedTags value="/**An operation template parameter exposes an operation as a formal parameter for a template.*/"
          object="#//@packages.0/OperationTemplateParameter"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/StructuralFeature/@ownedTags.0"
        name="StructuralFeature" isAbstract="true" superType="#//@packages.0/StructuralFeature/@containedType.0 #//@packages.0/StructuralFeature/@containedType.1 #//@packages.0/StructuralFeature/@containedType.2">
      <ownedTags value="/**A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.&#xD;&#xA;By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.*/"
          object="#//@packages.0/StructuralFeature"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Feature"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TypedElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MultiplicityElement"/>
      <ownedAttribute tag="#//@packages.0/StructuralFeature/isReadOnly/@ownedTags.0"
          name="isReadOnly" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**States whether the feature's value may be modified by a client.*/"
            object="#//@packages.0/StructuralFeature/isReadOnly"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="AggregationKind">
      <ownedLiteral name="none"/>
      <ownedLiteral name="shared"/>
      <ownedLiteral name="composite"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="ParameterDirectionKind">
      <ownedLiteral name="in"/>
      <ownedLiteral name="inout"/>
      <ownedLiteral name="out"/>
      <ownedLiteral name="return"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="ParameterEffectKind">
      <ownedLiteral name="create"/>
      <ownedLiteral name="read"/>
      <ownedLiteral name="update"/>
      <ownedLiteral name="delete"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CollaborationUse/@ownedTags.0"
        name="CollaborationUse" superType="#//@packages.0/CollaborationUse/@containedType.0">
      <ownedTags value="/**A collaboration use represents one particular use of a collaboration to explain the relationships between the properties of a classifier. A collaboration use shows how the pattern described by a collaboration is applied in a given context, by binding specific entities from that context to the roles of the collaboration. Depending on the context, these entities could be structural features of a classifier, instance specifications, or even roles in some containing collaboration. There may be multiple occurrences of a given collaboration within a classifier, each involving a different set of roles and connectors. A given role or connector may be involved in multiple occurrences of the same or different collaborations.&#xD;&#xA;Associated dependencies map features of the collaboration type to features in the classifier. These dependencies indicate which role in the classifier plays which role in the collaboration.*/"
          object="#//@packages.0/CollaborationUse"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/CollaborationUse/type/@ownedTags.0" name="type"
          type="#//@packages.0/CollaborationUse/type/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The collaboration which is used in this occurrence. The collaboration defines the cooperation between its roles which are mapped to properties of the classifier owning the collaboration use.*/"
            object="#//@packages.0/CollaborationUse/type"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Collaboration"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/CollaborationUse/roleBinding/@ownedTags.0"
          name="roleBinding" type="#//@packages.0/CollaborationUse/roleBinding/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**A mapping between features of the collaboration type and features of the classifier or operation. This mapping indicates which connectable element of the classifier or operation plays which role(s) in the collaboration. A connectable element may be bound to multiple roles in the same collaboration use (that is, it may play multiple roles).&#xD;&#xA;*/"
            object="#//@packages.0/CollaborationUse/roleBinding"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Dependency"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/CollaborationUse/client_elements/@ownedTags.0"
          name="client_elements" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**All the client elements of a roleBinding are in one classifier and all supplier elements of a roleBinding are in one collaboration and they are compatible.&#xD;&#xA;true*/"
            object="#//@packages.0/CollaborationUse/client_elements"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CollaborationUse/every_role/@ownedTags.0"
          name="every_role" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Every role in the collaboration is bound within the collaboration use to a connectable element within the classifier or operation.&#xD;&#xA;true*/"
            object="#//@packages.0/CollaborationUse/every_role"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CollaborationUse/connectors/@ownedTags.0"
          name="connectors" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The connectors in the classifier connect according to the connectors in the collaboration&#xD;&#xA;true*/"
            object="#//@packages.0/CollaborationUse/connectors"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Collaboration/@ownedTags.0"
        name="Collaboration" superType="#//@packages.0/Collaboration/@containedType.0 #//@packages.0/Collaboration/@containedType.1">
      <ownedTags value="/**A collaboration use represents the application of the pattern described by a collaboration to a specific situation involving specific classes or instances playing the roles of the collaboration.*/"
          object="#//@packages.0/Collaboration"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioredClassifier"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredClassifier"/>
      <ownedAttribute tag="#//@packages.0/Collaboration/collaborationRole/@ownedTags.0"
          name="collaborationRole" type="#//@packages.0/Collaboration/collaborationRole/@containedType.0"
          upper="-1">
        <ownedTags value="/**References connectable elements (possibly owned by other classifiers) which represent roles that instances may play in this collaboration.*/"
            object="#//@packages.0/Collaboration/collaborationRole"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectableElement"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/UseCase/@ownedTags.0"
        name="UseCase" superType="#//@packages.0/UseCase/@containedType.0">
      <ownedTags value="/**A use case is the specification of a set of actions performed by a system, which yields an observable result that is, typically, of value for one or more actors or other stakeholders of the system.*/"
          object="#//@packages.0/UseCase"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioredClassifier"/>
      <ownedAttribute tag="#//@packages.0/UseCase/include/@ownedTags.0" name="include"
          type="#//@packages.0/UseCase/include/@containedType.0" upper="-1" opposite="#//@packages.0/Include/includingCase"
          isComposite="true">
        <ownedTags value="/**References the Include relationships owned by this use case.*/"
            object="#//@packages.0/UseCase/include"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Include"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/UseCase/extend/@ownedTags.0" name="extend"
          type="#//@packages.0/UseCase/extend/@containedType.0" upper="-1" opposite="#//@packages.0/Extend/extension"
          isComposite="true">
        <ownedTags value="/**References the Extend relationships owned by this use case.*/"
            object="#//@packages.0/UseCase/extend"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Extend"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/UseCase/extensionPoint/@ownedTags.0" name="extensionPoint"
          type="#//@packages.0/UseCase/extensionPoint/@containedType.0" upper="-1"
          opposite="#//@packages.0/ExtensionPoint/useCase" isComposite="true">
        <ownedTags value="/**References the ExtensionPoints owned by the use case.*/"
            object="#//@packages.0/UseCase/extensionPoint"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExtensionPoint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/UseCase/subject/@ownedTags.0" name="subject"
          type="#//@packages.0/UseCase/subject/@containedType.0" upper="-1" opposite="#//@packages.0/Classifier/useCase">
        <ownedTags value="/**References the subjects to which this use case applies. The subject or its parts realize all the use cases that apply to this subject. Use cases need not be attached to any specific subject, however. The subject may, but need not, own the use cases that apply to it.*/"
            object="#//@packages.0/UseCase/subject"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/UseCase/must_have_name/@ownedTags.0" name="must_have_name"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A UseCase must have a name.&#xD;&#xA;self.name -> notEmpty ()*/"
            object="#//@packages.0/UseCase/must_have_name"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UseCase/binary_associations/@ownedTags.0"
          name="binary_associations" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**UseCases can only be involved in binary Associations.&#xD;&#xA;true*/"
            object="#//@packages.0/UseCase/binary_associations"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UseCase/no_association_to_use_case/@ownedTags.0"
          name="no_association_to_use_case" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**UseCases can not have Associations to UseCases specifying the same subject.&#xD;&#xA;true*/"
            object="#//@packages.0/UseCase/no_association_to_use_case"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UseCase/cannot_include_self/@ownedTags.0"
          name="cannot_include_self" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A use case cannot include use cases that directly or indirectly include it.&#xD;&#xA;not self.allIncludedUseCases()->includes(self)*/"
            object="#//@packages.0/UseCase/cannot_include_self"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UseCase/allIncludedUseCases/@ownedTags.0"
          name="allIncludedUseCases" type="#//@packages.0/UseCase/allIncludedUseCases/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**The query allIncludedUseCases() returns the transitive closure of all use cases (directly or indirectly) included by this use case.&#xD;&#xA;result = self.include->union(self.include->collect(in | in.allIncludedUseCases()))*/"
            object="#//@packages.0/UseCase/allIncludedUseCases"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/UseCase"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Include/@ownedTags.0"
        name="Include" superType="#//@packages.0/Include/@containedType.0 #//@packages.0/Include/@containedType.1">
      <ownedTags value="/**An include relationship defines that a use case contains the behavior defined in another use case.*/"
          object="#//@packages.0/Include"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/Include/addition/@ownedTags.0" name="addition"
          type="#//@packages.0/Include/addition/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**References the use case that is to be included.&#xD;&#xA;*/"
            object="#//@packages.0/Include/addition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/UseCase"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Include/includingCase/@ownedTags.0" name="includingCase"
          type="#//@packages.0/Include/includingCase/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/UseCase/include">
        <ownedTags value="/**References the use case which will include the addition and owns the include relationship.*/"
            object="#//@packages.0/Include/includingCase"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/UseCase"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Extend/@ownedTags.0"
        name="Extend" superType="#//@packages.0/Extend/@containedType.0 #//@packages.0/Extend/@containedType.1">
      <ownedTags value="/**A relationship from an extending use case to an extended use case that specifies how and when the behavior defined in the extending use case can be inserted into the behavior defined in the extended use case.*/"
          object="#//@packages.0/Extend"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/Extend/extendedCase/@ownedTags.0" name="extendedCase"
          type="#//@packages.0/Extend/extendedCase/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**References the use case that is being extended.*/" object="#//@packages.0/Extend/extendedCase"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/UseCase"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Extend/condition/@ownedTags.0" name="condition"
          type="#//@packages.0/Extend/condition/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**References the condition that must hold when the first extension point is reached for the extension to take place. If no constraint is associated with the extend relationship, the extension is unconditional.&#xD;&#xA;*/"
            object="#//@packages.0/Extend/condition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Extend/extensionLocation/@ownedTags.0" name="extensionLocation"
          type="#//@packages.0/Extend/extensionLocation/@containedType.0" isOrdered="true"
          lower="1" upper="-1">
        <ownedTags value="/**An ordered list of extension points belonging to the extended use case, specifying where the respective behavioral fragments of the extending use case are to be inserted. The first fragment in the extending use case is associated with the first extension point in the list, the second fragment with the second point, and so on. (Note that, in most practical cases, the extending use case has just a single behavior fragment, so that the list of extension points is trivial.)&#xD;&#xA;*/"
            object="#//@packages.0/Extend/extensionLocation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExtensionPoint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Extend/extension/@ownedTags.0" name="extension"
          type="#//@packages.0/Extend/extension/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/UseCase/extend">
        <ownedTags value="/**References the use case that represents the extension and owns the extend relationship.*/"
            object="#//@packages.0/Extend/extension"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/UseCase"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Extend/extension_points/@ownedTags.0" name="extension_points"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The extension points referenced by the extend relationship must belong to the use case that is being extended.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))*/"
            object="#//@packages.0/Extend/extension_points"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExtensionPoint/@ownedTags.0"
        name="ExtensionPoint" superType="#//@packages.0/ExtensionPoint/@containedType.0">
      <ownedTags value="/**An extension point identifies a point in the behavior of a use case where that behavior can be extended by the behavior of some other (extending) use case, as specified by an extend relationship.*/"
          object="#//@packages.0/ExtensionPoint"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
      <ownedAttribute tag="#//@packages.0/ExtensionPoint/useCase/@ownedTags.0" name="useCase"
          type="#//@packages.0/ExtensionPoint/useCase/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/UseCase/extensionPoint">
        <ownedTags value="/**References the use case that owns this extension point.*/"
            object="#//@packages.0/ExtensionPoint/useCase"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/UseCase"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ExtensionPoint/must_have_name/@ownedTags.0"
          name="must_have_name" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An ExtensionPoint must have a name.&#xD;&#xA;self.name->notEmpty ()*/"
            object="#//@packages.0/ExtensionPoint/must_have_name"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/RedefinableTemplateSignature/@ownedTags.0"
        name="RedefinableTemplateSignature" superType="#//@packages.0/RedefinableTemplateSignature/@containedType.0 #//@packages.0/RedefinableTemplateSignature/@containedType.1">
      <ownedTags value="/**A redefinable template signature supports the addition of formal template parameters in a specialization of a template classifier.*/"
          object="#//@packages.0/RedefinableTemplateSignature"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateSignature"/>
      <ownedAttribute tag="#//@packages.0/RedefinableTemplateSignature/extendedSignature/@ownedTags.0"
          name="extendedSignature" type="#//@packages.0/RedefinableTemplateSignature/extendedSignature/@containedType.0"
          upper="-1">
        <ownedTags value="/**The template signature that is extended by this template signature.*/"
            object="#//@packages.0/RedefinableTemplateSignature/extendedSignature"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableTemplateSignature"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/RedefinableTemplateSignature/inheritedParameter/@ownedTags.0"
          name="inheritedParameter" type="#//@packages.0/RedefinableTemplateSignature/inheritedParameter/@containedType.0"
          upper="-1" isDerived="true">
        <ownedTags value="/**The formal template parameters of the extendedSignature.*/"
            object="#//@packages.0/RedefinableTemplateSignature/inheritedParameter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/RedefinableTemplateSignature/inheritedParameter/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/RedefinableTemplateSignature/inheritedParameter/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/RedefinableTemplateSignature/inheritedParameter/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/RedefinableTemplateSignature/inheritedParameter/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/RedefinableTemplateSignature/classifier/@ownedTags.0"
          name="classifier" type="#//@packages.0/RedefinableTemplateSignature/classifier/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The classifier that owns this template signature.*/"
            object="#//@packages.0/RedefinableTemplateSignature/classifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/RedefinableTemplateSignature/inherited_parameters/@ownedTags.0"
          name="inherited_parameters" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The inherited parameters are the parameters of the extended template signature.&#xD;&#xA;if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter endif*/"
            object="#//@packages.0/RedefinableTemplateSignature/inherited_parameters"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getInheritedParameters" type="#//@packages.0/RedefinableTemplateSignature/getInheritedParameters/@containedType.0"
          upper="-1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ClassifierTemplateParameter/@ownedTags.0"
        name="ClassifierTemplateParameter" superType="#//@packages.0/ClassifierTemplateParameter/@containedType.0">
      <ownedTags value="/**A classifier template parameter exposes a classifier as a formal template parameter.*/"
          object="#//@packages.0/ClassifierTemplateParameter"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateParameter"/>
      <ownedAttribute tag="#//@packages.0/ClassifierTemplateParameter/allowSubstitutable/@ownedTags.0"
          name="allowSubstitutable" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.*/"
            object="#//@packages.0/ClassifierTemplateParameter/allowSubstitutable"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ClassifierTemplateParameter/defaultClassifier/@ownedTags.0"
          name="defaultClassifier" type="#//@packages.0/ClassifierTemplateParameter/defaultClassifier/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**The classifier that is used by default if no argument is provided during template binding. If this property is empty, then there is no default.*/"
            object="#//@packages.0/ClassifierTemplateParameter/defaultClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ClassifierTemplateParameter/constrainingClassifier/@ownedTags.0"
          name="constrainingClassifier" type="#//@packages.0/ClassifierTemplateParameter/constrainingClassifier/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**The classifier that constrains the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any classifier that is compatible with this constraining classifier can be substituted, otherwise it must be either this classifier or one of its subclasses. If this property is empty, there are no constraints on the classifier that can be used as an argument.*/"
            object="#//@packages.0/ClassifierTemplateParameter/constrainingClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ClassifierTemplateParameter/has_constraining_classifier/@ownedTags.0"
          name="has_constraining_classifier" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If &quot;allowSubstitutable&quot; is true, then there must be a constrainingClassifier.&#xD;&#xA;allowSubstitutable implies constrainingClassifier->notEmpty()*/"
            object="#//@packages.0/ClassifierTemplateParameter/has_constraining_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/StringExpression/@ownedTags.0"
        name="StringExpression" superType="#//@packages.0/StringExpression/@containedType.0 #//@packages.0/StringExpression/@containedType.1">
      <ownedTags value="/**An expression that specifies a string value that is derived by concatenating a set of sub string expressions, some of which might be template parameters.*/"
          object="#//@packages.0/StringExpression"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Expression"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TemplateableElement"/>
      <ownedAttribute tag="#//@packages.0/StringExpression/subExpression/@ownedTags.0"
          name="subExpression" type="#//@packages.0/StringExpression/subExpression/@containedType.0"
          upper="-1" opposite="#//@packages.0/StringExpression/owningExpression" isComposite="true">
        <ownedTags value="/**The StringExpressions that constitute this StringExpression.*/"
            object="#//@packages.0/StringExpression/subExpression"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StringExpression"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StringExpression/owningExpression/@ownedTags.0"
          name="owningExpression" type="#//@packages.0/StringExpression/owningExpression/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/StringExpression/subExpression">
        <ownedTags value="/**The string expression of which this expression is a substring.*/"
            object="#//@packages.0/StringExpression/owningExpression"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StringExpression"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/StringExpression/operands/@ownedTags.0"
          name="operands" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**All the operands of a StringExpression must be LiteralStrings&#xD;&#xA;operand->forAll (op | op.oclIsKindOf (LiteralString))*/"
            object="#//@packages.0/StringExpression/operands"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StringExpression/subexpressions/@ownedTags.0"
          name="subexpressions" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to&#xA;define a collating sequence between operands and subexpressions).&#xA;&#xD;&#xA;if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty()*/"
            object="#//@packages.0/StringExpression/subexpressions"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Expression/@ownedTags.0"
        name="Expression" superType="#//@packages.0/Expression/@containedType.0">
      <ownedTags value="/**An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.&#xD;&#xA;An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications.*/"
          object="#//@packages.0/Expression"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      <ownedAttribute tag="#//@packages.0/Expression/symbol/@ownedTags.0" name="symbol"
          type="#//@packages.0/String" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The symbol associated with the node in the expression tree.*/"
            object="#//@packages.0/Expression/symbol"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Expression/operand/@ownedTags.0" name="operand"
          type="#//@packages.0/Expression/operand/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**Specifies a sequence of operands.*/" object="#//@packages.0/Expression/operand"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Usage/@ownedTags.0"
        name="Usage" superType="#//@packages.0/Usage/@containedType.0">
      <ownedTags value="/**A usage is a relationship in which one element requires another element (or set of elements) for its full implementation or operation. A usage is a dependency in which the client requires the presence of the supplier.*/"
          object="#//@packages.0/Usage"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Dependency"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/PackageMerge/@ownedTags.0"
        name="PackageMerge" superType="#//@packages.0/PackageMerge/@containedType.0">
      <ownedTags value="/**A package merge defines how the contents of one package are extended by the contents of another package.*/"
          object="#//@packages.0/PackageMerge"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/PackageMerge/mergedPackage/@ownedTags.0"
          name="mergedPackage" type="#//@packages.0/PackageMerge/mergedPackage/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**References the Package that is to be merged with the receiving package of the PackageMerge.*/"
            object="#//@packages.0/PackageMerge/mergedPackage"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/PackageMerge/receivingPackage/@ownedTags.0"
          name="receivingPackage" type="#//@packages.0/PackageMerge/receivingPackage/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/Package/packageMerge">
        <ownedTags value="/**References the Package that is being extended with the contents of the merged package of the PackageMerge.*/"
            object="#//@packages.0/PackageMerge/receivingPackage"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ProfileApplication/@ownedTags.0"
        name="ProfileApplication" superType="#//@packages.0/ProfileApplication/@containedType.0">
      <ownedTags value="/**A profile application is used to show which profiles have been applied to a package.*/"
          object="#//@packages.0/ProfileApplication"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/ProfileApplication/appliedProfile/@ownedTags.0"
          name="appliedProfile" type="#//@packages.0/ProfileApplication/appliedProfile/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**References the Profiles that are applied to a Package through this ProfileApplication.*/"
            object="#//@packages.0/ProfileApplication/appliedProfile"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Profile"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ProfileApplication/isStrict/@ownedTags.0"
          name="isStrict" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.*/"
            object="#//@packages.0/ProfileApplication/isStrict"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ProfileApplication/applyingPackage/@ownedTags.0"
          name="applyingPackage" type="#//@packages.0/ProfileApplication/applyingPackage/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/Package/profileApplication">
        <ownedTags value="/**The package that owns the profile application.*/" object="#//@packages.0/ProfileApplication/applyingPackage"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Package"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ProfileApplication/getAppliedDefinition/@ownedTags.0"
          name="getAppliedDefinition" type="#//@packages.0/ProfileApplication/getAppliedDefinition/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the definition (Ecore representation) of the profile associated with this profile application.*/"
            object="#//@packages.0/ProfileApplication/getAppliedDefinition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/EPackage"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ProfileApplication/op_getAppliedDefinition/@ownedTags.0"
          name="op_getAppliedDefinition" type="#//@packages.0/ProfileApplication/op_getAppliedDefinition/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Retrieves the definition (Ecore representation) of the specified named element in the profile associated with this profile application.*/"
            object="#//@packages.0/ProfileApplication/op_getAppliedDefinition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition Ecore.km#//@packages.0/ENamedElement"/>
        <ownedParameter name="namedElement" type="#//@packages.0/ProfileApplication/op_getAppliedDefinition/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        </ownedParameter>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Enumeration/@ownedTags.0"
        name="Enumeration" superType="#//@packages.0/Enumeration/@containedType.0">
      <ownedTags value="/**An enumeration is a data type whose values are enumerated in the model as enumeration literals.*/"
          object="#//@packages.0/Enumeration"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DataType"/>
      <ownedAttribute tag="#//@packages.0/Enumeration/ownedLiteral/@ownedTags.0" name="ownedLiteral"
          type="#//@packages.0/Enumeration/ownedLiteral/@containedType.0" isOrdered="true"
          upper="-1" opposite="#//@packages.0/EnumerationLiteral/enumeration" isComposite="true">
        <ownedTags value="/**The ordered set of literals for this Enumeration.*/"
            object="#//@packages.0/Enumeration/ownedLiteral"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/EnumerationLiteral"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/EnumerationLiteral/@ownedTags.0"
        name="EnumerationLiteral" superType="#//@packages.0/EnumerationLiteral/@containedType.0">
      <ownedTags value="/**An enumeration literal is a user-defined data value for an enumeration.*/"
          object="#//@packages.0/EnumerationLiteral"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InstanceSpecification"/>
      <ownedAttribute tag="#//@packages.0/EnumerationLiteral/enumeration/@ownedTags.0"
          name="enumeration" type="#//@packages.0/EnumerationLiteral/enumeration/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/Enumeration/ownedLiteral">
        <ownedTags value="/**The Enumeration that this EnumerationLiteral is a member of.*/"
            object="#//@packages.0/EnumerationLiteral/enumeration"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Enumeration"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InstanceSpecification/@ownedTags.0"
        name="InstanceSpecification" superType="#//@packages.0/InstanceSpecification/@containedType.0 #//@packages.0/InstanceSpecification/@containedType.1 #//@packages.0/InstanceSpecification/@containedType.2">
      <ownedTags value="/**An instance specification is a model element that represents an instance in a modeled system.&#xD;&#xA;An instance specification has the capability of being a deployment target in a deployment relationship, in the case that it is an instance of a node. It is also has the capability of being a deployed artifact, if it is an instance of an artifact.*/"
          object="#//@packages.0/InstanceSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DeploymentTarget"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DeployedArtifact"/>
      <ownedAttribute tag="#//@packages.0/InstanceSpecification/classifier/@ownedTags.0"
          name="classifier" type="#//@packages.0/InstanceSpecification/classifier/@containedType.0"
          upper="-1">
        <ownedTags value="/**The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.*/"
            object="#//@packages.0/InstanceSpecification/classifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InstanceSpecification/slot/@ownedTags.0"
          name="slot" type="#//@packages.0/InstanceSpecification/slot/@containedType.0"
          upper="-1" opposite="#//@packages.0/Slot/owningInstance" isComposite="true">
        <ownedTags value="/**A slot giving the value or values of a structural feature of the instance. An instance specification can have one slot per structural feature of its classifiers, including inherited features. It is not necessary to model a slot for each structural feature, in which case the instance specification is a partial description.*/"
            object="#//@packages.0/InstanceSpecification/slot"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Slot"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InstanceSpecification/specification/@ownedTags.0"
          name="specification" type="#//@packages.0/InstanceSpecification/specification/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**A specification of how to compute, derive, or construct the instance.*/"
            object="#//@packages.0/InstanceSpecification/specification"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/InstanceSpecification/defining_feature/@ownedTags.0"
          name="defining_feature" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The defining feature of each slot is a structural feature (directly or inherited) of a classifier of the instance specification.&#xD;&#xA;slot->forAll(s | classifier->exists (c | c.allFeatures()->includes (s.definingFeature)))*/"
            object="#//@packages.0/InstanceSpecification/defining_feature"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InstanceSpecification/structural_feature/@ownedTags.0"
          name="structural_feature" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**One structural feature (including the same feature inherited from multiple classifiers) is the defining feature of at most one slot in an instance specification.&#xD;&#xA;classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() &lt;= 1)))*/"
            object="#//@packages.0/InstanceSpecification/structural_feature"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InstanceSpecification/deployment_target/@ownedTags.0"
          name="deployment_target" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An InstanceSpecification can be a DeploymentTarget if it is the instance specification of a Node and functions as a part in the internal structure of an encompassing Node.&#xD;&#xA;true*/"
            object="#//@packages.0/InstanceSpecification/deployment_target"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InstanceSpecification/deployment_artifact/@ownedTags.0"
          name="deployment_artifact" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An InstanceSpecification can be a DeployedArtifact if it is the instance specification of an Artifact.&#xD;&#xA;true*/"
            object="#//@packages.0/InstanceSpecification/deployment_artifact"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Slot/@ownedTags.0"
        name="Slot" superType="#//@packages.0/Slot/@containedType.0">
      <ownedTags value="/**A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature.*/"
          object="#//@packages.0/Slot"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/Slot/definingFeature/@ownedTags.0" name="definingFeature"
          type="#//@packages.0/Slot/definingFeature/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The structural feature that specifies the values that may be held by the slot.*/"
            object="#//@packages.0/Slot/definingFeature"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuralFeature"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Slot/value/@ownedTags.0" name="value" type="#//@packages.0/Slot/value/@containedType.0"
          isOrdered="true" upper="-1" isComposite="true">
        <ownedTags value="/**The value or values corresponding to the defining feature for the owning instance specification.*/"
            object="#//@packages.0/Slot/value"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Slot/owningInstance/@ownedTags.0" name="owningInstance"
          type="#//@packages.0/Slot/owningInstance/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/InstanceSpecification/slot">
        <ownedTags value="/**The instance specification that owns this slot.*/" object="#//@packages.0/Slot/owningInstance"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InstanceSpecification"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/PrimitiveType/@ownedTags.0"
        name="PrimitiveType" superType="#//@packages.0/PrimitiveType/@containedType.0">
      <ownedTags value="/**A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.*/"
          object="#//@packages.0/PrimitiveType"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DataType"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LiteralSpecification/@ownedTags.0"
        name="LiteralSpecification" isAbstract="true" superType="#//@packages.0/LiteralSpecification/@containedType.0">
      <ownedTags value="/**A literal specification identifies a literal constant being modeled.*/"
          object="#//@packages.0/LiteralSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LiteralInteger/@ownedTags.0"
        name="LiteralInteger" superType="#//@packages.0/LiteralInteger/@containedType.0">
      <ownedTags value="/**A literal integer is a specification of an integer value.*/"
          object="#//@packages.0/LiteralInteger"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LiteralSpecification"/>
      <ownedAttribute tag="#//@packages.0/LiteralInteger/value/@ownedTags.0" name="value"
          type="#//@packages.0/Integer" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The specified Integer value.*/" object="#//@packages.0/LiteralInteger/value"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LiteralString/@ownedTags.0"
        name="LiteralString" superType="#//@packages.0/LiteralString/@containedType.0">
      <ownedTags value="/**A literal string is a specification of a string value.*/"
          object="#//@packages.0/LiteralString"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LiteralSpecification"/>
      <ownedAttribute tag="#//@packages.0/LiteralString/value/@ownedTags.0" name="value"
          type="#//@packages.0/String" isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The specified String value.*/" object="#//@packages.0/LiteralString/value"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LiteralBoolean/@ownedTags.0"
        name="LiteralBoolean" superType="#//@packages.0/LiteralBoolean/@containedType.0">
      <ownedTags value="/**A literal Boolean is a specification of a Boolean value.*/"
          object="#//@packages.0/LiteralBoolean"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LiteralSpecification"/>
      <ownedAttribute tag="#//@packages.0/LiteralBoolean/value/@ownedTags.0" name="value"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The specified Boolean value.*/" object="#//@packages.0/LiteralBoolean/value"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LiteralNull/@ownedTags.0"
        name="LiteralNull" superType="#//@packages.0/LiteralNull/@containedType.0">
      <ownedTags value="/**A literal null specifies the lack of a value.*/" object="#//@packages.0/LiteralNull"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LiteralSpecification"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InstanceValue/@ownedTags.0"
        name="InstanceValue" superType="#//@packages.0/InstanceValue/@containedType.0">
      <ownedTags value="/**An instance value is a value specification that identifies an instance.*/"
          object="#//@packages.0/InstanceValue"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      <ownedAttribute tag="#//@packages.0/InstanceValue/instance/@ownedTags.0" name="instance"
          type="#//@packages.0/InstanceValue/instance/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The instance that is the specified value.*/" object="#//@packages.0/InstanceValue/instance"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InstanceSpecification"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LiteralUnlimitedNatural/@ownedTags.0"
        name="LiteralUnlimitedNatural" superType="#//@packages.0/LiteralUnlimitedNatural/@containedType.0">
      <ownedTags value="/**A literal unlimited natural is a specification of an unlimited natural number.*/"
          object="#//@packages.0/LiteralUnlimitedNatural"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LiteralSpecification"/>
      <ownedAttribute tag="#//@packages.0/LiteralUnlimitedNatural/value/@ownedTags.0"
          name="value" type="#//@packages.0/UnlimitedNatural" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**The specified UnlimitedNatural value.*/" object="#//@packages.0/LiteralUnlimitedNatural/value"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/OpaqueBehavior/@ownedTags.0"
        name="OpaqueBehavior" superType="#//@packages.0/OpaqueBehavior/@containedType.0">
      <ownedTags value="/**An behavior with implementation-specific semantics.*/"
          object="#//@packages.0/OpaqueBehavior"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      <ownedAttribute tag="#//@packages.0/OpaqueBehavior/body/@ownedTags.0" name="body"
          type="#//@packages.0/String" isOrdered="true" isUnique="false" upper="-1"
          isComposite="true">
        <ownedTags value="/**Specifies the behavior in one or more languages.*/" object="#//@packages.0/OpaqueBehavior/body"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/OpaqueBehavior/language/@ownedTags.0" name="language"
          type="#//@packages.0/String" isOrdered="true" upper="-1" isComposite="true">
        <ownedTags value="/**Languages the body strings use in the same order as the body strings.*/"
            object="#//@packages.0/OpaqueBehavior/language"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/FunctionBehavior/@ownedTags.0"
        name="FunctionBehavior" superType="#//@packages.0/FunctionBehavior/@containedType.0">
      <ownedTags value="/**A function behavior is an opaque behavior that does not access or modify any objects or other external data.*/"
          object="#//@packages.0/FunctionBehavior"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OpaqueBehavior"/>
      <ownedOperation tag="#//@packages.0/FunctionBehavior/one_output_parameter/@ownedTags.0"
          name="one_output_parameter" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A function behavior has at least one output parameter.&#xD;&#xA;self.ownedParameters->&#xD;&#xA;  select(p | p.direction=#out or p.direction=#inout or p.direction=#return)->size() >= 1*/"
            object="#//@packages.0/FunctionBehavior/one_output_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/FunctionBehavior/types_of_parameters/@ownedTags.0"
          name="types_of_parameters" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The types of parameters are all data types, which may not nest anything but other datatypes.&#xD;&#xA;def: hasAllDataTypeAttributes(d : DataType) : Boolean =&#xD;&#xA;  d.ownedAttribute->forAll(a |&#xD;&#xA;    a.type.oclIsTypeOf(DataType) and&#xD;&#xA;      hasAllDataTypeAttributes(a.type))&#xD;&#xA;self.ownedParameters->forAll(p | p.type.notEmpty() and&#xD;&#xA;  p.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p))*/"
            object="#//@packages.0/FunctionBehavior/types_of_parameters"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/OpaqueAction/@ownedTags.0"
        name="OpaqueAction" superType="#//@packages.0/OpaqueAction/@containedType.0">
      <ownedTags value="/**An action with implementation-specific semantics.*/" object="#//@packages.0/OpaqueAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/OpaqueAction/body/@ownedTags.0" name="body"
          type="#//@packages.0/String" isOrdered="true" isUnique="false" upper="-1"
          isComposite="true">
        <ownedTags value="/**Specifies the action in one or more languages.*/" object="#//@packages.0/OpaqueAction/body"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/OpaqueAction/language/@ownedTags.0" name="language"
          type="#//@packages.0/String" isOrdered="true" upper="-1" isComposite="true">
        <ownedTags value="/**Languages the body strings use, in the same order as the body strings*/"
            object="#//@packages.0/OpaqueAction/language"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/OpaqueAction/inputValue/@ownedTags.0" name="inputValue"
          type="#//@packages.0/OpaqueAction/inputValue/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**Provides input to the action.*/" object="#//@packages.0/OpaqueAction/inputValue"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/OpaqueAction/outputValue/@ownedTags.0" name="outputValue"
          type="#//@packages.0/OpaqueAction/outputValue/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**Takes output from the action.*/" object="#//@packages.0/OpaqueAction/outputValue"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Action/@ownedTags.0"
        name="Action" isAbstract="true" superType="#//@packages.0/Action/@containedType.0">
      <ownedTags value="/**An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.&#xD;&#xA;An action represents a single step within an activity, that is, one that is not further decomposed within the activity.&#xD;&#xA;An action has pre- and post-conditions.*/"
          object="#//@packages.0/Action"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutableNode"/>
      <ownedAttribute tag="#//@packages.0/Action/output/@ownedTags.0" name="output"
          type="#//@packages.0/Action/output/@containedType.0" isOrdered="true" upper="-1"
          isDerived="true">
        <ownedTags value="/**The ordered set of output pins connected to the Action. The action places its results onto pins in this set.*/"
            object="#//@packages.0/Action/output"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Action/output/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Action/output/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Action/output/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Action/output/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Action/input/@ownedTags.0" name="input"
          type="#//@packages.0/Action/input/@containedType.0" isOrdered="true" upper="-1"
          isDerived="true">
        <ownedTags value="/**The ordered set of input pins connected to the Action. These are among the total set of inputs.*/"
            object="#//@packages.0/Action/input"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Action/input/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Action/input/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Action/input/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Action/input/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Action/context/@ownedTags.0" name="context"
          type="#//@packages.0/Action/context/@containedType.0" isOrdered="true" upper="1"
          isDerived="true">
        <ownedTags value="/**The classifier that owns the behavior of which this action is a part.*/"
            object="#//@packages.0/Action/context"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Action/context/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Action/context/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Action/context/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Action/context/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Action/localPrecondition/@ownedTags.0" name="localPrecondition"
          type="#//@packages.0/Action/localPrecondition/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**Constraint that must be satisfied when execution is started.*/"
            object="#//@packages.0/Action/localPrecondition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Action/localPostcondition/@ownedTags.0"
          name="localPostcondition" type="#//@packages.0/Action/localPostcondition/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**Constraint that must be satisfied when executed is completed.*/"
            object="#//@packages.0/Action/localPostcondition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExecutableNode/@ownedTags.0"
        name="ExecutableNode" isAbstract="true" superType="#//@packages.0/ExecutableNode/@containedType.0">
      <ownedTags value="/**An executable node is an abstract class for activity nodes that may be executed. It is used as an attachment point for exception handlers.*/"
          object="#//@packages.0/ExecutableNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
      <ownedAttribute tag="#//@packages.0/ExecutableNode/handler/@ownedTags.0" name="handler"
          type="#//@packages.0/ExecutableNode/handler/@containedType.0" upper="-1"
          opposite="#//@packages.0/ExceptionHandler/protectedNode" isComposite="true">
        <ownedTags value="/**A set of exception handlers that are examined if an uncaught exception propagates to the outer level of the executable node.*/"
            object="#//@packages.0/ExecutableNode/handler"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExceptionHandler"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ActivityNode/@ownedTags.0"
        name="ActivityNode" isAbstract="true" superType="#//@packages.0/ActivityNode/@containedType.0">
      <ownedTags value="/**ActivityNode is an abstract class for points in the flow of an activity connected by edges.*/"
          object="#//@packages.0/ActivityNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
      <ownedAttribute tag="#//@packages.0/ActivityNode/inStructuredNode/@ownedTags.0"
          name="inStructuredNode" type="#//@packages.0/ActivityNode/inStructuredNode/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/StructuredActivityNode/node">
        <ownedTags value="/**Structured activity node containing the node.*/" object="#//@packages.0/ActivityNode/inStructuredNode"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredActivityNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityNode/activity/@ownedTags.0" name="activity"
          type="#//@packages.0/ActivityNode/activity/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Activity/node">
        <ownedTags value="/**Activity containing the node.*/" object="#//@packages.0/ActivityNode/activity"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Activity"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityNode/outgoing/@ownedTags.0" name="outgoing"
          type="#//@packages.0/ActivityNode/outgoing/@containedType.0" upper="-1"
          opposite="#//@packages.0/ActivityEdge/source">
        <ownedTags value="/**Edges that have the node as source.*/" object="#//@packages.0/ActivityNode/outgoing"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityNode/incoming/@ownedTags.0" name="incoming"
          type="#//@packages.0/ActivityNode/incoming/@containedType.0" upper="-1"
          opposite="#//@packages.0/ActivityEdge/target">
        <ownedTags value="/**Edges that have the node as target.*/" object="#//@packages.0/ActivityNode/incoming"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityNode/inPartition/@ownedTags.0" name="inPartition"
          type="#//@packages.0/ActivityNode/inPartition/@containedType.0" upper="-1"
          opposite="#//@packages.0/ActivityPartition/node">
        <ownedTags value="/**Partitions containing the node.*/" object="#//@packages.0/ActivityNode/inPartition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityPartition"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityNode/inInterruptibleRegion/@ownedTags.0"
          name="inInterruptibleRegion" type="#//@packages.0/ActivityNode/inInterruptibleRegion/@containedType.0"
          upper="-1" opposite="#//@packages.0/InterruptibleActivityRegion/node">
        <ownedTags value="/**Interruptible regions containing the node.*/" object="#//@packages.0/ActivityNode/inInterruptibleRegion"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InterruptibleActivityRegion"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityNode/inGroup/@ownedTags.0" name="inGroup"
          type="#//@packages.0/ActivityNode/inGroup/@containedType.0" upper="-1" opposite="#//@packages.0/ActivityGroup/containedNode"
          isDerived="true">
        <ownedTags value="/**Groups containing the node.*/" object="#//@packages.0/ActivityNode/inGroup"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityGroup"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityNode/inGroup/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityNode/inGroup/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityNode/inGroup/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityNode/inGroup/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityNode/redefinedNode/@ownedTags.0"
          name="redefinedNode" type="#//@packages.0/ActivityNode/redefinedNode/@containedType.0"
          upper="-1">
        <ownedTags value="/**Inherited nodes replaced by this node in a specialization of the activity.*/"
            object="#//@packages.0/ActivityNode/redefinedNode"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ActivityNode/owned_structured_node/@ownedTags.0"
          name="owned_structured_node" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Activity nodes may be owned by at most one structured node.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityNode/owned_structured_node"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityNode/owned/@ownedTags.0" name="owned"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Activity nodes can only be owned by activities or groups.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityNode/owned"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/StructuredActivityNode/@ownedTags.0"
        name="StructuredActivityNode" superType="#//@packages.0/StructuredActivityNode/@containedType.0 #//@packages.0/StructuredActivityNode/@containedType.1 #//@packages.0/StructuredActivityNode/@containedType.2">
      <ownedTags value="/**A structured activity node is an executable activity node that may have an expansion into subordinate nodes as an activity group. The subordinate nodes must belong to only one structured activity node, although they may be nested.&#xD;&#xA;Because of the concurrent nature of the execution of actions within and across activities, it can be difficult to guarantee the consistent access and modification of object memory. In order to avoid race conditions or other concurrency-related problems, it is sometimes necessary to isolate the effects of a group of actions from the effects of actions outside the group. This may be indicated by setting the mustIsolate attribute to true on a structured activity node. If a structured activity node is &quot;isolated,&quot; then any object used by an action within the node cannot be accessed by any action outside the node until the structured activity node as a whole completes. Any concurrent actions that would result in accessing such objects are required to have their execution deferred until the completion of the node.*/"
          object="#//@packages.0/StructuredActivityNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityGroup"/>
      <ownedAttribute tag="#//@packages.0/StructuredActivityNode/variable/@ownedTags.0"
          name="variable" type="#//@packages.0/StructuredActivityNode/variable/@containedType.0"
          upper="-1" opposite="#//@packages.0/Variable/scope" isComposite="true">
        <ownedTags value="/**A variable defined in the scope of the structured activity node. It has no value and may not be accessed*/"
            object="#//@packages.0/StructuredActivityNode/variable"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Variable"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StructuredActivityNode/edge/@ownedTags.0"
          name="edge" type="#//@packages.0/StructuredActivityNode/edge/@containedType.0"
          upper="-1" opposite="#//@packages.0/ActivityEdge/inStructuredNode" isComposite="true">
        <ownedTags value="/**Edges immediately contained in the structured node.*/"
            object="#//@packages.0/StructuredActivityNode/edge"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StructuredActivityNode/mustIsolate/@ownedTags.0"
          name="mustIsolate" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**If true, then the actions in the node execute in isolation from actions outside the node.*/"
            object="#//@packages.0/StructuredActivityNode/mustIsolate"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StructuredActivityNode/node/@ownedTags.0"
          name="node" type="#//@packages.0/StructuredActivityNode/node/@containedType.0"
          upper="-1" opposite="#//@packages.0/ActivityNode/inStructuredNode" isComposite="true">
        <ownedTags value="/**Nodes immediately contained in the group.*/" object="#//@packages.0/StructuredActivityNode/node"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/StructuredActivityNode/edges/@ownedTags.0"
          name="edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1"
          isAbstract="true">
        <ownedTags value="/**The edges owned by a structured node must have source and target nodes in the structured node, and vice versa.&#xD;&#xA;true*/"
            object="#//@packages.0/StructuredActivityNode/edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ActivityGroup/@ownedTags.0"
        name="ActivityGroup" isAbstract="true" superType="#//@packages.0/ActivityGroup/@containedType.0">
      <ownedTags value="/**ActivityGroup is an abstract class for defining sets of nodes and edges in an activity.*/"
          object="#//@packages.0/ActivityGroup"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/ActivityGroup/subgroup/@ownedTags.0" name="subgroup"
          type="#//@packages.0/ActivityGroup/subgroup/@containedType.0" upper="-1"
          opposite="#//@packages.0/ActivityGroup/superGroup" isDerived="true">
        <ownedTags value="/**Groups immediately contained in the group.*/" object="#//@packages.0/ActivityGroup/subgroup"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityGroup"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityGroup/subgroup/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityGroup/subgroup/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityGroup/subgroup/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityGroup/subgroup/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityGroup/superGroup/@ownedTags.0" name="superGroup"
          type="#//@packages.0/ActivityGroup/superGroup/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/ActivityGroup/subgroup" isDerived="true">
        <ownedTags value="/**Group immediately containing the group.*/" object="#//@packages.0/ActivityGroup/superGroup"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityGroup"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityGroup/superGroup/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityGroup/superGroup/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityGroup/superGroup/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityGroup/superGroup/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityGroup/inActivity/@ownedTags.0" name="inActivity"
          type="#//@packages.0/ActivityGroup/inActivity/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Activity/group">
        <ownedTags value="/**Activity containing the group.*/" object="#//@packages.0/ActivityGroup/inActivity"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Activity"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityGroup/containedEdge/@ownedTags.0"
          name="containedEdge" type="#//@packages.0/ActivityGroup/containedEdge/@containedType.0"
          upper="-1" opposite="#//@packages.0/ActivityEdge/inGroup" isDerived="true">
        <ownedTags value="/**Edges immediately contained in the group.*/" object="#//@packages.0/ActivityGroup/containedEdge"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityGroup/containedEdge/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityGroup/containedEdge/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityGroup/containedEdge/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityGroup/containedEdge/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityGroup/containedNode/@ownedTags.0"
          name="containedNode" type="#//@packages.0/ActivityGroup/containedNode/@containedType.0"
          upper="-1" opposite="#//@packages.0/ActivityNode/inGroup" isDerived="true">
        <ownedTags value="/**Nodes immediately contained in the group.*/" object="#//@packages.0/ActivityGroup/containedNode"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityGroup/containedNode/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityGroup/containedNode/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityGroup/containedNode/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityGroup/containedNode/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ActivityGroup/nodes_and_edges/@ownedTags.0"
          name="nodes_and_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**All nodes and edges of the group must be in the same activity as the group.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityGroup/nodes_and_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityGroup/not_contained/@ownedTags.0"
          name="not_contained" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**No node or edge in a group may be contained by its subgroups or its containing groups, transitively.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityGroup/not_contained"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityGroup/group_owned/@ownedTags.0"
          name="group_owned" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Groups may only be owned by activities or groups.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityGroup/group_owned"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Activity/@ownedTags.0"
        name="Activity" superType="#//@packages.0/Activity/@containedType.0">
      <ownedTags value="/**An activity is the specification of parameterized behavior as the coordinated sequencing of subordinate units whose individual elements are actions.*/"
          object="#//@packages.0/Activity"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      <ownedAttribute tag="#//@packages.0/Activity/structuredNode/@ownedTags.0" name="structuredNode"
          type="#//@packages.0/Activity/structuredNode/@containedType.0" upper="-1"
          isDerived="true">
        <ownedTags value="/**Top-level structured nodes in the activity.*/" object="#//@packages.0/Activity/structuredNode"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredActivityNode"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Activity/structuredNode/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Activity/structuredNode/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Activity/structuredNode/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Activity/structuredNode/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Activity/variable/@ownedTags.0" name="variable"
          type="#//@packages.0/Activity/variable/@containedType.0" upper="-1" opposite="#//@packages.0/Variable/activityScope"
          isComposite="true">
        <ownedTags value="/**Top-level variables in the activity.*/" object="#//@packages.0/Activity/variable"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Variable"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Activity/node/@ownedTags.0" name="node"
          type="#//@packages.0/Activity/node/@containedType.0" upper="-1" opposite="#//@packages.0/ActivityNode/activity"
          isComposite="true">
        <ownedTags value="/**Nodes coordinated by the activity.*/" object="#//@packages.0/Activity/node"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Activity/isReadOnly/@ownedTags.0" name="isReadOnly"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**If true, this activity must not make any changes to variables outside the activity or to objects. (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the action, then the model is ill-formed.) The default is false (an activity may make nonlocal changes).*/"
            object="#//@packages.0/Activity/isReadOnly"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Activity/edge/@ownedTags.0" name="edge"
          type="#//@packages.0/Activity/edge/@containedType.0" upper="-1" opposite="#//@packages.0/ActivityEdge/activity"
          isComposite="true">
        <ownedTags value="/**Edges expressing flow between nodes of the activity.*/"
            object="#//@packages.0/Activity/edge"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Activity/partition/@ownedTags.0" name="partition"
          type="#//@packages.0/Activity/partition/@containedType.0" upper="-1">
        <ownedTags value="/**Top-level partitions in the activity.*/" object="#//@packages.0/Activity/partition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityPartition"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Activity/isSingleExecution/@ownedTags.0"
          name="isSingleExecution" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**If true, all invocations of the activity are handled by the same execution.*/"
            object="#//@packages.0/Activity/isSingleExecution"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Activity/group/@ownedTags.0" name="group"
          type="#//@packages.0/Activity/group/@containedType.0" upper="-1" opposite="#//@packages.0/ActivityGroup/inActivity"
          isComposite="true">
        <ownedTags value="/**Top-level groups in the activity.*/" object="#//@packages.0/Activity/group"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityGroup"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Activity/no_supergroups/@ownedTags.0" name="no_supergroups"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The groups of an activity have no supergroups.&#xD;&#xA;true*/"
            object="#//@packages.0/Activity/no_supergroups"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Activity/activity_parameter_node/@ownedTags.0"
          name="activity_parameter_node" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The nodes of the activity must include one ActivityParameterNode for each parameter.&#xD;&#xA;true*/"
            object="#//@packages.0/Activity/activity_parameter_node"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Activity/autonomous/@ownedTags.0" name="autonomous"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An activity cannot be autonomous and have a classifier or behavioral feature context at the same time.&#xD;&#xA;true*/"
            object="#//@packages.0/Activity/autonomous"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Variable/@ownedTags.0"
        name="Variable" superType="#//@packages.0/Variable/@containedType.0 #//@packages.0/Variable/@containedType.1">
      <ownedTags value="/**Variables are elements for passing data between actions indirectly. A local variable stores values shared by the actions within a structured activity group but not accessible outside it. The output of an action may be written to a variable and read for the input to a subsequent action, which is effectively an indirect data flow path. Because there is no predefined relationship between actions that read and write variables, these actions must be sequenced by control flows to prevent race conditions that may occur between actions that read or write the same variable.&#xD;&#xA;A variable is considered a connectable element.*/"
          object="#//@packages.0/Variable"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MultiplicityElement"/>
      <ownedAttribute tag="#//@packages.0/Variable/scope/@ownedTags.0" name="scope"
          type="#//@packages.0/Variable/scope/@containedType.0" isOrdered="true" upper="1"
          opposite="#//@packages.0/StructuredActivityNode/variable">
        <ownedTags value="/**A structured activity node that owns the variable.*/"
            object="#//@packages.0/Variable/scope"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredActivityNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Variable/activityScope/@ownedTags.0" name="activityScope"
          type="#//@packages.0/Variable/activityScope/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Activity/variable">
        <ownedTags value="/**An activity that owns the variable.*/" object="#//@packages.0/Variable/activityScope"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Activity"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Variable/owned/@ownedTags.0" name="owned"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A variable is owned by a StructuredNode or Activity, but not both.&#xD;&#xA;true*/"
            object="#//@packages.0/Variable/owned"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Variable/isAccessibleBy/@ownedTags.0" name="isAccessibleBy"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The isAccessibleBy() operation is not defined in standard UML. Implementations should define it to specify which actions can access a variable.&#xD;&#xA;&#xD;&#xA;result = true*/"
            object="#//@packages.0/Variable/isAccessibleBy"/>
        <ownedParameter name="a" type="#//@packages.0/Variable/isAccessibleBy/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
        </ownedParameter>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ActivityEdge/@ownedTags.0"
        name="ActivityEdge" isAbstract="true" superType="#//@packages.0/ActivityEdge/@containedType.0">
      <ownedTags value="/**An activity edge is an abstract class for directed connections between two activity nodes.&#xD;&#xA;Activity edges can be contained in interruptible regions.*/"
          object="#//@packages.0/ActivityEdge"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/RedefinableElement"/>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/source/@ownedTags.0" name="source"
          type="#//@packages.0/ActivityEdge/source/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/ActivityNode/outgoing">
        <ownedTags value="/**Node from which tokens are taken when they traverse the edge.*/"
            object="#//@packages.0/ActivityEdge/source"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/target/@ownedTags.0" name="target"
          type="#//@packages.0/ActivityEdge/target/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/ActivityNode/incoming">
        <ownedTags value="/**Node to which tokens are put when they traverse the edge.*/"
            object="#//@packages.0/ActivityEdge/target"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/redefinedEdge/@ownedTags.0"
          name="redefinedEdge" type="#//@packages.0/ActivityEdge/redefinedEdge/@containedType.0"
          upper="-1">
        <ownedTags value="/**Inherited edges replaced by this edge in a specialization of the activity.*/"
            object="#//@packages.0/ActivityEdge/redefinedEdge"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/inPartition/@ownedTags.0" name="inPartition"
          type="#//@packages.0/ActivityEdge/inPartition/@containedType.0" upper="-1"
          opposite="#//@packages.0/ActivityPartition/edge">
        <ownedTags value="/**Partitions containing the edge.*/" object="#//@packages.0/ActivityEdge/inPartition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityPartition"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/guard/@ownedTags.0" name="guard"
          type="#//@packages.0/ActivityEdge/guard/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specification evaluated at runtime to determine if the edge can be traversed.*/"
            object="#//@packages.0/ActivityEdge/guard"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/weight/@ownedTags.0" name="weight"
          type="#//@packages.0/ActivityEdge/weight/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Number of tokens consumed from the source node on each traversal.*/"
            object="#//@packages.0/ActivityEdge/weight"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/interrupts/@ownedTags.0" name="interrupts"
          type="#//@packages.0/ActivityEdge/interrupts/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/InterruptibleActivityRegion/interruptingEdge">
        <ownedTags value="/**Region that the edge can interrupt.*/" object="#//@packages.0/ActivityEdge/interrupts"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InterruptibleActivityRegion"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/inStructuredNode/@ownedTags.0"
          name="inStructuredNode" type="#//@packages.0/ActivityEdge/inStructuredNode/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/StructuredActivityNode/edge">
        <ownedTags value="/**Structured activity node containing the edge.*/" object="#//@packages.0/ActivityEdge/inStructuredNode"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredActivityNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/inGroup/@ownedTags.0" name="inGroup"
          type="#//@packages.0/ActivityEdge/inGroup/@containedType.0" upper="-1" opposite="#//@packages.0/ActivityGroup/containedEdge"
          isDerived="true">
        <ownedTags value="/**Groups containing the edge.*/" object="#//@packages.0/ActivityEdge/inGroup"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityGroup"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityEdge/inGroup/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityEdge/inGroup/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ActivityEdge/inGroup/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ActivityEdge/inGroup/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityEdge/activity/@ownedTags.0" name="activity"
          type="#//@packages.0/ActivityEdge/activity/@containedType.0" isOrdered="true"
          upper="1" opposite="#//@packages.0/Activity/edge">
        <ownedTags value="/**Activity containing the edge.*/" object="#//@packages.0/ActivityEdge/activity"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Activity"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ActivityEdge/source_and_target/@ownedTags.0"
          name="source_and_target" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The source and target of an edge must be in the same activity as the edge.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityEdge/source_and_target"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityEdge/owned/@ownedTags.0" name="owned"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Activity edges may be owned only by activities or groups.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityEdge/owned"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityEdge/structured_node/@ownedTags.0"
          name="structured_node" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Activity edges may be owned by at most one structured node.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityEdge/structured_node"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ActivityPartition/@ownedTags.0"
        name="ActivityPartition" superType="#//@packages.0/ActivityPartition/@containedType.0 #//@packages.0/ActivityPartition/@containedType.1">
      <ownedTags value="/**An activity partition is a kind of activity group for identifying actions that have some characteristic in common.*/"
          object="#//@packages.0/ActivityPartition"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityGroup"/>
      <ownedAttribute tag="#//@packages.0/ActivityPartition/isDimension/@ownedTags.0"
          name="isDimension" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Tells whether the partition groups other partitions along a dimension.*/"
            object="#//@packages.0/ActivityPartition/isDimension"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityPartition/isExternal/@ownedTags.0"
          name="isExternal" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Tells whether the partition represents an entity to which the partitioning structure does not apply.*/"
            object="#//@packages.0/ActivityPartition/isExternal"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityPartition/node/@ownedTags.0" name="node"
          type="#//@packages.0/ActivityPartition/node/@containedType.0" upper="-1"
          opposite="#//@packages.0/ActivityNode/inPartition">
        <ownedTags value="/**Nodes immediately contained in the group.*/" object="#//@packages.0/ActivityPartition/node"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityPartition/subpartition/@ownedTags.0"
          name="subpartition" type="#//@packages.0/ActivityPartition/subpartition/@containedType.0"
          upper="-1" opposite="#//@packages.0/ActivityPartition/superPartition" isComposite="true">
        <ownedTags value="/**Partitions immediately contained in the partition.*/"
            object="#//@packages.0/ActivityPartition/subpartition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityPartition"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityPartition/superPartition/@ownedTags.0"
          name="superPartition" type="#//@packages.0/ActivityPartition/superPartition/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/ActivityPartition/subpartition">
        <ownedTags value="/**Partition immediately containing the partition.*/" object="#//@packages.0/ActivityPartition/superPartition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityPartition"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityPartition/represents/@ownedTags.0"
          name="represents" type="#//@packages.0/ActivityPartition/represents/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**An element constraining behaviors invoked by nodes in the partition.*/"
            object="#//@packages.0/ActivityPartition/represents"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ActivityPartition/edge/@ownedTags.0" name="edge"
          type="#//@packages.0/ActivityPartition/edge/@containedType.0" upper="-1"
          opposite="#//@packages.0/ActivityEdge/inPartition">
        <ownedTags value="/**Edges immediately contained in the group.*/" object="#//@packages.0/ActivityPartition/edge"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ActivityPartition/dimension_not_contained/@ownedTags.0"
          name="dimension_not_contained" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A partition with isDimension = true may not be contained by another partition.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityPartition/dimension_not_contained"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityPartition/represents_part/@ownedTags.0"
          name="represents_part" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If a partition represents a part, then all the non-external partitions in the same dimension and at the same level of nesting in that dimension must represent parts directly contained in the internal structure of the same classifier.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityPartition/represents_part"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityPartition/represents_classifier/@ownedTags.0"
          name="represents_classifier" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If a non-external partition represents a classifier and is contained in another partition, then the containing partition must represent a classifier, and the classifier of the subpartition must be nested in the classifier represented by the containing partition, or be at the contained end of a strong composition association with the classifier represented by the containing partition.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityPartition/represents_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityPartition/represents_part_and_is_contained/@ownedTags.0"
          name="represents_part_and_is_contained" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If a partition represents a part and is contained by another partition, then the part must be of a classifier represented by the containing partition, or of a classifier that is the type of a part representing the containing partition.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityPartition/represents_part_and_is_contained"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InterruptibleActivityRegion/@ownedTags.0"
        name="InterruptibleActivityRegion" superType="#//@packages.0/InterruptibleActivityRegion/@containedType.0">
      <ownedTags value="/**An interruptible activity region is an activity group that supports termination of tokens flowing in the portions of an activity.*/"
          object="#//@packages.0/InterruptibleActivityRegion"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityGroup"/>
      <ownedAttribute tag="#//@packages.0/InterruptibleActivityRegion/node/@ownedTags.0"
          name="node" type="#//@packages.0/InterruptibleActivityRegion/node/@containedType.0"
          upper="-1" opposite="#//@packages.0/ActivityNode/inInterruptibleRegion">
        <ownedTags value="/**Nodes immediately contained in the group.*/" object="#//@packages.0/InterruptibleActivityRegion/node"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InterruptibleActivityRegion/interruptingEdge/@ownedTags.0"
          name="interruptingEdge" type="#//@packages.0/InterruptibleActivityRegion/interruptingEdge/@containedType.0"
          upper="-1" opposite="#//@packages.0/ActivityEdge/interrupts">
        <ownedTags value="/**The edges leaving the region that will abort other tokens flowing in the region.*/"
            object="#//@packages.0/InterruptibleActivityRegion/interruptingEdge"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/InterruptibleActivityRegion/interrupting_edges/@ownedTags.0"
          name="interrupting_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Interrupting edges of a region must have their source node in the region and their target node outside the region in the same activity containing the region.&#xD;&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/InterruptibleActivityRegion/interrupting_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExceptionHandler/@ownedTags.0"
        name="ExceptionHandler" superType="#//@packages.0/ExceptionHandler/@containedType.0">
      <ownedTags value="/**An exception handler is an element that specifies a body to execute in case the specified exception occurs during the execution of the protected node.*/"
          object="#//@packages.0/ExceptionHandler"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/ExceptionHandler/handlerBody/@ownedTags.0"
          name="handlerBody" type="#//@packages.0/ExceptionHandler/handlerBody/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**A node that is executed if the handler satisfies an uncaught exception.*/"
            object="#//@packages.0/ExceptionHandler/handlerBody"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutableNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ExceptionHandler/exceptionInput/@ownedTags.0"
          name="exceptionInput" type="#//@packages.0/ExceptionHandler/exceptionInput/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**An object node within the handler body. When the handler catches an exception, the exception token is placed in this node, causing the body to execute.*/"
            object="#//@packages.0/ExceptionHandler/exceptionInput"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ObjectNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ExceptionHandler/exceptionType/@ownedTags.0"
          name="exceptionType" type="#//@packages.0/ExceptionHandler/exceptionType/@containedType.0"
          lower="1" upper="-1">
        <ownedTags value="/**The kind of instances that the handler catches. If an exception occurs whose type is any of the classifiers in the set, the handler catches the exception and executes its body.*/"
            object="#//@packages.0/ExceptionHandler/exceptionType"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ExceptionHandler/protectedNode/@ownedTags.0"
          name="protectedNode" type="#//@packages.0/ExceptionHandler/protectedNode/@containedType.0"
          isOrdered="true" lower="1" upper="1" opposite="#//@packages.0/ExecutableNode/handler">
        <ownedTags value="/**The node protected by the handler. The handler is examined if an exception propagates to the outside of the node.*/"
            object="#//@packages.0/ExceptionHandler/protectedNode"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutableNode"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ExceptionHandler/exception_body/@ownedTags.0"
          name="exception_body" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The exception handler and its input object node are not the source or target of any edge.&#xD;&#xA;true*/"
            object="#//@packages.0/ExceptionHandler/exception_body"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ExceptionHandler/result_pins/@ownedTags.0"
          name="result_pins" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The result pins of the exception handler body must correspond in number and types to the result pins of the protected node.&#xD;&#xA;true*/"
            object="#//@packages.0/ExceptionHandler/result_pins"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ExceptionHandler/one_input/@ownedTags.0"
          name="one_input" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The handler body has one input, and that input is the same as the exception input.&#xD;&#xA;true*/"
            object="#//@packages.0/ExceptionHandler/one_input"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ExceptionHandler/edge_source_target/@ownedTags.0"
          name="edge_source_target" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An edge that has a source in an exception handler structured node must have its target in the handler also, and vice versa.&#xD;&#xA;true*/"
            object="#//@packages.0/ExceptionHandler/edge_source_target"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ObjectNode/@ownedTags.0"
        name="ObjectNode" isAbstract="true" superType="#//@packages.0/ObjectNode/@containedType.0 #//@packages.0/ObjectNode/@containedType.1">
      <ownedTags value="/**An object node is an abstract activity node that is part of defining object flow in an activity.&#xD;&#xA;Object nodes have support for token selection, limitation on the number of tokens, specifying the state required for tokens, and carrying control values.*/"
          object="#//@packages.0/ObjectNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/TypedElement"/>
      <ownedAttribute tag="#//@packages.0/ObjectNode/ordering/@ownedTags.0" name="ordering"
          type="#//@packages.0/ObjectNodeOrderingKind" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Tells whether and how the tokens in the object node are ordered for selection to traverse edges outgoing from the object node.*/"
            object="#//@packages.0/ObjectNode/ordering"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ObjectNode/isControlType/@ownedTags.0" name="isControlType"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Tells whether the type of the object node is to be treated as control.*/"
            object="#//@packages.0/ObjectNode/isControlType"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ObjectNode/upperBound/@ownedTags.0" name="upperBound"
          type="#//@packages.0/ObjectNode/upperBound/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The maximum number of tokens allowed in the node. Objects cannot flow into the node if the upper bound is reached.*/"
            object="#//@packages.0/ObjectNode/upperBound"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ObjectNode/inState/@ownedTags.0" name="inState"
          type="#//@packages.0/ObjectNode/inState/@containedType.0" upper="-1">
        <ownedTags value="/**The required states of the object available at this point in the activity.*/"
            object="#//@packages.0/ObjectNode/inState"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ObjectNode/selection/@ownedTags.0" name="selection"
          type="#//@packages.0/ObjectNode/selection/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**Selects tokens for outgoing edges.*/" object="#//@packages.0/ObjectNode/selection"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ObjectNode/object_flow_edges/@ownedTags.0"
          name="object_flow_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**All edges coming into or going out of object nodes must be object flow edges.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectNode/object_flow_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectNode/not_unique/@ownedTags.0" name="not_unique"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Object nodes are not unique typed elements&#xD;&#xA;isUnique = false*/"
            object="#//@packages.0/ObjectNode/not_unique"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectNode/selection_behavior/@ownedTags.0"
          name="selection_behavior" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If an object node has a selection behavior, then the ordering of the object node is ordered, and vice versa.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectNode/selection_behavior"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectNode/input_output_parameter/@ownedTags.0"
          name="input_output_parameter" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A selection behavior has one input parameter and one output parameter. The input parameter must be a bag of elements of the same type as the object node or a supertype of the type of object node. The output parameter must be the same or a subtype of the type of object node. The behavior cannot have side effects.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectNode/input_output_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="ObjectNodeOrderingKind">
      <ownedLiteral name="unordered"/>
      <ownedLiteral name="ordered"/>
      <ownedLiteral name="LIFO"/>
      <ownedLiteral name="FIFO"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/OutputPin/@ownedTags.0"
        name="OutputPin" superType="#//@packages.0/OutputPin/@containedType.0">
      <ownedTags value="/**An output pin is a pin that holds output values produced by an action.*/"
          object="#//@packages.0/OutputPin"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Pin"/>
      <ownedOperation tag="#//@packages.0/OutputPin/incoming_edges_structured_only/@ownedTags.0"
          name="incoming_edges_structured_only" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Output pins may have incoming edges only when they are on actions that are structured nodes, and these edges may not target a node contained by the structured node.&#xD;&#xA;true*/"
            object="#//@packages.0/OutputPin/incoming_edges_structured_only"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Pin/@ownedTags.0"
        name="Pin" superType="#//@packages.0/Pin/@containedType.0 #//@packages.0/Pin/@containedType.1">
      <ownedTags value="/**A pin is a typed element and multiplicity element that provides values to actions and accept result values from them.&#xD;&#xA;A pin is an object node for inputs and outputs to actions.*/"
          object="#//@packages.0/Pin"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ObjectNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MultiplicityElement"/>
      <ownedAttribute tag="#//@packages.0/Pin/isControl/@ownedTags.0" name="isControl"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Tells whether the pins provide data to the actions, or just controls when it executes it.*/"
            object="#//@packages.0/Pin/isControl"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Pin/control_pins/@ownedTags.0" name="control_pins"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Control pins have a control type&#xD;&#xA;isControl implies isControlType*/"
            object="#//@packages.0/Pin/control_pins"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InputPin/@ownedTags.0"
        name="InputPin" superType="#//@packages.0/InputPin/@containedType.0">
      <ownedTags value="/**An input pin is a pin that holds input values to be consumed by an action.*/"
          object="#//@packages.0/InputPin"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Pin"/>
      <ownedOperation tag="#//@packages.0/InputPin/outgoing_edges_structured_only/@ownedTags.0"
          name="outgoing_edges_structured_only" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Input pins may have outgoing edges only when they are on actions that are structured nodes, and these edges must target a node contained by the structured node.&#xD;&#xA;true*/"
            object="#//@packages.0/InputPin/outgoing_edges_structured_only"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CallAction/@ownedTags.0"
        name="CallAction" isAbstract="true" superType="#//@packages.0/CallAction/@containedType.0">
      <ownedTags value="/**CallAction is an abstract class for actions that invoke behavior and receive return values.*/"
          object="#//@packages.0/CallAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InvocationAction"/>
      <ownedAttribute tag="#//@packages.0/CallAction/isSynchronous/@ownedTags.0" name="isSynchronous"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**If true, the call is synchronous and the caller waits for completion of the invoked behavior.&#xD;&#xA;If false, the call is asynchronous and the caller proceeds immediately and does not expect a return values.&#xD;&#xA;*/"
            object="#//@packages.0/CallAction/isSynchronous"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/CallAction/result/@ownedTags.0" name="result"
          type="#//@packages.0/CallAction/result/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**A list of output pins where the results of performing the invocation are placed.*/"
            object="#//@packages.0/CallAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/CallAction/synchronous_call/@ownedTags.0"
          name="synchronous_call" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Only synchronous call actions can have result pins.&#xD;&#xA;true*/"
            object="#//@packages.0/CallAction/synchronous_call"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CallAction/number_and_order/@ownedTags.0"
          name="number_and_order" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The number and order of argument pins must be the same as the number and order of parameters of the invoked behavior or behavioral feature. Pins are matched to parameters by order.&#xD;&#xA;true*/"
            object="#//@packages.0/CallAction/number_and_order"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CallAction/type_ordering_multiplicity/@ownedTags.0"
          name="type_ordering_multiplicity" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The type, ordering, and multiplicity of an argument pin must be the same as the corresponding parameter of the behavior or behavioral feature.&#xD;&#xA;true*/"
            object="#//@packages.0/CallAction/type_ordering_multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InvocationAction/@ownedTags.0"
        name="InvocationAction" isAbstract="true" superType="#//@packages.0/InvocationAction/@containedType.0">
      <ownedTags value="/**InvocationAction is an abstract class for the various actions that invoke behavior.&#xD;&#xA;In addition to targeting an object, invocation actions can also invoke behavioral features on ports from where the invocation requests are routed onwards on links deriving from attached connectors. Invocation actions may also be sent to a target via a given port, either on the sending object or on another object.*/"
          object="#//@packages.0/InvocationAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/InvocationAction/argument/@ownedTags.0"
          name="argument" type="#//@packages.0/InvocationAction/argument/@containedType.0"
          isOrdered="true" upper="-1" isComposite="true">
        <ownedTags value="/**Specification of the ordered set of argument values that appears during execution.*/"
            object="#//@packages.0/InvocationAction/argument"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InvocationAction/onPort/@ownedTags.0" name="onPort"
          type="#//@packages.0/InvocationAction/onPort/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**A optional port of the receiver object on which the behavioral feature is invoked.*/"
            object="#//@packages.0/InvocationAction/onPort"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Port"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/InvocationAction/on_port_receiver/@ownedTags.0"
          name="on_port_receiver" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The onPort must be a port on the receiver object.&#xD;&#xA;true*/"
            object="#//@packages.0/InvocationAction/on_port_receiver"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/SendSignalAction/@ownedTags.0"
        name="SendSignalAction" superType="#//@packages.0/SendSignalAction/@containedType.0">
      <ownedTags value="/**A send signal action is an action that creates a signal instance from its inputs, and transmits it to the target object, where it may cause the firing of a state machine transition or the execution of an activity. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor. If the input is already a signal instance, use a send object action.*/"
          object="#//@packages.0/SendSignalAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InvocationAction"/>
      <ownedAttribute tag="#//@packages.0/SendSignalAction/target/@ownedTags.0" name="target"
          type="#//@packages.0/SendSignalAction/target/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The target object to which the signal is sent.*/" object="#//@packages.0/SendSignalAction/target"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/SendSignalAction/signal/@ownedTags.0" name="signal"
          type="#//@packages.0/SendSignalAction/signal/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The type of signal transmitted to the target object.*/"
            object="#//@packages.0/SendSignalAction/signal"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Signal"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/SendSignalAction/number_order/@ownedTags.0"
          name="number_order" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The number and order of argument pins must be the same as the number and order of attributes in the signal.&#xD;&#xA;true*/"
            object="#//@packages.0/SendSignalAction/number_order"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/SendSignalAction/type_ordering_multiplicity/@ownedTags.0"
          name="type_ordering_multiplicity" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The type, ordering, and multiplicity of an argument pin must be the same as the corresponding attribute of the signal.&#xD;&#xA;true*/"
            object="#//@packages.0/SendSignalAction/type_ordering_multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CallOperationAction/@ownedTags.0"
        name="CallOperationAction" superType="#//@packages.0/CallOperationAction/@containedType.0">
      <ownedTags value="/**A call operation action is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.*/"
          object="#//@packages.0/CallOperationAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/CallAction"/>
      <ownedAttribute tag="#//@packages.0/CallOperationAction/operation/@ownedTags.0"
          name="operation" type="#//@packages.0/CallOperationAction/operation/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The operation to be invoked by the action execution.*/"
            object="#//@packages.0/CallOperationAction/operation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/CallOperationAction/target/@ownedTags.0"
          name="target" type="#//@packages.0/CallOperationAction/target/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The target object to which the request is sent. The classifier of the target object is used to dynamically determine a behavior to invoke. This object constitutes the context of the execution of the operation.*/"
            object="#//@packages.0/CallOperationAction/target"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/CallOperationAction/argument_pin_equal_parameter/@ownedTags.0"
          name="argument_pin_equal_parameter" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The number of argument pins and the number of owned parameters of the operation of type in and in-out must be equal.&#xD;&#xA;true*/"
            object="#//@packages.0/CallOperationAction/argument_pin_equal_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CallOperationAction/result_pin_equal_parameter/@ownedTags.0"
          name="result_pin_equal_parameter" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The number of result pins and the number of owned parameters of the operation of type return, out, and in-out must be equal.&#xD;&#xA;true*/"
            object="#//@packages.0/CallOperationAction/result_pin_equal_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CallOperationAction/type_target_pin/@ownedTags.0"
          name="type_target_pin" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the target pin must be the same as the type that owns the operation.&#xD;&#xA;true*/"
            object="#//@packages.0/CallOperationAction/type_target_pin"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CallBehaviorAction/@ownedTags.0"
        name="CallBehaviorAction" superType="#//@packages.0/CallBehaviorAction/@containedType.0">
      <ownedTags value="/**A call behavior action is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.*/"
          object="#//@packages.0/CallBehaviorAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/CallAction"/>
      <ownedAttribute tag="#//@packages.0/CallBehaviorAction/behavior/@ownedTags.0"
          name="behavior" type="#//@packages.0/CallBehaviorAction/behavior/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The invoked behavior. It must be capable of accepting and returning control.*/"
            object="#//@packages.0/CallBehaviorAction/behavior"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/CallBehaviorAction/argument_pin_equal_parameter/@ownedTags.0"
          name="argument_pin_equal_parameter" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The number of argument pins and the number of parameters of the behavior of type in and in-out must be equal.&#xD;&#xA;true*/"
            object="#//@packages.0/CallBehaviorAction/argument_pin_equal_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CallBehaviorAction/result_pin_equal_parameter/@ownedTags.0"
          name="result_pin_equal_parameter" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The number of result pins and the number of parameters of the behavior of type return, out, and in-out must be equal.&#xD;&#xA;true*/"
            object="#//@packages.0/CallBehaviorAction/result_pin_equal_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/SequenceNode/@ownedTags.0"
        name="SequenceNode" superType="#//@packages.0/SequenceNode/@containedType.0">
      <ownedTags value="/**A sequence node is a structured activity node that executes its actions in order.*/"
          object="#//@packages.0/SequenceNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredActivityNode"/>
      <ownedAttribute tag="#//@packages.0/SequenceNode/executableNode/@ownedTags.0"
          name="executableNode" type="#//@packages.0/SequenceNode/executableNode/@containedType.0"
          isOrdered="true" upper="-1" isComposite="true">
        <ownedTags value="/**An ordered set of executable nodes.*/" object="#//@packages.0/SequenceNode/executableNode"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutableNode"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ControlNode/@ownedTags.0"
        name="ControlNode" isAbstract="true" superType="#//@packages.0/ControlNode/@containedType.0">
      <ownedTags value="/**A control node is an abstract activity node that coordinates flows in an activity.*/"
          object="#//@packages.0/ControlNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityNode"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ControlFlow/@ownedTags.0"
        name="ControlFlow" superType="#//@packages.0/ControlFlow/@containedType.0">
      <ownedTags value="/**A control flow is an edge that starts an activity node after the previous one is finished.*/"
          object="#//@packages.0/ControlFlow"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      <ownedOperation tag="#//@packages.0/ControlFlow/object_nodes/@ownedTags.0" name="object_nodes"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Control flows may not have object nodes at either end, except for object nodes with control type.&#xD;&#xA;true*/"
            object="#//@packages.0/ControlFlow/object_nodes"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InitialNode/@ownedTags.0"
        name="InitialNode" superType="#//@packages.0/InitialNode/@containedType.0">
      <ownedTags value="/**An initial node is a control node at which flow starts when the activity is invoked.*/"
          object="#//@packages.0/InitialNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ControlNode"/>
      <ownedOperation tag="#//@packages.0/InitialNode/no_incoming_edges/@ownedTags.0"
          name="no_incoming_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An initial node has no incoming edges.&#xD;&#xA;true*/"
            object="#//@packages.0/InitialNode/no_incoming_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InitialNode/control_edges/@ownedTags.0"
          name="control_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Only control edges can have initial nodes as source.&#xD;&#xA;true*/"
            object="#//@packages.0/InitialNode/control_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ActivityParameterNode/@ownedTags.0"
        name="ActivityParameterNode" superType="#//@packages.0/ActivityParameterNode/@containedType.0">
      <ownedTags value="/**An activity parameter node is an object node for inputs and outputs to activities.*/"
          object="#//@packages.0/ActivityParameterNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ObjectNode"/>
      <ownedAttribute tag="#//@packages.0/ActivityParameterNode/parameter/@ownedTags.0"
          name="parameter" type="#//@packages.0/ActivityParameterNode/parameter/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The parameter the object node will be accepting or providing values for.*/"
            object="#//@packages.0/ActivityParameterNode/parameter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Parameter"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ActivityParameterNode/has_parameters/@ownedTags.0"
          name="has_parameters" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Activity parameter nodes must have parameters from the containing activity.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityParameterNode/has_parameters"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityParameterNode/same_type/@ownedTags.0"
          name="same_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of an activity parameter node is the same as the type of its parameter.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityParameterNode/same_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityParameterNode/no_edges/@ownedTags.0"
          name="no_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An activity parameter node may have all incoming edges or all outgoing edges, but it must not have both incoming and outgoing edges.&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityParameterNode/no_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityParameterNode/no_incoming_edges/@ownedTags.0"
          name="no_incoming_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Activity parameter object nodes with no incoming edges and one or more outgoing edges must have a parameter with in or inout direction.&#xD;&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityParameterNode/no_incoming_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActivityParameterNode/no_outgoing_edges/@ownedTags.0"
          name="no_outgoing_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Activity parameter object nodes with no outgoing edges and one or more incoming edges must have a parameter with out, inout, or return direction.&#xD;&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/ActivityParameterNode/no_outgoing_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ValuePin/@ownedTags.0"
        name="ValuePin" superType="#//@packages.0/ValuePin/@containedType.0">
      <ownedTags value="/**A value pin is an input pin that provides a value by evaluating a value specification.*/"
          object="#//@packages.0/ValuePin"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      <ownedAttribute tag="#//@packages.0/ValuePin/value/@ownedTags.0" name="value"
          type="#//@packages.0/ValuePin/value/@containedType.0" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Value that the pin will provide.*/" object="#//@packages.0/ValuePin/value"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ValuePin/compatible_type/@ownedTags.0" name="compatible_type"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The type of value specification must be compatible with the type of the value pin.&#xD;&#xA;true*/"
            object="#//@packages.0/ValuePin/compatible_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ValuePin/no_incoming_edges/@ownedTags.0"
          name="no_incoming_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Value pins have no incoming edges.&#xD;&#xA;true*/" object="#//@packages.0/ValuePin/no_incoming_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Message/@ownedTags.0"
        name="Message" superType="#//@packages.0/Message/@containedType.0">
      <ownedTags value="/**A message defines a particular communication between lifelines of an interaction.*/"
          object="#//@packages.0/Message"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/Message/messageKind/@ownedTags.0" name="messageKind"
          type="#//@packages.0/MessageKind" isOrdered="true" lower="1" upper="1" isDerived="true">
        <ownedTags value="/**The derived kind of the Message (complete, lost, found or unknown)*/"
            object="#//@packages.0/Message/messageKind"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Message/messageKind/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Message/messageKind/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Message/messageKind/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Message/messageKind/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Message/messageSort/@ownedTags.0" name="messageSort"
          type="#//@packages.0/MessageSort" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The sort of communication reflected by the Message*/"
            object="#//@packages.0/Message/messageSort"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Message/receiveEvent/@ownedTags.0" name="receiveEvent"
          type="#//@packages.0/Message/receiveEvent/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**References the Receiving of the Message*/" object="#//@packages.0/Message/receiveEvent"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEnd"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Message/sendEvent/@ownedTags.0" name="sendEvent"
          type="#//@packages.0/Message/sendEvent/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**References the Sending of the Message.*/" object="#//@packages.0/Message/sendEvent"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEnd"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Message/connector/@ownedTags.0" name="connector"
          type="#//@packages.0/Message/connector/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**The Connector on which this Message is sent.*/" object="#//@packages.0/Message/connector"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Connector"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Message/interaction/@ownedTags.0" name="interaction"
          type="#//@packages.0/Message/interaction/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/Interaction/message">
        <ownedTags value="/**The enclosing Interaction owning the Message*/" object="#//@packages.0/Message/interaction"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interaction"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Message/argument/@ownedTags.0" name="argument"
          type="#//@packages.0/Message/argument/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**The arguments of the Message*/" object="#//@packages.0/Message/argument"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Message/signature/@ownedTags.0" name="signature"
          type="#//@packages.0/Message/signature/@containedType.0" isOrdered="true"
          upper="1" isDerived="true">
        <ownedTags value="/**The definition of the type or signature of the Message (depending on its kind). The associated named element is derived from the message end that constitutes the sending or receiving message event. If both a sending event and a receiving message event are present, the signature is obtained from the sending event.*/"
            object="#//@packages.0/Message/signature"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Message/signature/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Message/signature/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Message/signature/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Message/signature/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Message/sending_receiving_message_event/@ownedTags.0"
          name="sending_receiving_message_event" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If the sending MessageEvent and the receiving MessageEvent of the same Message are on the same Lifeline, the sending MessageEvent must be ordered before the receiving MessageEvent.&#xD;&#xA;true*/"
            object="#//@packages.0/Message/sending_receiving_message_event"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Message/signature_refer_to/@ownedTags.0"
          name="signature_refer_to" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The signature must either refer an Operation (in which case messageSort is either synchCall or asynchCall) or a Signal (in which case messageSort is asynchSignal). The name of the NamedElement referenced by signature must be the same as that of the Message.&#xD;&#xA;true*/"
            object="#//@packages.0/Message/signature_refer_to"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Message/signature_is_operation/@ownedTags.0"
          name="signature_is_operation" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**In the case when the Message signature is an Operation, the arguments of the Message must correspond to the parameters of the Operation. A Parameter corresponds to an Argument if the Argument is of the same Class or a specialization of that of the Parameter.&#xD;&#xA;true*/"
            object="#//@packages.0/Message/signature_is_operation"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Message/signature_is_signal/@ownedTags.0"
          name="signature_is_signal" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**In the case when the Message signature is a Signal, the arguments of the Message must correspond to the attributes of the Signal. A Message Argument corresponds to a Signal Attribute if the Arguement is of the same Class or a specialization of that of the Attribute.&#xD;&#xA;true*/"
            object="#//@packages.0/Message/signature_is_signal"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Message/arguments/@ownedTags.0" name="arguments"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Arguments of a Message must only be:&#xA;i) attributes of the sending lifeline&#xA;ii) constants&#xA;iii) symbolic values (which are wildcard values representing any legal value)&#xA;iv) explicit parameters of the enclosing Interaction&#xA;v) attributes of the class owning the Interaction&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/Message/arguments"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Message/cannot_cross_boundaries/@ownedTags.0"
          name="cannot_cross_boundaries" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Messages cannot cross bounderies of CombinedFragments or their operands.&#xD;&#xA;true*/"
            object="#//@packages.0/Message/cannot_cross_boundaries"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Message/occurrence_specifications/@ownedTags.0"
          name="occurrence_specifications" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If the MessageEnds are both OccurrenceSpecifications then the connector must go between the Parts represented by the Lifelines of the two MessageEnds.&#xD;&#xA;true*/"
            object="#//@packages.0/Message/occurrence_specifications"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation name="getMessageKind" type="#//@packages.0/MessageKind" isOrdered="true"
          lower="1" upper="1" isAbstract="true"/>
      <ownedOperation name="getSignature" type="#//@packages.0/Message/getSignature/@containedType.0"
          isOrdered="true" upper="1" isAbstract="true">
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="MessageKind">
      <ownedLiteral name="complete"/>
      <ownedLiteral name="lost"/>
      <ownedLiteral name="found"/>
      <ownedLiteral name="unknown"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="MessageSort">
      <ownedLiteral name="synchCall"/>
      <ownedLiteral name="asynchCall"/>
      <ownedLiteral name="asynchSignal"/>
      <ownedLiteral name="createMessage"/>
      <ownedLiteral name="deleteMessage"/>
      <ownedLiteral name="reply"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/MessageEnd/@ownedTags.0"
        name="MessageEnd" isAbstract="true" superType="#//@packages.0/MessageEnd/@containedType.0">
      <ownedTags value="/**MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a message.*/"
          object="#//@packages.0/MessageEnd"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/MessageEnd/message/@ownedTags.0" name="message"
          type="#//@packages.0/MessageEnd/message/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**References a Message.*/" object="#//@packages.0/MessageEnd/message"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Message"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Interaction/@ownedTags.0"
        name="Interaction" superType="#//@packages.0/Interaction/@containedType.0 #//@packages.0/Interaction/@containedType.1">
      <ownedTags value="/**An interaction is a unit of behavior that focuses on the observable exchange of information between connectable elements.*/"
          object="#//@packages.0/Interaction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      <ownedAttribute tag="#//@packages.0/Interaction/lifeline/@ownedTags.0" name="lifeline"
          type="#//@packages.0/Interaction/lifeline/@containedType.0" upper="-1" opposite="#//@packages.0/Lifeline/interaction"
          isComposite="true">
        <ownedTags value="/**Specifies the participants in this Interaction.*/" object="#//@packages.0/Interaction/lifeline"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Lifeline"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interaction/fragment/@ownedTags.0" name="fragment"
          type="#//@packages.0/Interaction/fragment/@containedType.0" isOrdered="true"
          upper="-1" opposite="#//@packages.0/InteractionFragment/enclosingInteraction"
          isComposite="true">
        <ownedTags value="/**The ordered set of fragments in the Interaction.*/" object="#//@packages.0/Interaction/fragment"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interaction/action/@ownedTags.0" name="action"
          type="#//@packages.0/Interaction/action/@containedType.0" upper="-1" isComposite="true">
        <ownedTags value="/**Actions owned by the Interaction.*/" object="#//@packages.0/Interaction/action"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interaction/formalGate/@ownedTags.0" name="formalGate"
          type="#//@packages.0/Interaction/formalGate/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**Specifies the gates that form the message interface between this Interaction and any InteractionUses which reference it.&#xD;&#xA;*/"
            object="#//@packages.0/Interaction/formalGate"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Gate"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interaction/message/@ownedTags.0" name="message"
          type="#//@packages.0/Interaction/message/@containedType.0" upper="-1" opposite="#//@packages.0/Message/interaction"
          isComposite="true">
        <ownedTags value="/**The Messages contained in this Interaction.*/" object="#//@packages.0/Interaction/message"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Message"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InteractionFragment/@ownedTags.0"
        name="InteractionFragment" isAbstract="true" superType="#//@packages.0/InteractionFragment/@containedType.0">
      <ownedTags value="/**InteractionFragment is an abstract notion of the most general interaction unit. An interaction fragment is a piece of an interaction. Each interaction fragment is conceptually like an interaction by itself.*/"
          object="#//@packages.0/InteractionFragment"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/InteractionFragment/covered/@ownedTags.0"
          name="covered" type="#//@packages.0/InteractionFragment/covered/@containedType.0"
          upper="-1" opposite="#//@packages.0/Lifeline/coveredBy">
        <ownedTags value="/**References the Lifelines that the InteractionFragment involves.*/"
            object="#//@packages.0/InteractionFragment/covered"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Lifeline"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InteractionFragment/generalOrdering/@ownedTags.0"
          name="generalOrdering" type="#//@packages.0/InteractionFragment/generalOrdering/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**The general ordering relationships contained in this fragment.*/"
            object="#//@packages.0/InteractionFragment/generalOrdering"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/GeneralOrdering"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InteractionFragment/enclosingInteraction/@ownedTags.0"
          name="enclosingInteraction" type="#//@packages.0/InteractionFragment/enclosingInteraction/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/Interaction/fragment">
        <ownedTags value="/**The Interaction enclosing this InteractionFragment.*/"
            object="#//@packages.0/InteractionFragment/enclosingInteraction"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interaction"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InteractionFragment/enclosingOperand/@ownedTags.0"
          name="enclosingOperand" type="#//@packages.0/InteractionFragment/enclosingOperand/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/InteractionOperand/fragment">
        <ownedTags value="/**The operand enclosing this InteractionFragment (they may nest recursively)*/"
            object="#//@packages.0/InteractionFragment/enclosingOperand"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionOperand"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Lifeline/@ownedTags.0"
        name="Lifeline" superType="#//@packages.0/Lifeline/@containedType.0">
      <ownedTags value="/**A lifeline represents an individual participant in the interaction. While parts and structural features may have multiplicity greater than 1, lifelines represent only one interacting entity.*/"
          object="#//@packages.0/Lifeline"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/Lifeline/represents/@ownedTags.0" name="represents"
          type="#//@packages.0/Lifeline/represents/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**References the ConnectableElement within the classifier that contains the enclosing interaction.*/"
            object="#//@packages.0/Lifeline/represents"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ConnectableElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Lifeline/interaction/@ownedTags.0" name="interaction"
          type="#//@packages.0/Lifeline/interaction/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/Interaction/lifeline">
        <ownedTags value="/**References the Interaction enclosing this Lifeline.*/"
            object="#//@packages.0/Lifeline/interaction"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interaction"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Lifeline/selector/@ownedTags.0" name="selector"
          type="#//@packages.0/Lifeline/selector/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.*/"
            object="#//@packages.0/Lifeline/selector"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Lifeline/decomposedAs/@ownedTags.0" name="decomposedAs"
          type="#//@packages.0/Lifeline/decomposedAs/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**References the Interaction that represents the decomposition.*/"
            object="#//@packages.0/Lifeline/decomposedAs"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PartDecomposition"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Lifeline/coveredBy/@ownedTags.0" name="coveredBy"
          type="#//@packages.0/Lifeline/coveredBy/@containedType.0" upper="-1" opposite="#//@packages.0/InteractionFragment/covered">
        <ownedTags value="/**References the InteractionFragments in which this Lifeline takes part.*/"
            object="#//@packages.0/Lifeline/coveredBy"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Lifeline/interaction_uses_share_lifeline/@ownedTags.0"
          name="interaction_uses_share_lifeline" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If two (or more) InteractionUses within one Interaction, refer to Interactions with 'common Lifelines,' those Lifelines must also appear in the Interaction with the InteractionUses. By common Lifelines we mean Lifelines with the same selector and represents associations.&#xD;&#xA;true*/"
            object="#//@packages.0/Lifeline/interaction_uses_share_lifeline"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Lifeline/selector_specified/@ownedTags.0"
          name="selector_specified" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The selector for a Lifeline must only be specified if the referenced Part is multivalued.&#xD;&#xA;(self.selector->isEmpty() implies not self.represents.isMultivalued()) or&#xA;(not self.selector->isEmpty() implies self.represents.isMultivalued())&#xA;*/"
            object="#//@packages.0/Lifeline/selector_specified"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Lifeline/same_classifier/@ownedTags.0" name="same_classifier"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The classifier containing the referenced ConnectableElement must be the same classifier, or an ancestor, of the classifier that contains the interaction enclosing this lifeline.&#xD;&#xA;if (represents->notEmpty()) then&#xA;(if selector->notEmpty() then represents.isMultivalued() else not represents.isMultivalued())&#xA;*/"
            object="#//@packages.0/Lifeline/same_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/PartDecomposition/@ownedTags.0"
        name="PartDecomposition" superType="#//@packages.0/PartDecomposition/@containedType.0">
      <ownedTags value="/**A part decomposition is a description of the internal interactions of one lifeline relative to an interaction.*/"
          object="#//@packages.0/PartDecomposition"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionUse"/>
      <ownedOperation tag="#//@packages.0/PartDecomposition/parts_of_internal_structures/@ownedTags.0"
          name="parts_of_internal_structures" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**PartDecompositions apply only to Parts that are Parts of Internal Structures not to Parts of Collaborations.&#xD;&#xA;true*/"
            object="#//@packages.0/PartDecomposition/parts_of_internal_structures"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/PartDecomposition/assume/@ownedTags.0" name="assume"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Assume that within Interaction X, Lifeline L is of class C and decomposed to D. Within X there is a sequence of constructs along L (such constructs are CombinedFragments, InteractionUse and (plain) OccurrenceSpecifications). Then a corresponding sequence of constructs must appear within D, matched one-to-one in the same order.&#xD;&#xA;&#xD;&#xA;i) CombinedFragment covering L are matched with an extra-global CombinedFragment in D&#xD;&#xA;ii) An InteractionUse covering L are matched with a global (i.e. covering all Lifelines) InteractionUse in D.&#xD;&#xA;iii) A plain OccurrenceSpecification on L is considered an actualGate that must be matched by a formalGate of D&#xD;&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/PartDecomposition/assume"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/PartDecomposition/commutativity_of_decomposition/@ownedTags.0"
          name="commutativity_of_decomposition" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Assume that within Interaction X, Lifeline L is of class C and decomposed to D. Assume also that there is within X an&#xD;&#xA;InteractionUse (say) U that covers L. According to the constraint above U will have a counterpart CU within D. Within the Interaction referenced by U, L should also be decomposed, and the decomposition should reference CU. (This rule is called commutativity of decomposition)&#xD;&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/PartDecomposition/commutativity_of_decomposition"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InteractionUse/@ownedTags.0"
        name="InteractionUse" superType="#//@packages.0/InteractionUse/@containedType.0">
      <ownedTags value="/**An interaction use refers to an interaction. The interaction use is a shorthand for copying the contents of the referenced interaction where the interaction use is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal gates with the actual ones.*/"
          object="#//@packages.0/InteractionUse"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      <ownedAttribute tag="#//@packages.0/InteractionUse/refersTo/@ownedTags.0" name="refersTo"
          type="#//@packages.0/InteractionUse/refersTo/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**Refers to the Interaction that defines its meaning*/"
            object="#//@packages.0/InteractionUse/refersTo"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interaction"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InteractionUse/actualGate/@ownedTags.0"
          name="actualGate" type="#//@packages.0/InteractionUse/actualGate/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**The actual gates of the InteractionUse*/" object="#//@packages.0/InteractionUse/actualGate"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Gate"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InteractionUse/argument/@ownedTags.0" name="argument"
          type="#//@packages.0/InteractionUse/argument/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**The actual arguments of the Interaction*/" object="#//@packages.0/InteractionUse/argument"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/InteractionUse/gates_match/@ownedTags.0"
          name="gates_match" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Actual Gates of the InteractionUse must match Formal Gates of the referred Interaction. Gates match when their names are equal.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionUse/gates_match"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InteractionUse/all_lifelines/@ownedTags.0"
          name="all_lifelines" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The InteractionUse must cover all Lifelines of the enclosing Interaction which appear within the referred Interaction.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionUse/all_lifelines"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InteractionUse/arguments_correspond_to_parameters/@ownedTags.0"
          name="arguments_correspond_to_parameters" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The arguments of the InteractionUse must correspond to parameters of the referred Interaction&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionUse/arguments_correspond_to_parameters"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InteractionUse/arguments_are_constants/@ownedTags.0"
          name="arguments_are_constants" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The arguments must only be constants, parameters of the enclosing Interaction or attributes of the classifier owning the enclosing Interaction.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionUse/arguments_are_constants"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Gate/@ownedTags.0"
        name="Gate" superType="#//@packages.0/Gate/@containedType.0">
      <ownedTags value="/**A gate is a connection point for relating a message outside an interaction fragment with a message inside the interaction fragment.*/"
          object="#//@packages.0/Gate"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEnd"/>
      <ownedOperation tag="#//@packages.0/Gate/messages_actual_gate/@ownedTags.0"
          name="messages_actual_gate" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The message leading to/from an actualGate of an InteractionUse must correspond to the message leading from/to the formalGate with the same name of the Interaction referenced by the InteractionUse.&#xD;&#xA;true*/"
            object="#//@packages.0/Gate/messages_actual_gate"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Gate/messages_combined_fragment/@ownedTags.0"
          name="messages_combined_fragment" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The message leading to/from an (expression) Gate within a CombinedFragment must correspond to the message leading from/to the CombinedFragment on its outside.&#xD;&#xA;true*/"
            object="#//@packages.0/Gate/messages_combined_fragment"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/GeneralOrdering/@ownedTags.0"
        name="GeneralOrdering" superType="#//@packages.0/GeneralOrdering/@containedType.0">
      <ownedTags value="/**A general ordering represents a binary relation between two occurrence specifications, to describe that one occurrence specification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of occurrence cpecifications that may otherwise not have a specified order.*/"
          object="#//@packages.0/GeneralOrdering"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      <ownedAttribute tag="#//@packages.0/GeneralOrdering/before/@ownedTags.0" name="before"
          type="#//@packages.0/GeneralOrdering/before/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/OccurrenceSpecification/toAfter">
        <ownedTags value="/**The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.*/"
            object="#//@packages.0/GeneralOrdering/before"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OccurrenceSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/GeneralOrdering/after/@ownedTags.0" name="after"
          type="#//@packages.0/GeneralOrdering/after/@containedType.0" isOrdered="true"
          lower="1" upper="1" opposite="#//@packages.0/OccurrenceSpecification/toBefore">
        <ownedTags value="/**The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.*/"
            object="#//@packages.0/GeneralOrdering/after"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OccurrenceSpecification"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/OccurrenceSpecification/@ownedTags.0"
        name="OccurrenceSpecification" superType="#//@packages.0/OccurrenceSpecification/@containedType.0">
      <ownedTags value="/**An occurrence specification is the basic semantic unit of interactions. The sequences of occurrences specified by them are the meanings of interactions.*/"
          object="#//@packages.0/OccurrenceSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      <ownedAttribute tag="#//@packages.0/OccurrenceSpecification/toBefore/@ownedTags.0"
          name="toBefore" type="#//@packages.0/OccurrenceSpecification/toBefore/@containedType.0"
          upper="-1" opposite="#//@packages.0/GeneralOrdering/after">
        <ownedTags value="/**References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification&#xD;&#xA;*/"
            object="#//@packages.0/OccurrenceSpecification/toBefore"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/GeneralOrdering"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/OccurrenceSpecification/event/@ownedTags.0"
          name="event" type="#//@packages.0/OccurrenceSpecification/event/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**References a specification of the occurring event.*/"
            object="#//@packages.0/OccurrenceSpecification/event"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Event"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/OccurrenceSpecification/toAfter/@ownedTags.0"
          name="toAfter" type="#//@packages.0/OccurrenceSpecification/toAfter/@containedType.0"
          upper="-1" opposite="#//@packages.0/GeneralOrdering/before">
        <ownedTags value="/**References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification&#xD;&#xA;*/"
            object="#//@packages.0/OccurrenceSpecification/toAfter"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/GeneralOrdering"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InteractionOperand/@ownedTags.0"
        name="InteractionOperand" superType="#//@packages.0/InteractionOperand/@containedType.0 #//@packages.0/InteractionOperand/@containedType.1">
      <ownedTags value="/**An interaction operand is contained in a combined fragment. An interaction operand represents one operand of the expression given by the enclosing combined fragment.*/"
          object="#//@packages.0/InteractionOperand"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Namespace"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      <ownedAttribute tag="#//@packages.0/InteractionOperand/guard/@ownedTags.0" name="guard"
          type="#//@packages.0/InteractionOperand/guard/@containedType.0" isOrdered="true"
          upper="1" isComposite="true">
        <ownedTags value="/**Constraint of the operand.*/" object="#//@packages.0/InteractionOperand/guard"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionConstraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InteractionOperand/fragment/@ownedTags.0"
          name="fragment" type="#//@packages.0/InteractionOperand/fragment/@containedType.0"
          isOrdered="true" upper="-1" opposite="#//@packages.0/InteractionFragment/enclosingOperand"
          isComposite="true">
        <ownedTags value="/**The fragments of the operand.*/" object="#//@packages.0/InteractionOperand/fragment"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/InteractionOperand/guard_directly_prior/@ownedTags.0"
          name="guard_directly_prior" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The guard must be placed directly prior to (above) the OccurrenceSpecification that will become the first OccurrenceSpecification within this InteractionOperand.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionOperand/guard_directly_prior"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InteractionOperand/guard_contain_references/@ownedTags.0"
          name="guard_contain_references" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The guard must contain only references to values local to the Lifeline on which it resides, or values global to the whole Interaction.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionOperand/guard_contain_references"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InteractionConstraint/@ownedTags.0"
        name="InteractionConstraint" superType="#//@packages.0/InteractionConstraint/@containedType.0">
      <ownedTags value="/**An interaction constraint is a Boolean expression that guards an operand in a combined fragment.*/"
          object="#//@packages.0/InteractionConstraint"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      <ownedAttribute tag="#//@packages.0/InteractionConstraint/minint/@ownedTags.0"
          name="minint" type="#//@packages.0/InteractionConstraint/minint/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The minimum number of iterations of a loop*/" object="#//@packages.0/InteractionConstraint/minint"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InteractionConstraint/maxint/@ownedTags.0"
          name="maxint" type="#//@packages.0/InteractionConstraint/maxint/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**The maximum number of iterations of a loop*/" object="#//@packages.0/InteractionConstraint/maxint"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/InteractionConstraint/dynamic_variables/@ownedTags.0"
          name="dynamic_variables" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The dynamic variables that take part in the constraint must be owned by the ConnectableElement corresponding to the covered Lifeline.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionConstraint/dynamic_variables"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InteractionConstraint/global_data/@ownedTags.0"
          name="global_data" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The constraint may contain references to global data or write-once data.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionConstraint/global_data"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InteractionConstraint/minint_maxint/@ownedTags.0"
          name="minint_maxint" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Minint/maxint can only be present if the InteractionConstraint is associated with the operand of a loop CombinedFragment.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionConstraint/minint_maxint"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InteractionConstraint/minint_non_negative/@ownedTags.0"
          name="minint_non_negative" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If minint is specified, then the expression must evaluate to a non-negative integer.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionConstraint/minint_non_negative"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InteractionConstraint/maxint_positive/@ownedTags.0"
          name="maxint_positive" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If maxint is specified, then the expression must evaluate to a positive integer.&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionConstraint/maxint_positive"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InteractionConstraint/maxint_greater_equal_minint/@ownedTags.0"
          name="maxint_greater_equal_minint" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If maxint is specified, then minint must be specified and the evaluation of maxint must be >= the evaluation of minint&#xD;&#xA;true*/"
            object="#//@packages.0/InteractionConstraint/maxint_greater_equal_minint"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExecutionSpecification/@ownedTags.0"
        name="ExecutionSpecification" isAbstract="true" superType="#//@packages.0/ExecutionSpecification/@containedType.0">
      <ownedTags value="/**An execution specification is a specification of the execution of a unit of behavior or action within the lifeline. The duration of an execution specification is represented by two cccurrence specifications, the start occurrence specification and the finish occurrence specification.*/"
          object="#//@packages.0/ExecutionSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      <ownedAttribute tag="#//@packages.0/ExecutionSpecification/start/@ownedTags.0"
          name="start" type="#//@packages.0/ExecutionSpecification/start/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**References the OccurrenceSpecification that designates the start of the Action or Behavior*/"
            object="#//@packages.0/ExecutionSpecification/start"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OccurrenceSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ExecutionSpecification/finish/@ownedTags.0"
          name="finish" type="#//@packages.0/ExecutionSpecification/finish/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**References the OccurrenceSpecification that designates the finish of the Action or Behavior.*/"
            object="#//@packages.0/ExecutionSpecification/finish"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OccurrenceSpecification"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ExecutionSpecification/same_lifeline/@ownedTags.0"
          name="same_lifeline" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The startEvent and the finishEvent must be on the same Lifeline&#xD;&#xA;start.lifeline = finish.lifeline*/"
            object="#//@packages.0/ExecutionSpecification/same_lifeline"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/StateInvariant/@ownedTags.0"
        name="StateInvariant" superType="#//@packages.0/StateInvariant/@containedType.0">
      <ownedTags value="/**A state invariant is a runtime constraint on the participants of the interaction. It may be used to specify a variety of different kinds of constraints, such as values of attributes or variables, internal or external states, and so on. A state invariant is an interaction fragment and it is placed on a lifeline.*/"
          object="#//@packages.0/StateInvariant"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      <ownedAttribute tag="#//@packages.0/StateInvariant/invariant/@ownedTags.0" name="invariant"
          type="#//@packages.0/StateInvariant/invariant/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**A Constraint that should hold at runtime for this StateInvariant*/"
            object="#//@packages.0/StateInvariant/invariant"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ActionExecutionSpecification/@ownedTags.0"
        name="ActionExecutionSpecification" superType="#//@packages.0/ActionExecutionSpecification/@containedType.0">
      <ownedTags value="/**An action execution specification is a kind of execution specification representing the execution of an action.*/"
          object="#//@packages.0/ActionExecutionSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutionSpecification"/>
      <ownedAttribute tag="#//@packages.0/ActionExecutionSpecification/action/@ownedTags.0"
          name="action" type="#//@packages.0/ActionExecutionSpecification/action/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Action whose execution is occurring.*/" object="#//@packages.0/ActionExecutionSpecification/action"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ActionExecutionSpecification/action_referenced/@ownedTags.0"
          name="action_referenced" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The Action referenced by the ActionExecutionSpecification, if any, must be owned by the Interaction owning the ActionExecutionOccurrence.&#xD;&#xA;true*/"
            object="#//@packages.0/ActionExecutionSpecification/action_referenced"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/BehaviorExecutionSpecification/@ownedTags.0"
        name="BehaviorExecutionSpecification" superType="#//@packages.0/BehaviorExecutionSpecification/@containedType.0">
      <ownedTags value="/**A behavior execution specification is a kind of execution specification representing the execution of a behavior.*/"
          object="#//@packages.0/BehaviorExecutionSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutionSpecification"/>
      <ownedAttribute tag="#//@packages.0/BehaviorExecutionSpecification/behavior/@ownedTags.0"
          name="behavior" type="#//@packages.0/BehaviorExecutionSpecification/behavior/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**Behavior whose execution is occurring.*/" object="#//@packages.0/BehaviorExecutionSpecification/behavior"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExecutionEvent/@ownedTags.0"
        name="ExecutionEvent" superType="#//@packages.0/ExecutionEvent/@containedType.0">
      <ownedTags value="/**An execution event models the start or finish of an execution occurrence.*/"
          object="#//@packages.0/ExecutionEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Event"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CreationEvent/@ownedTags.0"
        name="CreationEvent" superType="#//@packages.0/CreationEvent/@containedType.0">
      <ownedTags value="/**A creation event models the creation of an object.*/" object="#//@packages.0/CreationEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Event"/>
      <ownedOperation tag="#//@packages.0/CreationEvent/no_occurrence_above/@ownedTags.0"
          name="no_occurrence_above" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**No othet OccurrenceSpecification may appear above an OccurrenceSpecification which references a CreationEvent on a given Lifeline in an InteractionOperand.&#xD;&#xA;true*/"
            object="#//@packages.0/CreationEvent/no_occurrence_above"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DestructionEvent/@ownedTags.0"
        name="DestructionEvent" superType="#//@packages.0/DestructionEvent/@containedType.0">
      <ownedTags value="/**A destruction event models the destruction of an object.*/"
          object="#//@packages.0/DestructionEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Event"/>
      <ownedOperation tag="#//@packages.0/DestructionEvent/no_occurrence_specifications_below/@ownedTags.0"
          name="no_occurrence_specifications_below" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**No other OccurrenceSpecifications may appear below an OccurrenceSpecification which references a DestructionEvent on a given Lifeline in an InteractionOperand.&#xD;&#xA;true*/"
            object="#//@packages.0/DestructionEvent/no_occurrence_specifications_below"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/SendOperationEvent/@ownedTags.0"
        name="SendOperationEvent" superType="#//@packages.0/SendOperationEvent/@containedType.0">
      <ownedTags value="/**A send operation event models the invocation of an operation call.*/"
          object="#//@packages.0/SendOperationEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEvent"/>
      <ownedAttribute tag="#//@packages.0/SendOperationEvent/operation/@ownedTags.0"
          name="operation" type="#//@packages.0/SendOperationEvent/operation/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The operation associated with this event.*/" object="#//@packages.0/SendOperationEvent/operation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/MessageEvent/@ownedTags.0"
        name="MessageEvent" isAbstract="true" superType="#//@packages.0/MessageEvent/@containedType.0">
      <ownedTags value="/**A message event specifies the receipt by an object of either a call or a signal.*/"
          object="#//@packages.0/MessageEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Event"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/SendSignalEvent/@ownedTags.0"
        name="SendSignalEvent" superType="#//@packages.0/SendSignalEvent/@containedType.0">
      <ownedTags value="/**A send signal event models the sending of a signal.*/"
          object="#//@packages.0/SendSignalEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEvent"/>
      <ownedAttribute tag="#//@packages.0/SendSignalEvent/signal/@ownedTags.0" name="signal"
          type="#//@packages.0/SendSignalEvent/signal/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The signal associated with this event.*/" object="#//@packages.0/SendSignalEvent/signal"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Signal"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/MessageOccurrenceSpecification/@ownedTags.0"
        name="MessageOccurrenceSpecification" superType="#//@packages.0/MessageOccurrenceSpecification/@containedType.0 #//@packages.0/MessageOccurrenceSpecification/@containedType.1">
      <ownedTags value="/**A message occurrence specification pecifies the occurrence of message events, such as sending and receiving of signals or invoking or receiving of operation calls. A message occurrence specification is a kind of message end. Messages are generated either by synchronous operation calls or asynchronous signal sends. They are received by the execution of corresponding accept event actions.*/"
          object="#//@packages.0/MessageOccurrenceSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OccurrenceSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEnd"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExecutionOccurrenceSpecification/@ownedTags.0"
        name="ExecutionOccurrenceSpecification" superType="#//@packages.0/ExecutionOccurrenceSpecification/@containedType.0">
      <ownedTags value="/**An execution occurrence specification represents moments in time at which actions or behaviors start or finish.*/"
          object="#//@packages.0/ExecutionOccurrenceSpecification"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OccurrenceSpecification"/>
      <ownedAttribute tag="#//@packages.0/ExecutionOccurrenceSpecification/execution/@ownedTags.0"
          name="execution" type="#//@packages.0/ExecutionOccurrenceSpecification/execution/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**References the execution specification describing the execution that is started or finished at this execution event.*/"
            object="#//@packages.0/ExecutionOccurrenceSpecification/execution"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutionSpecification"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReceiveOperationEvent/@ownedTags.0"
        name="ReceiveOperationEvent" superType="#//@packages.0/ReceiveOperationEvent/@containedType.0">
      <ownedTags value="/**A receive operation event specifies the event of receiving an operation invocation for a particular operation by the target entity.*/"
          object="#//@packages.0/ReceiveOperationEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEvent"/>
      <ownedAttribute tag="#//@packages.0/ReceiveOperationEvent/operation/@ownedTags.0"
          name="operation" type="#//@packages.0/ReceiveOperationEvent/operation/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The operation associated with this event.*/" object="#//@packages.0/ReceiveOperationEvent/operation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReceiveSignalEvent/@ownedTags.0"
        name="ReceiveSignalEvent" superType="#//@packages.0/ReceiveSignalEvent/@containedType.0">
      <ownedTags value="/**A receive signal event specifies the event of receiving a signal by the target entity.*/"
          object="#//@packages.0/ReceiveSignalEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEvent"/>
      <ownedAttribute tag="#//@packages.0/ReceiveSignalEvent/signal/@ownedTags.0"
          name="signal" type="#//@packages.0/ReceiveSignalEvent/signal/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The signal associated with this event.*/" object="#//@packages.0/ReceiveSignalEvent/signal"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Signal"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Actor/@ownedTags.0"
        name="Actor" superType="#//@packages.0/Actor/@containedType.0">
      <ownedTags value="/**An actor specifies a role played by a user or any other system that interacts with the subject.*/"
          object="#//@packages.0/Actor"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/BehavioredClassifier"/>
      <ownedOperation tag="#//@packages.0/Actor/associations/@ownedTags.0" name="associations"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An actor can only have associations to use cases, components and classes. Furthermore these associations must be binary.&#xD;&#xA;self.ownedAttribute->forAll ( a |&#xA;(a.association->notEmpty()) implies&#xA;((a.association.memberEnd.size() = 2) and&#xA;(a.opposite.class.oclIsKindOf(UseCase) or&#xA;(a.opposite.class.oclIsKindOf(Class) and not a.opposite.class.oclIsKindOf(Behavior))))&#xA;*/"
            object="#//@packages.0/Actor/associations"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Actor/must_have_name/@ownedTags.0" name="must_have_name"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An actor must have a name.&#xD;&#xA;name->notEmpty()*/"
            object="#//@packages.0/Actor/must_have_name"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CallEvent/@ownedTags.0"
        name="CallEvent" superType="#//@packages.0/CallEvent/@containedType.0">
      <ownedTags value="/**A call event models the receipt by an object of a message invoking a call of an operation.*/"
          object="#//@packages.0/CallEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEvent"/>
      <ownedAttribute tag="#//@packages.0/CallEvent/operation/@ownedTags.0" name="operation"
          type="#//@packages.0/CallEvent/operation/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**Designates the operation whose invocation raised the call event.*/"
            object="#//@packages.0/CallEvent/operation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ChangeEvent/@ownedTags.0"
        name="ChangeEvent" superType="#//@packages.0/ChangeEvent/@containedType.0">
      <ownedTags value="/**A change event models a change in the system configuration that makes a condition true.*/"
          object="#//@packages.0/ChangeEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Event"/>
      <ownedAttribute tag="#//@packages.0/ChangeEvent/changeExpression/@ownedTags.0"
          name="changeExpression" type="#//@packages.0/ChangeEvent/changeExpression/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**A Boolean-valued expression that will result in a change event whenever its value changes from false to true.*/"
            object="#//@packages.0/ChangeEvent/changeExpression"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/SignalEvent/@ownedTags.0"
        name="SignalEvent" superType="#//@packages.0/SignalEvent/@containedType.0">
      <ownedTags value="/**A signal event represents the receipt of an asynchronous signal instance. A signal event may, for example, cause a state machine to trigger a transition.*/"
          object="#//@packages.0/SignalEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEvent"/>
      <ownedAttribute tag="#//@packages.0/SignalEvent/signal/@ownedTags.0" name="signal"
          type="#//@packages.0/SignalEvent/signal/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The specific signal that is associated with this event.*/"
            object="#//@packages.0/SignalEvent/signal"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Signal"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/AnyReceiveEvent/@ownedTags.0"
        name="AnyReceiveEvent" superType="#//@packages.0/AnyReceiveEvent/@containedType.0">
      <ownedTags value="/**A transition trigger associated with an any receive event specifies that the transition is to be triggered by the receipt of any message that is not explicitly referenced in another transition from the same vertex.*/"
          object="#//@packages.0/AnyReceiveEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/MessageEvent"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ForkNode/@ownedTags.0"
        name="ForkNode" superType="#//@packages.0/ForkNode/@containedType.0">
      <ownedTags value="/**A fork node is a control node that splits a flow into multiple concurrent flows.*/"
          object="#//@packages.0/ForkNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ControlNode"/>
      <ownedOperation tag="#//@packages.0/ForkNode/one_incoming_edge/@ownedTags.0"
          name="one_incoming_edge" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A fork node has one incoming edge.&#xD;&#xA;true*/" object="#//@packages.0/ForkNode/one_incoming_edge"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ForkNode/edges/@ownedTags.0" name="edges"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The edges coming into and out of a fork node must be either all object flows or all control flows.&#xD;&#xA;true*/"
            object="#//@packages.0/ForkNode/edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/FlowFinalNode/@ownedTags.0"
        name="FlowFinalNode" superType="#//@packages.0/FlowFinalNode/@containedType.0">
      <ownedTags value="/**A flow final node is a final node that terminates a flow.*/"
          object="#//@packages.0/FlowFinalNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/FinalNode"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/FinalNode/@ownedTags.0"
        name="FinalNode" isAbstract="true" superType="#//@packages.0/FinalNode/@containedType.0">
      <ownedTags value="/**A final node is an abstract control node at which a flow in an activity stops.*/"
          object="#//@packages.0/FinalNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ControlNode"/>
      <ownedOperation tag="#//@packages.0/FinalNode/no_outgoing_edges/@ownedTags.0"
          name="no_outgoing_edges" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A final node has no outgoing edges.&#xD;&#xA;true*/"
            object="#//@packages.0/FinalNode/no_outgoing_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CentralBufferNode/@ownedTags.0"
        name="CentralBufferNode" superType="#//@packages.0/CentralBufferNode/@containedType.0">
      <ownedTags value="/**A central buffer node is an object node for managing flows from multiple sources and destinations.*/"
          object="#//@packages.0/CentralBufferNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ObjectNode"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/MergeNode/@ownedTags.0"
        name="MergeNode" superType="#//@packages.0/MergeNode/@containedType.0">
      <ownedTags value="/**A merge node is a control node that brings together multiple alternate flows. It is not used to synchronize concurrent flows but to accept one among several alternate flows.*/"
          object="#//@packages.0/MergeNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ControlNode"/>
      <ownedOperation tag="#//@packages.0/MergeNode/one_outgoing_edge/@ownedTags.0"
          name="one_outgoing_edge" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A merge node has one outgoing edge.&#xD;&#xA;true*/"
            object="#//@packages.0/MergeNode/one_outgoing_edge"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/MergeNode/edges/@ownedTags.0" name="edges"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The edges coming into and out of a merge node must be either all object flows or all control flows.&#xD;&#xA;true*/"
            object="#//@packages.0/MergeNode/edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DecisionNode/@ownedTags.0"
        name="DecisionNode" superType="#//@packages.0/DecisionNode/@containedType.0">
      <ownedTags value="/**A decision node is a control node that chooses between outgoing flows.*/"
          object="#//@packages.0/DecisionNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ControlNode"/>
      <ownedAttribute tag="#//@packages.0/DecisionNode/decisionInput/@ownedTags.0"
          name="decisionInput" type="#//@packages.0/DecisionNode/decisionInput/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**Provides input to guard specifications on edges outgoing from the decision node.*/"
            object="#//@packages.0/DecisionNode/decisionInput"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/DecisionNode/one_incoming_edge/@ownedTags.0"
          name="one_incoming_edge" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A decision node has one incoming edge.&#xD;&#xA;true*/"
            object="#//@packages.0/DecisionNode/one_incoming_edge"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/DecisionNode/input_parameter/@ownedTags.0"
          name="input_parameter" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A decision input behavior has zero or one input parameter and one output parameter. Any input parameter must be the same as or a supertype of the type of object tokens coming along the incoming edge. The behavior cannot have side effects.&#xD;&#xA;true*/"
            object="#//@packages.0/DecisionNode/input_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/DecisionNode/edges/@ownedTags.0" name="edges"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The edges coming into and out of a decision node must be either all object flows or all control flows.&#xD;&#xA;true*/"
            object="#//@packages.0/DecisionNode/edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ActivityFinalNode/@ownedTags.0"
        name="ActivityFinalNode" superType="#//@packages.0/ActivityFinalNode/@containedType.0">
      <ownedTags value="/**An activity final node is a final node that stops all flows in an activity.*/"
          object="#//@packages.0/ActivityFinalNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/FinalNode"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ComponentRealization/@ownedTags.0"
        name="ComponentRealization" superType="#//@packages.0/ComponentRealization/@containedType.0">
      <ownedTags value="/**The realization concept is specialized to (optionally) define the classifiers that realize the contract offered by a component in terms of its provided and required interfaces. The component forms an abstraction from these various classifiers.*/"
          object="#//@packages.0/ComponentRealization"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Realization"/>
      <ownedAttribute tag="#//@packages.0/ComponentRealization/abstraction/@ownedTags.0"
          name="abstraction" type="#//@packages.0/ComponentRealization/abstraction/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/Component/realization">
        <ownedTags value="/**The Component that owns this ComponentRealization and which is implemented by its realizing classifiers.*/"
            object="#//@packages.0/ComponentRealization/abstraction"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Component"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ComponentRealization/realizingClassifier/@ownedTags.0"
          name="realizingClassifier" type="#//@packages.0/ComponentRealization/realizingClassifier/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**A classifier that is involved in the implementation of the Component that owns this ComponentRealization.*/"
            object="#//@packages.0/ComponentRealization/realizingClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Component/@ownedTags.0"
        name="Component" superType="#//@packages.0/Component/@containedType.0">
      <ownedTags value="/**A component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.&#xD;&#xA;In the namespace of a component, all model elements that are involved in or related to its definition are either owned or imported explicitly. This may include, for example, use cases and dependencies (e.g. mappings), packages, components, and artifacts.*/"
          object="#//@packages.0/Component"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      <ownedAttribute tag="#//@packages.0/Component/isIndirectlyInstantiated/@ownedTags.0"
          name="isIndirectlyInstantiated" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The kind of instantiation that applies to a Component. If false, the component is instantiated as an addressable object. If true, the Component is defined at design-time, but at runtime (or execution-time) an object specified by the Component does not exist, that is, the component is instantiated indirectly, through the instantiation of its realizing classifiers or parts. Several standard stereotypes use this meta attribute, e.g. &lt;&lt;specification>>, &lt;&lt;focus>>, &lt;&lt;subsystem>>.*/"
            object="#//@packages.0/Component/isIndirectlyInstantiated"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Component/required/@ownedTags.0" name="required"
          type="#//@packages.0/Component/required/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**The interfaces that the component requires from other components in its environment in order to be able to offer its full set of provided functionality. These interfaces may be Used by the Component or any of its realizingClassifiers, or they may be the Interfaces that are required by its public Ports.*/"
            object="#//@packages.0/Component/required"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Component/required/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Component/required/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Component/required/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Component/required/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Component/provided/@ownedTags.0" name="provided"
          type="#//@packages.0/Component/provided/@containedType.0" upper="-1" isDerived="true">
        <ownedTags value="/**The interfaces that the component exposes to its environment. These interfaces may be Realized by the Component or any of its realizingClassifiers, or they may be the Interfaces that are provided by its public Ports.*/"
            object="#//@packages.0/Component/provided"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Component/provided/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Component/provided/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/Component/provided/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/Component/provided/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Component/packagedElement/@ownedTags.0"
          name="packagedElement" type="#//@packages.0/Component/packagedElement/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**The set of PackageableElements that a Component owns. In the namespace of a component, all model elements that are involved in or related to its definition may be owned or imported explicitly. These may include e.g. Classes, Interfaces, Components, Packages, Use cases, Dependencies (e.g. mappings), and Artifacts.*/"
            object="#//@packages.0/Component/packagedElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Component/realization/@ownedTags.0" name="realization"
          type="#//@packages.0/Component/realization/@containedType.0" upper="-1"
          opposite="#//@packages.0/ComponentRealization/abstraction" isComposite="true">
        <ownedTags value="/**The set of Realizations owned by the Component. Realizations reference the Classifiers of which the Component is an abstraction; i.e., that realize its behavior.*/"
            object="#//@packages.0/Component/realization"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ComponentRealization"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Component/createOwnedClass/@ownedTags.0"
          name="createOwnedClass" type="#//@packages.0/Component/createOwnedClass/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a(n) (abstract) class with the specified name as a packaged element of this component.*/"
            object="#//@packages.0/Component/createOwnedClass"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
        <ownedParameter name="isAbstract" type="#//@packages.0/Boolean" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Component/createOwnedEnumeration/@ownedTags.0"
          name="createOwnedEnumeration" type="#//@packages.0/Component/createOwnedEnumeration/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a enumeration with the specified name as a packaged element of this component.*/"
            object="#//@packages.0/Component/createOwnedEnumeration"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Enumeration"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Component/createOwnedPrimitiveType/@ownedTags.0"
          name="createOwnedPrimitiveType" type="#//@packages.0/Component/createOwnedPrimitiveType/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates a primitive type with the specified name as a packaged element of this component.*/"
            object="#//@packages.0/Component/createOwnedPrimitiveType"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PrimitiveType"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Component/createOwnedInterface/@ownedTags.0"
          name="createOwnedInterface" type="#//@packages.0/Component/createOwnedInterface/@containedType.0"
          isOrdered="true" lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**Creates an interface with the specified name as a packaged element of this component.*/"
            object="#//@packages.0/Component/createOwnedInterface"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
        <ownedParameter name="name" type="#//@packages.0/String" isOrdered="true"
            lower="1" upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Component/realizedInterfaces/@ownedTags.0"
          name="realizedInterfaces" type="#//@packages.0/Component/realizedInterfaces/@containedType.0"
          upper="-1" isAbstract="true">
        <ownedTags value="/**Utility returning the set of realized interfaces of a component:&#xD;&#xA;result = (classifier.clientDependency->&#xA;select(dependency|dependency.oclIsKindOf(Realization) and dependency.supplier.oclIsKindOf(Interface)))->&#xA;collect(dependency|dependency.client)*/"
            object="#//@packages.0/Component/realizedInterfaces"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
        <ownedParameter name="classifier" type="#//@packages.0/Component/realizedInterfaces/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Component/usedInterfaces/@ownedTags.0" name="usedInterfaces"
          type="#//@packages.0/Component/usedInterfaces/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**Utility returning the set of used interfaces of a component:&#xD;&#xA;result = (classifier.supplierDependency->&#xA;select(dependency|dependency.oclIsKindOf(Usage) and dependency.supplier.oclIsKindOf(interface)))->&#xA;collect(dependency|dependency.supplier)*/"
            object="#//@packages.0/Component/usedInterfaces"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
        <ownedParameter name="classifier" type="#//@packages.0/Component/usedInterfaces/@ownedParameter.0/@containedType.0"
            isOrdered="true" lower="1" upper="1">
          <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Component/getRequireds/@ownedTags.0" name="getRequireds"
          type="#//@packages.0/Component/getRequireds/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**result = let usedInterfaces = UsedInterfaces(self) and&#xD;&#xA;  let realizingClassifierUsedInterfaces = UsedInterfaces(self.realizingClassifier) and&#xD;&#xA;  let typesOfUsedPorts = self.ownedPort.required in&#xD;&#xA;    ((usedInterfaces->union(realizingClassifierUsedInterfaces))->&#xD;&#xA;      union(typesOfUsedPorts))->asSet()*/"
            object="#//@packages.0/Component/getRequireds"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Component/getProvideds/@ownedTags.0" name="getProvideds"
          type="#//@packages.0/Component/getProvideds/@containedType.0" upper="-1"
          isAbstract="true">
        <ownedTags value="/**result = let implementedInterfaces = self.implementation->collect(impl|impl.contract) and&#xD;&#xA;  let realizedInterfaces = RealizedInterfaces(self) and&#xD;&#xA;  let realizingClassifierInterfaces = RealizedInterfaces(self.realizingClassifier) and&#xD;&#xA;  let typesOfRequiredPorts = self.ownedPort.provided in&#xD;&#xA;    (((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->&#xD;&#xA;      union(typesOfRequiredPorts))->asSet()*/"
            object="#//@packages.0/Component/getProvideds"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interface"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Node/@ownedTags.0"
        name="Node" superType="#//@packages.0/Node/@containedType.0 #//@packages.0/Node/@containedType.1">
      <ownedTags value="/**A node is computational resource upon which artifacts may be deployed for execution.&#xD;&#xA;Nodes can be interconnected through communication paths to define network structures.*/"
          object="#//@packages.0/Node"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DeploymentTarget"/>
      <ownedAttribute tag="#//@packages.0/Node/nestedNode/@ownedTags.0" name="nestedNode"
          type="#//@packages.0/Node/nestedNode/@containedType.0" upper="-1" isComposite="true">
        <ownedTags value="/**The Nodes that are defined (nested) within the Node.*/"
            object="#//@packages.0/Node/nestedNode"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Node"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Node/internal_structure/@ownedTags.0" name="internal_structure"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The internal structure of a Node (if defined) consists solely of parts of type Node.&#xD;&#xA;true*/"
            object="#//@packages.0/Node/internal_structure"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Device/@ownedTags.0"
        name="Device" superType="#//@packages.0/Device/@containedType.0">
      <ownedTags value="/**A device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex (i.e., they may consist of other devices).*/"
          object="#//@packages.0/Device"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Node"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExecutionEnvironment/@ownedTags.0"
        name="ExecutionEnvironment" superType="#//@packages.0/ExecutionEnvironment/@containedType.0">
      <ownedTags value="/**An execution environment is a node that offers an execution environment for specific types of components that are deployed on it in the form of executable artifacts.*/"
          object="#//@packages.0/ExecutionEnvironment"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Node"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CommunicationPath/@ownedTags.0"
        name="CommunicationPath" superType="#//@packages.0/CommunicationPath/@containedType.0">
      <ownedTags value="/**A communication path is an association between two deployment targets, through which they are able to exchange signals and messages.*/"
          object="#//@packages.0/CommunicationPath"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CombinedFragment/@ownedTags.0"
        name="CombinedFragment" superType="#//@packages.0/CombinedFragment/@containedType.0">
      <ownedTags value="/**A combined fragment defines an expression of interaction fragments. A combined fragment is defined by an interaction operator and corresponding interaction operands. Through the use of combined fragments the user will be able to describe a number of traces in a compact and concise manner.*/"
          object="#//@packages.0/CombinedFragment"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      <ownedAttribute tag="#//@packages.0/CombinedFragment/interactionOperator/@ownedTags.0"
          name="interactionOperator" type="#//@packages.0/InteractionOperatorKind"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies the operation which defines the semantics of this combination of InteractionFragments.*/"
            object="#//@packages.0/CombinedFragment/interactionOperator"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/CombinedFragment/operand/@ownedTags.0" name="operand"
          type="#//@packages.0/CombinedFragment/operand/@containedType.0" isOrdered="true"
          lower="1" upper="-1" isComposite="true">
        <ownedTags value="/**The set of operands of the combined fragment.*/" object="#//@packages.0/CombinedFragment/operand"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionOperand"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/CombinedFragment/cfragmentGate/@ownedTags.0"
          name="cfragmentGate" type="#//@packages.0/CombinedFragment/cfragmentGate/@containedType.0"
          upper="-1" isComposite="true">
        <ownedTags value="/**Specifies the gates that form the interface between this CombinedFragment and its surroundings*/"
            object="#//@packages.0/CombinedFragment/cfragmentGate"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Gate"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/CombinedFragment/opt_loop_break_neg/@ownedTags.0"
          name="opt_loop_break_neg" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If the interactionOperator is opt, loop, break, or neg there must be exactly one operand&#xD;&#xA;true*/"
            object="#//@packages.0/CombinedFragment/opt_loop_break_neg"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CombinedFragment/minint_and_maxint/@ownedTags.0"
          name="minint_and_maxint" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The InteractionConstraint with minint and maxint only apply when attached to an InteractionOperand where the interactionOperator is loop.&#xD;&#xA;true*/"
            object="#//@packages.0/CombinedFragment/minint_and_maxint"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CombinedFragment/break/@ownedTags.0" name="break"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**If the interactionOperator is break, the corresponding InteractionOperand must cover all Lifelines within the enclosing InteractionFragment.&#xD;&#xA;true*/"
            object="#//@packages.0/CombinedFragment/break"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CombinedFragment/consider_and_ignore/@ownedTags.0"
          name="consider_and_ignore" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The interaction operators 'consider' and 'ignore' can only be used for the CombineIgnoreFragment subtype of CombinedFragment&#xD;&#xA;((interactionOperator = #consider) or (interactionOperator = #ignore)) implies oclsisTypeOf(CombineIgnoreFragment)*/"
            object="#//@packages.0/CombinedFragment/consider_and_ignore"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="InteractionOperatorKind">
      <ownedLiteral name="seq"/>
      <ownedLiteral name="alt"/>
      <ownedLiteral name="opt"/>
      <ownedLiteral name="break"/>
      <ownedLiteral name="par"/>
      <ownedLiteral name="strict"/>
      <ownedLiteral name="loop"/>
      <ownedLiteral name="critical"/>
      <ownedLiteral name="neg"/>
      <ownedLiteral name="assert"/>
      <ownedLiteral name="ignore"/>
      <ownedLiteral name="consider"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Continuation/@ownedTags.0"
        name="Continuation" superType="#//@packages.0/Continuation/@containedType.0">
      <ownedTags value="/**A continuation is a syntactic way to define continuations of different branches of an alternative combined fragment. Continuations is intuitively similar to labels representing intermediate points in a flow of control.*/"
          object="#//@packages.0/Continuation"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InteractionFragment"/>
      <ownedAttribute tag="#//@packages.0/Continuation/setting/@ownedTags.0" name="setting"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.*/"
            object="#//@packages.0/Continuation/setting"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Continuation/same_name/@ownedTags.0" name="same_name"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Continuations with the same name may only cover the same set of Lifelines (within one Classifier).&#xD;&#xA;true*/"
            object="#//@packages.0/Continuation/same_name"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Continuation/global/@ownedTags.0" name="global"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Continuations are always global in the enclosing InteractionFragment e.g. it always covers all Lifelines covered by the enclosing InteractionFragment.&#xD;&#xA;true*/"
            object="#//@packages.0/Continuation/global"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Continuation/first_or_last_interaction_fragment/@ownedTags.0"
          name="first_or_last_interaction_fragment" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Continuations always occur as the very first InteractionFragment or the very last InteractionFragment of the enclosing InteractionFragment.&#xD;&#xA;true*/"
            object="#//@packages.0/Continuation/first_or_last_interaction_fragment"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ConsiderIgnoreFragment/@ownedTags.0"
        name="ConsiderIgnoreFragment" superType="#//@packages.0/ConsiderIgnoreFragment/@containedType.0">
      <ownedTags value="/**A consider ignore fragment is a kind of combined fragment that is used for the consider and ignore cases, which require lists of pertinent messages to be specified.*/"
          object="#//@packages.0/ConsiderIgnoreFragment"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/CombinedFragment"/>
      <ownedAttribute tag="#//@packages.0/ConsiderIgnoreFragment/message/@ownedTags.0"
          name="message" type="#//@packages.0/ConsiderIgnoreFragment/message/@containedType.0"
          upper="-1">
        <ownedTags value="/**The set of messages that apply to this fragment*/" object="#//@packages.0/ConsiderIgnoreFragment/message"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ConsiderIgnoreFragment/consider_or_ignore/@ownedTags.0"
          name="consider_or_ignore" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The interaction operator of a ConsiderIgnoreFragment must be either 'consider' or 'ignore'.&#xD;&#xA;(interactionOperator = #consider) or (interactionOperator = #ignore)*/"
            object="#//@packages.0/ConsiderIgnoreFragment/consider_or_ignore"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ConsiderIgnoreFragment/type/@ownedTags.0"
          name="type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1"
          isAbstract="true">
        <ownedTags value="/**The NamedElements must be of a type of element that identifies a message (e.g., an Operation, Reception, or a Signal).&#xD;&#xA;message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Reception) or m.oclIsKindOf(Signal))*/"
            object="#//@packages.0/ConsiderIgnoreFragment/type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CreateObjectAction/@ownedTags.0"
        name="CreateObjectAction" superType="#//@packages.0/CreateObjectAction/@containedType.0">
      <ownedTags value="/**A create object action is an action that creates an object that conforms to a statically specified classifier and puts it on an output pin at runtime.*/"
          object="#//@packages.0/CreateObjectAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/CreateObjectAction/classifier/@ownedTags.0"
          name="classifier" type="#//@packages.0/CreateObjectAction/classifier/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Classifier to be instantiated.*/" object="#//@packages.0/CreateObjectAction/classifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/CreateObjectAction/result/@ownedTags.0"
          name="result" type="#//@packages.0/CreateObjectAction/result/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the output pin on which the result is put.*/" object="#//@packages.0/CreateObjectAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/CreateObjectAction/classifier_not_abstract/@ownedTags.0"
          name="classifier_not_abstract" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The classifier cannot be abstract.&#xD;&#xA;not (self.classifier.isAbstract = #true)*/"
            object="#//@packages.0/CreateObjectAction/classifier_not_abstract"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CreateObjectAction/classifier_not_association_class/@ownedTags.0"
          name="classifier_not_association_class" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The classifier cannot be an association class&#xD;&#xA;not self.classifier.oclIsKindOf(AssociationClass)*/"
            object="#//@packages.0/CreateObjectAction/classifier_not_association_class"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CreateObjectAction/same_type/@ownedTags.0"
          name="same_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the result pin must be the same as the classifier of the action.&#xD;&#xA;self.result.type = self.classifier*/"
            object="#//@packages.0/CreateObjectAction/same_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CreateObjectAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the output pin is 1..1.&#xD;&#xA;self.result.multiplicity.is(1,1)*/"
            object="#//@packages.0/CreateObjectAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DestroyObjectAction/@ownedTags.0"
        name="DestroyObjectAction" superType="#//@packages.0/DestroyObjectAction/@containedType.0">
      <ownedTags value="/**A destroy object action is an action that destroys objects.*/"
          object="#//@packages.0/DestroyObjectAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/DestroyObjectAction/isDestroyLinks/@ownedTags.0"
          name="isDestroyLinks" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether links in which the object participates are destroyed along with the object.*/"
            object="#//@packages.0/DestroyObjectAction/isDestroyLinks"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/DestroyObjectAction/isDestroyOwnedObjects/@ownedTags.0"
          name="isDestroyOwnedObjects" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether objects owned by the object are destroyed along with the object.*/"
            object="#//@packages.0/DestroyObjectAction/isDestroyOwnedObjects"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/DestroyObjectAction/target/@ownedTags.0"
          name="target" type="#//@packages.0/DestroyObjectAction/target/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The input pin providing the object to be destroyed.*/"
            object="#//@packages.0/DestroyObjectAction/target"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/DestroyObjectAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the input pin is 1..1.&#xD;&#xA;self.target.multiplicity.is(1,1)*/"
            object="#//@packages.0/DestroyObjectAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/DestroyObjectAction/no_type/@ownedTags.0"
          name="no_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1"
          isAbstract="true">
        <ownedTags value="/**The input pin has no type.&#xD;&#xA;self.target.type->size() = 0*/"
            object="#//@packages.0/DestroyObjectAction/no_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TestIdentityAction/@ownedTags.0"
        name="TestIdentityAction" superType="#//@packages.0/TestIdentityAction/@containedType.0">
      <ownedTags value="/**A test identity action is an action that tests if two values are identical objects.*/"
          object="#//@packages.0/TestIdentityAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/TestIdentityAction/first/@ownedTags.0" name="first"
          type="#//@packages.0/TestIdentityAction/first/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the pin on which an object is placed.*/" object="#//@packages.0/TestIdentityAction/first"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TestIdentityAction/second/@ownedTags.0"
          name="second" type="#//@packages.0/TestIdentityAction/second/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the pin on which an object is placed.*/" object="#//@packages.0/TestIdentityAction/second"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TestIdentityAction/result/@ownedTags.0"
          name="result" type="#//@packages.0/TestIdentityAction/result/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Tells whether the two input objects are identical.*/"
            object="#//@packages.0/TestIdentityAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/TestIdentityAction/no_type/@ownedTags.0"
          name="no_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1"
          isAbstract="true">
        <ownedTags value="/**The input pins have no type.&#xD;&#xA;self.first.type->size() = 0&#xA;and self.second.type->size() = 0&#xA;*/"
            object="#//@packages.0/TestIdentityAction/no_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/TestIdentityAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the input pins is 1..1.&#xD;&#xA;self.first.multiplicity.is(1,1)&#xA;and self.second.multiplicity.is(1,1)&#xA;*/"
            object="#//@packages.0/TestIdentityAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/TestIdentityAction/result_is_boolean/@ownedTags.0"
          name="result_is_boolean" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the result is Boolean.&#xD;&#xA;self.result.type.oclIsTypeOf(Boolean)*/"
            object="#//@packages.0/TestIdentityAction/result_is_boolean"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReadSelfAction/@ownedTags.0"
        name="ReadSelfAction" superType="#//@packages.0/ReadSelfAction/@containedType.0">
      <ownedTags value="/**A read self action is an action that retrieves the host object of an action.*/"
          object="#//@packages.0/ReadSelfAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ReadSelfAction/result/@ownedTags.0" name="result"
          type="#//@packages.0/ReadSelfAction/result/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the output pin on which the hosting object is placed.*/"
            object="#//@packages.0/ReadSelfAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReadSelfAction/contained/@ownedTags.0" name="contained"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The action must be contained in an behavior that has a host classifier.&#xD;&#xA;self.context->size() = 1*/"
            object="#//@packages.0/ReadSelfAction/contained"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadSelfAction/not_static/@ownedTags.0"
          name="not_static" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If the action is contained in an behavior that is acting as the body of a method, then the operation of the method must not be static.&#xD;&#xA;true*/"
            object="#//@packages.0/ReadSelfAction/not_static"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadSelfAction/type/@ownedTags.0" name="type"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The type of the result output pin is the host classifier.&#xD;&#xA;self.result.type = self.context*/"
            object="#//@packages.0/ReadSelfAction/type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadSelfAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the result output pin is 1..1.&#xD;&#xA;self.result.multiplicity.is(1,1)*/"
            object="#//@packages.0/ReadSelfAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/StructuralFeatureAction/@ownedTags.0"
        name="StructuralFeatureAction" isAbstract="true" superType="#//@packages.0/StructuralFeatureAction/@containedType.0">
      <ownedTags value="/**StructuralFeatureAction is an abstract class for all structural feature actions.*/"
          object="#//@packages.0/StructuralFeatureAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/StructuralFeatureAction/structuralFeature/@ownedTags.0"
          name="structuralFeature" type="#//@packages.0/StructuralFeatureAction/structuralFeature/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Structural feature to be read.*/" object="#//@packages.0/StructuralFeatureAction/structuralFeature"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuralFeature"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/StructuralFeatureAction/object/@ownedTags.0"
          name="object" type="#//@packages.0/StructuralFeatureAction/object/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the input pin from which the object whose structural feature is to be read or written is obtained.&#xD;&#xA;*/"
            object="#//@packages.0/StructuralFeatureAction/object"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/StructuralFeatureAction/not_static/@ownedTags.0"
          name="not_static" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The structural feature must not be static.&#xD;&#xA;self.structuralFeature.isStatic = #false*/"
            object="#//@packages.0/StructuralFeatureAction/not_static"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StructuralFeatureAction/same_type/@ownedTags.0"
          name="same_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the object input pin is the same as the classifier of the object passed on this pin.&#xD;&#xA;true*/"
            object="#//@packages.0/StructuralFeatureAction/same_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StructuralFeatureAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the input pin must be 1..1.&#xD;&#xA;self.object.multiplicity.is(1,1)*/"
            object="#//@packages.0/StructuralFeatureAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StructuralFeatureAction/visibility/@ownedTags.0"
          name="visibility" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Visibility of structural feature must allow access to the object performing the action.&#xD;&#xA;let host : Classifier = self.context in&#xA;self.structuralFeature.visibility = #public&#xA;or host = self.structuralFeature.featuringClassifier.type&#xA;or (self.structuralFeature.visibility = #protected and host.allSupertypes&#xA;->includes(self.structuralFeature.featuringClassifier.type)))&#xA;*/"
            object="#//@packages.0/StructuralFeatureAction/visibility"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StructuralFeatureAction/one_featuring_classifier/@ownedTags.0"
          name="one_featuring_classifier" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A structural feature has exactly one featuringClassifier.&#xD;&#xA;self.structuralFeature.featuringClassifier->size() = 1*/"
            object="#//@packages.0/StructuralFeatureAction/one_featuring_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReadStructuralFeatureAction/@ownedTags.0"
        name="ReadStructuralFeatureAction" superType="#//@packages.0/ReadStructuralFeatureAction/@containedType.0">
      <ownedTags value="/**A read structural feature action is a structural feature action that retrieves the values of a structural feature.*/"
          object="#//@packages.0/ReadStructuralFeatureAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuralFeatureAction"/>
      <ownedAttribute tag="#//@packages.0/ReadStructuralFeatureAction/result/@ownedTags.0"
          name="result" type="#//@packages.0/ReadStructuralFeatureAction/result/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the output pin on which the result is put.*/" object="#//@packages.0/ReadStructuralFeatureAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReadStructuralFeatureAction/type_and_ordering/@ownedTags.0"
          name="type_and_ordering" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type and ordering of the result output pin are the same as the type and ordering of the structural feature.&#xD;&#xA;self.result.type = self.structuralFeature.type&#xA;and self.result.ordering = self.structuralFeature.ordering&#xA;*/"
            object="#//@packages.0/ReadStructuralFeatureAction/type_and_ordering"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/WriteStructuralFeatureAction/@ownedTags.0"
        name="WriteStructuralFeatureAction" isAbstract="true" superType="#//@packages.0/WriteStructuralFeatureAction/@containedType.0">
      <ownedTags value="/**WriteStructuralFeatureAction is an abstract class for structural feature actions that change structural feature values.*/"
          object="#//@packages.0/WriteStructuralFeatureAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuralFeatureAction"/>
      <ownedAttribute tag="#//@packages.0/WriteStructuralFeatureAction/value/@ownedTags.0"
          name="value" type="#//@packages.0/WriteStructuralFeatureAction/value/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Value to be added or removed from the structural feature.*/"
            object="#//@packages.0/WriteStructuralFeatureAction/value"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/WriteStructuralFeatureAction/input_pin/@ownedTags.0"
          name="input_pin" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type input pin is the same as the classifier of the structural feature.&#xD;&#xA;self.value.type = self.structuralFeature.featuringClassifier*/"
            object="#//@packages.0/WriteStructuralFeatureAction/input_pin"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ClearStructuralFeatureAction/@ownedTags.0"
        name="ClearStructuralFeatureAction" superType="#//@packages.0/ClearStructuralFeatureAction/@containedType.0">
      <ownedTags value="/**A clear structural feature action is a structural feature action that removes all values of a structural feature.*/"
          object="#//@packages.0/ClearStructuralFeatureAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuralFeatureAction"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/RemoveStructuralFeatureValueAction/@ownedTags.0"
        name="RemoveStructuralFeatureValueAction" superType="#//@packages.0/RemoveStructuralFeatureValueAction/@containedType.0">
      <ownedTags value="/**A remove structural feature value action is a write structural feature action that removes values from structural features.*/"
          object="#//@packages.0/RemoveStructuralFeatureValueAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/WriteStructuralFeatureAction"/>
      <ownedAttribute tag="#//@packages.0/RemoveStructuralFeatureValueAction/isRemoveDuplicates/@ownedTags.0"
          name="isRemoveDuplicates" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether to remove duplicates of the value in nonunique structural features.*/"
            object="#//@packages.0/RemoveStructuralFeatureValueAction/isRemoveDuplicates"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/RemoveStructuralFeatureValueAction/removeAt/@ownedTags.0"
          name="removeAt" type="#//@packages.0/RemoveStructuralFeatureValueAction/removeAt/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**Specifies the position of an existing value to remove in ordered nonunique structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.*/"
            object="#//@packages.0/RemoveStructuralFeatureValueAction/removeAt"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/RemoveStructuralFeatureValueAction/non_unique_removal/@ownedTags.0"
          name="non_unique_removal" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Actions removing a value from ordered nonunique structural features must have a single removeAt input pin if isRemoveDuplicates is false. It must be of type Unlimited Natural with multiplicity 1..1. Otherwise, the action has no removeAt input pin.&#xD;&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/RemoveStructuralFeatureValueAction/non_unique_removal"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/AddStructuralFeatureValueAction/@ownedTags.0"
        name="AddStructuralFeatureValueAction" superType="#//@packages.0/AddStructuralFeatureValueAction/@containedType.0">
      <ownedTags value="/**An add structural feature value action is a write structural feature action for adding values to a structural feature.*/"
          object="#//@packages.0/AddStructuralFeatureValueAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/WriteStructuralFeatureAction"/>
      <ownedAttribute tag="#//@packages.0/AddStructuralFeatureValueAction/isReplaceAll/@ownedTags.0"
          name="isReplaceAll" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether existing values of the structural feature of the object should be removed before adding the new value.*/"
            object="#//@packages.0/AddStructuralFeatureValueAction/isReplaceAll"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/AddStructuralFeatureValueAction/insertAt/@ownedTags.0"
          name="insertAt" type="#//@packages.0/AddStructuralFeatureValueAction/insertAt/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**Gives the position at which to insert a new value or move an existing value in ordered structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero. This pin is omitted for unordered structural features.*/"
            object="#//@packages.0/AddStructuralFeatureValueAction/insertAt"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/AddStructuralFeatureValueAction/unlimited_natural_and_multiplicity/@ownedTags.0"
          name="unlimited_natural_and_multiplicity" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Actions adding a value to ordered structural features must have a single input pin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.&#xD;&#xA;let insertAtPins : Collection = self.insertAt in&#xA;if self.structuralFeature.isOrdered = #false&#xA;then insertAtPins->size() = 0&#xA;else let insertAtPin : InputPin= insertAt->asSequence()->first() in&#xA;insertAtPins->size() = 1&#xA;and insertAtPin.type = UnlimitedNatural&#xA;and insertAtPin.multiplicity.is(1,1))&#xA;endif&#xA;*/"
            object="#//@packages.0/AddStructuralFeatureValueAction/unlimited_natural_and_multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LinkAction/@ownedTags.0"
        name="LinkAction" isAbstract="true" superType="#//@packages.0/LinkAction/@containedType.0">
      <ownedTags value="/**LinkAction is an abstract class for all link actions that identify their links by the objects at the ends of the links and by the qualifiers at ends of the links.*/"
          object="#//@packages.0/LinkAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/LinkAction/endData/@ownedTags.0" name="endData"
          type="#//@packages.0/LinkAction/endData/@containedType.0" lower="2" upper="-1"
          isComposite="true">
        <ownedTags value="/**Data identifying one end of a link by the objects on its ends and qualifiers.*/"
            object="#//@packages.0/LinkAction/endData"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LinkEndData"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LinkAction/inputValue/@ownedTags.0" name="inputValue"
          type="#//@packages.0/LinkAction/inputValue/@containedType.0" lower="1" upper="-1"
          isComposite="true">
        <ownedTags value="/**Pins taking end objects and qualifier values as input.*/"
            object="#//@packages.0/LinkAction/inputValue"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/LinkAction/same_association/@ownedTags.0"
          name="same_association" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The association ends of the link end data must all be from the same association and include all and only the association ends of that association.&#xD;&#xA;self.endData->collect(end) = self.association()->collect(connection))*/"
            object="#//@packages.0/LinkAction/same_association"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LinkAction/not_static/@ownedTags.0" name="not_static"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The association ends of the link end data must not be static.&#xD;&#xA;self.endData->forall(end.oclisKindOf(NavigableEnd) implies end.isStatic = #false*/"
            object="#//@packages.0/LinkAction/not_static"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LinkAction/same_pins/@ownedTags.0" name="same_pins"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The input pins of the action are the same as the pins of the link end data and insertion pins.&#xD;&#xA;self.input->asSet() =&#xA;let ledpins : Set = self.endData->collect(value) in&#xA;if self.oclIsKindOf(LinkEndCreationData)&#xA;then ledpins->union(self.endData.oclAsType(LinkEndCreationData).insertAt)&#xA;else ledpins&#xA;*/"
            object="#//@packages.0/LinkAction/same_pins"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LinkAction/association/@ownedTags.0" name="association"
          type="#//@packages.0/LinkAction/association/@containedType.0" isOrdered="true"
          lower="1" upper="1" isAbstract="true">
        <ownedTags value="/**The association operates on LinkAction. It returns the association of the action.&#xD;&#xA;result = self.endData->asSequence().first().end.association*/"
            object="#//@packages.0/LinkAction/association"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LinkEndData/@ownedTags.0"
        name="LinkEndData" superType="#//@packages.0/LinkEndData/@containedType.0">
      <ownedTags value="/**A link end data is not an action. It is an element that identifies links. It identifies one end of a link to be read or written by the children of a link action. A link cannot be passed as a runtime value to or from an action. Instead, a link is identified by its end objects and qualifier values, if any. This requires more than one piece of data, namely, the statically-specified end in the user model, the object on the end, and the qualifier values for that end, if any. These pieces are brought together around a link end data. Each association end is identified separately with an instance of the LinkEndData class.*/"
          object="#//@packages.0/LinkEndData"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/LinkEndData/value/@ownedTags.0" name="value"
          type="#//@packages.0/LinkEndData/value/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**Input pin that provides the specified object for the given end. This pin is omitted if the link-end data specifies an 'open' end for reading.*/"
            object="#//@packages.0/LinkEndData/value"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LinkEndData/end/@ownedTags.0" name="end"
          type="#//@packages.0/LinkEndData/end/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**Association end for which this link-end data specifies values.*/"
            object="#//@packages.0/LinkEndData/end"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LinkEndData/qualifier/@ownedTags.0" name="qualifier"
          type="#//@packages.0/LinkEndData/qualifier/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**List of qualifier values*/" object="#//@packages.0/LinkEndData/qualifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/QualifierValue"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/LinkEndData/property_is_association_end/@ownedTags.0"
          name="property_is_association_end" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The property must be an association end.&#xD;&#xA;self.end.association->size() = 1*/"
            object="#//@packages.0/LinkEndData/property_is_association_end"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LinkEndData/same_type/@ownedTags.0" name="same_type"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The type of the end object input pin is the same as the type of the association end.&#xD;&#xA;self.value.type = self.end.type*/"
            object="#//@packages.0/LinkEndData/same_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LinkEndData/multiplicity/@ownedTags.0" name="multiplicity"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the end object input pin must be 1..1.&#xD;&#xA;self.value.multiplicity.is(1,1)*/"
            object="#//@packages.0/LinkEndData/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LinkEndData/qualifiers/@ownedTags.0" name="qualifiers"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The qualifiers include all and only the qualifiers of the association end.&#xD;&#xA;self.qualifier->collect(qualifier) = self.end.qualifier*/"
            object="#//@packages.0/LinkEndData/qualifiers"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LinkEndData/end_object_input_pin/@ownedTags.0"
          name="end_object_input_pin" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The end object input pin is not also a qualifier value input pin.&#xD;&#xA;self.value->excludesAll(self.qualifier.value)*/"
            object="#//@packages.0/LinkEndData/end_object_input_pin"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/QualifierValue/@ownedTags.0"
        name="QualifierValue" superType="#//@packages.0/QualifierValue/@containedType.0">
      <ownedTags value="/**A qualifier value is not an action. It is an element that identifies links. It gives a single qualifier within a link end data specification.*/"
          object="#//@packages.0/QualifierValue"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/QualifierValue/qualifier/@ownedTags.0" name="qualifier"
          type="#//@packages.0/QualifierValue/qualifier/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**Attribute representing the qualifier for which the value is to be specified.*/"
            object="#//@packages.0/QualifierValue/qualifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/QualifierValue/value/@ownedTags.0" name="value"
          type="#//@packages.0/QualifierValue/value/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**Input pin from which the specified value for the qualifier is taken.*/"
            object="#//@packages.0/QualifierValue/value"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/QualifierValue/qualifier_attribute/@ownedTags.0"
          name="qualifier_attribute" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The qualifier attribute must be a qualifier of the association end of the link-end data.&#xD;&#xA;self.LinkEndData.end->collect(qualifier)->includes(self.qualifier)*/"
            object="#//@packages.0/QualifierValue/qualifier_attribute"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/QualifierValue/type_of_qualifier/@ownedTags.0"
          name="type_of_qualifier" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the qualifier value input pin is the same as the type of the qualifier attribute.&#xD;&#xA;self.value.type = self.qualifier.type*/"
            object="#//@packages.0/QualifierValue/type_of_qualifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/QualifierValue/multiplicity_of_qualifier/@ownedTags.0"
          name="multiplicity_of_qualifier" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the qualifier value input pin is &quot;1..1&quot;.&#xD;&#xA;self.value.multiplicity.is(1,1)*/"
            object="#//@packages.0/QualifierValue/multiplicity_of_qualifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReadLinkAction/@ownedTags.0"
        name="ReadLinkAction" superType="#//@packages.0/ReadLinkAction/@containedType.0">
      <ownedTags value="/**A read link action is a link action that navigates across associations to retrieve objects on one end.*/"
          object="#//@packages.0/ReadLinkAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LinkAction"/>
      <ownedAttribute tag="#//@packages.0/ReadLinkAction/result/@ownedTags.0" name="result"
          type="#//@packages.0/ReadLinkAction/result/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The pin on which are put the objects participating in the association at the end not specified by the inputs.&#xD;&#xA;*/"
            object="#//@packages.0/ReadLinkAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReadLinkAction/one_open_end/@ownedTags.0"
          name="one_open_end" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Exactly one link-end data specification (the 'open' end) must not have an end object input pin.&#xD;&#xA;self.endData->select(ed | ed.value->size() = 0)->size() = 1*/"
            object="#//@packages.0/ReadLinkAction/one_open_end"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkAction/type_and_ordering/@ownedTags.0"
          name="type_and_ordering" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type and ordering of the result output pin are same as the type and ordering of the open association end.&#xD;&#xA;let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in&#xA;self.result.type = openend.type&#xA;and self.result.ordering = openend.ordering&#xA;*/"
            object="#//@packages.0/ReadLinkAction/type_and_ordering"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkAction/compatible_multiplicity/@ownedTags.0"
          name="compatible_multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the open association end must be compatible with the multiplicity of the result output pin.&#xD;&#xA;let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in&#xA;openend.multiplicity.compatibleWith(self.result.multiplicity)&#xA;*/"
            object="#//@packages.0/ReadLinkAction/compatible_multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkAction/navigable_open_end/@ownedTags.0"
          name="navigable_open_end" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The open end must be navigable.&#xD;&#xA;let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in&#xA;openend.isNavigable()&#xA;*/"
            object="#//@packages.0/ReadLinkAction/navigable_open_end"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkAction/visibility/@ownedTags.0"
          name="visibility" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Visibility of the open end must allow access to the object performing the action.&#xD;&#xA;let host : Classifier = self.context in&#xA;let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in&#xA;openend.visibility = #public&#xA;or self.endData->exists(oed | not oed.end = openend&#xA;and (host = oed.end.participant&#xA;or (openend.visibility = #protected&#xA;and host.allSupertypes->includes(oed.end.participant))))&#xA;*/"
            object="#//@packages.0/ReadLinkAction/visibility"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LinkEndCreationData/@ownedTags.0"
        name="LinkEndCreationData" superType="#//@packages.0/LinkEndCreationData/@containedType.0">
      <ownedTags value="/**A link end creation data is not an action. It is an element that identifies links. It identifies one end of a link to be created by a create link action.*/"
          object="#//@packages.0/LinkEndCreationData"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LinkEndData"/>
      <ownedAttribute tag="#//@packages.0/LinkEndCreationData/isReplaceAll/@ownedTags.0"
          name="isReplaceAll" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether the existing links emanating from the object on this end should be destroyed before creating a new link.*/"
            object="#//@packages.0/LinkEndCreationData/isReplaceAll"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LinkEndCreationData/insertAt/@ownedTags.0"
          name="insertAt" type="#//@packages.0/LinkEndCreationData/insertAt/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**Specifies where the new link should be inserted for ordered association ends, or where an existing link should be moved to. The type of the input is UnlimitedNatural, but the input cannot be zero. This pin is omitted for association ends that are not ordered.*/"
            object="#//@packages.0/LinkEndCreationData/insertAt"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/LinkEndCreationData/create_link_action/@ownedTags.0"
          name="create_link_action" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**LinkEndCreationData can only be end data for CreateLinkAction or one of its specializations.&#xD;&#xA;self.LinkAction.oclIsKindOf(CreateLinkAction)*/"
            object="#//@packages.0/LinkEndCreationData/create_link_action"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LinkEndCreationData/single_input_pin/@ownedTags.0"
          name="single_input_pin" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Link end creation data for ordered association ends must have a single input pin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.&#xD;&#xA;let insertAtPins : Collection = self.insertAt in&#xA;if self.end.ordering = #unordered&#xA;then insertAtPins->size() = 0&#xA;else let insertAtPin : InputPin = insertAts->asSequence()->first() in&#xA;insertAtPins->size() = 1&#xA;and insertAtPin.type = UnlimitedNatural&#xA;and insertAtPin.multiplicity.is(1,1))&#xA;endif&#xA;*/"
            object="#//@packages.0/LinkEndCreationData/single_input_pin"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CreateLinkAction/@ownedTags.0"
        name="CreateLinkAction" superType="#//@packages.0/CreateLinkAction/@containedType.0">
      <ownedTags value="/**A create link action is a write link action for creating links.*/"
          object="#//@packages.0/CreateLinkAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/WriteLinkAction"/>
      <ownedOperation tag="#//@packages.0/CreateLinkAction/association_not_abstract/@ownedTags.0"
          name="association_not_abstract" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The association cannot be an abstract classifier.&#xD;&#xA;self.association().isAbstract = #false*/"
            object="#//@packages.0/CreateLinkAction/association_not_abstract"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/WriteLinkAction/@ownedTags.0"
        name="WriteLinkAction" isAbstract="true" superType="#//@packages.0/WriteLinkAction/@containedType.0">
      <ownedTags value="/**WriteLinkAction is an abstract class for link actions that create and destroy links.*/"
          object="#//@packages.0/WriteLinkAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LinkAction"/>
      <ownedOperation tag="#//@packages.0/WriteLinkAction/allow_access/@ownedTags.0"
          name="allow_access" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The visibility of at least one end must allow access to the class using the action.&#xD;&#xA;true*/"
            object="#//@packages.0/WriteLinkAction/allow_access"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DestroyLinkAction/@ownedTags.0"
        name="DestroyLinkAction" superType="#//@packages.0/DestroyLinkAction/@containedType.0">
      <ownedTags value="/**A destroy link action is a write link action that destroys links and link objects.*/"
          object="#//@packages.0/DestroyLinkAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/WriteLinkAction"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LinkEndDestructionData/@ownedTags.0"
        name="LinkEndDestructionData" superType="#//@packages.0/LinkEndDestructionData/@containedType.0">
      <ownedTags value="/**A link end destruction data is not an action. It is an element that identifies links. It identifies one end of a link to be destroyed by destroy link action.*/"
          object="#//@packages.0/LinkEndDestructionData"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/LinkEndData"/>
      <ownedAttribute tag="#//@packages.0/LinkEndDestructionData/isDestroyDuplicates/@ownedTags.0"
          name="isDestroyDuplicates" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether to destroy duplicates of the value in nonunique association ends.*/"
            object="#//@packages.0/LinkEndDestructionData/isDestroyDuplicates"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LinkEndDestructionData/destroyAt/@ownedTags.0"
          name="destroyAt" type="#//@packages.0/LinkEndDestructionData/destroyAt/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**Specifies the position of an existing link to be destroyed in ordered nonunique association ends. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.*/"
            object="#//@packages.0/LinkEndDestructionData/destroyAt"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/LinkEndDestructionData/destroy_link_action/@ownedTags.0"
          name="destroy_link_action" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**LinkEndDestructionData can only be end data for DestroyLinkAction or one of its specializations.&#xD;&#xA;true*/"
            object="#//@packages.0/LinkEndDestructionData/destroy_link_action"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LinkEndDestructionData/unlimited_natural_and_multiplicity/@ownedTags.0"
          name="unlimited_natural_and_multiplicity" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**LinkEndDestructionData for ordered nonunique association ends must have a single destroyAt input pin if isDestroyDuplicates is false. It must be of type UnlimitedNatural and have a multiplicity of 1..1. Otherwise, the action has no input pin for the removal position.&#xD;&#xA;true*/"
            object="#//@packages.0/LinkEndDestructionData/unlimited_natural_and_multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ClearAssociationAction/@ownedTags.0"
        name="ClearAssociationAction" superType="#//@packages.0/ClearAssociationAction/@containedType.0">
      <ownedTags value="/**A clear association action is an action that destroys all links of an association in which a particular object participates.*/"
          object="#//@packages.0/ClearAssociationAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ClearAssociationAction/object/@ownedTags.0"
          name="object" type="#//@packages.0/ClearAssociationAction/object/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the input pin from which is obtained the object whose participation in the association is to be cleared.*/"
            object="#//@packages.0/ClearAssociationAction/object"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ClearAssociationAction/association/@ownedTags.0"
          name="association" type="#//@packages.0/ClearAssociationAction/association/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Association to be cleared.*/" object="#//@packages.0/ClearAssociationAction/association"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ClearAssociationAction/same_type/@ownedTags.0"
          name="same_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the input pin must be the same as the type of at least one of the association ends of the association.&#xD;&#xA;self.association->exists(end.type = self.object.type)*/"
            object="#//@packages.0/ClearAssociationAction/same_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ClearAssociationAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the input pin is 1..1.&#xD;&#xA;self.object.multiplicity.is(1,1)*/"
            object="#//@packages.0/ClearAssociationAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/BroadcastSignalAction/@ownedTags.0"
        name="BroadcastSignalAction" superType="#//@packages.0/BroadcastSignalAction/@containedType.0">
      <ownedTags value="/**A broadcast signal action is an action that transmits a signal instance to all the potential target objects in the system, which may cause the firing of a state machine transitions or the execution of associated activities of a target object. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately after the signals are sent out. It does not wait for receipt. Any reply messages are ignored and are not transmitted to the requestor.*/"
          object="#//@packages.0/BroadcastSignalAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InvocationAction"/>
      <ownedAttribute tag="#//@packages.0/BroadcastSignalAction/signal/@ownedTags.0"
          name="signal" type="#//@packages.0/BroadcastSignalAction/signal/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The specification of signal object transmitted to the target objects.*/"
            object="#//@packages.0/BroadcastSignalAction/signal"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Signal"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/BroadcastSignalAction/number_and_order/@ownedTags.0"
          name="number_and_order" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The number and order of argument pins must be the same as the number and order of attributes in the signal.&#xD;&#xA;true*/"
            object="#//@packages.0/BroadcastSignalAction/number_and_order"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/BroadcastSignalAction/type_ordering_multiplicity/@ownedTags.0"
          name="type_ordering_multiplicity" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The type, ordering, and multiplicity of an argument pin must be the same as the corresponding attribute of the signal.&#xD;&#xA;true*/"
            object="#//@packages.0/BroadcastSignalAction/type_ordering_multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/SendObjectAction/@ownedTags.0"
        name="SendObjectAction" superType="#//@packages.0/SendObjectAction/@containedType.0">
      <ownedTags value="/**A send object action is an action that transmits an object to the target object, where it may invoke behavior such as the firing of state machine transitions or the execution of an activity. The value of the object is available to the execution of invoked behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor.*/"
          object="#//@packages.0/SendObjectAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InvocationAction"/>
      <ownedAttribute tag="#//@packages.0/SendObjectAction/target/@ownedTags.0" name="target"
          type="#//@packages.0/SendObjectAction/target/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The target object to which the object is sent.*/" object="#//@packages.0/SendObjectAction/target"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/SendObjectAction/request/@ownedTags.0" name="request"
          type="#//@packages.0/SendObjectAction/request/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The request object, which is transmitted to the target object. The object may be copied in transmission, so identity might not be preserved.*/"
            object="#//@packages.0/SendObjectAction/request"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ValueSpecificationAction/@ownedTags.0"
        name="ValueSpecificationAction" superType="#//@packages.0/ValueSpecificationAction/@containedType.0">
      <ownedTags value="/**A value specification action is an action that evaluates a value specification.*/"
          object="#//@packages.0/ValueSpecificationAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ValueSpecificationAction/value/@ownedTags.0"
          name="value" type="#//@packages.0/ValueSpecificationAction/value/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Value specification to be evaluated.*/" object="#//@packages.0/ValueSpecificationAction/value"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ValueSpecificationAction/result/@ownedTags.0"
          name="result" type="#//@packages.0/ValueSpecificationAction/result/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the output pin on which the result is put.*/" object="#//@packages.0/ValueSpecificationAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ValueSpecificationAction/compatible_type/@ownedTags.0"
          name="compatible_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of value specification must be compatible with the type of the result pin.&#xD;&#xA;true*/"
            object="#//@packages.0/ValueSpecificationAction/compatible_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ValueSpecificationAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the result pin is 1..1&#xD;&#xA;true*/"
            object="#//@packages.0/ValueSpecificationAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TimeExpression/@ownedTags.0"
        name="TimeExpression" superType="#//@packages.0/TimeExpression/@containedType.0">
      <ownedTags value="/**A time expression defines a value specification that represents a time value.*/"
          object="#//@packages.0/TimeExpression"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      <ownedAttribute tag="#//@packages.0/TimeExpression/expr/@ownedTags.0" name="expr"
          type="#//@packages.0/TimeExpression/expr/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**The value of the time expression.*/" object="#//@packages.0/TimeExpression/expr"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TimeExpression/observation/@ownedTags.0"
          name="observation" type="#//@packages.0/TimeExpression/observation/@containedType.0"
          upper="-1">
        <ownedTags value="/**Refers to the time and duration observations that are involved in expr.*/"
            object="#//@packages.0/TimeExpression/observation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Observation"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Observation/@ownedTags.0"
        name="Observation" isAbstract="true" superType="#//@packages.0/Observation/@containedType.0">
      <ownedTags value="/**Observation is a superclass of TimeObservation and DurationObservation in order for TimeExpression and Duration to refer to either in a simple way.*/"
          object="#//@packages.0/Observation"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Duration/@ownedTags.0"
        name="Duration" superType="#//@packages.0/Duration/@containedType.0">
      <ownedTags value="/**Duration defines a value specification that specifies the temporal distance between two time instants.*/"
          object="#//@packages.0/Duration"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      <ownedAttribute tag="#//@packages.0/Duration/expr/@ownedTags.0" name="expr"
          type="#//@packages.0/Duration/expr/@containedType.0" isOrdered="true" upper="1">
        <ownedTags value="/**The value of the Duration.*/" object="#//@packages.0/Duration/expr"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Duration/observation/@ownedTags.0" name="observation"
          type="#//@packages.0/Duration/observation/@containedType.0" upper="-1">
        <ownedTags value="/**Refers to the time and duration observations that are involved in expr.*/"
            object="#//@packages.0/Duration/observation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Observation"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DurationInterval/@ownedTags.0"
        name="DurationInterval" superType="#//@packages.0/DurationInterval/@containedType.0">
      <ownedTags value="/**A duration interval defines the range between two durations.*/"
          object="#//@packages.0/DurationInterval"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interval"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Interval/@ownedTags.0"
        name="Interval" superType="#//@packages.0/Interval/@containedType.0">
      <ownedTags value="/**An interval defines the range between two value specifications.*/"
          object="#//@packages.0/Interval"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      <ownedAttribute tag="#//@packages.0/Interval/min/@ownedTags.0" name="min" type="#//@packages.0/Interval/min/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Refers to the ValueSpecification denoting the minimum value of the range.*/"
            object="#//@packages.0/Interval/min"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Interval/max/@ownedTags.0" name="max" type="#//@packages.0/Interval/max/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Refers to the ValueSpecification denoting the maximum value of the range.*/"
            object="#//@packages.0/Interval/max"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TimeConstraint/@ownedTags.0"
        name="TimeConstraint" superType="#//@packages.0/TimeConstraint/@containedType.0">
      <ownedTags value="/**A time constraint is a constraint that refers to a time interval.*/"
          object="#//@packages.0/TimeConstraint"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/IntervalConstraint"/>
      <ownedAttribute tag="#//@packages.0/TimeConstraint/firstEvent/@ownedTags.0"
          name="firstEvent" type="#//@packages.0/Boolean" isOrdered="true" upper="1"
          isComposite="true">
        <ownedTags value="/**The value of firstEvent is related to constrainedElement. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters constrainedElement. If firstEvent is false, then the corresponding observation event is the last time instant the execution is within constrainedElement.*/"
            object="#//@packages.0/TimeConstraint/firstEvent"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/IntervalConstraint/@ownedTags.0"
        name="IntervalConstraint" superType="#//@packages.0/IntervalConstraint/@containedType.0">
      <ownedTags value="/**An interval constraint is a constraint that refers to an interval.*/"
          object="#//@packages.0/IntervalConstraint"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TimeInterval/@ownedTags.0"
        name="TimeInterval" superType="#//@packages.0/TimeInterval/@containedType.0">
      <ownedTags value="/**A time interval defines the range between two time expressions.*/"
          object="#//@packages.0/TimeInterval"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Interval"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DurationConstraint/@ownedTags.0"
        name="DurationConstraint" superType="#//@packages.0/DurationConstraint/@containedType.0">
      <ownedTags value="/**A duration constraint is a constraint that refers to a duration interval.*/"
          object="#//@packages.0/DurationConstraint"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/IntervalConstraint"/>
      <ownedAttribute tag="#//@packages.0/DurationConstraint/firstEvent/@ownedTags.0"
          name="firstEvent" type="#//@packages.0/Boolean" upper="2" isComposite="true">
        <ownedTags value="/**The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i]. Default value is true applied when constrainedElement[i] refers an element that represents only one time instant.*/"
            object="#//@packages.0/DurationConstraint/firstEvent"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/DurationConstraint/first_event_multiplicity/@ownedTags.0"
          name="first_event_multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of firstEvent must be 2 if the multiplicity of constrainedElement is 2. Otherwise the multiplicity of firstEvent is 0.&#xD;&#xA;if (constrainedElement->size() =2)&#xD;&#xA;  then (firstEvent->size() = 2) else (firstEvent->size() = 0)*/"
            object="#//@packages.0/DurationConstraint/first_event_multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TimeObservation/@ownedTags.0"
        name="TimeObservation" superType="#//@packages.0/TimeObservation/@containedType.0">
      <ownedTags value="/**A time observation is a reference to a time instant during an execution. It points out the element in the model to observe and whether the observation is when this model element is entered or when it is exited.*/"
          object="#//@packages.0/TimeObservation"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Observation"/>
      <ownedAttribute tag="#//@packages.0/TimeObservation/event/@ownedTags.0" name="event"
          type="#//@packages.0/TimeObservation/event/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The observation is determined by the entering or exiting of the event element during execution.*/"
            object="#//@packages.0/TimeObservation/event"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TimeObservation/firstEvent/@ownedTags.0"
          name="firstEvent" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**The value of firstEvent is related to event. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters event. If firstEvent is false, then the corresponding observation event is the time instant the execution exits event.*/"
            object="#//@packages.0/TimeObservation/firstEvent"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DurationObservation/@ownedTags.0"
        name="DurationObservation" superType="#//@packages.0/DurationObservation/@containedType.0">
      <ownedTags value="/**A duration observation is a reference to a duration during an execution. It points out the element(s) in the model to observe and whether the observations are when this model element is entered or when it is exited.*/"
          object="#//@packages.0/DurationObservation"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Observation"/>
      <ownedAttribute tag="#//@packages.0/DurationObservation/event/@ownedTags.0"
          name="event" type="#//@packages.0/DurationObservation/event/@containedType.0"
          lower="1" upper="2">
        <ownedTags value="/**The observation is determined by the entering or exiting of the event element during execution.*/"
            object="#//@packages.0/DurationObservation/event"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/DurationObservation/firstEvent/@ownedTags.0"
          name="firstEvent" type="#//@packages.0/Boolean" upper="2" isComposite="true">
        <ownedTags value="/**The value of firstEvent[i] is related to event[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters event[i]. If firstEvent[i] is false, then the corresponding observation event is the time instant the execution exits event[i]. Default value is true applied when event[i] refers an element that represents only one time instant.*/"
            object="#//@packages.0/DurationObservation/firstEvent"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/DurationObservation/first_event_multiplicity/@ownedTags.0"
          name="first_event_multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of firstEvent must be 2 if the multiplicity of event is 2. Otherwise the multiplicity of firstEvent is 0.&#xD;&#xA;if (event->size() = 2)&#xD;&#xA;  then (firstEvent->size() = 2) else (firstEvent->size() = 0)*/"
            object="#//@packages.0/DurationObservation/first_event_multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/FinalState/@ownedTags.0"
        name="FinalState" superType="#//@packages.0/FinalState/@containedType.0">
      <ownedTags value="/**A special kind of state signifying that the enclosing region is completed. If the enclosing region is directly contained in a state machine and all other regions in the state machine also are completed, then it means that the entire state machine is completed.*/"
          object="#//@packages.0/FinalState"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/State"/>
      <ownedOperation tag="#//@packages.0/FinalState/no_outgoing_transitions/@ownedTags.0"
          name="no_outgoing_transitions" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A final state cannot have any outgoing transitions.&#xD;&#xA;self.outgoing->size() = 0*/"
            object="#//@packages.0/FinalState/no_outgoing_transitions"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/FinalState/no_regions/@ownedTags.0" name="no_regions"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A final state cannot have regions.&#xD;&#xA;self.region->size() = 0*/"
            object="#//@packages.0/FinalState/no_regions"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/FinalState/cannot_reference_submachine/@ownedTags.0"
          name="cannot_reference_submachine" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A final state cannot reference a submachine.&#xD;&#xA;self.submachine->isEmpty()*/"
            object="#//@packages.0/FinalState/cannot_reference_submachine"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/FinalState/no_entry_behavior/@ownedTags.0"
          name="no_entry_behavior" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A final state has no entry behavior.&#xD;&#xA;self.entry->isEmpty()*/"
            object="#//@packages.0/FinalState/no_entry_behavior"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/FinalState/no_exit_behavior/@ownedTags.0"
          name="no_exit_behavior" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A final state has no exit behavior.&#xD;&#xA;self.exit->isEmpty()*/"
            object="#//@packages.0/FinalState/no_exit_behavior"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/FinalState/no_state_behavior/@ownedTags.0"
          name="no_state_behavior" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A final state has no state (doActivity) behavior.&#xD;&#xA;self.doActivity->isEmpty()*/"
            object="#//@packages.0/FinalState/no_state_behavior"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/TimeEvent/@ownedTags.0"
        name="TimeEvent" superType="#//@packages.0/TimeEvent/@containedType.0">
      <ownedTags value="/**A time event specifies a point in time. At the specified time, the event occurs.&#xD;&#xA;A time event can be defined relative to entering the current state of the executing state machine.*/"
          object="#//@packages.0/TimeEvent"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Event"/>
      <ownedAttribute tag="#//@packages.0/TimeEvent/isRelative/@ownedTags.0" name="isRelative"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether it is relative or absolute time.*/"
            object="#//@packages.0/TimeEvent/isRelative"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/TimeEvent/when/@ownedTags.0" name="when"
          type="#//@packages.0/TimeEvent/when/@containedType.0" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies the corresponding time deadline.*/" object="#//@packages.0/TimeEvent/when"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/TimeEvent/when_non_negative/@ownedTags.0"
          name="when_non_negative" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The ValueSpecification when must return a non-negative Integer.&#xD;&#xA;true*/"
            object="#//@packages.0/TimeEvent/when_non_negative"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/TimeEvent/starting_time/@ownedTags.0" name="starting_time"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The starting time for a relative time event may only be omitted for a time event that is the trigger of a state machine.&#xD;&#xA;true*/"
            object="#//@packages.0/TimeEvent/starting_time"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/VariableAction/@ownedTags.0"
        name="VariableAction" isAbstract="true" superType="#//@packages.0/VariableAction/@containedType.0">
      <ownedTags value="/**VariableAction is an abstract class for actions that operate on a statically specified variable.*/"
          object="#//@packages.0/VariableAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/VariableAction/variable/@ownedTags.0" name="variable"
          type="#//@packages.0/VariableAction/variable/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**Variable to be read.*/" object="#//@packages.0/VariableAction/variable"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Variable"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/VariableAction/scope_of_variable/@ownedTags.0"
          name="scope_of_variable" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The action must be in the scope of the variable.&#xD;&#xA;self.variable.isAccessibleBy(self)*/"
            object="#//@packages.0/VariableAction/scope_of_variable"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReadVariableAction/@ownedTags.0"
        name="ReadVariableAction" superType="#//@packages.0/ReadVariableAction/@containedType.0">
      <ownedTags value="/**A read variable action is a variable action that retrieves the values of a variable.*/"
          object="#//@packages.0/ReadVariableAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/VariableAction"/>
      <ownedAttribute tag="#//@packages.0/ReadVariableAction/result/@ownedTags.0"
          name="result" type="#//@packages.0/ReadVariableAction/result/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the output pin on which the result is put.*/" object="#//@packages.0/ReadVariableAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReadVariableAction/type_and_ordering/@ownedTags.0"
          name="type_and_ordering" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type and ordering of the result output pin of a read-variable action are the same as the type and ordering of the variable.&#xD;&#xA;self.result.type =self.variable.type&#xA;and self.result.ordering = self.variable.ordering&#xA;*/"
            object="#//@packages.0/ReadVariableAction/type_and_ordering"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadVariableAction/compatible_multiplicity/@ownedTags.0"
          name="compatible_multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the variable must be compatible with the multiplicity of the output pin.&#xD;&#xA;self.variable.multiplicity.compatibleWith(self.result.multiplicity)*/"
            object="#//@packages.0/ReadVariableAction/compatible_multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/WriteVariableAction/@ownedTags.0"
        name="WriteVariableAction" isAbstract="true" superType="#//@packages.0/WriteVariableAction/@containedType.0">
      <ownedTags value="/**WriteVariableAction is an abstract class for variable actions that change variable values.*/"
          object="#//@packages.0/WriteVariableAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/VariableAction"/>
      <ownedAttribute tag="#//@packages.0/WriteVariableAction/value/@ownedTags.0"
          name="value" type="#//@packages.0/WriteVariableAction/value/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Value to be added or removed from the variable.*/" object="#//@packages.0/WriteVariableAction/value"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/WriteVariableAction/same_type/@ownedTags.0"
          name="same_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type input pin is the same as the type of the variable.&#xD;&#xA;self.value.type = self.variable.type*/"
            object="#//@packages.0/WriteVariableAction/same_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/WriteVariableAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the input pin is 1..1.&#xD;&#xA;self.value.multiplicity.is(1,1)*/"
            object="#//@packages.0/WriteVariableAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ClearVariableAction/@ownedTags.0"
        name="ClearVariableAction" superType="#//@packages.0/ClearVariableAction/@containedType.0">
      <ownedTags value="/**A clear variable action is a variable action that removes all values of a variable.*/"
          object="#//@packages.0/ClearVariableAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/VariableAction"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/AddVariableValueAction/@ownedTags.0"
        name="AddVariableValueAction" superType="#//@packages.0/AddVariableValueAction/@containedType.0">
      <ownedTags value="/**An add variable value action is a write variable action for adding values to a variable.*/"
          object="#//@packages.0/AddVariableValueAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/WriteVariableAction"/>
      <ownedAttribute tag="#//@packages.0/AddVariableValueAction/isReplaceAll/@ownedTags.0"
          name="isReplaceAll" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether existing values of the variable should be removed before adding the new value.*/"
            object="#//@packages.0/AddVariableValueAction/isReplaceAll"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/AddVariableValueAction/insertAt/@ownedTags.0"
          name="insertAt" type="#//@packages.0/AddVariableValueAction/insertAt/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**Gives the position at which to insert a new value or move an existing value in ordered variables. The types is UnlimitedINatural, but the value cannot be zero. This pin is omitted for unordered variables.*/"
            object="#//@packages.0/AddVariableValueAction/insertAt"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/AddVariableValueAction/single_input_pin/@ownedTags.0"
          name="single_input_pin" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Actions adding values to ordered variables must have a single input pin for the insertion point with type UnlimtedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.&#xD;&#xA;let insertAtPins : Collection = self.insertAt in&#xA;if self.variable.ordering = #unordered&#xA;then insertAtPins->size() = 0&#xA;else let insertAtPin : InputPin = insertAt->asSequence()->first() in&#xA;insertAtPins->size() = 1&#xA;and insertAtPin.type = UnlimitedNatural&#xA;and insertAtPin.multiplicity.is(1,1))&#xA;endif&#xA;*/"
            object="#//@packages.0/AddVariableValueAction/single_input_pin"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/RemoveVariableValueAction/@ownedTags.0"
        name="RemoveVariableValueAction" superType="#//@packages.0/RemoveVariableValueAction/@containedType.0">
      <ownedTags value="/**A remove variable value action is a write variable action that removes values from variables.*/"
          object="#//@packages.0/RemoveVariableValueAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/WriteVariableAction"/>
      <ownedAttribute tag="#//@packages.0/RemoveVariableValueAction/isRemoveDuplicates/@ownedTags.0"
          name="isRemoveDuplicates" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether to remove duplicates of the value in nonunique variables.*/"
            object="#//@packages.0/RemoveVariableValueAction/isRemoveDuplicates"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/RemoveVariableValueAction/removeAt/@ownedTags.0"
          name="removeAt" type="#//@packages.0/RemoveVariableValueAction/removeAt/@containedType.0"
          isOrdered="true" upper="1" isComposite="true">
        <ownedTags value="/**Specifies the position of an existing value to remove in ordered nonunique variables. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.*/"
            object="#//@packages.0/RemoveVariableValueAction/removeAt"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/RemoveVariableValueAction/unlimited_natural/@ownedTags.0"
          name="unlimited_natural" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Actions removing a value from ordered nonunique variables must have a single removeAt input pin if isRemoveDuplicates is false. It must be of type UnlimitedNatural with multiplicity of 1..1, otherwise the action has no removeAt input pin.&#xD;&#xA;true*/"
            object="#//@packages.0/RemoveVariableValueAction/unlimited_natural"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/RaiseExceptionAction/@ownedTags.0"
        name="RaiseExceptionAction" superType="#//@packages.0/RaiseExceptionAction/@containedType.0">
      <ownedTags value="/**A raise exception action is an action that causes an exception to occur. The input value becomes the exception object.*/"
          object="#//@packages.0/RaiseExceptionAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/RaiseExceptionAction/exception/@ownedTags.0"
          name="exception" type="#//@packages.0/RaiseExceptionAction/exception/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**An input pin whose value becomes an exception object.*/"
            object="#//@packages.0/RaiseExceptionAction/exception"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ActionInputPin/@ownedTags.0"
        name="ActionInputPin" superType="#//@packages.0/ActionInputPin/@containedType.0">
      <ownedTags value="/**An action input pin is a kind of pin that executes an action to determine the values to input to another.*/"
          object="#//@packages.0/ActionInputPin"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      <ownedAttribute tag="#//@packages.0/ActionInputPin/fromAction/@ownedTags.0"
          name="fromAction" type="#//@packages.0/ActionInputPin/fromAction/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The action used to provide values.*/" object="#//@packages.0/ActionInputPin/fromAction"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ActionInputPin/one_output_pin/@ownedTags.0"
          name="one_output_pin" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The fromAction of an action input pin must have exactly one output pin.&#xD;&#xA;true*/"
            object="#//@packages.0/ActionInputPin/one_output_pin"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActionInputPin/input_pin/@ownedTags.0" name="input_pin"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The fromAction of an action input pin must only have action input pins as input pins.&#xD;&#xA;true*/"
            object="#//@packages.0/ActionInputPin/input_pin"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ActionInputPin/no_control_or_data_flow/@ownedTags.0"
          name="no_control_or_data_flow" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The fromAction of an action input pin cannot have control or data flows coming into or out of it or its pins.&#xD;&#xA;true*/"
            object="#//@packages.0/ActionInputPin/no_control_or_data_flow"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InformationItem/@ownedTags.0"
        name="InformationItem" superType="#//@packages.0/InformationItem/@containedType.0">
      <ownedTags value="/**An information item is an abstraction of all kinds of information that can be exchanged between objects. It is a kind of classifier intended for representing information in a very abstract way, one which cannot be instantiated.*/"
          object="#//@packages.0/InformationItem"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      <ownedAttribute tag="#//@packages.0/InformationItem/represented/@ownedTags.0"
          name="represented" type="#//@packages.0/InformationItem/represented/@containedType.0"
          upper="-1">
        <ownedTags value="/**Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers.*/"
            object="#//@packages.0/InformationItem/represented"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/InformationItem/sources_and_targets/@ownedTags.0"
          name="sources_and_targets" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The sources and targets of an information item (its related information flows) must designate subsets of the sources and targets of the representation information item, if any.The Classifiers that can realize an information item can only be of the following kind: Class, Interface, InformationItem, Signal, Component.&#xD;&#xA;(self.represented->select(p | p->oclIsKindOf(InformationItem))->forAll(p |&#xD;&#xA;  p.informationFlow.source->forAll(q | self.informationFlow.source->include(q)) and&#xD;&#xA;    p.informationFlow.target->forAll(q | self.informationFlow.target->include(q)))) and&#xD;&#xA;      (self.represented->forAll(p | p->oclIsKindOf(Class) or oclIsKindOf(Interface) or&#xD;&#xA;        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))*/"
            object="#//@packages.0/InformationItem/sources_and_targets"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InformationItem/has_no/@ownedTags.0" name="has_no"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An informationItem has no feature, no generalization, and no associations.&#xD;&#xA;self.generalization->isEmpty() and self.feature->isEmpty()*/"
            object="#//@packages.0/InformationItem/has_no"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InformationItem/not_instantiable/@ownedTags.0"
          name="not_instantiable" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**It is not instantiable.&#xD;&#xA;isAbstract*/" object="#//@packages.0/InformationItem/not_instantiable"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/InformationFlow/@ownedTags.0"
        name="InformationFlow" superType="#//@packages.0/InformationFlow/@containedType.0 #//@packages.0/InformationFlow/@containedType.1">
      <ownedTags value="/**An information flow specifies that one or more information items circulates from its sources to its targets. Information flows require some kind of information channel for transmitting information items from the source to the destination. An information channel is represented in various ways depending on the nature of its sources and targets. It may be represented by connectors, links, associations, or even dependencies. For example, if the source and destination are parts in some composite structure such as a collaboration, then the information channel is likely to be represented by a connector between them. Or, if the source and target are objects (which are a kind of instance specification), they may be represented by a link that joins the two, and so on.*/"
          object="#//@packages.0/InformationFlow"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/PackageableElement"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/DirectedRelationship"/>
      <ownedAttribute tag="#//@packages.0/InformationFlow/realization/@ownedTags.0"
          name="realization" type="#//@packages.0/InformationFlow/realization/@containedType.0"
          upper="-1">
        <ownedTags value="/**Determines which Relationship will realize the specified flow*/"
            object="#//@packages.0/InformationFlow/realization"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Relationship"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InformationFlow/conveyed/@ownedTags.0" name="conveyed"
          type="#//@packages.0/InformationFlow/conveyed/@containedType.0" lower="1"
          upper="-1">
        <ownedTags value="/**Specifies the information items that may circulate on this information flow.*/"
            object="#//@packages.0/InformationFlow/conveyed"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InformationFlow/informationSource/@ownedTags.0"
          name="informationSource" type="#//@packages.0/InformationFlow/informationSource/@containedType.0"
          lower="1" upper="-1">
        <ownedTags value="/**Defines from which source the conveyed InformationItems are initiated.*/"
            object="#//@packages.0/InformationFlow/informationSource"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InformationFlow/informationTarget/@ownedTags.0"
          name="informationTarget" type="#//@packages.0/InformationFlow/informationTarget/@containedType.0"
          lower="1" upper="-1">
        <ownedTags value="/**Defines to which target the conveyed InformationItems are directed.*/"
            object="#//@packages.0/InformationFlow/informationTarget"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/NamedElement"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InformationFlow/realizingActivityEdge/@ownedTags.0"
          name="realizingActivityEdge" type="#//@packages.0/InformationFlow/realizingActivityEdge/@containedType.0"
          upper="-1">
        <ownedTags value="/**Determines which ActivityEdges will realize the specified flow.*/"
            object="#//@packages.0/InformationFlow/realizingActivityEdge"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InformationFlow/realizingConnector/@ownedTags.0"
          name="realizingConnector" type="#//@packages.0/InformationFlow/realizingConnector/@containedType.0"
          upper="-1">
        <ownedTags value="/**Determines which Connectors will realize the specified flow.*/"
            object="#//@packages.0/InformationFlow/realizingConnector"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Connector"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/InformationFlow/realizingMessage/@ownedTags.0"
          name="realizingMessage" type="#//@packages.0/InformationFlow/realizingMessage/@containedType.0"
          upper="-1">
        <ownedTags value="/**Determines which Messages will realize the specified flow.*/"
            object="#//@packages.0/InformationFlow/realizingMessage"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Message"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/InformationFlow/sources_and_targets_kind/@ownedTags.0"
          name="sources_and_targets_kind" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The sources and targets of the information flow can only be one of the following kind: Actor, Node, UseCase, Artifact, Class, Component, Port, Property, Interface, Package, ActivityNode, ActivityPartition and InstanceSpecification except when its classifier is a relationship (i.e. it represents a link).&#xD;&#xA;(self.source->forAll(p | p->oclIsKindOf(Actor) or oclIsKindOf(Node) or&#xD;&#xA;  oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or oclIsKindOf(Class) or&#xD;&#xA;  oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or&#xD;&#xA;  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or&#xD;&#xA;  oclIsKindOf(ActivityPartition) or oclIsKindOf(InstanceSpecification))) and&#xD;&#xA;    (self.target->forAll(p | p->oclIsKindOf(Actor) or oclIsKindOf(Node) or&#xD;&#xA;      oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or oclIsKindOf(Class) or&#xD;&#xA;      oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or&#xD;&#xA;      oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or&#xD;&#xA;      oclIsKindOf(ActivityPartition) or oclIsKindOf(InstanceSpecification)))*/"
            object="#//@packages.0/InformationFlow/sources_and_targets_kind"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InformationFlow/must_conform/@ownedTags.0"
          name="must_conform" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The sources and targets of the information flow must conform with the sources and targets or conversely the targets and sources of the realization relationships.&#xD;&#xA;true*/"
            object="#//@packages.0/InformationFlow/must_conform"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/InformationFlow/convey_classifiers/@ownedTags.0"
          name="convey_classifiers" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An information flow can only convey classifiers that are allowed to represent an information item.&#xD;&#xA;&#xD;&#xA;self.conveyed.represented->forAll(p | p->oclIsKindOf(Class) or oclIsKindOf(Interface)&#xD;&#xA;  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))*/"
            object="#//@packages.0/InformationFlow/convey_classifiers"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReadExtentAction/@ownedTags.0"
        name="ReadExtentAction" superType="#//@packages.0/ReadExtentAction/@containedType.0">
      <ownedTags value="/**A read extent action is an action that retrieves the current instances of a classifier.*/"
          object="#//@packages.0/ReadExtentAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ReadExtentAction/result/@ownedTags.0" name="result"
          type="#//@packages.0/ReadExtentAction/result/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The runtime instances of the classifier.*/" object="#//@packages.0/ReadExtentAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReadExtentAction/classifier/@ownedTags.0"
          name="classifier" type="#//@packages.0/ReadExtentAction/classifier/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The classifier whose instances are to be retrieved.*/"
            object="#//@packages.0/ReadExtentAction/classifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReadExtentAction/type_is_classifier/@ownedTags.0"
          name="type_is_classifier" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the result output pin is the classifier.&#xD;&#xA;true*/"
            object="#//@packages.0/ReadExtentAction/type_is_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadExtentAction/multiplicity_of_result/@ownedTags.0"
          name="multiplicity_of_result" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the result output pin is 0..*.&#xD;&#xA;self.result.multiplicity.is(0,#null)*/"
            object="#//@packages.0/ReadExtentAction/multiplicity_of_result"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReclassifyObjectAction/@ownedTags.0"
        name="ReclassifyObjectAction" superType="#//@packages.0/ReclassifyObjectAction/@containedType.0">
      <ownedTags value="/**A reclassify object action is an action that changes which classifiers classify an object.*/"
          object="#//@packages.0/ReclassifyObjectAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ReclassifyObjectAction/isReplaceAll/@ownedTags.0"
          name="isReplaceAll" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Specifies whether existing classifiers should be removed before adding the new classifiers.*/"
            object="#//@packages.0/ReclassifyObjectAction/isReplaceAll"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReclassifyObjectAction/oldClassifier/@ownedTags.0"
          name="oldClassifier" type="#//@packages.0/ReclassifyObjectAction/oldClassifier/@containedType.0"
          upper="-1">
        <ownedTags value="/**A set of classifiers to be removed from the classifiers of the object.*/"
            object="#//@packages.0/ReclassifyObjectAction/oldClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReclassifyObjectAction/newClassifier/@ownedTags.0"
          name="newClassifier" type="#//@packages.0/ReclassifyObjectAction/newClassifier/@containedType.0"
          upper="-1">
        <ownedTags value="/**A set of classifiers to be added to the classifiers of the object.*/"
            object="#//@packages.0/ReclassifyObjectAction/newClassifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReclassifyObjectAction/object/@ownedTags.0"
          name="object" type="#//@packages.0/ReclassifyObjectAction/object/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Holds the object to be reclassified.*/" object="#//@packages.0/ReclassifyObjectAction/object"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReclassifyObjectAction/classifier_not_abstract/@ownedTags.0"
          name="classifier_not_abstract" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**None of the new classifiers may be abstract.&#xD;&#xA;not self.newClassifier->exists(isAbstract = true)*/"
            object="#//@packages.0/ReclassifyObjectAction/classifier_not_abstract"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReclassifyObjectAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the input pin is 1..1.&#xD;&#xA;self.argument.multiplicity.is(1,1)*/"
            object="#//@packages.0/ReclassifyObjectAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReclassifyObjectAction/input_pin/@ownedTags.0"
          name="input_pin" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The input pin has no type.&#xD;&#xA;self.argument.type->size() = 0*/"
            object="#//@packages.0/ReclassifyObjectAction/input_pin"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReadIsClassifiedObjectAction/@ownedTags.0"
        name="ReadIsClassifiedObjectAction" superType="#//@packages.0/ReadIsClassifiedObjectAction/@containedType.0">
      <ownedTags value="/**A read is classified object action is an action that determines whether a runtime object is classified by a given classifier.*/"
          object="#//@packages.0/ReadIsClassifiedObjectAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ReadIsClassifiedObjectAction/isDirect/@ownedTags.0"
          name="isDirect" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Indicates whether the classifier must directly classify the input object.*/"
            object="#//@packages.0/ReadIsClassifiedObjectAction/isDirect"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReadIsClassifiedObjectAction/classifier/@ownedTags.0"
          name="classifier" type="#//@packages.0/ReadIsClassifiedObjectAction/classifier/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The classifier against which the classification of the input object is tested.*/"
            object="#//@packages.0/ReadIsClassifiedObjectAction/classifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReadIsClassifiedObjectAction/result/@ownedTags.0"
          name="result" type="#//@packages.0/ReadIsClassifiedObjectAction/result/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**After termination of the action, will hold the result of the test.*/"
            object="#//@packages.0/ReadIsClassifiedObjectAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReadIsClassifiedObjectAction/object/@ownedTags.0"
          name="object" type="#//@packages.0/ReadIsClassifiedObjectAction/object/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Holds the object whose classification is to be tested.*/"
            object="#//@packages.0/ReadIsClassifiedObjectAction/object"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReadIsClassifiedObjectAction/multiplicity_of_input/@ownedTags.0"
          name="multiplicity_of_input" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the input pin is 1..1.&#xD;&#xA;self.object.multiplicity.is(1,1)*/"
            object="#//@packages.0/ReadIsClassifiedObjectAction/multiplicity_of_input"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadIsClassifiedObjectAction/no_type/@ownedTags.0"
          name="no_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1"
          isAbstract="true">
        <ownedTags value="/**The input pin has no type.&#xD;&#xA;self.object.type->isEmpty()*/"
            object="#//@packages.0/ReadIsClassifiedObjectAction/no_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadIsClassifiedObjectAction/multiplicity_of_output/@ownedTags.0"
          name="multiplicity_of_output" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the output pin is 1..1.&#xD;&#xA;self.result.multiplicity.is(1,1)*/"
            object="#//@packages.0/ReadIsClassifiedObjectAction/multiplicity_of_output"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadIsClassifiedObjectAction/boolean_result/@ownedTags.0"
          name="boolean_result" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the output pin is Boolean&#xD;&#xA;self.result.type = Boolean*/"
            object="#//@packages.0/ReadIsClassifiedObjectAction/boolean_result"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/StartClassifierBehaviorAction/@ownedTags.0"
        name="StartClassifierBehaviorAction" superType="#//@packages.0/StartClassifierBehaviorAction/@containedType.0">
      <ownedTags value="/**A start classifier behavior action is an action that starts the classifier behavior of the input.*/"
          object="#//@packages.0/StartClassifierBehaviorAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/StartClassifierBehaviorAction/object/@ownedTags.0"
          name="object" type="#//@packages.0/StartClassifierBehaviorAction/object/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Holds the object on which to start the owned behavior.*/"
            object="#//@packages.0/StartClassifierBehaviorAction/object"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/StartClassifierBehaviorAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the input pin is 1..1&#xD;&#xA;true*/"
            object="#//@packages.0/StartClassifierBehaviorAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/StartClassifierBehaviorAction/type_has_classifier/@ownedTags.0"
          name="type_has_classifier" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If the input pin has a type, then the type must have a classifier behavior.&#xD;&#xA;true*/"
            object="#//@packages.0/StartClassifierBehaviorAction/type_has_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReadLinkObjectEndAction/@ownedTags.0"
        name="ReadLinkObjectEndAction" superType="#//@packages.0/ReadLinkObjectEndAction/@containedType.0">
      <ownedTags value="/**A read link object end action is an action that retrieves an end object from a link object.*/"
          object="#//@packages.0/ReadLinkObjectEndAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ReadLinkObjectEndAction/object/@ownedTags.0"
          name="object" type="#//@packages.0/ReadLinkObjectEndAction/object/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the input pin from which the link object is obtained.*/"
            object="#//@packages.0/ReadLinkObjectEndAction/object"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReadLinkObjectEndAction/end/@ownedTags.0"
          name="end" type="#//@packages.0/ReadLinkObjectEndAction/end/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**Link end to be read.*/" object="#//@packages.0/ReadLinkObjectEndAction/end"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReadLinkObjectEndAction/result/@ownedTags.0"
          name="result" type="#//@packages.0/ReadLinkObjectEndAction/result/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Pin where the result value is placed.*/" object="#//@packages.0/ReadLinkObjectEndAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndAction/property/@ownedTags.0"
          name="property" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The property must be an association end.&#xD;&#xA;self.end.association.notEmpty()*/"
            object="#//@packages.0/ReadLinkObjectEndAction/property"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndAction/association_of_association/@ownedTags.0"
          name="association_of_association" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The association of the association end must be an association class.&#xD;&#xA;self.end.Association.oclIsKindOf(AssociationClass)*/"
            object="#//@packages.0/ReadLinkObjectEndAction/association_of_association"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndAction/ends_of_association/@ownedTags.0"
          name="ends_of_association" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The ends of the association must not be static.&#xD;&#xA;self.end.association.memberEnd->forall(e | not e.isStatic)*/"
            object="#//@packages.0/ReadLinkObjectEndAction/ends_of_association"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndAction/type_of_object/@ownedTags.0"
          name="type_of_object" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the object input pin is the association class that owns the association end.&#xD;&#xA;self.object.type = self.end.association*/"
            object="#//@packages.0/ReadLinkObjectEndAction/type_of_object"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndAction/multiplicity_of_object/@ownedTags.0"
          name="multiplicity_of_object" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the object input pin is 1..1.&#xD;&#xA;self.object.multiplicity.is(1,1)*/"
            object="#//@packages.0/ReadLinkObjectEndAction/multiplicity_of_object"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndAction/type_of_result/@ownedTags.0"
          name="type_of_result" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the result output pin is the same as the type of the association end.&#xD;&#xA;self.result.type = self.end.type*/"
            object="#//@packages.0/ReadLinkObjectEndAction/type_of_result"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndAction/multiplicity_of_result/@ownedTags.0"
          name="multiplicity_of_result" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the result output pin is 1..1.&#xD;&#xA;self.result.multiplicity.is(1,1)*/"
            object="#//@packages.0/ReadLinkObjectEndAction/multiplicity_of_result"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReadLinkObjectEndQualifierAction/@ownedTags.0"
        name="ReadLinkObjectEndQualifierAction" superType="#//@packages.0/ReadLinkObjectEndQualifierAction/@containedType.0">
      <ownedTags value="/**A read link object end qualifier action is an action that retrieves a qualifier end value from a link object.*/"
          object="#//@packages.0/ReadLinkObjectEndQualifierAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ReadLinkObjectEndQualifierAction/object/@ownedTags.0"
          name="object" type="#//@packages.0/ReadLinkObjectEndQualifierAction/object/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the input pin from which the link object is obtained.*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/object"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReadLinkObjectEndQualifierAction/result/@ownedTags.0"
          name="result" type="#//@packages.0/ReadLinkObjectEndQualifierAction/result/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Pin where the result value is placed.*/" object="#//@packages.0/ReadLinkObjectEndQualifierAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReadLinkObjectEndQualifierAction/qualifier/@ownedTags.0"
          name="qualifier" type="#//@packages.0/ReadLinkObjectEndQualifierAction/qualifier/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The attribute representing the qualifier to be read.*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/qualifier"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndQualifierAction/qualifier_attribute/@ownedTags.0"
          name="qualifier_attribute" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The qualifier attribute must be a qualifier attribute of an association end.&#xD;&#xA;self.qualifier.associationEnd->size() = 1*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/qualifier_attribute"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndQualifierAction/association_of_association/@ownedTags.0"
          name="association_of_association" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The association of the association end of the qualifier attribute must be an association class.&#xD;&#xA;self.qualifier.associationEnd.association.oclIsKindOf(AssociationClass)*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/association_of_association"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndQualifierAction/ends_of_association/@ownedTags.0"
          name="ends_of_association" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The ends of the association must not be static.&#xD;&#xA;self.qualifier.associationEnd.association.memberEnd->forall(e | not e.isStatic)*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/ends_of_association"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndQualifierAction/type_of_object/@ownedTags.0"
          name="type_of_object" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the object input pin is the association class that owns the association end that has the given qualifier attribute.&#xD;&#xA;self.object.type = self.qualifier.associationEnd.association*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/type_of_object"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndQualifierAction/multiplicity_of_qualifier/@ownedTags.0"
          name="multiplicity_of_qualifier" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the qualifier attribute is 1..1.&#xD;&#xA;self.qualifier.multiplicity.is(1,1)*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/multiplicity_of_qualifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndQualifierAction/multiplicity_of_object/@ownedTags.0"
          name="multiplicity_of_object" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the object input pin is 1..1.&#xD;&#xA;self.object.multiplicity.is(1,1)*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/multiplicity_of_object"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndQualifierAction/same_type/@ownedTags.0"
          name="same_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the result output pin is the same as the type of the qualifier attribute.&#xD;&#xA;self.result.type = self.qualifier.type*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/same_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReadLinkObjectEndQualifierAction/multiplicity_of_result/@ownedTags.0"
          name="multiplicity_of_result" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the result output pin is 1..1.&#xD;&#xA;self.result.multiplicity.is(1,1)*/"
            object="#//@packages.0/ReadLinkObjectEndQualifierAction/multiplicity_of_result"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/CreateLinkObjectAction/@ownedTags.0"
        name="CreateLinkObjectAction" superType="#//@packages.0/CreateLinkObjectAction/@containedType.0">
      <ownedTags value="/**A create link object action creates a link object.*/" object="#//@packages.0/CreateLinkObjectAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/CreateLinkAction"/>
      <ownedAttribute tag="#//@packages.0/CreateLinkObjectAction/result/@ownedTags.0"
          name="result" type="#//@packages.0/CreateLinkObjectAction/result/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the output pin on which the result is put.*/" object="#//@packages.0/CreateLinkObjectAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/CreateLinkObjectAction/association_class/@ownedTags.0"
          name="association_class" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The association must be an association class.&#xD;&#xA;self.association().oclIsKindOf(Class)*/"
            object="#//@packages.0/CreateLinkObjectAction/association_class"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CreateLinkObjectAction/type_of_result/@ownedTags.0"
          name="type_of_result" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the result pin must be the same as the association of the action.&#xD;&#xA;self.result.type = self.association()*/"
            object="#//@packages.0/CreateLinkObjectAction/type_of_result"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/CreateLinkObjectAction/multiplicity/@ownedTags.0"
          name="multiplicity" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the output pin is 1..1.&#xD;&#xA;self.result.multiplicity.is(1,1)*/"
            object="#//@packages.0/CreateLinkObjectAction/multiplicity"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/AcceptEventAction/@ownedTags.0"
        name="AcceptEventAction" superType="#//@packages.0/AcceptEventAction/@containedType.0">
      <ownedTags value="/**A accept event action is an action that waits for the occurrence of an event meeting specified conditions.*/"
          object="#//@packages.0/AcceptEventAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/AcceptEventAction/isUnmarshall/@ownedTags.0"
          name="isUnmarshall" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Indicates whether there is a single output pin for the event, or multiple output pins for attributes of the event.*/"
            object="#//@packages.0/AcceptEventAction/isUnmarshall"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/AcceptEventAction/result/@ownedTags.0" name="result"
          type="#//@packages.0/AcceptEventAction/result/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**Pins holding the received event objects or their attributes. Event objects may be copied in transmission, so identity might not be preserved.*/"
            object="#//@packages.0/AcceptEventAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/AcceptEventAction/trigger/@ownedTags.0"
          name="trigger" type="#//@packages.0/AcceptEventAction/trigger/@containedType.0"
          lower="1" upper="-1" isComposite="true">
        <ownedTags value="/**The type of events accepted by the action, as specified by triggers. For triggers with signal events, a signal of the specified type or any subtype of the specified signal type is accepted.*/"
            object="#//@packages.0/AcceptEventAction/trigger"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Trigger"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/AcceptEventAction/no_input_pins/@ownedTags.0"
          name="no_input_pins" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**AcceptEventActions may have no input pins.&#xD;&#xA;true*/"
            object="#//@packages.0/AcceptEventAction/no_input_pins"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/AcceptEventAction/no_output_pins/@ownedTags.0"
          name="no_output_pins" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**There are no output pins if the trigger events are only ChangeEvents, or if they are only CallEvents when this action is an instance of AcceptEventAction and not an instance of a descendant of AcceptEventAction (such as AcceptCallAction).&#xD;&#xA;true*/"
            object="#//@packages.0/AcceptEventAction/no_output_pins"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/AcceptEventAction/trigger_events/@ownedTags.0"
          name="trigger_events" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If the trigger events are all TimeEvents, there is exactly one output pin.&#xD;&#xA;true*/"
            object="#//@packages.0/AcceptEventAction/trigger_events"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/AcceptEventAction/unmarshall_signal_events/@ownedTags.0"
          name="unmarshall_signal_events" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If isUnmarshall is true, there must be exactly one trigger for events of type SignalEvent. The number of result output pins must be the same as the number of attributes of the signal. The type and ordering of each result output pin must be the same as the corresponding attribute of the signal. The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding attribute.&#xD;&#xA;true*/"
            object="#//@packages.0/AcceptEventAction/unmarshall_signal_events"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/AcceptCallAction/@ownedTags.0"
        name="AcceptCallAction" superType="#//@packages.0/AcceptCallAction/@containedType.0">
      <ownedTags value="/**An accept call action is an accept event action representing the receipt of a synchronous call request. In addition to the normal operation parameters, the action produces an output that is needed later to supply the information to the reply action necessary to return control to the caller. This action is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent reply action will complete immediately with no effects.*/"
          object="#//@packages.0/AcceptCallAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/AcceptEventAction"/>
      <ownedAttribute tag="#//@packages.0/AcceptCallAction/returnInformation/@ownedTags.0"
          name="returnInformation" type="#//@packages.0/AcceptCallAction/returnInformation/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Pin where a value is placed containing sufficient information to perform a subsequent reply and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model.*/"
            object="#//@packages.0/AcceptCallAction/returnInformation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/AcceptCallAction/result_pins/@ownedTags.0"
          name="result_pins" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The result pins must match the in and inout parameters of the operation specified by the trigger event in number, type, and order.&#xD;&#xA;true*/"
            object="#//@packages.0/AcceptCallAction/result_pins"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/AcceptCallAction/trigger_call_event/@ownedTags.0"
          name="trigger_call_event" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The trigger event must be a CallEvent.&#xD;&#xA;trigger.event.oclIsKindOf(CallEvent)*/"
            object="#//@packages.0/AcceptCallAction/trigger_call_event"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/AcceptCallAction/unmarshall/@ownedTags.0"
          name="unmarshall" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**isUnmrashall must be true for an AcceptCallAction.&#xD;&#xA;isUnmarshall = true*/"
            object="#//@packages.0/AcceptCallAction/unmarshall"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReplyAction/@ownedTags.0"
        name="ReplyAction" superType="#//@packages.0/ReplyAction/@containedType.0">
      <ownedTags value="/**A reply action is an action that accepts a set of return values and a value containing return information produced by a previous accept call action. The reply action returns the values to the caller of the previous call, completing execution of the call.*/"
          object="#//@packages.0/ReplyAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ReplyAction/replyToCall/@ownedTags.0" name="replyToCall"
          type="#//@packages.0/ReplyAction/replyToCall/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**The trigger specifying the operation whose call is being replied to.*/"
            object="#//@packages.0/ReplyAction/replyToCall"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Trigger"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReplyAction/returnInformation/@ownedTags.0"
          name="returnInformation" type="#//@packages.0/ReplyAction/returnInformation/@containedType.0"
          isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**A pin containing the return information value produced by an earlier AcceptCallAction.*/"
            object="#//@packages.0/ReplyAction/returnInformation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReplyAction/replyValue/@ownedTags.0" name="replyValue"
          type="#//@packages.0/ReplyAction/replyValue/@containedType.0" upper="-1"
          isComposite="true">
        <ownedTags value="/**A list of pins containing the reply values of the operation. These values are returned to the caller.*/"
            object="#//@packages.0/ReplyAction/replyValue"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReplyAction/pins_match_parameter/@ownedTags.0"
          name="pins_match_parameter" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The reply value pins must match the return, out, and inout parameters of the operation on the event on the trigger in number, type, and order.&#xD;&#xA;true*/"
            object="#//@packages.0/ReplyAction/pins_match_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReplyAction/event_on_reply_to_call_trigger/@ownedTags.0"
          name="event_on_reply_to_call_trigger" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The event on replyToCall trigger must be a CallEvent replyToCallEvent.oclIsKindOf(CallEvent)&#xD;&#xA;replyToCallEvent.oclIsKindOf(CallEvent)*/"
            object="#//@packages.0/ReplyAction/event_on_reply_to_call_trigger"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/UnmarshallAction/@ownedTags.0"
        name="UnmarshallAction" superType="#//@packages.0/UnmarshallAction/@containedType.0">
      <ownedTags value="/**An unmarshall action is an action that breaks an object of a known type into outputs each of which is equal to a value from a structural feature of the object.*/"
          object="#//@packages.0/UnmarshallAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/UnmarshallAction/result/@ownedTags.0" name="result"
          type="#//@packages.0/UnmarshallAction/result/@containedType.0" lower="1"
          upper="-1" isComposite="true">
        <ownedTags value="/**The values of the structural features of the input object.*/"
            object="#//@packages.0/UnmarshallAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/UnmarshallAction/unmarshallType/@ownedTags.0"
          name="unmarshallType" type="#//@packages.0/UnmarshallAction/unmarshallType/@containedType.0"
          isOrdered="true" lower="1" upper="1">
        <ownedTags value="/**The type of the object to be unmarshalled.*/" object="#//@packages.0/UnmarshallAction/unmarshallType"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Classifier"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/UnmarshallAction/object/@ownedTags.0" name="object"
          type="#//@packages.0/UnmarshallAction/object/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The object to be unmarshalled.*/" object="#//@packages.0/UnmarshallAction/object"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/UnmarshallAction/same_type/@ownedTags.0"
          name="same_type" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the object input pin must be the same as the unmarshall classifier.&#xD;&#xA;true*/"
            object="#//@packages.0/UnmarshallAction/same_type"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UnmarshallAction/multiplicity_of_object/@ownedTags.0"
          name="multiplicity_of_object" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of the object input pin is 1..1&#xD;&#xA;true*/"
            object="#//@packages.0/UnmarshallAction/multiplicity_of_object"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UnmarshallAction/number_of_result/@ownedTags.0"
          name="number_of_result" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The number of result output pins must be the same as the number of structural features of the unmarshall classifier.&#xD;&#xA;true*/"
            object="#//@packages.0/UnmarshallAction/number_of_result"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UnmarshallAction/type_and_ordering/@ownedTags.0"
          name="type_and_ordering" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type and ordering of each result output pin must be the same as the corresponding structural feature of the unmarshall classifier.&#xD;&#xA;true*/"
            object="#//@packages.0/UnmarshallAction/type_and_ordering"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UnmarshallAction/multiplicity_of_result/@ownedTags.0"
          name="multiplicity_of_result" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding structural features of the unmarshall classifier.&#xD;&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/UnmarshallAction/multiplicity_of_result"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UnmarshallAction/structural_feature/@ownedTags.0"
          name="structural_feature" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The unmarshall classifier must have at least one structural feature.&#xD;&#xA;true*/"
            object="#//@packages.0/UnmarshallAction/structural_feature"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/UnmarshallAction/unmarshallType_is_classifier/@ownedTags.0"
          name="unmarshallType_is_classifier" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**unmarshallType must be a Classifier with ordered attributes&#xD;&#xA;true*/"
            object="#//@packages.0/UnmarshallAction/unmarshallType_is_classifier"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ReduceAction/@ownedTags.0"
        name="ReduceAction" superType="#//@packages.0/ReduceAction/@containedType.0">
      <ownedTags value="/**A reduce action is an action that reduces a collection to a single value by combining the elements of the collection.*/"
          object="#//@packages.0/ReduceAction"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Action"/>
      <ownedAttribute tag="#//@packages.0/ReduceAction/reducer/@ownedTags.0" name="reducer"
          type="#//@packages.0/ReduceAction/reducer/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**Behavior that is applied to two elements of the input collection to produce a value that is the same type as elements of the collection.*/"
            object="#//@packages.0/ReduceAction/reducer"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReduceAction/result/@ownedTags.0" name="result"
          type="#//@packages.0/ReduceAction/result/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Gives the output pin on which the result is put.*/" object="#//@packages.0/ReduceAction/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReduceAction/collection/@ownedTags.0" name="collection"
          type="#//@packages.0/ReduceAction/collection/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**The collection to be reduced.*/" object="#//@packages.0/ReduceAction/collection"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ReduceAction/isOrdered/@ownedTags.0" name="isOrdered"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Tells whether the order of the input collection should determine the order in which the behavior is applied to its elements.*/"
            object="#//@packages.0/ReduceAction/isOrdered"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ReduceAction/input_type_is_collection/@ownedTags.0"
          name="input_type_is_collection" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The type of the input must be a collection.&#xD;&#xA;true*/"
            object="#//@packages.0/ReduceAction/input_type_is_collection"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReduceAction/output_types_are_compatible/@ownedTags.0"
          name="output_types_are_compatible" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The type of the output must be compatible with the type of the output of the reducer behavior.&#xD;&#xA;true*/"
            object="#//@packages.0/ReduceAction/output_types_are_compatible"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ReduceAction/reducer_inputs_output/@ownedTags.0"
          name="reducer_inputs_output" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The reducer behavior must have two input parameters and one output parameter, of types compatible with the types of elements of the input collection.&#xD;&#xA;true*/"
            object="#//@packages.0/ReduceAction/reducer_inputs_output"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/JoinNode/@ownedTags.0"
        name="JoinNode" superType="#//@packages.0/JoinNode/@containedType.0">
      <ownedTags value="/**A join node is a control node that synchronizes multiple flows.&#xD;&#xA;Join nodes have a Boolean value specification using the names of the incoming edges to specify the conditions under which the join will emit a token.*/"
          object="#//@packages.0/JoinNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ControlNode"/>
      <ownedAttribute tag="#//@packages.0/JoinNode/isCombineDuplicate/@ownedTags.0"
          name="isCombineDuplicate" type="#//@packages.0/Boolean" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Tells whether tokens having objects with the same identity are combined into one by the join.*/"
            object="#//@packages.0/JoinNode/isCombineDuplicate"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/JoinNode/joinSpec/@ownedTags.0" name="joinSpec"
          type="#//@packages.0/JoinNode/joinSpec/@containedType.0" isOrdered="true"
          lower="1" upper="1" isComposite="true">
        <ownedTags value="/**A specification giving the conditions under which the join with emit a token. Default is &quot;and&quot;.*/"
            object="#//@packages.0/JoinNode/joinSpec"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ValueSpecification"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/JoinNode/one_outgoing_edge/@ownedTags.0"
          name="one_outgoing_edge" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A join node has one outgoing edge.&#xD;&#xA;self.outgoing->size() = 1*/"
            object="#//@packages.0/JoinNode/one_outgoing_edge"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/JoinNode/incoming_object_flow/@ownedTags.0"
          name="incoming_object_flow" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If a join node has an incoming object flow, it must have an outgoing object flow, otherwise, it must have an outgoing control flow.&#xD;&#xA;(self.incoming.select(e | e.isTypeOf(ObjectFlow)->notEmpty() implies&#xD;&#xA;  self.outgoing.isTypeOf(ObjectFlow)) and&#xD;&#xA;    (self.incoming.select(e | e.isTypeOf(ObjectFlow)->empty() implies&#xD;&#xA;      self.outgoing.isTypeOf(ControlFlow))*/"
            object="#//@packages.0/JoinNode/incoming_object_flow"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/DataStoreNode/@ownedTags.0"
        name="DataStoreNode" superType="#//@packages.0/DataStoreNode/@containedType.0">
      <ownedTags value="/**A data store node is a central buffer node for non-transient information.*/"
          object="#//@packages.0/DataStoreNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/CentralBufferNode"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ObjectFlow/@ownedTags.0"
        name="ObjectFlow" superType="#//@packages.0/ObjectFlow/@containedType.0">
      <ownedTags value="/**An object flow is an activity edge that can have objects or data passing along it.&#xD;&#xA;Object flows have support for multicast/receive, token selection from object nodes, and transformation of tokens.*/"
          object="#//@packages.0/ObjectFlow"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ActivityEdge"/>
      <ownedAttribute tag="#//@packages.0/ObjectFlow/isMulticast/@ownedTags.0" name="isMulticast"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**Tells whether the objects in the flow are passed by multicasting.*/"
            object="#//@packages.0/ObjectFlow/isMulticast"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ObjectFlow/isMultireceive/@ownedTags.0"
          name="isMultireceive" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**Tells whether the objects in the flow are gathered from respondents to multicasting.*/"
            object="#//@packages.0/ObjectFlow/isMultireceive"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ObjectFlow/transformation/@ownedTags.0"
          name="transformation" type="#//@packages.0/ObjectFlow/transformation/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**Changes or replaces data tokens flowing along edge.*/"
            object="#//@packages.0/ObjectFlow/transformation"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ObjectFlow/selection/@ownedTags.0" name="selection"
          type="#//@packages.0/ObjectFlow/selection/@containedType.0" isOrdered="true"
          upper="1">
        <ownedTags value="/**Selects tokens from a source object node.*/" object="#//@packages.0/ObjectFlow/selection"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Behavior"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ObjectFlow/no_actions/@ownedTags.0" name="no_actions"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Object flows may not have actions at either end.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectFlow/no_actions"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectFlow/compatible_types/@ownedTags.0"
          name="compatible_types" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Object nodes connected by an object flow, with optionally intervening control nodes, must have compatible types. In particular, the downstream object node type must be the same or a supertype of the upstream object node type.&#xD;&#xA;&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectFlow/compatible_types"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectFlow/same_upper_bounds/@ownedTags.0"
          name="same_upper_bounds" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**Object nodes connected by an object flow, with optionally intervening control nodes, must have the same upper bounds.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectFlow/same_upper_bounds"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectFlow/target/@ownedTags.0" name="target"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**An edge with constant weight may not target an object node, or lead to an object node downstream with no intervening actions, that has an upper bound less than the weight.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectFlow/target"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectFlow/transformation_behaviour/@ownedTags.0"
          name="transformation_behaviour" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A transformation behavior has one input parameter and one output parameter. The input parameter must be the same as or a supertype of the type of object token coming from the source end. The output parameter must be the same or a subtype of the type of object token expected downstream. The behavior cannot have side effects.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectFlow/transformation_behaviour"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectFlow/selection_behaviour/@ownedTags.0"
          name="selection_behaviour" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An object flow may have a selection behavior only if has an object node as a source.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectFlow/selection_behaviour"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectFlow/input_and_output_parameter/@ownedTags.0"
          name="input_and_output_parameter" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**A selection behavior has one input parameter and one output parameter. The input parameter must be a bag of elements of the same as or a supertype of the type of source object node. The output parameter must be the same or a subtype of the type of source object node. The behavior cannot have side effects.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectFlow/input_and_output_parameter"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ObjectFlow/is_multicast_or_is_multireceive/@ownedTags.0"
          name="is_multicast_or_is_multireceive" type="Ecore.km#//@packages.0/EBoolean"
          isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**isMulticast and isMultireceive cannot both be true.&#xD;&#xA;true*/"
            object="#//@packages.0/ObjectFlow/is_multicast_or_is_multireceive"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ConditionalNode/@ownedTags.0"
        name="ConditionalNode" superType="#//@packages.0/ConditionalNode/@containedType.0">
      <ownedTags value="/**A conditional node is a structured activity node that represents an exclusive choice among some number of alternatives.*/"
          object="#//@packages.0/ConditionalNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredActivityNode"/>
      <ownedAttribute tag="#//@packages.0/ConditionalNode/isDeterminate/@ownedTags.0"
          name="isDeterminate" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**If true, the modeler asserts that at most one test will succeed.*/"
            object="#//@packages.0/ConditionalNode/isDeterminate"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ConditionalNode/isAssured/@ownedTags.0"
          name="isAssured" type="#//@packages.0/Boolean" isOrdered="true" lower="1"
          upper="1" isComposite="true">
        <ownedTags value="/**If true, the modeler asserts that at least one test will succeed.*/"
            object="#//@packages.0/ConditionalNode/isAssured"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ConditionalNode/clause/@ownedTags.0" name="clause"
          type="#//@packages.0/ConditionalNode/clause/@containedType.0" lower="1"
          upper="-1" isComposite="true">
        <ownedTags value="/**Set of clauses composing the conditional.*/" object="#//@packages.0/ConditionalNode/clause"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Clause"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ConditionalNode/result/@ownedTags.0" name="result"
          type="#//@packages.0/ConditionalNode/result/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**A list of output pins that constitute the data flow outputs of the conditional.*/"
            object="#//@packages.0/ConditionalNode/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ConditionalNode/result_no_incoming/@ownedTags.0"
          name="result_no_incoming" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The result output pins have no incoming edges.&#xD;&#xA;true*/"
            object="#//@packages.0/ConditionalNode/result_no_incoming"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/Clause/@ownedTags.0"
        name="Clause" superType="#//@packages.0/Clause/@containedType.0">
      <ownedTags value="/**A clause is an element that represents a single branch of a conditional construct, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates true.*/"
          object="#//@packages.0/Clause"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Element"/>
      <ownedAttribute tag="#//@packages.0/Clause/test/@ownedTags.0" name="test" type="#//@packages.0/Clause/test/@containedType.0"
          upper="-1">
        <ownedTags value="/**A nested activity fragment with a designated output pin that specifies the result of the test.*/"
            object="#//@packages.0/Clause/test"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutableNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Clause/body/@ownedTags.0" name="body" type="#//@packages.0/Clause/body/@containedType.0"
          upper="-1">
        <ownedTags value="/**A nested activity fragment that is executed if the test evaluates to true and the clause is chosen over any concurrent clauses that also evaluate to true.*/"
            object="#//@packages.0/Clause/body"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutableNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Clause/predecessorClause/@ownedTags.0" name="predecessorClause"
          type="#//@packages.0/Clause/predecessorClause/@containedType.0" upper="-1"
          opposite="#//@packages.0/Clause/successorClause">
        <ownedTags value="/**A set of clauses whose tests must all evaluate false before the current clause can be tested.*/"
            object="#//@packages.0/Clause/predecessorClause"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Clause"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Clause/successorClause/@ownedTags.0" name="successorClause"
          type="#//@packages.0/Clause/successorClause/@containedType.0" upper="-1"
          opposite="#//@packages.0/Clause/predecessorClause">
        <ownedTags value="/**A set of clauses which may not be tested unless the current clause tests false.*/"
            object="#//@packages.0/Clause/successorClause"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Clause"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Clause/decider/@ownedTags.0" name="decider"
          type="#//@packages.0/Clause/decider/@containedType.0" isOrdered="true" lower="1"
          upper="1">
        <ownedTags value="/**An output pin within the test fragment the value of which is examined after execution of the test to determine whether the body should be executed.*/"
            object="#//@packages.0/Clause/decider"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/Clause/bodyOutput/@ownedTags.0" name="bodyOutput"
          type="#//@packages.0/Clause/bodyOutput/@containedType.0" isOrdered="true"
          upper="-1">
        <ownedTags value="/**A list of output pins within the body fragment whose values are moved to the result pins of the containing conditional node after execution of the clause body.*/"
            object="#//@packages.0/Clause/bodyOutput"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/Clause/decider_output/@ownedTags.0" name="decider_output"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The decider output pin must be for the test body or a node contained by the test body as a structured node.&#xD;&#xA;true*/"
            object="#//@packages.0/Clause/decider_output"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/Clause/body_output_pins/@ownedTags.0" name="body_output_pins"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**The bodyOutput pins are output pins on actions in the body of the clause.&#xD;&#xA;true*/"
            object="#//@packages.0/Clause/body_output_pins"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/LoopNode/@ownedTags.0"
        name="LoopNode" superType="#//@packages.0/LoopNode/@containedType.0">
      <ownedTags value="/**A loop node is a structured activity node that represents a loop with setup, test, and body sections.*/"
          object="#//@packages.0/LoopNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredActivityNode"/>
      <ownedAttribute tag="#//@packages.0/LoopNode/isTestedFirst/@ownedTags.0" name="isTestedFirst"
          type="#//@packages.0/Boolean" isOrdered="true" lower="1" upper="1" isComposite="true">
        <ownedTags value="/**If true, the test is performed before the first execution of the body.&#xA;If false, the body is executed once before the test is performed.&#xA;*/"
            object="#//@packages.0/LoopNode/isTestedFirst"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LoopNode/bodyPart/@ownedTags.0" name="bodyPart"
          type="#//@packages.0/LoopNode/bodyPart/@containedType.0" upper="-1">
        <ownedTags value="/**The set of nodes and edges that perform the repetitive computations of the loop. The body section is executed as long as the test section produces a true value.*/"
            object="#//@packages.0/LoopNode/bodyPart"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutableNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LoopNode/setupPart/@ownedTags.0" name="setupPart"
          type="#//@packages.0/LoopNode/setupPart/@containedType.0" upper="-1">
        <ownedTags value="/**The set of nodes and edges that initialize values or perform other setup computations for the loop.*/"
            object="#//@packages.0/LoopNode/setupPart"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutableNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LoopNode/decider/@ownedTags.0" name="decider"
          type="#//@packages.0/LoopNode/decider/@containedType.0" isOrdered="true"
          lower="1" upper="1">
        <ownedTags value="/**An output pin within the test fragment the value of which is examined after execution of the test to determine whether to execute the loop body.*/"
            object="#//@packages.0/LoopNode/decider"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LoopNode/test/@ownedTags.0" name="test"
          type="#//@packages.0/LoopNode/test/@containedType.0" upper="-1">
        <ownedTags value="/**The set of nodes, edges, and designated value that compute a Boolean value to determine if another execution of the body will be performed.*/"
            object="#//@packages.0/LoopNode/test"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExecutableNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LoopNode/result/@ownedTags.0" name="result"
          type="#//@packages.0/LoopNode/result/@containedType.0" isOrdered="true"
          upper="-1" isComposite="true">
        <ownedTags value="/**A list of output pins that constitute the data flow output of the entire loop.*/"
            object="#//@packages.0/LoopNode/result"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LoopNode/loopVariable/@ownedTags.0" name="loopVariable"
          type="#//@packages.0/LoopNode/loopVariable/@containedType.0" isOrdered="true"
          upper="-1">
        <ownedTags value="/**A list of output pins that hold the values of the loop variables during an execution of the loop. When the test fails, the values are movied to the result pins of the loop.*/"
            object="#//@packages.0/LoopNode/loopVariable"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LoopNode/bodyOutput/@ownedTags.0" name="bodyOutput"
          type="#//@packages.0/LoopNode/bodyOutput/@containedType.0" isOrdered="true"
          upper="-1">
        <ownedTags value="/**A list of output pins within the body fragment the values of which are moved to the loop variable pins after completion of execution of the body, before the next iteration of the loop begins or before the loop exits.*/"
            object="#//@packages.0/LoopNode/bodyOutput"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/OutputPin"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/LoopNode/loopVariableInput/@ownedTags.0"
          name="loopVariableInput" type="#//@packages.0/LoopNode/loopVariableInput/@containedType.0"
          isOrdered="true" upper="-1" isComposite="true">
        <ownedTags value="/**A list of values that are moved into the loop variable pins before the first iteration of the loop.*/"
            object="#//@packages.0/LoopNode/loopVariableInput"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/InputPin"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/LoopNode/input_edges/@ownedTags.0" name="input_edges"
          type="Ecore.km#//@packages.0/EBoolean" isOrdered="true" upper="1" isAbstract="true">
        <ownedTags value="/**Loop variable inputs must not have outgoing edges.&#xD;&#xA;true*/"
            object="#//@packages.0/LoopNode/input_edges"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LoopNode/body_output_pins/@ownedTags.0"
          name="body_output_pins" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The bodyOutput pins are output pins on actions in the body of the loop node.&#xD;&#xA;true*/"
            object="#//@packages.0/LoopNode/body_output_pins"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/LoopNode/result_no_incoming/@ownedTags.0"
          name="result_no_incoming" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**The result output pins have no incoming edges.&#xD;&#xA;true*/"
            object="#//@packages.0/LoopNode/result_no_incoming"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExpansionNode/@ownedTags.0"
        name="ExpansionNode" superType="#//@packages.0/ExpansionNode/@containedType.0">
      <ownedTags value="/**An expansion node is an object node used to indicate a flow across the boundary of an expansion region. A flow into a region contains a collection that is broken into its individual elements inside the region, which is executed once per element. A flow out of a region combines individual elements into a collection for use outside the region.*/"
          object="#//@packages.0/ExpansionNode"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ObjectNode"/>
      <ownedAttribute tag="#//@packages.0/ExpansionNode/regionAsOutput/@ownedTags.0"
          name="regionAsOutput" type="#//@packages.0/ExpansionNode/regionAsOutput/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/ExpansionRegion/outputElement">
        <ownedTags value="/**The expansion region for which the node is an output.*/"
            object="#//@packages.0/ExpansionNode/regionAsOutput"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExpansionRegion"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ExpansionNode/regionAsInput/@ownedTags.0"
          name="regionAsInput" type="#//@packages.0/ExpansionNode/regionAsInput/@containedType.0"
          isOrdered="true" upper="1" opposite="#//@packages.0/ExpansionRegion/inputElement">
        <ownedTags value="/**The expansion region for which the node is an input.*/"
            object="#//@packages.0/ExpansionNode/regionAsInput"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExpansionRegion"/>
      </ownedAttribute>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ExpansionRegion/@ownedTags.0"
        name="ExpansionRegion" superType="#//@packages.0/ExpansionRegion/@containedType.0">
      <ownedTags value="/**An expansion region is a structured activity region that executes multiple times corresponding to elements of an input collection.*/"
          object="#//@packages.0/ExpansionRegion"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/StructuredActivityNode"/>
      <ownedAttribute tag="#//@packages.0/ExpansionRegion/mode/@ownedTags.0" name="mode"
          type="#//@packages.0/ExpansionKind" isOrdered="true" lower="1" upper="1"
          isComposite="true">
        <ownedTags value="/**The way in which the executions interact:&#xD;&#xA;parallel: all interactions are independent&#xD;&#xA;iterative: the interactions occur in order of the elements&#xD;&#xA;stream: a stream of values flows into a single execution&#xD;&#xA;*/"
            object="#//@packages.0/ExpansionRegion/mode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ExpansionRegion/inputElement/@ownedTags.0"
          name="inputElement" type="#//@packages.0/ExpansionRegion/inputElement/@containedType.0"
          lower="1" upper="-1" opposite="#//@packages.0/ExpansionNode/regionAsInput">
        <ownedTags value="/**An object node that holds a separate element of the input collection during each of the multiple executions of the region.*/"
            object="#//@packages.0/ExpansionRegion/inputElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExpansionNode"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ExpansionRegion/outputElement/@ownedTags.0"
          name="outputElement" type="#//@packages.0/ExpansionRegion/outputElement/@containedType.0"
          upper="-1" opposite="#//@packages.0/ExpansionNode/regionAsOutput">
        <ownedTags value="/**An object node that accepts a separate element of the output collection during each of the multiple executions of the region. The values are formed into a collection that is available when the execution of the region is complete.*/"
            object="#//@packages.0/ExpansionRegion/outputElement"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/ExpansionNode"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ExpansionRegion/expansion_nodes/@ownedTags.0"
          name="expansion_nodes" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An ExpansionRegion must have one or more argument ExpansionNodes and zero or more result ExpansionNodes.&#xD;&#xA;true*/"
            object="#//@packages.0/ExpansionRegion/expansion_nodes"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:Enumeration" name="ExpansionKind">
      <ownedLiteral name="parallel"/>
      <ownedLiteral name="iterative"/>
      <ownedLiteral name="stream"/>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/ProtocolTransition/@ownedTags.0"
        name="ProtocolTransition" superType="#//@packages.0/ProtocolTransition/@containedType.0">
      <ownedTags value="/**A protocol transition specifies a legal transition for an operation. Transitions of protocol state machines have the following information: a pre condition (guard), on trigger, and a post condition. Every protocol transition is associated to zero or one operation (referred BehavioralFeature) that belongs to the context classifier of the protocol state machine.*/"
          object="#//@packages.0/ProtocolTransition"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Transition"/>
      <ownedAttribute tag="#//@packages.0/ProtocolTransition/postCondition/@ownedTags.0"
          name="postCondition" type="#//@packages.0/ProtocolTransition/postCondition/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**Specifies the post condition of the transition which is the condition that should be obtained once the transition is triggered. This post condition is part of the post condition of the operation connected to the transition.&#xD;&#xA;*/"
            object="#//@packages.0/ProtocolTransition/postCondition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ProtocolTransition/referred/@ownedTags.0"
          name="referred" type="#//@packages.0/ProtocolTransition/referred/@containedType.0"
          upper="-1" isDerived="true">
        <ownedTags value="/**This association refers to the associated operation. It is derived from the operation of the call trigger when applicable.*/"
            object="#//@packages.0/ProtocolTransition/referred"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Operation"/>
        <getterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ProtocolTransition/referred/@getterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ProtocolTransition/referred/@getterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </getterBody>
        <setterBody xsi:type="kermeta_language_behavior:Block" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
          <statement xsi:type="kermeta_language_behavior:Raise" staticType="#//@packages.0/Element/ownedElement/@getterBody/@containedType.0">
            <expression xsi:type="kermeta_language_behavior:CallFeature" staticType="#//@packages.0/ProtocolTransition/referred/@setterBody/@statement.0/@expression/@containedType.0"
                name="new" staticOperation="platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/language/structure.km#//@packages.0/language/structure/Class/new">
              <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="kermeta_language_structure:ClassDefinition platform:/plugin/fr.irisa.triskell.kermeta.io/src/kermeta/exceptions/exceptions.km#//@packages.0/exceptions/NotImplementedException"/>
              <target xsi:type="kermeta_language_behavior:TypeLiteral" staticType="#//@packages.0/Element/ownedElement/@getterBody/@statement.0/@expression/@target/@containedType.0">
                <typeref type="#//@packages.0/ProtocolTransition/referred/@setterBody/@statement.0/@expression/@containedType.0"
                    upper="1"/>
              </target>
            </expression>
          </statement>
        </setterBody>
      </ownedAttribute>
      <ownedAttribute tag="#//@packages.0/ProtocolTransition/preCondition/@ownedTags.0"
          name="preCondition" type="#//@packages.0/ProtocolTransition/preCondition/@containedType.0"
          isOrdered="true" upper="1">
        <ownedTags value="/**Specifies the precondition of the transition. It specifies the condition that should be verified before triggering the transition. This guard condition added to the source state will be evaluated as part of the precondition of the operation referred by the transition if any.*/"
            object="#//@packages.0/ProtocolTransition/preCondition"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Constraint"/>
      </ownedAttribute>
      <ownedOperation tag="#//@packages.0/ProtocolTransition/belongs_to_psm/@ownedTags.0"
          name="belongs_to_psm" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A protocol transition always belongs to a protocol state machine.&#xD;&#xA;container.belongsToPSM()*/"
            object="#//@packages.0/ProtocolTransition/belongs_to_psm"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ProtocolTransition/associated_actions/@ownedTags.0"
          name="associated_actions" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**A protocol transition never has associated actions.&#xD;&#xA;effect->isEmpty()*/"
            object="#//@packages.0/ProtocolTransition/associated_actions"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/ProtocolTransition/refers_to_operation/@ownedTags.0"
          name="refers_to_operation" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**If a protocol transition refers to an operation (i. e. has a call trigger corresponding to an operation), then that operation should apply to the context classifier of the state machine of the protocol transition.&#xD;&#xA;true*/"
            object="#//@packages.0/ProtocolTransition/refers_to_operation"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
    </ownedTypeDefinition>
    <ownedTypeDefinition xsi:type="kermeta_language_structure:ClassDefinition" tag="#//@packages.0/AssociationClass/@ownedTags.0"
        name="AssociationClass" superType="#//@packages.0/AssociationClass/@containedType.0 #//@packages.0/AssociationClass/@containedType.1">
      <ownedTags value="/**A model element that has both association and class properties. An AssociationClass can be seen as an association that also has class properties, or as a class that also has association properties. It not only connects a set of classifiers but also defines a set of features that belong to the relationship itself and not to any of the classifiers.*/"
          object="#//@packages.0/AssociationClass"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Class"/>
      <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Association"/>
      <ownedOperation tag="#//@packages.0/AssociationClass/cannot_be_defined/@ownedTags.0"
          name="cannot_be_defined" type="Ecore.km#//@packages.0/EBoolean" isOrdered="true"
          upper="1" isAbstract="true">
        <ownedTags value="/**An AssociationClass cannot be defined between itself and something else.&#xD;&#xA;self.endType->excludes(self) and self.endType>collect(et|et.allparents()->excludes(self))*/"
            object="#//@packages.0/AssociationClass/cannot_be_defined"/>
        <ownedParameter name="diagnostics" type="Ecore.km#//@packages.0/EDiagnosticChain"
            isOrdered="true" upper="1"/>
        <ownedParameter name="context" type="Ecore.km#//@packages.0/EMap" isOrdered="true"
            upper="1"/>
      </ownedOperation>
      <ownedOperation tag="#//@packages.0/AssociationClass/allConnections/@ownedTags.0"
          name="allConnections" type="#//@packages.0/AssociationClass/allConnections/@containedType.0"
          lower="2" upper="-1" isAbstract="true">
        <ownedTags value="/**The operation allConnections results in the set of all AssociationEnds of the Association.&#xD;&#xA;result = memberEnd->union ( self.parents ()->collect (p | p.allConnections () )*/"
            object="#//@packages.0/AssociationClass/allConnections"/>
        <containedType xsi:type="kermeta_language_structure:Class" typeDefinition="#//@packages.0/Property"/>
      </ownedOperation>
    </ownedTypeDefinition>
  </packages>
  <requires uri="http://www.eclipse.org/emf/2002/Ecore"/>
  <requires uri="kermeta"/>
  <usings qualifiedName="uml"/>
</kermeta_language_structure:ModelingUnit>
