/* $Id: 014_testExternJavaCall.main.kmt,v 1.1 2007-09-10 08:35:04 cfaucher Exp $
 * Project : Kermeta.interpreter. test
 * License : GPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Apr 18 2005
 * Authors : 
 * 		Didier Vojtisek (dvojtise@irisa.fr)
 * Description :  	
 * 	see class javadoc.
 *   important note:
 *		In this test suite, some of the java call change the original value or the passed parameter.
 *		On integer, and String this still work but according to their type (primitive),
 *		this is normally impossible in kermeta. (see test suit 052) 
 *		But here, as we change the literal itself this works.
 *		On Boolean, even that hack cannot work, because boolean values are singleton
 */
@mainClass "testExternJavaCall::Test_ExternJavaCall"
@mainOperation "run2"

package testExternJavaCall;

require kermeta

class Test_ExternJavaCall  inherits kermeta::kunit::TestCase { 


    operation run2() : kermeta::standard::Integer is do
    	/*test1()
        testReturn1()
        testReturn2()
        testReturn3()
        testOneParam1()
        testOneVarParam1()
        testOneParamParam1()
        test2IntegersParams()*/
        //test3IntegersParams()
      //  test3Integers2Strings1BooleanParams()
        result := 0
    end
    
    method setUp() : Void is do
    	extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.initialize(self)
    end
    
    // simple tests
    operation test1() : Void is do
        // extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.simpleCall()
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()
    end
     
    
    operation testReturn1() : Void is do
        var boolvalue : kermeta::standard::Boolean
		//extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()
        boolvalue ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.callBooleanReturn()
        assertTrue(boolvalue)
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()               
    end

    operation testReturn2() : Void is do
        var intValue : kermeta::standard::Integer
		//extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()
        intValue ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.callIntegerReturn()
        assertTrue(intValue==777)
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()        
    end
 
    operation testReturn3() : Void is do
        var StringValue : kermeta::standard::String
		//extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()
        StringValue ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.callStringReturn()
        assertTrue(StringValue.compareTo("Hello world")==0)
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()        
    end
    
    operation testOneParam1() : Void is do
        var intValue : kermeta::standard::Integer
        intValue ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.callOneIntegerParam(777)
        assertTrue(intValue==778)
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()        
    end
    // Tests with multiple parameters
     operation test2IntegersParams() : Void is do
        var intValue1 : kermeta::standard::Integer
        var intValue2 : kermeta::standard::Integer
        var returnedintvalue : kermeta::standard::Integer
        intValue1 := 177
        intValue2 := 277
        
        returnedintvalue ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.call2IntegersParams(intValue1,intValue2)

        assertTrueWithMsg((returnedintvalue == 178), "test2IntegersParams failed (1)")
        assertTrueWithMsg((intValue1 == 178), "test2IntegersParams failed (2)")
        assertTrueWithMsg(intValue2 == 278, "test2IntegersParams failed (3)")
        
    end    
    operation test3IntegersParams() : Void is do
        var intValue1 : kermeta::standard::Integer
        var intValue2 : kermeta::standard::Integer
        var intValue3 : kermeta::standard::Integer
        var returnedintvalue : kermeta::standard::Integer
        intValue1 := 177
        intValue2 := 277
        intValue3 := 377
        
        returnedintvalue ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.call3IntegersParams(intValue1,intValue2, intValue3)

        assertTrueWithMsg((returnedintvalue == 178), "test3IntegersParams failed (1)")
        assertTrueWithMsg((intValue1 == 178), "test3IntegersParams failed (2)")
        assertTrueWithMsg(intValue2 == 278, "test3IntegersParams failed (3)")
        assertTrueWithMsg(intValue3 == 378, "test3IntegersParams failed (4)")
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled() 
    end 
    
    /** tester l'appel a TestJavaCall.call3IntegersParams mais en passant plusieurs fois le même int */
    operation test3SameIntegersParams() : Void is do	
		
		var intValue : kermeta::standard::Integer
		var returnedintvalue : kermeta::standard::Integer
        
        intValue := 777
        returnedintvalue ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.call3IntegersParams(intValue,intValue, intValue)

        assertTrueWithMsg((returnedintvalue == 780), "returnedintvalue == 780 ; but == " +returnedintvalue.toString)
        assertTrueWithMsg((intValue == 780), "intValue == 780; but == " + intValue.toString)
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled() 
        
	end	
    
    operation test3Integers2Strings1BooleanParams() : Void is do
        var intValue1 : kermeta::standard::Integer
        var intValue2 : kermeta::standard::Integer
        var intValue3 : kermeta::standard::Integer
        var stringLit : kermeta::standard::String
        var stringValue1 : kermeta::standard::String
        var stringValue2 : kermeta::standard::String   
        var boolValue1 : kermeta::standard::Boolean              
        var returnedboolvalue : kermeta::standard::Boolean
        intValue1 := 177
        intValue2 := 277
        intValue3 := 377
        stringLit := "s1"
        stringValue1 := stringLit
        stringValue2 := "s2"  
        boolValue1 := false      
        
        returnedboolvalue ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.call3Integers2Strings1BooleanParams(intValue1,intValue2,intValue3,stringValue1,stringValue2,boolValue1)
        
        assertTrueWithMsg(returnedboolvalue, "test3Integers2Strings1BooleanParams failed (1)")
        assertTrueWithMsg((intValue1 == 178), "test3Integers2Strings1BooleanParams failed (2)")
        assertTrueWithMsg(intValue2 == 278, "test3Integers2Strings1BooleanParams failed (3)")
        assertTrueWithMsg(intValue3 == 378, "test3Integers2Strings1BooleanParams failed (4)")
        assertTrueWithMsg(stringValue1.compareTo("s11")==0, "test3Integers2Strings1BooleanParams failed (5)")
        assertTrueWithMsg(stringValue2.compareTo("s21")==0, "test3Integers2Strings1BooleanParams failed (6)")
        assertTrueWithMsg(not boolValue1, "test3Integers2Strings1BooleanParams failed (7)") // boolean cannot be changed
        
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()        
    end    

	// tests passing variables to external call        
    operation testOneVarParam1() : Void is do
        var intValue1 : kermeta::standard::Integer
        var intValue2 : kermeta::standard::Integer
		intValue1 := 777
        intValue2 ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.callOneIntegerParam(intValue1)
        assertTrue(intValue1==778)
        assertTrue(intValue2==778)
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()        
    end
    
    
    // todo write call using variables on boolean and string

    // Tests passing parameters to the external call
    operation testOneParamParam1() : Void is do    
		OneParamParam1(777)
	end
	operation OneParamParam1(intValue1 : kermeta::standard::Integer) : Void is do
        var intValue2 : kermeta::standard::Integer
        intValue2 ?= extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.callOneIntegerParam(intValue1)
        assertTrue(intValue1==778)
        assertTrue(intValue2==778)
        extern fr::irisa::triskell::kermeta::interpreter::test::TestJavaCall.assertMethodWasCalled()        
    end
    // todo write call using complex types (set and collections)
    
}

