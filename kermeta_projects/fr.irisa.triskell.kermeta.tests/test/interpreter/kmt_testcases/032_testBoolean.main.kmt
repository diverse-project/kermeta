@testOperation "yes"
@mainClass "testBoolean::TestBoolean"
@mainOperation "main"

package testBoolean;
require kermeta

using kermeta::standard

// This class tests the logical operators and operations on Booleans
// also checks the priorities between operators
// "and" is prioritary to "or"
class TestBoolean inherits kermeta::kunit::TestCase 
{
	attribute boolean1 : Boolean
	attribute boolean2 : Boolean

	/** entry point when directly run (outside of daily test suites) */
	operation main() : Void is do
    	var tr : kermeta::kunit::TestRunner init kermeta::kunit::TestRunner.new
		tr.run(TestBoolean)
		tr.printTestResult
    end


	operation testBooleanUnreferencementAssignment() : Boolean is do
		boolean1 := false 			// Creation of a new Boolean
		boolean2 := boolean1	   // boolean2 has now the Boolean value of boolean1
		// The normal behaviour should be that boolean1 and boolean2 have the value false.
		// i.e. the assignement of boolean1 to boolean2 must not unreference boolean1 to void.
		assert(not boolean1.isVoid)
		assert(not boolean2.isVoid)
		result := void
	end


	operation testAssertTrue() is do
		
		assert(true)
		
	end

	// test true and true = true
	operation testoptat() : Void is do
		assert((true and true)==true)
	end
	
	operation testnott() : Void is do
		assert((not true)==false)
		assert((not false)==true)
	end
	

	
	// test true or true  = true
	operation testoptot() : Void is do
		assert((true or true)==true)
	end
	
	// true or false = true
	operation testoptof() : Void is do
		assert((true or false)==true)
	end
	
	// true and false = false
	operation testoptaf() : Void is do
		assert((true and false)==false)
	end
	
	// false or false
	operation testopfof() : Void is do
		assert ((false or false)==false)
	end
	
	// false or true
	operation testopfot() : Void is do 
		assert ((false or true)==true)
	end

	// test true or true and false == true or (true and false) == true
	operation testoportotaf() : Void is do
		assert((true or true and false)==false)
	end
	
	// test true or true and false == true or (true and false) == true
	operation testoptatof() : Void is do
		assert((true and true or false)==true)
	end
	
	// true and false and false
	operation testoptafaf() : Void is do
		assert((true and false and false)==false)
	end
	
	// true or false and false
	operation testoptofaf() : Void is do
		assert((true or false and false)==false)
	end
	
	// true or false and false or true or true == true
	operation testoptofafotot() : Void is do
		assert((true or false and false or true or true)==true)
	end
	
	// fiouf
	operation testoptofafototaf() : Void is do
		assert((true or false and false or true or true and false)==false)
	end
	
	// fiouf 2
	operation testoptofanf() : Void is do
		assert((true or false and not false)==true)
	end
	
	/** true implies true  = true*/
	operation testtit() : Void is do
		assert(true.implies(true) == true)
	end
	/** true implies false  = false*/
	operation testtif() : Void is do
		assert(true.implies(false) == false)
	end
	/** false implies true  = true*/
	operation testfit() : Void is do
		assert(false.implies(true) == true)
	end
	/** false implies false  = true*/
	operation testfif() : Void is do
		assert(false.implies(false) == true)
	end
	
	/** true xor true  = false*/
	operation testtxort() : Void is do
		assert(true.xor(true) == false)
	end
	/** true xor false  = true*/
	operation testtxorf() : Void is do
		assert(true.xor(false) == true)
	end
	/** false xor true  = true*/
	operation testfxort() : Void is do
		assert(false.xor(true) == true)
	end
	/** false xor false  = false*/
	operation testfxorf() : Void is do
		assert(false.xor(false) == false)
	end
	
	// ---- tests of short circuit version of and and or
	
	/** operation that should not be run */	
	operation mustNotRun(b : Boolean) : Boolean is do
		assert(false)
		result := b
	end
	
	operation mustRun(b : Boolean) : Boolean is do
		isMustRunCalled := true
		result := b
	end
	
	/** attribute used to check if the mustRun operation has been called */
	attribute isMustRunCalled : Boolean
	
	operation testTrueAndThenTrue() : Void is do
		isMustRunCalled := false
		assert(true.andThen{v | mustRun(true)  }== true)
		assert(isMustRunCalled)
	end
	operation testTrueAndThenFalse() : Void is do
		isMustRunCalled := false
		assert(true.andThen{v | mustRun(false) } == false)
		assert(isMustRunCalled)
	end
	operation testFalseAndThenTrue() : Void is do		
		assert(false.andThen{v | mustNotRun(true) } == false)		
	end
	operation testFalseAndThenFalse() : Void is do		
		assert(false.andThen{v | mustNotRun(false) } == false)		
	end
	
	operation testTrueOrElseTrue() : Void is do
		isMustRunCalled := false
		assert(true.orElse{v | mustNotRun(true)  }== true)
	end
	operation testTrueOrElseFalse() : Void is do
		isMustRunCalled := false
		assert(true.orElse{v | mustNotRun(false) } == true)
	end
	operation testFalseOrElseTrue() : Void is do	
		isMustRunCalled := false	
		assert(false.orElse{v | mustRun(true) } == true)	
		assert(isMustRunCalled)	
	end
	operation testFalseOrElseFalse() : Void is do	
		isMustRunCalled := false	
		assert(false.orElse{v | mustRun(false) } == false)	
		assert(isMustRunCalled)	
	end
	
	
	
}
