@testOperation "yes"
@mainClass "testSequence::TestSequence"
@mainOperation "testaddAt"

/*****************************************************************************
 * $Id: 039_testSequence.main.kmt,v 1.2 2008-01-02 10:28:13 vmahe Exp $
 * Project : Kermeta (First iteration)
 * Creation date :  
 * File : testSequence.kmt
 * 		
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * Creation date : Mar 14, 2005
 * Author : zdrey
 * Description : 
 *		test for Sequence
 *		each <operation> of OrderedSet and Collection is tested in a test[str]<operation>
 * Note : Done for a test/operation
 ***************************************************************************
 */

package testSequence;
require kermeta


using kermeta::standard
class TestSequence inherits kermeta::kunit::TestCase
{    

	attribute str_seq : kermeta::standard::Sequence<String>
	attribute int_seq : kermeta::standard::Sequence<Integer>

	method setUp() is do
		str_seq :=  kermeta::standard::Sequence<String>.new
		str_seq.add("un")
		str_seq.add("deux")
		int_seq :=kermeta::standard::Sequence<Integer>.new
		int_seq.add(21)
		int_seq.add(12)
	end
	

	operation teststradd() : Void is do
		str_seq := kermeta::standard::Sequence<String>.new
		str_seq.add("un")
		str_seq.add("deux")
		assert(str_seq.elementAt(0).equals("un"))
		assert(str_seq.elementAt(1).equals("deux"))
	end
	
	/**
	 * Remove an element from the collection
	 */
	operation teststrremove() : Void is do
		str_seq := kermeta::standard::Sequence<String>.new
		str_seq.add("un")
		str_seq.add("deux")
		str_seq.remove("un")
		assert(str_seq.size==1)
	end
	
	/**
	 * Remove all elements from the collection
	 */
	operation teststrclear() : Void is do
		str_seq := kermeta::standard::Sequence<String>.new
		str_seq.add("un")
		str_seq.add("deux")
		str_seq.clear()
		assert(str_seq.size==0)
	end
	
	/**
	 * Add all elements from the collection elements in the collection
	 */
	operation testaddAllSet() : Void is do
		var pcoll : kermeta::standard::Set<String>
		pcoll := kermeta::standard::Set<String>.new
		pcoll.add("un")
		pcoll.add("deux")
		pcoll.add("trois")
		str_seq := kermeta::standard::Sequence<String>.new
		str_seq.addAll(pcoll)
		assert(str_seq.elementAt(0).equals("un"))
		assert(str_seq.elementAt(1).equals("deux"))
		assert(str_seq.elementAt(2).equals("trois"))
	end
	

	operation testaddAllSequence() is do
		var pcoll : kermeta::standard::Sequence<String>
		pcoll := kermeta::standard::Sequence<String>.new
		pcoll.add("un")
		pcoll.add("deux")
		pcoll.add("trois")
		str_seq := kermeta::standard::Sequence<String>.new
		str_seq.addAll(pcoll)
		assert(str_seq.elementAt(0).equals("un"))
		assert(str_seq.elementAt(1).equals("deux"))
		assert(str_seq.elementAt(2).equals("trois"))
	end
	
	
	/**
	 * returns true if the collection contains element
	 */
	operation teststrcontains() is do
		setUp()
		assert(str_seq.contains("deux"))	
	end
	
	/**
	 * returns the number of elements in the collection
	 */
	operation teststrsize()  is do
		setUp()
		assert(str_seq.size == 2)
	end
	
	/**
	 * returns true if the collection is empty
	 */
	operation empty() is do
		str_seq := kermeta::standard::Sequence<String>.new
		assert(str_seq.empty==true)
		str_seq.add("bouh")
		assert(str_seq.empty==false)
		str_seq.clear()
		assert(str_seq.empty==true)
	end
	
	/**
	 * returns an iterator on the collection
	 */
	operation teststriterator() is do
		setUp()
		var it : Iterator<String>
		it := str_seq.iterator
		assert(it.hasNext==true)
		assert(it.next=="un")
	end
	
	/**
	 * returns an element from the collection or void
	 * if the collection is empty
	 */
	operation testone() : Void is do
		str_seq := kermeta::standard::Sequence<String>.new
		str_seq.add("one")
		assert(str_seq.one=="one")
	end
	
	/**
	 * runs func on each element of the collection
	 */
	operation teststreach() : Void is do
		setUp()
		str_seq.each { e | e.append("bip") }
		assert(str_seq.elementAt(0).equals("unbip"))
		assert(str_seq.elementAt(1).equals("deuxbip"))
	end
	
	operation testinteach() : Void is do
		setUp()
		var sum : Integer init 0
		int_seq.each { e | sum := sum + e }
		assert(sum == 33)
	end
	/**
	 * returns a new Collection with the results of running collector 
	 * once for every element in self.
	 */
	operation teststrcollect () is do
		setUp()

		var bool_seq : kermeta::standard::Sequence<Boolean>
		bool_seq := kermeta::standard::Sequence<Boolean>.new
		bool_seq := str_seq.collect { e | e.equals("un") }
		assert(bool_seq.elementAt(0)==true)
		assert(bool_seq.elementAt(1)==false)
	end
	
	/**
	 * Passes each element of the collection to detector. 
	 * Returns the first element for which detector is not false. 
	 * Returns void if no object matches.
	 */
	operation testdetect() is do
		setUp()
		str_seq.add("trois")
		str_seq.add("deux")
		var res : kermeta::standard::String
		res := str_seq.detect { e | 
			if e.size > 2 then
				e.substring(0,3).equals("deu") 
			else
				false
			end
		}
		assert(res.equals("deux"))
	end
	
	/**
	 * Passes each element of the collection to selector. 
	 * returns a Collection for all elements for which selector is true
	 */
	operation testselect()  is do
		setUp()
		str_seq.add("deux")
		var res_seq : kermeta::standard::Sequence<String>
		res_seq := str_seq.select { e | e.equals("deux") }
		assert(res_seq.size==2)
		assert(res_seq.elementAt(0) == "deux")
		assert(res_seq.elementAt(1) == "deux")		
	end
	
	/**
	 * Passes each element of the collection to rejector. 
	 * returns a Collection for all elements for which rejector is false
	 */
	operation testreject() is do
		setUp()
		str_seq.add("deux")
		var res_seq : kermeta::standard::Sequence<String>
		res_seq := str_seq.reject { e | e.equals("deux") }
		assert(res_seq.size==1)
		assert(res_seq.one == "un")
	end
	
	
	operation testForAll() : Void is do
		var res :  Boolean
		var sequence : kermeta::standard::Sequence<Integer>
		
		sequence := kermeta::standard::Sequence<Integer>.new
		sequence.add(5)
		sequence.add(6)
		sequence.add(32)
		sequence.add(23)
		
		res := sequence.forAll { e | e < 6}		
	 	assert(not res)
	 	
	 	res := sequence.forAll { e | e > 0}		
	 	assert(res)
	end
	
	operation testExists() : Void is do
		var res :  Boolean
		var sequence : kermeta::standard::Sequence<Integer>
		
		sequence := kermeta::standard::Sequence<Integer>.new
		sequence.add(5)
		sequence.add(6)
		sequence.add(32)
		sequence.add(23)
				
        res := sequence.exists { e | e == 6}		
	 	assert(res)
	 	res := sequence.exists { e | e < 6}		
	 	assert(res)
	 	
	 	res := sequence.exists { e | e < 0}		
	 	assert(not res)
	end

	

	/**
	 * adds element in the OrderedCollection at index
	 */
	operation testaddAt() : Void is do
		setUp()
		str_seq.addAt(1, "dix")
		assert(str_seq.elementAt(1).equals("dix"))
		assert(str_seq.elementAt(2).equals("deux"))
	end
	
	/**
	 * removes the element at index of the OrderedCollection
	 */
	operation testremoveAt() : Void is do
	
		setUp()
		str_seq.add("trois")
		str_seq.removeAt(1)
		assert(str_seq.size == 2)
		assert(str_seq.elementAt(0).equals("un"))
		assert(str_seq.elementAt(1).equals("trois"))
	end
	
	/**
	 * returns the element at index in the OrderedCollection
	 */
	operation testelementAt() is do
		setUp()
		assert(str_seq.elementAt(1).equals("deux"))
	end
	
	operation testfirst() is do
		setUp()
		assert(str_seq.first.equals("un"))
	end

	operation testlast() is do
		setUp()
		assert(str_seq.last.equals("deux"))
	end
	
	
}
