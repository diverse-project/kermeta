@mainClass "Object::Test"
@mainOperation "main"

package Object;

require kermeta

using kermeta::standard
using kermeta::utils
using kermeta::language::structure

abstract class Bidon<G> {
}

class SubBidon<G> inherits Bidon<G> {
}

class Riri {
}

class Fifi<G> inherits Riri {}

class Test inherits kermeta::kunit::TestCase {

	operation main() : Void is do
	end
	
	operation testCorrectIsKindOf() : Boolean is do
		var bid : SubBidon<Integer> init SubBidon<Integer>.new
		assert(bid.isKindOf(SubBidon<Integer>))
		result := bid.isKindOf(SubBidon<Integer>)
	end

	operation testIncorrectIsKindOf() : Boolean  is do
		var bid : SubBidon<Integer> init SubBidon<Integer>.new
		assert(not bid.isKindOf(SubBidon<String>))
		result := bid.isKindOf(SubBidon<String>)
	end

	operation testCorrectIsKindOf2() : Boolean  is do
		var bid : SubBidon<Riri> init SubBidon<Riri>.new
		assert(bid.isKindOf(SubBidon<Riri>))
		result := bid.isKindOf(SubBidon<Riri>)
	end

	operation testIncorrectIsKindOf2() : Boolean  is do
		var bid : SubBidon<Riri> init SubBidon<Riri>.new
		assert(not bid.isKindOf(SubBidon<Object>))
		result := not bid.isKindOf(SubBidon<Object>)
	end
	
	operation testCorrectIsKindOf3() : Boolean  is do
		var bid : SubBidon<Fifi<Integer>> init SubBidon<Fifi<Integer>>.new
		assert(bid.isKindOf(SubBidon<Fifi<Integer>>))
		result := bid.isKindOf(SubBidon<Fifi<Integer>>)
	end

	operation testIncorrectIsKindOf3() : Boolean  is do
		var bid : SubBidon<Fifi<Integer>> init SubBidon<Fifi<Integer>>.new
		assert(not bid.isKindOf(SubBidon<Fifi<String>>))
		result := not bid.isKindOf(SubBidon<Fifi<String>>)
	end
}