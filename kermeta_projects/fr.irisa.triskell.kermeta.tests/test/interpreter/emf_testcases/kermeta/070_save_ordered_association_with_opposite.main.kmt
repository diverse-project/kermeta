/* $Id: 070_save_ordered_association_with_opposite.main.kmt,v 1.2 2008-06-13 09:14:30 dvojtise Exp $ 
 * Creation : June 10, 2008
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            dvojtise
 * check that with an association with opposite that is ordered
 * then the save must be ordered too
 */
@mainClass "test::save_ordered_association_with_opposite::Main"
@mainOperation "main"


package test::save_ordered_association_with_opposite;


require kermeta
require "../metamodels/070_save_ordered_association_with_opposite.ecore"

using kermeta::standard
using kermeta::persistence
using kermeta::kunit



class Main inherits TestCase 
{
	operation main() : Void is do
		stdio.writeln("starting...")
    	var tr : TestRunner init TestRunner.new
		tr.run(Main)
		tr.printTestResult
    end
    
    operation test0() : Void is
    do	
    	var ifileName : String init "platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/070_InitialModel.xmi"
    	var ofileName : String init "platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/output/070_orderedmodel.xmi"
    	
    	var model : MetaModel::Model
    	
		model?=getModel(ifileName,
						MetaModel::Model)
		var item: MetaModel::Item 
		
		// add element in a specific order
		10.times{i |
			item := MetaModel::Item.new
			item.name:= i.toString
			model.items.add(item)
		}
					
		saveModel(ofileName ,model)	
		// check that the model is in the correct order
		// reload the saved file and find the added element
       	model := void
       	resource := void
       	item := void
       	repository := EMFRepository.new
       	model?=getModel(ofileName, MetaModel::Model)
       	model ?= resource.detect{ m | m.isInstanceOf(MetaModel::Model)}
       	assert(not model.isVoid)
       	assertTrueWithMsg(model.items.size == 10 , "model doesn't contains the expected 10 elements. It contains " + model.items.size.toString + " elements")
       	10.times{i |
			assertTrueWithMsg(model.items.elementAt(i).name.equals(i.toString),"Element at position " + i.toString + " isn't the correct one")
		}	
	end
		
	
	reference model : MetaModel::Model
	reference repository : EMFRepository  		 	
   	reference resource : Resource
   	/** ensures that we will not get the model that we have created in the first pass of the test
   	*/
   	operation clearPersistency() is do
   		repository := void
		resource := void
   	end
	operation getModel(src: kermeta::standard::String, type: kermeta::language::structure::Class): kermeta::standard::Object is do
		
		stdio.writeln("loading...")
		repository :=EMFRepository.new
		resource :=repository.createResource(src, "platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/metamodels/070_save_ordered_association_with_opposite.ecore")
//		resource :=repository.getResource(src)
       	resource.load()           
       
       from var it : kermeta::standard::Iterator<kermeta::standard::Object> init resource.instances.iterator
       until it.isOff
       loop
           var next : kermeta::standard::Object init it.next
           
           if (type.isInstance(next)) then                 
           		result := next
           				
           end
       end
		stdio.writeln("loading is finished")
	end
	operation saveModel(src: kermeta::standard::String, model : kermeta::standard::Object) is do
		    
        	
			stdio.writeln("saving...")
	 		resource.instances.add(model)
	 		 	
	 		resource.saveWithNewURI(src)
			stdio.writeln("saving is finished")
	 end
}