@mainClass "copy_and_reload_km_model::Main" 
@mainOperation "main"

package copy_and_reload_km_model;

require kermeta

using kermeta::utils
using kermeta::persistence
using kermeta::exceptions
using kermeta::kunit

class Main inherits TestCase 
{

    operation main() : Void is do
    	var tr : TestRunner init TestRunner.new
		tr.run(Main)
		tr.printTestResult
    end

    operation test0() : Void is
    do 
   		var repository_load : EMFRepository init EMFRepository.new
    	var resource_load : Resource init repository_load.createResource("platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/069_km_model_to_copy.km", "platform:/plugin/fr.irisa.triskell.kermeta/lib/kermeta_java.ecore")
 
  		do
			resource_load.load()
			//repository_load.resources.each{r | stdio.writeln(r.uri)}
			stdio.writeln("load OK")
			rescue (e1 : ResourceLoadException)
			do
				stdio.writeln(e1.toString)
        		stdio.writeln(e1.message)
        		fail( "Not able to load original from platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/069_km_model_to_copy.km " + e1.message)
        	end
		end
		
		var mypackage : kermeta::language::structure::Package
	 	var mymodelunit : kermeta::language::structure::ModelingUnit	 	
	 	mymodelunit ?= resource_load.instances.one	 			
											 				
		var repository_save : EMFRepository init EMFRepository.new    
        var resource_save : Resource init repository_save.createResource("platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/out/069_km_model_to_copy_copied.km", "platform:/plugin/fr.irisa.triskell.kermeta/lib/kermeta_java.ecore")
	 	resource_save.instances.add(mymodelunit)
	 	// must add the dependent resources to the repository
	 	repository_load.resources.select{r| r != resource_load}.each{r2 | repository_save.resources.add(r2)}
	 	do
	 		
	 		// var report : kermeta::standard::Set<DanglingDiagnostic>
     		// report := resource_save.findDanglingModelElements()
     		// report.each{ diag | stdio.writeln(diag.toString ) }
		 	resource_save.save()
		 	stdio.writeln("save OK")
		 	rescue (e2 : ResourceSaveException)
		 	do
				stdio.writeln(e2.toString)
        		stdio.writeln(e2.message)
        		fail( "Not able to save a copy to platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/out/069_km_model_to_copy_copied.km " + e2.message)
        	end
	 	end
	 	
	 	
	 	
	 	var repository_load2 : EMFRepository init EMFRepository.new     
    	// var resource_load2 : Resource init repository_load2.createResource("platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/out/069_km_model_to_copy_copied.km", "platform:/plugin/fr.irisa.triskell.kermeta/lib/kermeta_java.ecore")
    	var resource_load2 : Resource init repository_load2.createResource("platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/out/069_km_model_to_copy_copied.km", "")
    	do
			resource_load2.load()
			stdio.writeln("load2 OK")
			rescue (e3 : ResourceLoadException)
			do
				stdio.writeln(e3.toString)
        		stdio.writeln(e3.message)
        		fail( "not able to reload copy from platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/out/069_km_model_to_copy_copied.km " + e3.message)
        	end
		end
    end   
}