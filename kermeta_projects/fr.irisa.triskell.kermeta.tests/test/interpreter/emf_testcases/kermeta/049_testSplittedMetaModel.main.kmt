@mainClass "testSplittedMetamodel::Main"
@mainOperation "testmain"

/** test that we can load file that reference themselves (Ie, split into several files
 * and without having to use the kermeta nothion of resourceset*/
package testSplittedMetamodel;


require kermeta
require "../metamodels/049_simple_splittedMM1.ecore"
using kermeta::persistence
using kermeta::standard

class Main inherits kermeta::kunit::TestCase
{
    operation testmain() : Void is do 
        var inputModel : Set<P1::C1> init loadClassModel
        

        
        
        //check that we have correctly loaded each of the 3 model elements
        var c1 : P1::C1 
 		c1 := inputModel.one
		assertTrueWithMsg(c1 !=  void, "didn't find c1")
        var c2 : P2::C2 
		c2 := c1.aC2
		assertTrueWithMsg(c2 !=  void, "didn't find c2")
        var c3 : P3::C3 
		c3 := c2.aC3
		assertTrueWithMsg(c3 !=  void, "didn't find c3")
        stdio.write("End of simple splitted MM1\n")
        
      
    end
    
    
    operation loadClassModel() : Set<P1::C1> is do             
   		var repository : EMFRepository init EMFRepository.new             
   		var resource : Resource init repository.createResource(
   			"platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/049_simplemodel_C1.xmi",
   			"platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/metamodels/049_simple_splittedMM1.ecore")
   		resource.load()      
   		/*var resource : Resource 
		resource := repository.getResource(	"platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/049_simplemodel_C1.xmi")
       */
       	result := Set<P1::C1>.new
       	from var it : Iterator<Object> init resource.instances.iterator
       	until it.isOff
       	loop
           var next : Object init it.next
           if (P1::C1.isInstance(next)) then 
           		var aC1 : P1::C1 
           		aC1 ?= next
           		//stdio.writeln(aPackage.name)
           		result.add(aC1)
           end
       	end
   end   
}