/* $Id: 055_MT_FSM_fsmLoaders.kmt,v 1.3 2008-01-07 16:40:06 dvojtise Exp $
 * Creation date: November 13, 2006
 * License:
 * Copyright:
 * Authors:
 */


package fsm;

require kermeta
require "055_MT_FSM_basic_fsm_type.kmt"
require "055_MT_FSM_composite_fsm_type.kmt"
require "055_MT_FSM_finalstates_fsm_type.kmt"

//require "055_MT_FSM_fsm.kmt"

using kermeta::standard
using kermeta::persistence

class BasicFSMLoader
{
	operation loadFromFile(fileName : String) : basic_fsm_mt is
	do
		var res : EMFRepository init EMFRepository.new
        var resource : Resource init res.createResource(fileName, "platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/metamodels/055_MT_FSM_basic_fsm_type.ecore")
        
        stdio.writeln("BasicFSMLoader : before loading " +fileName)
        // loading
        resource.load()
       	stdio.writeln("after loading (" + resource.contents.size.toString + " instances in the resource)")
       	result := GenericFSMLoader<basic_fsm_mt>.new.resourceToModel(resource)
	end
}

/** use the really generic function : addAllCompatible */
class GenericBasicFSMLoader
{
	operation loadFromFile(fileName : String) : basic_fsm_mt is
	do
		var res : EMFRepository init EMFRepository.new
        var resource : Resource init res.createResource(fileName, "platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/metamodels/055_MT_FSM_basic_fsm_type.ecore")
        
        stdio.writeln("GenericBasicFSMLoader : before loading " +fileName)
        // loading
        resource.load()
       	stdio.writeln("after loading (" + resource.contents.size.toString + " instances in the resource)")
       	result := basic_fsm_mt.new
       	stdio.writeln(resource.contents.size.toString + " instances in the resource")
       	result.addAllCompatible(resource.contents)
	end
}

class GenericModelLoader<MT : kermeta::language::structure::Model> {
	operation loadFromFile(fileName : String) : MT is
	do
		var res : EMFRepository init EMFRepository.new
        var resource : Resource init res.createResource(fileName, "platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/metamodels/055_MT_FSM_basic_fsm_type.ecore")
        
        stdio.writeln("GenericModelLoader : before loading " +fileName)
        // loading
        resource.load()
       	stdio.writeln("after loading (" + resource.contents.size.toString + " instances in the resource)")
       	result := MT.new
       	result.addAllCompatible(resource.contents)
	end

}

class FinalStateFSMLoader {
	operation loadFromFile(fileName : String) : finalstates_fsm_mt is
	do
		var res : EMFRepository init EMFRepository.new
        var resource : Resource init res.createResource(fileName, "platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/metamodels/055_MT_FSM_finalstates_fsm_type.ecore")
        
        stdio.writeln("FinalStateFSMLoader : before loading " +fileName)
        // loading
        resource.load()
       	stdio.writeln("after loading (" + resource.contents.size.toString + " instances in the resource)")
       	result := GenericFSMLoader<finalstates_fsm_mt>.new.resourceToModel(resource)
	end
}


class GenericFSMLoader<MT : basic_fsm_mt> {
	operation resourceToModel(resource : Resource) : MT is
	do
        var newModel : MT init MT.new
        resource.instances.select {o | MT::FSM.isInstance(o) }.each { f |
        	var fsm : MT::FSM
        	fsm ?= f
        	newModel.add(fsm)
        	fsm.ownedState.each{s | newModel.add(s) }
        	fsm.ownedTransition.each{t | newModel.add(t) }
        }
        resource.instances.select{o | MT::State.isInstance(o) }.each { s |
        	var state : MT::State
        	state ?= s
        	newModel.add(state)
        }
        resource.instances.select{o | MT::Transition.isInstance(o) }.each { t |
        	var transition : MT::Transition
        	transition ?= t
        	newModel.add(transition)
        }
 		result := newModel
	end

}

class CompositeFSMLoader
{
	operation loadFromFile(fileName : String) : composite_fsm_mt is
	do
		var res : EMFRepository init EMFRepository.new
        var resource : Resource init res.createResource(fileName, "platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/metamodels/055_MT_FSM_composite_fsm_type.ecore")
        
        stdio.writeln("before loading " +fileName)
        // loading
        resource.load()
       	stdio.writeln("after loading (" + resource.contents.size.toString + " instances in the resource)")
        var newModel : composite_fsm_mt init composite_fsm_mt.new
        resource.instances.select {o | composite_fsm::FSM.isInstance(o) }.each { f |
        	var fsm : composite_fsm::FSM
        	fsm ?= f
			addFSM(newModel, fsm)
        }
        resource.instances.select{o | composite_fsm::State.isInstance(o) }.each { s |
        	var state : composite_fsm::State
        	state ?= s
        	newModel.add(state)
        }
        resource.instances.select{o | composite_fsm::Transition.isInstance(o) }.each { t |
        	var transition : composite_fsm::Transition
        	transition ?= t
        	newModel.add(transition)
        }
        result := newModel

	end

	operation addFSM(model : composite_fsm_mt, fsm : composite_fsm::FSM) is
	do
		model.add(fsm)
		fsm.ownedTransition.each{ t | model.add(t) }
		fsm.ownedState.each { s |
			if composite_fsm::FSM.isInstance(s) then
				var f : composite_fsm::FSM
				f ?= s
				addFSM(model,f)
			else
				model.add(s)
			end
		}
	end

}