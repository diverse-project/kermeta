/* $Id: 027_testRuntimeModelImport.main.kmt,v 1.3 2008-06-16 15:18:33 dvojtise Exp $
 *
 */
@mainClass "RuntimeModelImportTests::Main"
@mainOperation "testmain"


package RuntimeModelImportTests;


require kermeta
//require "file:///udd/zdrey/Workspaces/KM32Workspace/fr.irisa.triskell.kermeta.interpreter/test/emf_testcases/instances/ecore.kmt"
using kermeta::language::structure
using kermeta::language::behavior
using kermeta::standard

/**
 * Test loading a km model
 * note: sometime it may raise error when the framework was changed, this is due to the adress shift of element in the xmi 
 *  in this case, regenerate the km from the kmt using the latest framework.km
 */
class Main inherits kermeta::kunit::TestCase
{
    operation testmain() : Void is do 
     	var inputModel : Set<Package> init loadClassModel
     	
        

      	// do some verification in the loaded data
        
        stdio.writeln("\nBegin")

        //inputModel.each{ p | transfo.accept(p,0) }
       inputModel.each{ p | stdio.writeln(p.name ) }
       // find a package named "kmLogo"
       var kmlogopackage : Package init inputModel.detect{ p | (p.name.compareTo("kmLogo") == 0) }
       assert( kmlogopackage.name.compareTo("kmLogo") == 0)
       // find a package named "actions"       
       var actionpackage : Package 
       actionpackage := kmlogopackage.nestedPackage.detect{ p | (p.name.compareTo("actions") == 0) }       
       assert( actionpackage.name.compareTo("actions") == 0)
       // find a class named "Interpreter"
       var classTypeDef : TypeDefinition 
	   classTypeDef := actionpackage.ownedTypeDefinition.detect{ c | (c.name.compareTo("Interpreter") == 0) }
       var classClassTypeDef : ClassDefinition 
       classClassTypeDef ?= classTypeDef
       assert (classClassTypeDef.name.compareTo("Interpreter") == 0  )       
       // its parent must be "AbstractVisitor"
       var superClassType : Class 
       superClassType ?= classClassTypeDef.superType.one
       assert(superClassType.typeDefinition.name.compareTo("AbstractVisitor") == 0)
       
       // one of its feature must be "accumulator" of type "Integer"
       var accFProp : Property 
       accFProp := classClassTypeDef.ownedAttribute.detect{ k | k.name.compareTo("accumulator") == 0 }
       assertTrueWithMsg(not accFProp.isVoid,"didn't find accumulator feature in the loaded file")       
       var propClassType : Class
       propClassType ?= accFProp.type
       assertTrueWithMsg(propClassType.typeDefinition.name.compareTo("Integer") == 0,"didn't find accumulator feature of type Integer in the loaded file; was of type " + propClassType.typeDefinition.name + " " + propClassType.typeDefinition.toString)
       stdio.write(propClassType.typeDefinition.toString)
       stdio.write("\nEnd")       
        
       
     
    end
    
    operation loadClassModel() : Set<Package> is do             
   		var repository : kermeta::persistence::EMFRepository init kermeta::persistence::EMFRepository.new 
   		            
   		var resource2 : kermeta::persistence::Resource init repository.createResource(
   		"platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/instances/kmLogo.km", 
   		"platform:/resource/fr.irisa.triskell.kermeta/lib/kermeta_java.ecore")     
   		
 	   resource2.load() 
 	   var mu : ModelingUnit
 	   mu ?= resource2.instances.one
 	   
 	   result := mu.packages
       
   end
    
}