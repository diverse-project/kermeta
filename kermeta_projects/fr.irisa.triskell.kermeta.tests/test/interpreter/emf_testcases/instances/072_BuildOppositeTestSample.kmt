/* $Id: OppositeTestSample.kmt,v 1.2 2009-02-11 15:51:36 vmahe Exp $ 
 * Creation : January 14, 2009
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            vmahe
 */
@mainClass "oppositetestmm::Main"
@mainOperation "main"


package oppositetestmm;


require kermeta
require "../metamodels/072_OppositeTestMM.ecore"

using oppositetestmm

class Main
{
	reference output : kermeta::persistence::EMFResource
	
	operation main() : Void is do
		stdio.writeln("Creating resource...")
		
		var metamodelURI : kermeta::standard::String
			init "platform:/resource/fr.irisa.triskell.kermeta.tests/test/interpreter/emf_testcases/metamodels/072_OppositeTestMM.ecore"
		var repository : kermeta::persistence::EMFRepository
				init kermeta::persistence::EMFRepository.new
		repository.registerEcoreFile(metamodelURI)
    	output ?= repository.createResource("072_OppositeTestSample.xmi", metamodelURI)
		
		stdio.writeln("Initializing...")
		
		initialize()
		
		stdio.writeln("Creating test model...")
		
		createModel()
		
		stdio.writeln("Saving resource...")
		
		output.save()
		
		stdio.writeln("... Done")
	end
	
	operation initialize() is do
	end
	
	operation createModel() : Void is do
		
		// ---------------------- single2single -----------------------
		var ss1 : Single2SingleSrc init Single2SingleSrc.new
		var ss2 : Single2SingleDest init Single2SingleDest.new
		ss1.dest := ss2
		output.add(ss1)
		output.add(ss2)
		
		// --------------------- single2bag -----------------------	
		var sb1 : Single2BagSrc init Single2BagSrc.new
		var sb2 : Single2BagDest init Single2BagDest.new
		var sb3 : Single2BagDest init Single2BagDest.new
		sb1.destBag.add(sb2)
		sb1.destBag.add(sb3)
		sb1.destBag.add(sb3)		// add sb3 twice in order to test bag
		output.add(sb1)
		output.add(sb2)
		output.add(sb3)	
		
		// --------------------- bag2single -----------------------
		var bs1 : Bag2SingleSrc init Bag2SingleSrc.new
		var bs2 : Bag2SingleDest init Bag2SingleDest.new
		bs1.dest := bs2
		output.add(bs1)
		output.add(bs2)
		
		// --------------------- bag2bag -----------------------
		var bb1 : Bag2BagSrc init Bag2BagSrc.new
		var bb2 : Bag2BagDest init Bag2BagDest.new
		var bb3 : Bag2BagDest init Bag2BagDest.new
		bb3.name := "AddedTwice"
		bb1.destBag.add(bb2)
		bb1.destBag.add(bb3)
		bb1.destBag.add(bb3)		// add bb2 twice in order to test bag
		output.add(bb1)
		output.add(bb2)
		output.add(bb3)
		
		// --------------------- single2set -----------------------
		var sse1 : Single2SetSrc init Single2SetSrc.new
		var sse2 : Single2SetDest init Single2SetDest.new
		var sse3 : Single2SetDest init Single2SetDest.new
		sse1.destSet.add(sse2)
		sse1.destSet.add(sse3)
		sse1.destSet.add(sse3)		// add sb3 twice in order to test bag
		output.add(sse1)
		output.add(sse2)
		output.add(sse3)
		
		// --------------------- set2single -----------------------
		var ses1 : Set2SingleSrc init Set2SingleSrc.new
		var ses2 : Set2SingleDest init Set2SingleDest.new
		ses1.dest := ses2
		output.add(ses1)
		output.add(ses2)
		
		// --------------------- set2set -----------------------
		var sese1 : Set2SetSrc init Set2SetSrc.new
		var sese2 : Set2SetDest init Set2SetDest.new
		var sese3 : Set2SetDest init Set2SetDest.new
		sese1.destSet.add(sese2)
		sese1.destSet.add(sese3)
		output.add(sese1)
		output.add(sese2)
		output.add(sese3)
		
		// --------------------- bag2set -----------------------
		var bse1 : Bag2SetSrc init Bag2SetSrc.new
		var bse2 : Bag2SetDest init Bag2SetDest.new
		var bse3 : Bag2SetDest init Bag2SetDest.new
		bse1.destSet.add(bse2)
		bse1.destSet.add(bse3)
		output.add(bse1)
		output.add(bse2)
		output.add(bse3)
		
		// --------------------- set2bag -----------------------
		var seb1 : Set2BagSrc init Set2BagSrc.new
		var seb2 : Set2BagDest init Set2BagDest.new
		var seb3 : Set2BagDest init Set2BagDest.new
		seb1.destBag.add(seb2)
		seb1.destBag.add(seb3)
		seb1.destBag.add(seb3)		// add bb2 twice in order to test bag
		output.add(seb1)
		output.add(seb2)
		output.add(seb3)
	end
		
}