<?xml version="1.0" encoding="ASCII"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="kermeta" nsURI="platform:/resource/TestRDL/framework.ecore" nsPrefix="kermeta">
  <eAnnotations source="kermeta">
    <details key="documentation" value="/** The root package. See the other packages if you want to browse the classes of Kermeta api. */"/>
  </eAnnotations>
  <eSubpackages name="standard" nsURI="platform:/resource/TestRDL/framework.ecore#//standard" nsPrefix="standard">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * $Id$&#xD;&#xA; * Contains types dedicated to dealing with java objects&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="Void">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The class Void &#xD;&#xA; * By convention it is a sub-type of everything&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="isVoid" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/isVoid">
          <details key="body" value="do&#xA;&#x9;result := true&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta" references="//reflection/Object/toString">
          <details key="body" value="do&#xA;&#x9;result := &quot;&lt;void>&quot;&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" abstract="true">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The PrimitiveType redefine isSameAs operation from Object class to use in an easier way&#xD;&#xA; * primitive types. Comparing two primitive types value can be written as x == y&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="isSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/isSameAs">
          <details key="body" value="do&#xA;&#x9;result := self.equals(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isNotSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/isNotSameAs">
          <details key="body" value="do&#xA;&#x9;result := self.isNotEqual(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ValueType" abstract="true" eSuperTypes="//standard/PrimitiveType">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The abstract class ValueType does not contain any feature&#xD;&#xA; * but any instance of a sub-class of ValueType will be passed by value &#xD;&#xA; * instead of by reference for any other objects.&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Comparable" abstract="true">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The abstract class Comparable defines a set of operation&#xD;&#xA; * to compare instances of a class.&#xD;&#xA; * Sub-classes only has to implement abstract operation compareTo.&#xD;&#xA; * All other methods are defined w.r.t. the compareTo operation&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="compareTo" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Comparaison&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isGreater" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.compareTo(other).isGreater(0)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * return true if self > other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isLower" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.compareTo(other).isLower(0)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * return true if self &lt; other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isLowerOrEqual" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.compareTo(other).isLowerOrEqual(0)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * return true if self &lt;= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isGreaterOrEqual" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.compareTo(other).isGreaterOrEqual(0)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * return true if self >= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NotComparableException" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="Boolean" eSuperTypes="//standard/PrimitiveType">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The Boolean type&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="isSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isNotSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isNotSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/equals">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotSameAs(kermeta::standard::Boolean) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="and" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~and(self, other)&#xA;end"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="not" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~not(self)&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="or" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~or(self, other)&#xA;end"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="implies" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.~and(other).~not.~and(self).~not&#xA;end"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="xor" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.~and(other.~not).~or(self.~not.~and(other))&#xA;end"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="nand" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.~and(other).~not&#xA;end"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta" references="//reflection/Object/toString">
          <details key="body" value="do&#xA;&#x9;result := if self then&#xA;&#x9;&#x9;&quot;true&quot;&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;&quot;false&quot;&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Numeric" abstract="true" eSuperTypes="//standard/Comparable //standard/ValueType">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The abstract class Numeric is the root class for all&#xD;&#xA; * numeric types&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="_KermetaSpecialTypesAlias_" instanceClassName="java.lang.Object"/>
    <eClassifiers xsi:type="ecore:EClass" name="Integer" eSuperTypes="//standard/Numeric">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The class Integer&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="isSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isNotSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isNotSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="times">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;from var i : kermeta::standard::Integer init 0&#xA;&#x9;until i.isSameAs(self)&#xA;&#x9;loop&#xA;&#x9;&#x9;body(i)&#xA;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Iteration&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="body" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.functionType">
            <details key="0" value="kermeta::standard::Integer"/>
            <details key="1" value="alias Object : kermeta::language::structure::Object;"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="compareTo" eType="//standard/Integer">
        <eAnnotations source="kermeta" references="//standard/Comparable/compareTo">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotSameAs(kermeta::standard::Integer) then&#xA;&#x9;&#x9;raise kermeta::standard::NotComparableException.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/equals">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotSameAs(kermeta::standard::Integer) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="plus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.plus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns self + other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="minus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.minus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns self - other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="mult" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.times(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns self * other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="div" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#xA;&#x9;end&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.div(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns self / other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="mod" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.mod(self, other)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns self modulo other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="uminus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := 0.minus(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns -self&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toReal" eType="//standard/Real">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toReal(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Convert self as a Real&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isGreater" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/Comparable/isGreater">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotSameAs(kermeta::standard::Integer) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreater(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isLower" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/Comparable/isLower">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotSameAs(kermeta::standard::Integer) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLower(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isLowerOrEqual" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/Comparable/isLowerOrEqual">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotSameAs(kermeta::standard::Integer) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLowerOrEqual(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isGreaterOrEqual" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/Comparable/isGreaterOrEqual">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotSameAs(kermeta::standard::Integer) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreaterOrEqual(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta" references="//reflection/Object/toString">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toString(self)&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Real" eSuperTypes="//standard/Numeric">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * class Real&#xD;&#xA; */"/>
        <details key="isSemanticallyAbstract" value="compareTo"/>
      </eAnnotations>
      <eOperations name="isSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isNotSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isNotSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="plus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.plus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns self + other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Numeric"/>
      </eOperations>
      <eOperations name="minus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.minus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns self - other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Numeric"/>
      </eOperations>
      <eOperations name="mult" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.times(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns self * other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Numeric"/>
      </eOperations>
      <eOperations name="div" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.div(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns self / other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Numeric"/>
      </eOperations>
      <eOperations name="toInteger" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toInteger(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Convert self as a Real&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="uminus" eType="//standard/Numeric">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := 0.toReal.minus(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns -self&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta" references="//reflection/Object/toString">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toString(self)&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Character" eSuperTypes="//standard/ValueType //standard/Comparable">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The class Character&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="isSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isNotSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isNotSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="compareTo" eType="//standard/Integer">
        <eAnnotations source="kermeta" references="//standard/Comparable/compareTo">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/equals">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotSameAs(kermeta::standard::Character) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta" references="//reflection/Object/toString">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.toString(self)&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="String" eSuperTypes="//standard/ValueType //standard/Comparable">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The class String&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="isSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isNotSameAs" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/PrimitiveType/isNotSameAs">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::PrimitiveType"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="compareTo" eType="//standard/Integer">
        <eAnnotations source="kermeta" references="//standard/Comparable/compareTo">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.compareTo(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/equals">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotSameAs(kermeta::standard::String) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.equals(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="plus" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.plus(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns a new string self + other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/String"/>
      </eOperations>
      <eOperations name="append">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::String.append(self, other)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Appends other at the end of self&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/String"/>
      </eOperations>
      <eOperations name="elementAt" eType="//standard/Character">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(size.minus(1))) then&#xA;&#x9;&#x9;raise kermeta::exceptions::StringIndexOutOfBound.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.elementAt(self, index)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns the character at index in the String&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="indexOf" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.indexOf(self, str)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns the index within this string of the first &#xD;&#xA;  * occurrence of the specified substring&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="str" eType="//standard/String"/>
      </eOperations>
      <eOperations name="substring" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if startIndex.isGreaterOrEqual(0).~and(startIndex.isLowerOrEqual(size)).~and(endIndex.isLowerOrEqual(size)).~and(endIndex.isGreaterOrEqual(startIndex)) then&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.substring(self, startIndex, endIndex)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;raise kermeta::exceptions::StringIndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns a new string that is a substring of this string&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="startIndex" eType="//standard/Integer"/>
        <eParameters name="endIndex" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="size" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.size(self)&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta" references="//reflection/Object/toString">
          <details key="body" value="do&#xA;&#x9;result := self&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="replace" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.replace(self, str1, str2)&#xA;end"/>
        </eAnnotations>
        <eParameters name="str1" eType="//standard/String"/>
        <eParameters name="str2" eType="//standard/String"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Integer">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Unlimited natural is used for reflection.&#xD;&#xA; * It is mapped to integer.equals().&#xD;&#xA; * Any negative number is interpreted as '*'&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="Object" instanceClassName="java.lang.Object">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Collection" abstract="true">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Collection is the root abstract class for all kermeta collections&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.add(self, element)&#xA;end"/>
          <details key="documentation" value="/** Add an element to this collection and update its opposite property if it exists. */"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="remove">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var elem : G init self.detect{e | e.isSameAs(element)}&#xA;&#x9;if elem.isNotSameAs(void) then&#xA;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Remove an element from the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="clear">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.clear(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Remove all elements from the collection&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="addAll">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;elements.each{element | add(element)}&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Add all elements from the collection elements in the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Collection">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="contains" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := false&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff.~or(result)&#xA;&#x9;loop&#xA;&#x9;&#x9;result := it.next.isSameAs(element)&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns true if the collection contains element&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="containsAll" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := true&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init elements.iterator&#xA;&#x9;until it.isOff.~or(result.~not)&#xA;&#x9;loop&#xA;&#x9;&#x9;result := self.contains(it.next)&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns true if the collection contains all elements&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Collection">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="excludes" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.contains(element).~not&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Returns true if the collection does not contain element&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="excludesAll" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := true&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init elements.iterator&#xA;&#x9;until it.isOff.~or(result.~not)&#xA;&#x9;loop&#xA;&#x9;&#x9;result := self.contains(it.next).~not&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Returns true if the collection contains none of elements&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Collection">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="size" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.size(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns the number of elements in the collection&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="empty" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := size.isSameAs(0)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns true if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="iterator" eType="//standard/Iterator">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.iterator(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns an iterator on the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="one" eType="//standard/_KermetaSpecialTypesAlias_">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if size.isSameAs(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#xA;&#x9;end&#xA;&#x9;var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;result := it.next&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns an element from the collection or void&#xD;&#xA;  * if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariable">
          <details key="G" value="G"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="each">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;func(it.next)&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * runs func on each element of the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="func" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.functionType">
            <details key="0" value="G"/>
            <details key="1" value="alias Object : kermeta::language::structure::Object;"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="forAll" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var test : kermeta::standard::Boolean init true&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;test := test.~and(func(it.next))&#xA;&#x9;end&#xA;&#x9;result := test&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * checks that the condition is true on all the element of the collection&#xD;&#xA;  * returns true if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="func" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.functionType">
            <details key="0" value="G"/>
            <details key="1" value="kermeta::standard::Boolean"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="exists" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var test : kermeta::standard::Boolean init false&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff.~or(test.isNotSameAs(false))&#xA;&#x9;loop&#xA;&#x9;&#x9;test := test.~or(func(it.next))&#xA;&#x9;end&#xA;&#x9;result := test&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * checks that the condition is true for at least one element of the collection&#xD;&#xA;  * returns false if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="func" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.functionType">
            <details key="0" value="G"/>
            <details key="1" value="kermeta::standard::Boolean"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="collect" eType="//standard/Sequence">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Sequence&lt;T>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;result.add(collector(it.next))&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns a new Collection with the results of running collector &#xD;&#xA;  * once for every element in self.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="T"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeParameters">
          <details key="T" value="T"/>
        </eAnnotations>
        <eParameters name="collector" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.functionType">
            <details key="0" value="G"/>
            <details key="1" value="T"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="detect" eType="//standard/_KermetaSpecialTypesAlias_">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var elem : G&#xA;&#x9;result := void&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff.~or(result.isNotSameAs(void))&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if detector(elem) then&#xA;&#x9;&#x9;&#x9;result := elem&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Passes each element of the collection to detector. &#xD;&#xA;  * Returns the first element for which detector is not false. &#xD;&#xA;  * Returns void if no object matches.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariable">
          <details key="G" value="G"/>
        </eAnnotations>
        <eParameters name="detector" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.functionType">
            <details key="0" value="G"/>
            <details key="1" value="kermeta::standard::Boolean"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="select" eType="//standard/Sequence">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var elem : G&#xA;&#x9;result := kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if selector(elem) then&#xA;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Passes each element of the collection to selector. &#xD;&#xA;  * returns a Collection for all elements for which selector is true&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="selector" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.functionType">
            <details key="0" value="G"/>
            <details key="1" value="kermeta::standard::Boolean"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="reject" eType="//standard/Sequence">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.~select{elem | rejector(elem).~not}&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Passes each element of the collection to rejector. &#xD;&#xA;  * returns a Collection for all elements for which rejector is false&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="rejector" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.functionType">
            <details key="0" value="G"/>
            <details key="1" value="kermeta::standard::Boolean"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="count" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.~select{e | e.isSameAs(element)}.size&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Returns the nb of instances of 'element' in the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Set" eSuperTypes="//standard/Collection">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * A Set is a collection that contains distinct elements&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="kermeta::standard::Collection&lt;G>" value="kermeta::standard::Collection&lt;G>"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add">
        <eAnnotations source="kermeta" references="//standard/Collection/add">
          <details key="body" value="do&#xA;&#x9;if self.contains(element).~not then&#xA;&#x9;&#x9;super(element)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Collection"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/equals">
          <details key="body" value="do&#xA;&#x9;var isEqual : kermeta::standard::Boolean init false&#xA;&#x9;var collection : kermeta::standard::Collection&lt;G>&#xA;&#x9;collection ?= element&#xA;&#x9;if self.size.isSameAs(collection.size) then&#xA;&#x9;&#x9;var temp : kermeta::standard::Set&lt;G> init kermeta::standard::Set&lt;G>.new&#xA;&#x9;&#x9;temp.addAll(collection)&#xA;&#x9;&#x9;temp.addAll(self)&#xA;&#x9;&#x9;if temp.size.isSameAs(self.size) then&#xA;&#x9;&#x9;&#x9;isEqual := true&#xA;&#xA;&#x9;&#x9;end&#xA;&#xA;&#x9;end&#xA;&#x9;result := isEqual&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="union" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;G>.new&#xA;&#x9;result.addAll(self)&#xA;&#x9;result.addAll(elements)&#xA;end"/>
          <details key="documentation" value="/** returns the union of a set of elements  and the Set */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Set">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="unionWithBag" eType="//standard/Bag">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;G>.new&#xA;&#x9;result := addAll(self)&#xA;&#x9;result := addAll(elements)&#xA;end"/>
          <details key="documentation" value="/** returns the union of a bag of elements and the Set */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Bag">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="intersection" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;G>.new&#xA;&#x9;var elem : G&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if elements.contains(elem) then&#xA;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/** returns the intersection of elements and the Set */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Collection">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="minus" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;G>.new&#xA;&#x9;var elem : G&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if elements.contains(elem).~not then&#xA;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/** returns the difference of elements and the Set: the elements of the Set &#xD;&#xA;  *  that are not in elements&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Set">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Bag" eSuperTypes="//standard/Collection">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * A Bag is a concrete implementation of a Collection&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="kermeta::standard::Collection&lt;G>" value="kermeta::standard::Collection&lt;G>"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="asSet" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var s : kermeta::standard::Set&lt;G> init kermeta::standard::Set&lt;G>.new&#xA;&#x9;s.addAll(self)&#xA;&#x9;result := s&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/equals">
          <details key="body" value="do&#xA;&#x9;var collection : kermeta::standard::Bag&lt;G>&#xA;&#x9;collection ?= element&#xA;&#x9;var selfAsSet : kermeta::standard::Set&lt;G> init self.asSet&#xA;&#x9;result := selfAsSet.equals(collection.asSet)&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="union" eType="//standard/Bag">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;G>.new&#xA;&#x9;result := addAll(self)&#xA;&#x9;result := addAll(elements)&#xA;end"/>
          <details key="documentation" value="/** returns the union of elements and the Bag */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Collection">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="intersection" eType="//standard/Bag">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;G>.new&#xA;&#x9;var elem : G&#xA;&#x9;var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;from it&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if elements.contains(elem) then&#xA;&#x9;&#x9;&#x9;if self.count(elem).isLowerOrEqual(elements.count(elem)) then&#xA;&#x9;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;it := elements.iterator&#xA;&#x9;from it&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if self.contains(elem) then&#xA;&#x9;&#x9;&#x9;if elements.count(elem).isLower(self.count(elem)) then&#xA;&#x9;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/** returns the intersection of elements and the Bag */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Bag">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="intersectionWithSet" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;G>.new&#xA;&#x9;var elem : G&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init elements.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;if self.contains(elem) then&#xA;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/** returns the intersection of a set of elements and the Bag */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Set">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OrderedCollection" abstract="true" eSuperTypes="//standard/Collection">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * An OrderedCollection is the root abstract class for all ordered Collections.&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="kermeta::standard::Collection&lt;G>" value="kermeta::standard::Collection&lt;G>"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="addAt">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(size)) then&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.addAt(self, index, element)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Overrides addAt to ensure element uniqueness&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="removeAt">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(size.minus(1))) then&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.removeAt(self, index)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * removes the element at index of the OrderedCollection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="elementAt" eType="//standard/_KermetaSpecialTypesAlias_">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(size.minus(1))) then&#xA;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.elementAt(self, index)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns the element at index in the OrderedCollection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariable">
          <details key="G" value="G"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="first" eType="//standard/_KermetaSpecialTypesAlias_">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if size.isSameAs(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#xA;&#x9;end&#xA;&#x9;result := elementAt(0)&#xA;end"/>
          <details key="documentation" value="/** returns the first element in the OrderedCollection */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariable">
          <details key="G" value="G"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="last" eType="//standard/_KermetaSpecialTypesAlias_">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if size.isSameAs(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#xA;&#x9;end&#xA;&#x9;result := elementAt(size.minus(1))&#xA;end"/>
          <details key="documentation" value="/** returns the last element in the OrderedCollection */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariable">
          <details key="G" value="G"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//reflection/Object/equals">
          <details key="body" value="do&#xA;&#x9;var collection : kermeta::standard::Collection&lt;G>&#xA;&#x9;collection ?= element&#xA;&#x9;if self.size.isNotSameAs(collection.size) then&#xA;&#x9;&#x9;result := false&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var selfIterator : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;&#x9;var collectionIterator : kermeta::standard::Iterator&lt;G> init collection.iterator&#xA;&#x9;&#x9;var difference : kermeta::standard::Boolean init false&#xA;&#x9;&#x9;from &quot;void&quot;&#xA;&#x9;&#x9;until selfIterator.isOff.~or(collectionIterator.isOff).~or(difference)&#xA;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;if selfIterator.next.isSameAs(collectionIterator.next).~not then&#xA;&#x9;&#x9;&#x9;&#x9;difference := true&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;result := difference.~not&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="indexOf" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if size.isSameAs(0) then&#xA;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#xA;&#x9;end&#xA;&#x9;if self.contains(element).~not then&#xA;&#x9;&#x9;result := 1.uminus&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var i : kermeta::standard::Integer init 0&#xA;&#x9;&#x9;from var found : kermeta::standard::Boolean init false&#xA;&#x9;&#x9;until found&#xA;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;if element.isSameAs(elementAt(i)) then&#xA;&#x9;&#x9;&#x9;&#x9;found := true&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;i := i.plus(1)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;result := i&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/** returns the index of the first element instance in the OrderedCollection */"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OrderedSet" eSuperTypes="//standard/Set //standard/OrderedCollection">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * an OrderedSet is a Set that contained ordered distinct elements, accessible by&#xD;&#xA; * their index. (see AddAt method)&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="kermeta::standard::Set&lt;G>" value="kermeta::standard::Set&lt;G>"/>
        <details key="kermeta::standard::OrderedCollection&lt;G>" value="kermeta::standard::OrderedCollection&lt;G>"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add" ordered="false">
        <eAnnotations source="kermeta" references="//standard/Set/add">
          <details key="body" value="do&#xA;&#x9;super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Set"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="addAt">
        <eAnnotations source="kermeta" references="//standard/OrderedCollection/addAt">
          <details key="body" value="do&#xA;&#x9;if self.contains(element).~not then&#xA;&#x9;&#x9;super(index, element)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/OrderedCollection/equals">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="subSet" eType="//standard/OrderedSet">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::OrderedSet&lt;G>.new&#xA;&#x9;if min.isGreaterOrEqual(0).~and(max.isLowerOrEqual(self.size)) then&#xA;&#x9;&#x9;self.each{e | do&#xA;&#x9;&#x9;&#x9;&#x9;var i : kermeta::standard::Integer init self.indexOf(e)&#xA;&#x9;&#x9;&#x9;&#x9;if i.isGreaterOrEqual(min).~and(i.isLowerOrEqual(max)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(e)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="min" eType="//standard/Integer"/>
        <eParameters name="max" eType="//standard/Integer"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Sequence" eSuperTypes="//standard/Bag //standard/OrderedCollection">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * A Sequence is an ordered collection of elements&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="kermeta::standard::Bag&lt;G>" value="kermeta::standard::Bag&lt;G>"/>
        <details key="kermeta::standard::OrderedCollection&lt;G>" value="kermeta::standard::OrderedCollection&lt;G>"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta" references="//standard/OrderedCollection/equals">
          <details key="body" value="do&#xA;&#x9;result := super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="subSequence" eType="//standard/Sequence">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;if min.isGreaterOrEqual(0).~and(max.isLowerOrEqual(self.size)) then&#xA;&#x9;&#x9;self.each{e | do&#xA;&#x9;&#x9;&#x9;&#x9;var i : kermeta::standard::Integer init self.indexOf(e)&#xA;&#x9;&#x9;&#x9;&#x9;if i.isGreaterOrEqual(min).~and(i.isLowerOrEqual(max)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(e)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="G"/>
        </eAnnotations>
        <eParameters name="min" eType="//standard/Integer"/>
        <eParameters name="max" eType="//standard/Integer"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Iterator">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Iterator&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="isOff" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := hasNext.~not&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Returns true if the iterator is on the last element&#xD;&#xA;  * i.e. returns not self.hasNext()&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="hasNext" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Iterator.hasNext(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns true if the iterator has a next element&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="next" eType="//standard/_KermetaSpecialTypesAlias_">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if hasNext.~not then&#xA;&#x9;&#x9;raise kermeta::exceptions::IteratorIsOff.new&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Iterator.next(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns the next element of the iterator&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariable">
          <details key="G" value="G"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UnknownJavaObject">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA;  * This special object is used to represent java object that cannot be concretly used with kermeta&#xD;&#xA;  * the only actions possible on these objects are : assignment and passing them as parameter&#xD;&#xA;  */"/>
      </eAnnotations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta" references="//reflection/Object/toString">
          <details key="body" value="do&#xA;&#x9;result := &quot;toString of  UnknownJavaObject not implemented yet&quot;&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="language" nsURI="platform:/resource/TestRDL/framework.ecore#//language" nsPrefix="language">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * Contains the implementation of Kermeta reflective collections.&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="ReflectiveCollection" eSuperTypes="//standard/Set">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * ReflectiveCollection is a special collection that is used to define the type &#xD;&#xA; * of attributes that have an upper multiplicity > 1 in a class. It indeed handles&#xD;&#xA; * the update of opposite property if such an attribute has got one.&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="kermeta::standard::Set&lt;G>" value="kermeta::standard::Set&lt;G>"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add">
        <eAnnotations source="kermeta" references="//standard/Set/add">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.add(self, element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Set"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="remove">
        <eAnnotations source="kermeta" references="//standard/Collection/remove">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.remove(self, element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Collection"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="clear">
        <eAnnotations source="kermeta" references="//standard/Collection/clear">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.clear(self)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::Collection"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ReflectiveSequence" eSuperTypes="//standard/OrderedSet //language/ReflectiveCollection">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * ReflectiveSequence is an ordered ReflectiveCollection.&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="kermeta::standard::OrderedSet&lt;G>" value="kermeta::standard::OrderedSet&lt;G>"/>
        <details key="kermeta::language::ReflectiveCollection&lt;G>" value="kermeta::language::ReflectiveCollection&lt;G>"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add">
        <eAnnotations source="kermeta" references="//language/ReflectiveCollection/add">
          <details key="body" value="do&#xA;&#x9;super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::language::ReflectiveCollection"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="remove">
        <eAnnotations source="kermeta" references="//language/ReflectiveCollection/remove">
          <details key="body" value="do&#xA;&#x9;super(element)&#xA;end"/>
          <details key="superOperation" value="kermeta::language::ReflectiveCollection"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="clear">
        <eAnnotations source="kermeta" references="//language/ReflectiveCollection/clear">
          <details key="body" value="do&#xA;&#x9;super()&#xA;end"/>
          <details key="superOperation" value="kermeta::language::ReflectiveCollection"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="addAt">
        <eAnnotations source="kermeta" references="//standard/OrderedSet/addAt">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveSequence.addAt(self, index, element)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::OrderedSet"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="removeAt">
        <eAnnotations source="kermeta" references="//standard/OrderedCollection/removeAt">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveSequence.removeAt(self, index)&#xA;end"/>
          <details key="superOperation" value="kermeta::standard::OrderedCollection"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
      </eOperations>
    </eClassifiers>
    <eSubpackages name="structure" nsURI="platform:/resource/TestRDL/framework.ecore#//language/structure" nsPrefix="structure">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains the concrete implementation (including the operation bodies) &#xD;&#xA; * of the classes of the &lt;code>kermeta::reflection&lt;/code> package. If you need&#xD;&#xA; * documentation for elements marked as &quot;Undocumented&quot;, please take a look&#xD;&#xA; * at the &lt;code>kermeta::reflection&lt;/code> package which is more complete.&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String"/>
      <eClassifiers xsi:type="ecore:EClass" name="Object" eSuperTypes="//reflection/Object //language/structure/KMStructureVisitable">
        <eOperations name="getMetaClass" eType="//reflection/Class">
          <eAnnotations source="kermeta" references="//reflection/Object/getMetaClass">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getMetaClass(self)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="container" eType="//reflection/Object">
          <eAnnotations source="kermeta" references="//reflection/Object/container">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Object.container(self)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="checkInvariants">
          <eAnnotations source="kermeta" references="//reflection/Object/checkInvariants">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.checkInvariants(self)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="checkAllInvariants">
          <eAnnotations source="kermeta" references="//reflection/Object/checkAllInvariants">
            <details key="body" value="do&#xA;&#x9;if self.isNotSameAs(void) then&#xA;&#x9;&#x9;self.checkInvariants&#xA;&#x9;&#x9;self.getMetaClass.ownedAttribute.each{subObj | if subObj.isComposite then&#xA;&#x9;&#x9;&#x9;&#x9;if self.get(subObj).getMetaClass.typeDefinition.name.equals(&quot;ReflectiveSequence&quot;).~or(self.get(subObj).getMetaClass.typeDefinition.name.equals(&quot;ReflectiveCollection&quot;)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var subObjInstances : kermeta::standard::Collection&lt;kermeta::reflection::Object>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;subObjInstances ?= self.get(subObj)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;subObjInstances.each{aSubObjInstances | aSubObjInstances.checkAllInvariants}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;self.get(subObj).checkAllInvariants&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#xA;&#x9;&#x9;&#x9;end}&#xA;&#xA;&#x9;end&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Object/equals">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.equals(self, element)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="element" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="isNotEqual" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Object/isNotEqual">
            <details key="body" value="do&#xA;&#x9;result := equals(element).~not&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="element" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="isSameAs" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Object/isSameAs">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isSameAs(self, element)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="element" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="isNotSameAs" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Object/isNotSameAs">
            <details key="body" value="do&#xA;&#x9;result := isSameAs(element).~not&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="element" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="isKindOf" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Object/isKindOf">
            <details key="body" value="do&#xA;&#x9;result := self.getMetaClass.equals(cl)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="cl" eType="//reflection/Class"/>
        </eOperations>
        <eOperations name="get" eType="//reflection/Object">
          <eAnnotations source="kermeta" references="//reflection/Object/get">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Object.get(self, ~property)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="property" eType="//reflection/Property"/>
        </eOperations>
        <eOperations name="set">
          <eAnnotations source="kermeta" references="//reflection/Object/set">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.~set(self, ~property, element)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="property" eType="//reflection/Property"/>
          <eParameters name="element" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="isSet" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Object/isSet">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isSet(self, ~property)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="property" eType="//reflection/Property"/>
        </eOperations>
        <eOperations name="unset">
          <eAnnotations source="kermeta" references="//reflection/Object/unset">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.unSet(self, ~property)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="property" eType="//reflection/Property"/>
        </eOperations>
        <eOperations name="oid" eType="//language/structure/Integer">
          <eAnnotations source="kermeta" references="//reflection/Object/oid">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.oid(self)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="//language/structure/String">
          <eAnnotations source="kermeta" references="//reflection/Object/toString">
            <details key="body" value="do&#xA;&#x9;result := &quot;[&quot;.plus(self.getMetaClass.typeDefinition.qualifiedName).plus(&quot;:&quot;).plus(oid.toString).plus(&quot;]&quot;)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isFrozen" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Object/isFrozen">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isFrozen(self)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isVoid" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Object/isVoid">
            <details key="body" value="do&#xA;&#x9;result := false&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="freeze">
          <eAnnotations source="kermeta" references="//reflection/Object/freeze">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.freeze(self)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean"/>
      <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer"/>
      <eClassifiers xsi:type="ecore:EClass" name="ParameterizedType" abstract="true" eSuperTypes="//language/structure/Type //reflection/ParameterizedType //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitParameterizedType(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ModelType" eSuperTypes="//language/structure/ParameterizedType //reflection/ModelType //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitModelType(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="new" eType="//reflection/Model">
          <eAnnotations source="kermeta" references="//reflection/ModelType/new">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::ModelType.newObject(self)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::ModelType"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isModelTypeOf" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/ModelType/isModelTypeOf">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::ModelType.isModelTypeOf(self, m)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::ModelType"/>
          </eAnnotations>
          <eParameters name="m" eType="//reflection/Model"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="//language/structure/ParameterizedType //reflection/Class //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta.inv">
          <details key="hasTypeDefinition" value="typeDefinition.isNotSameAs(void)"/>
        </eAnnotations>
        <eAnnotations source="kermeta.inv">
          <details key="hasValidTypeDef" value="if typeDefinition.isNotSameAs(void) then&#xA;&#x9;if typeDefinition.typeParameter.size.isSameAs(typeParamBinding.size) then&#xA;&#x9;&#x9;var params : set kermeta::reflection::TypeVariable[0..*] init kermeta::standard::Set&lt;kermeta::reflection::TypeVariable>.new&#xA;&#x9;&#x9;params.addAll(typeParamBinding.collect{e | e.variable})&#xA;&#x9;&#x9;params.size.isSameAs(typeDefinition.typeParameter.size)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#xA;&#x9;end&#xA;&#xA;else&#xA;&#x9;true&#xA;&#xA;end"/>
        </eAnnotations>
        <eOperations name="new" eType="//reflection/Object">
          <eAnnotations source="kermeta" references="//reflection/Class/new">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Class.newObject(self)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Class"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta" references="//language/structure/Type/clone">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Class.cloneObject(self, objectToClone)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::Type"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="deepClone" eType="//language/structure/Object">
          <eAnnotations source="kermeta" references="//language/structure/Type/deepClone">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Class.deepCloneObject(self, objectToClone)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::Type"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="isInstance" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Type/isInstance">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.isInstance(self, object)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Type"/>
          </eAnnotations>
          <eParameters name="object" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="isSubType" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//reflection/Type/isSubType">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.isSubType(self, object)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Type"/>
          </eAnnotations>
          <eParameters name="object" eType="//reflection/Type"/>
        </eOperations>
        <eOperations name="equals" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta" references="//language/structure/Object/equals">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.equals(self, other)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="other" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitClass(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" eSuperTypes="//language/structure/TypedElement //reflection/MultiplicityElement //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitMultiplicityElement(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Constraint" eSuperTypes="//reflection/Constraint //language/structure/NamedElement //reflection/Operation //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitConstraint(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" eType="//language/structure/ConstraintLanguage">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="stereotype" eType="//language/structure/ConstraintType">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="ConstraintLanguage">
        <eLiterals name="kermeta" literal="kermeta"/>
        <eLiterals name="ocl" value="1" literal="ocl"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="ConstraintType">
        <eLiterals name="pre" literal="pre"/>
        <eLiterals name="post" value="1" literal="post"/>
        <eLiterals name="inv" value="2" literal="inv"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="//language/structure/MultiplicityElement //reflection/Operation //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitOperation(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Tag" eSuperTypes="//language/structure/Object //reflection/Tag //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTag(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="//language/structure/MultiplicityElement //reflection/Property //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitProperty(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="getterBody" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="setterBody" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeContainer" abstract="true" eSuperTypes="//language/structure/Object //reflection/TypeContainer"/>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualTypeContainer" abstract="true" eSuperTypes="//language/structure/Object //reflection/VirtualTypeContainer"/>
      <eClassifiers xsi:type="ecore:EClass" name="GenericTypeDefinition" eSuperTypes="//language/structure/TypeDefinition //reflection/GenericTypeDefinition //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitGenericTypeDefinition(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClassDefinition" eSuperTypes="//language/structure/TypeContainer //language/structure/GenericTypeDefinition //reflection/ClassDefinition //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitClassDefinition(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ModelTypeDefinition" eSuperTypes="//language/structure/GenericTypeDefinition //language/structure/TypeDefinitionContainer //reflection/ModelTypeDefinition //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitModelTypeDefinition(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypedElement" eSuperTypes="//language/structure/TypeContainer //language/structure/NamedElement //reflection/TypedElement //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypedElement(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeVariable" abstract="true" eSuperTypes="//language/structure/Type //language/structure/NamedElement //reflection/TypeVariable //language/structure/KMStructureVisitable"/>
      <eClassifiers xsi:type="ecore:EClass" name="ObjectTypeVariable" eSuperTypes="//language/structure/TypeContainer //language/structure/TypeVariable //reflection/ObjectTypeVariable //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitObjectTypeVariable(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualType" eSuperTypes="//language/structure/ObjectTypeVariable //reflection/VirtualType //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitVirtualType(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ModelTypeVariable" eSuperTypes="//language/structure/TypeVariable //language/structure/TypeContainer //language/structure/VirtualTypeContainer //reflection/ModelTypeVariable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitModelTypeVariable(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Model" eSuperTypes="//language/structure/Object //reflection/Model">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitModel(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="filter" ordered="false" upperBound="-1" eType="//reflection/Object">
          <eAnnotations source="kermeta" references="//reflection/Model/filter">
            <details key="body" value="do&#xA;&#x9;result := contents.~select{o | typeName.isInstance(o)}.asSet&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Model"/>
          </eAnnotations>
          <eParameters name="typeName" eType="//reflection/Type"/>
        </eOperations>
        <eOperations name="add">
          <eAnnotations source="kermeta" references="//reflection/Model/add">
            <details key="body" value="do&#xA;&#x9;contents&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Model.add(self, obj)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Model"/>
          </eAnnotations>
          <eParameters name="obj" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="remove">
          <eAnnotations source="kermeta" references="//reflection/Model/remove">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.remove(contents, obj)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Model"/>
          </eAnnotations>
          <eParameters name="obj" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="addAllCompatible" eType="//standard/Collection">
          <eAnnotations source="kermeta" references="//reflection/Model/addAllCompatible">
            <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::language::structure::Object>.new&#xA;&#x9;objectsToAdd.each{obj | do&#xA;&#x9;&#x9;&#x9;var addedObject : kermeta::reflection::Object init addCompatible(obj)&#xA;&#x9;&#x9;&#x9;if addedObject.isVoid.~not then&#xA;&#x9;&#x9;&#x9;&#x9;result.add(obj)&#xA;&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end}&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Model"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="objectsToAdd" eType="//standard/Collection">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="kermeta::language::structure::Object"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="addCompatible" eType="//reflection/Object">
          <eAnnotations source="kermeta" references="//reflection/Model/addCompatible">
            <details key="body" value="do&#xA;&#x9;contents&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Model.addCompatible(self, objectToAdd)&#xA;end"/>
            <details key="superOperation" value="kermeta::reflection::Model"/>
          </eAnnotations>
          <eParameters name="objectToAdd" eType="//reflection/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ProductType" eSuperTypes="//language/structure/TypeContainer //language/structure/Type //reflection/ProductType //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitProductType(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FunctionType" eSuperTypes="//language/structure/TypeContainer //language/structure/Type //reflection/FunctionType //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitFunctionType(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Type" eSuperTypes="//language/structure/Object //reflection/Type //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="deepClone" eType="//language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitType(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeVariableBinding" eSuperTypes="//language/structure/TypeContainer //language/structure/Object //reflection/TypeVariableBinding //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeVariableBinding(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="//language/structure/TypeContainer //language/structure/DataType //reflection/PrimitiveType //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitPrimitiveType(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta" references="//language/structure/DataType/clone">
            <details key="isAbstract" value="true"/>
            <details key="superOperation" value="kermeta::language::structure::DataType"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NamedElement" eSuperTypes="//language/structure/Object //reflection/NamedElement //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitNamedElement(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeDefinitionContainer" eSuperTypes="//language/structure/NamedElement //reflection/TypeDefinitionContainer //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;class SelfType inherits Type, kermeta::reflection::SelfType, KMStructureVisitable&#xD;&#xA;{&#xD;&#xA; method acceptKMStructureVisitor&lt;ContextType, ResultType>(visitor : KMStructureVisitor&lt;ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is&#xD;&#xA;  do&#xD;&#xA;   result := visitor.visitSelfType(self, context)&#xD;&#xA;  end&#xD;&#xA;} */"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeDefinitionContainer(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="//language/structure/TypeDefinitionContainer //reflection/Package //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitPackage(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeDefinition" eSuperTypes="//language/structure/NamedElement //reflection/TypeDefinition //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeDefinition(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VoidType" eSuperTypes="//language/structure/Type //reflection/VoidType //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitVoidType(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DataType" eSuperTypes="//language/structure/TypeDefinition //language/structure/Type //reflection/DataType //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="clone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitDataType(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta" references="//language/structure/Type/clone">
            <details key="isAbstract" value="true"/>
            <details key="superOperation" value="kermeta::language::structure::Type"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="//language/structure/DataType //reflection/Enumeration //language/structure/KMStructureVisitable">
        <eAnnotations source="kermeta">
          <details key="isSemanticallyAbstract" value="deepClone"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitEnumeration(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta" references="//language/structure/DataType/clone">
            <details key="body" value="do&#xA;&#x9;raise &quot;NOT IMPLEMENTED&quot;&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::DataType"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="//language/structure/NamedElement //reflection/EnumerationLiteral //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitEnumerationLiteral(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="//language/structure/MultiplicityElement //reflection/Parameter //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitParameter(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Integer">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Alias to kermeta::standard::UnlimitedNatural */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMStructureVisitor" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Implementation of the Visitor pattern for the model elements contained in structure package */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeParameters">
          <details key="ContextType" value="ContextType"/>
          <details key="ResultType" value="ResultType"/>
        </eAnnotations>
        <eOperations name="visitClass" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Class"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitMultiplicityElement" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/MultiplicityElement"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitOperation" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Operation"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitTag" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Tag"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitProperty" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Property"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitClassDefinition" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/ClassDefinition"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitTypedElement" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/TypedElement"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitObjectTypeVariable" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/ObjectTypeVariable"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitVirtualType" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/VirtualType"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitModelTypeVariable" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/ModelTypeVariable"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitModel" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Model"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitProductType" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/ProductType"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitFunctionType" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/FunctionType"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitType" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Type"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitTypeVariableBinding" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/TypeVariableBinding"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitPrimitiveType" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/PrimitiveType"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitNamedElement" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/NamedElement"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitPackage" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Package"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitTypeDefinition" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/TypeDefinition"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitVoidType" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/VoidType"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitDataType" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/DataType"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitEnumeration" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Enumeration"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitEnumerationLiteral" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/EnumerationLiteral"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitParameter" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Parameter"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitGenericTypeDefinition" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/GenericTypeDefinition"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitModelTypeDefinition" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/ModelTypeDefinition"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitParameterizedType" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/ParameterizedType"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitModelType" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/ModelType"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitTypeDefinitionContainer" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/TypeDefinitionContainer"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitConstraint" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Constraint"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMStructureVisitable" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** All the classes defined in this &lt;code>kermeta::language::structure&lt;/code> package &#xD;&#xA; * inherit this class. Part of Visitor pattern implementation. */"/>
        </eAnnotations>
        <eOperations name="acceptKMStructureVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="behavior" nsURI="platform:/resource/TestRDL/framework.ecore#//language/behavior" nsPrefix="behavior">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Contains all the classes that define the behavior of Kermeta (i.e the model representation&#xD;&#xA; * of operation bodies). It is the definition, in kermeta language, of the behavior part of the kermeta &#xD;&#xA; * metamodel, viewed as a model.&#xD;&#xA; * You can also find some information about the behavior package here : &lt;a href=&quot;http://www.kermeta.org/documents/manual/html.single&quot;>KermetaManual&lt;/a>&#xD;&#xA; */"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="CallExpression" abstract="true" eSuperTypes="//language/behavior/Expression">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Any callable expression inherits this class, e.g : &#xD;&#xA; *   - variable call&#xD;&#xA; *   - feature call ( &lt;code>a.b&lt;/code> : b is a feature call)&#xD;&#xA; *&#xD;&#xA; * &lt;img alt=&quot;&quot;  height=&quot;90%&quot; width=&quot;90%&quot;  src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_call_expressions.png&quot; />&#xD;&#xA; *&#xD;&#xA;*/"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" ordered="false" upperBound="-1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="staticTypeVariableBindings" upperBound="-1" eType="//language/structure/Type"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Expression" abstract="true" eSuperTypes="//reflection/Object //reflection/TypeContainer">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * The base class for every entity used to define a behavior in operation body.&#xD;&#xA; */"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="staticType" eType="//language/structure/Type"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallVariable" eSuperTypes="//language/behavior/CallExpression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * We call &quot;CallVariable&quot; the use of a variable in a statement.&#xD;&#xA; * in &lt;code>i := j + 1&lt;/code>, i and j are 2 CallVariables.&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitCallVariable(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallFeature" eSuperTypes="//language/behavior/CallExpression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * CallFeature is the model element that refers to the use of a feature, i.e either &#xD;&#xA; * a property or an operation in a statement. In &lt;code>stdio.writeln(&quot;hello&quot;)&lt;/code>, &#xD;&#xA; * &lt;code>writeln&lt;/code> is a CallFeature.&#xD;&#xA;*/"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitCallFeature(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="staticOperation" eType="//language/structure/Operation"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="staticEnumLiteral" eType="//language/structure/EnumerationLiteral"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="staticProperty" eType="//language/structure/Property"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAtpre" eType="//reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
            <details key="documentation" value="/** Tells wether this CallFeature represents a call to @pre in a postcondition */"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallSuperOperation" eSuperTypes="//language/behavior/CallExpression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** This class represents a call to the operataion in the parent class&#xD;&#xA; * In the following example, the type of super(element) is CallSuperOperation:&#xD;&#xA; *&#xD;&#xA; * class ParentClass {&#xD;&#xA; *   operation op(element : Integer) : Integer is do&#xD;&#xA; *       result := element + 1&#xD;&#xA; *   end&#xD;&#xA; * }&#xD;&#xA; *&#xD;&#xA; * class ChildClass {&#xD;&#xA; *   method op(element : Integer) : Integer is do&#xD;&#xA; *       result := super(element)&#xD;&#xA; *   end&#xD;&#xA; * }&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitCallSuperOperation(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallResult" eSuperTypes="//language/behavior/CallVariable //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** This class represents a call to the special internal variable &quot;result&quot; that is used to store the return value of any operation &#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitCallResult(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallValue" eSuperTypes="//language/behavior/CallExpression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * CallValue refers to the use of the &lt;code>value&lt;/code> reserved keyword. This keyword is&#xD;&#xA; * only used in the body of the &lt;code>setter&lt;/code> part of derived properties.&#xD;&#xA;*/"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitCallValue(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Assignment" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Assignment is the model-element representation of the assignment statement &lt;code>x := y&lt;/code>&#xD;&#xA; * &lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_assign_expressions.png&quot;/>&#xD;&#xA;*/"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitAssignment(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1" eType="//language/behavior/CallExpression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isCast" eType="//reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Block" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Block is the model-element representation for the &lt;code>do...end&lt;/code> block.&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitBlock(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="statement" ordered="false" upperBound="-1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="rescueBlock" ordered="false" upperBound="-1" eType="//language/behavior/Rescue" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Conditional" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Condition is the model-element representation for the &lt;code>&lt;/code> &#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitConditional(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="thenBody" lowerBound="1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="elseBody" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="condition" lowerBound="1" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Literal" abstract="true" eSuperTypes="//language/behavior/Expression">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Literal refers to String values, Integer values, etc.&#xD;&#xA; */"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EmptyExpression" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** As suggested by its name, this class represents an expression that do nothing. Like a &quot;nop&quot;&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitEmptyExpression(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IntegerLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** This expression is a literal representing an Integer value */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitIntegerLiteral(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="//reflection/Integer">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** This expression is a literal representing a String value, typically : &quot;my string&quot;  */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitStringLiteral(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="//reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="BooleanLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** This expression is a literal representing a Boolean value, typically : true or false keyword*/"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitBooleanLiteral(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="//reflection/Boolean">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** This expression is a literal representing a Type.&#xD;&#xA; * for example, in &#xD;&#xA; *    Integer.new&#xD;&#xA; * Integer is a type literal representing the type kermeta::standard::Integer&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeLiteral(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="typeref" lowerBound="1" eType="//language/behavior/TypeReference" containment="true">
          <eAnnotations source="kermeta">
            <details key="documentation" value="/** The type refered by this literal */"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeReference" eSuperTypes="//reflection/MultiplicityElement //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * TypeReference refers to the type used in a variable declaration&#xD;&#xA;*/"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeReference(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VoidLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** This class is used to represent the special expression void */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitVoidLiteral(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Loop" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Loop refers to &lt;code>from var x : X init a until booleanCondition loop ... end&lt;/code>&#xD;&#xA;*/"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitLoop(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="initialization" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="stopCondition" lowerBound="1" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SelfExpression" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * refers to &lt;code>self&lt;/code> use&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitSelfExpression(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VariableDecl" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * refers to variable declaration &lt;code>var x : X init a&lt;/code>&#xD;&#xA; * &lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_var_expressions.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitVariableDecl(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="initialization" lowerBound="1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="identifier" eType="//reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="//language/behavior/TypeReference" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Raise" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * refers to raise exception block&#xD;&#xA;*/"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitRaise(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="expression" lowerBound="1" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Rescue" eSuperTypes="//reflection/Object //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * refers to rescue exception block&#xD;&#xA;*/"/>
          <details key="isSemanticallyAbstract" value="getMetaClass"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitRescue(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="body" ordered="false" lowerBound="1" upperBound="-1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="exceptionType" lowerBound="1" eType="//language/behavior/TypeReference" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="exceptionName" eType="//reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="JavaStaticCall" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** This class represent a call to an extern Java operation. &#xD;&#xA; * This Java operation must be static and have at least one RuntimeO&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitJavaStaticCall(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" ordered="false" upperBound="-1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="jclass" eType="//reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="jmethod" eType="//reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LambdaExpression" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Refers to lambda expression definition (&lt;code>function { e | stdio.writeln(e.toString) }&lt;/code>)&#xD;&#xA; * &lt;img alt=&quot;&quot; src=&quot;http://www.kermeta.org/docs/html.single/KerMeta-Manual/KerMeta-Manual_figures/kermeta_lambda_expressions.png&quot;/>&#xD;&#xA; */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitLambdaExpression(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" ordered="false" upperBound="-1" eType="//language/behavior/LambdaParameter" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LambdaParameter" eSuperTypes="//reflection/Object //language/behavior/KMExpressionVisitable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA; * Refers to parameter definition in lambda expression&#xD;&#xA; */"/>
          <details key="isSemanticallyAbstract" value="getMetaClass"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitLambdaParameter(self, context)&#xA;end"/>
            <details key="superOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//reflection/String">
          <eAnnotations source="kermeta">
            <details key="isComposite" value="true"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="//language/behavior/TypeReference" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMExpressionVisitor" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** This class implements the visitor design pattern for all the classes of this Behavior package, in particular the classes that inherits from kermeta::behavior::Expression */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeParameters">
          <details key="ContextType" value="ContextType"/>
          <details key="ResultType" value="ResultType"/>
        </eAnnotations>
        <eOperations name="visitCallVariable" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/CallVariable"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitCallFeature" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/CallFeature"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitCallSuperOperation" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/CallSuperOperation"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitCallResult" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/CallResult"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitCallValue" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/CallValue"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitAssignment" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Assignment"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitBlock" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Block"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitConditional" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Conditional"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitEmptyExpression" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/EmptyExpression"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitIntegerLiteral" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/IntegerLiteral"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitStringLiteral" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/StringLiteral"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitBooleanLiteral" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/BooleanLiteral"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitTypeLiteral" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/TypeLiteral"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitTypeReference" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/TypeReference"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitVoidLiteral" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/VoidLiteral"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitLoop" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Loop"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitSelfExpression" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/SelfExpression"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitVariableDecl" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/VariableDecl"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitRaise" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Raise"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitRescue" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Rescue"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitJavaStaticCall" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/JavaStaticCall"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitLambdaExpression" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/LambdaExpression"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="visitLambdaParameter" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/LambdaParameter"/>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMExpressionVisitable" abstract="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** All classes that can be visited using kermeta::behavior::KMExpressionVisitor must implement this class */"/>
        </eAnnotations>
        <eOperations name="acceptKMExpressionVisitor" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
            <details key="documentation" value="/** Implementation of the visitor design pattern on VoidLiteral objects */"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeVariable">
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eAnnotations source="kermeta.typeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor">
            <eAnnotations source="kermeta.typeVariableBindings">
              <details key="0" value="ContextType"/>
              <details key="1" value="ResultType"/>
            </eAnnotations>
          </eParameters>
          <eParameters name="context" eType="//standard/_KermetaSpecialTypesAlias_">
            <eAnnotations source="kermeta.typeVariable">
              <details key="ContextType" value="ContextType"/>
            </eAnnotations>
          </eParameters>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </eSubpackages>
  <eSubpackages name="reflection" nsURI="platform:/resource/TestRDL/framework.ecore#//reflection" nsPrefix="reflection">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * Contains all the abstract classes used in the reflection mechanism. Implements the &lt;b>derived&#xD;&#xA; * properties&lt;/b> contained in the classes; declares the abstract operations.&#xD;&#xA; * Concrete implementation is in kermeta.language.structure.&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String"/>
    <eClassifiers xsi:type="ecore:EClass" name="Object" abstract="true">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Object type : all entities of Kermeta metamodel explicitely inherit Object.&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="getMetaClass" eType="//reflection/Class">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="container" eType="//reflection/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="checkInvariants">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="checkAllInvariants">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="equals" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="isNotEqual" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="isSameAs" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** isSameAs operation checks if both objects have the same id */"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="isNotSameAs" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="isKindOf" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** Check if the current object is an instance of the given class.*/"/>
        </eAnnotations>
        <eParameters name="cl" eType="//reflection/Class"/>
      </eOperations>
      <eOperations name="get" eType="//reflection/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** &#xD;&#xA;  * Returns the instances of the given property for this Object.&#xD;&#xA;  *&#xD;&#xA;  * Example : &#xD;&#xA;  * &lt;pre>&#xD;&#xA;  * class A { reference attr : String }&#xD;&#xA;  * &lt;/pre>&#xD;&#xA;  * Using A :&#xD;&#xA;  * &lt;pre>&#xD;&#xA;  * operation getAProp() is do&#xD;&#xA;  *    var a : A&#xD;&#xA;  *    var s : String&#xD;&#xA;  *    var the_attr : Property init self.getMetaClass.ownedAttribute.one&#xD;&#xA;  *    s ?= a.get(the_attr)&#xD;&#xA;  * end&#xD;&#xA;  * &lt;/pre>&#xD;&#xA;  * The user has to cast&#xD;&#xA;  * the result of this method according to the type and the upper multiplicity&#xD;&#xA;  * of this property. If upper multiplicity > 1, than the effective type of the &#xD;&#xA;  * result is a Sequence&lt;ThePropertyName>. Otherwise, the type corresponds to &#xD;&#xA;  * the name of the given Property (i.e the type of the property instance).&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="property" eType="//reflection/Property"/>
      </eOperations>
      <eOperations name="set">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="property" eType="//reflection/Property"/>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="isSet" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="property" eType="//reflection/Property"/>
      </eOperations>
      <eOperations name="unset">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="property" eType="//reflection/Property"/>
      </eOperations>
      <eOperations name="oid" eType="//reflection/Integer">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** Returns the String representation of this class. &#xD;&#xA;  *  Note : throws an exception if this class has no classDefinition&#xD;&#xA;  *  or if the classDefinition is not well constructed.&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isFrozen" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="freeze">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isVoid" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="tag" ordered="false" upperBound="-1" eType="//reflection/Tag" eOpposite="//reflection/Tag/object">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Tags are used to put comments/documentation */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Alias for kermeta::standard::Boolean */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Alias for kermeta::standard::Integer */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ParameterizedType" abstract="true" eSuperTypes="//reflection/Type">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Abstraction for Parameterized types, namely, Class and ModelType*/"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeDefinition" lowerBound="1" eType="//reflection/GenericTypeDefinition"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding" ordered="false" upperBound="-1" eType="//reflection/TypeVariableBinding" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="virtualTypeBinding" ordered="false" upperBound="-1" eType="//reflection/TypeVariableBinding" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Class" abstract="true" eSuperTypes="//reflection/ParameterizedType">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Type corresponding to the &lt;b>use&lt;/b> of a ClassDefinition (see ClassDefinition)&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="new" eType="//reflection/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//reflection/String">
        <eAnnotations source="kermeta" references="//reflection/Object/toString">
          <details key="body" value="do&#xA;&#x9;result := self.typeDefinition.name&#xA;end"/>
          <details key="superOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" ordered="false" upperBound="-1" eType="//reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Returns the attributes, references, and derived properties owned by&#xD;&#xA;  *  the classDefinition of this class.&#xD;&#xA;  */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.ownedAttribute&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" ordered="false" upperBound="-1" eType="//reflection/Operation" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Returns the operations owned by the classDefinition of this class.&#xD;&#xA;  */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.ownedOperation&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="superClass" ordered="false" upperBound="-1" eType="//reflection/Class" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Returns the Classes of which the classDefinition of this class inherits.&#xD;&#xA;  */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.superType&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="//reflection/Boolean" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="false"/>
          <details key="documentation" value="/** Returns true if the classDefinition of this class is abstract.&#xD;&#xA;  */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;cDef ?= typeDefinition&#xA;&#x9;result := cDef.isAbstract&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//reflection/String" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="false"/>
          <details key="documentation" value="/** Returns the name of the classDefinition of this class&#xD;&#xA;  */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;result := typeDefinition.name&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ModelType" abstract="true" eSuperTypes="//reflection/ParameterizedType">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Type corresponding to the &lt;b>use&lt;/b> of a ModelTypeDefinition */"/>
      </eAnnotations>
      <eOperations name="new" eType="//reflection/Model">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isModelTypeOf" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="model" eType="//reflection/Model"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTypeDefinition" ordered="false" upperBound="-1" eType="//reflection/TypeDefinition" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;var mtDef : kermeta::reflection::ModelTypeDefinition&#xA;&#x9;mtDef ?= typeDefinition&#xA;&#x9;result := mtDef.ownedTypeDefinition&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Model" abstract="true" eSuperTypes="//reflection/Object">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Is the holder of a set of model elements (Object) that are compatible with the ModelType that has &#xD;&#xA; * instanciated this Model.&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="filter" ordered="false" upperBound="-1" eType="//reflection/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** returns a set of all the elements of the model that are instance of the given Type */"/>
        </eAnnotations>
        <eParameters name="vtype" eType="//reflection/Type"/>
      </eOperations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** add an object to the model. According to the ModelType, the typechecker will statically verify if the object can be added or not */"/>
        </eAnnotations>
        <eParameters name="obj" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="remove">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** remove an object from the model */"/>
        </eAnnotations>
        <eParameters name="obj" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="addAllCompatible" eType="//standard/Collection">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** add all the Object of the collection that are copmpatible with the ModelDefinition. Other objects are ignored.&#xD;&#xA;   * Returns the list of Object that have been added (One can check that some element have been ignored or not)&#xD;&#xA;   */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="objectsToAdd" eType="//standard/Collection">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="addCompatible" eType="//reflection/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** add the Object if it is copmpatible with the ModelDefinition. Other objects are ignored.&#xD;&#xA;   * Returns the object if it has been added (One can check that some element have been ignored or not)&#xD;&#xA;   *   return Void if not added&#xD;&#xA;   */"/>
        </eAnnotations>
        <eParameters name="objectsToAdd" eType="//reflection/Object"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="contents" ordered="false" upperBound="-1" eType="//reflection/Object" changeable="false">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Contents of this model ... */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" abstract="true" eSuperTypes="//reflection/TypedElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Model elements with a multiplicity [lower..upper] inherit this class*/"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" eType="//reflection/Integer">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" eType="//reflection/UnlimitedNatural">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Constraint" abstract="true" eSuperTypes="//reflection/NamedElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Constraint is part of a contract implementation in a Class definition or an operation.&#xD;&#xA; * Three kinds of constraints are available : pre, post, and inv (invariant constraint)&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="invOwner" eType="//reflection/ClassDefinition" eOpposite="//reflection/ClassDefinition/inv"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="preOwner" eType="//reflection/Operation" eOpposite="//reflection/Operation/pre"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="postOwner" eType="//reflection/Operation" eOpposite="//reflection/Operation/post"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="ConstraintLanguage">
      <eLiterals name="kermeta" literal="kermeta"/>
      <eLiterals name="ocl" value="1" literal="ocl"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="ConstraintType">
      <eLiterals name="pre" literal="pre"/>
      <eLiterals name="post" value="1" literal="post"/>
      <eLiterals name="inv" value="2" literal="inv"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Operation" abstract="true" eSuperTypes="//reflection/MultiplicityElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Every one knows what an operation is. */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="pre" ordered="false" upperBound="-1" eType="//reflection/Constraint" containment="true" eOpposite="//reflection/Constraint/preOwner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="post" ordered="false" upperBound="-1" eType="//reflection/Constraint" containment="true" eOpposite="//reflection/Constraint/postOwner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="superOperation" eType="//reflection/Operation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="//reflection/ClassDefinition" eOpposite="//reflection/ClassDefinition/ownedOperation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" ordered="false" upperBound="-1" eType="//reflection/TypeVariable"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="raisedException" ordered="false" upperBound="-1" eType="//reflection/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" ordered="false" upperBound="-1" eType="//reflection/Parameter" containment="true" eOpposite="//reflection/Parameter/operation"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Tag" abstract="true" eSuperTypes="//reflection/Object">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Tag is intended to be used to add documentation on a &#xD;&#xA; * model element, or add some textual information that cannot be expressed&#xD;&#xA; * with any model element definition.&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="object" ordered="false" lowerBound="1" upperBound="-1" eType="//reflection/Object" eOpposite="//reflection/Object/tag"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Property" abstract="true" eSuperTypes="//reflection/MultiplicityElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Class representing the property definition. Kermeta&lt;->Ecore equivalence:&#xD;&#xA; *  - Property with isComposite == true or with type is a base type (String, Integer, Boolean)  : EAttribute&#xD;&#xA; *  - Property with isComposite == false : EReference&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="//reflection/ClassDefinition" eOpposite="//reflection/ClassDefinition/ownedAttribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="opposite" eType="//reflection/Property"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="default" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isComposite" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isID" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeContainer" abstract="true" eSuperTypes="//reflection/Object">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Phantom class : EMF reflexive editors need that any element of a metamodel &#xD;&#xA; * has a direct or indirect containment relationship with the root model element of&#xD;&#xA; * the metamodel. This class resolves this technical requirement.&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="containedType" ordered="false" upperBound="-1" eType="//reflection/Type" containment="true" eOpposite="//reflection/Type/typeContainer"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="VirtualTypeContainer" abstract="true" eSuperTypes="//reflection/Object">
      <eStructuralFeatures xsi:type="ecore:EReference" name="virtualType" ordered="false" upperBound="-1" eType="//reflection/VirtualType" containment="true" eOpposite="//reflection/VirtualType/modelType"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="GenericTypeDefinition" abstract="true" eSuperTypes="//reflection/TypeDefinition">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Abstracts the definition of generic type definitions (i.e. type definitions that&#xD;&#xA; * can be parameterized), namely, for ClassDefinition and ModelTypeDefinition.&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" ordered="false" upperBound="-1" eType="//reflection/TypeVariable" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ClassDefinition" abstract="true" eSuperTypes="//reflection/TypeContainer //reflection/GenericTypeDefinition">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** The definition of a class definition :)&#xD;&#xA; *  &lt;pre>class A&#xD;&#xA; *{ &#xD;&#xA; *   attribute s : String&#xD;&#xA; *}&#xD;&#xA; *   &lt;/pre> is a class definition; in :&#xD;&#xA; * &lt;pre>&#xD;&#xA; * main() : A is do end&#xD;&#xA; * &lt;/pre>&#xD;&#xA; * A is a &lt;b>Class&lt;/b> : it corresponds to the &lt;b>use&lt;/b> of the class definition of A&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" ordered="false" upperBound="-1" eType="//reflection/Property" containment="true" eOpposite="//reflection/Property/owningClass">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Returns the attributes, references, and derived properties owned by&#xD;&#xA;  *  this class definition.&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" ordered="false" upperBound="-1" eType="//reflection/Operation" containment="true" eOpposite="//reflection/Operation/owningClass">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Returns the operations owned by this class definition.&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="inv" ordered="false" upperBound="-1" eType="//reflection/Constraint" containment="true" eOpposite="//reflection/Constraint/invOwner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="superType" ordered="false" upperBound="-1" eType="//reflection/Class">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Returns the Classes of which this class definition inherits.&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="allOwnedAttribute" ordered="false" upperBound="-1" eType="//reflection/Property" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Returns all the attributes, references, derived properties of this &#xD;&#xA;  *  class definition including the inherited ones&#xD;&#xA;  */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Property>.new&#xA;&#x9;result.addAll(self.ownedAttribute)&#xA;&#x9;self.superType.each{t | do&#xA;&#x9;&#x9;&#x9;var cDef : kermeta::reflection::ClassDefinition&#xA;&#x9;&#x9;&#x9;cDef ?= t.typeDefinition&#xA;&#x9;&#x9;&#x9;cDef.allOwnedAttribute.each{p | result.add(p)}&#xA;&#x9;&#x9;end}&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ModelTypeDefinition" abstract="true" eSuperTypes="//reflection/GenericTypeDefinition //reflection/TypeDefinitionContainer">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Definition for a model type */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="//reflection/TypeContainer //reflection/NamedElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Abstraction of the notion of typed element : each element &#xD;&#xA; * that is typed inherits this class. */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="//reflection/Type">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** The type of this model element */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeVariable" abstract="true" eSuperTypes="//reflection/TypeContainer //reflection/Type //reflection/NamedElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Definition of a type variable for generic types :  &#xD;&#xA; * in class definition &lt;pre>class AClass&lt;X,Y> {}&lt;/pre>, X and Y are type variables.&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="supertype" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ObjectTypeVariable" abstract="true" eSuperTypes="//reflection/TypeContainer //reflection/TypeVariable"/>
    <eClassifiers xsi:type="ecore:EClass" name="VirtualType" abstract="true" eSuperTypes="//reflection/ObjectTypeVariable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="classDefinition" lowerBound="1" eType="//reflection/ClassDefinition"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="modelType" lowerBound="1" eType="//reflection/VirtualTypeContainer" eOpposite="//reflection/VirtualTypeContainer/virtualType"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding" upperBound="-1" eType="//reflection/TypeVariableBinding"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ModelTypeVariable" abstract="true" eSuperTypes="//reflection/TypeVariable //reflection/VirtualTypeContainer"/>
    <eClassifiers xsi:type="ecore:EClass" name="ProductType" abstract="true" eSuperTypes="//reflection/TypeContainer //reflection/Type">
      <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1" upperBound="-1" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="FunctionType" abstract="true" eSuperTypes="//reflection/TypeContainer //reflection/Type">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Type used to define the use of lambda expressions.&#xD;&#xA; *  Uses :&#xD;&#xA; *  &lt;pre>operation forAll(func : &lt;G -> Boolean>) : Boolean is do&#xD;&#xA; *      var test : Boolean init true&#xD;&#xA; *      from var it : Iterator&lt;G> init iterator&#xD;&#xA; *      until it.isOff&#xD;&#xA; *      loop&#xD;&#xA; *         test := test and func(it.next)&#xD;&#xA; *      end&#xD;&#xA; *      result := test&#xD;&#xA; *  end&#xD;&#xA; *  &lt;/pre>&#xD;&#xA; *&#xD;&#xA; *  In the above example, &amp;lt;G -> Boolean&amp;gt; is a function type f(G) -&amp;gt; &#xD;&#xA; *  Boolean, with a parameter of type G and a return type of type Boolean&#xD;&#xA; *  The operation &lt;code>forAll&lt;/code> takes a lambda expression as parameter.&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="left" eType="//reflection/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="right" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true" eSuperTypes="//reflection/Object">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Base class definition for the &lt;b>use&lt;/b> of a type.&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="isInstance" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="isSubType" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Type"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeContainer" lowerBound="1" eType="//reflection/TypeContainer" eOpposite="//reflection/TypeContainer/containedType"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeVariableBinding" abstract="true" eSuperTypes="//reflection/TypeContainer //reflection/Object">
      <eStructuralFeatures xsi:type="ecore:EReference" name="variable" lowerBound="1" eType="//reflection/TypeVariable"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" abstract="true" eSuperTypes="//reflection/TypeContainer //reflection/DataType">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** The class definition for kermeta aliases. Above statement defines a primitive&#xD;&#xA; * type called MyString, which instanceType is &lt;code>kermeta::standard::String&lt;/code>&#xD;&#xA; * &lt;pre>alias MyString : kermeta::standard::String&lt;/pre>&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="instanceType" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true" eSuperTypes="//reflection/Object">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Any element that contain a  name (example : Operation, Property) inherit this&#xD;&#xA;* class.&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="qualifiedName" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var elem : kermeta::reflection::NamedElement init self&#xA;&#x9;result := self.name&#xA;&#x9;from elem ?= elem.container&#xA;&#x9;until elem.isSameAs(void)&#xA;&#x9;loop&#xA;&#x9;&#x9;result := elem.name.plus(&quot;::&quot;).plus(result)&#xA;&#x9;&#x9;elem ?= elem.container&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/** Returns the qualified name of this named element. Qualified name is &#xD;&#xA;  * the list of the names of the packages hierarchically ordered, delimited by&#xD;&#xA;  * a &quot;::&quot;, followed by the name of this named element.&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
          <details key="documentation" value="/** Name of this named element */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SelfType" abstract="true" eSuperTypes="//reflection/Type">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Self type : DEPRECATED&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeDefinitionContainer" abstract="true" eSuperTypes="//reflection/NamedElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Abstraction of the notion of containment for type definitions. Now, kermeta metamodel contains one container&#xD;&#xA; * element, that is Package. In a later release, ModelTypeDefinition will be the main container for type and&#xD;&#xA; * package definition.&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTypeDefinition" ordered="false" upperBound="-1" eType="//reflection/TypeDefinition" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Package" abstract="true" eSuperTypes="//reflection/TypeDefinitionContainer">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Package in kermeta. Each kermeta model must have a root package. &#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="nestedPackage" ordered="false" upperBound="-1" eType="//reflection/Package" containment="true" eOpposite="//reflection/Package/nestingPackage"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="nestingPackage" eType="//reflection/Package" eOpposite="//reflection/Package/nestedPackage"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeDefinition" abstract="true" eSuperTypes="//reflection/NamedElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Abstraction for type definitions (ClassDefinition, ModelTypeDefinition, DataType inherit&#xD;&#xA; * this class)&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="VoidType" abstract="true" eSuperTypes="//reflection/Type">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Class definition for the &lt;pre>Void&lt;/pre> type */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DataType" abstract="true" eSuperTypes="//reflection/TypeDefinition //reflection/Type">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Special type definition for Enumeration, PrimitiveType  */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Enumeration" abstract="true" eSuperTypes="//reflection/DataType">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Definition for enumeration */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" ordered="false" upperBound="-1" eType="//reflection/EnumerationLiteral" containment="true" eOpposite="//reflection/EnumerationLiteral/enumeration">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** Owned item in enumeration */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" abstract="true" eSuperTypes="//reflection/NamedElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Item definition for enumeration */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="//reflection/Enumeration" eOpposite="//reflection/Enumeration/ownedLiteral"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Parameter" abstract="true" eSuperTypes="//reflection/MultiplicityElement">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Definition for operation parameter */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="operation" eType="//reflection/Operation" eOpposite="//reflection/Operation/ownedParameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Integer">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Alias for kermeta::standard::UnlimitedNatural */"/>
      </eAnnotations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="kunit" nsURI="platform:/resource/TestRDL/framework.ecore#//kunit" nsPrefix="kunit">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * Contains the implementation of a unit test tool. This is a clone of&#xD;&#xA; * JUnit architecture.&#xD;&#xA; * Reference : http://junit.sourceforge.net/doc/cookstour/cookstour.htm&#xD;&#xA; *&#xD;&#xA; * Usage example of kunit can be found in fr.irisa.triskell.kermeta.samples project.&#xD;&#xA; *&#xD;&#xA; * You can also find a little example if you go to the documentation of the class&#xD;&#xA; * TestRunner.&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="AssertionFailedError" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * AssertionViolatedException are raised when assertions are violated&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Assert" abstract="true">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The abstract class assert defines a set of convinient operations&#xD;&#xA; * to assert expected behavior and give the rank of failed assert&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="assert">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var number : kermeta::standard::Integer init order&#xA;&#x9;if bool.~not then&#xA;&#x9;&#x9;fail(&quot;assert number &quot;.plus(number.toString).plus(&quot; failed&quot;))&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Fails if bool is false&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="bool" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="assertTrue">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var number : kermeta::standard::Integer init order&#xA;&#x9;if bool.~not then&#xA;&#x9;&#x9;fail(&quot;assertTrue number &quot;.plus(number.toString).plus(&quot; failed&quot;))&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * will fail if bool is false&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="bool" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="assertTrueWithMsg">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var number : kermeta::standard::Integer init order&#xA;&#x9;if bool.~not then&#xA;&#x9;&#x9;fail(&quot;assertTrueWithMsg number &quot;.plus(number.toString).plus(&quot; failed : &quot;).plus(msg))&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * will fail if bool is false&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="bool" eType="//standard/Boolean"/>
        <eParameters name="msg" eType="//standard/String"/>
      </eOperations>
      <eOperations name="assertFalse">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var number : kermeta::standard::Integer init order&#xA;&#x9;if bool then&#xA;&#x9;&#x9;fail(&quot;assertTrue number &quot;.plus(number.toString).plus(&quot; failed&quot;))&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * will fail if bool is true&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="bool" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="assertFalseWithMsg">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var number : kermeta::standard::Integer init order&#xA;&#x9;if bool then&#xA;&#x9;&#x9;fail(&quot;assertTrueWithMsg number &quot;.plus(number.toString).plus(&quot; failed : &quot;).plus(msg))&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * will fail if bool is true&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="bool" eType="//standard/Boolean"/>
        <eParameters name="msg" eType="//standard/String"/>
      </eOperations>
      <eOperations name="fail">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var exception : kermeta::kunit::AssertionFailedError init kermeta::kunit::AssertionFailedError.new&#xA;&#x9;exception.message := msg&#xA;&#x9;raise exception&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * raise a AssertionViolatedException with the provided message&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="msg" eType="//standard/String"/>
      </eOperations>
      <eOperations name="order" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if rank.isVoid then&#xA;&#x9;&#x9;rank := 0&#xA;&#xA;&#x9;end&#xA;&#x9;rank := rank.plus(1)&#xA;&#x9;result := rank&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * give the order number of the failed assert&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="rank" eType="//standard/Integer" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Test" abstract="true" eSuperTypes="//kunit/Assert">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Abstract class Test. Interface for single and composite object (TestCase and TestSuite)&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="run">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Execute all tests of the suite&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="r" eType="//kunit/TestResult"/>
      </eOperations>
      <eOperations name="setUp">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
          <details key="documentation" value="/** Called before a test is run to set up the needed environment */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="tearDown">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
          <details key="documentation" value="/** Called each time a test is run so that the testing environment is always&#xD;&#xA;  * tidy. */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="runTest">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * This method is an adapter that uses the pluggable selector TestCase.name to know which &#xD;&#xA;  * test to run&#xD;&#xA; */"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestCase" eSuperTypes="//kunit/Test">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * A test case contains a set of testOperations. &#xD;&#xA; * See TestRunner class to find how to run a TestCase.&#xD;&#xA; * Related design-pattern : Command&#xD;&#xA; *&#xD;&#xA; * An Example of TestCase : &#xD;&#xA; *&lt;pre> class MyTestCase inherits kermeta::kunit::TestCase&#xD;&#xA; * {&#xD;&#xA; *    attribute cString : String&#xD;&#xA; * &#xD;&#xA; *     method setUp() is do&#xD;&#xA; *    cString := &quot;String&quot;&#xD;&#xA; *     end&#xD;&#xA; *&#xD;&#xA; *    method tearDown() is do&#xD;&#xA; *        // We don't need to tearDown anything in this example.&#xD;&#xA; *    end&#xD;&#xA; *&#xD;&#xA; *    operation testStringAssignment() : Void is do&#xD;&#xA; *        var aString : String init &quot;String&quot;&#xD;&#xA; *        assert(aString==cString)&#xD;&#xA; *        // You can also add a message if assert fails :&#xD;&#xA; *        assertTrueWithMsg(aString==cString, &quot;expected aString == cString&quot;)&#xD;&#xA; *     end&#xD;&#xA; * }&#xD;&#xA; *&lt;/pre> &#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="initialize">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.name := name&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Initialize the test case&#xD;&#xA;  * params : &#xD;&#xA;  *   - name : the name of the test case : must be the name of the testOperation&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="name" eType="//standard/String"/>
      </eOperations>
      <eOperations name="run">
        <eAnnotations source="kermeta" references="//kunit/Test/run">
          <details key="body" value="do&#xA;&#x9;if r.isSameAs(void) then&#xA;&#x9;&#x9;r := createDefaultTestResult&#xA;&#xA;&#x9;end&#xA;&#x9;r.startTest(self)&#xA;&#x9;runTest&#xA;rescue(e : kermeta::kunit::AssertionFailedError)&#xA;&#x9;r.addFailure(self, e)&#xA;&#xA;rescue(e : kermeta::exceptions::Exception)&#xA;&#x9;r.addError(self, e)&#xA;&#xA;end"/>
          <details key="superOperation" value="kermeta::kunit::Test"/>
        </eAnnotations>
        <eParameters name="r" eType="//kunit/TestResult"/>
      </eOperations>
      <eOperations name="runTest">
        <eAnnotations source="kermeta" references="//kunit/Test/runTest">
          <details key="body" value="do&#xA;&#x9;var cDef : kermeta::language::structure::ClassDefinition&#xA;&#x9;cDef ?= self.getMetaClass.typeDefinition&#xA;&#x9;if cDef.ownedOperation.detect{o | o.name.isSameAs(name)}.isSameAs(void) then&#xA;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var de : kermeta::interpreter::DynamicExpression init kermeta::interpreter::DynamicExpression.new&#xA;&#x9;&#x9;de.initializeDefaults&#xA;&#x9;&#x9;var selfClassName : kermeta::standard::String init cDef.qualifiedName&#xA;&#x9;&#x9;de.parse(&quot;do var test : &quot;.plus(selfClassName).plus(&quot; init &quot;).plus(selfClassName).plus(&quot;.new&#xA;&quot;).plus(&quot;test.setUp &quot;).plus(&quot;&#xA;test.&quot;).plus(name).plus(&quot;&#xA;test.tearDown end&quot;))&#xA;&#x9;&#x9;de.execute(void, kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::standard::Object>.new)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::kunit::Test"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="createDefaultTestResult" eType="//kunit/TestResult">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::kunit::TestResult.new&#xA;&#x9;result.initialize&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="name" eType="//standard/String" containment="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** A name for the test case so that we know which one failed &#xD;&#xA;  *  This is a &quot;pluggable&quot; selector&#xD;&#xA; */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestResult">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Get the number of run tests, errors and failures that resulted from the launch of a &#xD;&#xA; * Test. (This is a minimal but functional class that can be improved)&#xD;&#xA; * Related design-pattern : Collecting parameter&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="initialize">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;runtests := 0&#xA;end"/>
          <details key="documentation" value="/** Set the runtests to 0 */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="startTest">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;runtests := 1.plus(runtests)&#xA;end"/>
          <details key="documentation" value="/** Increments the runtests counter */"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
      </eOperations>
      <eOperations name="addFailure">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;failures.add(createTestFailure(test, e))&#xA;end"/>
          <details key="documentation" value="/** Adds a failed test to the list of failed tests */"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
        <eParameters name="e" eType="//kunit/AssertionFailedError"/>
      </eOperations>
      <eOperations name="addError">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;errors.add(createTestFailure(test, e))&#xA;end"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
        <eParameters name="e" eType="//exceptions/Exception"/>
      </eOperations>
      <eOperations name="createTestFailure" eType="//kunit/TestFailure">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::kunit::TestFailure.new&#xA;&#x9;result.failedTest := test&#xA;&#x9;result.raised := e&#xA;end"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
        <eParameters name="e" eType="//exceptions/Exception"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="runtests" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** number of test that were run */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="failures" ordered="false" upperBound="-1" eType="//kunit/TestFailure">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** tests which assertions failed */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="errors" ordered="false" upperBound="-1" eType="//kunit/TestFailure">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** tests which errors were not assertion failures */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestFailure">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * An instance of this class is created when an assertion failed or an exception&#xD;&#xA; * was raised.&#xD;&#xA;*/"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="failedTest" eType="//kunit/Test"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="raised" eType="//exceptions/Exception"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestSuite" eSuperTypes="//kunit/Test">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * A test suite is composed of a set of tests (which can inherit either of TestSuite&#xD;&#xA; * or TestCase)&#xD;&#xA; * Related design-pattern : Composite&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="run">
        <eAnnotations source="kermeta" references="//kunit/Test/run">
          <details key="body" value="do&#xA;&#x9;tests.each{t | t.run(test_result)}&#xA;end"/>
          <details key="superOperation" value="kermeta::kunit::Test"/>
        </eAnnotations>
        <eParameters name="test_result" eType="//kunit/TestResult"/>
      </eOperations>
      <eOperations name="runTest">
        <eAnnotations source="kermeta" references="//kunit/Test/runTest">
          <details key="body" value="do&#xA;end"/>
          <details key="superOperation" value="kermeta::kunit::Test"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="addTest">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;tests.add(test)&#xA;end"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="tests" upperBound="-1" eType="//kunit/Test">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;  * The set of contained tests&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestLoader">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** */"/>
      </eAnnotations>
      <eOperations name="initialize" ordered="false">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;methodPrefix := &quot;test&quot;&#xA;&#x9;suiteClass := kermeta::kunit::TestSuite&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="loadTestMethodsFromTestCase" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::kunit::Test>.new&#xA;&#x9;var test_case : kermeta::kunit::TestCase&#xA;&#x9;var test_ops : kermeta::standard::Sequence&lt;kermeta::reflection::Operation>&#xA;&#x9;test_ops := test_type.ownedOperation.~select{o | o.name.size.isGreaterOrEqual(4).~and(o.name.substring(0, 4).isSameAs(methodPrefix))}&#xA;&#x9;test_ops.each{o | do&#xA;&#x9;&#x9;&#x9;test_case ?= test_type.new&#xA;&#x9;&#x9;&#x9;test_case.initialize(o.name)&#xA;&#x9;&#x9;&#x9;result.add(test_case)&#xA;&#x9;&#x9;end}&#xA;end"/>
          <details key="documentation" value="/** &#xD;&#xA;  * load in the testSuiteClass all the methods prefixed by test&#xD;&#xA;  * params :&#xD;&#xA;  *    - testCaseClass : the TestCase class where we get the testOperations&#xD;&#xA;  * // FIXME / I would like to do &quot;TestType inherits TestCase&quot;&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="kermeta::kunit::Test"/>
        </eAnnotations>
        <eParameters name="test_type" eType="//language/structure/Class"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="methodPrefix" eType="//standard/String" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="suiteClass" eType="//language/structure/Class"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestRunner">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * User instantiates this class to run a TestSuite or a TestCase&#xD;&#xA; * &#xD;&#xA; * Usage : &#xD;&#xA; * &#xD;&#xA; * Create a file, and add in the &quot;require&quot; place :&#xD;&#xA; * &lt;pre>require &quot;the_file_that_contains_the_tests.kmt&quot;&lt;/pre>&#xD;&#xA; *&#xD;&#xA; * Create a class, which will be the one that you will launch :&#xD;&#xA; * &lt;pre>&#xD;&#xA; * class MyTesterClass&#xD;&#xA; * {&#xD;&#xA; *   operation main() is do&#xD;&#xA; *     var testRunner : kermeta::kunit::TestRunner init kermeta::kunit::TestRunner.new&#xD;&#xA; *     // Here, we run our test case class called &quot;TestClass&quot;, &#xD;&#xA; *     // contained in the_file_that_contains_the_tests.kmt.&#xD;&#xA; *     // TestClass must inherit TestCase, or TestSuite&#xD;&#xA; *    testRunner.run(TestClass)&#xD;&#xA; *    testRunner.printTestResult&#xD;&#xA; * end&#xD;&#xA; * }&#xD;&#xA; * &lt;/pre>&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="initialize" ordered="false">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="createTestResult" eType="//kunit/TestResult">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::kunit::TestResult.new&#xA;&#x9;result.initialize&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="createTestLoader" eType="//kunit/TestLoader">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::kunit::TestLoader.new&#xA;&#x9;result.initialize&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="run" ordered="false">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var test_loader : kermeta::kunit::TestLoader init createTestLoader&#xA;&#x9;testResult := createTestResult&#xA;&#x9;if doesInheritFromTestCase(test_class).~not then&#xA;&#x9;&#x9;var msg : kermeta::standard::String init &quot;ERROR : the given class '&quot;.plus(test_class.typeDefinition.name).plus(&quot;' should inherit from TestCase&quot;)&#xA;&#x9;&#x9;stdio.writeln(msg)&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;var test_ops : kermeta::standard::Set&lt;kermeta::kunit::Test> init test_loader.loadTestMethodsFromTestCase(test_class)&#xA;&#x9;&#x9;var test_suite : kermeta::kunit::TestSuite init kermeta::kunit::TestSuite.new&#xA;&#x9;&#x9;test_suite.tests.addAll(test_ops)&#xA;&#x9;&#x9;test_suite.run(testResult)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/** Run a test suite from the given test case (test_class should be a class&#xD;&#xA;  * that inherits TestCase&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="test_class" eType="//language/structure/Class"/>
      </eOperations>
      <eOperations name="doesInheritFromTestCase" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if test_class.superClass.exists{c | c.equals(kermeta::kunit::TestCase)} then&#xA;&#x9;&#x9;result := true&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result := test_class.superClass.exists{c | doesInheritFromTestCase(c)}&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Recursively check if this class inherits from the class TestCase&#xD;&#xA;  * this function is not really for external usage &#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="test_class" eType="//reflection/Class"/>
      </eOperations>
      <eOperations name="printTestResult" ordered="false">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;stdio.writeln(&quot;&#xA;================================== TEST RESULTS ==================================&#xA;&quot;)&#xA;&#x9;stdio.writeln(&quot; Number of launched tests : &quot;.plus(testResult.runtests.toString))&#xA;&#x9;stdio.writeln(&quot; Number of failures : &quot;.plus(testResult.failures.size.toString))&#xA;&#x9;stdio.writeln(&quot; Number of errors : &quot;.plus(testResult.errors.size.toString))&#xA;&#x9;stdio.writeln(&quot;&#xA; Failed : &quot;)&#xA;&#x9;testResult.failures.each{f | do&#xA;&#x9;&#x9;&#x9;var tc : kermeta::kunit::TestCase&#xA;&#x9;&#x9;&#x9;tc ?= f.failedTest&#xA;&#x9;&#x9;&#x9;stdio.writeln(&quot;    ->&quot;.plus(tc.name).plus(&quot;( raised : &quot;).plus(f.raised.message).plus(&quot;)&quot;))&#xA;&#x9;&#x9;end}&#xA;&#x9;stdio.writeln(&quot; Errors : &quot;)&#xA;&#x9;testResult.errors.each{e | do&#xA;&#x9;&#x9;&#x9;var tc : kermeta::kunit::TestCase&#xA;&#x9;&#x9;&#x9;tc ?= e.failedTest&#xA;&#x9;&#x9;&#x9;stdio.writeln(&quot;    -> &quot;.plus(tc.name).plus(&quot;( raised : &quot;).plus(e.raised.toString).plus(&quot;)&quot;))&#xA;&#x9;&#x9;end}&#xA;&#x9;stdio.writeln(&quot;&#xA;==================================================================================&#xA;&quot;)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Prints in a text format the result of the tests launches &#xD;&#xA;  * TODO : a specific set of class that inherit TestResult and display&#xD;&#xA;  * it according to a specific format&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="testClass" eType="//language/structure/Class"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="testResult" eType="//kunit/TestResult"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="utils" nsURI="platform:/resource/TestRDL/framework.ecore#//utils" nsPrefix="utils">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/** &#xD;&#xA; * Contains special classes (Hashtable, Stack) that are not contained in Kermeta&#xD;&#xA; * metamodel&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="Hashtable">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * An implementation of hashtable&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="K" value="K"/>
        <details key="V" value="V"/>
      </eAnnotations>
      <eOperations name="size" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.size(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns size of the map&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="keyIterator" eType="//standard/Iterator">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.keysIterator(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns an iterator on the keys of the map&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="K"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="valueIterator" eType="//standard/Iterator">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.valueIterator(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns an iterator on the keys of the map&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="V"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getValue" eType="//standard/_KermetaSpecialTypesAlias_">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.get(self, key)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * returns the value for key 'key'&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariable">
          <details key="V" value="V"/>
        </eAnnotations>
        <eParameters name="key" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="K" value="K"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="put">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.put(self, key, ~value)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Adds a entry in the Hashtable&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="key" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="K" value="K"/>
          </eAnnotations>
        </eParameters>
        <eParameters name="value" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="V" value="V"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="remove">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.remove(self, key)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Removes the entry which key equals 'key'&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="key" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="K" value="K"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="clear">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.clear(self)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Remove all elements from the Hashtable&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="keys" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;K>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;K> init keyIterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;result.add(it.next)&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/** Return the keys of the Hashtable */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="K"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="values" eType="//standard/Collection">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;V>.new&#xA;&#x9;keys.each{k | result.add(self.getValue(k))}&#xA;end"/>
          <details key="documentation" value="/** Return the keys of the Hashtable */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="V"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="containsKey" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := getValue(key).isNotSameAs(void)&#xA;end"/>
          <details key="documentation" value="/** Tests if a key is present in the table */"/>
        </eAnnotations>
        <eParameters name="key" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="K" value="K"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Stack" eSuperTypes="//standard/Sequence">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * An implementation of stack&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeVariableBindings">
        <details key="kermeta::standard::Sequence&lt;G>" value="kermeta::standard::Sequence&lt;G>"/>
      </eAnnotations>
      <eAnnotations source="kermeta.typeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="push">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.addAt(0, element)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Push an element in the stack&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="element" eType="//standard/_KermetaSpecialTypesAlias_">
          <eAnnotations source="kermeta.typeVariable">
            <details key="G" value="G"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="peek" eType="//standard/_KermetaSpecialTypesAlias_">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.first&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Get the element at the top of the stack&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariable">
          <details key="G" value="G"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="pop" eType="//standard/_KermetaSpecialTypesAlias_">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := peek&#xA;&#x9;self.removeAt(0)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Get the element at the top of the stack and &#xD;&#xA;  * removes it from the stack&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariable">
          <details key="G" value="G"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="io" nsURI="platform:/resource/TestRDL/framework.ecore#//io" nsPrefix="io">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * Contains Input/Output related classes. &#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="StdIO">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * An implementation of StdIO : standard input/output&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="write">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if object.isSameAs(void) then&#xA;&#x9;&#x9;object := &quot;&lt;void>&quot;&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.write(object)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * write the object to standard output&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="object" eType="//standard/String"/>
      </eOperations>
      <eOperations name="writeln">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if object.isSameAs(void) then&#xA;&#x9;&#x9;object := &quot;&lt;void>&quot;&#xA;&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.writeln(object)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * writeln the object to standard output&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="object" eType="//standard/String"/>
      </eOperations>
      <eOperations name="read" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if prompt.isSameAs(void) then&#xA;&#x9;&#x9;prompt := &quot;&quot;&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.read(prompt)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * read an object from standard input&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="prompt" eType="//standard/String"/>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="kmem" nsURI="platform:/resource/TestRDL/framework.ecore#//kmem" nsPrefix="kmem">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * Contains Input/Output related classes. &#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="KMem">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * An implementation of KMem : ...&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="allInstancesOf" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if cl.isSameAs(void) then&#xA;&#x9;&#x9;result := void&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::KMem.allInstancesOf(cl)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * &#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="Object"/>
        </eAnnotations>
        <eParameters name="cl" eType="//reflection/Class"/>
      </eOperations>
      <eOperations name="allClassesOf" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if cDef.isSameAs(void) then&#xA;&#x9;&#x9;result := void&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::KMem.allClassesOf(cDef)&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * &#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="kermeta::language::structure::Class"/>
        </eAnnotations>
        <eParameters name="cDef" eType="//reflection/ClassDefinition"/>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="exceptions" nsURI="platform:/resource/TestRDL/framework.ecore#//exceptions" nsPrefix="exceptions">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/** &#xD;&#xA; * Contains the definition of a Kermeta exception and a few basic exceptions.&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="Exception">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Generic exceptions&#xD;&#xA; * The main class from which all the exception inherit&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="message" eType="//standard/String" containment="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;     * The message attached to the exception&#xD;&#xA;     */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="nestedException" eType="//exceptions/Exception" containment="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;     * Any nested exception&#xD;&#xA;     */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="stackTrace" eType="//standard/String" containment="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;     * The stack trace as a String&#xD;&#xA;     * Filled by the interpreted when the exception is raised&#xD;&#xA;     */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="RuntimeError" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Exception for interpreter exceptions&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="//language/behavior/Expression" containment="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;  * The code that raised the exception&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CallOnVoidTarget" eSuperTypes="//exceptions/RuntimeError">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Occurs when a feature is called on void&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NotImplementedException" eSuperTypes="//exceptions/RuntimeError">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Use this exception whenyou want to forbid the access to an unimplemented operation &#xD;&#xA; * and invite to implement it&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UpperBoundReachedError" eSuperTypes="//exceptions/RuntimeError">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** &#xD;&#xA; * Use this exception when user tries to add an element to a property which type is collection&#xD;&#xA; * which has an upper bound != -1 ( ie *)&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AbstractClassInstantiationError" eSuperTypes="//exceptions/RuntimeError">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Creation on an abstract class. Usually this is detected by the type-checker. The only&#xD;&#xA; * case where this happens is when instantiating a type variable, whose bound type turns&#xD;&#xA; * out to be abstract.&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DivisionByZero" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="OverflowError" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="StringIndexOutOfBound" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="IndexOutOfBound" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="EmptyCollection" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="IteratorIsOff" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="ConstraintViolatedPre" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="ConstraintViolatedPost" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="ConstraintViolatedInv" eSuperTypes="//exceptions/Exception"/>
  </eSubpackages>
  <eSubpackages name="interpreter" nsURI="platform:/resource/TestRDL/framework.ecore#//interpreter" nsPrefix="interpreter">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * Contains a set of classes whose function is to evaluate a kermeta &#xD;&#xA; * expression written as a string.&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="DynamicExpression">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * DynamicExpression is a class used to make dynamic calls, i.e dynamic evaluation&#xD;&#xA; * of Kermeta statements represented in a string.&#xD;&#xA; * &#xD;&#xA; * An example :&#xD;&#xA; *   var de : DynamicExpression init DynamicExpression.new&#xD;&#xA; *   de.initializeDefaults&#xD;&#xA; *   de.formalParameters.put(&quot;a&quot;, String)&#xD;&#xA; *   de.parse(&quot;stdio.writeln(a)&quot;) // note: to execute a list of statements, you have to surround them with do..end&#xD;&#xA; *   var params : Hashtable&lt;String, Object> init Hashtable&lt;String, Object>.new&#xD;&#xA; *   params.put(&quot;a&quot;, &quot;hello world!&quot;)&#xD;&#xA; *   de.execute(void, params)&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="initializeDefaults" ordered="false">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;formalParameters := kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::language::structure::Type>.new&#xA;&#x9;selfClass ?= kermeta::reflection::Object.typeDefinition&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * initialise the formalParameters with an empty set of parameters&#xD;&#xA;  * and the self type with void&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="parse" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;errors.clear&#xA;&#x9;if formalParameters.isSameAs(void).~or(selfClass.isSameAs(void)) then&#xA;&#x9;&#x9;var e : kermeta::interpreter::DynamicExpressionException init kermeta::interpreter::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;parse precondition - formalParameters or selfType is void&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::DynamicExpression.parse(self, expression)&#xA;&#x9;if errors.size.isNotSameAs(0) then&#xA;&#x9;&#x9;var e : kermeta::interpreter::DynamicExpressionException init kermeta::interpreter::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;parse result - expression contains errors&quot;&#xA;&#x9;&#x9;errors.each{error | e.message.append(&quot;&#xA;&quot;.plus(error.message))}&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Parse the expression as a string&#xD;&#xA;  * and updates the expression field and errors&#xD;&#xA;  * Returns true if the expression was parssed sucessfuly&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="expression" eType="//standard/String"/>
      </eOperations>
      <eOperations name="execute" eType="//standard/Object">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if expression.isSameAs(void) then&#xA;&#x9;&#x9;var e : kermeta::interpreter::DynamicExpressionException init kermeta::interpreter::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;execute precondition - expression is void&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;if errors.size.isNotSameAs(0) then&#xA;&#x9;&#x9;var e : kermeta::interpreter::DynamicExpressionException init kermeta::interpreter::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;execute precondition - expression contains errors&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::DynamicExpression.execute(self, selfObj, actualParams)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;     * Execute the expression in the given context&#xD;&#xA;     */"/>
        </eAnnotations>
        <eParameters name="selfObj" eType="//standard/Object"/>
        <eParameters name="actualParams" eType="//utils/Hashtable">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="kermeta::standard::String"/>
            <details key="1" value="Object"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eOperations name="evalString" eType="//standard/Object">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if parse(body).~not then&#xA;&#x9;&#x9;var e : kermeta::interpreter::DynamicExpressionException init kermeta::interpreter::DynamicExpressionException.new&#xA;&#x9;&#x9;e.message := &quot;evalString - expression contains errors&quot;&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;result := execute(selfObj, actualParams)&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;     * Execute the expression given as a string.&#xD;&#xA;     * the self type and formal parameters are supposed to be set&#xD;&#xA;     * before calling this operation&#xD;&#xA;     */"/>
        </eAnnotations>
        <eParameters name="body" eType="//standard/String"/>
        <eParameters name="selfObj" eType="//standard/Object"/>
        <eParameters name="actualParams" eType="//utils/Hashtable">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="kermeta::standard::String"/>
            <details key="1" value="Object"/>
          </eAnnotations>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="errors" upperBound="-1" eType="//interpreter/KermetaError">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;  * Parse errors and type errors&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="//language/behavior/Expression">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;  * the expression&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="selfClass" eType="//reflection/ClassDefinition">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;  * The type of the self object&#xD;&#xA;  * or void if the expression is not to be executed&#xD;&#xA;  * in the context of an object&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="formalParameters" eType="//utils/Hashtable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/**&#xD;&#xA;  * Formal parameters of the expression&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="kermeta::standard::String"/>
          <details key="1" value="kermeta::reflection::Type"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DynamicExpressionException" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="KermetaError" abstract="true">
      <eStructuralFeatures xsi:type="ecore:EReference" name="message" eType="//standard/String" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ParseError" eSuperTypes="//interpreter/KermetaError"/>
    <eClassifiers xsi:type="ecore:EClass" name="TypeError" eSuperTypes="//interpreter/KermetaError"/>
  </eSubpackages>
  <eSubpackages name="persistence" nsURI="platform:/resource/TestRDL/framework.ecore#//persistence" nsPrefix="persistence">
    <eAnnotations source="kermeta">
      <details key="documentation" value="/**&#xD;&#xA; * Contains the classes that handle the serialization of models, in particular&#xD;&#xA; * EMF models.&#xD;&#xA; */"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="Resource" abstract="true">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * The main class that handle a loaded/saved model.&#xD;&#xA; * There are a few important things to note for the developer :&#xD;&#xA; * &#xD;&#xA; * - load a Resource : this loads a Collection of instances corresponding to the&#xD;&#xA; *   objects in the loaded model. If the Collection of instances is empty, than &#xD;&#xA; *  a ResourceLoadException is raised&#xD;&#xA; *&#xD;&#xA; * - save a Resource : this saves the collection of instances in a new file. This can&#xD;&#xA; *   be correctly done if and only if the instances saved are conform to the metamodel&#xD;&#xA; *   linked to this resource (this link does not need to be explicit. It is normally retrieved&#xD;&#xA; *   through the EMF model -- see Java wrapping &quot;Resource.java&quot;).&#xD;&#xA; * &#xD;&#xA; * - add/remove an instance to the Resource : this adds an element in the resource. It cannot&#xD;&#xA; *   be &quot;simply&quot; added because of the following potential errors :&#xD;&#xA; *&#xD;&#xA; *   - The object added is not conform to the metamodel -> Error&#xD;&#xA; *   - The object was already added in the resource -> Not a real error : we do nothing&#xD;&#xA; *   - The object to remove does not exist -> redirect to a collection-specific error&#xD;&#xA; *   - The object to remove is attached to an object in the collection -> &quot;dependency-violation&quot; exception?&#xD;&#xA;&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="save">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** Save a resource in a file referenced by the uri associated to the resource */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="saveWithNewURI">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
          <details key="documentation" value="/** Save a resource in a file referenced by this new uri. &#xD;&#xA;     This allows to save the result of a transformation without changing the original file. */"/>
        </eAnnotations>
        <eParameters name="new_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="load">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** Loads a resource. Once loaded, you'll be able to query the resource for its instances.  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** Add an instance to the Resource ( this is only a shortcut to instances.add call)*/"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="remove" eType="//standard/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/** Remove an instance from the Resource */"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="uri" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** The uri of the model-instance to load */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="metaModelURI" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** The uri of the meta-model of the model-instance to load */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="includedResources" ordered="false" upperBound="-1" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** The includedResource if the model-instance &quot;inter-depends&quot; on other instances*/"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="instances" ordered="false" upperBound="-1" eType="//standard/Object">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="false"/>
          <details key="documentation" value="/** The entities contained in the model-instance, that are provided when user loads a resource &#xD;&#xA;  *  instances == rootContents&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="repository" eType="//persistence/Repository" eOpposite="//persistence/Repository/resources">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** The repository used to create this resource */"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="contentMap" eType="//utils/Hashtable">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** The hashtable that contains the contents loaded by the resource.&#xD;&#xA;  *  It is composed of 4 entries : &quot;rootContents&quot;, &quot;allRootContents&quot;, &quot;contents&quot;, &quot;allContents&quot;&#xD;&#xA;  *  The two last ones will be kept empty since resource-heavy&#xD;&#xA;  *  - rootContents : only the root elements of the &quot;main model&quot; hosted by the given resource&#xD;&#xA;  *  - allRootContents : the root elements of the main model&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta.typeVariableBindings">
          <details key="0" value="kermeta::standard::String"/>
          <details key="1" value="kermeta::standard::Set&lt;alias Object : kermeta::language::structure::Object;>"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="rootContents" ordered="false" upperBound="-1" eType="//standard/Object" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="false"/>
          <details key="documentation" value="/**&#xD;&#xA;  *  - returns the rootContents of the model saved in/loaded from the given uri, excluding&#xD;&#xA;  *  the models from the dependent resources&#xD;&#xA;  */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;result := contentMap.getValue(&quot;rootContents&quot;)&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="allRootContents" ordered="false" upperBound="-1" eType="//standard/Object" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="false"/>
          <details key="documentation" value="/** - returns the rootContents of the model saved in/loaded from the given uri, including&#xD;&#xA;  *  the models from the dependent resources */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;result := contentMap.getValue(&quot;allRootContents&quot;)&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="contents" ordered="false" upperBound="-1" eType="//standard/Object" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="false"/>
          <details key="documentation" value="/** - returns all the model elements hosted by this resource, excluding elements from the&#xD;&#xA;   * dependent resources */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;result := contentMap.getValue(&quot;contents&quot;).union(contentMap.getValue(&quot;rootContents&quot;))&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="allContents" ordered="false" upperBound="-1" eType="//standard/Object" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="kermeta">
          <details key="isComposite" value="false"/>
          <details key="documentation" value="/** - returns all the model elements hosted by this resource, including elements from the&#xD;&#xA;   * dependent resources */"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermetaderivedProp.getter">
          <details key="body" value="do&#xA;&#x9;result := contentMap.getValue(&quot;allContents&quot;).union(contentMap.getValue(&quot;allRootContents&quot;))&#xA;end"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EMFResource" eSuperTypes="//persistence/Resource">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Extension of the Resource class definition that is specific to EMF Repository.&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="initializeContentMap" ordered="false">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;contentMap := kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::standard::Set&lt;kermeta::standard::Object>>.new&#xA;&#x9;contentMap.put(&quot;rootContents&quot;, kermeta::standard::Set&lt;kermeta::standard::Object>.new)&#xA;&#x9;contentMap.put(&quot;allRootContents&quot;, kermeta::standard::Set&lt;kermeta::standard::Object>.new)&#xA;&#x9;contentMap.put(&quot;contents&quot;, kermeta::standard::Set&lt;kermeta::standard::Object>.new)&#xA;&#x9;contentMap.put(&quot;allContents&quot;, kermeta::standard::Set&lt;kermeta::standard::Object>.new)&#xA;end"/>
          <details key="documentation" value="/** &#xD;&#xA;  * Create an hashtable with appropriates keys and empty collections. This method &#xD;&#xA;  * should not be called by the end-user&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="saveWithNewURI">
        <eAnnotations source="kermeta" references="//persistence/Resource/saveWithNewURI">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self, new_uri, metaModelURI, &quot;EMF&quot;, instances, false)&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="new_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="save">
        <eAnnotations source="kermeta" references="//persistence/Resource/save">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self, self.uri, metaModelURI, &quot;EMF&quot;, instances, false)&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="saveAndValidateWithEMF" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self, self.uri, metaModelURI, &quot;EMF&quot;, instances, true)&#xA;end"/>
          <details key="documentation" value="/** save and check the resource using the EMF validation function&#xD;&#xA;  * apply the validate on all the object in the root of this resource&#xD;&#xA;  * returns true if the validation reports no error&#xD;&#xA;  * otherwise raises exceptions&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="load">
        <eAnnotations source="kermeta" references="//persistence/Resource/load">
          <details key="body" value="do&#xA;&#x9;var e : kermeta::persistence::ResourceLoadException init kermeta::persistence::ResourceLoadException.new&#xA;&#x9;contentMap ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.load(uri, metaModelURI, &quot;EMF&quot;, contentMap)&#xA;&#x9;if contentMap.getValue(&quot;allRootContents&quot;).size.isSameAs(0) then&#xA;&#x9;&#x9;stdio.writeln(&quot;Resource load failed!&quot;)&#xA;&#x9;&#x9;raise e&#xA;&#xA;&#x9;end&#xA;&#x9;instances.clear&#xA;&#x9;instances.addAll(rootContents)&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="add">
        <eAnnotations source="kermeta" references="//persistence/Resource/add">
          <details key="body" value="do&#xA;&#x9;instances.add(instance)&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="remove" eType="//standard/Object">
        <eAnnotations source="kermeta" references="//persistence/Resource/remove">
          <details key="body" value="do&#xA;&#x9;if instances.contains(instance) then&#xA;&#x9;&#x9;instances.remove(instance)&#xA;&#x9;&#x9;result := instance&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;result := void&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isInTypeDefSet" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := false&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;kermeta::reflection::TypeDefinition> init tparams.iterator&#xA;&#x9;until it.isOff.~or(result.isSameAs(true))&#xA;&#x9;loop&#xA;&#x9;&#x9;var next : kermeta::language::structure::TypeDefinition&#xA;&#x9;&#x9;next ?= it.next&#xA;&#x9;&#x9;if next.qualifiedName.equals(new_instance.getMetaClass.typeDefinition.qualifiedName) then&#xA;&#x9;&#x9;&#x9;result := true&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Helper that returns true if new_instance type is in the tparam Set, false otherwise&#xD;&#xA;  * FIXME : Loop-and-cast done in order to temporarily get round the type &#xD;&#xA;  * system limits for reflection&#xD;&#xA; */"/>
        </eAnnotations>
        <eParameters name="tparams" eType="//standard/Set">
          <eAnnotations source="kermeta.typeVariableBindings">
            <details key="0" value="kermeta::reflection::TypeDefinition"/>
          </eAnnotations>
        </eParameters>
        <eParameters name="new_instance" eType="//standard/Object"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="KMResource" eSuperTypes="//persistence/Resource">
      <eOperations name="save">
        <eAnnotations source="kermeta" references="//persistence/Resource/save">
          <details key="body" value="do&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="load">
        <eAnnotations source="kermeta" references="//persistence/Resource/load">
          <details key="body" value="do&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="add">
        <eAnnotations source="kermeta" references="//persistence/Resource/add">
          <details key="body" value="do&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="remove" eType="//standard/Object">
        <eAnnotations source="kermeta" references="//persistence/Resource/remove">
          <details key="body" value="do&#xA;&#x9;result := void&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Repository" abstract="true">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Abstract resource container, that contains a list of available loaded resources, &#xD;&#xA; * and methods to create or get a resource given an URI.&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="createResource" eType="//persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Create a new resource for a model given by its uri, &#xD;&#xA;  * which meta-model is stored in file given by mm_uri&#xD;&#xA;  * If file already exists, you'll be able to call the load method to concretly load the model&#xD;&#xA;  * otherwise, you can only call the save method&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
        <eParameters name="mm_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="getResource" eType="//persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;kermeta::persistence::Resource> init resources.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;&#x9;&#x9;var next : kermeta::persistence::Resource init it.next&#xA;&#x9;&#x9;if uri.equals(next.uri) then&#xA;&#x9;&#x9;&#x9;result := next&#xA;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;if result.isSameAs(void) then&#xA;&#x9;&#x9;result := self.createResource(uri, &quot;&quot;)&#xA;&#x9;&#x9;result.load&#xA;&#xA;&#x9;end&#xA;end"/>
          <details key="documentation" value="/**&#xD;&#xA;  * Get the resource of model that is stored in the given uri. Silently create&#xD;&#xA;  * and load a new one if a resource with this uri was not found.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="resources" ordered="false" upperBound="-1" eType="//persistence/Resource" containment="true" eOpposite="//persistence/Resource/repository">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** The resources created by this repository */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EMFRepository" eSuperTypes="//persistence/Repository">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Repository that stores and manages resources that come from EMF&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="createResource" eType="//persistence/Resource">
        <eAnnotations source="kermeta" references="//persistence/Repository/createResource">
          <details key="body" value="do&#xA;&#x9;var new_resource : kermeta::persistence::EMFResource init kermeta::persistence::EMFResource.new&#xA;&#x9;new_resource.uri := uri&#xA;&#x9;new_resource.metaModelURI := mm_uri&#xA;&#x9;new_resource.repository := self&#xA;&#x9;new_resource.initializeContentMap&#xA;&#x9;result := new_resource&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Repository"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
        <eParameters name="mm_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="getResource" eType="//persistence/Resource">
        <eAnnotations source="kermeta" references="//persistence/Repository/getResource">
          <details key="body" value="do&#xA;&#x9;result := super(uri)&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Repository"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="useInterpreterInternalResources" eType="//standard/Boolean" containment="true">
        <eAnnotations source="kermeta">
          <details key="documentation" value="/** &#xD;&#xA;  * If true, tells to the save of the resources that they should also integrate the resources from Kermeta interpreter itself&#xD;&#xA;  * this is usefull for example to make a dependency to framework.km&#xD;&#xA;  * by default, not setting this is considered as false.&#xD;&#xA;  */"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="KMRepository" eSuperTypes="//persistence/Repository">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/**&#xD;&#xA; * Repository that stores and manages XMI files representing Kermeta models&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="createResource" eType="//persistence/Resource">
        <eAnnotations source="kermeta" references="//persistence/Repository/createResource">
          <details key="body" value="do&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Repository"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
        <eParameters name="mm_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="getResource" eType="//persistence/Resource">
        <eAnnotations source="kermeta" references="//persistence/Repository/getResource">
          <details key="body" value="do&#xA;end"/>
          <details key="superOperation" value="kermeta::persistence::Repository"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ResourceLoadException" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Specialized exceptions */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ResourceSaveException" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="ResourceUnconformityException" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="documentation" value="/** Raised when user tries to add an object that is not conform to the metamodel */"/>
      </eAnnotations>
    </eClassifiers>
  </eSubpackages>
</ecore:EPackage>
