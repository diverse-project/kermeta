<?xml version="1.0" encoding="ASCII"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="kermeta" nsURI="./framework.ecore" nsPrefix="kermeta">
  <eSubpackages name="standard">
    <eClassifiers xsi:type="ecore:EClass" name="Void">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The class Void &#xD;&#xA; * By convention it is a sub-type of everything&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The class Void &#xD;&#xA; * By convention it is a sub-type of everything&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="isVoid" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := true&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := &quot;&lt;void>&quot;&#xA;end"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ValueType">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The abstract class ValueType does not contain any feature&#xD;&#xA; * but any instance of a sub-class of ValueType will be passed by value &#xD;&#xA; * instead of by reference for any other objects.&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The abstract class ValueType does not contain any feature&#xD;&#xA; * but any instance of a sub-class of ValueType will be passed by value &#xD;&#xA; * instead of by reference for any other objects.&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Comparable">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The abstract class Comparable defines a set of operation&#xD;&#xA; * to compare instances of a class.&#xD;&#xA; * Sub-classes only has to implement abstract operation compareTo.&#xD;&#xA; * All other methods are defined w.r.t. the compareTo operation&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The abstract class Comparable defines a set of operation&#xD;&#xA; * to compare instances of a class.&#xD;&#xA; * Sub-classes only has to implement abstract operation compareTo.&#xD;&#xA; * All other methods are defined w.r.t. the compareTo operation&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="compareTo" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * This method should be implemented by any class that inherits&#xD;&#xA;  * from Comparable.&#xD;&#xA;  * returns 0 if self = other&#xD;&#xA;  * returns > 0 if  self > other&#xD;&#xA;  * returns &lt; 0 if  self &lt; other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Comparison&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Comparaison&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Comparaison&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * This method should be implemented by any class that inherits&#xD;&#xA;  * from Comparable.&#xD;&#xA;  * returns 0 if self = other&#xD;&#xA;  * returns > 0 if  self > other&#xD;&#xA;  * returns &lt; 0 if  self &lt; other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Comparison&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Comparaison&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Comparaison&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isGreater" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.compareTo(other).isGreater(0)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self > other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self > other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self > other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self > other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isLower" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.compareTo(other).isLower(0)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self &lt; other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self &lt; other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self &lt; other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self &lt; other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isLowerOrEqual" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.compareTo(other).isLowerOrEqual(0)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self &lt;= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self &lt;= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self &lt;= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self &lt;= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isGreaterOrEqual" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.compareTo(other).isGreaterOrEqual(0)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self >= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self >= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self >= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return true if self >= other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NotComparableException" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="Boolean">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The Boolean type&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The Boolean type&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Boolean) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.equals(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="and" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~and(self, other)&#xA;end"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="not" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~not(self)&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="or" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Boolean.~or(self, other)&#xA;end"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := if self then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&quot;true&quot;&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&quot;false&quot;&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Numeric" eSuperTypes="//standard/Comparable //standard/ValueType">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The abstract class Numeric is the root class for all&#xD;&#xA; * numeric types&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The abstract class Numeric is the root class for all&#xD;&#xA; * numeric types&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Integer" eSuperTypes="//standard/Numeric">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The class Integer&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The class Integer&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="times">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;from var i : kermeta::standard::Integer init 0&#xA;&#x9;until i.equals(self)&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;body(i)&#xA;&#x9;&#x9;&#x9;i := i.plus(1)&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Iteration&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Iteration&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="body"/>
      </eOperations>
      <eOperations name="compareTo" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::standard::NotComparableException.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.compareTo(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Comparable/compareTo">
          <details key="SuperOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.equals(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/equals">
          <details key="SuperOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="plus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.plus(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self + other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self + other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="minus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.minus(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self - other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self - other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="mult" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.times(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self * other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self * other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="div" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(0) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.div(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self / other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self / other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="mod" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(0) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::DivisionByZero.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.mod(self, other)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self modulo other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self modulo other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="uminus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := 0.minus(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns -self&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns -self&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toReal" eType="//standard/Real">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toReal(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Convert self as a Real&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Convert self as a Real&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isGreater" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreater(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Comparable/isGreater">
          <details key="SuperOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isLower" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLower(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Comparable/isLower">
          <details key="SuperOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isLowerOrEqual" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isLowerOrEqual(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Comparable/isLowerOrEqual">
          <details key="SuperOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isGreaterOrEqual" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Integer) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.isGreaterOrEqual(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Comparable/isGreaterOrEqual">
          <details key="SuperOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Integer.toString(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/toString">
          <details key="SuperOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Real" eSuperTypes="//standard/Numeric">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * class Real&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * class Real&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="plus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.plus(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self + other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self + other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Numeric"/>
      </eOperations>
      <eOperations name="minus" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.minus(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self - other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self - other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Numeric"/>
      </eOperations>
      <eOperations name="mult" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.times(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self * other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self * other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Numeric"/>
      </eOperations>
      <eOperations name="div" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.div(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self / other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns self / other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Numeric"/>
      </eOperations>
      <eOperations name="toInteger" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toInteger(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Convert self as a Real&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Convert self as a Real&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="uminus" eType="//standard/Numeric">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := 0.toReal.minus(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns -self&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns -self&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Real.toString(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/toString">
          <details key="SuperOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Character" eSuperTypes="//standard/ValueType //standard/Comparable">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The class Character&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The class Character&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="compareTo" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.compareTo(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Comparable/compareTo">
          <details key="SuperOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::Character) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.equals(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/equals">
          <details key="SuperOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Character.toString(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/toString">
          <details key="SuperOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="String" eSuperTypes="//standard/ValueType //standard/Comparable">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The class String&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The class String&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="compareTo" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.compareTo(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Comparable/compareTo">
          <details key="SuperOperation" value="kermeta::standard::Comparable"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="equals" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.getMetaClass.isNotEqual(kermeta::standard::String) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := false&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.equals(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/equals">
          <details key="SuperOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="plus" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.plus(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns a new string self + other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns a new string self + other&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/String"/>
      </eOperations>
      <eOperations name="append">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if other.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::String.append(self, other)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Appends other at the end of self&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Appends other at the end of self&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="other" eType="//standard/String"/>
      </eOperations>
      <eOperations name="elementAt" eType="//standard/Character">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(self.size.minus(1))) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::StringIndexOutOfBound.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.elementAt(self, index)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the character at index in the String&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the character at index in the String&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="indexOf" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.indexOf(self, str)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the index within this string of the first &#xD;&#xA;  * occurrence of the specified substring&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the index within this string of the first &#xD;&#xA;  * occurrence of the specified substring&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="str" eType="//standard/String"/>
      </eOperations>
      <eOperations name="substring" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if startIndex.isGreaterOrEqual(0).~and(startIndex.isLowerOrEqual(self.size)).~and(endIndex.isLowerOrEqual(self.size)).~and(endIndex.isGreaterOrEqual(startIndex)) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.substring(self, startIndex, endIndex)&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::StringIndexOutOfBound.new&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns a new string that is a substring of this string&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns a new string that is a substring of this string&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="startIndex" eType="//standard/Integer"/>
        <eParameters name="endIndex" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="size" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::String.size(self)&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/toString">
          <details key="SuperOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Integer"/>
    <eClassifiers xsi:type="ecore:EDataType" name="Object" instanceClassName="java.lang.Object">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::language::structure::Object"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Collection">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Collection is the root class for all metacore collections&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Collection is the root class for all metacore collections&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.add(self, element)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Add an element in the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * The method 'add' adds the element in the Set&#xD;&#xA;  * only if it is not yet in the set&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Select the method add from Set&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Add an element in the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * The method 'add' adds the element in the Set&#xD;&#xA;  * only if it is not yet in the set&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Select the method add from Set&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="remove">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var elem : G init self.detect{e | do&#xA;&#x9;&#x9;&#x9;e.equals(element)&#xA;&#x9;&#x9;end}&#xA;&#x9;if elem.isNotEqual(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.remove(self, elem)&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Remove an element from the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Remove an element from the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="clear">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.clear(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Remove all elements from the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Remove all elements from the collection&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="addAll">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;elements.each{element | do&#xA;&#x9;&#x9;&#x9;self.add(element)&#xA;&#x9;&#x9;end}&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Add all elements from the collection elements in the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Add all elements from the collection elements in the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="elements" eType="//standard/Collection"/>
      </eOperations>
      <eOperations name="contains" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := false&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff.~or(result)&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;result := it.next.equals(element)&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns true if the collection contains element&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns true if the collection contains element&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="size" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.size(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the number of elements in the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the number of elements in the collection&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="empty" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.size.equals(0)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns true if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns true if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="iterator" eType="//standard/Iterator">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Collection.iterator(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns an iterator on the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns an iterator on the collection&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="one">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.size.equals(0) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;result := it.next&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns an element from the collection or void&#xD;&#xA;  * if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns an element from the collection or void&#xD;&#xA;  * if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="each">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;func(it.next)&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * runs func on each element of the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * runs func on each element of the collection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="func"/>
      </eOperations>
      <eOperations name="forAll" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var test : kermeta::standard::Boolean init true&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;test := test.~and(func(it.next))&#xA;&#x9;&#x9;end&#x9;end&#xA;&#x9;result := test&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * checks that the condition is true on all the element of the collection&#xD;&#xA;  * returns true if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * checks that the condition is true on all the element of the collection&#xD;&#xA;  * returns true if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="func"/>
      </eOperations>
      <eOperations name="exists" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var test : kermeta::standard::Boolean init false&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff.~or(test.isNotEqual(false))&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;test := test.~or(func(it.next))&#xA;&#x9;&#x9;end&#x9;end&#xA;&#x9;result := test&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * checks that the condition is true for at least one element of the collection&#xD;&#xA;  * returns false if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * checks that the condition is true for at least one element of the collection&#xD;&#xA;  * returns false if the collection is empty&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="func"/>
      </eOperations>
      <eOperations name="collect" eType="//standard/Sequence">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Sequence&lt;T>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;result.add(collector(it.next))&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns a new Collection with the results of running collector &#xD;&#xA;  * once for every element in self.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns a new Collection with the results of running collector &#xD;&#xA;  * once for every element in self.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="KermetaTypeParameters">
          <details key="T" value="T"/>
        </eAnnotations>
        <eParameters name="collector"/>
      </eOperations>
      <eOperations name="detect">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var elem : G&#xA;&#x9;result := void&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff.~or(result.isNotEqual(void))&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;&#x9;if detector(elem) then&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result := elem&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Passes each element of the collection to detector. &#xD;&#xA;  * Returns the first element for which detector is not false. &#xD;&#xA;  * Returns void if no object matches.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Passes each element of the collection to detector. &#xD;&#xA;  * Returns the first element for which detector is not false. &#xD;&#xA;  * Returns void if no object matches.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="detector"/>
      </eOperations>
      <eOperations name="select" eType="//standard/Sequence">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var elem : G&#xA;&#x9;result := kermeta::standard::Sequence&lt;G>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;G> init self.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;elem := it.next&#xA;&#x9;&#x9;&#x9;if selector(elem) then&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(elem)&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Passes each element of the collection to selector. &#xD;&#xA;  * returns a Collection for all elements for which selector is true&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Passes each element of the collection to selector. &#xD;&#xA;  * returns a Collection for all elements for which selector is true&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="selector"/>
      </eOperations>
      <eOperations name="reject" eType="//standard/Sequence">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.~select{elem | do&#xA;&#x9;&#x9;&#x9;rejector(elem).~not&#xA;&#x9;&#x9;end}&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Passes each element of the collection to rejector. &#xD;&#xA;  * returns a Collection for all elements for which rejector is false&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Passes each element of the collection to rejector. &#xD;&#xA;  * returns a Collection for all elements for which rejector is false&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="rejector"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Set" eSuperTypes="//standard/Collection">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * A Set is a collection that contains distinct elements&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * A Set is a collection that contains distinct elements&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.contains(element).~not then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;super(element)&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Collection/add">
          <details key="SuperOperation" value="kermeta::standard::Collection"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Bag" eSuperTypes="//standard/Collection">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * A Bag is a Collection&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * A Bag is a Collection&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OrderedCollection" eSuperTypes="//standard/Collection">
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="addAt">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(self.size)) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.addAt(self, index, element)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * adds element in the OrderedCollection at index&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * overides addAt to ensure element uniqueness&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * adds element in the OrderedCollection at index&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * overides addAt to ensure element uniqueness&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="removeAt">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(self.size.minus(1))) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.removeAt(self, index)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * removes the element at index of the OrderedCollection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * removes the element at index of the OrderedCollection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="elementAt">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if index.isLower(0).~or(index.isGreater(self.size.minus(1))) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::IndexOutOfBound.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::OrderedCollection.elementAt(self, index)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the element at index in the OrderedCollection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the element at index in the OrderedCollection&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
      </eOperations>
      <eOperations name="first">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.size.equals(0) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;result := self.elementAt(0)&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="last">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.size.equals(0) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::EmptyCollection.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;result := self.elementAt(self.size.minus(1))&#xA;end"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OrderedSet" eSuperTypes="//standard/Set //standard/OrderedCollection">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * class OrderedSet&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * class OrderedSet&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add" ordered="false" upperBound="0">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;super(element)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Set/add">
          <details key="SuperOperation" value="kermeta::standard::Set"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="addAt">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.contains(element).~not then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;super(index, element)&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/OrderedCollection/addAt">
          <details key="SuperOperation" value="kermeta::standard::OrderedCollection"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
        <eParameters name="element"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Sequence" eSuperTypes="//standard/Bag //standard/OrderedCollection">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * class Sequence&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * class Sequence&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Iterator">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Iterator&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Iterator&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="isOff" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.hasNext.~not&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Returns true if the iterator is on the last element&#xD;&#xA;  * i.e. returns not self.hasNext()&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Returns true if the iterator is on the last element&#xD;&#xA;  * i.e. returns not self.hasNext()&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="hasNext" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Iterator.hasNext(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns true if the iterator has a next element&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns true if the iterator has a next element&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="next">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.hasNext.~not then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::IteratorIsOff.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Iterator.next(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the next element of the iterator&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the next element of the iterator&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="language">
    <eClassifiers xsi:type="ecore:EClass" name="ReflectiveCollection" eSuperTypes="//standard/Set">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * ReflectiveCollection&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.add(self, element)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Set/add">
          <details key="SuperOperation" value="kermeta::standard::Set"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="remove">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.remove(self, element)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Collection/remove">
          <details key="SuperOperation" value="kermeta::standard::Collection"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="clear">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveCollection.clear(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/Collection/clear">
          <details key="SuperOperation" value="kermeta::standard::Collection"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ReflectiveSequence" eSuperTypes="//standard/OrderedSet //language/ReflectiveCollection">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * ReflectiveSequence&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;super(element)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//language/ReflectiveCollection/add">
          <details key="SuperOperation" value="kermeta::language::ReflectiveCollection"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="remove">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;super(element)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//language/ReflectiveCollection/remove">
          <details key="SuperOperation" value="kermeta::language::ReflectiveCollection"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="clear">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;super()&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//language/ReflectiveCollection/clear">
          <details key="SuperOperation" value="kermeta::language::ReflectiveCollection"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="addAt">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveSequence.addAt(self, index, element)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/OrderedSet/addAt">
          <details key="SuperOperation" value="kermeta::standard::OrderedSet"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="removeAt">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::ReflectiveSequence.removeAt(self, index)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//standard/OrderedCollection/removeAt">
          <details key="SuperOperation" value="kermeta::standard::OrderedCollection"/>
        </eAnnotations>
        <eParameters name="index" eType="//standard/Integer"/>
      </eOperations>
    </eClassifiers>
    <eSubpackages name="structure">
      <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String"/>
      <eClassifiers xsi:type="ecore:EClass" name="Object" eSuperTypes="//reflection/Object //language/structure/KMStructureVisitable">
        <eOperations name="getMetaClass" eType="//reflection/Class">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.getMetaClass(self)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/getMetaClass">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="container" eType="//reflection/Object">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Object.container(self)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/container">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.equals(self, element)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/equals">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="element" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="isNotEqual" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := self.equals(element).~not&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/isNotEqual">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="element" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="get" eType="//reflection/Object">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Object.get(self, ~property)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/get">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="property" eType="//reflection/Property"/>
        </eOperations>
        <eOperations name="set">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.~set(self, ~property, element)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/set">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="property" eType="//reflection/Property"/>
          <eParameters name="element" eType="//reflection/Object"/>
        </eOperations>
        <eOperations name="isSet" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isSet(self, ~property)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/isSet">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="property" eType="//reflection/Property"/>
        </eOperations>
        <eOperations name="unset">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.unSet(self, ~property)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/unset">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
          <eParameters name="property" eType="//reflection/Property"/>
        </eOperations>
        <eOperations name="oid" eType="//language/structure/Integer">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.oid(self)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/oid">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" eType="//language/structure/String">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := &quot;[&quot;.plus(self.getMetaClass.classDefinition.qualifiedName).plus(&quot;:&quot;).plus(self.oid.toString).plus(&quot;]&quot;)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/toString">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isFrozen" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Object.isFrozen(self)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/isFrozen">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isVoid" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := false&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/isVoid">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="freeze">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::language::Object.freeze(self)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/freeze">
            <details key="SuperOperation" value="kermeta::reflection::Object"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean"/>
      <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer"/>
      <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="//language/structure/Type //reflection/Class //language/structure/KMStructureVisitable">
        <eOperations name="new" eType="//reflection/Object">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Class.newObject(self)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Class/new">
            <details key="SuperOperation" value="kermeta::reflection::Class"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Class.cloneObject(self, objectToClone)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/Type/clone">
            <details key="SuperOperation" value="kermeta::language::structure::Type"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="deepClone" eType="//language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::Class.deepCloneObject(self, objectToClone)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/Type/deepClone">
            <details key="SuperOperation" value="kermeta::language::structure::Type"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="isInstance" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.isInstance(self, object)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Type/isInstance">
            <details key="SuperOperation" value="kermeta::reflection::Type"/>
          </eAnnotations>
          <eParameters name="object" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="isSubType" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.isSubType(self, object)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//reflection/Type/isSubType">
            <details key="SuperOperation" value="kermeta::reflection::Type"/>
          </eAnnotations>
          <eParameters name="object" eType="//reflection/Type"/>
        </eOperations>
        <eOperations name="equals" eType="//language/structure/Boolean">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::Class.equals(self, other)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/Object/equals">
            <details key="SuperOperation" value="kermeta::language::structure::Object"/>
          </eAnnotations>
          <eParameters name="other" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitClass(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" eSuperTypes="//language/structure/TypedElement //reflection/MultiplicityElement //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitMultiplicityElement(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="//language/structure/MultiplicityElement //reflection/Operation //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitOperation(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Tag" eSuperTypes="//language/structure/Object //reflection/Tag //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTag(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="//language/structure/MultiplicityElement //reflection/Property //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitProperty(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="getterbody" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="setterbody" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeContainer" eSuperTypes="//language/structure/Object //reflection/TypeContainer"/>
      <eClassifiers xsi:type="ecore:EClass" name="ClassDefinition" eSuperTypes="//language/structure/TypeContainer //language/structure/TypeDefinition //reflection/ClassDefinition //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitClassDefinition(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypedElement" eSuperTypes="//language/structure/TypeContainer //language/structure/NamedElement //reflection/TypedElement //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypedElement(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeVariable" eSuperTypes="//language/structure/TypeContainer //language/structure/Type //language/structure/NamedElement //reflection/TypeVariable //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeVariable(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ProductType" eSuperTypes="//language/structure/TypeContainer //language/structure/Type //reflection/ProductType //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitProductType(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FunctionType" eSuperTypes="//language/structure/TypeContainer //language/structure/Type //reflection/FunctionType //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitFunctionType(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Type" eSuperTypes="//language/structure/Object //reflection/Type //language/structure/KMStructureVisitable">
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="deepClone" eType="//language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitType(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeVariableBinding" eSuperTypes="//language/structure/TypeContainer //language/structure/Object //reflection/TypeVariableBinding //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeVariableBinding(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="//language/structure/TypeContainer //language/structure/DataType //reflection/PrimitiveType //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitPrimitiveType(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/DataType/clone">
            <details key="SuperOperation" value="kermeta::language::structure::DataType"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NamedElement" eSuperTypes="//language/structure/Object //reflection/NamedElement //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitNamedElement(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SelfType" eSuperTypes="//language/structure/Type //reflection/SelfType //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitSelfType(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="//language/structure/NamedElement //reflection/Package //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitPackage(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeDefinition" eSuperTypes="//language/structure/NamedElement //reflection/TypeDefinition //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeDefinition(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VoidType" eSuperTypes="//language/structure/Type //reflection/VoidType //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitVoidType(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DataType" eSuperTypes="//language/structure/TypeDefinition //language/structure/Type //reflection/DataType //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitDataType(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/Type/clone">
            <details key="SuperOperation" value="kermeta::language::structure::Type"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="//language/structure/DataType //reflection/Enumeration //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitEnumeration(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="clone" eType="//language/structure/Object">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;raise &quot;NOT IMPLEMENTED&quot;&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/DataType/clone">
            <details key="SuperOperation" value="kermeta::language::structure::DataType"/>
          </eAnnotations>
          <eParameters name="objectToClone" eType="//language/structure/Object"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="//language/structure/NamedElement //reflection/EnumerationLiteral //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitEnumerationLiteral(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="//language/structure/MultiplicityElement //reflection/Parameter //language/structure/KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitParameter(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/structure/KMStructureVisitable/acceptKMStructureVisitor">
            <details key="SuperOperation" value="kermeta::language::structure::KMStructureVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Object">
        <eAnnotations source="kermeta">
          <details key="alias" value="kermeta::standard::UnlimitedNatural"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMStructureVisitor">
        <eAnnotations source="KermetaTypeParameters">
          <details key="ContextType" value="ContextType"/>
          <details key="ResultType" value="ResultType"/>
        </eAnnotations>
        <eOperations name="visitClass">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Class"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitMultiplicityElement">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/MultiplicityElement"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitOperation">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Operation"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitTag">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Tag"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitProperty">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Property"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitClassDefinition">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/ClassDefinition"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitTypedElement">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/TypedElement"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitTypeVariable">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/TypeVariable"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitProductType">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/ProductType"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitFunctionType">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/FunctionType"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitType">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Type"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitTypeVariableBinding">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/TypeVariableBinding"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitPrimitiveType">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/PrimitiveType"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitNamedElement">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/NamedElement"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitSelfType">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/SelfType"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitPackage">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Package"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitTypeDefinition">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/TypeDefinition"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitVoidType">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/VoidType"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitDataType">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/DataType"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitEnumeration">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Enumeration"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitEnumerationLiteral">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/EnumerationLiteral"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitParameter">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/structure/Parameter"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMStructureVisitable">
        <eOperations name="acceptKMStructureVisitor">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/structure/KMStructureVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="behavior">
      <eClassifiers xsi:type="ecore:EClass" name="CallExpression" eSuperTypes="//language/behavior/Expression">
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" ordered="false" upperBound="-1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//reflection/String"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="staticTypeVariableBindings" upperBound="-1" eType="//language/structure/Type"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Expression" eSuperTypes="//reflection/Object //reflection/TypeContainer">
        <eStructuralFeatures xsi:type="ecore:EReference" name="staticType" eType="//language/structure/Type"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallVariable" eSuperTypes="//language/behavior/CallExpression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitCallVariable(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallFeature" eSuperTypes="//language/behavior/CallExpression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitCallFeature(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="staticOperation" eType="//language/structure/Operation"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="staticProperty" eType="//language/structure/Property"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallSuperOperation" eSuperTypes="//language/behavior/CallExpression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitCallSuperOperation(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallResult" eSuperTypes="//language/behavior/CallVariable //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitCallResult(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Assignement" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitAssignement(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1" eType="//language/behavior/CallExpression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isCast" eType="//reflection/Boolean"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Block" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitBlock(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="statement" ordered="false" lowerBound="1" upperBound="-1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="rescueBlock" ordered="false" upperBound="-1" eType="//language/behavior/Rescue" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Conditionnal" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitConditionnal(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="thenBody" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="elseBody" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="condition" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Literal" eSuperTypes="//language/behavior/Expression"/>
      <eClassifiers xsi:type="ecore:EClass" name="EmptyExpression" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitEmptyExpression(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IntegerLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitIntegerLiteral(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="//reflection/Integer"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitStringLiteral(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="//reflection/String"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="BooleanLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitBooleanLiteral(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="//reflection/Boolean"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeLiteral(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="typeref" lowerBound="1" eType="//language/behavior/TypeReference" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypeReference" eSuperTypes="//reflection/MultiplicityElement //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitTypeReference(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VoidLiteral" eSuperTypes="//language/behavior/Literal //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitVoidLiteral(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Loop" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitLoop(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="initiatization" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="stopCondition" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SelfExpression" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitSelfExpression(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VariableDecl" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitVariableDecl(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="initialization" lowerBound="1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="identifier" eType="//reflection/String"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="//language/behavior/TypeReference" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Raise" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitRaise(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="expression" lowerBound="1" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Rescue" eSuperTypes="//reflection/Object //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitRescue(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="body" ordered="false" lowerBound="1" upperBound="-1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="exceptionType" lowerBound="1" eType="//language/behavior/TypeReference" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="exceptionName" eType="//reflection/String"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="JavaStaticCall" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitJavaStaticCall(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" ordered="false" upperBound="-1" eType="//language/behavior/Expression" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="jclass" eType="//reflection/String"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="jmethod" eType="//reflection/String"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LambdaExpression" eSuperTypes="//language/behavior/Expression //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitLambdaExpression(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" ordered="false" upperBound="-1" eType="//language/behavior/LambdaParameter" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="//language/behavior/Expression" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LambdaParameter" eSuperTypes="//reflection/Object //language/behavior/KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="body" value="do&#xA;&#x9;result := visitor.visitLambdaParameter(self, context)&#xA;end"/>
          </eAnnotations>
          <eAnnotations source="KermetaSuperOperations" references="//language/behavior/KMExpressionVisitable/acceptKMExpressionVisitor">
            <details key="SuperOperation" value="kermeta::language::behavior::KMExpressionVisitable"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//reflection/String"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="//language/behavior/TypeReference" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMExpressionVisitor">
        <eAnnotations source="KermetaTypeParameters">
          <details key="ContextType" value="ContextType"/>
          <details key="ResultType" value="ResultType"/>
        </eAnnotations>
        <eOperations name="visitCallVariable">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/CallVariable"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitCallFeature">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/CallFeature"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitCallSuperOperation">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/CallSuperOperation"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitCallResult">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/CallResult"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitAssignement">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Assignement"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitBlock">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Block"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitConditionnal">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Conditionnal"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitEmptyExpression">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/EmptyExpression"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitIntegerLiteral">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/IntegerLiteral"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitStringLiteral">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/StringLiteral"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitBooleanLiteral">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/BooleanLiteral"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitTypeLiteral">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/TypeLiteral"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitTypeReference">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/TypeReference"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitVoidLiteral">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/VoidLiteral"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitLoop">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Loop"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitSelfExpression">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/SelfExpression"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitVariableDecl">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/VariableDecl"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitRaise">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Raise"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitRescue">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/Rescue"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitJavaStaticCall">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/JavaStaticCall"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitLambdaExpression">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/LambdaExpression"/>
          <eParameters name="context"/>
        </eOperations>
        <eOperations name="visitLambdaParameter">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eParameters name="node" eType="//language/behavior/LambdaParameter"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="KMExpressionVisitable">
        <eOperations name="acceptKMExpressionVisitor">
          <eAnnotations source="kermeta">
            <details key="isAbstract" value="true"/>
          </eAnnotations>
          <eAnnotations source="KermetaTypeParameters">
            <details key="ContextType" value="ContextType"/>
            <details key="ResultType" value="ResultType"/>
          </eAnnotations>
          <eParameters name="visitor" eType="//language/behavior/KMExpressionVisitor"/>
          <eParameters name="context"/>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </eSubpackages>
  <eSubpackages name="reflection">
    <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String"/>
    <eClassifiers xsi:type="ecore:EClass" name="Object">
      <eOperations name="getMetaClass" eType="//reflection/Class">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="container" eType="//reflection/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="equals" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="isNotEqual" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="get" eType="//reflection/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="property" eType="//reflection/Property"/>
      </eOperations>
      <eOperations name="set">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="property" eType="//reflection/Property"/>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="isSet" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="property" eType="//reflection/Property"/>
      </eOperations>
      <eOperations name="unset">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="property" eType="//reflection/Property"/>
      </eOperations>
      <eOperations name="oid" eType="//reflection/Integer">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isFrozen" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="freeze">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isVoid" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="tag" ordered="false" upperBound="-1" eType="//reflection/Tag" eOpposite="//reflection/Tag/object"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean"/>
    <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer"/>
    <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="//reflection/Type">
      <eOperations name="new" eType="//reflection/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="toString" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.classDefinition.name&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//reflection/Object/toString">
          <details key="SuperOperation" value="kermeta::reflection::Object"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="classDefinition" lowerBound="1" eType="//reflection/ClassDefinition"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeParamBinding" ordered="false" upperBound="-1" eType="//reflection/TypeVariableBinding" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" ordered="false" upperBound="-1" eType="//reflection/Property" changeable="false" volatile="true" transient="true" derived="true" containment="true">
        <eAnnotations source="KermetaDerivedProperty">
          <details key="isDerived" value="true"/>
          <details key="getter.body" value="do&#xA;&#x9;result := self.classDefinition.ownedAttributes&#xA;end"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" ordered="false" upperBound="-1" eType="//reflection/Operation" changeable="false" volatile="true" transient="true" derived="true" containment="true">
        <eAnnotations source="KermetaDerivedProperty">
          <details key="isDerived" value="true"/>
          <details key="getter.body" value="do&#xA;&#x9;result := self.classDefinition.ownedOperation&#xA;end"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="superClass" ordered="false" upperBound="-1" eType="//reflection/Class" changeable="false" volatile="true" transient="true" derived="true" containment="true">
        <eAnnotations source="KermetaDerivedProperty">
          <details key="isDerived" value="true"/>
          <details key="getter.body" value="do&#xA;&#x9;result := self.classDefinition.superType&#xA;end"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="//reflection/Boolean" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="KermetaDerivedProperty">
          <details key="isDerived" value="true"/>
          <details key="getter.body" value="do&#xA;&#x9;result := self.classDefinition.isAbstract&#xA;end"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//reflection/String" changeable="false" volatile="true" transient="true" derived="true">
        <eAnnotations source="KermetaDerivedProperty">
          <details key="isDerived" value="true"/>
          <details key="getter.body" value="do&#xA;&#x9;result := self.classDefinition.name&#xA;end"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" eSuperTypes="//reflection/TypedElement">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" eType="//reflection/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="//reflection/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" eType="//reflection/Integer"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" eType="//reflection/UnlimitedNatural"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="//reflection/MultiplicityElement">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="//reflection/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="superOperation" eType="//reflection/Operation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="//reflection/ClassDefinition" eOpposite="//reflection/ClassDefinition/ownedOperation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" ordered="false" upperBound="-1" eType="//reflection/TypeVariable"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="raisedException" ordered="false" upperBound="-1" eType="//reflection/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" ordered="false" upperBound="-1" eType="//reflection/Parameter" containment="true" eOpposite="//reflection/Parameter/operation"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Tag" eSuperTypes="//reflection/Object">
      <eStructuralFeatures xsi:type="ecore:EReference" name="object" ordered="false" lowerBound="1" upperBound="-1" eType="//reflection/Object" eOpposite="//reflection/Object/tag"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//reflection/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="//reflection/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="//reflection/MultiplicityElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" eType="//reflection/ClassDefinition" eOpposite="//reflection/ClassDefinition/ownedAttributes"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="opposite" eType="//reflection/Property"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="//reflection/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="default" eType="//reflection/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isComposite" eType="//reflection/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" eType="//reflection/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isID" eType="//reflection/Boolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeContainer" eSuperTypes="//reflection/Object">
      <eStructuralFeatures xsi:type="ecore:EReference" name="containedType" ordered="false" upperBound="-1" eType="//reflection/Type" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ClassDefinition" eSuperTypes="//reflection/TypeContainer //reflection/TypeDefinition">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="//reflection/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttributes" ordered="false" upperBound="-1" eType="//reflection/Property" containment="true" eOpposite="//reflection/Property/owningClass"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" ordered="false" upperBound="-1" eType="//reflection/Operation" containment="true" eOpposite="//reflection/Operation/owningClass"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="superType" ordered="false" upperBound="-1" eType="//reflection/Class"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" ordered="false" upperBound="-1" eType="//reflection/TypeVariable" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="allOwnedAttributes" ordered="false" upperBound="-1" eType="//reflection/Property" changeable="false" volatile="true" transient="true" derived="true" containment="true">
        <eAnnotations source="KermetaDerivedProperty">
          <details key="isDerived" value="true"/>
          <details key="getter.body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::reflection::Property>.new&#xA;&#x9;result.addAll(self.ownedAttributes)&#xA;&#x9;self.superType.each{t | do&#xA;&#x9;&#x9;&#x9;t.classDefinition.allOwnedAttributes.each{p | do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if p.isDerived.~not then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(p)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;&#x9;end}&#xA;&#x9;&#x9;end}&#xA;end"/>
          <details key="isReadOnly" value="true"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypedElement" eSuperTypes="//reflection/TypeContainer //reflection/NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeVariable" eSuperTypes="//reflection/TypeContainer //reflection/Type //reflection/NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="supertype" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ProductType" eSuperTypes="//reflection/TypeContainer //reflection/Type">
      <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1" upperBound="-1" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="FunctionType" eSuperTypes="//reflection/TypeContainer //reflection/Type">
      <eStructuralFeatures xsi:type="ecore:EReference" name="left" eType="//reflection/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="right" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Type" eSuperTypes="//reflection/Object">
      <eOperations name="isInstance" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Object"/>
      </eOperations>
      <eOperations name="isSubType" eType="//reflection/Boolean">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eParameters name="element" eType="//reflection/Type"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeVariableBinding" eSuperTypes="//reflection/TypeContainer //reflection/Object">
      <eStructuralFeatures xsi:type="ecore:EReference" name="variable" lowerBound="1" eType="//reflection/TypeVariable"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="//reflection/TypeContainer //reflection/DataType">
      <eStructuralFeatures xsi:type="ecore:EReference" name="instanceType" eType="//reflection/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NamedElement" eSuperTypes="//reflection/Object">
      <eOperations name="qualifiedName" eType="//reflection/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var elem : kermeta::reflection::NamedElement init self&#xA;&#x9;result := self.name&#xA;&#x9;from elem ?= elem.container&#xA;&#x9;until elem.equals(void)&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;result := elem.name.plus(&quot;::&quot;).plus(result)&#xA;&#x9;&#x9;&#x9;elem ?= elem.container&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//reflection/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SelfType" eSuperTypes="//reflection/Type">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * DEPRECATED&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="//reflection/NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTypeDefinition" ordered="false" upperBound="-1" eType="//reflection/TypeDefinition" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="nestedPackage" ordered="false" upperBound="-1" eType="//reflection/Package" containment="true" eOpposite="//reflection/Package/nestingPackage"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="nestingPackage" eType="//reflection/Package" eOpposite="//reflection/Package/nestedPackage"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="//reflection/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeDefinition" eSuperTypes="//reflection/NamedElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="VoidType" eSuperTypes="//reflection/Type"/>
    <eClassifiers xsi:type="ecore:EClass" name="DataType" eSuperTypes="//reflection/TypeDefinition //reflection/Type"/>
    <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="//reflection/DataType">
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" ordered="false" upperBound="-1" eType="//reflection/EnumerationLiteral" containment="true" eOpposite="//reflection/EnumerationLiteral/enumeration"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="//reflection/NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="//reflection/Enumeration" eOpposite="//reflection/Enumeration/ownedLiteral"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="//reflection/MultiplicityElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="operation" eType="//reflection/Operation" eOpposite="//reflection/Operation/ownedParameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Object">
      <eAnnotations source="kermeta">
        <details key="alias" value="kermeta::standard::UnlimitedNatural"/>
      </eAnnotations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="kunit">
    <eClassifiers xsi:type="ecore:EClass" name="AssertionFailedError" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * AssertionViolatedException are raised when assertions are violated&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Assert">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The abstract class assert defines a set of convinient operations&#xD;&#xA; * to assert expected behavior&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="assert">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if bool.~not then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;self.fail(&quot;assert failed&quot;)&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * raises an exception if bool is false&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="bool" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="assertTrue">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if bool.~not then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;self.fail(&quot;assertTrue failed&quot;)&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * raises an exception if bool is false&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="bool" eType="//standard/Boolean"/>
      </eOperations>
      <eOperations name="assertTrueWithMsg">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if bool.~not then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;self.fail(msg)&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * raises an exception if bool is false&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="bool" eType="//standard/Boolean"/>
        <eParameters name="msg" eType="//standard/String"/>
      </eOperations>
      <eOperations name="fail">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var exception : kermeta::kunit::AssertionFailedError init kermeta::kunit::AssertionFailedError.new&#xA;&#x9;exception.message := msg&#xA;&#x9;raise exception&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * raise a AssertionViolatedException with the provided message&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="msg" eType="//standard/String"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Test" eSuperTypes="//kunit/Assert">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Abstract class Test. Interface for single and composite object (TestCase and TestSuite)&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="run">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Run the test&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Execute the test case&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Execute all tests of the suite&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="r" eType="//kunit/TestResult"/>
      </eOperations>
      <eOperations name="setUp">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Called before a test is run to set up the needed environment */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="tearDown">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Called each time a test is run so that the testing environment is always&#xD;&#xA;  * tidy. */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="runTest">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** The main method that the testes has to implement for his specific tests */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * This method is an adapter that uses the pluggable selector TestCase.name to know which &#xD;&#xA;  * test to run&#xD;&#xA; */"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestCase" eSuperTypes="//kunit/Test">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * A test case&#xD;&#xA; * pattern : Command&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="initialize">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.name := name&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Initialize the test case&#xD;&#xA;  * params : &#xD;&#xA;  *   - name : the name of the test case : must be the name of the testOperation&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="name" eType="//standard/String"/>
      </eOperations>
      <eOperations name="run">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if r.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;r := self.createDefaultTestResult&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;r.startTest(self)&#xA;&#x9;self.setUp&#xA;&#x9;self.runTest&#xA;rescue(e : kermeta::kunit::AssertionFailedError)&#xA;&#x9;r.addFailure(self, e)&#xA;&#xA;rescue(e : kermeta::exceptions::RuntimeError)&#xA;&#x9;r.addError(self, e)&#xA;&#x9;self.tearDown&#xA;&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//kunit/Test/run">
          <details key="SuperOperation" value="kermeta::kunit::Test"/>
        </eAnnotations>
        <eParameters name="r" eType="//kunit/TestResult"/>
      </eOperations>
      <eOperations name="runTest">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.getMetaClass.classDefinition.ownedOperation.detect{o | do&#xA;&#x9;&#x9;&#x9;o.name.equals(self.name)&#xA;&#x9;&#x9;end}.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise kermeta::exceptions::CallOnVoidTarget.new&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;var de : kermeta::interpreter::DynamicExpression init kermeta::interpreter::DynamicExpression.new&#xA;&#x9;&#x9;&#x9;de.initializeDefaults&#xA;&#x9;&#x9;&#x9;var selfClassName : kermeta::standard::String init self.getMetaClass.classDefinition.qualifiedName&#xA;&#x9;&#x9;&#x9;de.parse(selfClassName.plus(&quot;.new.&quot;).plus(self.name))&#xA;&#x9;&#x9;&#x9;de.execute(void, kermeta::utils::Hashtable&lt;kermeta::standard::String, alias Object : kermeta::language::structure::Object;>.new)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//kunit/Test/runTest">
          <details key="SuperOperation" value="kermeta::kunit::Test"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="createDefaultTestResult" eType="//kunit/TestResult">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::kunit::TestResult.new&#xA;&#x9;result.initialize&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="//standard/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestResult">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Get the number of run tests, errors and failures that resulted from the launch of a &#xD;&#xA; * Test. (This is a minimal but functional class that can be improved)&#xD;&#xA; * pattern : Collecting parameter&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="initialize">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.runtests := 0&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Set the runtests to 0 */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="startTest">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.runtests := 1.plus(self.runtests)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Increments the runtests counter */"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
      </eOperations>
      <eOperations name="addFailure">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.failures.add(self.createTestFailure(test, e))&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Adds a failed test to the list of failed tests */"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
        <eParameters name="e" eType="//exceptions/Exception"/>
      </eOperations>
      <eOperations name="addError">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.errors.add(self.createTestFailure(test, e))&#xA;end"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
        <eParameters name="e" eType="//exceptions/Exception"/>
      </eOperations>
      <eOperations name="createTestFailure" eType="//kunit/TestFailure">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::kunit::TestFailure.new&#xA;&#x9;result.failedTest := test&#xA;&#x9;result.raised := e&#xA;end"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
        <eParameters name="e" eType="//exceptions/Exception"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="runtests" eType="//standard/Integer"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="failures" ordered="false" upperBound="-1" eType="//kunit/TestFailure"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="errors" ordered="false" upperBound="-1" eType="//kunit/TestFailure"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestFailure">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * An instance of this class is created when an assertion failed or an exception&#xD;&#xA; * was raised.&#xD;&#xA;*/"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="failedTest" eType="//kunit/Test"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="raised" eType="//exceptions/Exception"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestSuite" eSuperTypes="//kunit/Test">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/** &#xD;&#xA; * A test suite is composed of a set of tests (which can inherit either of TestSuite&#xD;&#xA; * or TestCase)&#xD;&#xA; * pattern : Composite&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="run">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.tests.each{t | do&#xA;&#x9;&#x9;&#x9;t.run(test_result)&#xA;&#x9;&#x9;end}&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//kunit/Test/run">
          <details key="SuperOperation" value="kermeta::kunit::Test"/>
        </eAnnotations>
        <eParameters name="test_result" eType="//kunit/TestResult"/>
      </eOperations>
      <eOperations name="addTest">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.tests.add(test)&#xA;end"/>
        </eAnnotations>
        <eParameters name="test" eType="//kunit/Test"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="tests" upperBound="-1" eType="//kunit/Test"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestLoader">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/** */"/>
      </eAnnotations>
      <eOperations name="initialize" ordered="false" upperBound="0">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.methodPrefix := &quot;test&quot;&#xA;&#x9;self.suiteClass := kermeta::kunit::TestSuite&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="loadTestMethodsFromTestCase" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;kermeta::kunit::Test>.new&#xA;&#x9;var test_case : kermeta::kunit::TestCase&#xA;&#x9;var test_ops : kermeta::standard::Sequence&lt;kermeta::reflection::Operation>&#xA;&#x9;test_ops := test_type.ownedOperation.~select{o | do&#xA;&#x9;&#x9;&#x9;o.name.size.isGreaterOrEqual(4).~and(o.name.substring(0, 4).equals(self.methodPrefix))&#xA;&#x9;&#x9;end}&#xA;&#x9;test_ops.each{o | do&#xA;&#x9;&#x9;&#x9;test_case ?= test_type.new&#xA;&#x9;&#x9;&#x9;test_case.initialize(o.name)&#xA;&#x9;&#x9;&#x9;result.add(test_case)&#xA;&#x9;&#x9;end}&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** &#xD;&#xA;  * load in the testSuiteClass all the methods prefixed by test&#xD;&#xA;  * params :&#xD;&#xA;  *    - testCaseClass : the TestCase class where we get the testOperations&#xD;&#xA;  * // FIXME / I would like to do &quot;TestType inherits TestCase&quot;&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="test_type" eType="//language/structure/Class"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="methodPrefix" eType="//standard/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="suiteClass" eType="//language/structure/Class"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TestRunner">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/** &#xD;&#xA; * User instanciates this class to run a test suite/case &#xD;&#xA; * Usage : &#xD;&#xA; * Create a file, and add in the headers :&#xD;&#xA; *    require &quot;the_file_that_contains_the_tests.kmt&quot;&#xD;&#xA; * Create a class, which will be the one that you will launch :&#xD;&#xA; * &#xD;&#xA; * class MyTesterClass&#xD;&#xA; * {&#xD;&#xA; *   operation main() is do&#xD;&#xA; *     var testRunner : kermeta::kunit::TestRunner init kermeta::kunit::TestRunner.new&#xD;&#xA; *     // Here, we run our test case class called &quot;TestClass&quot;, &#xD;&#xA; *     // contained in the_file_that_contains_the_tests.kmt.&#xD;&#xA; *     // TestClass must inherit TestCase&#xD;&#xA; *    testRunner.run(TestClass)&#xD;&#xA; *    testRunner.printTestResult&#xD;&#xA; * end&#xD;&#xA; * }&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="initialize" ordered="false" upperBound="0">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="createTestResult" eType="//kunit/TestResult">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::kunit::TestResult.new&#xA;&#x9;result.initialize&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="createTestLoader" eType="//kunit/TestLoader">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::kunit::TestLoader.new&#xA;&#x9;result.initialize&#xA;end"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="run" ordered="false" upperBound="0">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var test_loader : kermeta::kunit::TestLoader init self.createTestLoader&#xA;&#x9;self.testResult := self.createTestResult&#xA;&#x9;if test_class.superClass.contains(kermeta::kunit::TestCase).~not then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;var msg : kermeta::standard::String init &quot;ERROR : the given class '&quot;.plus(test_class.classDefinition.name).plus(&quot;' should inherit TestCase&quot;)&#xA;&#x9;&#x9;&#x9;stdio.writeln(msg)&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;var test_ops : kermeta::standard::Set&lt;kermeta::kunit::Test> init test_loader.loadTestMethodsFromTestCase(test_class)&#xA;&#x9;&#x9;&#x9;var test_suite : kermeta::kunit::TestSuite init kermeta::kunit::TestSuite.new&#xA;&#x9;&#x9;&#x9;test_suite.tests.addAll(test_ops)&#xA;&#x9;&#x9;&#x9;test_suite.run(self.testResult)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Run a test suite from the given test case (test_class should be a class&#xD;&#xA;  * that inherits TestCase&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="test_class" eType="//language/structure/Class"/>
      </eOperations>
      <eOperations name="printTestResult" ordered="false" upperBound="0">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;stdio.writeln(&quot;&#xA;================================== TEST RESULTS ==================================&#xA;&quot;)&#xA;&#x9;stdio.writeln(&quot; Number of launched tests : &quot;.plus(self.testResult.runtests.toString))&#xA;&#x9;stdio.writeln(&quot; Number of failures : &quot;.plus(self.testResult.failures.size.toString))&#xA;&#x9;stdio.writeln(&quot; Number of errors : &quot;.plus(self.testResult.errors.size.toString))&#xA;&#x9;stdio.writeln(&quot;&#xA; Failed : &quot;)&#xA;&#x9;self.testResult.failures.each{f | do&#xA;&#x9;&#x9;&#x9;var tc : kermeta::kunit::TestCase&#xA;&#x9;&#x9;&#x9;tc ?= f.failedTest&#xA;&#x9;&#x9;&#x9;stdio.writeln(&quot;    ->&quot;.plus(tc.name).plus(&quot;( raised : &quot;).plus(f.raised.toString).plus(&quot;)&quot;))&#xA;&#x9;&#x9;end}&#xA;&#x9;stdio.writeln(&quot; Errors : &quot;)&#xA;&#x9;self.testResult.errors.each{e | do&#xA;&#x9;&#x9;&#x9;var tc : kermeta::kunit::TestCase&#xA;&#x9;&#x9;&#x9;tc ?= e.failedTest&#xA;&#x9;&#x9;&#x9;stdio.writeln(&quot;    -> &quot;.plus(tc.name).plus(&quot;( raised : &quot;).plus(e.raised.toString).plus(&quot;)&quot;))&#xA;&#x9;&#x9;end}&#xA;&#x9;stdio.writeln(&quot;&#xA;==================================================================================&#xA;&quot;)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Prints in a text format the result of the tests launches &#xD;&#xA;  * TODO : a specific set of class that inherit TestResult and display&#xD;&#xA;  * it according to a specific format&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="testClass" eType="//language/structure/Class"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="testResult" eType="//kunit/TestResult"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="utils">
    <eClassifiers xsi:type="ecore:EClass" name="Hashtable">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * An implementation of hashtable&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="K" value="K"/>
        <details key="V" value="V"/>
      </eAnnotations>
      <eOperations name="size" eType="//standard/Integer">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.size(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns size of the map&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="keyIterator" eType="//standard/Iterator">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.keysIterator(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns an iterator on the keys of the map&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="valueIterator" eType="//standard/Iterator">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.valueIterator(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns an iterator on the keys of the map&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getValue">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.get(self, key)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * returns the value for key 'key'&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="key"/>
      </eOperations>
      <eOperations name="put">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.put(self, key, ~value)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Adds a entry in the Hashtable&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="key"/>
        <eParameters name="value"/>
      </eOperations>
      <eOperations name="remove">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.remove(self, key)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Removes the entry which key equals 'key'&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="key"/>
      </eOperations>
      <eOperations name="clear">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Map.clear(self)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Remove all elements from the Hashtable&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="keys" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Set&lt;K>.new&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;K> init self.keyIterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;result.add(it.next)&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Return the keys of the Hashtable */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="values" eType="//standard/Collection">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := kermeta::standard::Bag&lt;V>.new&#xA;&#x9;self.keys.each{k | do&#xA;&#x9;&#x9;&#x9;result.add(self.getValue(k))&#xA;&#x9;&#x9;end}&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Return the keys of the Hashtable */"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Stack" eSuperTypes="//standard/Sequence">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * An implementation of stack&#xD;&#xA; */"/>
      </eAnnotations>
      <eAnnotations source="KermetaTypeParameters">
        <details key="G" value="G"/>
      </eAnnotations>
      <eOperations name="push">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.addAt(0, element)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Push an element in the stack&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="element"/>
      </eOperations>
      <eOperations name="peek">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.first&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Get the element at the top of the stack&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="pop">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := self.peek&#xA;&#x9;self.removeAt(0)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Get the element at the top of the stack and &#xD;&#xA;  * removes it from the stack&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="io">
    <eClassifiers xsi:type="ecore:EClass" name="StdIO">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * An implementation of StdIO : standard input/output&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="write">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if object.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;object := &quot;&lt;void>&quot;&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.write(object)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * write the object to standard output&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="object" eType="//standard/String"/>
      </eOperations>
      <eOperations name="writeln">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if object.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;object := &quot;&lt;void>&quot;&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.writeln(object)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * writeln the object to standard output&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="object" eType="//standard/String"/>
      </eOperations>
      <eOperations name="read" eType="//standard/String">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if prompt.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;prompt := &quot;&quot;&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::StdIO.read(prompt)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * read an object from standard input&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="prompt" eType="//standard/String"/>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="exceptions">
    <eClassifiers xsi:type="ecore:EClass" name="Exception">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/*****************************************************************************&#xD;&#xA; * $Id:&#xD;&#xA; * Project : Kermeta (First iteration)&#xD;&#xA; * Creation date :  &#xD;&#xA; * File : testSuite.skel&#xD;&#xA; * License : GPL&#xD;&#xA; * Copyright : IRISA / Universite de Rennes 1&#xD;&#xA; * Creation date : Mar 14, 2005&#xD;&#xA; * Author : zdrey&#xD;&#xA; * Description :  &#xD;&#xA; *      Contains the main exceptions from which all the others inherit&#xD;&#xA; *&#xD;&#xA; ****************************************************************************/"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/*****************************************************************************&#xD;&#xA; * 1-General errors&#xD;&#xA; *****************************************************************************/"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Generic exceptions&#xD;&#xA; * The main class from which all the exception inherit&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="message" eType="//standard/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="nestedException" eType="//exceptions/Exception" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="stackTrace" eType="//standard/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="RuntimeError" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/*****************************************************************************&#xD;&#xA; * 2-Runtime errors&#xD;&#xA; *****************************************************************************/"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Abstract exception for interpreter exceptions&#xD;&#xA; */"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="//language/behavior/Expression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CallOnVoidTarget" eSuperTypes="//exceptions/RuntimeError">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Occurs when a feature is called on void&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NotImplementedException" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Use this exception whenyou want to forbid the access to an unimplemented operation &#xD;&#xA; * and invite to implement it&#xD;&#xA; */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DivisionByZero" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/*****************************************************************************&#xD;&#xA; * 3-Standard library related errors&#xD;&#xA; *****************************************************************************/"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OverflowError" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="StringIndexOutOfBound" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="IndexOutOfBound" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="EmptyCollection" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="IteratorIsOff" eSuperTypes="//exceptions/Exception"/>
  </eSubpackages>
  <eSubpackages name="interpreter">
    <eClassifiers xsi:type="ecore:EClass" name="DynamicExpression">
      <eOperations name="initializeDefaults" ordered="false" upperBound="0">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.formalParameters := kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::language::structure::Type>.new&#xA;&#x9;self.selfClass := kermeta::reflection::Object.classDefinition&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * initialise the formalParameters with an empty set of parameters&#xD;&#xA;  * and the self type with void&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="parse" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.errors.clear&#xA;&#x9;if self.formalParameters.equals(void).~or(self.selfClass.equals(void)) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;var e : kermeta::interpreter::DynamicExpressionException init kermeta::interpreter::DynamicExpressionException.new&#xA;&#x9;&#x9;&#x9;e.message := &quot;parse precondition - formalParameters or selfType is void&quot;&#xA;&#x9;&#x9;&#x9;raise e&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;result ?= extern fr::irisa::triskell::kermeta::runtime::language::DynamicExpression.parse(self, expression)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Parse the expression as a string&#xD;&#xA;  * and updates the expression field and errors&#xD;&#xA;  * Returns true if the expression was parssed sucessfuly&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="expression" eType="//standard/String"/>
      </eOperations>
      <eOperations name="execute" eType="//standard/Object">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.expression.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;var e : kermeta::interpreter::DynamicExpressionException init kermeta::interpreter::DynamicExpressionException.new&#xA;&#x9;&#x9;&#x9;e.message := &quot;execute precondition - expression is void&quot;&#xA;&#x9;&#x9;&#x9;raise e&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;if self.errors.size.isNotEqual(0) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;var e : kermeta::interpreter::DynamicExpressionException init kermeta::interpreter::DynamicExpressionException.new&#xA;&#x9;&#x9;&#x9;e.message := &quot;execute precondition - expression contains errors&quot;&#xA;&#x9;&#x9;&#x9;raise e&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;result := extern fr::irisa::triskell::kermeta::runtime::language::DynamicExpression.execute(self, selfObj, actualParams)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;     * Execute the expression in the given context&#xD;&#xA;     */"/>
        </eAnnotations>
        <eParameters name="selfObj" eType="//standard/Object"/>
        <eParameters name="actualParams" eType="//utils/Hashtable"/>
      </eOperations>
      <eOperations name="evalString" eType="//standard/Object">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.parse(body).~not then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;var e : kermeta::interpreter::DynamicExpressionException init kermeta::interpreter::DynamicExpressionException.new&#xA;&#x9;&#x9;&#x9;e.message := &quot;evalString - expression contains errors&quot;&#xA;&#x9;&#x9;&#x9;raise e&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;result := self.execute(selfObj, actualParams)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;     * Execute the expression given as a string.&#xD;&#xA;     * the self type and formal parameters are supposed to be set&#xD;&#xA;     * before calling this operation&#xD;&#xA;     */"/>
        </eAnnotations>
        <eParameters name="body" eType="//standard/String"/>
        <eParameters name="selfObj" eType="//standard/Object"/>
        <eParameters name="actualParams" eType="//utils/Hashtable"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="errors" upperBound="-1" eType="//interpreter/KermetaError"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="//language/behavior/Expression"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="selfClass" eType="//reflection/ClassDefinition"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="formalParameters" eType="//utils/Hashtable"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DynamicExpressionException" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="KermetaError">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="message" eType="//standard/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ParseError" eSuperTypes="//interpreter/KermetaError"/>
    <eClassifiers xsi:type="ecore:EClass" name="TypeError" eSuperTypes="//interpreter/KermetaError"/>
  </eSubpackages>
  <eSubpackages name="persistence">
    <eClassifiers xsi:type="ecore:EClass" name="Resource">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/*****************************************************************************&#xD;&#xA; * $Id$&#xD;&#xA; * Project : Kermeta (First iteration)&#xD;&#xA; * Creation date :  &#xD;&#xA; * File : resource.kmt&#xD;&#xA; * License : GPL&#xD;&#xA; * Copyright : IRISA / Universite de Rennes 1&#xD;&#xA; * Creation date : Mar 14, 2005&#xD;&#xA; * Author : zdrey&#xD;&#xA; * Description :  &#xD;&#xA; *      This file contains the classes that handle the serialization of models.&#xD;&#xA; *&#xD;&#xA; *&#xD;&#xA; ****************************************************************************/"/>
      </eAnnotations>
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * The main class that handle a loaded/saved model.&#xD;&#xA; * There are a few important things to note for the developper :&#xD;&#xA; * &#xD;&#xA; * - load a Resource : this loads a Collection of instances corresponding to the&#xD;&#xA; *   objects in the loaded model. If the Collection of instances is empty, than &#xD;&#xA; *  a ResourceLoadException is raised&#xD;&#xA; *&#xD;&#xA; * - save a Resource : this saves the collection of instances in a new file. This can&#xD;&#xA; *   be correctly done if and only if the instances saved are conform to the metamodel&#xD;&#xA; *   linked to this resource (this link does not need to be explicit. It is normally retrieved&#xD;&#xA; *   through the EMF model -- see Java wrapping &quot;Resource.java&quot;).&#xD;&#xA; * &#xD;&#xA; * - add/remove an instance to the Resource : this adds an element in the resource. It cannot&#xD;&#xA; *   be &quot;simply&quot; added because of the following potential errors :&#xD;&#xA; *&#xD;&#xA; *   - The object added is not conform to the metamodel -> Error&#xD;&#xA; *   - The object was already added in the resource -> Not a real error : we do nothing&#xD;&#xA; *   - The object to remove does not exist -> redirect to a collection-specific error&#xD;&#xA; *   - The object to remove is attached to an object in the collection -> &quot;dependency-violation&quot; exception?&#xD;&#xA;&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="save">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Save a model instance, in the file specified by the initial uri &#xD;&#xA;  * Overrides the old version.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Save a resource in the uri given by its 'uri' attribute. */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="saveWithNewURI">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Save a resource in the uri associated to it */"/>
        </eAnnotations>
        <eParameters name="new_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="load">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Loads a resource */"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** add an instance, return it if success, otherwise return null */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Add an instance to the Resource*/"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="remove" eType="//standard/Object">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** remove the instance, return it if success, otherwise return null */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** Remove an instance from the Resource */"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="getRootElements" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * return the root elements of the resource. Root elements are elements&#xD;&#xA;  * that have no container&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Get the root element(s) of the EMF model loaded in this resource&#xD;&#xA;  */"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="uri" eType="//standard/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="metaModelURI" eType="//standard/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="includedResources" ordered="false" upperBound="-1" eType="//standard/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="instances" ordered="false" upperBound="-1" eType="//standard/Object"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="repository" eType="//persistence/Repository" eOpposite="//persistence/Repository/resources"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EMFResource" eSuperTypes="//persistence/Resource">
      <eOperations name="initialize_3" ordered="false" upperBound="0">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.uri := model_uri&#xA;&#x9;self.metaModelURI := mm_uri&#xA;&#x9;self.includedResources := inc_resources&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Constructor &quot;patch&quot; TODO : only one should be needed&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="model_uri" eType="//standard/String"/>
        <eParameters name="mm_uri" eType="//standard/String"/>
        <eParameters name="inc_resources" eType="//standard/Set"/>
      </eOperations>
      <eOperations name="initialize_2" ordered="false" upperBound="0">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.uri := model_uri&#xA;&#x9;self.includedResources := inc_resources&#xA;end"/>
        </eAnnotations>
        <eParameters name="model_uri" eType="//standard/String"/>
        <eParameters name="inc_resources" eType="//standard/Set"/>
      </eOperations>
      <eOperations name="initialize" ordered="false" upperBound="0">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;self.uri := model_uri&#xA;&#x9;self.metaModelURI := &quot;&quot;&#xA;end"/>
        </eAnnotations>
        <eParameters name="model_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="saveWithNewURI">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(new_uri, self.metaModelURI, &quot;EMF&quot;, self.instances)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/saveWithNewURI">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="new_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="save">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.save(self.uri, self.metaModelURI, &quot;EMF&quot;, self.instances)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/save">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="load">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var e : kermeta::persistence::ResourceLoadException init kermeta::persistence::ResourceLoadException.new&#xA;&#x9;var inst_set : kermeta::standard::Set&lt;alias Object : kermeta::language::structure::Object;> init kermeta::standard::Set&lt;alias Object : kermeta::language::structure::Object;>.new&#xA;&#x9;inst_set ?= extern fr::irisa::triskell::kermeta::runtime::basetypes::Resource.load(self.uri, self.metaModelURI, &quot;EMF&quot;, inst_set)&#xA;&#x9;if inst_set.size.equals(0) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;stdio.writeln(&quot;Resource load failed!&quot;)&#xA;&#x9;&#x9;&#x9;raise e&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;alias Object : kermeta::language::structure::Object;> init inst_set.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;self.instances.add(it.next)&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/load">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var e : kermeta::persistence::ResourceUnconformityException init kermeta::persistence::ResourceUnconformityException.new&#xA;&#x9;if self.isConform(instance) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;self.instances.add(instance)&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;raise e&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/add">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="remove" eType="//standard/Object">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;if self.instances.contains(instance) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;self.instances.remove(instance)&#xA;&#x9;&#x9;&#x9;result := instance&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := void&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/remove">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isConform" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var valid_instance : alias Object : kermeta::language::structure::Object; init self.instances.one&#xA;&#x9;var o : alias Object : kermeta::language::structure::Object; init valid_instance.getMetaClass.classDefinition&#xA;&#x9;var container : alias Object : kermeta::language::structure::Object;&#xA;&#x9;var i : kermeta::standard::Integer init 0&#xA;&#x9;from var b : kermeta::standard::Boolean init true&#xA;&#x9;until o.container.equals(void).~or(i.equals(10))&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;o := o.container&#xA;&#x9;&#x9;end&#x9;end&#xA;&#x9;var p : kermeta::language::structure::Package&#xA;&#x9;p ?= o&#xA;&#x9;result := self.isInTypeDefSet(p.ownedTypeDefinition, instance)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/** &#xD;&#xA;  * Return true if instance type is conform to the metamodel of the model loaded,&#xD;&#xA;  * false otherwise &#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="isInTypeDefSet" eType="//standard/Boolean">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := false&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;kermeta::reflection::TypeDefinition> init tparams.iterator&#xA;&#x9;until it.isOff.~or(result.equals(true))&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;var next : kermeta::language::structure::TypeDefinition&#xA;&#x9;&#x9;&#x9;next ?= it.next&#xA;&#x9;&#x9;&#x9;if next.qualifiedName.equals(new_instance.getMetaClass.classDefinition.qualifiedName) then&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result := true&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Helper that returns true if new_instance type is in the tparam Set, false otherwise&#xD;&#xA;  * FIXME : Loop-and-cast done in order to temporarily get round the type &#xD;&#xA;  * system limits for reflection&#xD;&#xA; */"/>
        </eAnnotations>
        <eParameters name="tparams" eType="//standard/Set"/>
        <eParameters name="new_instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="getRootElements" eType="//standard/Set">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;alias Object : kermeta::language::structure::Object;> init self.instances.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;var o : alias Object : kermeta::language::structure::Object; init it.next&#xA;&#x9;&#x9;&#x9;if o.container.equals(void) then&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result.add(o)&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/getRootElements">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="KMResource" eSuperTypes="//persistence/Resource">
      <eOperations name="save" eType="//standard/Void">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/save">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="load" eType="//standard/Void">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/load">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="add">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/add">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
      <eOperations name="remove" eType="//standard/Object">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result := void&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Resource/remove">
          <details key="SuperOperation" value="kermeta::persistence::Resource"/>
        </eAnnotations>
        <eParameters name="instance" eType="//standard/Object"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Repository">
      <eOperations name="createResource" eType="//persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="isAbstract" value="true"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Create a resource with given uri. &#xD;&#xA;  * params : &#xD;&#xA;  *    - uri : the uri where to save the model handled by the resource&#xD;&#xA;  *    - mm_uri : the uri of the metamodel of which model is an instance&#xD;&#xA;  * User must provide the mm_uri if he creates a new model from scratch.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Create a new empty resource from the given uri, which meta-model is stored&#xD;&#xA;  * in file given by mm_uri&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
        <eParameters name="mm_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="getResource" eType="//persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;from var it : kermeta::standard::Iterator&lt;kermeta::persistence::Resource> init self.resources.iterator&#xA;&#x9;until it.isOff&#xA;&#x9;loop&#xA;do&#xA;&#x9;&#x9;&#x9;var next : kermeta::persistence::Resource init it.next&#xA;&#x9;&#x9;&#x9;if uri.equals(next.uri) then&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result := next&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;end&#x9;end&#xA;&#x9;if result.equals(void) then&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;result := self.createResource(uri, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;result.load&#xA;&#x9;&#x9;end&#xA;&#x9;else&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="kermeta">
          <details key="kdoc" value="/**&#xD;&#xA;  * Get the resource of model that is stored in the given uri. Silently create&#xD;&#xA;  * a new one if a resource with this uri was not found.&#xD;&#xA;  */"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="resources" ordered="false" upperBound="-1" eType="//persistence/Resource" containment="true" eOpposite="//persistence/Resource/repository"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EMFRepository" eSuperTypes="//persistence/Repository">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Repository that stores and manages resources that come from EMF&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="createResource" eType="//persistence/EMFResource">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;var new_resource : kermeta::persistence::EMFResource init kermeta::persistence::EMFResource.new&#xA;&#x9;new_resource.uri := uri&#xA;&#x9;new_resource.metaModelURI := mm_uri&#xA;&#x9;new_resource.repository := self&#xA;&#x9;result := new_resource&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Repository/createResource">
          <details key="SuperOperation" value="kermeta::persistence::Repository"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
        <eParameters name="mm_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="getResource" eType="//persistence/EMFResource">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;&#x9;result ?= super(uri)&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Repository/getResource">
          <details key="SuperOperation" value="kermeta::persistence::Repository"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="KMRepository" eSuperTypes="//persistence/Repository">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/**&#xD;&#xA; * Repository that stores and manages XMI files representing Kermeta models&#xD;&#xA; */"/>
      </eAnnotations>
      <eOperations name="createResource" eType="//persistence/KMResource">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Repository/createResource">
          <details key="SuperOperation" value="kermeta::persistence::Repository"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
        <eParameters name="mm_uri" eType="//standard/String"/>
      </eOperations>
      <eOperations name="getResource" eType="//persistence/Resource">
        <eAnnotations source="kermeta">
          <details key="body" value="do&#xA;end"/>
        </eAnnotations>
        <eAnnotations source="KermetaSuperOperations" references="//persistence/Repository/getResource">
          <details key="SuperOperation" value="kermeta::persistence::Repository"/>
        </eAnnotations>
        <eParameters name="uri" eType="//standard/String"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ResourceLoadException" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/** Specialized exceptions */"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ResourceSaveException" eSuperTypes="//exceptions/Exception"/>
    <eClassifiers xsi:type="ecore:EClass" name="ResourceUnconformityException" eSuperTypes="//exceptions/Exception">
      <eAnnotations source="kermeta">
        <details key="kdoc" value="/** Raised when user tries to add an object that is not conform to the metamodel */"/>
      </eAnnotations>
    </eClassifiers>
  </eSubpackages>
</ecore:EPackage>
