/* $Id: Ecore2KermetaQuickFixWizardPage.java,v 1.1 2005-07-21 15:41:44 dvojtise Exp $
 * Project: Kermeta (First iteration)
 * File: KermetaNewFileWizardPage.java
 * License: EPL
 * Copyright: IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date: May 19, 2005
 * Authors: 
 * 			zdrey
 * 			dvojtise
 * Notes :
 * 	This file was primarily generated by Eclipse plug-in helper
 */

package fr.irisa.triskell.kermeta.tools.wizards;

import fr.irisa.triskell.kermeta.loader.ecore.ECore2Kermeta;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.Path;
import org.eclipse.jface.dialogs.IDialogPage;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.dialogs.ContainerSelectionDialog;
import org.eclipse.ui.internal.ide.misc.ContainerSelectionGroup;

/**
 * The Quick fix page allows to enable or disable some simple 
 * quick fixes to be run while transforming Ecore to Kermeta files.
 */


public class Ecore2KermetaQuickFixWizardPage extends WizardPage implements Listener
{

    
    public static final int GRID_DATA_WIDTH = 150;
 /*   public static final String defaultPackageString = "root_package";
    public static final String defaultClassString = "Main";
    public static final String defaultOperationString = "main";
*/    
    private Text methodRenamePrefixText;
    private Text methodRenamePostfixText;
    private Group operationPropertyGroup;
    private Group operationGroup;
    
/*    private Text mainOperationText;*/
    // This attribute exists in WizardNewFileCreationPage, but private :(
    //protected ResourceAndContainerGroup resourceGroup;
    
	private static final int SIZING_CONTAINER_GROUP_HEIGHT = 250;
	

	
	/**
	 * Constructor for SampleNewWizardPage.
	 * @param pageName
	 */
	public Ecore2KermetaQuickFixWizardPage(IStructuredSelection selection) {
		super("wizardPage");
		setTitle("Ecore2Kermeta quick fixes");
		setDescription("Indicate here which fixes you want to apply while transforming your ecore into kermeta (this will not change the ecore file).");
		
	}
	
    /**
     * This is a copy of createControl of super class, extended in order to add
     * a specific group for default folders (src/lib)
     * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
     */
    public void createControl(Composite parent)
    {

		Composite container = new Composite(parent, SWT.NULL);
		GridLayout layout = new GridLayout();
		container.setLayout(layout);
		layout.numColumns = 1;
		
		Composite groupcontainer = new Composite(container, SWT.NULL);
		layout = new GridLayout(2, false);
		groupcontainer.setLayout(layout);
		layout.makeColumnsEqualWidth = false;
		layout.verticalSpacing = 9;		
		Label label = new Label(groupcontainer, SWT.NULL);
		label.setText("&Enable quick fixes ");
		Button checkBox = new Button(groupcontainer, SWT.CHECK);
		
		createQuickFixOperationPropertyGroup(container);
		createQuickFixOperationGroup(container);
		
		initialize();
		dialogChanged();
		setControl(container);
    }
    
    /**
     * Create a window that propose to the user the specification of a 
     * root package, a main class, and a main method.
     */
    protected void createQuickFixOperationPropertyGroup(Composite parent)
    {
        Font font = parent.getFont();
        // Advanced group
        operationPropertyGroup = new Group(parent, SWT.NONE);
        GridLayout layout = new GridLayout(2,false);
        operationPropertyGroup.setLayout(layout);
        operationPropertyGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        operationPropertyGroup.setFont(font);
        operationPropertyGroup.setText("Fix Operation/Property name conflicts"); //$NON-NLS-1$
        // Create the pacakge, class, operation fields
		Label label = new Label(operationPropertyGroup, SWT.NULL);
		label.setText("Enable Operation/Property name conflicts quick fix ");
		Button checkBox = new Button(operationPropertyGroup, SWT.CHECK);
        createLabel(operationPropertyGroup, "Operation prefix ", true, font);
        methodRenamePrefixText = createText(operationPropertyGroup, true, font, ECore2Kermeta.methodRenamePrefix);
        createLabel(operationPropertyGroup, "Operation postfix ", true, font);
        methodRenamePostfixText = createText(operationPropertyGroup, true, font, ECore2Kermeta.methodRenamePostfix);
    }
    
    /**
     * Create a window that propose to the user the specification of a 
     * root package, a main class, and a main method.
     */
    protected void createQuickFixOperationGroup(Composite parent)
    {
        Font font = parent.getFont();
        // Advanced group
        operationGroup = new Group(parent, SWT.NONE);
        GridLayout layout = new GridLayout(2,false);
        operationGroup.setLayout(layout);
        operationGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        operationGroup.setFont(font);
        operationGroup.setText("Fix Operation conflicts"); //$NON-NLS-1$
        // Create the pacakge, class, operation fields

        //Button checkBox = new Button(parent, SWT.CHECK);
        createLabel(operationGroup, "Operation prefix (if conflict) ", true, font);
        methodRenamePrefixText = createText(operationGroup, true, font, ECore2Kermeta.methodRenamePrefix);
        createLabel(operationGroup, "Operation postfix (if conflict) ", true, font);
        methodRenamePostfixText = createText(operationGroup, true, font, ECore2Kermeta.methodRenamePostfix);
    }
    
	/**
	 * Tests if the current workbench selection is a suitable
	 * container to use.
	 */	
	private void initialize() {

	}
	

	
	/**
	 * Ensures that both text fields are set.
	 */

	private void dialogChanged() {
	/*	String fileName =  getFilename();//page.getFileName();

		if (fileName.length() == 0) {
			updateStatus("File name must be specified");
			return;
		}
		
		
		int dotLoc = fileName.lastIndexOf('.');
		if (dotLoc != -1) {
			String ext = fileName.substring(dotLoc + 1);
			if (ext.equalsIgnoreCase("kmt") == false) {
				updateStatus("File extension must be \"kmt\"");
				return;
			}
		}
		*/
		
		updateStatus(null);
	}

	private void updateStatus(String message) {
		setErrorMessage(message);
		setPageComplete(message == null);
	}



	
	
	
  
    /**
     * Create the text field for the Root package.
     * Also sets a default value for this root package.
     * @param parent
     */
    protected Label createLabel(Group advancedGroup, String label, boolean enabled, Font font)
    {
        Label _label = new Label(advancedGroup, SWT.NONE);
		_label.setText(label); //$NON-NLS-1$
		_label.setEnabled(enabled);
		_label.setFont(font);
		return _label;
    }

    protected Text createText(Group advancedGroup, boolean enabled, Font font, String defaultValue)
    {
        Text _text = new Text(advancedGroup, SWT.BORDER);
        GridData data = new GridData(GridData.FILL_HORIZONTAL);
        data.widthHint = GRID_DATA_WIDTH;
        _text.setLayoutData(data);
        _text.setEnabled(enabled);
        _text.setFont(font);
        _text.setText(defaultValue);
        return _text;
    }
	
    /**
     * @return Returns the mainClassText.
     */
 //   public Text getMainClassText() {  return mainClassText;}
 //   public String getMainClassTextString() {  return mainClassText.getText();}
    
    /**
     * @return Returns the mainOperationText.
     */
  //  public Text getMainOperationText() { return mainOperationText;}
  //  public String getMainOperationTextString() { return mainOperationText.getText();}
    
    /**
     * @return Returns the packageText.
     */
  //  public Text getPackageText() {        return packageText;}
 //   public String getPackageTextString() { return packageText.getText();}
    
  //  public String getContainerText() { return containerText.getText();}
 //   public String getFilename() {return fileText.getText();}
    
    public void handleEvent(Event e)
    {
        dialogChanged();
    }
    
    
}