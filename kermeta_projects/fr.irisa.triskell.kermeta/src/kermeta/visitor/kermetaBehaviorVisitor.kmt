/* $Id: kermetaBehaviorVisitor.kmt,v 1.1 2008-07-30 13:28:53 dvojtise Exp $
 * Project   : fr.irisa.triskell.kermeta.framework
 * File      : behavior.kmt
 * License   : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Feb 04, 2008
 * Authors   : 
 *		Franck Fleurey <ffleurey@irisa.fr>
 *		Zoe Drey <zdrey@irisa.fr>
 * 		Didier Vojtisek <dvojtise@irisa.fr>
 *
 */

package kermeta::language::behavior;

require kermeta

aspect class CallVariable inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on CallFeature objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallVariable(self, context)
		end
}

aspect class CallFeature inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on CallFeature objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallFeature(self, context)
		end
}

aspect class CallSuperOperation inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on CallFeature objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallSuperOperation(self, context)
		end
}

aspect class CallResult inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on CallFeature objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::CallVariable is
		do
			result := visitor.visitCallResult(self, context)
		end
}

aspect class CallValue inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on CallFeature objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitCallValue(self, context)
		end
}

aspect class Assignment inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on Assignment objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitAssignment(self, context)
		end
}

aspect class Block inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on Block objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitBlock(self, context)
		end
}

aspect class Conditional inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on Conditional objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitConditional(self, context)
		end
}

aspect class EmptyExpression inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on EmptyExpression objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitEmptyExpression(self, context)
		end
}

aspect class IntegerLiteral inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on IntegerLiteral objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitIntegerLiteral(self, context)
		end
}

aspect class StringLiteral inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on StringLiteral objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitStringLiteral(self, context)
		end
}

aspect class BooleanLiteral inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on BooleanLiteral objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitBooleanLiteral(self, context)
		end
}

aspect class TypeLiteral inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on TypeLiteral objects
	 */	
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitTypeLiteral(self, context)
		end
}

aspect class TypeReference inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on BooleanLiteral objects
	 */		
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitTypeReference(self, context)
		end
}

aspect class VoidLiteral inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on VoidLiteral objects
	 */		
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitVoidLiteral(self, context)
		end
}

aspect class Loop inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on Loop objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitLoop(self, context)
		end
}

aspect class SelfExpression inherits KMExpressionVisitable
{
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitSelfExpression(self, context)
		end
}

aspect class VariableDecl inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on Variable objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitVariableDecl(self, context)
		end
}

aspect class Raise inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on Raise objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitRaise(self, context)
		end
}

aspect class Rescue inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on Rescue objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitRescue(self, context)
		end
}

aspect class JavaStaticCall inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on JavaStaticCall objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitJavaStaticCall(self, context)
		end
}

aspect class LambdaExpression inherits KMExpressionVisitable
{
	/**
	 *
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitLambdaExpression(self, context)
		end
}

aspect class LambdaParameter inherits KMExpressionVisitable
{
	/**
	 * Implementation of the visitor design pattern on LambdaParameter objects
	 */
	method acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::behavior::KMExpressionVisitable is
		do
			result := visitor.visitLambdaParameter(self, context)
		end
}


/**
 * This class implements the visitor design pattern for all the classes of this Behavior package,
 * in particular the classes that inherits from kermeta::behavior::Expression
 */
abstract class KMExpressionVisitor<ContextType, ResultType>
{
	operation visitCallVariable(node : CallVariable, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitCallFeature(node : CallFeature, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitCallSuperOperation(node : CallSuperOperation, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitCallResult(node : CallResult, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitCallValue(node : CallValue, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitAssignment(node : Assignment, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitBlock(node : Block, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitConditional(node : Conditional, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitEmptyExpression(node : EmptyExpression, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitIntegerLiteral(node : IntegerLiteral, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitStringLiteral(node : StringLiteral, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitBooleanLiteral(node : BooleanLiteral, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitTypeLiteral(node : TypeLiteral, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitTypeReference(node : TypeReference, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitVoidLiteral(node : VoidLiteral, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitLoop(node : Loop, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitSelfExpression(node : SelfExpression, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitVariableDecl(node : VariableDecl, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitRaise(node : Raise, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitRescue(node : Rescue, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitJavaStaticCall(node : JavaStaticCall, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitLambdaExpression(node : LambdaExpression, context : ContextType) : ResultType is do 
		result := void
	end
	
	operation visitLambdaParameter(node : LambdaParameter, context : ContextType) : ResultType is do 
		result := void
	end
	
}


/**
 * All classes that can be visited using kermeta::behavior::KMExpressionVisitor must implement this class
 */
abstract class KMExpressionVisitable
{
	/**
	 * accept method of the visitor design pattern
	 */
	operation acceptKMExpressionVisitor<ContextType, ResultType>(visitor : KMExpressionVisitor<ContextType, ResultType>, context : ContextType) : ResultType is abstract
}

