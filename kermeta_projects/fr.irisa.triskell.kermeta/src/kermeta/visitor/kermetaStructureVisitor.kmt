/* $Id: kermetaStructureVisitor.kmt,v 1.1 2008-07-30 13:28:53 dvojtise Exp $
 * License : EPL
 * Copyright : IRISA / INRIA / Universite de Rennes 1
 * ----------------------------------------------------------------------------
 * Creation date : Feb 04, 2008
 * Authors :
 *  Franck Fleurey  			<ffleurey@irisa.fr> 
 *  Zoe Drey 					<zdrey@irisa.fr>
 *  Jean-Philippe Thibault 		<jpthibault@irisa.fr>
 */
package kermeta::language::structure;

require kermeta

using kermeta::standard

aspect class Object inherits KMStructureVisitable {
}

aspect abstract class ParameterizedType inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::Type is
		do
			result := visitor.visitParameterizedType(self, context)
		end
}

aspect class ModelType inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::Type is
		do
			result := visitor.visitModelType(self, context)
		end		
}

aspect class Class inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::ParameterizedType is
	do
		result := visitor.visitClass(self, context)
	end
}

aspect class MultiplicityElement inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::TypedElement is
		do
			result := visitor.visitMultiplicityElement(self, context)
		end
}


aspect class Constraint inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::NamedElement is
		do
			result := visitor.visitConstraint(self, context)
		end
}

aspect class Operation inherits KMStructureVisitable
{

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::MultiplicityElement is
		do
			result := visitor.visitOperation(self, context)
		end
}

aspect class Tag inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTag(self, context)
		end
}

aspect class Property inherits KMStructureVisitable
{
	
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::MultiplicityElement is
		do
			result := visitor.visitProperty(self, context)
		end
}

aspect class GenericTypeDefinition inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::TypeDefinition is
		do
			result := visitor.visitGenericTypeDefinition(self, context)
		end
}

aspect class ClassDefinition inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::GenericTypeDefinition is
		do
			result := visitor.visitClassDefinition(self, context)
		end
}

aspect class TypedElement inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::NamedElement is
		do
			result := visitor.visitTypedElement(self, context)
		end
}

aspect class ObjectTypeVariable inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::Type is
		do
			result := visitor.visitObjectTypeVariable(self, context)
		end
}

aspect class VirtualType inherits KMStructureVisitable {

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::ObjectTypeVariable is
		do
			result := visitor.visitVirtualType(self, context)
		end
}

aspect class ModelTypeVariable inherits KMStructureVisitable {

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::Type is
		do
			result := visitor.visitModelTypeVariable(self, context)
		end
}

aspect class Model inherits KMStructureVisitable {

	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitModel(self, context)
		end
}

aspect class ProductType inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::Type is
		do
			result := visitor.visitProductType(self, context)
		end
}

aspect class FunctionType inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::Type is
		do
			result := visitor.visitFunctionType(self, context)
		end
}

aspect class Type inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitType(self, context)
		end
}

aspect class TypeVariableBinding inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitTypeVariableBinding(self, context)
		end
}

aspect class PrimitiveType inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::DataType is
	do
		result := visitor.visitPrimitiveType(self, context)
	end
}

aspect class NamedElement inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitNamedElement(self, context)
		end
}

aspect class TypeDefinitionContainer inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::NamedElement is
		do
			result := visitor.visitTypeDefinitionContainer(self, context)
		end
}

aspect class Package inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::TypeDefinitionContainer is
		do
			result := visitor.visitPackage(self, context)
		end
}

aspect class ModelingUnit inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitModelingUnit(self, context)
		end
}

aspect class Filter inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitFilter(self, context)
		end
}

aspect abstract class Require inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitRequire(self, context)
		end
}

aspect abstract class Using inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::KMStructureVisitable is
		do
			result := visitor.visitUsing(self, context)
		end
}

aspect class TypeDefinition inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::NamedElement is
		do
			result := visitor.visitTypeDefinition(self, context)
		end
}

aspect class VoidType inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::Type is
		do
			result := visitor.visitVoidType(self, context)
		end
}

aspect class DataType inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::Type is
		do
			result := visitor.visitDataType(self, context)
		end
}

aspect class Enumeration inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::DataType is
		do
			result := visitor.visitEnumeration(self, context)
		end
}

aspect class EnumerationLiteral inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::NamedElement is
		do
			result := visitor.visitEnumerationLiteral(self, context)
		end
}

aspect class Parameter inherits KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	method acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType from kermeta::language::structure::MultiplicityElement is
		do
			result := visitor.visitParameter(self, context)
		end
}

/**
 * Implementation of the Visitor pattern for the model elements contained in structure package
 */
abstract class KMStructureVisitor<ContextType, ResultType>
{
	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitClass(node : Class, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitMultiplicityElement(node : MultiplicityElement, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitOperation(node : Operation, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTag(node : Tag, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitProperty(node : Property, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitClassDefinition(node : ClassDefinition, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTypedElement(node : TypedElement, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitObjectTypeVariable(node : ObjectTypeVariable, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitVirtualType(node : VirtualType, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitModelTypeVariable(node : ModelTypeVariable, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitModel(node : Model, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitProductType(node : ProductType, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitFunctionType(node : FunctionType, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitType(node : Type, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTypeVariableBinding(node : TypeVariableBinding, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitPrimitiveType(node : PrimitiveType, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitNamedElement(node : NamedElement, context : ContextType) : ResultType is do 
		result := void
	end

	/*operation visitSelfType(node : SelfType, context : ContextType) : ResultType is do 
		result := void
	end*/

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitPackage(node : Package, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTypeDefinition(node : TypeDefinition, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitVoidType(node : VoidType, context : ContextType) : ResultType is do 
		result := void
	end
	
	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitDataType(node : DataType, context : ContextType) : ResultType is do 
		result := void
	end
	
	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitEnumeration(node : Enumeration, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitEnumerationLiteral(node : EnumerationLiteral, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitParameter(node : Parameter, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitGenericTypeDefinition(node : GenericTypeDefinition, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitParameterizedType(node : ParameterizedType, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitModelType(node : ModelType, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitTypeDefinitionContainer(node : TypeDefinitionContainer, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitConstraint(node : Constraint, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitModelingUnit(node : ModelingUnit, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitRequire(node : Require, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitUsing(node : Using, context : ContextType) : ResultType is do 
		result := void
	end

	/** Implementation of the Visitor pattern : 'visit(node)' method */
	operation visitFilter(node : Filter, context : ContextType) : ResultType is do 
		result := void
	end

}


/**
 * All the classes defined in this <code>kermeta::language::structure</code> package 
 * inherit this class. Part of Visitor pattern implementation.
 */
abstract class KMStructureVisitable
{
	/**
	 * 'accept()' method of the GoF 'Visitor' design pattern
	 */
	operation acceptKMStructureVisitor<ContextType, ResultType>(visitor : KMStructureVisitor<ContextType, ResultType>, context : ContextType) : ResultType is abstract
}
}