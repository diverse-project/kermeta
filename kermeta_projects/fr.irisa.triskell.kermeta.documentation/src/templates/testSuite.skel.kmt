@mainClass "TestVariable" // qualified name of class of the operation to launch
@mainOperation "main_operation" // operation to launch

package root_package;
require "../../../fr.irisa.triskell.kermeta.framework/src/kermeta/Standard.kmt"

/*****************************************************************************
 * $Id:
 * Project : Kermeta (First iteration)
 * Creation date :  
 * File : testVariable.main.kmt
 * 		
 * License : EPL
 * Copyright : IRISA / Universite de Rennes 1
 * Creation date : Mar 14, 2005
 * Author : zdrey
 * Description : Around variable 
 *
 ****************************************************************************/


/*
 * General description of the test suite defined inside this class
 */
class MyClass
{

    /*
     * How to write the tests : 
     * Describe the test plans first,
     * in such a way that you only have then to "implement" each test case
     * inside an operation.
     *
    */
    
    /* NOTE : how to prepare the introduction of the "assert" keyword
     * In order to ease the test verifications, there are two ways to proceed :
     *      - first one is to use the stdio singleton class and write()
     *      operation
     *      - second one is to use the exception handling
     * Tips stolen from dotnetcoders.com :
     *      - Consider valid and invalid inputs
     *      - Check for exception handling
     *      - Cover all return cases
     *      - Verify side effects
     */


    /*
     * Main operation that embeds all the tests
     */
     operation main_operation() : Void is do
         var result1 : some::type

         // short reminder of op1 test goal
         
         // short reminder of op2 test goal

         // short reminder of opN test goal
     
     end
     

    /*
     * First test definition of the test plan.
     * Describe it here :
     *    - what it tests
     *    - its params
     *    - what it returns
     */
     operation op1() : Void is do
     end

     /*
     * idem
     */
    operation op2() : Void is do
     end

}
