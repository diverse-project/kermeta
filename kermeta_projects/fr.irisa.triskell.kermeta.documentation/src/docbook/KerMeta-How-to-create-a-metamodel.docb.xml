<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book lang="en-US">
  <bookinfo>
  	<mediaobject>  
		<imageobject>
	   		<imagedata fileref="KerMeta-How-to-create-a-metamodel_figures/KermetaLogo.png" format="PNG"/>
		</imageobject>	  
	</mediaobject>
    <pubdate>Build date: @BUILD.DATE@</pubdate>

    <author>
      <firstname>Fran√ßois Tanguy, Didier Vojtisek</firstname>

      <firstname></firstname>
    </author>

    <title>Kermeta tutorial</title>

    <date>2006-10-27T16:24:23</date>

    <keywordset>
      <keyword>Kermeta</keyword>

      <keyword>metamodeling</keyword>

      <keyword>language</keyword>
    </keywordset>

    <subtitle>How to create a metamodel</subtitle>

    <bibliomisc>Licence EPL</bibliomisc>

    <date>19/11/2006</date>

    <abstract>
      <para>This tutorial is part of a serie of tutorials that explain step by step one of the aspect of Kermeta. 
      This one will explain you how to a metamodel to be used by kermeta. However, 
      there are many ways to create them, this tutorial will present some of them.</para>
    </abstract>

    <publisher>
      <publishername>INRIA</publishername>

      <address>
        <state>France</state>
        <otheraddr>
          <ulink url="http://www.inria.fr">http://www.inria.fr</ulink>
        </otheraddr>
      </address>
    </publisher>

    <confgroup>
      <conftitle>title</conftitle>

      <confnum>Reference</confnum>

      <confsponsor>sponsor</confsponsor>
    </confgroup>
  </bookinfo>

  <preface>
    <?print-orientation portrait?>

    <title>Preface</title>

    <para><emphasis role="strong">Kermeta is a Domain Specific Language
    dedicated to metamodel engineering. It fills the gap let by MOF which
    defines only the structure of meta-models, by adding a way to specify
    static semantic (similar to OCL) and dynamic semantic (using operational
    semantic in the operation of the metamodel). </emphasis> <emphasis
    role="strong"> <emphasis role="strong">Kermeta uses the object-oriented
    paradigm like Java or Eiffel.</emphasis> </emphasis> <emphasis
    role="strong"> This document presents various aspects of the language,
    including the textual syntax, the metamodel (which can be viewed as the
    abstract syntax) and some more advanced features typically included in its
    framework. </emphasis></para>

    <important>
      <emphasis role="strong">Kermeta is an evolving software and d</emphasis>

      <emphasis role="strong">
        <emphasis role="strong">espite that we put a lot of attention to this
        document, it may contain errors (more likely in the code samples). If
        you find any error or have some information that improves this
        document, please send it to us using the bug tracker in the
        forge:</emphasis>
      </emphasis>

      <ulink type="" url="http://gforge.inria.fr/tracker/?group_id=32">
        <emphasis role="strong">
          <emphasis role="strong">
            <emphasis
            role="strong">http://gforge.inria.fr/tracker/?group_id=32</emphasis>
          </emphasis>
        </emphasis>
      </ulink>

      <emphasis role="strong">
        <emphasis role="strong">
          <emphasis role="strong" />
        </emphasis>
      </emphasis>

      <emphasis role="strong">
        <emphasis role="strong">
          <emphasis role="strong">or using the kermeta user mailing list
          (kermeta-users@lists.gforge.inria.fr)</emphasis>
        </emphasis>
      </emphasis>

      <emphasis role="strong">
        <emphasis role="strong">
          <emphasis role="strong" />
        </emphasis>
      </emphasis>

      Last check: v1.3.2
    </important>

    <tip>
      The most update version of this document is available on line from 

      <ulink type=""
      url="http://www.kermeta.org/">http://www.kermeta.org</ulink>

       .
    </tip>
  </preface>

  <chapter>
    <title>Prerequisites</title>

    <para>No particular background is necessary to read this tutorial.</para>

    <important>
      KerMeta must be installed. If not, please refer to "<ulink type=""
      url="../KerMeta-How-to-install-KerMeta/">How to install KerMeta</ulink>" tutorial.
    </important>
  </chapter>

  <chapter>
    <title>Introduction</title>

    <para>There are two ways to create a the structure of a meta model. The first one is
    to use Kermeta textual syntax and creating a ".kmt" file. using this approach you will 
    have the sensation of "programming" your metamodel. The second one is to
    create an Ecore file using the tools proposed by EMF. (for example the EMF reflexive editor, 
    or the ecore diagram editor from ecorre tools project).
    </para>
    <para>You'll then be able to transform the ecore files to kmt files and vice versa as needed.</para>
    
    

    <para>This tutorial should help you in manipulating the Ecore and KerMeta
    files. It gives an overview on how to create meta models and how to
    transform them.</para>

    <para>Start by creating a new general empty project in Eclipse.</para>
  </chapter>

  <chapter>
    <title>A meta model using Kermeta textual syntax</title>

    <para>Select in the main menu of Eclipse</para>

    <para>"File" &gt; "New" &gt;&gt; "Other..."</para>

    <para>This action opens the following window.</para>

    <figure>
      <title></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="KerMeta-How-to-create-a-metamodel_figures/kmt-from-scratch.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Select "New Kermeta file" and press "Next &gt;".</para>

    <figure>
      <title></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="KerMeta-How-to-create-a-metamodel_figures/kmt-file.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Give a name (MyMetamodel.kmt for instance) to the new file, select a
    location (The default one is good for us) and leave Main class and Main
    operation blank for the moment. It will be used later to run models. Click
    on "Finish".</para>

    <para>Now your main window should look like the one above. The file is
    written in KerMeta language. So you can edit this file to add some
    classes, attributes and so on using the KerMeta language (read <ulink
    type=""
    url="http://www.kermeta.org/documents/manual/">http://www.kermeta.org/documents/manual/</ulink>
    for more details on KerMeta language).</para>

    <para></para>

    <figure>
      <title></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="KerMeta-How-to-create-a-metamodel_figures/kmt-blank-file.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </chapter>

  <chapter>
    <title>A meta model from an Ecore file</title>

    <para>To create an Ecore file, go in the main menu of Eclipse select :</para>

    <para>"File" &gt; "New" &gt; "Other..."</para>

    <figure>
      <title></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="KerMeta-How-to-create-a-metamodel_figures/ecore-file.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Select "Ecore model" wizard and click "Next &gt;". Select a location
    and a name for the file. Call it "AnOtherMetamodel.ecore" for example.
    Click on "Finish".</para>

    <para>Your main window now looks like this :</para>

    <figure>
      <title></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="KerMeta-How-to-create-a-metamodel_figures/ecore-blank-file.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>You can edit this meta model. If you do not know how to do that,
    please have a look in section about the Ecore editor (page 26) in the following link :</para>

    <para><ulink type=""
    url="http://www.eclipsecon.org/2005/presentations/EclipseCon2005_Tutorial28.pdf">http://www.eclipsecon.org/2005/presentations/EclipseCon2005_Tutorial28.pdf</ulink></para>

    <important>
      You must at least fill in the name, ns prefix and ns URI of the package.
    </important>

    <figure>
      <title></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="KerMeta-How-to-create-a-metamodel_figures/ecore-package.png" />
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>You can also edit these ecore file using a diagram editor. For example, the ecore tools project provides a class diagram
    editor that works on top of ecore files. The diagram informations (ie. shape and position of the classes on the sheet) are stored in
    a separated file : <literal>*.ecorediag</literal></para>
    <figure>
      <title>Sample use of Ecore tool diagram editor on top of an ecore file</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="KerMeta-How-to-create-a-metamodel_figures/ecorediag_sample.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Let say that you edited this meta model and now you want to add
    some behaviors. You have now two possibilities :</para>
    <itemizedlist>
        <listitem>
          <para><emphasis role="strong">Use kermeta aspects</emphasis></para>
          <para>You can directly require the ecore file and then using the <literal>aspect</literal> keyword 
          you can create a class that will extend the definition imported from the ecore file. 
          Since the addition of aspect in kermeta (v1.0.0), this is usually the recommended way to add behavior.</para>
        </listitem>
        <listitem>
          <para><emphasis role="strong">Transform your ecore file into a KMT text file</emphasis> and then directly add the expected behavior in it.</para>
          <para>This is the old way to achieve that, you simply have to transform your ecore file to and from the textual syntax (ie. kmt file) so 
          yopu'll be able to add new operations, atributes, ... and define their behavior using the textual syntax.</para>
        </listitem>

        
    </itemizedlist>
    <para>
    You'll find more details and tip and tricks about adding behavior to a metamodel in the "How to add behavior to a metamodel" tutorial :
    <ulink type=""
    url="http://www.kermeta.org/documents/tutorials/tut-add_behavior/">http://www.kermeta.org/documents/tutorials/tut-add_behavior/</ulink>
    </para>

    
  </chapter>

  <chapter>
    <title>Transformations of KerMeta meta models</title>

    <para>Several transformations are available. This will allow you to choose the representation of your meta
    model from one format to another. For example, if you prefer coding, then you will
    probably prefer the kmt format (KerMeta text). Otherwise you will design
    with the reflexive editor and the km files (serialized files).</para>

    <para>So transformations give you the ability to adapt the meta model to
    your preferred point of view : coding view or graphical view.</para>
    
    <variablelist>
      <title>List of formats related to metamodels</title>

      <varlistentry>
        <term><emphasis role="strong">*.ecore</emphasis></term>

        <listitem>
          <para>This is the format from EMF metamodel: it contains only the structural part of the metamodel. It is used as a reference for the serialisation of models.
          Other information may be stored as EAnnotations (but in this case they are specific to a tool.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="strong">*.kmt</emphasis></term>

        <listitem>
          <para>This is the textual form of kermeta metamodels.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="strong">*.km</emphasis></term>

        <listitem>
          <para>This is the model form (ie. XMI) of kermeta metamodels. Ie.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="strong">*.ecorediag</emphasis></term>
        <listitem>
          <para>This is the class diagram information on top of a ecore model. (ie. position , shape, ... information in the diagram)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="strong">*.kmdi</emphasis></term>
        <listitem>
          <para>This is the class diagram information on top of a km model. (ie. position , shape, ... information in the diagram)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="strong">*.uml</emphasis></term>
        <listitem>
          <para>For uml models. There are some ways to transform part of it into ecore or kermeta (class diagram part and stereotype definiton part)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="strong">*.ocl</emphasis></term>
        <listitem>
          <para>For OCL constraints in a textual format. OCL invariants can be transformed into Kermeta invariants.</para>          
        </listitem>
      </varlistentry>
	</variablelist>
	
	<para>Yopu can usually relate/transform these formats using a right click on the input file. More information about the options
	provided by these transformation is provided in the UserInteface guide. <ulink type=""
    url="http://www.kermeta.org/documents/ui_user_guide/">http://www.kermeta.org/documents/ui_user_guide/</ulink>
    </para>
	<variablelist>
      <title>List of available transformations (not exhaustive)</title>

      <varlistentry>
        <term><emphasis role="strong">ecore to km</emphasis></term>
        <listitem>
          <para>Transform an ecore model into a km model.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="strong">ecore to kmt</emphasis></term>
        <listitem>
          <para>Transform an ecore model into a kmt text file.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="strong">km to ecore</emphasis></term>
        <listitem>
          <para>Transform a km model into an ecore model. Kermeta specific information are stored into EAnnotations (see Kermeta reference manual). Roundtrip is supported</para>
        </listitem>
      </varlistentry> 
      <varlistentry>
        <term><emphasis role="strong">kmt to ecore</emphasis></term>
        <listitem>
          <para>Transform a kmt text file into an ecore model. Kermeta specific information are stored into EAnnotations (see Kermeta reference manual). Roundtrip is supported</para>
        </listitem>
      </varlistentry> 
      <varlistentry>
        <term><emphasis role="strong">uml class to ecore</emphasis></term>
        <listitem>
          <para>Transform the uml classes into ecore classes. </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="strong">uml profile to ecore</emphasis></term>
        <listitem>
          <para>Transform the profile definitions into ecore classes to be used for loading uml model using such stereotypes. </para>
        </listitem>
      </varlistentry>  
      <varlistentry>
        <term><emphasis role="strong">ocl to kermeta</emphasis></term>
        <listitem>
          <para>Transform the ocl invariants into kermeta invariants. </para>
        </listitem>
      </varlistentry>    
	</variablelist>
    </chapter>
</book>