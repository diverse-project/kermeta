<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book lang="en-US">
  <bookinfo>
    <pubdate>Build date: @BUILD.DATE@</pubdate>

    <author>
      <firstname>Fran√ßois Tanguy, Didier Vojtisek, Cyril Faucher</firstname>

      <firstname></firstname>
    </author>

    <title>Kermeta tutorial</title>

    <date>2006-09-25T10:56:58</date>

    <keywordset>
      <keyword>Kermeta</keyword>

      <keyword>metamodeling</keyword>

      <keyword>language</keyword>
    </keywordset>

    <subtitle>Reference manual</subtitle>

    <bibliomisc>Licence EPL</bibliomisc>

    <date>19/07/2006</date>

    <abstract>
      <para>This tutorial is part of a serie of tutorials that explain step by step one of the aspect of Kermeta. 
      This one will show you how to use Eclipse to run a Kermeta program.</para>
    </abstract>

    <publisher>
      <publishername>INRIA</publishername>

      <address>
        <state>France</state>
        <otheraddr>
          <ulink url="http://www.inria.fr">http://www.inria.fr</ulink>
        </otheraddr>
      </address>
    </publisher>

    <confgroup>
      <conftitle>title</conftitle>

      <confnum>Reference</confnum>

      <confsponsor>sponsor</confsponsor>
    </confgroup>
  </bookinfo>

  <preface>
    <?print-orientation portrait?>

    <title>Preface</title>

    <para><emphasis role="strong">Kermeta is a Domain Specific Language
    dedicated to metamodel engineering. It fills the gap let by MOF which
    defines only the structure of meta-models, by adding a way to specify
    static semantic (similar to OCL) and dynamic semantic (using operational
    semantic in the operation of the metamodel). </emphasis> <emphasis
    role="strong"> <emphasis role="strong">Kermeta uses the object-oriented
    paradigm like Java or Eiffel.</emphasis> </emphasis> <emphasis
    role="strong"> This document presents various aspects of the language,
    including the textual syntax, the metamodel (which can be viewed as the
    abstract syntax) and some more advanced features typically included in its
    framework. </emphasis></para>

    <important>
      <emphasis role="strong">Kermeta is an evolving software and d</emphasis>

      <emphasis role="strong">
        <emphasis role="strong">espite that we put a lot of attention to this
        document, it may contain errors (more likely in the code samples). If
        you find any error or have some information that improves this
        document, please send it to us using the bug tracker in the
        forge:</emphasis>
      </emphasis>

      <ulink type="" url="http://gforge.inria.fr/tracker/?group_id=32">
        <emphasis role="strong">
          <emphasis role="strong">
            <emphasis
            role="strong">http://gforge.inria.fr/tracker/?group_id=32</emphasis>
          </emphasis>
        </emphasis>
      </ulink>

      <emphasis role="strong">
        <emphasis role="strong">
          <emphasis role="strong" />
        </emphasis>
      </emphasis>

      <emphasis role="strong">
        <emphasis role="strong">
          <emphasis role="strong">or using the developer mailing list
          (kermeta-developers@lists.gforge.inria.fr)</emphasis>
        </emphasis>
      </emphasis>

      <emphasis role="strong">
        <emphasis role="strong">
          <emphasis role="strong" />
        </emphasis>
      </emphasis>

      Last check: v0.3.1
    </important>

    <tip>
      The most update version of this document is available on line from 

      <ulink type=""
      url="http://www.kermeta.org/">http://www.kermeta.org</ulink>

       .
    </tip>
  </preface>

  <chapter>
    <title>Prerequisites</title>

    <para>The reader knows how to create KerMeta meta models. The reader knows
    how to create models. The reader knows how to add behavior to KerMeta meta
    models.</para>
  </chapter>

  <chapter>
    <title>A view on the FSM meta model</title>

    <para>The meta model used for this tutorial is contained in the file named
    "fsm.kmt" in the "metamodels" directory. This is a KerMeta meta model
    which operations have been filled in.</para>

    <figure>
      <title></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="KerMeta-How-to-use-run-configuration_figures/fsm-metamodel.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </chapter>

  <chapter>
    <title>How to run an FSM model ?</title>

    <para></para>

    <sect1>
      <title>An entry point for the program</title>

      <para>We want to execute an FSM model. To do that we must call the "run"
      operation of the "FSM" class. We are going to do that thanks to a
      KerMeta script. This script will : load an instance of the FSM meta
      model stored in a file call the run operation of these instance. To
      launch a script, the interpreter must know the entry point of the
      program. That is the roles of these two statements : </para>

      <itemizedlist>
        <listitem>
          <para>@mainClass which stands for the main class,</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>@mainOperation which stands for the main operation of the main
          class.</para>
        </listitem>
      </itemizedlist>

      <para>In the FSM example, those scripts are in the "launcher" directory.
      Look at "minimization.kmt" script. Here the interpreter knows that entry
      point of the program is the operation "main" in the "Minimization"
      class.</para>

      <figure>
        <title></title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="KerMeta-How-to-use-run-configuration_figures/launchers.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect1>

    <sect1>
      <title>Constraints checking execution or no constraints checking
      execution</title>

      <para>Using KerMeta allows you to choose between two types of executions
      : one with constraints checking and one without. A constraints checking
      execution checks every pre/post condition statements of your KerMeta
      program. If one of this pre/post conditions are violated, an exception
      is raised and the program is aborted. A none constraints checking
      execution does not check the pre/post condition statements of your
      KerMeta program. For more details, go to section 4. One constraints
      checking execution sample is explained.</para>
    </sect1>

    <sect1>
      <title>Execution without parameters</title>

      <para>Let's have a look at the file named "minimization.kmt". Open it.
      Look at the code of the main operation. There is no parameter. To run
      this script with constraint checking, right click on "minimization.kmt"
      and select "Run As" and "Kermete App with constraints". To run this
      script without constraint checking, right click on "minimization.kmt"
      and select "Run As" and "Kermeta App".</para>

      <figure>
        <title></title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="KerMeta-How-to-use-run-configuration_figures/minimization-execution.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The program asks you for a filename. Put in
      "../models/sample1.fsm" for example. You are lastly asked for a filename
      which will correspond to the file generated by the program. Put in
      "../generated.fsm" and see the execution.</para>
    </sect1>

    <sect1>
      <title>Execution with parameter(s)</title>

      <para>Now if you have a look at the three others scripts
      (checkInvariants, determinization and fsmLauncher) you will notice that
      the main operation of the main class takes one argument. Let's focus on
      "fsmLauncher.kmt" launcher. The main operation takes one parameter which
      is the name of the file containing the FSM model. It loads the model,
      prints it and runs it. If you try the running method above, an exception
      is raised because the parameterized file does not exist. Indeed we did
      not specify any filename to the program. So, you cannot use the method
      above to run those kind of script. That is the reason why we are going
      to use run configurations. Then right click on "fsmLauncher.kmt" file
      and select "Run As" and "Run...". A window appears like the one below.
      Select the run configuration named "loaderFSM" and look at the different
      options. Have a special look at the file parameters : </para>

      <itemizedlist>
        <listitem>
          <para>"Location of your program file", here this is
          "fsmLauncher.kmt" filename relative to the project's root
          directory.</para>
        </listitem>

        <listitem>
          <para>"Class qualified name", that is to say the main class of the
          program.</para>
        </listitem>

        <listitem>
          <para>"Operation name", that is to say the main operation of the
          main class.</para>
        </listitem>

        <listitem>
          <para>"Operation arguments", the parameters you want to send to the
          main operation.</para>
        </listitem>
      </itemizedlist>

      <para>Here, we give the string "../models/sample1.fsm" as a parameter to
      mainLoadFSM operation to "fsm::Main" class. By clicking on "Run" button,
      it will start the execution. You can create yourself some new run
      configurations. Just by left clicking on "Kermeta Application " or
      "Kermeta Constraint Application" (depending on the constraint checking
      you want) and select "New" and fill in the required fields.</para>

      <caution>
        <para>Eclipse is slash sensible. It only accepts front slash and no
        backslash. Then
        /fr.irisa.triskell.kermeta.samples.fsm.demo/launcher/fsmLauncher.kmt
        is a valid filename whereas
        \fr.irisa.triskell.kermeta.samples.fsm.demo\launcher\fsmLauncher.kmt
        is not.</para>
      </caution>

      <figure>
        <title></title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="KerMeta-How-to-use-run-configuration_figures/run_configuration.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect1>
  </chapter>

  <chapter>
    <title>Constraints checking execution sample</title>

    <para>Have a look at the "step" method in the "State" class in the
    "fsm.kmt" file.</para>

    <programlisting>// Go to the next state
operation step(c : String) : String raises FSMException is

// Declaration of the pre-condition
pre notVoidInput is
   c != void and c != ""

do
   // Get the valid transitions
   var validTransitions : Collection&lt;Transition&gt; 
   validTransitions :=	outgoingTransition.select { t | t.input.equals(c) }
   // Check if there is one and only one valid transition
   if validTransitions.empty then raise NoTransition.new end
   if validTransitions.size &gt; 1 then raise NonDeterminism.new end

   // Fire the transition
   result := validTransitions.one.fire
end

// Declaration of the post-condition
post notVoidOutput is
   result != void and result != ""</programlisting>

    <para>There is a pre condition which says that the character given as a
    parameter must not be void or empty string. The post condition says that
    the result must not be void or empty string. For each "step" method call,
    the pre and post conditions will be checked. If there are evaluated as
    false, the program is aborted otherwise the program goes on. Look at the
    run configuration named "loaderFSM4prepost". Open the file
    (../models/sample1postv.fsm) used as parameter for this configuration.
    Observe the finite state diagram.</para>

    <sect1>
      <title>Pre condition violation</title>

      <para>Execute "loaderFSM4prepost" configuration. When you are asked for
      a letter , just press enter to send an empty string. Normally, it should
      provoke the violation of the pre condition. before loading after loading
      State : s1 Transition : s1-(c/NC)-&gt;s2 State : s2 Transition :
      s2-(x/y)-&gt;s2 Current state : s1 give me a letter : stepping...
      [kermeta::exceptions::ConstraintViolatedPre:8670] pre notVoidInput of
      operation step of class State violated</para>
    </sect1>

    <sect1>
      <title>Post condition violation</title>

      <para>Execute "loaderFSM4prepost" configuration. When you are asked for
      a letter , press c and then press enter. Normally, the post condition
      will be violated because the result will be an empty string. before
      loading after loading State : s1 Transition : s1-(c/NC)-&gt;s2 State :
      s2 Transition : s2-(x/y)-&gt;s2 Current state : s1 give me a letter : c
      c stepping... [kermeta::exceptions::ConstraintViolatedPost:9684] post
      notVoidOutput of operation step of class State violated</para>
    </sect1>
  </chapter>
</book>