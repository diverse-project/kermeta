<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!-- $Id: KerMeta-Process-Tutorial.docb.xml 8828 2010-10-26 13:40:23Z hrambelo $ -->
<book lang="en-US" id="process_tutorial">
    <bookinfo>
        <mediaobject>
            <imageobject>
                <imagedata fileref="Kermeta-Tutorial-Process_figures/KermetaLogo.png" format="PNG"/>
            </imageobject>
        </mediaobject>
        <title>Kermeta Tutorial : Processes to build a DSL</title>
        <pubdate>Build date: @BUILD.DATE@</pubdate>
        <pubdate>$Date:: 2010-01-26 14:40:23#$</pubdate>
        <author>
            <firstname>Haja</firstname>
            <surname>Rambelontsalama</surname>
        </author>
        <keywordset>
            <keyword>Kermeta</keyword>
            <keyword>metamodeling</keyword>
            <keyword>language</keyword>
            <keyword>kmLogo</keyword></keywordset>
        <subtitle>Reference manual</subtitle>
        <bibliomisc>License EPL</bibliomisc>
        <abstract>
            <para>This tutorial is a step-by-step user-guide to the process of building a DSL using
                the Kermeta language.</para>
        </abstract>
        <publisher>
            <publishername>INRIA</publishername>
            <address><state>France</state>
<otheraddr><ulink url="http://www.inria.fr">http://www.inria.fr</ulink></otheraddr></address></publisher>
    </bookinfo>
    <preface id="preface.link">
        <title id="preface.title.link">Preface<phrase id="preface"/></title>
        <para>Kermeta is a Domain Specific Language dedicated to metamodel engineering. It fills the
            gap let by MOF which defines only the structure of meta-models, by adding a way to
            specify static semantic (similar to OCL) and dynamic semantic (using operational
            semantic in the operation of the metamodel). Kermeta uses the object-oriented paradigm
            like Java or Eiffel.</para>
        <para>This document is an user-guide to create a DSL using the Kermeta language. This main
            document explain the different processes to rapidly achieve this goal. For a direct
            acces to the how-to and the examples, please refer to those presented in the FSM
            Tutorial and the Logo Tutorial. For the explanation of the concepts mentioned here,
            please refer to the Kermeta manual.</para>
        <important>
            <para>Kermeta is an evolving software and despite that we put a lot of attention to this
                document, it may contain errors (more likely in the code samples). If you find any
                error or have some information that improves this document, please send it to us
                using the bug tracker in the forge: <ulink type=""
                    url="http://gforge.inria.fr/tracker/?group_id=32">
                    <emphasis role="strong">http://gforge.inria.fr/tracker/?group_id=32</emphasis>
                </ulink> or using the developer mailing list
                (kermeta-developers@lists.gforge.inria.fr) Last check: v1.2.0 </para>
        </important>
        <tip>
            <para> The most update version of this document is available on line from <ulink type=""
                    url="http://www.kermeta.org/">http://www.kermeta.org</ulink> . </para>
        </tip>
    </preface>
    <chapter id="chapter_introduction.link">
        <title id="chapter_introduction.title.link">Introduction<phrase/></title>
        <para>This document is an user-guide to create a Domain Specific Language (DSL) using the
            Kermeta language. This main document explains the different processes to rapidly achieve
            this goal. Thanks to the implemented fonctionalities inside Kermeta language, we can
            easily manipulate models, weave an compose elements without altering the core of our
            model.</para>
        <important>
            <para>We recommend to the beginner to read this document till the end first. Advanced
                user might directly jump to the concrete examples : the <ulink
                    url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/"> FSM
                    tutorial</ulink> or the <ulink
                    url="http://www.kermeta.org/documents/tutorials/logo_tutorial_fr/">Logo
                    Tutorial</ulink>. </para>
        </important>
        <para>For the explanation of the concepts mentioned here, please refer to the <ulink
                url="http://www.kermeta.org/documents/manual/">Kermeta manual</ulink>.</para>
        <para>The main goal of this tutorial is to describe the main processes to provide Model
            Development Kit (MDK) to your DSL. </para>
        <para>The big picture of this tutorial is illustrated in the figure below: <anchor
                id="big_picture_para"/><orderedlist>
                <listitem>
                    <para>starting from an ecore metamodel;</para>
                </listitem>
                <listitem>
                    <para>we will provide editors to create its model instances; </para>
                </listitem>
                <listitem>
                    <para>we will add contracts (through aspect weaving with Kermeta) to manage
                        constraints specified inside the metamodel;</para>
                </listitem>
                <listitem>
                    <para>we will add some behaviour (through aspect weaving with Kermeta) where you
                        can bind with another framework (provide GUI defined with another language -
                        Java for example). </para>
                </listitem>
            </orderedlist></para>
        <figure>
            <title>MDK overview</title>
            <mediaobject>
                <imageobject><imagedata
                        fileref="Kermeta-Tutorial-Process_figures/KermetaProcess.png"
                        id="big_picture"/></imageobject>
            </mediaobject>
        </figure>
    </chapter>
    <chapter id="chapter_define_abstract_syntax.link">
        <title id="chapter_define_abstract_syntax.title.link">Define abstract
            syntax<phrase/></title>
        <section>
            <title>Terminology and format used in this tutorial<phrase/></title>
            <orderedlist>
                <listitem>
                    <para><emphasis role="bold">meta-model / Ecore model</emphasis>: both terms are
                        used to point to the meta-model level. “Ecore model” corresponds to the
                        Eclipse terminology for a meta-model specified in Ecore.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">instance</emphasis>: in the context of this
                        tutorial, the term “instance” is used to refer to an instance of a
                        meta-model i.e. of an Ecore model. Sometimes we will talk about
                        instance-model (an Ecore model which is an instance of the meta-model) so
                        don't get confused.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">model object / root class</emphasis>: in the scope
                        of the EMF dynamic editor, these terms designate the model root class that
                        contains all other ones. This root class is the only one in a model that has
                        no container (i.e. which has no “black-diamonded” relation pointing to
                        it).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">containment</emphasis>: this term designates an
                        important property of classes attributes/references. This property has to be
                        appropriately set, in such a way that all the elements of an instance-model
                        should be accessed from the root class of the model, which is aimed at being
                        the highest-level container.</para>
                </listitem>
            </orderedlist>
        </section>
        <section>
            <title>Define the metamodel<phrase/></title>
            <para>The fisrt step is to focus on the concept of the language that you want to
                implement. These concepts define the abstract syntax of the language. Usually, it is
                represented by an ecore metamodel which is the starting point of this
                tutorial.</para>
            <para>So first things first! Let's create the ecore file which is a class-diagram where
                a class represents a main concept of the language.Then, we won't forget to set up
                its <link linkend="sec_package_registry.link">nsURI</link>. As a standard ecore
                file, any ecore aware tools can be used to visualize it. To that extent, you can
                choose to generate/initialize its ecorediag file which contains the graphical
                informations of the metamodel elements. Then, you can generate the model code
                provided by EMF genmodel.</para>
            <para>With Kermeta, you can also "program" your metamodel. Instead of designing it with
                its representation, you 'll textually define the concepts of your metamodel. By
                calling the generate ecore metamodel on your Kermeta program source (.kmt), you
                obtain the ecore file.</para>
            <tip>
                <para> If you want to learn more about how to create an ecore metamodel with
                    eclipse, please refer to the <ulink
                        url="http://www.kermeta.org/documents/tutorials/tut-create_a_mm/">How to
                        create metamodel tutorial</ulink>.</para>
            </tip>
            <note>
                <para>An overview of an ecore diagram is available inside the examples below :<itemizedlist>
                        <listitem>
                            <para>How to create and manipulate metamodel inside the <ulink
                                    url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/"
                                    > FSM tutorial</ulink></para>
                        </listitem>
                        <listitem>
                            <para>Define the metamodel section in <ulink
                                    url="http://www.kermeta.org/documents/tutorials/logo_tutorial_fr/"
                                    >Logo Tutorial</ulink></para>
                        </listitem>
                    </itemizedlist></para>
            </note>
        </section>
    </chapter>
    <chapter id="chapter_process_define_editor.link">
        <title id="chapter_define_editor.title.link">Define the editor<phrase/></title>
        <para>In this task, you will learn how to provide editors to create model instances which
            conforms to your metamodel. There are many ways to do so. As these techniques are
            independant each others, you can experiment each of them according to your needs.</para>
        <section id="sec_dynamic_instance.link">
            <title id="sec_dynamic_instance.title.link">Dynamic instance</title>
            <para>This is the most simple and fastest way for creating an instance of a meta-model.
                Creation is accessible by right-clicking onto the root meta-class. Because of the
                containment property, classes are only available for creation through this root
                class.</para>
            <note>
                <para>Illustrations of this technique can be seen in the dedicated part of the
                    tutorials : <itemizedlist>
                        <listitem>
                            <para>How to create an instance model from a metamodel inside the <ulink
                                    url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/"
                                    > FSM tutorial</ulink></para>
                        </listitem>
                        <listitem>
                            <para>Dynamic instance in the <ulink
                                    url="http://www.kermeta.org/documents/tutorials/logo_tutorial_fr/"
                                    >Logo Tutorial</ulink></para>
                        </listitem>
                    </itemizedlist></para>
            </note>
        </section>
        <section id="sec_tree_view_edior">
            <title id="sec_tree_view_editor.title.link">Tree-view editor</title>
            <para>The simplest tree view is another way to create model instances. Generally you can
                find it in the Outline view. Then, right-clicking an element triggers a popup menu
                where you can choose to create child or sibling element to populate your
                model.</para>
            <note>
                <para>An illustration of create metamodel using tree view is available in :<itemizedlist>
                        <listitem>
                            <para><ulink
                                    url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/"
                                    > FSM tutorial</ulink></para>
                        </listitem>
                    </itemizedlist></para>
            </note>
        </section>
        <section id="sec_textual_editor.link">
            <title id="sec_textual_editor.title.link">Textual editor</title>
            <para>Textual editor allows you to "program" your model instance. Instead of designing
                it with its representation, you 'll textually define the concrete syntax of each
                concept of your metamodel. As a result, you'll get a model instance conforms to your
                metamodel. Many tools allow us to achieve this goal such as : <ulink
                    url="http://www.xtext.org">Xtext</ulink>, <ulink url="http://www.emftext.org"
                    >EMFText</ulink>, <ulink url="http://www.kermeta.org/sintaks/">Sintax</ulink>.
                Basically, these tools connect with the metamodel to define its concrete syntax and
                generate the according code.</para>
            <note>
                <para>If you want to have an example on this technique, please refer to the example
                    in :<itemizedlist>
                        <listitem>
                            <para>Textual editor section in <ulink
                                    url="http://www.kermeta.org/documents/tutorials/logo_tutorial_fr/"
                                    >Logo Tutorial</ulink></para>
                        </listitem>
                    </itemizedlist></para>
            </note>
        </section>
        <section id="sec_gmf_editor.link">
            <title id="sec_gmf_editor.title.link">GMF editor</title>
            <para>The last manipulation technique of a metamodel is to do so in a graphical
                way.</para>
            <note>
                <para>A dedicated tutorial covers the process to define such kind of editor in
                    :</para>
                <itemizedlist>
                    <listitem>
                        <para><ulink
                                url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/">
                                FSM tutorial</ulink>.</para>
                    </listitem>
                </itemizedlist>
            </note>
        </section>
    </chapter>
    <chapter id="chapter_model_manipulation_kermeta.link">
        <title id="chapter_model_manipulation_kermeta.title.link">Model manipulation in
            Kermeta<phrase/></title>
        <para>This section illustrates some importants steps in order to succesfully manipulate the
            metamodel in Kermeta. This is about why to register your metamodel and how to load/save
            it.</para>
        <section id="sec_serialisation.link">
            <title id="sec_serialisation.title.link">Serialisation</title>
            <para>Thanks to the persistence library, you can serialize (save and load) models. The
                persistence library is inspired from the resource manager of EMF models. There is a
                repository (called EMFRepository) containing a set of resources (the EMFResources).
                Each resource contains a reference called instance which contains all the root
                classes of the loaded model (there is usually one root class). So, the procedure of
                creation of a resource that will handle EMF models is the following : </para>
            <orderedlist>
                <listitem>
                    <para>Instanciate an EMFRepository;</para>
                </listitem>
                <listitem>
                    <para>Create a new EMF resource in this repository;</para>
                </listitem>
                <listitem>
                    <para>Load this resource;</para>
                </listitem>
                <listitem>
                    <para>Get the instances, i.e. the root class(es). All other instances can then
                        be accessed by navigating the root class(es) properties.</para>
                </listitem>
            </orderedlist>
            <note>
                <para><ulink url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/"> FSM
                        tutorial</ulink> proveide code example to illustrate this model
                    serialisation in Kermeta </para>
            </note>
        </section>
        <section id="sec_package_registry.link">
            <title id="sec_package_registry.title.link">Package registry</title>
            <para>In order to link the instance file with its meta-model, a relative path should be
                provided (aka nsURI). So, after the creation of the metamodel, we need to register
                this metamodel into the EMF Package Registry. In deployed mode (ie. in a runtime
                workbench), the ecore is automatically registered by the plugin. In development
                mode, you need to manually register it.</para>
            <para>There is two ways to do that, deploying an EMF plugin which add permanently the
                meta model to the Eclipse's EMF Package Registry or register dynamically the meta
                model on it.</para>
            <note>
                <para>Take look at the example below if you want to know how to register a matamodel<itemizedlist>
                        <listitem>
                            <para><ulink
                                    url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/"
                                    > FSM tutorial</ulink></para>
                        </listitem>
                    </itemizedlist></para>
            </note>
        </section>
    </chapter>
    <chapter id="chapter_contract.link">
        <title id="chapter_contract.title.link">Contracts<phrase/></title>
        <para>Once we've defined the structure of your language, this next step will show how to add
            constraints specified inside your language. Constarints on metamodels are static
            semantic. For instance you may add well formedness rules aka contracts to control errors
            made by users.</para>
        <para>Thanks to aspect weaving, Kermeta allows you to reopen ecore class definition in order
            to add pre/post condition into it so as to satisfy the specified constraints. You only
            have to weave these pre/post-conditions (for instace adding some invariants) and call
            the method checkAllInvariant() on the root element of the model to check the
            contract.</para>
        <tip>
            <para>These constraints can also be expressed in OCL which is the OMG official language.
                You can import them merely by calling these methods. Kermeta offer the same easy
                navigation inside existing model in OCL (&lt;Collection>.each, ...). </para>
        </tip>
        <note>
            <para>Examples of how to add contract to your ecore model can be reached in the examples
                below :</para>
            <itemizedlist>
                <listitem>
                    <para><ulink url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/">
                            FSM tutorial</ulink> : How to add constraints</para>
                </listitem>
                <listitem>
                    <para>Contract chapter in <ulink
                            url="http://www.kermeta.org/documents/tutorials/logo_tutorial_fr/">Logo
                            Tutorial</ulink>.</para>
                </listitem>
            </itemizedlist>
        </note>
    </chapter>
    <chapter id="chapter_behaviour.link">
        <title id="chapter_behaviour.title.link">Behaviour<phrase/></title>
        <para>Like adding the contracts seen on the previous chapter, some dynamic semantics can be
            added to our metamodel through Kermeta aspect weaving. According to the dynamic behave
            that we want to express, we weave aspect operation inside each element of the metamodel
            where there is an action to express (i.e.: add methods that represent the action that
            you want for that element). </para>
        <para>To do so you have to define a virtual machine (VM) representing the application domain
            where you'are going to weave your methods.</para>
        <para>If needed, you can implement a Kermeta wrapper to another language or librairy to add
            missing feature to your VM (you can call Java.Math to perform calculation or Java AWT
            for drawing). </para>
        <note>
            <para>A complete example is given inside : </para>
            <itemizedlist>
                <listitem>
                    <para><ulink url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/">
                            FSM tutorial</ulink>
                    </para>
                </listitem>
                <listitem>
                    <para>Behaviour chapter in <ulink
                            url="http://www.kermeta.org/documents/tutorials/logo_tutorial_fr/">Logo
                            Tutorial</ulink></para>
                </listitem>
            </itemizedlist>
        </note>
    </chapter>
    <chapter id="chapter_model_transformation_compilation.link">
        <title id="chapter_model_transformation.title.link">Model transformation -
            Compilation<phrase/></title>
        <para>In this next part of the tutorial, we manage the transformation of the metamodel or
            its compilation to another environnement.</para>
        <para>Through the same mechanism of aspect weaving a class in Kermeta, you map your language
            with another environement through weaving "compilation". </para>
        <note>
            <para>Code example on how to implement those weaving "compilation" are available at
                :</para>
            <itemizedlist>
                <listitem>
                    <para><ulink url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/">
                            FSM tutorial</ulink></para>
                </listitem>
                <listitem>
                    <para>Model transformation - Compilation chapter in <ulink
                            url="http://www.kermeta.org/documents/tutorials/logo_tutorial_fr/">Logo
                            Tutorial</ulink></para>
                </listitem>
            </itemizedlist>
        </note>
    </chapter>
    <chapter id="chapter_ui_improvements.link">
        <title id="chapter_ui_improvements.title.link">UI improvements</title>
        <para>The final step is deploying the DSL environment inside an eclipse GUI. These
            improvements begin with an appropriate texteditor for the DSL (popupmenus, icons,
            wizards, ...). Then through the Plug-in Development Environment (PDE) offered by
            eclipse, ui elements are added to interract with the interpreter of our DSL. </para>
        <note>
            <para>An example on how to implement those ui tweaking is provided in the tutorial below
                :</para>
            <itemizedlist>
                <listitem>
                    <para>UI improvements in <ulink
                            url="http://www.kermeta.org/documents/tutorials/logo_tutorial_fr/">Logo
                            Tutorial</ulink></para>
                </listitem>
            </itemizedlist>
        </note>
    </chapter>
    <chapter id="chapter_conclusion.link">
        <title id="chapter_conclusion.title.link">Conclusion</title>
        <para>This is the end of this tutorial, we cover the needed processes to build DSL with
            Kermeta. Through this tutorial, we provided a Model Delevelopment Kit (MDK) for Logo
            language. Now, using Kermeta, you should be able to implement your own DSL language
            starting from <emphasis role="bold">"just" an .ecore file</emphasis>.</para>
        <para>You may either move on to the full examples through the <ulink
                url="http://www.kermeta.org/documents/tutorials/tut-fsm_sample/"> FSM
                tutorial</ulink> and the <ulink
                url="http://www.kermeta.org/documents/tutorials/logo_tutorial_fr/">Logo
                Tutorial</ulink> in order to see the implementation of these processes or either you
            may play it<link linkend="chapter_introduction.link"> back to the
            begining</link>.</para>
    </chapter>
</book>
