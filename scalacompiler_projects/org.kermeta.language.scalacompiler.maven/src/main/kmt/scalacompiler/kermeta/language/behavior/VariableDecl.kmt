/* $Id:$
 * Creation : 2010-01-15
 * Licence  : EPL 
 * Copyright: IRISA/INRIA
 * Authors  : 
 *            
 */
package kermeta::language::behavior;

require kermeta
// require "http://www.kermeta.org/kermeta/1_2_0//kermeta"
// require "platform:/plugin/fr.irisa.triskell.kermeta.model/build/ecore/kermeta_java.ecore"
require "../../../ScalaCompilerContext.kmt"
require "Expression.kmt"
require "templates/variableDeclTemplate.kmt"

using kermeta::standard
using kermeta::utils
using scalacompiler

aspect class VariableDecl inherits Expression{
   /**
    * Generate Scala code
    */
   method generateScala(context : ScalaCompilerContext, res : kermeta::utils::StringBuffer)   is do
		var template :template::VariableDeclTemplate init template::VariableDeclTemplate.new
		var typeVal : StringBuffer init StringBuffer.new
		var initVal : StringBuffer init StringBuffer.new
		self.type.asType(Object).generateScala(context,typeVal)
		if(self.initialization !=  void) then
			self.initialization.generateScala(context,initVal)
		else 
			initVal.append("null.asInstanceOf["+typeVal.toString+"]")
		end
		res.append(template.generate(context.protectScalaKeyword(self.identifier), typeVal.toString ,initVal.toString))
   end
}