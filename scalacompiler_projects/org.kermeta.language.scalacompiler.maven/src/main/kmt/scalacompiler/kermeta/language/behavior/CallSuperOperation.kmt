/* $Id:$
 * Creation : 2010-01-15
 * Licence  : EPL 
 * Copyright: IRISA/INRIA
 * Authors  : 
 *            
 */
package kermeta::language::behavior;

require kermeta
// require "http://www.kermeta.org/kermeta/1_2_0//kermeta"
// require "platform:/plugin/fr.irisa.triskell.kermeta.model/build/ecore/kermeta_java.ecore"
require "../../../ScalaCompilerContext.kmt"
require "CallExpression.kmt"


using kermeta::standard
using kermeta::utils
using scalacompiler
using kermeta::language::structure

aspect class CallSuperOperation inherits CallExpression{
   /**
    * Generate Scala code
    */
   method generateScala(context : ScalaCompilerContext, res : kermeta::utils::StringBuffer)   is do
		var actualEObject : Object
		from 
			actualEObject:= self
		until ( actualEObject.getMetaClass().name.equals("Operation")) 
		loop
			actualEObject := actualEObject.container()
		end
		var actualOperation : Operation init actualEObject.asType(Operation)
		/* Out EObject Iinstance of Operaiton */
		
		var superClassFromName :String init actualOperation.superOperation.owningClass.name
		
		res.append("super["+superClassFromName+"Aspect]")
		res.append("."+actualOperation.name)
		res.append("(")
		self.parameters.each{par | par.generateScala(context,res)}
		res.append(")")
	

   end
}