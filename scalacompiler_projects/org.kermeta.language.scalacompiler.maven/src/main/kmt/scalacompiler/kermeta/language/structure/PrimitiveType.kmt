/* $Id:$
 * Creation : 2010-01-15
 * Licence  : EPL 
 * Copyright: IRISA/INRIA
 * Authors  : 
 *            
 */
package kermeta::language::structure;

require kermeta
// require "http://www.kermeta.org/kermeta/1_2_0//kermeta"
// require "platform:/plugin/fr.irisa.triskell.kermeta.model/build/ecore/kermeta_java.ecore"
require "../../../ScalaCompilerContext.kmt"
require "DataType.kmt"
require "TypeContainer.kmt"
require "Package.kmt"


using kermeta::standard
using kermeta::utils
using scalacompiler

aspect class PrimitiveType inherits DataType, TypeContainer{
   /**
    * Generate Scala code
    */
   method generateScala(context : ScalaCompilerContext, res : kermeta::utils::StringBuffer) 
     from kermeta::language::structure::DataType
     is do
		if (context.hasEcoreTag(self)) then
			var t :String init self.ownedTags.select{e| "ecore.EDataType_instanceClassName".equals(e.name)}.first.~value
			res.append(context.getTypeEquivalence(t))
			/* Check Generique Param */
			/*try{
				var c = java.lang.Class.forName(kermeta.utils.TypeEquivalence.getTypeEquivalence(t))
				if(c.getTypeParameters.size > 0){
					res.append("[")
					for(i <- 0 until c.getTypeParameters.length ){
						res.append("org.eclipse.emf.ecore.EObject")
						if(i < c.getTypeParameters.length -1){
							res.append(",")
						}
					}
					res.append("]")
				}
			
			
			} catch {
				case _ => 
			}
		*/	
		else
		 if (self.instanceType !=void) then
			 self.instanceType.generateScala(context,res)
		 
		 else
			 res.append(context.getPackageEquivalence(self.container.asType(Package).getQualifiedName)+"."+self.name)
		end

	end

   end
}