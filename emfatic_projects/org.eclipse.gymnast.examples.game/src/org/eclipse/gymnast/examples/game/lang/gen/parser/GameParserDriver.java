package org.eclipse.gymnast.examples.game.lang.gen.parser;

import java.io.Reader;

import antlr.MismatchedCharException;
import antlr.MismatchedTokenException;
import antlr.NoViableAltException;
import antlr.NoViableAltForCharException;
import antlr.RecognitionException;
import antlr.TokenStreamRecognitionException;

import org.eclipse.gymnast.examples.game.lang.gen.ast.CommandList;

import org.eclipse.gymnast.runtime.core.parser.IParser;
import org.eclipse.gymnast.runtime.core.parser.ParseContext;
import org.eclipse.gymnast.runtime.core.parser.ParseError;
import org.eclipse.gymnast.runtime.core.parser.ParseMessage;

/**
 *
 * @generated by Gymnast from game.ast on Jun 7, 2006 1:11:57 AM
 */
public class GameParserDriver implements IParser {

	public ParseContext parse(Reader input) {
		GameLexer lexer = new GameLexer(input);
		lexer.setColumn(0);
		lexer.setTabSize(1);

		GameParser parser = new GameParser(lexer);
		ParseContext parseContext = new ParseContext();
		parser.setParseContext(parseContext);
		
		CommandList compUnit = parseCompUnit(parser, parseContext);
	
		if (parseContext.getMessageCount() == 0) {
			System.out.println("Parse OK!");
		}
		else {
			ParseMessage[] msgs = parseContext.getMessages();
			for (int i = 0; i < msgs.length; i++) {
				System.err.println(msgs[i].getMessage());
			}
		}
		
		return parseContext;
	}
	
	private CommandList parseCompUnit(GameParser parser, ParseContext parseContext) {
	    try {
	        CommandList compUnit = parser.commandList();
	        parseContext.setParseRoot(compUnit);
	        return compUnit;
	    }
	    catch (RecognitionException rex) {
	        parseContext.addParseMessage(createParseError(rex));
	    }
	    catch (TokenStreamRecognitionException tex) {
	    	RecognitionException rex = tex.recog;
	        parseContext.addParseMessage(createParseError(rex));
	    }
	    catch (Exception ex) {
	        parseContext.addParseMessage(new ParseError(ex.getMessage(), 1));
	    }
	    return null;
	}

	static ParseError createParseError(RecognitionException ex) {
		String message = ex.getMessage();
		int offset = ex.getColumn();
		int length = 0;

		if (ex instanceof MismatchedCharException) {
			length = 1;
		} else if (ex instanceof MismatchedTokenException) {
			MismatchedTokenException ex2 = (MismatchedTokenException) ex;
			if ((ex2.token != null) && (ex2.token.getText() != null)) {
				length = ex2.token.getText().length();
			}
		} else if (ex instanceof NoViableAltException) {
			NoViableAltException ex2 = (NoViableAltException) ex;
			if ((ex2.token != null) && (ex2.token.getText() != null)) {
				length = ex2.token.getText().length();
			}
		} else if (ex instanceof NoViableAltForCharException) {
			length = 1;
		}
		
		return new ParseError(message, offset, length);
	}
}