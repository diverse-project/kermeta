package org.eclipse.gymnast.examples.game.lang.gen.ast;

import org.eclipse.gymnast.runtime.core.ast.ASTNode;
import org.eclipse.gymnast.runtime.core.ast.TokenInfo;

/**
 *
 * @generated by Gymnast from game.ast on Jun 7, 2006 1:11:57 AM
 */
public class Shoot extends Command  {

	public static final String KW_FIRE = "fire";

	private OptReps _optReps;
	private GameTokenNode _fire_KW;
	private GameTokenNode _semi;

	public OptReps getOptReps() {
		return _optReps;
	}
	public GameTokenNode getFire_KW() {
		return _fire_KW;
	}
	public GameTokenNode getSemi() {
		return _semi;
	}


	/**
	 * @return the number of children of this ASTNode
	 */
	public int getChildCount() {
		int count = 0;
		if (_optReps != null) count++;
		if (_fire_KW != null) count++;
		if (_semi != null) count++;

		return count;
	}

	/**
	 * @param index the index of a child ASTNode to get
	 * @return the child ASTNode at the given index
	 * @throws IndexOutOfBoundsException when the index is out of bounds
	 */
	public ASTNode getChild(int index) {
		int count = -1;
		if ((_optReps != null) && (++count == index)) return _optReps;
		if ((_fire_KW != null) && (++count == index)) return _fire_KW;
		if ((_semi != null) && (++count == index)) return _semi;

		throw new IndexOutOfBoundsException();
	}
	
	/**
	 * Construct a new Shoot.
	 */
	public Shoot(
		OptReps optReps,
		TokenInfo fire_KW,
		TokenInfo semi
	) {
		super();

		if (optReps != null) {
			_optReps = optReps;
			if (_optReps._parent != null) throw new RuntimeException();
			_optReps._parent = this;
		}
		if (fire_KW != null) {
			_fire_KW = new GameTokenNode(fire_KW);
			if (_fire_KW._parent != null) throw new RuntimeException();
			_fire_KW._parent = this;
		}
		if (semi != null) {
			_semi = new GameTokenNode(semi);
			if (_semi._parent != null) throw new RuntimeException();
			_semi._parent = this;
		}

	}

	/**
	 * This method overrides the superclass <code>acceptImpl</code> providing
	 * the same implementation.  Here <code>this</code> refers to this specific node
	 * class, so the <code>beginVisit</code> and <code>endVisit</code> methods
	 * specific to this type in the visitor will be invoked.
	 */
	public void acceptImpl(GameASTNodeVisitor visitor) {
		boolean visitChildren = visitor.beginVisit(this);
		if (visitChildren) visitChildren(visitor);
		visitor.endVisit(this);
	}

}
