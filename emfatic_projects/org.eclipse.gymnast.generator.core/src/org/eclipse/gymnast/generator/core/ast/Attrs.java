/*******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.gymnast.generator.core.ast;

import org.eclipse.gymnast.runtime.core.ast.ASTNode;

import antlr.Token;


/**
 *
 * @generated by Gymnast from gymnast.ast on Aug 15, 2004 2:28:15 PM
 */
public class Attrs extends GymnastASTNode  {


	private GymnastTokenNode _lsquare;
	private AttrList _attrList;
	private GymnastTokenNode _rsquare;

	public GymnastTokenNode getLsquare() {
		return _lsquare;
	}
	public AttrList getAttrList() {
		return _attrList;
	}
	public GymnastTokenNode getRsquare() {
		return _rsquare;
	}


	/**
	 * @return the number of children of this ASTNode
	 */
	public int getChildCount() {
		int count = 0;
		if (_lsquare != null) count++;
		if (_attrList != null) count++;
		if (_rsquare != null) count++;

		return count;
	}

	/**
	 * @param index the index of a child ASTNode to get
	 * @return the child ASTNode at the given index
	 * @throws IndexOutOfBoundsException when the index is out of bounds
	 */
	public ASTNode getChild(int index) {
		int count = -1;
		if ((_lsquare != null) && (++count == index)) return _lsquare;
		if ((_attrList != null) && (++count == index)) return _attrList;
		if ((_rsquare != null) && (++count == index)) return _rsquare;

		throw new IndexOutOfBoundsException();
	}
	
	/**
	 * Construct a new Attrs.
	 */
	public Attrs(
		Token lsquare,
		AttrList attrList,
		Token rsquare
	) {
		super();

		if (lsquare != null) {
			_lsquare = new GymnastTokenNode(lsquare);
			if (_lsquare._parent != null) throw new RuntimeException();
			_lsquare._parent = this;
		}
		if (attrList != null) {
			_attrList = attrList;
			if (_attrList._parent != null) throw new RuntimeException();
			_attrList._parent = this;
		}
		if (rsquare != null) {
			_rsquare = new GymnastTokenNode(rsquare);
			if (_rsquare._parent != null) throw new RuntimeException();
			_rsquare._parent = this;
		}

	}

	/**
	 * This method overrides the superclass <code>acceptImpl</code> providing
	 * the same implementation.  Here <code>this</code> refers to this specific node
	 * class, so the <code>beginVisit</code> and <code>endVisit</code> methods
	 * specific to this type in the visitor will be invoked.
	 */
	public void acceptImpl(GymnastASTNodeVisitor visitor) {
		boolean visitChildren = visitor.beginVisit(this);
		if (visitChildren) visitChildren(visitor);
		visitor.endVisit(this);
	}

}
