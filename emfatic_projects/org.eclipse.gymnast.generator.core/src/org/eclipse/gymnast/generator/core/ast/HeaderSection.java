/*******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.gymnast.generator.core.ast;

import org.eclipse.gymnast.runtime.core.ast.ASTNode;

import antlr.Token;


/**
 *
 * @generated by Gymnast from gymnast.ast on Aug 15, 2004 2:28:15 PM
 */
public class HeaderSection extends GymnastASTNode  {

	public static final String KW_LANGUAGE = "language";

	private GymnastTokenNode _language_KW;
	private Id _name;
	private GymnastTokenNode _semi;
	private OptionsSection _optionsSection;

	public GymnastTokenNode getLanguage_KW() {
		return _language_KW;
	}
	public Id getName() {
		return _name;
	}
	public GymnastTokenNode getSemi() {
		return _semi;
	}
	public OptionsSection getOptionsSection() {
		return _optionsSection;
	}


	/**
	 * @return the number of children of this ASTNode
	 */
	public int getChildCount() {
		int count = 0;
		if (_language_KW != null) count++;
		if (_name != null) count++;
		if (_semi != null) count++;
		if (_optionsSection != null) count++;

		return count;
	}

	/**
	 * @param index the index of a child ASTNode to get
	 * @return the child ASTNode at the given index
	 * @throws IndexOutOfBoundsException when the index is out of bounds
	 */
	public ASTNode getChild(int index) {
		int count = -1;
		if ((_language_KW != null) && (++count == index)) return _language_KW;
		if ((_name != null) && (++count == index)) return _name;
		if ((_semi != null) && (++count == index)) return _semi;
		if ((_optionsSection != null) && (++count == index)) return _optionsSection;

		throw new IndexOutOfBoundsException();
	}
	
	/**
	 * Construct a new HeaderSection.
	 */
	public HeaderSection(
		Token language_KW,
		Id name,
		Token semi,
		OptionsSection optionsSection
	) {
		super();

		if (language_KW != null) {
			_language_KW = new GymnastTokenNode(language_KW);
			if (_language_KW._parent != null) throw new RuntimeException();
			_language_KW._parent = this;
		}
		if (name != null) {
			_name = name;
			if (_name._parent != null) throw new RuntimeException();
			_name._parent = this;
		}
		if (semi != null) {
			_semi = new GymnastTokenNode(semi);
			if (_semi._parent != null) throw new RuntimeException();
			_semi._parent = this;
		}
		if (optionsSection != null) {
			_optionsSection = optionsSection;
			if (_optionsSection._parent != null) throw new RuntimeException();
			_optionsSection._parent = this;
		}

	}

	/**
	 * This method overrides the superclass <code>acceptImpl</code> providing
	 * the same implementation.  Here <code>this</code> refers to this specific node
	 * class, so the <code>beginVisit</code> and <code>endVisit</code> methods
	 * specific to this type in the visitor will be invoked.
	 */
	public void acceptImpl(GymnastASTNodeVisitor visitor) {
		boolean visitChildren = visitor.beginVisit(this);
		if (visitChildren) visitChildren(visitor);
		visitor.endVisit(this);
	}

}
