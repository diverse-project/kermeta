/*******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

package org.eclipse.gymnast.generators.ast.primordial.templates;

import org.eclipse.gymnast.generator.core.generator.GeneratorContext;
import org.eclipse.gymnast.generators.ast.primordial.Activator;
import org.eclipse.gymnast.runtime.core.templates.ext.ExtTemplateContext;
import org.eclipse.jface.text.templates.Template;
import org.eclipse.jface.text.templates.TemplateBuffer;
import org.eclipse.jface.text.templates.TemplateContext;
import org.eclipse.jface.text.templates.TemplateContextType;
import org.eclipse.jface.text.templates.TemplateVariableResolver;
import org.eclipse.jface.text.templates.persistence.TemplateStore;


/**
 * @author cjdaly@us.ibm.com
 *
 */
public abstract class GymnastTemplateContext extends ExtTemplateContext {
	
    private final String _templateID;
    private final GeneratorContext _generatorContext;
    
	protected GymnastTemplateContext(TemplateContextType contextType, String templateID, GeneratorContext generatorContext) {
		super(contextType);

		_templateID = templateID;
		_generatorContext = generatorContext;
	}
	
	public String getTemplateID() {
		return _templateID;
	}
	
	public GeneratorContext getGeneratorContext() {
	    return _generatorContext;
	}
	
	public String eval() {
	    String result = null;
	    
	    try {
	        Template template = getTemplate(_templateID);
	        TemplateBuffer buf = evaluate(template);
	        result = buf.getString();
	    }
	    catch (Exception ex) {
	        _generatorContext.getUtil().reportError(ex);
	    }
	    
	    return result;
	}
	
	private Template getTemplate(String templateId) {
		TemplateStore templateStore = Activator.getDefault().getTemplateStore();
		return templateStore.findTemplateById(templateId);
	}
	
	static abstract class Resolver extends TemplateVariableResolver {
	    Resolver(String type, String description) {
	        super(type, description);
	    }
	    
	    protected String resolve(TemplateContext context) {
	        String text = null;
            if (context instanceof GymnastTemplateContext) {
                GymnastTemplateContext c = (GymnastTemplateContext)context;
                GeneratorContext gc = c.getGeneratorContext();
                text = resolve(c, gc);
            }
            
            if (text == null) {
                return "${" + this.getType() + "}";
            }
            else {
                return text;
            }
	    }
	    
	    protected abstract String resolve(GymnastTemplateContext c, GeneratorContext gc);
	    
	}
	
	static class ToolNameResolver extends Resolver {
	    ToolNameResolver() {
	        super("toolName", "name of the code generation tool");
	    }
	    
	    protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getToolName();
        }
	}
	
	static class GeneratedByResolver extends Resolver {
		GeneratedByResolver() {
			super("generatedBy", "\"generated by ...\" message for doc comments");
		}
		
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getGeneratedByText();
        }
	}
	
	static class BeginTimeResolver extends Resolver {
	    BeginTimeResolver() {
	        super("beginTime", "timestamp indicating when code generation began");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getBeginTimestamp();
        }
	}
	
	static class ASTFileNameResolver extends Resolver {
	    ASTFileNameResolver() {
	        super("astFileName", "name of the ast input file");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getASTFile().getName();
        }
	}
	
	static class ASTNameResolver extends Resolver {
	    ASTNameResolver() {
	        super("astName", "name of the AST language");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getASTName();
        }
	}
	
	static class ParserPackageNameResolver extends Resolver {
	    ParserPackageNameResolver() {
	        super("parserPackageName", "name of the Java package where the parser resides");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getParserPackageName();
        }
	}
	
	static class ASTPackageNameResolver extends Resolver {
	    ASTPackageNameResolver() {
	        super("astPackageName", "name of the Java package for the AST class heirarchy");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getASTPackageName();
        }
	}
	
	static class ASTBaseClassNameResolver extends Resolver {
	    ASTBaseClassNameResolver() {
	        super("astBaseClassName", "name of the common base class for members of the AST");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getASTBaseClassName();
        }
	}
	
	static class ASTBaseClassBaseNameResolver extends Resolver {
	    ASTBaseClassBaseNameResolver() {
	        super("astBaseClassBaseName", "name of the base class for the astBaseClass");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getASTBaseClassBaseName();
        }
	}
	
	static class ASTTokenClassNameResolver extends Resolver {
	    ASTTokenClassNameResolver() {
	        super("astTokenClassName", "name of the base class for token classes");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getASTTokenClassName();
        }
	}
	
	static class ASTVisitorClassNameResolver extends Resolver {
	    ASTVisitorClassNameResolver() {
	        super("astVisitorClassName", "name of the visitor class stub");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getASTVisitorClassName();
        }
	}
	
	static class LDT_ASTNodePackageNameResolver extends Resolver {
	    LDT_ASTNodePackageNameResolver() {
	        super("ldtASTNodePackageName", "name of the package where the LDT ASTNode class resides");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getLDT_ASTNodePackageName();
        }
	}
	
	static class LDT_ASTNodeClassNameResolver extends Resolver {
	    LDT_ASTNodeClassNameResolver() {
	        super("ldtASTNodeClassName", "name of the LDT ASTNode class");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getLDT_ASTNodePackageName();
        }
	}
	
	static class LDT_ParserPackageNameResolver extends Resolver {
	    LDT_ParserPackageNameResolver() {
	        super("ldtParserPackageName", "name of the package where the LDT parser class resides");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getLDT_ParserPackageName();
        }
	}
	
	static class EntryRuleNameResolver extends Resolver {
	    EntryRuleNameResolver() {
	        super("entryRuleName", "name of the rule that represents the entry (parser start) rule");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getEntryRuleName();
        }
	}
	
	static class EntryRuleClassNameResolver extends Resolver {
	    EntryRuleClassNameResolver() {
	        super("entryRuleClassName", "name of the class that represents the entry (parser start) rule");
	    }
	    
		protected String resolve(GymnastTemplateContext c, GeneratorContext gc) {
            return gc.getEntryRuleClassName();
        }
	}
	
}
