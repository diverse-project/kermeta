package ecore;
require kermeta
require "platform:/resource/org.kermeta.ki.pruning.examples/src/kermeta/ecorePruner/Ecore.ecore"
require "EcoreModelPruning.kmt"
using kermeta::standard

aspect class EClass {
	method visit(theEcoreModelPruning : EcoreModelPruning, theEClassifiers : Bag<EClassifier>) : Void is do
		super(theEcoreModelPruning, theEClassifiers)
		self.eSuperTypes.each{theEClass | theEClassifiers.add(theEClass) }
		self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visit(theEcoreModelPruning, theEClassifiers) }
	end

	method addEClasss(theEcoreModelPruning : EcoreModelPruning) : Void is do
		self.eSuperTypes.each{theEClass |
			if(theEClass.visited) then
				theEcoreModelPruning.oneSuperTypesAdded(self, theEClass)
			end
		}
		self.eStructuralFeatures.each{theEStructuralFeature |
			if(not theEStructuralFeature.visited and (theEStructuralFeature.eContainingClass.isVoid or theEStructuralFeature.eContainingClass.visited) and (theEStructuralFeature.eType.isVoid or theEStructuralFeature.eType.visited)) then
				theEStructuralFeature.visited := true
				theEcoreModelPruning.onEStructuralFeatureAdded(theEStructuralFeature)
				theEcoreModelPruning.addedEStructuralFeatures.add(theEStructuralFeature)
			end
		}
	end

	method preparePruning() : Void is do
		super()
		self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.preparePruning() }
	end
}
aspect class EClassifier {
	attribute visited : Boolean

	operation visit(theEcoreModelPruning : EcoreModelPruning, theEClassifiers : Bag<EClassifier>) : Void is do
		self.visited := true
		theEcoreModelPruning.onEClassifierAdded(self)
		theEcoreModelPruning.addedEClassifiers.add(self)
	end

	operation addEClasss(theEcoreModelPruning : EcoreModelPruning) : Void is do
	end

	operation preparePruning() : Void is do
		self.visited := false
	end
}
aspect class ETypedElement {
	attribute visited : Boolean

	operation visit(theEcoreModelPruning : EcoreModelPruning, theEClassifiers : Bag<EClassifier>) : Void is do
		if(not self.eType.visited) then theEClassifiers.add(self.eType) end
	end

	operation preparePruning() : Void is do
		self.visited := false
	end
}
aspect class EStructuralFeature {
	method visit(theEcoreModelPruning : EcoreModelPruning, theEClassifiers : Bag<EClassifier>) : Void is do
		super(theEcoreModelPruning, theEClassifiers)
		if(not self.eContainingClass.visited) then theEClassifiers.add(self.eContainingClass) end
	end

	method preparePruning() : Void is do
		super()
	end
}
