package ecore;
require kermeta
require "platform:/resource/org.kermeta.ki.pruning.examples/src/kermeta/ecorePruner/Ecore.ecore"
require "EcoreModelPruningAspect.kmt"

using kermeta::standard

abstract class EcoreModelPruning {
	reference theEPackage : EPackage

	attribute radius : Integer

	attribute lowerCardParameter : Boolean

	reference requiredEClasss : EClass[0..*]

	reference requiredEStructuralFeatures : EStructuralFeature[0..*]

	reference addedEClassifiers : Bag<EClassifier>

	reference addedEStructuralFeatures : Bag<EStructuralFeature>

	operation initialise(theEPackage : EPackage, requiredEClasss : bag EClass[0..*], requiredEStructuralFeatures : bag EStructuralFeature[0..*], radius : Integer, lowerCardParameter : Boolean) : EcoreModelPruning is do
		result := self
		self.addedEClassifiers := Bag<EClassifier>.new
		self.addedEStructuralFeatures := Bag<EStructuralFeature>.new
		self.theEPackage := theEPackage
		self.radius := radius
		self.lowerCardParameter := lowerCardParameter
		self.requiredEClasss.addAll(requiredEClasss)
		self.requiredEStructuralFeatures.addAll(requiredEStructuralFeatures)
	end

	operation launch() : Void is do
		preparePruning()

		var theEClassifiers  : Bag<EClassifier> init Bag<EClassifier>.new
		var theEClassifiers2 : Bag<EClassifier> init Bag<EClassifier>.new
		var currentRadius : Integer init 0

		requiredEClasss.each{theEClass | theEClassifiers.add(theEClass) }
		requiredEStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visit(self, theEClassifiers) }

		from true
		until (theEClassifiers.empty()) or (currentRadius>radius and radius!=0)
		loop
			theEClassifiers.each{theEClassifier |
				if(not theEClassifier.visited) then
					theEClassifier.visit(self, theEClassifiers2)
				end
			}

			theEClassifiers.clear()
			theEClassifiers2.each{theEClassifier | theEClassifiers.add(theEClassifier) }
			theEClassifiers2.clear()
			currentRadius := currentRadius + 1
		end

		addedEClassifiers.each{theEClassifier | theEClassifier.addEClasss(self) }
	end

	operation preparePruning() : Void is do
		self.theEPackage.eClassifiers.each{theEClassifier | theEClassifier.preparePruning() }
	end

	operation onEClassifierAdded(theEClassifier : EClassifier) : Void is abstract
	operation onEStructuralFeatureAdded(theEStructuralFeature : EStructuralFeature) : Void is abstract
	operation oneSuperTypesAdded(theEClassSrc : EClass, theEClassTar : EClass) : Void is abstract
}
