@mainClass "ecore::Test"
@mainOperation "main"
package ecore;
require kermeta
require "platform:/resource/org.kermeta.ki.pruning.examples/src/kermeta/ecorePruner/Ecore.ecore"
require "EcoreModelPruningAspect.kmt"

using kermeta::standard

abstract class EcoreModelPruning {
	reference theEPackage : EPackage

	attribute radius : Integer

	reference requiredEClasss : EClass[0..*]

	reference requiredEStructuralFeatures : EStructuralFeature[0..*]

	reference addedEClassifiers : Bag<EClassifier>

	reference addedEStructuralFeatures : Bag<EStructuralFeature>

	operation initialise(theEPackage : EPackage, requiredEClasss : bag EClass[0..*], requiredEStructuralFeatures : bag EStructuralFeature[0..*], radius : Integer) : EcoreModelPruning is do
		result := self
		self.addedEClassifiers := Bag<EClassifier>.new
		self.addedEStructuralFeatures := Bag<EStructuralFeature>.new
		self.theEPackage := theEPackage
		self.radius := radius
		self.requiredEClasss.addAll(requiredEClasss)
		self.requiredEStructuralFeatures.addAll(requiredEStructuralFeatures)
	end

	operation launch() : Void is do
		preparePruning()

		var theEClassifiers  : Bag<EClassifier> init Bag<EClassifier>.new
		var theEClassifiers2 : Bag<EClassifier> init Bag<EClassifier>.new
		var currentRadius : Integer init 0

		requiredEClasss.each{theEClass | theEClassifiers.add(theEClass) }
		requiredEStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visit(self, theEClassifiers) }

		from true
		until (theEClassifiers.empty()) or (currentRadius>radius and radius!=0)
		loop
			theEClassifiers.each{theEClassifier |
				if(not theEClassifier.visited) then
					theEClassifier.visit(self, theEClassifiers2)
				end
			}

			theEClassifiers.clear()
			theEClassifiers2.each{theEClassifier | theEClassifiers.add(theEClassifier) }
			theEClassifiers2.clear()
			currentRadius := currentRadius + 1
		end

		addedEClassifiers.each{theEClassifier | theEClassifier.addEClassifiers(self) }
	end

	operation preparePruning() : Void is do
		theEPackage.eClassifiers.each{theEClassifier | theEClassifier.preparePruning() }
	end

	operation onEClassifierAdded(theEClassifier : EClassifier) : Void is abstract
	operation onEStructuralFeatureAdded(theEStructuralFeature : EStructuralFeature) : Void is abstract
	operation oneSuperTypesAdded(theEClassSrc : EClass, theEClassTar : EClass) : Void is abstract
}


class PrintEcoreModelPruning inherits EcoreModelPruning {
	method onEClassifierAdded(theEClassifier : EClassifier) : Void is do
		stdio.writeln("EClassifier:" + theEClassifier.name)
	end
	method onEStructuralFeatureAdded(theEStructuralFeature : EStructuralFeature) : Void is do
		stdio.writeln("EStructuralFeature:" + theEStructuralFeature.name)
	end
	method oneSuperTypesAdded(theEClassSrc : EClass, theEClassTar : EClass) : Void is do
		stdio.writeln("SuperType:" + theEClassSrc.name + " " + theEClassTar.name)
	end
}


class Test {
	operation main() : Void is do
		var pkg : EPackage init EPackage.new
		var c1 : EClass init EClass.new
		var c2 : EClass init EClass.new
		var c3 : EClass init EClass.new
		var c4 : EClass init EClass.new
		var c5 : EClass init EClass.new
		var c6 : EClass init EClass.new
		var c7 : EClass init EClass.new
		var c8 : EClass init EClass.new
		var p3 : EReference init EReference.new
		var p1 : EReference init EReference.new
		var p2 : EReference init EReference.new
		var p4 : EReference init EReference.new

		c1.name := "c1"
		pkg.eClassifiers.add(c1)
		c2.name := "c2"
		pkg.eClassifiers.add(c2)
		c3.name := "c3"
		pkg.eClassifiers.add(c3)
		c4.name := "c4"
		pkg.eClassifiers.add(c4)
		c5.name := "c5"
		pkg.eClassifiers.add(c5)
		c6.name := "c6"
		pkg.eClassifiers.add(c6)
		c7.name := "c7"
		pkg.eClassifiers.add(c7)
		c8.name := "c8"
		pkg.eClassifiers.add(c8)

		c1.eSuperTypes.add(c2)
		c2.eSuperTypes.add(c3)
		c3.eSuperTypes.add(c6)
		c7.eSuperTypes.add(c8)
		
		p1.name := "p1"
		p1.eType := c2
		c5.eStructuralFeatures.add(p1)
		p2.name := "p2"
		p2.eType := c3
		c4.eStructuralFeatures.add(p2)
		p2.eOpposite := p3
		p3.name := "p3"
		p3.eType := c4
		c3.eStructuralFeatures.add(p3)
		p3.eOpposite := p2
		p4.name := "p4"
		p4.eType := c4
		c4.eStructuralFeatures.add(p4)
		
		var requiredEClasss : Bag<EClass> init Bag<EClass>.new
		requiredEClasss.add(c7)
		var requiredEStructuralFeatures : Bag<EStructuralFeature> init Bag<EStructuralFeature>.new
		requiredEStructuralFeatures.add(p1)
		var pruning : PrintEcoreModelPruning init PrintEcoreModelPruning.new.initialise(pkg, requiredEClasss, requiredEStructuralFeatures, 1).asType(PrintEcoreModelPruning)
		
		pruning.launch()
	end
}

