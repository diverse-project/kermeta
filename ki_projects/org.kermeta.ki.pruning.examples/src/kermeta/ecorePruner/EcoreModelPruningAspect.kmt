package ecore;
require kermeta
require "EcoreModelPruning.kmt"
using kermeta::standard

aspect class EClassifier {
	attribute visited : Boolean
	
	operation visit(theEcoreModelPruning : EcoreModelPruning, theEClassifiers : Bag<EClassifier>) : Void is do
		self.visited := true
		theEcoreModelPruning.onEClassifierAdded(self)
		theEcoreModelPruning.addedEClassifiers.add(self)
	end
	
	operation preparePruning() : Void is do
		self.visited := false
	end
	
	operation addEClassifiers(theEcoreModelPruning : EcoreModelPruning) : Void is do
	end
}

aspect class EClass {
	method visit(theEcoreModelPruning : EcoreModelPruning, theEClassifiers : Bag<EClassifier>) : Void is do
		super(theEcoreModelPruning, theEClassifiers)
		self.eSuperTypes.each{theEClass | theEClassifiers.add(theEClass) }
		self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visit(theEcoreModelPruning, theEClassifiers) }
	end

	method preparePruning() : Void is do
		super()
		self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.preparePruning() }
	end

	method addEClassifiers(theEcoreModelPruning : EcoreModelPruning) : Void is do
		self.eSuperTypes.each{theEClass |
			if(theEClass.visited) then
				theEcoreModelPruning.oneSuperTypesAdded(self, theEClass)
			end
		}
		self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.add(theEcoreModelPruning) }
	end
}


aspect class EStructuralFeature {
	attribute visited : Boolean
	
	operation visit(theEcoreModelPruning : EcoreModelPruning, theEClassifiers : Bag<EClassifier>) : Void is do
			if(not self.eContainingClass.visited) then theEClassifiers.add(self.eContainingClass) end
	end
	
	operation add(theEcoreModelPruning : EcoreModelPruning) : Void is do
	end
	
	operation preparePruning() : Void is do
		self.visited := false
	end
}

aspect class EReference {
	method visit(theEcoreModelPruning : EcoreModelPruning, theEClassifiers : Bag<EClassifier>) : Void is do
		super(theEcoreModelPruning, theEClassifiers)
		if(not self.eType.visited) then theEClassifiers.add(self.eType) end
	end
	
	method add(theEcoreModelPruning : EcoreModelPruning) : Void is do
		if(not visited and eContainingClass.visited and eType.visited) then
			visited := true
			theEcoreModelPruning.onEStructuralFeatureAdded(self)
			theEcoreModelPruning.addedEStructuralFeatures.add(self)
		end
	end
}
