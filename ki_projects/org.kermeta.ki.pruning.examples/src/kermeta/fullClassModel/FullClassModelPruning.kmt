@mainClass "ex::fullClassModel::Test"
@mainOperation "main"
package ex::fullClassModel;
require kermeta
require "FullClassModelPruningAspect.kmt"

using kermeta::standard

abstract class FullClassModelPruning {
	reference theClassModel : ClassModel

	attribute radius : Integer

	reference requiredClazzs : Clazz[0..*]

	reference requiredPropertys : Property[0..*]

	reference addedClazzs : Bag<Clazz>

	reference addedPropertys : Bag<Property>

	operation initialise(theClassModel : ClassModel, requiredClazzs : bag Clazz[0..*], requiredPropertys : bag Property[0..*], radius : Integer) : FullClassModelPruning is do
		result := self
		self.addedClazzs := Bag<Clazz>.new
		self.addedPropertys := Bag<Property>.new
		self.theClassModel := theClassModel
		self.radius := radius
		self.requiredClazzs.addAll(requiredClazzs)
		self.requiredPropertys.addAll(requiredPropertys)
	end

	operation launch() : Void is do
		preparePruning()

		var theClazzs  : Bag<Clazz> init Bag<Clazz>.new
		var theClazzs2 : Bag<Clazz> init Bag<Clazz>.new
		var currentRadius : Integer init 0

		requiredClazzs.each{theClazz | theClazzs.add(theClazz) }
		requiredPropertys.each{theProperty | theProperty.visit(self, theClazzs) }

		from true
		until (theClazzs.empty()) or (currentRadius>radius and radius!=0)
		loop
			theClazzs.each{theClazz |
				if(not theClazz.visited) then
					theClazz.visit(self, theClazzs2)
				end
			}

			theClazzs.clear()
			theClazzs2.each{theClazz | theClazzs.add(theClazz) }
			theClazzs2.clear()
			currentRadius := currentRadius + 1
		end

		addedClazzs.each{theClazz | theClazz.addClazzs(self) }
	end

	operation preparePruning() : Void is do
		theClassModel.classes.each{theClazz | theClazz.visited := false }
		theClassModel.classes.each{theClazz | theClazz.properties.each{theProperty | theProperty.visited := false } }
	end

	operation onClazzAdded(theClazz : Clazz) : Void is abstract
	operation onPropertyAdded(theProperty : Property) : Void is abstract
	operation onsuperClassesAdded(theClazzSrc : Clazz, theClazzTar : Clazz) : Void is abstract
}



class PrintFullClassModelPruning inherits FullClassModelPruning {
	method onClazzAdded(clazz : Clazz) : Void is do
		stdio.writeln("Clazz: " + clazz.name)
	end
	
	
	method onPropertyAdded(theProperty : Property) : Void is do
		stdio.writeln("Property: " + theProperty.name)
	end
	
	
	method onsuperClassesAdded(theClazz : Clazz, theSuperClazzes : Clazz) : Void is do
		stdio.writeln("Inheritance: " + theClazz.name + " " + theSuperClazzes.name)
	end
}




class Test {
	operation main() : Void is do
		var cm : ClassModel init ClassModel.new
		var c1 : Clazz init Clazz.new.initialise("c1", cm)
		var c2 : Clazz init Clazz.new.initialise("c2", cm)
		var c3 : Clazz init Clazz.new.initialise("c3", cm)
		var c4 : Clazz init Clazz.new.initialise("c4", cm)
		var c5 : Clazz init Clazz.new.initialise("c5", cm)
		var c6 : Clazz init Clazz.new.initialise("c6", cm)
		var c7 : Clazz init Clazz.new.initialise("c7", cm)
		var c8 : Clazz init Clazz.new.initialise("c8", cm)
		var p3 : Property init Property.new
		var p1 : Property init Property.new.initialise("p1", c5, c2, void)
		var p2 : Property init Property.new.initialise("p2", c4, c3, p3)
		p3.initialise("p3", c3, c4, p2)
		var p4 : Property init Property.new.initialise("p4", c4, c4, void)
			
		c1.superClasses.add(c2)
		c2.superClasses.add(c3)
		c3.superClasses.add(c6)
		c7.superClasses.add(c8)
		
		var requiredClazzs : Bag<Clazz> init Bag<Clazz>.new
		requiredClazzs.add(c7)
		var requiredPropertys : Bag<Property> init Bag<Property>.new
		requiredPropertys.add(p1)
		var pruning : PrintFullClassModelPruning init PrintFullClassModelPruning.new.initialise(cm, requiredClazzs, requiredPropertys, 2).asType(PrintFullClassModelPruning)
		
		pruning.launch()
	end
}
