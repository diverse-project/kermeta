/*
 * Creation : November 24, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell Team
 * Authors  : Arnaud Blouin
 */
@mainClass "ex::fullClassModel::Test"
@mainOperation "main"

package ex::fullClassModel;

require kermeta
require "FullClassModelPruning.kmt"

using kermeta::standard


class PrintFullClassModelPruning inherits FullClassModelPruning {
	method onClazzAdded(clazz : Clazz) : Void is do
		stdio.writeln("Clazz: " + clazz.name)
	end
	
	
	method onPropertyAdded(theProperty : Property) : Void is do
		stdio.writeln("Property: " + theProperty.name)
	end
	
	
	method onsuperClassesAdded(theClazz : Clazz, theSuperClazzes : Clazz) : Void is do
		stdio.writeln("Inheritance: " + theClazz.name + " " + theSuperClazzes.name)
	end
}



class Test {
	operation main() : Void is do
		var requiredClazzs : Bag<Clazz> init Bag<Clazz>.new
		var requiredProps : Bag<Property> init Bag<Property>.new
		var cm : ClassModel init createModel(requiredClazzs, requiredProps)
		
		var pruning : PrintFullClassModelPruning init PrintFullClassModelPruning.new.initialise(cm, requiredClazzs, requiredProps, 2).asType(PrintFullClassModelPruning)
		
		pruning.launch()
	end
	
	
	operation createModel(requiredStates : Bag<Clazz>, requiredProps : Bag<Property>) : ClassModel is do
		result := ClassModel.new

		var c1 : Clazz init Clazz.new
		var c2 : Clazz init Clazz.new
		var c3 : Clazz init Clazz.new
		var c4 : Clazz init Clazz.new
		var c5 : Clazz init Clazz.new
		var c6 : Clazz init Clazz.new
		var c7 : Clazz init Clazz.new
		var c8 : Clazz init Clazz.new
		var p1 : Property init Property.new
		var p2 : Property init Property.new
		var p3 : Property init Property.new
		var p4 : Property init Property.new

		c1.name := "c1"
		result.classes.add(c1)
		c2.name := "c2"
		result.classes.add(c2)
		c3.name := "c3"
		result.classes.add(c3)
		c4.name := "c4"
		result.classes.add(c4)
		c5.name := "c5"
		result.classes.add(c5)
		c6.name := "c6"
		result.classes.add(c6)
		c7.name := "c7"
		result.classes.add(c7)
		c8.name := "c8"
		result.classes.add(c8)

		p1.name := "p1"
		p1.type := c2
		p1.owner := c5
		p1.opposite := void
		p1.owner.properties.add(p1)
		p2.name := "p2"
		p2.type := c3
		p2.owner := c4
		p2.opposite := p3
		p2.owner.properties.add(p2)
		p3.name := "p3"
		p3.type := c4
		p3.owner := c3
		p3.opposite := p2
		p3.owner.properties.add(p3)
		p4.name := "p4"
		p4.type := c4
		p4.owner := c4
		p4.opposite := void
		p4.owner.properties.add(p4)

		c1.superClasses.add(c2)
		c2.superClasses.add(c3)
		c3.superClasses.add(c6)
		c7.superClasses.add(c8)
		
		requiredProps.add(p1)
		requiredStates.add(c7)
	end 
}
