/* $Id:$ 
 * Creation : November 18, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
package ex::classModel;

require kermeta
require "MappingModel.kmt"
require "MappingModelPruning.kmt"

using kermeta::standard
using ex::mappingModel


aspect class Clazz {
	reference srcsOpposite : Mapping[0..*]
	
	reference targetsOpposite : Mapping[0..*]
	
	attribute visited : Boolean
	
	operation visit(theMappingModelPruning : MappingModelPruning, theClazzs : Bag<Clazz>) : Void is do
		visited := true
		theMappingModelPruning.onClazzAdded(self)
		theMappingModelPruning.addedClasses.add(self)
		srcsOpposite.each{theMapping | theMapping.addClazzs(theMappingModelPruning, theClazzs) }
		targetsOpposite.each{theMapping | theMapping.addClazzs(theMappingModelPruning, theClazzs) }
	end
	
	operation addRelations(pruner : MappingModelPruning) : Void is do
		srcsOpposite.each{theMapping | if(not theMapping.visited and not theMapping.srcs.exists{theClazz | not theClazz.visited} and not theMapping.targets.exists{theClazz | not theClazz.visited}) then theMapping.visit(pruner) end }
		targetsOpposite.each{theMapping | if(not theMapping.visited) then theMapping.visit(pruner) end }
	end
}

