package ex::mappingModel;
require kermeta
require "platform:/resource/org.kermeta.ki.pruning.examples/src/kermeta/mapping/MappingModel.ecore"
require "MappingModelPruningAspect.kmt"
require "classModelPruningAspect.kmt"

using kermeta::standard

using ex::classModel
abstract class MappingModelPruning {
	reference theMappingModel : MappingModel

	attribute radius : Integer

	reference requiredClazzs : Clazz[0..*]

	reference addedClazzs : Bag<Clazz>

	reference addedMappings : Bag<Mapping>

	operation initialise(theMappingModel : MappingModel, requiredClazzs : bag Clazz[0..*], radius : Integer) : MappingModelPruning is do
		result := self
		self.addedClazzs := Bag<Clazz>.new
		self.addedMappings := Bag<Mapping>.new
		self.theMappingModel := theMappingModel
		self.radius := radius
		self.requiredClazzs.addAll(requiredClazzs)
	end

	operation launch() : Void is do
		preparePruning()

		var theClazzs  : Bag<Clazz> init Bag<Clazz>.new
		var theClazzs2 : Bag<Clazz> init Bag<Clazz>.new
		var currentRadius : Integer init 0

		requiredClazzs.each{theClazz | theClazzs.add(theClazz) }

		from true
		until (theClazzs.empty()) or (currentRadius>radius and radius!=0)
		loop
			theClazzs.each{theClazz |
				if(not theClazz.visited) then
					theClazz.visit(self, theClazzs2)
				end
			}

			theClazzs.clear()
			theClazzs2.each{theClazz | theClazzs.add(theClazz) }
			theClazzs2.clear()
			currentRadius := currentRadius + 1
		end

		addedClazzs.each{theClazz | theClazz.addMappings(self) }
	end

	operation preparePruning() : Void is do
		theMappingModel.src.classes.each{theClazz | theClazz.visited := false }
		theMappingModel.target.classes.each{theClazz | theClazz.visited := false }
		theMappingModel.mappings.each{theMapping | theMapping.visited := false }
		theMappingModel.mappings.each{theMapping | theMapping.initialisesrcsOpposite() }
		theMappingModel.mappings.each{theMapping | theMapping.initialisetargetsOpposite() }
	end

	operation onClazzAdded(theClazz : Clazz) : Void is abstract
	operation onMappingAdded(theMapping : Mapping) : Void is abstract
}
