/*
 * Creation : November 24, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell Team
 * Authors  : Arnaud Blouin
 */
@mainClass "ex::mappingModel::Test"
@mainOperation "main"

package ex::mappingModel;

require kermeta
require "MappingModelPruning.kmt"

using kermeta::standard
using ex::classModel

class PrintMappingModelPruning inherits MappingModelPruning {
	method onClazzAdded(theClazz : Clazz) : Void is do
		stdio.writeln("Clazz: " + theClazz.name)
	end
	
	method onMappingAdded(theMapping : Mapping) : Void is do
		stdio.writeln("Mapping: " + theMapping.name)
	end
}



class Test {
	operation main() : Void is do
		var requiredClasses : Bag<Clazz> init Bag<Clazz>.new
		var mm : MappingModel init createModel(requiredClasses)
		
		var pruning : PrintMappingModelPruning init PrintMappingModelPruning.new.initialise(mm, requiredClasses, 2).asType(PrintMappingModelPruning)
		
		pruning.launch()
	end
	
	
	operation createModel(requiredClasses : Bag<Clazz>) : MappingModel is do
		result := MappingModel.new
		
		var cm1 : ClassModel init ClassModel.new
		var cm2 : ClassModel init ClassModel.new
		var a : Clazz init Clazz.new
		var b : Clazz init Clazz.new
		var c : Clazz init Clazz.new
		var d : Clazz init Clazz.new
		var e : Clazz init Clazz.new
		var f : Clazz init Clazz.new
		var m1 : Mapping init Mapping.new
		var m2 : Mapping init Mapping.new
		var m3 : Mapping init Mapping.new
		result.src := cm1
		result.target := cm2
		
		a.name := "a"
		cm1.classes.add(a)
		b.name := "b"
		cm1.classes.add(b)
		c.name := "c"
		cm2.classes.add(c)
		d.name := "d"
		cm1.classes.add(d)
		e.name := "e"
		cm2.classes.add(e)
		f.name := "f"
		cm2.classes.add(f)
		
		m1.name := "m1"
		result.mappings.add(m1)
		m2.name := "m2"
		result.mappings.add(m2)
		m3.name := "m3"
		result.mappings.add(m3)
		
		m1.srcs.add(a)
		m1.srcs.add(b)
		m1.targets.add(c)
		m2.srcs.add(d)
		m2.targets.add(c)
		m3.srcs.add(d)
		m3.targets.add(e)
		
		requiredClasses.add(a)
	end 
}
