/* $Id:$ 
 * Creation : November 17, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
@mainClass "ex::classModel::Test"
@mainOperation "main"


package ex::classModel;

require kermeta
require "ClassModelPruningAspect.kmt"

using kermeta::standard


abstract class ClassModelPruning {
	reference classModel : ClassModel
	
	reference requiredClazzs : Clazz[0..*]
	
	attribute radius : Integer
	
	reference addedClazzs : Bag<Clazz>
	
	
	operation initialise(classModel : ClassModel, requiredClazzs : bag Clazz[0..*], radius : Integer) : ClassModelPruning is do
		result := self
		addedClazzs := Bag<Clazz>.new
		self.classModel := classModel
		self.radius := radius
		self.requiredClazzs.addAll(requiredClazzs)
	end
	
	
	
	operation launch() : Void is do
		preparePruning()
		
		var theClazzs  : Bag<Clazz> init Bag<Clazz>.new
		var theClazzs2 : Bag<Clazz> init Bag<Clazz>.new
		var currentRadius : Integer init 0
		
		requiredClazzs.each{theClazz | theClazzs.add(theClazz) }

		from true
		until theClazzs.empty or currentRadius>radius
		loop
			theClazzs.each{theClass | 
				if(not theClass.visited) then
					theClass.visit(self, theClazzs2)
				end
			}
			
			theClazzs.clear()
			theClazzs2.each{t | theClazzs.add(t) }
			theClazzs2.clear()
			currentRadius := currentRadius + 1
		end
		
		addedClazzs.each{theClazz | theClazz.addRelations(self) }
	end
	
	
	operation preparePruning() : Void is do
		classModel.classes.each{theClazz | theClazz.visited := false }
	end
	
	
	operation onClazzAdded(theClazz : Clazz) : Void is abstract
	
	
	operation onSuperClazzesAdded(theClazz : Clazz, theSuperClazzes : Clazz) : Void is abstract
}




class PrintClassModelPruning inherits ClassModelPruning {
	method onClazzAdded(clazz : Clazz) : Void is do
		stdio.writeln("Clazz: " + clazz.name)
	end


	method onSuperClazzesAdded(theClazz : Clazz, theSuperClazzes : Clazz) : Void is do
		stdio.writeln("Inheritance: " + theClazz.name + " " + theSuperClazzes.name)
	end
}




class Test {
	operation main() : Void is do
		var cm : ClassModel init ClassModel.new
		var c1 : Clazz init Clazz.new.initialise("c1", cm)
		var c2 : Clazz init Clazz.new.initialise("c2", cm)
		var c3 : Clazz init Clazz.new.initialise("c3", cm)
		var c4 : Clazz init Clazz.new.initialise("c4", cm)
		var c5 : Clazz init Clazz.new.initialise("c5", cm)
		
		c1.superClasses.add(c2)
		c2.superClasses.add(c3)
		c3.superClasses.add(c4)
		c4.superClasses.add(c5)
		
		var requiredClazzes : Bag<Clazz> init Bag<Clazz>.new
		requiredClazzes.add(c1)
		var pruning : PrintClassModelPruning init PrintClassModelPruning.new.initialise(cm, requiredClazzes, 2).asType(PrintClassModelPruning)
		
		pruning.launch()
	end
}
