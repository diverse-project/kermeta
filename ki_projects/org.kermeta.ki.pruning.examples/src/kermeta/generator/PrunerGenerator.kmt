/*
 * Creation : November 19, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
@mainClass "prunerGenerator::Test"
@mainOperation "main"

package prunerGenerator;

require kermeta
require "ECorePruningAspect.kmt"
require "Pruning.ecore"
require "platform:/resource/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EClassHelper.kmt"
require "platform:/resource/fr.irisa.triskell.kermeta.ecore/src/kermeta/helpers/EPackageHelper.kmt"
require "ModelAspectGenerator.kmt"
require "PrunerClassGenerator.kmt"

using kermeta::standard
using ecore
using kermeta::persistence
using kermeta::io


class PrunerGenerator {
	reference pruningData : Pruning	
	
	reference metamodel : EPackage
	
	attribute modelURI : String
	
	attribute prunerClass : EClass
	
	attribute aspectGenerator : ModelAspectGenerator
	
	attribute prunerClassGenerator : PrunerClassGenerator
	
	reference mainClasses : EClass[0..*]
	

	operation initialise(pruningData : Pruning, metamodel : EPackage,
						prunerName : String, modelURI : String) : PrunerGenerator is do
		result := self
		self.pruningData := pruningData
		self.metamodel   := metamodel
		self.modelURI 	 := modelURI
		aspectGenerator  := ModelAspectGenerator.new.initialise(self)
		prunerClassGenerator := PrunerClassGenerator.new.initialise(self)
	
		self.prunerClass := EClass.new
		self.prunerClass.name := prunerName
		
		self.pruningData.requiredElements.each{elt |
			elt.srcRelations.each{src | src.relation.eContainingClass.sourceRelations.add(src.relation) }
			elt.targetRelations.each{target | target.eContainingClass.targetRelations.add(target) }
		}
		
		defineClassesToAspectise()
	end
	

	operation getPrunerVarName() : String is do
		result := "the" + prunerClass.name
	end
	
	
	
	operation defineClassesToAspectise() : Void is do
		pruningData.requiredElements.each{elt | 
			elt.srcRelations.each{src | addReferenceClass(src.relation, true) }
			elt.origins.each{origin | addReferenceClass(origin, false) }
		}
	end
	
	
	operation addReferenceClass(ref : EReference, withContainingClass : Boolean) : Void is do
		if(withContainingClass and not mainClasses.contains(ref.eContainingClass)) then
			mainClasses.add(ref.eContainingClass)
			ref.eContainingClass.main := true
		end
		if(ref.eType.isKindOf(EClass)) then
			var clazz : EClass init ref.eType.asType(EClass)
			
			if(not mainClasses.contains(clazz)) then
				mainClasses.add(clazz)
				clazz.main := false
			end
		end
	end
	
	
	operation generatePruner() : Void is do
		prunerClassGenerator.generateCode()
		aspectGenerator.generateCode()
	end
	
	
	operation getPackageFromClasses(classes : EClass[0..*]) : String is do
		var packagesName : Bag<String> init Bag<String>.new
		var name : String
		
		result := ""
		
		classes.each{clazz | 
			name := clazz.ePackage.getQualifiedName("::")
			if(not packagesName.contains(name)) then
				packagesName.add(name)
				result := result + "package " + name + ";\n"
			end 
		}
		
		if(packagesName.size()>1) then
			stdio.writeln("FIXME: aspects from several packages is not managed yet.")
		end
	end
}


abstract class Generator {
	reference prunerGenerator : PrunerGenerator

	attribute generatedCode : String
	
	operation generateCode() : Void is abstract
}



class Test {
	operation main() : Void is do
		generateSM()
	end
	
	
	operation generateSM() : Void is do
		var modelURI	: String init "platform:/resource/org.kermeta.ki.pruning.examples/src/kermeta/SM/StateMachine.ecore"
		var pruningSM 	: Pruning init getPruningModel("platform:/resource/org.kermeta.ki.pruning.examples/src/kermeta/SM/SM.prunergenerator")
		var pkg 		: EPackage init getEcoreModel(modelURI).one()
		var pruner 		: PrunerGenerator init PrunerGenerator.new.initialise(pruningSM, pkg, "StateMachinePruning", modelURI)
		
		pruner.generatePruner()
//		stdio.writeln(pruner.modelAspectCode)
		stdio.writeln(pruner.prunerClassGenerator.generatedCode)
		saveCode(pruner, "../SM/output/")
	end
	
	
	operation saveCode(pruner : PrunerGenerator, path : String) : Void is do
		var file : FileIO init FileIO.new
		file.writeTextFile(path + pruner.prunerClass.name + "Aspect.kmt", pruner.aspectGenerator.generatedCode)
		file.writeTextFile(path + pruner.prunerClass.name + ".kmt", pruner.prunerClassGenerator.generatedCode)
	end
	
	
	operation getEcoreModel(uriEcoreModel : String) : Bag<EPackage> is do
		var uriMM : String init "http://www.eclipse.org/emf/2002/Ecore"
   		var repository : EMFRepository init EMFRepository.new
   		repository.registerEcoreFile(uriMM)          
   		var resource : Resource init repository.createResource(uriEcoreModel, uriMM)
       	resource.load()
		
		result := Bag<EPackage>.new
		
		resource.contents.each{obj |
			if(EPackage.isInstance(obj)) then
				result.add(obj.asType(EPackage))        
			end
		}
	end
	/* 
	operation createStateMachineModel(requiredStates : Bag<OutputState>) : StateMachine is do
		result := StateMachine.new
		
		var initState : InitState init InitState.new
		var s1 : StandardState init StandardState.new
		var s2 : StandardState init StandardState.new
		var terminal : TerminalState init TerminalState.new
		var transition : Transition init Transition.new
		
		initState.name := "init"
		s1.name := "s1"
		s2.name := "s2"
		terminal.name := "end"
		
		result.initState := initState
		result.states.add(initState)
		result.states.add(s1)
		result.states.add(s2)
		result.states.add(terminal)
		
		transition.source := initState
		transition.target := s1
		result.transitions.add(transition)
		
		transition := Transition.new
		transition.source := s1
		transition.target := s2
		result.transitions.add(transition)
		
		transition := Transition.new
		transition.source := s2
		transition.target := s1
		result.transitions.add(transition)
		
		transition := Transition.new
		transition.source := s2
		transition.target := s2
		result.transitions.add(transition)
		
		transition := Transition.new
		transition.source := s2
		transition.target := terminal
		result.transitions.add(transition)
		
		requiredStates.add(initState)
	end */
	
	
	operation getPruningModel(uriPruningModel : String) : Pruning is do
		var uriPruningMM : String init "platform:/resource/org.kermeta.ki.pruning.examples/src/kermeta/generator/Pruning.ecore"
   		var repository : EMFRepository init EMFRepository.new
   		repository.registerEcoreFile(uriPruningMM)          
   		var resource : Resource init repository.createResource(uriPruningModel, uriPruningMM)
       	resource.load()

		from var it : Iterator<Object> init resource.instances.iterator
		until it.isOff
		loop
			var next : Object init it.next
			if(Pruning.isInstance(next)) then                 
				result ?= next
			end
		end
	end
}
