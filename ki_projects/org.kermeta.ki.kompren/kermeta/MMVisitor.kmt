/*
 * Creation : June 10, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta;

require "VisitableKermeta.kmt"
require "ModelExtension.kmt"
require kermeta



class MMVisitor inherits KermetaVisitor {
	method visitProperty(arg : language::structure::Property) : Void is do
		stdio.writeln("property [" + arg.toString + "]: " + arg.isVisible.toString + " " + arg.name + ", " + arg.type.toString + ", " + arg.opposite.toString + " " + arg.isComposite.toString + " [" + arg.lower.toString + ".." + arg.upper.toString + "]")
	end
	
	
	method visitTypeDefinition(arg : language::structure::TypeDefinition) : Void is do
		stdio.writeln("type def[" + arg.toString + "]: " + arg.isVisible.toString + " " + arg.name + ", " + arg.isAspect.toString)
	end
	
	
	method visitClass(arg : language::structure::Class) : Void is do
		stdio.writeln("clazz[" + arg.toString + "]: " + arg.name + ", " + arg.isAbstract.toString)
		
		arg.ownedAttribute.each{attr | attr.accept(self) }
		arg.ownedOperation.each{op | op.accept(self) }
	end
	
	
	method visitOperation(arg : language::structure::Operation) : Void is do
		stdio.writeln("operation[" + arg.toString + "]: " + arg.isVisible.toString + " " + arg.name)
	end
	
	
	method visitClassDefinition(arg : language::structure::ClassDefinition) : Void is do
		stdio.write("clazzDefinition[" + arg.toString + "]: " + arg.isVisible.toString + " " + arg.name + ", " + arg.isAbstract.toString + ", " + arg.container.toString)
		
		arg.superType.each{st | stdio.write( " " + st.toString) }
		stdio.writeln("")
		arg.ownedAttribute.each{attr | attr.accept(self) }
		arg.ownedOperation.each{op | op.accept(self) }
	end
	
	
	method visitPackage(arg : language::structure::Package) : Void is do
		stdio.writeln("package[" + arg.toString + "]: " + arg.isVisible.toString + " " + arg.name)
		
		arg.nestedPackage.each{p | p.accept(self) }
		arg.ownedTypeDefinition.each{typeDef | typeDef.accept(self) }
	end
	
	
	method visitModelingUnit(arg : language::structure::ModelingUnit) : Void is do
		arg.packages.each{p | p.accept(self) }
	end
}
