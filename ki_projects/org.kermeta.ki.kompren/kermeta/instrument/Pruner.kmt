/*
 * Creation : March 17, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin 
 */
package kermeta::ki::kompren;


require "platform:/resource/org.kermeta.ki.kompren/kermeta/ModelExtension.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/action/Prune.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/instrument/ZoomerMetamodel.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/interaction/CtrlMultiPress.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/library/Press.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/instrument/library/PressLink.kmt"

using kermeta::language::structure
using kermeta::standard
using kermeta::ki::malai::instrument
using kermeta::ki::malai::interaction
using kermeta::ki::malai::action
using kermeta::ki::malai::widget



class Pruner inherits Instrument
{
	reference metamodel : ModelingUnit
	
	attribute viewPolicy : PrunerViewPolicy
	
	attribute hideButton : ToggleButton
	
	attribute grayedButton : ToggleButton
	
	attribute radiusSpinner : Spinner
	
	attribute cardCheckBox : CheckBox
	
	attribute radiusEffect : Integer
	
	attribute considerCard0 : Boolean
	
	reference zoomer : ZoomerMetamodel
	
	
	
	method initialise(actionRegistry : ActionRegistry) : Void is do
		super(actionRegistry)
		
		viewPolicy    := PrunerViewPolicy.hide
		radiusEffect  := 0
		considerCard0 := true
		
		initialiseWidgets
	end
	
	
	
	operation initialiseWidgets() : Void is do
		hideButton    := ToggleButton.new
		grayedButton  := ToggleButton.new
		radiusSpinner := Spinner.new
		cardCheckBox  := CheckBox.new
		
		hideButton.initialiseWithText("Hide")
		grayedButton.initialiseWithText("Gray")
		radiusSpinner.initialise()
		cardCheckBox.initialise()
		cardCheckBox.setText("With card 0")
		interimFeedback
	end
	
	
	
	method initialiseLinks() : Void is do
//		addLink(MultiPress2Prune.new, false)
		addLink(Press2Prune.new, false)
	end
	
	
	method interimFeedback() : Void is do
		hideButton.setSelected(viewPolicy==PrunerViewPolicy.hide)
		grayedButton.setSelected(viewPolicy==PrunerViewPolicy.gray)
		hideButton.setVisible(activated)
		grayedButton.setVisible(activated)
		radiusSpinner.setVisible(activated)
		cardCheckBox.setVisible(activated)
		cardCheckBox.setSelected(considerCard0)
	end
}




class MultiPress2Prune inherits Link
{
	method createInteraction() : Interaction is do
		result := CtrlMultiPress.new
	end
	
	
	method getActionClass() : Class is do
		result := Prune
	end
	
	
	method isConditionRespected() : Boolean is do
		result := true
	end
	
	
	operation getObject(x : Real, y : Real, source : Object) : Object is do
		var zoomer : ZoomerMetamodel init instrument.asType(Pruner).zoomer
		result := interaction.getPickableAt(zoomer.getZoomedX(x), zoomer.getZoomedY(y), source)
	end
	
	
	method updateAction() : Void is do
		if(not action.isVoid) then
			var press : CtrlMultiPress init interaction.asType(CtrlMultiPress)
			var as    : Prune init action.asType(Prune)
			var i     : Integer init 0
			var obj   : Object
			
			from  var size : Integer init press.pxs.size()
			until i>=size
			loop
				obj := getObject(press.pxs.at(i), press.pys.at(i), press.source)
				
				if(not obj.isVoid and obj.isInstanceOf(ClassDefinition)) then
					as.selection.add(obj.asType(ClassDefinition))
				end
				
				i := i + 1
			end
		end
	end
	
	
	method createAction() : Void is do
		var as : Prune init Prune.new
		var pruner : Pruner init instrument.asType(Pruner)
		
		as.initialise(instrument.actionRegistry)
		as.radiusEffect := pruner.radiusEffect
		as.card0		:= pruner.considerCard0
		as.viewPolicy   := pruner.viewPolicy
		as.metamodel    := pruner.metamodel
		action          := as
	end
}




class Press2Prune inherits PressLink
{
	method getActionClass() : Class is do
		result := Prune
	end
	
	
	method updateAction() : Void is do
		if(not action.isVoid) then
			var as : Prune init action.asType(Prune)
			as.selection.clear
			as.selection.add(getObject().asType(ClassDefinition))
		end
	end
	
	
	operation getObject() : Object is do
		var press : Press init interaction.asType(Press)
		var zoomer : ZoomerMetamodel init instrument.asType(Pruner).zoomer
		result := press.getPickableAt(zoomer.getZoomedX(press.px), zoomer.getZoomedY(press.py), press.source)
	end
	
	
	method isConditionRespected() : Boolean is do
		var obj : Object init getObject()
		result := not obj.isVoid and obj.isInstanceOf(ClassDefinition)
	end
	
	
	method createAction() : Void is do
		var as : Prune init Prune.new
		var pruner : Pruner init instrument.asType(Pruner)
		
		as.initialise(instrument.actionRegistry)
		as.radiusEffect := pruner.radiusEffect
		as.viewPolicy   := pruner.viewPolicy
		as.card0		:= pruner.considerCard0
		as.metamodel    := pruner.metamodel
		action          := as
	end
}
