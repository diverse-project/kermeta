/*
 * Creation : May 12, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta::ki::kompren;

require "platform:/resource/org.kermeta.ki.kompren/kermeta/action/SearchClasses.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/action/SelectMenuItem.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/action/ReinitSearchField.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/action/CentreOnClass.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/ModelExtension.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/widget/Widget.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/action/ActivateDesactivateInstruments.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/library/KeyPress.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/library/TextFieldChanged.kmt"


using kermeta::ki::malai::instrument
using kermeta::ki::malai::interaction
using kermeta::ki::malai::action
using kermeta::ki::malai::widget
using kermeta::standard
using kermeta::language::structure


class Searcher inherits Instrument {
	attribute textField : TextField
	
	reference searchedClasses : TypeDefinition[0..*]
	
	reference metamodel : ModelingUnit
	
	attribute popupMenu : PopupMenu
	

	
	operation initialiseWidgets() : Void is do
		textField := TextField.new
		textField.initialise()
		popupMenu := PopupMenu.new
		popupMenu.initialise()
		textField.setPopupMenu(popupMenu)
	end
	
	
	
	method setIsActivated(activated : Boolean) : Void is do
		super(activated)
		textField.setVisible(activated)
		
		if(activated) then
			textField.setText("")
		else
			popupMenu.setVisible(false)
		end
	end
	
	
	
	method initialiseLinks() : Void is do
		addLink(TextChanged2SearchClasses.new, false)
		addLink(ArrowPress2ChangeSelection.new, false)
		addLink(Enter2CentreOnClass.new, false)
		addLink(KeyPress2Reinit.new, false)
	end
	
	
	
	method interimFeedback() : Void is do
	end
	
	
	method onActionDone(link : Link, action : Action) : Void is do
		if(link.isInstanceOf(TextChanged2SearchClasses)) then
			if(searchedClasses.size>0) then
				var nameStart : String init "<html><font color=\"black\">"
				var nameEnd   : String init ")</font></html>"
				var color     : String init "</font><font color=\"gray\">"
				
				var menuItem : MenuItem
				popupMenu.setVisible(false)
				popupMenu.removeAllMenuItems()
				
				searchedClasses.each{td |
					menuItem := MenuItem.new
					menuItem.initialise()
					menuItem.setText(nameStart + td.name + color + " (" + td.getPackageName() + nameEnd)
					popupMenu.addMenuItem(menuItem)
				}
				
				popupMenu.setPosition(textField.getXOnScreen(), textField.getYOnScreen()+textField.getHeight())
				popupMenu.setVisible(true)
			else
				popupMenu.setVisible(false)
			end
		end
	end
	
	
	operation reinitSearchField() : Void is do
		popupMenu.setVisible(false)
		textField.setText("")
	end
}



class Enter2CentreOnClass inherits Link {
	method createInteraction() : Interaction is do
		result := KeyPress.new
	end
	
	
	method updateAction() : Void is do
	end
	
	
	method isConditionRespected() : Boolean is do
		result := interaction.asType(KeyPress).key==10 and instrument.asType(Searcher).popupMenu.getSelectedIndex()!=-1 // Enter
	end
	
	
	method getActionClass() : Class is do
		result := CentreOnClass
	end
	
	
	method createAction() : Void is do
		var centreOnClass 	: CentreOnClass init CentreOnClass.new
		var searcher 		: Searcher init instrument.asType(Searcher)
		var typeDef		    : TypeDefinition init searcher.searchedClasses.at(searcher.popupMenu.getSelectedIndex())
		
		centreOnClass.~class    := typeDef
		centreOnClass.metamodel := searcher.metamodel
		
		action := centreOnClass
		action.initialise(instrument.actionRegistry)
	end
}



class ArrowPress2ChangeSelection inherits Link {
	method createInteraction() : Interaction is do
		result := KeyPress.new
	end
	
	
	method updateAction() : Void is do
	end
	
	
	method getActionClass() : Class is do
		result := SelectMenuItem
	end
	
	
	method createAction() : Void is do
		var selectMenuItem : SelectMenuItem init SelectMenuItem.new
		selectMenuItem.searcher := instrument.asType(Searcher)
		selectMenuItem.isUp 	:= interaction.asType(KeyPress).key==38
		action := selectMenuItem
		action.initialise(instrument.actionRegistry)
	end
	
	
	method isConditionRespected() : Boolean is do
		var key : Integer init interaction.asType(KeyPress).key
		result := key==38 or key==40 // arrow up and arrow down
	end
}



class TextChanged2SearchClasses inherits Link {
	method createInteraction() : Interaction is do
		result := KeyPress.new
	end
	
	
	method updateAction() : Void is do
	end
	
	
	method getActionClass() : Class is do
		result := SearchClasses
	end
	
	
	method isConditionRespected() : Boolean is do
		var key : Integer init interaction.asType(KeyPress).key
		result := (key>=65 and key<=90) or key==32 or key==8 // between a and z included or return or space
	end
	
	
	method createAction() : Void is do
		var searchClasses : SearchClasses init SearchClasses.new
		searchClasses.searcher 	:= instrument.asType(Searcher)
		searchClasses.text 		:= instrument.asType(Searcher).textField.getText()
		action := searchClasses
		action.initialise(instrument.actionRegistry)
	end
}





class KeyPress2Reinit inherits Link {
	method getActionClass() : Class is do
		result := ReinitSearchField
	end
	
	
	method createInteraction() : Interaction is do
		result := KeyPress.new
	end
	
	
	method isConditionRespected() : Boolean is do
		var keyPress : KeyPress init interaction.asType(KeyPress)
		result := keyPress.key==27 or keyPress.key==10 // escape or enter
	end
	
	
	method updateAction() : Void is do
	end
	
	
	method createAction() : Void is do
		var reinitField : ReinitSearchField init ReinitSearchField.new
		
		reinitField.searcher := instrument.asType(Searcher)
		action := reinitField
		action.initialise(instrument.actionRegistry)
	end
}
