/*
 * Creation : March 23, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta::ki::kompren;

require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/widget/Widget.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/instrument/library/ButtonPressLink.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/library/ButtonPressed.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/action/ActivateDesactivateInstruments.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/instrument/Pruner.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/instrument/Flattener.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/instrument/Hierarcher.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/instrument/Hand.kmt"

using kermeta::ki::malai::instrument
using kermeta::ki::malai::interaction
using kermeta::ki::malai::widget
using kermeta::ki::malai::picking
using kermeta::ki::malai::action
using kermeta::standard
using kermeta::language::structure


class InstrumentsSelector inherits Instrument
{
	reference pruner : Pruner
	
	reference hand : Hand
	
	reference flattener : Flattener
	
	reference hierarcher : Hierarcher
	
	attribute prunerButton : ToggleButton
	
	attribute flattenerButton : ToggleButton
	
	attribute hierarcherButton : ToggleButton
	
	attribute handButton : ToggleButton
	
	

	operation initialiseInstruments(pruner : Pruner, flattener : Flattener, hierarcher : Hierarcher, hand : Hand) : Void is do
		self.pruner     := pruner
		self.flattener  := flattener
		self.hierarcher := hierarcher
		self.hand 		:= hand
		
		pruner.setIsActivated(false)
		flattener.setIsActivated(false)
		hierarcher.setIsActivated(false)
		hand.setIsActivated(true)
		
		prunerButton     := ToggleButton.new
		flattenerButton  := ToggleButton.new
		hierarcherButton := ToggleButton.new
		handButton		 := ToggleButton.new
		
		prunerButton.initialiseWithIcon("/res/prune.png")
		flattenerButton.initialiseWithIcon("/res/flat.png")
		hierarcherButton.initialiseWithIcon("/res/hierar.png")
		handButton.initialiseWithIcon("/res/hand.png")
		
		interimFeedback
	end
	
	
	
	method initialiseLinks() : Void is do
		addLink(ButtonPressed2ActivateIns.new, false)
	end
	
	
	method interimFeedback() : Void is do
		prunerButton.setSelected(pruner.activated)
		flattenerButton.setSelected(flattener.activated)
		hierarcherButton.setSelected(hierarcher.activated)
		handButton.setSelected(hand.activated)
	end
}



class ButtonPressed2ActivateIns inherits ButtonPressLink
{
	method getActionClass() : Class is do
		result := ActivateDesactivateInstruments
	end
	
	
	
	method isConditionRespected() : Boolean is do
		var bp       : ButtonPressed       init interaction.asType(ButtonPressed)
		var selector : InstrumentsSelector init instrument.asType(InstrumentsSelector)

		result := selector.prunerButton==bp.button or selector.flattenerButton==bp.button or 
					selector.hierarcherButton==bp.button or selector.handButton==bp.button
	end
	
	
	
	method createAction() : Void is do
		var button : Button init interaction.asType(ButtonPressed).button
		var selector : InstrumentsSelector init instrument.asType(InstrumentsSelector)
		var activeAction : ActivateDesactivateInstruments init ActivateDesactivateInstruments.new
		
		if(button==selector.prunerButton) then
			activeAction.instrumentsActivate.add(selector.pruner)
			activeAction.instrumentsDesactivate.add(selector.flattener)
			activeAction.instrumentsDesactivate.add(selector.hierarcher)
			activeAction.instrumentsDesactivate.add(selector.hand)
		else
			if(button==selector.hierarcherButton) then
				activeAction.instrumentsActivate.add(selector.hierarcher)
				activeAction.instrumentsDesactivate.add(selector.flattener)
				activeAction.instrumentsDesactivate.add(selector.pruner)
				activeAction.instrumentsDesactivate.add(selector.hand)
			else
				if(button==selector.handButton) then
					activeAction.instrumentsActivate.add(selector.hand)
					activeAction.instrumentsDesactivate.add(selector.pruner)
					activeAction.instrumentsDesactivate.add(selector.hierarcher)
					activeAction.instrumentsDesactivate.add(selector.flattener)
				else
					activeAction.instrumentsActivate.add(selector.flattener)
					activeAction.instrumentsDesactivate.add(selector.pruner)
					activeAction.instrumentsDesactivate.add(selector.hierarcher)
					activeAction.instrumentsDesactivate.add(selector.hand)
				end
			end
		end
		
		action := activeAction
		action.initialise(instrument.actionRegistry)
	end
	
	
	method updateAction() : Void is do end
}
