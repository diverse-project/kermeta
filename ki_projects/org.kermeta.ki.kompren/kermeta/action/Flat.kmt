/*
 * Creation : April 9, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta::ki::kompren;

require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/action/Action.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/operation/ClassFlattener.kmt"
require "platform:/resource/org.kermeta.ki.kompren/kermeta/ModelExtension.kmt"

using kermeta::ki::malai::action
using kermeta::ki::malai::undo
using kermeta::language::structure



class Flat inherits Action, Undoable {
	attribute flatteningOperation : ClassFlattener
	
	reference metamodel : ModelingUnit
	
	reference classToFlat : ClassDefinition
	
	
	
	method doActionBody() : Void is do
		flatteningOperation 			:= ClassFlattener.new
		flatteningOperation.metamodel 	:= metamodel
		
		flatteningOperation.flat(classToFlat)
		metamodel.organise()
		metamodel.focusOnTypeDefinition(classToFlat)
	end
	
	
	method canDo() : Boolean is do
		result := not metamodel.isVoid and not classToFlat.isVoid
	end
	
	
	method cancelledBy(action : Class) : Boolean is do
		result := false
	end
	
	
	method isRegisterable() : Boolean is do
		result := true
	end
	
	
	method undo() : Void is do
		// Restoring classes visibility.
		flatteningOperation.removedClasses.each{clazz |
			if(not clazz.pruned) then
				clazz.clazz.unprune
			else
				if(clazz.visible) then
					clazz.clazz.prune(PrunerViewPolicy.gray)
				else
					clazz.clazz.prune(PrunerViewPolicy.hide)
				end
			end
		}
		
		// Restoring modified properties
		flatteningOperation.changedProperties.each{propBackup | true
				var oppositeName : String init ""
				var oppositeCompo : Boolean init false
				var oppositeCardString : String init ""
				
				if(not propBackup.prop.opposite.isVoid) then 
					oppositeName  := propBackup.prop.opposite.name 
					oppositeCompo := propBackup.prop.opposite.isComposite
					oppositeCardString := propBackup.prop.opposite.getCardinalityString
				end
				
				extern org::kermeta::ki::kompren::view::DiagramViewExtern.onRelationRemoved(metamodel, propBackup.prop)
				var clazz : Class init Class.new
				clazz.typeDefinition := propBackup.type.asType(Class).typeDefinition
				propBackup.prop.type := clazz
				extern org::kermeta::ki::kompren::view::ClassDiagramViewExtern.onRelationAdded(metamodel, propBackup.prop, propBackup.prop.isComposite, classToFlat, 
						clazz.typeDefinition, propBackup.prop.name, propBackup.prop.getCardinalityString, oppositeName, oppositeCardString, -1, oppositeCompo)
		}

		// Restoring moved operations	
		flatteningOperation.addedOperations.each{op |
			classToFlat.moveOperationTo(op.op, op.owningClass)
		}
	
		// Restoring moved properties
		flatteningOperation.addedProperties.each{prop | true
			classToFlat.movePropertyTo(prop.prop, prop.owningClass, metamodel)
		}
		
		// Restoring removed inheritances
		flatteningOperation.removedInheritances.each{in |
			if(in.sourceType.isVoid) then
				var clazz : Class init Class.new
				clazz.typeDefinition := in.target
				in.sourceType := clazz
			end
			
			in.source.superType.add(in.sourceType)
			extern org::kermeta::ki::kompren::view::ClassDiagramViewExtern.onInheritanceAdded(metamodel, in.source, in.target, -1)
		}
		
		// Removing added inheritances
		flatteningOperation.addedInheritances.each{in |
			in.source.superType.each{st |
				if(st.isInstanceOf(ParameterizedType)) then
					if(in.target==st.asType(ParameterizedType).typeDefinition) then
						in.source.superType.remove(st)
					end
				end
			}
			extern org::kermeta::ki::kompren::view::ClassDiagramViewExtern.onInheritanceRemoved(metamodel, in.source, in.target)
		}
		
		metamodel.organise()
		metamodel.focusOnTypeDefinition(classToFlat)
	end
	
	
	
	
	method redo() : Void is do
		doActionBody
	end
}
