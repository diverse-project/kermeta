package ex::classModel;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/class/ClassModel.ecore"
require "InvertedClassModelSlicerAspect.kmt"

using kermeta::standard
using kermeta::utils
using ecore

class InvertedClassModelSlicer {
	reference requiredClazzs : Clazz[0..*]

	reference addedClazzs : Bag<Clazz>

	reference addedsuperClassesOpposite : Bag<ClasssuperClassesOpposite>
	
	reference model : ClassModel

	operation initialise(requiredClazzs : bag Clazz[0..*], model : ClassModel) : InvertedClassModelSlicer is do
		result := self
		self.addedClazzs := Bag<Clazz>.new
		self.addedsuperClassesOpposite := Bag<ClasssuperClassesOpposite>.new
		self.requiredClazzs.addAll(requiredClazzs)
		self.model := model
	end
	
	
	operation feedOpposites() is do
		model.feedOpposites()
	end
	

	operation launch() : Void is do
		self.feedOpposites()
		self.requiredClazzs.each{theClazz | theClazz.visitToAddClasses(self) }
		self.requiredClazzs.each{theClazz | theClazz.visitToAddRelations(self) }
		self.addedClazzs.each{theClazz | onClazzAdded(theClazz) }
		self.addedsuperClassesOpposite.each{thesuperClassesOpposite | self.onsuperClassesOppositeAdded(thesuperClassesOpposite.src, thesuperClassesOpposite.tar) }
	end

	operation onClazzAdded(clazz : Clazz) : Void is do
stdio.writeln("class: " + clazz.name)
	end
	operation onsuperClassesOppositeAdded(src : Clazz, tgt : Clazz) : Void is do
stdio.writeln(tgt.name + "subclass of" + src.name)
	end
}
class ClasssuperClassesOpposite {
	reference src : Clazz
	reference tar : Clazz
	operation initialise(src : Clazz, tar : Clazz) : ClasssuperClassesOpposite is do
		result := self
		self.src := src
		self.tar := tar
	end
}
