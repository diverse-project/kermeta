package ex::stateMachine;
require kermeta
require "platform:/resource/org.kermeta.ki.kompren.pruning/examples/stateMachine/StateMachine.ecore"
require "StateMachinePruner.kmt"
using kermeta::standard
using kermeta::utils
aspect class PruningVisitorAspect {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute addedToPruner : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.addedToPruner := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theStateMachinePruner : StateMachinePruner, currentRadius : Integer) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theStateMachinePruner : StateMachinePruner, currentRadius : Integer) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
}

aspect class OutputState {
	method visitToAddClasses(theStateMachinePruner : StateMachinePruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (theStateMachinePruner.radius<=0 or currentRadius<=theStateMachinePruner.radius)) then
			super(theStateMachinePruner, currentRadius)
			self.visitedPass := true
			self.outgoingTransitions.each{theTransition | theTransition.visitToAddClasses(theStateMachinePruner, currentRadius+1)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachinePruner : StateMachinePruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (theStateMachinePruner.radius<=0 or currentRadius<=theStateMachinePruner.radius)) then
			super(theStateMachinePruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			self.outgoingTransitions.each{theTransition | theTransition.visitToAddRelations(theStateMachinePruner, currentRadius+1)}
			self.visitedPass := false
		end
	end
}

aspect class Transition inherits PruningVisitorAspect {
	method visitToAddClasses(theStateMachinePruner : StateMachinePruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (theStateMachinePruner.radius<=0 or currentRadius<=theStateMachinePruner.radius)) then
			super(theStateMachinePruner, currentRadius)
			if(not self.addedToPruner) then
				theStateMachinePruner.onTransitionAdded(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			if(not self.target.isVoid) then self.target.visitToAddClasses(theStateMachinePruner, currentRadius) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachinePruner : StateMachinePruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (theStateMachinePruner.radius<=0 or currentRadius<=theStateMachinePruner.radius)) then
			super(theStateMachinePruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.target.isVoid) then self.target.visitToAddRelations(theStateMachinePruner, currentRadius) end
			self.visitedPass := false
		end
	end
}

aspect class State inherits PruningVisitorAspect {
	method visitToAddClasses(theStateMachinePruner : StateMachinePruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (theStateMachinePruner.radius<=0 or currentRadius<=theStateMachinePruner.radius)) then
			super(theStateMachinePruner, currentRadius)
			if(not self.addedToPruner) then
				theStateMachinePruner.onStateAdded(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachinePruner : StateMachinePruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (theStateMachinePruner.radius<=0 or currentRadius<=theStateMachinePruner.radius)) then
			super(theStateMachinePruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

