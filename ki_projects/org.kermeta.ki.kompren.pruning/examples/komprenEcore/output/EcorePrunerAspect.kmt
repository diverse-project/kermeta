package ecore;
require kermeta
require "platform:/resource/org.kermeta.ki.kompren.pruning/examples/komprenEcore/Ecore.ecore"
require "EcorePruner.kmt"
using kermeta::standard
using kermeta::utils
aspect class PruningVisitorAspect {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute addedToPruner : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.addedToPruner := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
}

aspect class EClass {
	method visitToAddClasses(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (theEcorePruner.radius<=0 or currentRadius<=theEcorePruner.radius)) then
			super(theEcorePruner, currentRadius)
			if(not self.addedToPruner) then
				theEcorePruner.onEClassAdded(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visitToAddClasses(theEcorePruner, currentRadius+1)}
			self.eSuperTypes.each{theEClass | theEClass.visitToAddClasses(theEcorePruner, currentRadius+1)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (theEcorePruner.radius<=0 or currentRadius<=theEcorePruner.radius)) then
			super(theEcorePruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visitToAddRelations(theEcorePruner, currentRadius+1)}
			self.eSuperTypes.each{theEClass | theEClass.visitToAddRelations(theEcorePruner, currentRadius+1)
				if(self.visitedForRelations and theEClass.visitedForRelations) then
					theEcorePruner.oneSuperTypesAdded(self, theEClass) end }
			self.visitedPass := false
		end
	end
}

aspect class EStructuralFeature {
	method visitToAddClasses(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (not theEcorePruner.lowerCard0 or self.lowerBound!=0) and (theEcorePruner.radius<=0 or currentRadius<=theEcorePruner.radius)) then
			super(theEcorePruner, currentRadius)
			self.visitedPass := true
			if(not self.eContainingClass.isVoid) then self.eContainingClass.visitToAddClasses(theEcorePruner, currentRadius) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (not theEcorePruner.lowerCard0 or self.lowerBound!=0) and (theEcorePruner.radius<=0 or currentRadius<=theEcorePruner.radius)) then
			super(theEcorePruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.eContainingClass.isVoid) then self.eContainingClass.visitToAddRelations(theEcorePruner, currentRadius) end
			self.visitedPass := false
		end
	end
}

aspect class ETypedElement inherits PruningVisitorAspect {
	method visitToAddClasses(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (not theEcorePruner.lowerCard0 or self.lowerBound!=0) and (theEcorePruner.radius<=0 or currentRadius<=theEcorePruner.radius)) then
			super(theEcorePruner, currentRadius)
			self.visitedPass := true
			if(not self.eType.isVoid) then self.eType.visitToAddClasses(theEcorePruner, currentRadius) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (not theEcorePruner.lowerCard0 or self.lowerBound!=0) and (theEcorePruner.radius<=0 or currentRadius<=theEcorePruner.radius)) then
			super(theEcorePruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.eType.isVoid) then self.eType.visitToAddRelations(theEcorePruner, currentRadius) end
			self.visitedPass := false
		end
	end
}

aspect class EClassifier inherits PruningVisitorAspect {
}

aspect class EReference {
	method visitToAddClasses(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (not theEcorePruner.lowerCard0 or self.lowerBound!=0) and (theEcorePruner.radius<=0 or currentRadius<=theEcorePruner.radius)) then
			super(theEcorePruner, currentRadius)
			if(not self.addedToPruner) then
				theEcorePruner.onEReferenceAdded(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theEcorePruner : EcorePruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (not theEcorePruner.lowerCard0 or self.lowerBound!=0) and (theEcorePruner.radius<=0 or currentRadius<=theEcorePruner.radius)) then
			super(theEcorePruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

