package org::kermeta::language::structure;
require kermeta
require "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "KermetaSlicer.kmt"
using kermeta::standard
using kermeta::utils
aspect class PruningVisitorAspect {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute addedToPruner : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.addedToPruner := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theKermetaSlicer : KermetaSlicer) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theKermetaSlicer : KermetaSlicer) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end
}

aspect class TypeDefinition {
	operation initialisesuperTypeOpposite() : Void is do
		self.~superType.each{theType | theType.superTypeOpposite.add(self) }
	end

	method visitToAddClasses(theKermetaSlicer : KermetaSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			if(theKermetaSlicer.considersuperType) then self.superType.each{theType | theType.visitToAddClasses(theKermetaSlicer)} end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaSlicer : KermetaSlicer) : Void is do
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			if(theKermetaSlicer.considersuperType) then self.superType.each{theType | theType.visitToAddRelations(theKermetaSlicer)
				if(self.visitedForRelations and theType.visitedForRelations) then
					theKermetaSlicer.addedsuperType.add(ClasssuperType.new.initialise(self, theType)) end } end
			self.visitedPass := false
		end
	end
}

aspect class Type inherits PruningVisitorAspect {
	reference superTypeOpposite : TypeDefinition[0..*]

	method visitToAddClasses(theKermetaSlicer : KermetaSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			self.superTypeOpposite.each{theTypeDefinition | theTypeDefinition.visitToAddClasses(theKermetaSlicer)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaSlicer : KermetaSlicer) : Void is do
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.superTypeOpposite.each{theTypeDefinition | theTypeDefinition.visitToAddRelations(theKermetaSlicer)
				if(self.visitedForRelations and theTypeDefinition.visitedForRelations) then
					theKermetaSlicer.addedsuperTypeOpposite.add(ClasssuperTypeOpposite.new.initialise(self, theTypeDefinition)) end }
			self.visitedPass := false
		end
	end
}

aspect class ParameterizedType {
	method visitToAddClasses(theKermetaSlicer : KermetaSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			if(theKermetaSlicer.considertypeDefinition) then self.typeDefinition.visitToAddClasses(theKermetaSlicer) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaSlicer : KermetaSlicer) : Void is do
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			if(theKermetaSlicer.considertypeDefinition) then self.typeDefinition.visitToAddRelations(theKermetaSlicer) end
			self.visitedPass := false
		end
	end
}

aspect class ClassDefinition {
	method visitToAddClasses(theKermetaSlicer : KermetaSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			if(not self.addedToPruner) then
				theKermetaSlicer.addedClassDefinitions.add(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			if(theKermetaSlicer.considerownedAttribute) then self.ownedAttribute.each{theProperty | theProperty.visitToAddClasses(theKermetaSlicer)} end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaSlicer : KermetaSlicer) : Void is do
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			if(theKermetaSlicer.considerownedAttribute) then self.ownedAttribute.each{theProperty | theProperty.visitToAddRelations(theKermetaSlicer)} end
			self.visitedPass := false
		end
	end
}

aspect class Property {
	method visitToAddClasses(theKermetaSlicer : KermetaSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			if(not self.addedToPruner) then
				theKermetaSlicer.addedPropertys.add(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaSlicer : KermetaSlicer) : Void is do
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class TypedElement {
	method visitToAddClasses(theKermetaSlicer : KermetaSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			if(not self.type.isVoid) then self.type.visitToAddClasses(theKermetaSlicer) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaSlicer : KermetaSlicer) : Void is do
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.type.isVoid) then self.type.visitToAddRelations(theKermetaSlicer) end
			self.visitedPass := false
		end
	end
}

aspect class TypeContainer inherits PruningVisitorAspect {
	method visitToAddClasses(theKermetaSlicer : KermetaSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			if(theKermetaSlicer.considercontainedType) then self.containedType.each{theType | theType.visitToAddClasses(theKermetaSlicer)} end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaSlicer : KermetaSlicer) : Void is do
		if(not self.visitedPass) then
			super(theKermetaSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			if(theKermetaSlicer.considercontainedType) then self.containedType.each{theType | theType.visitToAddRelations(theKermetaSlicer)} end
			self.visitedPass := false
		end
	end
}

