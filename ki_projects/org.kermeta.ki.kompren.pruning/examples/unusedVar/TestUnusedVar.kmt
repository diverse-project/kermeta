/* $Id:$ 
 * Creation : December 8, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ablouin
 */
@mainClass "org::kermeta::language::behavior::Test"
@mainOperation "main"

package org::kermeta::language::behavior;
require kermeta
require "output/UnusedVarDetector.kmt"
require "platform:/resource/org.kermeta.language.mdk/src/kmt/language/helpers/structure/CreationHelper.kmt"

using kermeta::standard
using kermeta::utils
using org::kermeta::language::structure

class Test {
	operation main() : Void is do
		var op : Operation init Operation.new
		var block : Block init Block.new
		var var1def : VariableDecl init VariableDecl.new
		var var2def : VariableDecl init VariableDecl.new
		var ifStat : Conditional init Conditional.new
		var assign : Assignment init Assignment.new
		var callF : CallVariable init CallVariable.new
		ifStat.condition := EmptyExpression.new
		assign.target := CallResult.new
		 
		var1def.identifier := "v1"
		var2def.identifier := "v2"
		var type : Class init Class.new
		var typeCD : ClassDefinition init ClassDefinition.new
		typeCD.name := "String"
		type.typeDefinition := typeCD
		var1def.containedType.add(type)
		callF.name := var1def.identifier
		callF.staticType := type
		assign.~value := callF
		ifStat.thenBody := assign 
		block.statement.add(var1def)
		block.statement.add(ifStat)
		block.statement.add(var2def)
		var requiredExpressions : Bag<Expression> init Bag<Expression>.new
		requiredExpressions.add(block)
		var pruning : PrintUnusedVarDetector init PrintUnusedVarDetector.new.initialise(requiredExpressions).asType(PrintUnusedVarDetector)
		pruning.launch()
	end
}


class PrintUnusedVarDetector inherits UnusedVarDetector {
	reference varDecls : VariableDecl[0..*]

	method onVariableDeclAdded(theVariableDecl : VariableDecl) : Void is do
		super(theVariableDecl)
		varDecls.add(theVariableDecl)
	end

	method onCallVariableAdded(theCallVariable : CallVariable) : Void is do
		if(not theCallVariable.staticType.isVoid) then
			var varDecl : VariableDecl init varDecls.detect{varD |
				varD.containedType.contains(theCallVariable.staticType)
			}
			
			if(not varDecl.isVoid) then
				varDecls.remove(varDecl)
			end
		end
	end

	method ended() : Void is do
		varDecls.each{varD | stdio.writeln(varD.identifier) }
	end
}

