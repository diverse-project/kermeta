package org::kermeta::language::structure;
require kermeta
require "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "KermetaPruner.kmt"
using kermeta::standard
using kermeta::utils
aspect class PruningVisitorAspect {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute addedToPruner : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.addedToPruner := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end
}

aspect class TypeDefinition inherits PruningVisitorAspect {
	method visitToAddClasses(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (theKermetaPruner.radius<=0 or currentRadius<=(theKermetaPruner.radius+1))) then
			super(theKermetaPruner, currentRadius)
			self.visitedPass := true
			self.superType.each{theType | theType.visitToAddClasses(theKermetaPruner, currentRadius+1)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (theKermetaPruner.radius<=0 or currentRadius<=theKermetaPruner.radius)) then
			super(theKermetaPruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			self.superType.each{theType | theType.visitToAddRelations(theKermetaPruner, currentRadius+1)
				if(self.visitedForRelations and theType.visitedForRelations) then
					theKermetaPruner.addedsuperType.add(ClasssuperType.new.initialise(self, theType)) end }
			self.visitedPass := false
		end
	end
}

aspect class Type inherits PruningVisitorAspect {
	method checkCanReallyBeAdded() : Boolean is do
		result := super()
	end
}

aspect class ClassDefinition {
	method visitToAddClasses(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (theKermetaPruner.radius<=0 or currentRadius<=(theKermetaPruner.radius+1))) then
			super(theKermetaPruner, currentRadius)
			if(not self.addedToPruner and (theKermetaPruner.radius<=0 or currentRadius<=theKermetaPruner.radius)) then
				theKermetaPruner.addedClassDefinitions.add(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			self.ownedAttribute.each{theProperty | theProperty.visitToAddClasses(theKermetaPruner, currentRadius+1)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (theKermetaPruner.radius<=0 or currentRadius<=theKermetaPruner.radius)) then
			super(theKermetaPruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedAttribute.each{theProperty | theProperty.visitToAddRelations(theKermetaPruner, currentRadius+1)}
			self.visitedPass := false
		end
	end
	method checkCanReallyBeAdded() : Boolean is do
		result := self.addedToPruner
	end
}

aspect class Property {
	method visitToAddClasses(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (not theKermetaPruner.lowerCard0 or self.lower!=0) and (theKermetaPruner.radius<=0 or currentRadius<=(theKermetaPruner.radius+1))) then
			super(theKermetaPruner, currentRadius)
			if(not self.addedToPruner) then
				theKermetaPruner.addedPropertys.add(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			if(not self.owningClass.isVoid) then self.owningClass.visitToAddClasses(theKermetaPruner, currentRadius) end
			if(not self.opposite.isVoid) then self.opposite.visitToAddClasses(theKermetaPruner, currentRadius) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (not theKermetaPruner.lowerCard0 or self.lower!=0) and (theKermetaPruner.radius<=0 or currentRadius<=theKermetaPruner.radius)) then
			super(theKermetaPruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.owningClass.isVoid) then self.owningClass.visitToAddRelations(theKermetaPruner, currentRadius) end
			if(not self.opposite.isVoid) then self.opposite.visitToAddRelations(theKermetaPruner, currentRadius) end
			self.visitedPass := false
		end
	end
	method checkCanReallyBeAdded() : Boolean is do
		result := super() and (self.owningClass.isVoid.orElse{b | self.owningClass.visitedPass.orElse{b | self.owningClass.checkCanReallyBeAdded()}}) and (self.opposite.isVoid.orElse{b | self.opposite.visitedPass.orElse{b | self.opposite.checkCanReallyBeAdded()}})
	end
}

aspect class TypedElement inherits PruningVisitorAspect {
	method visitToAddClasses(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (theKermetaPruner.radius<=0 or currentRadius<=(theKermetaPruner.radius+1))) then
			super(theKermetaPruner, currentRadius)
			self.visitedPass := true
			if(not self.type.isVoid) then self.type.visitToAddClasses(theKermetaPruner, currentRadius) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (theKermetaPruner.radius<=0 or currentRadius<=theKermetaPruner.radius)) then
			super(theKermetaPruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.type.isVoid) then self.type.visitToAddRelations(theKermetaPruner, currentRadius) end
			self.visitedPass := false
		end
	end
	method checkCanReallyBeAdded() : Boolean is do
		result := super() and (self.type.isVoid.orElse{b | self.type.visitedPass.orElse{b | self.type.checkCanReallyBeAdded()}})
	end
}

aspect class ParameterizedType {
	method visitToAddClasses(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		checkInitialisation()
		if(not self.visitedPass and (theKermetaPruner.radius<=0 or currentRadius<=(theKermetaPruner.radius+1))) then
			super(theKermetaPruner, currentRadius)
			self.visitedPass := true
			self.typeDefinition.visitToAddClasses(theKermetaPruner, currentRadius)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaPruner : KermetaPruner, currentRadius : Integer) : Void is do
		if(not self.visitedPass and (theKermetaPruner.radius<=0 or currentRadius<=theKermetaPruner.radius)) then
			super(theKermetaPruner, currentRadius)
			self.visitedPass := true
			self.visitedForRelations := true
			self.typeDefinition.visitToAddRelations(theKermetaPruner, currentRadius)
			self.visitedPass := false
		end
	end
	method checkCanReallyBeAdded() : Boolean is do
		result := super() and (self.typeDefinition.isVoid.orElse{b | self.typeDefinition.visitedPass.orElse{b | self.typeDefinition.checkCanReallyBeAdded()}})
	end
}

aspect class AbstractProperty inherits PruningVisitorAspect {
	method checkCanReallyBeAdded() : Boolean is do
		result := super()
	end
}

