package org::kermeta::language::structure;
require kermeta
require "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
require "KermetaStaticAnalysis.kmt"
require "behaviorPruningAspect.kmt"
using org::kermeta::language::behavior
using kermeta::standard
using kermeta::utils
aspect class PruningVisitorAspect {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute addedToPruner : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.addedToPruner := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end
}

aspect class ModelingUnit {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.packages.each{thePackage | thePackage.visitToAddClasses(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			self.packages.each{thePackage | thePackage.visitToAddRelations(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
}

aspect class Package {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.nestedPackage.each{thePackage | thePackage.visitToAddClasses(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			self.nestedPackage.each{thePackage | thePackage.visitToAddRelations(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
}

aspect class TypeDefinitionContainer inherits PruningVisitorAspect {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.ownedTypeDefinition.each{theTypeDefinition | theTypeDefinition.visitToAddClasses(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedTypeDefinition.each{theTypeDefinition | theTypeDefinition.visitToAddRelations(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
}

aspect class TypeDefinition inherits PruningVisitorAspect {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.superType.each{theType | theType.visitToAddClasses(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			self.superType.each{theType | theType.visitToAddRelations(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
}

aspect class Class {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.ownedOperation.each{theOperation | theOperation.visitToAddClasses(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedOperation.each{theOperation | theOperation.visitToAddRelations(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
}

aspect class Operation {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.ownedParameter.each{theParameter | theParameter.visitToAddClasses(theKermetaStaticAnalysis)}
			if(not self.body.isVoid) then self.body.visitToAddClasses(theKermetaStaticAnalysis) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedParameter.each{theParameter | theParameter.visitToAddRelations(theKermetaStaticAnalysis)}
			if(not self.body.isVoid) then self.body.visitToAddRelations(theKermetaStaticAnalysis) end
			self.visitedPass := false
		end
	end
}

aspect class TypedElement inherits PruningVisitorAspect {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			if(not self.type.isVoid) then self.type.visitToAddClasses(theKermetaStaticAnalysis) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.type.isVoid) then self.type.visitToAddRelations(theKermetaStaticAnalysis) end
			self.visitedPass := false
		end
	end
}

aspect class Type inherits PruningVisitorAspect {
}

aspect class ParameterizedType {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.typeDefinition.visitToAddClasses(theKermetaStaticAnalysis)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			self.typeDefinition.visitToAddRelations(theKermetaStaticAnalysis)
			self.visitedPass := false
		end
	end
}

aspect class ClassDefinition {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			if(not self.addedToPruner) then
				theKermetaStaticAnalysis.addedClassDefinitions.add(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			self.ownedAttribute.each{theProperty | theProperty.visitToAddClasses(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedAttribute.each{theProperty | theProperty.visitToAddRelations(theKermetaStaticAnalysis)}
			self.visitedPass := false
		end
	end
}

aspect class Enumeration {
	method visitToAddClasses(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			if(not self.addedToPruner) then
				theKermetaStaticAnalysis.addedEnumerations.add(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theKermetaStaticAnalysis : KermetaStaticAnalysis) : Void is do
		if(not self.visitedPass) then
			super(theKermetaStaticAnalysis)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

