/*
 * Creation : November 25, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell Team
 * Authors  : Arnaud Blouin
 */
@mainClass "prunerGenerator::Test"
@mainOperation "main"

package prunerGenerator;

require kermeta
require "PrunerGenerator.kmt"

using kermeta::standard
using kermeta::persistence
using kermeta::io
using ecore


class Test {
	operation main() : Void is do
		generateKomprenKermetaModel()
	end


	operation generateKomprenKermetaModel() : Void is do
		var modelURI	: String init "platform:/resource/org.kermeta.language.model/src/main/ecore/kermeta.ecore"
		var pruningSM 	: Pruning init getPruningModel("platform:/resource/org.kermeta.ki.kompren.pruning/examples/komprenKermeta/kermeta.prunergenerator")
		var pkg 		: EPackage init getEcoreModel(modelURI).one()
		var pruner 		: PrunerGenerator init PrunerGenerator.new.initialise(pruningSM, pkg, modelURI)

		pruner.generatePruner()
		saveCode(pruner, "../../examples/komprenKermeta/output/")
	end
	
	
	operation saveCode(pruner : PrunerGenerator, path : String) : Void is do
		var file : FileIO init FileIO.new
		file.writeTextFile(path + pruner.prunerClass.name + "Aspect.kmt", pruner.prunerAspectGenerator.generatedCode)
		file.writeTextFile(path + pruner.prunerClass.name + ".kmt", pruner.prunerClassGenerator.generatedCode)
		
		pruner.requiredAspectFiles.keys.each{key |
			var subPkgs : Sequence<String> init key.split("::")
			file.writeTextFile(path + subPkgs.last() + "PruningAspect.kmt", pruner.requiredAspectFiles.getValue(key))
		}
	end
	
	
	operation getEcoreModel(uriEcoreModel : String) : Bag<EPackage> is do
		var uriMM : String init "http://www.eclipse.org/emf/2002/Ecore"
   		var repository : EMFRepository init EMFRepository.new
   		repository.registerEcoreFile(uriMM)          
   		var resource : Resource init repository.createResource(uriEcoreModel, uriMM)
       	resource.load()
		
		result := Bag<EPackage>.new
		
		resource.contents.each{obj |
			if(EPackage.isInstance(obj)) then
				result.add(obj.asType(EPackage))        
			end
		}
	end

	
	
	operation getPruningModel(uriPruningModel : String) : Pruning is do
		var uriPruningMM : String init "platform:/resource/org.kermeta.ki.pruning.examples/src/kermeta/generator/Pruning.ecore"
   		var repository : EMFRepository init EMFRepository.new
   		repository.registerEcoreFile(uriPruningMM)          
   		var resource : Resource init repository.createResource(uriPruningModel, uriPruningMM)
       	resource.load()

		from var it : Iterator<Object> init resource.instances.iterator
		until it.isOff
		loop
			var next : Object init it.next
			if(Pruning.isInstance(next)) then                 
				result ?= next
			end
		end
	end
}
