/*
 * Creation : December 8, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell Team
 * Authors  : Arnaud Blouin
 */
package prunerGenerator;

require kermeta
require "PrunerGenerator.kmt"

using kermeta::standard
using ecore

class PrunerClassGenerator inherits Generator {
	operation initialise(pruner : PrunerGenerator) : PrunerClassGenerator is do
		self.prunerGenerator := pruner
		result := self
	end

	method generateCode() : Void is do
		generatedCode := prunerGenerator.getPackageFromClasses(prunerGenerator.aspectisedClasses)
		generatedCode := generatedCode + "require kermeta\nrequire \"" + prunerGenerator.modelURI + "\"\nrequire \"" +
						 prunerGenerator.prunerClass.name + "Aspect.kmt\"\n" +
   					     prunerGenerator.getRequiresFromClasses(prunerGenerator.pruningData.requiredClasses) + 
   					     "\nusing kermeta::standard\nusing kermeta::utils\n" +
						 prunerGenerator.getUsingsFromClasses(prunerGenerator.pruningData.requiredClasses) +
						 "class " + prunerGenerator.prunerClass.name + " {\n"

		if(not prunerGenerator.radius.isVoid) then
			generatedCode := generatedCode + "\tattribute radius : Integer\n\n"
		end

		prunerGenerator.featureParameters.each{param |
			generatedCode := generatedCode + "\tattribute " + param.name + " : Boolean\n\n"
		}

		prunerGenerator.pruningData.relationsFocus.each{rel |
			if(rel.isOption) then
				generatedCode := generatedCode + "\tattribute consider" + rel.relation.name + " : Boolean\n\n"
			end
		}

		generatedCode := generatedCode + generateRequiredAttributes() + generateAddedAttributes() + 
						 generateIntialiseOperation() + generateLaunchOperation() + "\n" +
						 generateAddOperations() + "}\n" + generateRelationClasses()
	end


	operation generateRelationClasses() : String is do
		result := ""

		prunerGenerator.pruningData.relationsToNotify.each{rel |
			result := result + "class Class" + rel.relation.name + " {\n" +
					"\treference src : " + rel.relation.eContainingClass.name + "\n" +
					"\treference tar : " + rel.relation.eType.asType(EClass).name + "\n" +
					"\toperation initialise(src : " + rel.relation.eContainingClass.name + ", tar : " +
					rel.relation.eType.asType(EClass).name + ") : Class" + rel.relation.name + 
					" is do\n\t\tresult := self\n\t\tself.src := src\n\t\tself.tar := tar\n\tend\n}\n"
		}
	end


	operation generateAddOperations() : String is do
		result := ""

		prunerGenerator.pruningData.classesToNotify.each{clazz |
			result := result + "\toperation on" + clazz.name + "Added(" + 
					clazz.getVarNameClassifier() + " : " + clazz.name + ") : Void is do\n\tend\n"
		}

		prunerGenerator.pruningData.relationsToNotify.each{rel |
			var type : EClass init rel.relation.eType.asType(EClass)
			result := result + "\toperation on" + rel.relation.name + "Added(src : " + 
					rel.relation.eContainingClass.name + ", tar : " + type.name + ") : Void is do\n\tend\n"
		}
	end


	// Generates the "launch" operation.
	operation generateLaunchOperation() : String is do
		result := "\toperation launch() : Void is do\n"
		prunerGenerator.pruningData.requiredClasses.each{clazz |
			result := result + "\t\tself." + clazz.getRequiredAttributeName() + ".each{" + clazz.getVarNameClassifier() + " | " +
					clazz.getVarNameClassifier() + ".visitToAddClasses(self"
			if(not prunerGenerator.radius.isVoid) then result := result + ", 0" end
			result := result + ") }\n"
		}
		prunerGenerator.pruningData.requiredClasses.each{clazz |
			result := result + "\t\tself." + clazz.getRequiredAttributeName() + ".each{" + clazz.getVarNameClassifier() + " | " +
					clazz.getVarNameClassifier() + ".visitToAddRelations(self"
			if(not prunerGenerator.radius.isVoid) then result := result + ", 0" end
			result := result + ") }\n"
		}
		prunerGenerator.pruningData.classesToNotify.each{eclass |
			var varName : String init eclass.getVarNameClassifier()
			var endCode : String init ""

			result := result + "\t\tself." + eclass.getAddedAttributeName() + ".each{" + varName + " | "

			if(not prunerGenerator.radius.isVoid) then
				if(not prunerGenerator.radius.focusedClasses.contains(eclass)) then
					result := result + "if(" + varName + ".checkCanReallyBeAdded()) then "
					endCode := " end"
				end
			end

			result := result + "on" + eclass.name + "Added(" + varName + ")" + endCode + " }\n"
		}
		prunerGenerator.pruningData.relationsToNotify.each{rel |
			var varName : String init "the" + rel.relation.name
			result := result + "\t\tself.added" + rel.relation.name + ".each{" + varName + " | self.on" +
					rel.relation.name + "Added(" + varName + ".src, " + varName + ".tar) }\n"
		}
		result := result + "\tend\n"
	end


	operation generateIntialiseOperation() : String is do
		var i : Integer init 0
		result := "\toperation initialise("

		prunerGenerator.pruningData.requiredClasses.each{clazz |
			if(i>0) then result := result + ", " end
			result := result + clazz.getRequiredAttributeName() + " : bag " + clazz.name + "[0..*]"
			i := i + 1
		}

		if(not prunerGenerator.radius.isVoid) then
			result := result + ", radius : Integer"
		end

		prunerGenerator.featureParameters.each{param |
			result := result + ", " + param.name + " : Boolean"
		}

		prunerGenerator.pruningData.relationsFocus.each{rel |
			if(rel.isOption) then
				result := result + ", consider" + rel.relation.name + " : Boolean"
			end
		}

		result := result + ") : " + prunerGenerator.prunerClass.name + " is do\n"
		result := result + "\t\tresult := self\n"

		prunerGenerator.pruningData.classesToNotify.each{clazz |
			result := result + "\t\tself." + clazz.getAddedAttributeName() + " := Bag<" + clazz.name + ">.new\n"
		}
		prunerGenerator.pruningData.relationsToNotify.each{rel |
			result := result + "\t\tself.added" + rel.relation.name + " := Bag<Class" + rel.relation.name + ">.new\n"
		}

		if(not prunerGenerator.radius.isVoid) then
			result := result + "\t\tself.radius := radius\n"
		end

		prunerGenerator.featureParameters.each{param |
			result := result + "\t\tself." + param.name + " := " + param.name + "\n"
		}

		prunerGenerator.pruningData.requiredClasses.each{clazz |
			result := result + "\t\tself." + clazz.getRequiredAttributeName() + ".addAll(" + clazz.getRequiredAttributeName() + ")\n"
		}

		prunerGenerator.pruningData.relationsFocus.each{rel |
			if(rel.isOption) then
				result := result + "\t\tself.consider" + rel.relation.name + " := consider" + rel.relation.name + "\n"
			end
		}

		result := result + "\tend\n\n"
	end


	operation generateAddedAttributes() : String is do
		result := ""

		prunerGenerator.pruningData.classesToNotify.each{eclass |
			result := result + "\treference " + eclass.getAddedAttributeName() + " : Bag<" + eclass.name + ">\n\n"
		}
		prunerGenerator.pruningData.relationsToNotify.each{rel |
			result := result + "\treference added" + rel.relation.name + " : Bag<Class" + rel.relation.name + ">\n\n" 
		}
	end


	operation generateRequiredAttributes() : String is do
		result := ""

		prunerGenerator.pruningData.requiredClasses.each{eclass |
			result := result + "\treference " + eclass.getRequiredAttributeName() + " : " + eclass.name + "[0..*]\n\n"
		}
	end
}
