/*
 * Creation : November 25, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell Team
 * Authors  : Arnaud Blouin
 */
@mainClass "org::kermeta::kompren::slicing::Test"
@mainOperation "main"

package org::kermeta::kompren::slicing;

require kermeta
require "./SlicerGenerator.kmt"

using kermeta::standard
using kermeta::persistence
using kermeta::io
using ecore


class Test {
	operation main() : Void is do
		// generateKevoree
		generateInvertedClassModel
		// generateClassSlicer
	end


	operation generateKevoree() : Void is do
		var modelURI	: String init "platform:/resource/org.kermeta.kompren.slicing/examples/kevoree/kevoree.ecore"
		var slicerModel : Slicer init getSlicerModel("platform:/resource/org.kermeta.kompren.slicing/examples/kevoree/kevoree.slicing")
		var pkg 		: EPackage init getEcoreModel(modelURI).one()
		var slicer 		: SlicerGenerator init SlicerGenerator.new.initialise(slicerModel, pkg, modelURI)

		slicer.generateSlicer()
		slicer.saveCode("../examples/kevoree/output/")
	end

	operation generateInvertedClassModel() : Void is do
		var modelURI	: String init "platform:/resource/org.kermeta.kompren.slicing/examples/class/ClassModel.ecore"
		var slicerModel	: Slicer init getSlicerModel("platform:/resource/org.kermeta.kompren.slicing/examples/classInverted/classInverted.slicing")
		var pkg 		: EPackage init getEcoreModel(modelURI).one()
		var slicer 		: SlicerGenerator init SlicerGenerator.new.initialise(slicerModel, pkg, modelURI)

		slicer.generateSlicer()
		slicer.saveCode("../examples/classInverted/output/")
	end

	operation generateClassSlicer() : Void is do
		var modelURI	: String init "platform:/resource/org.kermeta.kompren.slicing/examples/class/ClassModel.ecore"
		var slicerModel	: Slicer init getSlicerModel("platform:/resource/org.kermeta.kompren.slicing/examples/class/class.slicing")
		var pkg 		: EPackage init getEcoreModel(modelURI).one()
		var slicer 		: SlicerGenerator init SlicerGenerator.new.initialise(slicerModel, pkg, modelURI)

		slicer.generateSlicer()
		slicer.saveCode("../examples/class/output/")
	end
	
	operation getEcoreModel(uriEcoreModel : String) : Bag<EPackage> is do
		var uriMM : String init "http://www.eclipse.org/emf/2002/Ecore"
   		var repository : EMFRepository init EMFRepository.new
   		repository.registerEcoreFile(uriMM)          
   		var resource : Resource init repository.createResource(uriEcoreModel, uriMM)
       	resource.load()
		
		result := Bag<EPackage>.new
		
		resource.contents.each{obj |
			if(EPackage.isInstance(obj)) then
				result.add(obj.asType(EPackage))        
			end
		}
	end

	
	
	operation getSlicerModel(uriSlicerModel : String) : Slicer is do
		var uriSlicerMM : String init "platform:/resource/org.kermeta.kompren.slicing/metamodel/slicing.ecore"
   		var repository : EMFRepository init EMFRepository.new
   		repository.registerEcoreFile(uriSlicerMM)          
   		var resource : Resource init repository.createResource(uriSlicerModel, uriSlicerMM)
       	resource.load()

		from var it : Iterator<Object> init resource.instances.iterator
		until it.isOff
		loop
			var next : Object init it.next
			if(Slicer.isInstance(next)) then                 
				result ?= next
			end
		end
	end
}
