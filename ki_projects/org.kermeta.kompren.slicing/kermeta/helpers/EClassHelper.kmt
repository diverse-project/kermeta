/*
 * Creation : November 22, 2010
 * Licence  : EPL
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package ecore;


require kermeta
require "./EPackageHelper.kmt"

using kermeta::standard


aspect class EClass {
	operation canBeRootClass(allClasses : Bag<EClass>) : Boolean is do
		result := (not ~abstract).andThen{b | eStructuralFeatures.exists{st | st.isInstanceOf(EReference).andThen{b2| st.asType(EReference).containment}}}.andThen{b|
				not allClasses.exists{clazz | (self!=clazz).andThen{b2| clazz.hasStructFeatureWithType(self) }}}
	end
	
	operation hasStructFeatureWithType(clazz : EClass) : Boolean is do
		result := eStructuralFeatures.exists{st | st.isInstanceOf(EReference).andThen{b3 | st.asType(EReference).containment.andThen{b2 |
		 (st.eType==clazz).orElse{b | st.eType.isInstanceOf(EClass).andThen{b2 | st.eType.asType(EClass).isSuperTypeOf(clazz) }}}}}
	end

	/**
	 * @param clazz The class to test.
	 * @return True: If the calling class is a super type of the given class.
	*/
	operation isSuperTypeOf(clazz : EClass) : Boolean is do
		result := not clazz.isVoid
		var qualifiedName : String init getQualifiedName

		if(result) then
			result := clazz.eSuperTypes.exists{cl | cl.getQualifiedName.equals(qualifiedName)}

			if(not result) then
				result := clazz.eSuperTypes.exists{st | self.isSuperTypeOf(st) }
			end
		end
	end
	
	
	operation getQualifiedName() : String is do
		result := name
		
		if((not container.isVoid).andThen{b | container.isInstanceOf(EPackage)}) then
			result := container.asType(EPackage).getQualifiedName("::") + "::" + name 
		end
	end
}
