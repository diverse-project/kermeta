package ex::classModel;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/class/ClassModel.ecore"
require "InheritanceSlicerAspect.kmt"

using kermeta::standard
using kermeta::utils
class InheritanceSlicer {
	reference requiredClazzs : Clazz[0..*]

	reference addedClazzs : Bag<Clazz>

	reference addedsuperClasses : Bag<ClasssuperClasses>

	operation initialise(requiredClazzs : bag Clazz[0..*]) : InheritanceSlicer is do
		result := self
		self.addedClazzs := Bag<Clazz>.new
		self.addedsuperClasses := Bag<ClasssuperClasses>.new
		self.requiredClazzs.addAll(requiredClazzs)
	end

	operation launch() : Void is do
		onStart()
		self.requiredClazzs.each{theClazz | theClazz.visitToAddClasses(self) }
		self.requiredClazzs.each{theClazz | theClazz.visitToAddRelations(self) }
		self.addedClazzs.each{theClazz | onClazzAdded(theClazz) }
		self.addedsuperClasses.each{thesuperClasses | self.onClazzsuperClassesAdded(thesuperClasses.src, thesuperClasses.tar) }
		onEnd()
	end

	operation onClazzAdded(clazz : Clazz) : Void is do
stdio.writeln("Clazz: " + clazz.name)
	end
	operation onClazzsuperClassesAdded(srcClass : Clazz, tgtClass : Clazz) : Void is do
stdio.writeln("Inheritance: " + srcClass.name + " " + tgtClass.name)
	end
	operation onEnd() : Void is do
stdio.writeln("Slicing ended")
	end
	operation onStart() : Void is do
stdio.writeln("Slicing starting")
	end

}
class ClasssuperClasses {
	reference src : Clazz
	reference tar : Clazz
	operation initialise(src : Clazz, tar : Clazz) : ClasssuperClasses is do
		result := self
		self.src := src
		self.tar := tar
	end
}
