package ecore;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/strictEcore/Ecore.ecore"
require "StrictEcore.kmt"
using kermeta::standard
using kermeta::utils
class SlicerVisitor {
	attribute clone : Object

	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute sliced : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.sliced := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end

	operation createFrom() : Object is abstract
}

aspect class EClass {
	method createFrom() : Object is do
		var theEClass : EClass init self.getMetaClass().new.asType(EClass)
		theEClass.name := self.name
		result := theEClass
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.eSuperTypes.each{theEClass | theEClass.visitToAddClasses(theStrictEcore)}
			self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visitToAddClasses(theStrictEcore)}
			self.eOperations.each{theEOperation | theEOperation.visitToAddClasses(theStrictEcore)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.eSuperTypes.each{theEClass | theEClass.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEClass.sliced) then
					clone.asType(EClass).eSuperTypes.add(theEClass.clone.asType(EClass))
				end
			}
			self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEStructuralFeature.sliced) then
					clone.asType(EClass).eStructuralFeatures.add(theEStructuralFeature.clone.asType(EStructuralFeature))
				end
			}
			self.eOperations.each{theEOperation | theEOperation.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEOperation.sliced) then
					clone.asType(EClass).eOperations.add(theEOperation.clone.asType(EOperation))
				end
			}
			self.visitedPass := false
		end
	end
}

aspect class ETypedElement {
	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			if(not self.eType.isVoid) then self.eType.visitToAddClasses(theStrictEcore) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.eType.isVoid) then self.eType.visitToAddRelations(theStrictEcore)
			if(self.eType.sliced) then
				self.clone.asType(ETypedElement).eType := self.eType.clone.asType(EClassifier)
			end
 end
			self.visitedPass := false
		end
	end
}

aspect class EOperation {
	method createFrom() : Object is do
		var theEOperation : EOperation init self.getMetaClass().new.asType(EOperation)
		theEOperation.name := self.name
		result := theEOperation
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.eParameters.each{theEParameter | theEParameter.visitToAddClasses(theStrictEcore)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.eParameters.each{theEParameter | theEParameter.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEParameter.sliced) then
					clone.asType(EOperation).eParameters.add(theEParameter.clone.asType(EParameter))
				end
			}
			self.visitedPass := false
		end
	end
}

aspect class EEnum {
	method createFrom() : Object is do
		var theEEnum : EEnum init self.getMetaClass().new.asType(EEnum)
		theEEnum.name := self.name
		result := theEEnum
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.eLiterals.each{theEEnumLiteral | theEEnumLiteral.visitToAddClasses(theStrictEcore)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.eLiterals.each{theEEnumLiteral | theEEnumLiteral.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEEnumLiteral.sliced) then
					clone.asType(EEnum).eLiterals.add(theEEnumLiteral.clone.asType(EEnumLiteral))
				end
			}
			self.visitedPass := false
		end
	end
}

aspect class ENamedElement inherits SlicerVisitor {
	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				theStrictEcore.addToRoot(self.clone)
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

