package ecore;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/strictEcore/Ecore.ecore"
require "StrictEcore.kmt"
using kermeta::standard
using kermeta::utils
class SlicerVisitor {
	reference clone : Object

	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute sliced : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.sliced := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end

	operation createFrom() : Object is abstract
}

aspect class EClass {
	method createFrom() : Object is do
		var theEClass : EClass init self.getMetaClass().new.asType(EClass)
		theEClass.name := self.name
		result := theEClass
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.eSuperTypes.each{theEClass | theEClass.visitToAddClasses(theStrictEcore)}
			self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visitToAddClasses(theStrictEcore)}
			self.eOperations.each{theEOperation | theEOperation.visitToAddClasses(theStrictEcore)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.eSuperTypes.each{theEClass | theEClass.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEClass.sliced) then
					clone.asType(EClass).eSuperTypes.add(theEClass.clone.asType(EClass))
					theStrictEcore.addToRoot(theEClass.clone)
				end
			}
			self.eStructuralFeatures.each{theEStructuralFeature | theEStructuralFeature.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEStructuralFeature.sliced) then
					clone.asType(EClass).eStructuralFeatures.add(theEStructuralFeature.clone.asType(EStructuralFeature))
					theStrictEcore.addToRoot(theEStructuralFeature.clone)
				end
			}
			self.eOperations.each{theEOperation | theEOperation.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEOperation.sliced) then
					clone.asType(EClass).eOperations.add(theEOperation.clone.asType(EOperation))
					theStrictEcore.addToRoot(theEOperation.clone)
				end
			}
			self.visitedPass := false
		end
	end
}

aspect class ETypedElement {
	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			if(not self.eType.isVoid) then self.eType.visitToAddClasses(theStrictEcore) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			if(not self.eType.isVoid) then self.eType.visitToAddRelations(theStrictEcore)
			if(self.eType.sliced) then
				self.clone.asType(ETypedElement).eType := self.eType.clone.asType(EClassifier)
				theStrictEcore.addToRoot(self.eType.clone)
			end
 end
			self.visitedPass := false
		end
	end
}

aspect class EOperation {
	method createFrom() : Object is do
		var theEOperation : EOperation init self.getMetaClass().new.asType(EOperation)
		theEOperation.name := self.name
		result := theEOperation
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.eParameters.each{theEParameter | theEParameter.visitToAddClasses(theStrictEcore)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.eParameters.each{theEParameter | theEParameter.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEParameter.sliced) then
					clone.asType(EOperation).eParameters.add(theEParameter.clone.asType(EParameter))
					theStrictEcore.addToRoot(theEParameter.clone)
				end
			}
			self.visitedPass := false
		end
	end
}

aspect class EParameter {
	method createFrom() : Object is do
		var theEParameter : EParameter init self.getMetaClass().new.asType(EParameter)
		theEParameter.name := self.name
		result := theEParameter
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class EEnum {
	method createFrom() : Object is do
		var theEEnum : EEnum init self.getMetaClass().new.asType(EEnum)
		theEEnum.name := self.name
		result := theEEnum
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.eLiterals.each{theEEnumLiteral | theEEnumLiteral.visitToAddClasses(theStrictEcore)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.eLiterals.each{theEEnumLiteral | theEEnumLiteral.visitToAddRelations(theStrictEcore)
				if(not clone.isVoid and theEEnumLiteral.sliced) then
					clone.asType(EEnum).eLiterals.add(theEEnumLiteral.clone.asType(EEnumLiteral))
					theStrictEcore.addToRoot(theEEnumLiteral.clone)
				end
			}
			self.visitedPass := false
		end
	end
}

aspect class EEnumLiteral {
	method createFrom() : Object is do
		var theEEnumLiteral : EEnumLiteral init self.getMetaClass().new.asType(EEnumLiteral)
		theEEnumLiteral.name := self.name
		result := theEEnumLiteral
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class ENamedElement inherits SlicerVisitor {
	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class EFactory inherits SlicerVisitor {
	method createFrom() : Object is do
		var theEFactory : EFactory init self.getMetaClass().new.asType(EFactory)
		result := theEFactory
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.ePackage.visitToAddClasses(theStrictEcore)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ePackage.visitToAddRelations(theStrictEcore)
			if(self.ePackage.sliced) then
				self.clone.asType(EFactory).ePackage := self.ePackage.clone.asType(EPackage)
				theStrictEcore.addToRoot(self.ePackage.clone)
			end

			self.visitedPass := false
		end
	end
}

aspect class ETypeParameter {
	method createFrom() : Object is do
		var theETypeParameter : ETypeParameter init self.getMetaClass().new.asType(ETypeParameter)
		theETypeParameter.name := self.name
		result := theETypeParameter
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class EReference {
	method createFrom() : Object is do
		var theEReference : EReference init self.getMetaClass().new.asType(EReference)
		theEReference.name := self.name
		result := theEReference
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class EPackage {
	method createFrom() : Object is do
		var theEPackage : EPackage init self.getMetaClass().new.asType(EPackage)
		theEPackage.name := self.name
		result := theEPackage
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.eFactoryInstance.visitToAddClasses(theStrictEcore)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.eFactoryInstance.visitToAddRelations(theStrictEcore)
			if(self.eFactoryInstance.sliced) then
				self.clone.asType(EPackage).eFactoryInstance := self.eFactoryInstance.clone.asType(EFactory)
				theStrictEcore.addToRoot(self.eFactoryInstance.clone)
			end

			self.visitedPass := false
		end
	end
}

aspect class EDataType {
	method createFrom() : Object is do
		var theEDataType : EDataType init self.getMetaClass().new.asType(EDataType)
		theEDataType.name := self.name
		result := theEDataType
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class EAttribute {
	method createFrom() : Object is do
		var theEAttribute : EAttribute init self.getMetaClass().new.asType(EAttribute)
		theEAttribute.name := self.name
		result := theEAttribute
	end

	method visitToAddClasses(theStrictEcore : StrictEcore) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStrictEcore)
			if(not self.sliced) then
				self.clone := self.createFrom()
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStrictEcore : StrictEcore) : Void is do
		if(not self.visitedPass) then
			super(theStrictEcore)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

