package ex::stateMachine;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/stateMachine/StateMachine.ecore"
require "StateMachineSlicerAspect.kmt"

using kermeta::standard
using kermeta::utils
using kermeta::persistence
class StateMachineSlicer {
	reference requiredStates : State[0..*]

	reference sliceRoots : Bag<Object>

	operation initialise(requiredStates : bag State[0..*]) : StateMachineSlicer is do
		result := self
		self.sliceRoots := Bag<Object>.new
		self.requiredStates.addAll(requiredStates)
	end

	operation launch() : Void is do
		self.requiredStates.each{theState | theState.visitToAddClasses(self) }
		self.requiredStates.each{theState | theState.visitToAddRelations(self) }
		onEnd()
	end
	
	
	operation addToRoot(obj : Object) is do
		var cont : Object init obj.container

		if(cont.isVoid.orElse{b | (not cont.isInstanceOf(SlicerVisitor)).orElse{b2 | not cont.asType(SlicerVisitor).sliced}}) then
			sliceRoots.add(obj)
		end
	end
	
	
	operation onEnd() is do
		var repository : EMFRepository init EMFRepository.new
		var resource : EMFResource 
 		resource ?= repository.createResource("./slice.xmi", "platform:/resource/org.kermeta.kompren.slicing/examples/stateMachine/StateMachine.ecore")
 		
 		resource.addAll(sliceRoots)
 		resource.save()
	end
}

