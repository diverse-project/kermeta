package ex::stateMachine;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/stateMachine/StateMachine.ecore"
require "StateMachineSlicerAspect.kmt"

using kermeta::standard
using kermeta::utils
class StateMachineSlicer {
	reference requiredStates : State[0..*]

	reference addedInputStates : Bag<InputState>

	reference addedOutputStates : Bag<OutputState>

	reference addedTransitions : Bag<Transition>

	operation initialise(requiredStates : bag State[0..*]) : StateMachineSlicer is do
		result := self
		self.addedInputStates := Bag<InputState>.new
		self.addedOutputStates := Bag<OutputState>.new
		self.addedTransitions := Bag<Transition>.new
		self.requiredStates.addAll(requiredStates)
	end

	operation launch() : Void is do
		self.requiredStates.each{theState | theState.visitToAddClasses(self) }
		self.requiredStates.each{theState | theState.visitToAddRelations(self) }
		self.addedInputStates.each{theInputState | onInputStateAdded(theInputState) }
		self.addedOutputStates.each{theOutputState | onOutputStateAdded(theOutputState) }
		self.addedTransitions.each{theTransition | onTransitionAdded(theTransition) }
	end


	operation onInputStateAdded(state : InputState) is do
		stdio.writeln(state.name)
	end

	operation onOutputStateAdded(state : OutputState) is do
		stdio.writeln(state.name)
	end
	
	
	operation onTransitionAdded(transition : Transition) is do
		stdio.writeln("transition: " + transition.source.name + " " + transition.target.name)
	end
}
