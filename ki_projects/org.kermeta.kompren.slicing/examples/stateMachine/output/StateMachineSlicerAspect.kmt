package ex::stateMachine;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/stateMachine/StateMachine.ecore"
require "StateMachineSlicer.kmt"
using kermeta::standard
using kermeta::utils
class SlicerVisitor {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute addedToPruner : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.addedToPruner := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end
}

aspect class OutputState {
	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.outgoingTransitions.each{theTransition | theTransition.visitToAddClasses(theStateMachineSlicer)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) : Void is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.outgoingTransitions.each{theTransition | theTransition.visitToAddRelations(theStateMachineSlicer)}
			self.visitedPass := false
		end
	end
}

aspect class Transition inherits SlicerVisitor {
	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			if(not self.addedToPruner) then
				theStateMachineSlicer.addedTransitions.add(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			self.source.visitToAddClasses(theStateMachineSlicer)
			self.target.visitToAddClasses(theStateMachineSlicer)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) : Void is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.source.visitToAddRelations(theStateMachineSlicer)
			self.target.visitToAddRelations(theStateMachineSlicer)
			self.visitedPass := false
		end
	end
}

aspect class State inherits SlicerVisitor {
	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			if(not self.addedToPruner) then
				theStateMachineSlicer.addedStates.add(self)
				self.addedToPruner := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) : Void is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

