package ex::stateMachine;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/stateMachine/StateMachine.ecore"
require "StateMachineSlicer.kmt"
using kermeta::standard
using kermeta::utils
class SlicerVisitor {
	attribute clone : Object

	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute sliced : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.sliced := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end
}

aspect class OutputState {
	operation createFrom() : OutputState is abstract

	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			
			if(not self.sliced) then
				self.clone := self.createFrom()
				theStateMachineSlicer.addToRoot(self.clone)
				self.sliced := true
			end
			self.visitedPass := true
			self.outgoingTransitions.each{theTransition | theTransition.visitToAddClasses(theStateMachineSlicer)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) : Void is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.outgoingTransitions.each{theTransition | 
				theTransition.visitToAddRelations(theStateMachineSlicer)
				if(not clone.isVoid and theTransition.sliced) then
					clone.asType(OutputState).outgoingTransitions.add(theTransition.clone.asType(Transition))
				end
			}
			self.visitedPass := false
		end
	end
}

aspect class Transition inherits SlicerVisitor {
	operation createFrom() : Transition is do
		result := Transition.new
	end	
	
	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			if(not self.sliced) then
				self.clone := self.createFrom()
				theStateMachineSlicer.addToRoot(self.clone)
				self.sliced := true
			end
			self.visitedPass := true
			self.source.visitToAddClasses(theStateMachineSlicer)
			self.target.visitToAddClasses(theStateMachineSlicer)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) : Void is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.source.visitToAddRelations(theStateMachineSlicer)
			if(self.source.sliced) then
				self.clone.asType(Transition).source := self.source.clone.asType(OutputState)
			end
			self.target.visitToAddRelations(theStateMachineSlicer)
			if(self.target.sliced) then
				self.clone.asType(Transition).target := self.target.clone.asType(InputState)
			end
			self.visitedPass := false
		end
	end
}

aspect class State inherits SlicerVisitor {
	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) : Void is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

aspect class InputState {
	operation createFrom() : InputState is abstract

	method visitToAddClasses(theStateMachineSlicer : StateMachineSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			if(not self.sliced) then
				self.clone := self.createFrom()
				theStateMachineSlicer.addToRoot(self.clone)
				self.sliced := true
			end
			self.visitedPass := true
			self.ingoingTransitions.each{theTransition | theTransition.visitToAddClasses(theStateMachineSlicer)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theStateMachineSlicer : StateMachineSlicer) : Void is do
		if(not self.visitedPass) then
			super(theStateMachineSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ingoingTransitions.each{theTransition | 
				theTransition.visitToAddRelations(theStateMachineSlicer)
				if(not clone.isVoid and theTransition.sliced) then
					clone.asType(InputState).ingoingTransitions.add(theTransition.clone.asType(Transition))
				end
			}
			self.visitedPass := false
		end
	end
}


aspect class InitState {
	method createFrom() : OutputState from OutputState is do
		result := InitState.new
		result.name := self.name
	end	
}


aspect class StandardState {
	method createFrom() : InputState from InputState is do
		result := StandardState.new
		result.name := self.name
	end
}

aspect class TerminalState {
	method createFrom() : InputState from InputState is do
		result := TerminalState.new
		result.name := self.name
	end
}

