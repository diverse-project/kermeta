package featureDiagram;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/featureModel/featureDiagram.ecore"
require "FeatureDiagramSlicerAspect.kmt"
require "./DisplayCNFExpAspect.kmt"

using kermeta::standard
using kermeta::utils
class FeatureDiagramSlicer {
	reference model : FeatureDiagram

	reference requiredFeatures : Feature[0..*]

	reference addedFeatures : Bag<Feature>

	reference addedFeatureDiagrams : Bag<FeatureDiagram>

	reference addedCNFExps : Bag<CNFExp>

	reference addedAnds : Bag<And>

	reference addedXors : Bag<Xor>

	reference addedOrs : Bag<Or>

	operation initialise(requiredFeatures : bag Feature[0..*], model : FeatureDiagram) : FeatureDiagramSlicer is do
		result := self
		self.model := model
		self.addedFeatures := Bag<Feature>.new
		self.addedFeatureDiagrams := Bag<FeatureDiagram>.new
		self.addedCNFExps := Bag<CNFExp>.new
		self.addedAnds := Bag<And>.new
		self.addedXors := Bag<Xor>.new
		self.addedOrs := Bag<Or>.new
		self.requiredFeatures.addAll(requiredFeatures)
	end

	operation launch() : Void is do
		self.model.feedOpposites()
		self.requiredFeatures.each{theFeature | theFeature.visitToAddClasses(self) }
		self.requiredFeatures.each{theFeature | theFeature.visitToAddRelations(self) }
		self.addedFeatures.each{theFeature | onFeatureAdded(theFeature) }
		self.addedCNFExps.each{theCNFExp | onCNFExpAdded(theCNFExp) }
		self.addedAnds.each{theAnd | onAndAdded(theAnd) }
		self.addedXors.each{theXor | onXorAdded(theXor) }
		self.addedOrs.each{theOr | onOrAdded(theOr) }
	end

	operation onFeatureAdded(feature : Feature) : Void is do
		if feature.owningOperator.isVoid then
			stdio.writeln("Feature sliced: " + feature.name)
		end
	end
	operation onCNFExpAdded(cnfExp : CNFExp) : Void is do
		if not cnfExp.container.isInstanceOf(CNFExp) then
			var cnfExpFormula : String init cnfExp.getExpFormula()
			if cnfExps.isVoid then cnfExps := Bag<String>.new end
			
			if not cnfExps.contains(cnfExpFormula) then
				stdio.writeln(cnfExpFormula)
				cnfExps.add(cnfExpFormula)
			end
		end
	end
	operation onAndAdded(andOp : And) : Void is do
//	stdio.writeln(andOp.features.size.toString)
	end
	operation onXorAdded(xorOp : Xor) : Void is do
//	stdio.writeln(xorOp.features.size.toString)
	end
	operation onOrAdded(orOp : Or) : Void is do
//	stdio.writeln(orOp.features.size.toString)
	end

	attribute cnfExps : Bag<String>
}
