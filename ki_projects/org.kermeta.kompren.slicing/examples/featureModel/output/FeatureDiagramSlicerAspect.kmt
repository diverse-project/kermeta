package featureDiagram;
require kermeta
require "platform:/resource/org.kermeta.kompren.slicing/examples/featureModel/featureDiagram.ecore"
require "FeatureDiagramSlicer.kmt"
using kermeta::standard
using kermeta::utils
class SlicerVisitor {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute sliced : Boolean

	operation initialiseAttributes() : Void is do
		self.visitedPass := false
		self.sliced := false
		self.visitedForRelations := false
	end

	operation visitToAddClasses(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		self.visitedPass := true
	end

	operation visitToAddRelations(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
	end

	operation checkInitialisation() : Void is do
		if(self.visitedPass.isVoid) then initialiseAttributes() end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end
}

aspect class NotCNF inherits Feedable {
	method visitToAddClasses(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.exp.visitToAddClasses(theFeatureDiagramSlicer)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.exp.visitToAddRelations(theFeatureDiagramSlicer)
			self.visitedPass := false
		end
	end
	method feedOpposites() from Feedable is do
		super()
		self.exp.feedOpposites()
	end
}

aspect class CNFExp inherits SlicerVisitor, Feedable {
	method visitToAddClasses(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			if(not self.sliced) then
				theFeatureDiagramSlicer.addedCNFExps.add(self)
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class OrCNF inherits Feedable {
	method visitToAddClasses(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.left.visitToAddClasses(theFeatureDiagramSlicer)
			self.right.visitToAddClasses(theFeatureDiagramSlicer)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.left.visitToAddRelations(theFeatureDiagramSlicer)
			self.right.visitToAddRelations(theFeatureDiagramSlicer)
			self.visitedPass := false
		end
	end
	method feedOpposites() from Feedable is do
		super()
		self.left.feedOpposites()
		self.right.feedOpposites()
	end
}

aspect class AndCNF inherits Feedable {
	method visitToAddClasses(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.left.visitToAddClasses(theFeatureDiagramSlicer)
			self.right.visitToAddClasses(theFeatureDiagramSlicer)
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.left.visitToAddRelations(theFeatureDiagramSlicer)
			self.right.visitToAddRelations(theFeatureDiagramSlicer)
			self.visitedPass := false
		end
	end
	method feedOpposites() from Feedable is do
		super()
		self.left.feedOpposites()
		self.right.feedOpposites()
	end
}

aspect class Feature inherits SlicerVisitor, Feedable {
	reference featureOpposite : AtomicCNF[0..*]

	method visitToAddClasses(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			if(not self.sliced) then
				theFeatureDiagramSlicer.addedFeatures.add(self)
				self.sliced := true
			end
			self.visitedPass := true
			self.operator.each{theOperator | theOperator.visitToAddClasses(theFeatureDiagramSlicer)}
			self.featureOpposite.each{theAtomicCNF | theAtomicCNF.visitToAddClasses(theFeatureDiagramSlicer)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.operator.each{theOperator | theOperator.visitToAddRelations(theFeatureDiagramSlicer)}
			self.featureOpposite.each{theAtomicCNF | theAtomicCNF.visitToAddRelations(theFeatureDiagramSlicer)}
			self.visitedPass := false
		end
	end
	method feedOpposites() from Feedable is do
		super()
		self.operator.each{theoperator | theoperator.feedOpposites() }
		self.models.each{themodels | themodels.feedOpposites() }
		self.attributes.each{theattributes | theattributes.feedOpposites() }
	end
}

aspect class Operator inherits SlicerVisitor, Feedable {
	method visitToAddClasses(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.features.each{theFeature | theFeature.visitToAddClasses(theFeatureDiagramSlicer)}
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.features.each{theFeature | theFeature.visitToAddRelations(theFeatureDiagramSlicer)}
			self.visitedPass := false
		end
	end
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class FeatureDiagram inherits SlicerVisitor, Feedable {
	method visitToAddClasses(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			if(not self.sliced) then
				theFeatureDiagramSlicer.addedFeatureDiagrams.add(self)
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theFeatureDiagramSlicer : FeatureDiagramSlicer) : Void is do
		if(not self.visitedPass) then
			super(theFeatureDiagramSlicer)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
	method feedOpposites() from Feedable is do
		super()
		self.features.each{thefeatures | thefeatures.feedOpposites() }
		self.cnfExps.each{thecnfExps | thecnfExps.feedOpposites() }
	end
}

aspect class PrimitiveFeature inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class Opt inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class And inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class Or inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class Xor inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class Card inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class Model inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class FeatureElement inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class Attribute inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
	end
}

aspect class AtomicCNF inherits Feedable {
	method feedOpposites() from Feedable is do
		super()
		self.~feature.featureOpposite.add(self)
	end
}

abstract class Feedable {
	operation feedOpposites() is do end
}
