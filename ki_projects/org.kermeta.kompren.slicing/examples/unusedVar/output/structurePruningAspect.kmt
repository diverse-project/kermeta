package org::kermeta::language::structure;
require kermeta
require "UnusedVarDetectorAspect.kmt"
using kermeta::standard
using org::kermeta::language::behavior

aspect class Operation inherits SlicerVisitor {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.ownedParameter.each{theParameter | theParameter.visitToAddClasses(theUnusedVarDetector)}
			if(not self.body.isVoid) then self.body.visitToAddClasses(theUnusedVarDetector) end
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) : Void is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.ownedParameter.each{theParameter | theParameter.visitToAddRelations(theUnusedVarDetector)}
			if(not self.body.isVoid) then self.body.visitToAddRelations(theUnusedVarDetector) end
			self.visitedPass := false
		end
	end
}

aspect class Parameter inherits SlicerVisitor {
	method visitToAddClasses(theUnusedVarDetector : UnusedVarDetector) : Void is do
		checkInitialisation()
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			if(not self.sliced) then
				theUnusedVarDetector.addedParameters.add(self)
				self.sliced := true
			end
			self.visitedPass := true
			self.visitedPass := false
		end
	end
	method visitToAddRelations(theUnusedVarDetector : UnusedVarDetector) : Void is do
		if(not self.visitedPass) then
			super(theUnusedVarDetector)
			self.visitedPass := true
			self.visitedForRelations := true
			self.visitedPass := false
		end
	end
}

