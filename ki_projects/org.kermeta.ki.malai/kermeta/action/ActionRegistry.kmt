/*
 * Creation : February 4, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */

package kermeta::ki::malai::action;


require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/action/Action.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/action/ActionHandler.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/undo/UndoCollector.kmt"

using kermeta::standard
using kermeta::ki::malai::undo


class ActionRegistry {
	/** The saved actions. */
	attribute actions : Action[0..*]

	/** The actions handlers. */
	reference handlers : ActionHandler[0..*]
	
	reference undoCollector : UndoCollector
	
	
	
	operation initialise(undoCollector : UndoCollector) : Void is do
		self.undoCollector := undoCollector
	end
	
	
	
	
	/** Adds an action to the register.
		'action': The action to add. */
	operation addAction(action : Action) : Void is do
		cancelActions(action) 
		actions.add(action)
		notifyHandlersOnAdd(action)
		if(action.isInstanceOf(Undoable)) then
			undoCollector.add(action.asType(Undoable))
		end
	end
	
	
	
	operation removeAction(action : Action) : Void is do
		actions.remove(action)
		notifyHandlersOnCancel(action)
		//TODO must remove action that depends of 'action' too.
	end
	
	
	
	
	/** Removes actions from the register using a given action.
		'action': The action that may cancels others. */
	operation cancelActions(action : Action) : Void is do
		var clazz : kermeta::language::structure::Class init action.getMetaClass
		
		from var i : Integer init 0
		until i>=actions.size or actions.isEmpty
		loop
			if(actions.at(i).cancelledBy(clazz)) then
				notifyHandlersOnCancel(actions.removeAt(i))
			else
				i := i+1
			end
		end
	end
	
	
	
	operation abortAction(action : Action) : Void is do
		action.abort()
		actions.remove(action)
		notifyHandlersOnAbort(action)
	end
	
	
	/** 'clazz': The reference class.
		Returns the first action of the same kind of the given action. */
	operation getAction(action :  kermeta::language::structure::Class) : Action is do
		result := actions.detect{ action2 | action2.isKindOf(action) }
	end


	
	/** Notifies handlers that a event on actions occurred.
		'action': The concerned action. */
	operation notifyHandlersOnAdd(action : Action) : Void is do
		handlers.each { handler | handler.onActionAdded(action) }
	end
	
	
	
	/** Notifies handlers that a event on actions occurred.
		'action': The concerned action. */
	operation notifyHandlersOnCancel(action : Action) : Void is do
		handlers.each { handler | handler.onActionCancelled(action) }
	end
	
	
	
	/** Notifies handlers that a event on actions occurred.
		'action': The concerned action. */
	operation notifyHandlersOnAbort(action : Action) : Void is do
		handlers.each { handler | handler.onActionAborted(action) }
	end
}
