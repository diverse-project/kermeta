/*
 * Creation : February 4, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */

package kermeta::ki::malai::undo;


require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/undo/Undoable.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/undo/UndoHandler.kmt"

using kermeta::standard
using kermeta::utils


class UndoCollector
{
	/** Contains the undoable actions. */
	attribute undoStack : Stack<Undoable>
	
	/** Contains the redoable actions. */
	attribute redoStack : Stack<Undoable>
	
	/** The maximal number of undo. */
	attribute max : Integer
	
	/** The handlers that handles the collector. */
	reference handlers : UndoHandler[0..*]
	
	operation initialise() : Void is do
		max := 50
		undoStack := Stack<Undoable>.new
		redoStack := Stack<Undoable>.new
	end

	
	/** Notifies the handlers that something has changed. */
	operation notifyHandlers() : Void is do
		handlers.each{ handler | handler.updateUndo() }
	end
	

	/** Removes all the actions of the collector. */
	operation clear() : Void is do
		undoStack.clear()
		redoStack.clear()
		notifyHandlers()
	end
	
	
	/** Adds an undoable element to the collector.
		'elt': The undoable element to add. */
	operation add(elt : Undoable) : Void is do
		if(elt!=void and max>0) then
			if(undoStack.size()==max) then
				undoStack.removeAt(0)
			end
			
			undoStack.push(elt)
			redoStack.clear() /* The redoable actions must be removed. */
			notifyHandlers()
		end
	end
	
	
	/** Undoes the last action. */
	operation undo() : Void is do
		if not undoStack.isEmpty then
			var action : Undoable init undoStack.pop()
			action.undo()
			redoStack.push(action)
			notifyHandlers()
		end
	end
	
	
	
	/** Redoes the last action. */
	operation redo() : Void is do
		if not redoStack.isEmpty then
			var action : Undoable init redoStack.pop()
			action.redo()
			undoStack.push(action)
			notifyHandlers()
		end
	end
	
	
	/** The last undoable action name. */
	operation getLastUndoMessage() : String is do
		if not undoStack.isEmpty then 
			result := undoStack.peek().getUndoName()
		else 
			result := "" 
		end
	end
	
	
	/** The last redoable action name. */
	operation getLastRedoMessage() : String is do
		if not redoStack.isEmpty then 
			result := redoStack.peek().getUndoName() 
		else 
			result := "" 
		end
	end
		

	/** The last undoable action. */
	operation getLastUndo() : Undoable is do
		if not undoStack.isEmpty then 
			result := undoStack.peek() 
		else 
			result := void 
		end
	end
	
	
	/** The last redoable action. */
	operation getLastRedo() : Undoable is do
		if not redoStack.isEmpty then 
			result := redoStack.peek() 
		else 
			result := void 
		end
	end
}
