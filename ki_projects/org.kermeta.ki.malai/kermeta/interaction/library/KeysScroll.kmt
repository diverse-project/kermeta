/*
 * Creation : April 12, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta::ki::malai::interaction;

require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/Interaction.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/library/Scrolling.kmt"

using kermeta::standard
using kermeta::ki::malai::picking


class KeysScroll inherits Scrolling {
	attribute keys : Integer[0..*]
	
	method reinit() : Void is do
		super
		keys.clear
	end
	
	
	
	method initStateMachine() : Void is do
		var keyPressed : IntermediaryState init IntermediaryState.new
		var keyReleased : AbortingState init AbortingState.new
		var scrolled : TerminalState init TerminalState.new

		keyPressed.initialise("keyPressed")
		keyReleased.initialise("keyReleased")
		scrolled.initialise("scrolled")

		addState(keyPressed)
		addState(keyReleased)
		addState(scrolled)

		var sst : ScrollingWheelTransition init ScrollingWheelTransition.new
		sst.scrolling := self
		sst.initialise(initState, scrolled)

		var kpt : KSKeyPressureTransition init KSKeyPressureTransition.new
		kpt.keysScroll := self
		kpt.initialise(initState, keyPressed)
		
		kpt := KSKeyPressureTransition.new
		kpt.keysScroll := self
		kpt.initialise(keyPressed, keyPressed)

		var krtAbort : EmptyKeyReleaseTransition init EmptyKeyReleaseTransition.new
		krtAbort.keysScroll := self
		krtAbort.initialise(keyPressed, keyReleased)

		var krt : KSKeyReleaseTransition init KSKeyReleaseTransition.new
		krt.keysScroll := self
		krt.initialise(keyPressed, keyPressed)
		
		sst := ScrollingWheelTransition.new
		sst.scrolling := self
		sst.initialise(keyPressed, scrolled)
	end
}



class KSKeyPressureTransition inherits KeyPressureTransition
{
	reference keysScroll : KeysScroll
	
	method action() : Void is do
		keysScroll.keys.add(key)
	end
}



class EmptyKeyReleaseTransition inherits KeyReleaseTransition
{
	reference keysScroll : KeysScroll
	
	method isGuardRespected() : Boolean is do
		result := super and keysScroll.keys.size==1
	end
}


class KSKeyReleaseTransition inherits KeyReleaseTransition {
	reference keysScroll : KeysScroll

	method action() : Void is do
		keysScroll.keys.remove(key)
	end

	method isGuardRespected() : Boolean is do
		result := super and keysScroll.keys.size>1
	end
}
