/*
 * Creation : February 22, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : Arnaud Blouin
 */

package kermeta::ki::malai::interaction;


require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/State.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/Event.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/MouseEvent.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/KeyEvent.kmt"

using kermeta::standard
using kermeta::ki::malai::interaction::event


abstract class Transition
{
	reference inputState : State
	
	reference outputState : State
	
	
	operation initialise(inputState : State, outputState : State) : Void is do
		if(inputState.isVoid or outputState.isVoid) then raise kermeta::exceptions::Exception.new end
		
		if(inputState.isKindOf(AbortingState) or inputState.isKindOf(TerminalState)) then
			var ex : kermeta::exceptions::Exception init kermeta::exceptions::Exception.new
			ex.message := "Input state cannot be an ending nor an aborting state."
			raise ex
		end
		
		if(outputState.isKindOf(InitState)) then
			var ex : kermeta::exceptions::Exception init kermeta::exceptions::Exception.new
			ex.message := "Onput state cannot be an init state."
			raise ex
		end
		
		self.inputState  := inputState
		self.outputState := outputState
		
		self.inputState.transitions.add(self)
	end
	
	
	operation action() : Void is do end

	
	operation isGuardRespected() : Boolean is do
		result := true
	end
	
	
	operation update(e : Event) : Void is abstract


	method toString() : String is do
		result := super + "[" + inputState.name + ">>" + outputState.name + "]"
	end
}







class ButtonPressedTransition inherits Transition {

	reference buttonName : String
	
}



class KeyPressureTransition inherits KeyboardTransition {
}




class KeyReleaseTransition inherits KeyboardTransition {
}



class MoveTransition inherits PointingDeviceTransition {
	attribute pressed : Boolean
	
	method initialise(inputState : State, outputState : State) : Void is do
		super(inputState, outputState)
		
		pressed := false
	end
}




abstract class PointingDeviceTransition inherits Transition {
	attribute px : Real
	
	attribute py : Real
	
	attribute button : Integer
	
	
	
	method initialise(inputState : State, outputState : State) : Void is do
		super(inputState, outputState)

		px := void
		py := void
		button := void
	end

	

	method update(e : Event) : Void is do//TODO remove this method since it is never called
		if(e.isKindOf(MouseEvent)) then
			var me : MouseEvent init e.asType(MouseEvent)
			px 		:= me.getX.toReal
			py 		:= me.getY.toReal
			stdio.writeln("udpate PointingDeviceTransition:" + px.toString + " " + py.toString)
			stdio.writeln("udpate PointingDeviceTransition:" + me.getX.toString + " " + me.getY.toString)
			button  := me.getButton
		end
	end
	
}



class PressureTransition inherits PointingDeviceTransition {
}




class ReleaseTransition inherits PointingDeviceTransition {
}




class TextChangedTransition inherits Transition {
	attribute textCompName : String
	
	attribute text : String
	
	method update(e : Event) : Void is do//TODO
		/*if(e.isKindOf(ActionEvent)) then
			text = textComp.getText();
		end*/
	end
}





abstract class KeyboardTransition inherits Transition {
	attribute key : Integer
	
	method initialise(inputState : State, outputState : State) : Void is do
		super(inputState, outputState)
		
		key := -1
	end
	

	method update(e : Event) : Void is do
		if(e.isKindOf(KeyEvent)) then
			key := e.asType(KeyEvent).getKeyCode()
		end
	end
}
