/*
 * Creation : February 22, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : Arnaud Blouin
 */

package kermeta::ki::malai::interaction;


require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/State.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/MouseEvent.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/KeyEvent.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/widget/Widget.kmt"

using kermeta::standard
using kermeta::ki::malai::interaction::event
using kermeta::ki::malai::widget


abstract class Transition
{
	reference inputState : State
	
	reference outputState : State
	
	
	operation initialise(inputState : State, outputState : State) : Void is do
		if(inputState.isVoid or outputState.isVoid) then raise kermeta::exceptions::Exception.new end
		
		if(inputState.isInstanceOf(AbortingState) or inputState.isInstanceOf(TerminalState)) then
			var ex : kermeta::exceptions::Exception init kermeta::exceptions::Exception.new
			ex.message := "Input state cannot be an ending nor an aborting state."
			raise ex
		end
		
		if(outputState.isInstanceOf(InitState)) then
			var ex : kermeta::exceptions::Exception init kermeta::exceptions::Exception.new
			ex.message := "Onput state cannot be an init state."
			raise ex
		end
		
		self.inputState  := inputState
		self.outputState := outputState
		
		self.inputState.transitions.add(self)
	end
	
	
	operation action() : Void is do end

	
	operation isGuardRespected() : Boolean is do
		result := true
	end
	
	
	method toString() : String is do
		result := super + "[" + inputState.name + ">>" + outputState.name + "]"
	end
}




class SpinnerTransition inherits Transition {
	reference spinner : Spinner
}




class CheckBoxTransition inherits Transition {
	reference checkbox : CheckBox
}




class ButtonPressedTransition inherits Transition {
	reference button : Button
}



class KeyPressureTransition inherits KeyboardTransition {
}




class KeyReleaseTransition inherits KeyboardTransition {
}



class MoveTransition inherits PointingDeviceTransition {
	attribute pressed : Boolean
	
	method initialise(inputState : State, outputState : State) : Void is do
		super(inputState, outputState)
		
		pressed := false
	end
}



class WheelTransition inherits PointingDeviceTransition {
	attribute isUp : Boolean
	
	attribute increment : Integer
	
	
	method initialise(inputState : State, outputState : State) : Void is do
		super(inputState, outputState)

		isUp 		:= void
		increment 	:= void
	end
}



/**
 * This abstract transition defines a model for transitions based on pointing device events.
*/
abstract class PointingDeviceTransition inherits Transition {
	/** The X-coordinate of the pointing device. */
	attribute px : Real
	
	/** The Y-coordinate of the pointing device. */
	attribute py : Real
	
	/** The button used. */
	attribute button : Integer
	
	/** The object picked at the position (x, y). */
	reference source : Object
	
	
	
	method initialise(inputState : State, outputState : State) : Void is do
		super(inputState, outputState)

		px     := void
		py     := void
		button := void
		source := void
	end
}



class PressureTransition inherits PointingDeviceTransition {
}




class ReleaseTransition inherits PointingDeviceTransition {
}




class TextChangedTransition inherits Transition {
	attribute textCompName : String
	
	attribute text : String
}





abstract class KeyboardTransition inherits Transition {
	attribute key : Integer
	
	method initialise(inputState : State, outputState : State) : Void is do
		super(inputState, outputState)
		
		key := -1
	end
}
