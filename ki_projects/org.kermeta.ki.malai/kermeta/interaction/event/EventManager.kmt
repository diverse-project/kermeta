/*
 * Creation : February 24, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta::ki::malai::interaction::event;


require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/dispatcher/Dispatcher.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/EventHandler.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/Event.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/MouseEvent.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/KeyEvent.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/ActionEvent.kmt"

using kermeta::ki::malai::dispatcher
using kermeta::ki::malai::interaction
using kermeta::ki::malai::widget
using kermeta::standard



/**
	This class is Dispatchable: an EventManager can be managed by a disptacher.
	The goal of this class is to map a Java EventManagerWrapper, that gathers
	Java event, to Kermeta.
*/
class EventManager inherits Dispatchable
{
	/** The objects that must be aware about new produced events. */
	reference handlers : EventHandler[0..*]
	

	/** Initialises the EventManager. */
	operation initialise(dispatcher : AbstractDispatcher) : Void is do
		self.dispatcher := dispatcher
		// The EventManager is mapped to an corresponding Java EventManagerWrapper and therefore to a Java DisptacherWrapper.
		result ?= extern org::kermeta::ki::malai::interaction::eventWrapper::EventManagerWrapper.initialise(self, dispatcher)
	end
	

	method isWaiting() : Boolean is do
		result ?= extern org::kermeta::ki::malai::interaction::eventWrapper::EventManagerWrapper.isWaiting(self)
	end
	
	
	
	
	method run() : Void is do
		var event : Event
		// We get the event to process.
		event ?= extern org::kermeta::ki::malai::interaction::eventWrapper::EventManagerWrapper.getTopEvent(self)
		
		if(event.isVoid) then
			stdio.writeln("event is void")
		else
			var existStr : String
			// We get the string corresponding to an EXIT event.
			existStr ?= extern org::kermeta::ki::malai::interaction::eventWrapper::EventWrapper.getExitEventString(self)
			
			if(event.getName.equals(existStr)) then
				// We launch an exception to stop the program.
				var ex : kermeta::exceptions::Exception init kermeta::exceptions::Exception.new
				ex.message := existStr
				raise ex
			else
				process(event)// The event is processed.
			end
		end
	end
	
	
	/**
	* Processes the event produces by the Java UI and transfered to Kermeta.
	*/
	operation process(event : Event) : Void is do
		if(event.getName.equals("MOUSE_PRESSED")) then
			var me : MouseEvent init event.getInfo.asType(MouseEvent)
			handlers.each{h |
				if(h.matches(event.getInfo.getSourceObject)) then 
					h.onPressure(me.getButton, me.getX.toReal, me.getY.toReal, 0) 
				end
			}

		else 
		if(event.getName.equals("MOUSE_RELEASED")) then
			var me : MouseEvent init event.getInfo.asType(MouseEvent)
			handlers.each{h | h.onRelease(me.getButton, me.getX.toReal, me.getY.toReal, 0) }
		else
		if(event.getName.equals("MOUSE_MOVED")) then
			var me : MouseEvent init event.getInfo.asType(MouseEvent)
			handlers.each{h | h.onMove(me.getButton, me.getX.toReal, me.getY.toReal, false, 0) }
		else
		if(event.getName.equals("MOUSE_DRAGGED")) then
			var me : MouseEvent init event.getInfo.asType(MouseEvent)
			handlers.each{h | h.onMove(me.getButton, me.getX.toReal, me.getY.toReal, true, 0) }
		else
		if(event.getName.equals("KEY_PRESSED")) then
			var ke : KeyEvent init event.getInfo.asType(KeyEvent)
			handlers.each{h | h.onKeyPressure(ke.getKeyCode, 0) }
		else
		if(event.getName.equals("KEY_RELEASED")) then
			var ke : KeyEvent init event.getInfo.asType(KeyEvent)
			handlers.each{h | h.onKeyRelease(ke.getKeyCode, 0) }
		else
		if(event.getName.equals("ACTION_PERFORMED")) then
			var ae : ActionEvent init event.getInfo.asType(ActionEvent)
			var src : Object init ae.getSourceObject

			if(src.isInstanceOf(Button)) then handlers.each{h | h.onButtonPressed(src.asType(Button)) }
			//TODO else if(ae.isFromTextField) then /* TODO */ end
			end
		end end end end end end end end
}
