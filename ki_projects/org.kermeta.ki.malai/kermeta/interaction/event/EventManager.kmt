/*
 * Creation : February 24, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta::ki::malai::interaction::event;


require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/dispatcher/Dispatcher.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/EventHandler.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/Event.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/MouseEvent.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/KeyEvent.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/ActionEvent.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/MouseWheelEvent.kmt"

using kermeta::ki::malai::dispatcher
using kermeta::ki::malai::interaction
using kermeta::ki::malai::widget
using kermeta::standard



/**
	This class is Dispatchable: an EventManager can be managed by a disptacher.
	The goal of this class is to map a Java EventManagerWrapper, that gathers
	Java event, to Kermeta.
*/
class EventManager inherits Dispatchable
{
	/** The objects that must be aware about new produced events. */
	reference handlers : EventHandler[0..*]
	

	/** Initialises the EventManager. */
	operation initialise(dispatcher : AbstractDispatcher) : Void is do
		self.dispatcher := dispatcher
		// The EventManager is mapped to an corresponding Java EventManagerWrapper and therefore to a Java DisptacherWrapper.
		result ?= extern org::kermeta::ki::malai::interaction::eventWrapper::EventManagerWrapper.initialise(self, dispatcher)
	end
	

	method isWaiting() : Boolean is do
		result ?= extern org::kermeta::ki::malai::interaction::eventWrapper::EventManagerWrapper.isWaiting(self)
	end
	
	
	
	
	method run() : Void is do
		var event : Event
		// We get the event to process.
		event ?= extern org::kermeta::ki::malai::interaction::eventWrapper::EventManagerWrapper.getTopEvent(self)
		
		if(event.isVoid) then
			stdio.writeln("event is void")
		else
			var existStr : String
			// We get the string corresponding to an EXIT event.
			existStr ?= extern org::kermeta::ki::malai::interaction::eventWrapper::EventWrapper.getExitEventString(self)
			
			if(event.getName.equals(existStr)) then
				// We launch an exception to stop the program.
				var ex : kermeta::exceptions::Exception init kermeta::exceptions::Exception.new
				ex.message := existStr
				raise ex
			else
				process(event)// The event is processed.
			end
		end
	end
	
	
	/**
	* Processes the event produces by the Java UI and transfered to Kermeta.
	*/
	operation process(event : Event) : Void is do
		var name : String   init event.getName
		var info : AWTEvent init event.getInfo

		if(info.isInstanceOf(MouseEvent)) then
			var me 		: MouseEvent init info.asType(MouseEvent)
			var button 	: Integer 	 init me.getButton
			var x 		: Real 		 init me.getX.toReal
			var y 		: Real 		 init me.getY.toReal
			
			if(name.equals("MOUSE_MOVED")) then
			// FIXME: must sue the following line in compiled mode. The interpreter is too slow.
//				handlers.each{h | if(h.matches(object)) then h.onMove(button, x, y, false, 0) end }
				handlers.each{h | h.onMove(button, x, y, false, 0) }
			else
			if(name.equals("MOUSE_DRAGGED")) then
			// FIXME: must sue the following line in compiled mode. The interpreter is too slow.			
//				handlers.each{h | if(h.matches(object)) then h.onMove(button, x, y, true, 0) end }
				handlers.each{h | h.onMove(button, x, y, true, 0) }
			else
			if(name.equals("MOUSE_PRESSED")) then
				var object  : Object init info.getSourceObject
				handlers.each{h | if(h.matches(object)) then h.onPressure(button, x, y, 0) end }
			else
			if(name.equals("MOUSE_RELEASED")) then
				var object  : Object init info.getSourceObject
				handlers.each{h | if(h.matches(object)) then h.onRelease(button, x, y, 0) end }
			end 
			if(name.equals("MOUSE_WHEEL_MOVED")) then
				var object : Object init info.getSourceObject
				var mwe    : MouseWheelEvent init info.asType(MouseWheelEvent)
				var isUp   : Boolean init mwe.getWheelRotation<0
				var increment : Integer init mwe.getScrollAmount
				
				handlers.each{h | if(h.matches(object)) then h.onWheel(x, y, isUp, increment, 0) end }
			end end end end
		else
		if(info.isInstanceOf(KeyEvent)) then
			var keyCode : Integer init info.asType(KeyEvent).getKeyCode
			
			if(name.equals("KEY_PRESSED")) then
				var object  : Object init info.getSourceObject
				handlers.each{h | if(h.matches(object)) then h.onKeyPressure(keyCode, 0) end }
			else
			if(name.equals("KEY_RELEASED")) then
				var object  : Object init info.getSourceObject
				handlers.each{h | if(h.matches(object)) then h.onKeyRelease(keyCode, 0) end }
			end end
		else
		if(name.equals("ACTION_PERFORMED")) then
			var src : Object init info.asType(ActionEvent).getSourceObject
			
			if(src.isInstanceOf(Button)) then
				handlers.each{h | if(h.matches(src)) then h.onButtonPressed(src.asType(Button)) end }
			//TODO else if(ae.isFromTextField) then /* TODO */ end
			end
		end end end
	end
}
