/*
 * Creation : February 22, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : Arnaud Blouin
 */


package kermeta::ki::malai::interaction;


require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/StateMachine.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/InteractionHandler.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/picking/Picker.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/EventManager.kmt"

using kermeta::ki::malai::picking
using kermeta::ki::malai::interaction::event
using kermeta::standard


abstract class Interaction inherits StateMachine
{
	reference handlers : InteractionHandler[0..*]
	
	reference picker : Picker
	
	reference pickable : Pickable
	
	
	method initialise(eventManager : EventManager) : Void is do
		super(eventManager)
		eventManager.handlers.add(self)
	end

	
	method matches(obj : Object) : Boolean is do
		result := if(obj.isVoid) then false
				else if(picker.isVoid) 
					then pickable==obj else picker==obj or picker.containsObject(obj)
					end 
				end
	end
	

	/**
	 * Notifies handlers that the interaction starts.
	 */
	operation notifyHandlersOnStart() : Void is do
		do
			handlers.each{handler | handler.interactionStarts(self)}
		rescue(ex : kermeta::exceptions::Exception)
			notifyHandlersOnAborting()
			raise ex
		end
	end
	

	
	/**
	 * Notifies handlers that the interaction updates.
	 */
	operation notifyHandlersOnUpdate() : Void is do
		do
			handlers.each{handler | handler.interactionUpdates(self)}
		rescue(ex : kermeta::exceptions::Exception)
			notifyHandlersOnAborting()
			raise ex
		end
	end
	
	
	
	/**
	 * Notifies handlers that the interaction stops.
	 */
	operation notifyHandlersOnStop() : Void is do
		do
			handlers.each{handler | handler.interactionStops(self)}
		rescue(ex : kermeta::exceptions::Exception)
			notifyHandlersOnAborting()
			raise ex
		end
	end
	
	
	
	/**
	 * Notifies handlers that the interaction stops.
	 */
	operation notifyHandlersOnAborting() : Void is do
		handlers.each{handler | handler.interactionAborts(self)}
	end


	
	/**
	 * Gets the pickable object at the given position.
	 * @param px : the X-coordinate of the position.
	 * @param py : the Y-coordinate of the position.
	 * @return the found object or null.
	 */
	operation getPickableAt(px : Real, py : Real) : Pickable is do
		if(picker.isVoid) then
			result := if pickable.isVoid.orElse{v | pickable.contains(px, py)} then void else pickable end
		else
			result := picker.getPickableAt(px, py)
		end
	end
}
