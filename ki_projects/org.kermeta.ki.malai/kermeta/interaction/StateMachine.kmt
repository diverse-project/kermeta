/*
 * Creation : February 22, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta::ki::malai::interaction;


require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/State.kmt"

using kermeta::standard
using kermeta::ki::malai::widget


abstract class StateMachine inherits EventHandler
{
	attribute activated : Boolean

	attribute states : State[0..*]
	
	reference initState : InitState
	
	reference currentState : State
	
	
	operation initialise() : Void is do
		activated := true
		initState := InitState.new
		initState.initialise("init")
		addState(initState)
		reinit
		initStateMachine	
	end
	
	
	/**
	* Indicates if the state machine is running.
	*/
	operation isRunning() : Boolean is do
		result := activated and currentState!=initState
	end
	
	
	
	operation setIsActivated(activated : Boolean) : Void is do
		self.activated := activated
	end
	
	
	
	operation initStateMachine() : Void is abstract
	
	
	operation reinit() : Void is do
		currentState := initState
	end
	
	
	operation addState(state : State) : Void is do
		if(state!=void) then
			states.add(state)
			state.stateMachine := self
		end
	end

	
	
	operation executeTransition(t : Transition) : Void is do
		if(activated) then
    		do
    			t.action()
    			currentState.onOutgoing()
    			currentState := t.outputState
    			currentState.onIngoing()
    		rescue(ex : kermeta::exceptions::Exception) reinit end
    	end
	end

	
	
	method onTextChanged(textField : TextField) : Void is do
		if(activated) then
			var stop : Boolean init false
			
			currentState.transitions.exists{ t |
				if(t.isInstanceOf(TextChangedTransition)) then
					var tct : TextChangedTransition init t.asType(TextChangedTransition)
	
					tct.textField := textField
					
					if(t.isGuardRespected()) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end
	
	

	method onButtonPressed(button : Button) : Void is do
		if(activated) then
			var stop : Boolean init false
			var t : Transition
			
			currentState.transitions.exists{t |
				if(t.isInstanceOf(ButtonPressedTransition)) then
					t.asType(ButtonPressedTransition).button := button
					
					if(t.isGuardRespected) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end		
	end
	
	

	method onKeyPressure(key : Integer, idHID : Integer) : Void is do
		if(activated) then
			var stop : Boolean init false
			var t : Transition
			
			currentState.transitions.exists{t |
				if(t.isInstanceOf(KeyPressureTransition)) then
					t.asType(KeyPressureTransition).key := key
					
					if(t.isGuardRespected) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end



	method onKeyRelease(key : Integer, idHID : Integer) : Void is do
		if(activated) then
			var stop : Boolean init false
			var t : Transition
			
			currentState.transitions.exists{t |
				if(t.isInstanceOf(KeyReleaseTransition)) then
					t.asType(KeyReleaseTransition).key := key
					
					if(t.isGuardRespected) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end



	method onMove(button : Integer, px : Real, py : Real, pressed : Boolean, idHID : Integer, source : Object) : Void is do
		if(activated) then
			var stop : Boolean init false
			var t : Transition
			
			currentState.transitions.exists{t |
				if(t.isInstanceOf(MoveTransition)) then
					var mt : MoveTransition init t.asType(MoveTransition)
					
					mt.px      := px
					mt.py      := py
					mt.button  := button
					mt.pressed := pressed
					mt.source  := source
					
					if(t.isGuardRespected) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end
	
	


	method onPressure(button : Integer, px : Real, py : Real, idHID : Integer, source : Object) : Void is do
		if(activated) then
			var stop : Boolean init false
			var t : Transition

			currentState.transitions.exists{t |
				if(t.isInstanceOf(PressureTransition)) then
					var pt : PressureTransition init t.asType(PressureTransition)
					
					pt.px     := px
					pt.py     := py
					pt.button := button
					pt.source := source
					
					if(t.isGuardRespected) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end



	method onRelease(button : Integer, px : Real, py : Real, idHID : Integer, source : Object) : Void is do
		if(activated) then
			var stop : Boolean init false
			var t : Transition
			
			currentState.transitions.exists{t |
				if(t.isInstanceOf(ReleaseTransition)) then
					var rt : ReleaseTransition init t.asType(ReleaseTransition)
					
					rt.px     := px
					rt.py     := py
					rt.button := button
					rt.source := source
					
					if(t.isGuardRespected) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end
	
	
	
	method onSpinnerValueModified(spinner : Spinner) : Void is do
		if(activated) then
			var stop : Boolean init false
			var t : Transition

			currentState.transitions.exists{t |
				if(t.isInstanceOf(SpinnerTransition)) then
					var st : SpinnerTransition init t.asType(SpinnerTransition)
				
					st.spinner := spinner
					
					if(t.isGuardRespected) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end
	
	
	method onCheckBoxPressed(checkbox : CheckBox) : Void is do
		if(activated) then
			var stop : Boolean init false
			var t : Transition

			currentState.transitions.exists{t |
				if(t.isInstanceOf(CheckBoxTransition)) then
					var cbt : CheckBoxTransition init t.asType(CheckBoxTransition)
				
					cbt.checkbox := checkbox
					
					if(t.isGuardRespected) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end
	
	
	
	method onWheel(px : Real, py : Real, isUp : Boolean, increment : Integer, idHID : Integer, source : Object) : Void is do
		if(activated) then
			var stop : Boolean init false
			var t : Transition

			currentState.transitions.exists{t |
				if(t.isInstanceOf(WheelTransition)) then
					var wt : WheelTransition init t.asType(WheelTransition)
				
					wt.px        := px
					wt.py        := py
					wt.isUp      := isUp
					wt.increment := increment
					wt.source	 := source
					
					if(t.isGuardRespected) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end
}
