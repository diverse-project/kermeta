/*
 * Creation : February 22, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : Arnaud Blouin
 */

package kermeta::ki::malai::interaction;


require kermeta
require "State.kmt"
require "EventHandler.kmt"

using kermeta::standard



abstract class StateMachine inherits EventHandler
{
	attribute activated : Boolean

	attribute states : State[0..*]
	
	reference initState : InitState
	
	reference currentState : State
	
	
	operation initialise() : Void is do
		activated := true
		initState := InitState.new
		addState(initState)
		reinit
		initStateMachine	
	end
	
	
	
	operation setActivated(activated : Boolean) : Void is do
		self.activated := activated
	end
	
	
	
	operation initStateMachine() : Void is abstract
	
	
	operation reinit() : Void is do
		currentState := initState
	end
	
	
	operation addState(state : State) : Void is do
		if(state!=void) then
			states.add(state)
			state.stateMachine := self
		end
	end

	
	
	operation executeTransition(t : Transition) : Void is do
		if(activated) then
    		do
    			t.action()
    			currentState.onOutgoing()
    			currentState := t.outputState
    			currentState.onIngoing()
    		rescue(ex : kermeta::exceptions::Exception) reinit end
    	end
	end

	
	
	method onTextChanged(textCompName : String, TextValue : String) : Void is do
		if(activated) then
			var stop : Boolean init false
			
			currentState.transitions.exists{ t |
				if(t.isKindOf(TextChangedTransition)) then
					var tct : TextChangedTransition init t.asType(TextChangedTransition)
	
					tct.textCompName := textCompName
					tct.text := TextValue
					
					if(t.isGuardRespected()) then
						stop := true
						executeTransition(t)
					end
				end
				
				stop
			}
		end
	end
	
	

/*	@Override
	public void onButtonPressed(AbstractButton button) {
		if(!activated) return ;
		
		boolean again = true;
		Transition t;
		
		for(int i=0, j=currentState.transitions.size(); i<j && again; i++) {
			t = currentState.transitions.elementAt(i);
			
			if(t instanceof ButtonPressedTransition) {
				ButtonPressedTransition bpt = (ButtonPressedTransition) t;
				
				bpt.setButton(button);
				
				if(t.isGuardRespected()) {
					again = false;
					executeTransition(t);
				}
			}
		}		
	}
	
	

	@Override
	public void onKeyPressure(int key, int idHID) {
		if(!activated) return ;
		
		boolean again = true;
		Transition t;
		
		for(int i=0, j=currentState.transitions.size(); i<j && again; i++) {
			t = currentState.transitions.elementAt(i);
			
			if(t instanceof KeyPressureTransition) {
				KeyPressureTransition kpt = (KeyPressureTransition) t;
				
				kpt.setKey(key);
				
				if(t.isGuardRespected()) {
					again = false;
					executeTransition(t);
				}
			}
		}		
	}

	@Override
	public void onKeyRelease(int key, int idHID) {
		if(!activated) return ;
		
		boolean again = true;
		Transition t;
		
		for(int i=0, j=currentState.transitions.size(); i<j && again; i++) {
			t = currentState.transitions.elementAt(i);
			
			if(t instanceof KeyReleaseTransition) {
				KeyReleaseTransition krt = (KeyReleaseTransition) t;
				
				krt.setKey(key);
				
				if(t.isGuardRespected()) {
					again = false;
					executeTransition(t);
				}
			}
		}		
	}

	@Override
	public void onMove(int button, Point point, boolean pressed, int idHID) {
		if(!activated) return ;
		
		boolean again = true;
		Transition t;
		
		for(int i=0, j=currentState.transitions.size(); i<j && again; i++) {
			t = currentState.transitions.elementAt(i);
			
			if(t instanceof MoveTransition) {
				MoveTransition mt = (MoveTransition)t;
				
				mt.setPoint(point);
				mt.setButton(button);
				mt.setPressed(pressed);
				
				if(t.isGuardRespected()) {
					again = false;
					executeTransition(t);
				}
			}
		}		
	}

	@Override
	public void onPressure(int button, Point point, int idHID) {
		if(!activated) return ;
		
		boolean again = true;
		Transition t;
		
		for(int i=0, j=currentState.transitions.size(); i<j && again; i++) {
			t = currentState.transitions.elementAt(i);
			
			if(t instanceof PressureTransition) {
				PressureTransition pt =  (PressureTransition)t;
				
				pt.setPoint(point);
				pt.setButton(button);
				
				if(t.isGuardRespected()) {
					again = false;
					executeTransition(t);
				}
			}
		}		
	}

	@Override
	public void onRelease(int button, Point point, int idHID) {
		if(!activated) return ;
		
		boolean again = true;
		Transition t;
		
		for(int i=0, j=currentState.transitions.size(); i<j && again; i++) {
			t = currentState.transitions.elementAt(i);
			
			if(t instanceof ReleaseTransition) {
				ReleaseTransition rt = (ReleaseTransition)t;
				
				rt.setPoint(point);
				rt.setButton(button);
				
				if(t.isGuardRespected()) {
					again = false;
					executeTransition(t);
				}
			}
		}		
	}*/
}