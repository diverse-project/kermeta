/*
 * Creation : February 22, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */


package kermeta::ki::malai::instrument;


require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/instrument/Link.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/action/ActionRegistry.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/EventManager.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/picking/Picker.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/picking/Pickable.kmt"

using kermeta::standard
using kermeta::ki::malai::action
using kermeta::ki::malai::picking
using kermeta::ki::malai::interaction::event


abstract class Instrument
{
	/**  Defines if the instrument is activated or not. */
	attribute activated : Boolean
	
	/**  The links of the instrument. */
	attribute links : Link[0..*]
	
	reference actionRegistry : ActionRegistry
	
	
	operation initialise(actionRegistry : ActionRegistry) : Void is do
		activated := false
		self.actionRegistry := actionRegistry
	end
	
	
	
	/**
	* Adds and configures the given link to the instrument.
	*/
	operation addLink(link : Link, picker : Picker, pickable : Pickable, eventManager : EventManager, execute : Boolean) : Void is do
		link.initialise(self, eventManager, false)
		link.execute := execute
		
		if(pickable.isVoid) 
		then link.setPickerToInteraction(picker)
		else link.setPickableToInteraction(pickable)
		end
		
		links.add(link)
	end
	
	
	
	/**
	 * Initialises the links of the instrument.
	 */
	operation initialiseLinks(eventManager : EventManager) is abstract
	
	
	/**
	 * Activates or desactivates the instrument.
	 */
	operation setActivated(activated : Boolean) : Void is do
		self.activated := activated
		
		links.each{link | link.setActivated(activated) }
		interimFeedback()
	end
	
	
	/**
	 * Reinitialises the interim feedback of the instrument.
	 * Must be overridden.
	 */
	operation interimFeedback() : Void is do
		// Nothing to do
	end
}
