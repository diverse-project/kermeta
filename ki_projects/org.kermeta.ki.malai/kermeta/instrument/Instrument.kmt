/*
 * Creation : February 22, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta::ki::malai::instrument;

require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/instrument/Link.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/action/ActionRegistry.kmt"

using kermeta::standard
using kermeta::ki::malai::action
using kermeta::ki::malai::interaction


/**
 * Defines an abstract model of an instrument.
 */
abstract class Instrument {
	/** Defines if the instrument is activated or not. */
	attribute activated : Boolean
	
	/** The links of the instrument. */
	attribute links : Link[0..*]
	
	reference actionRegistry : ActionRegistry
	
	
	
	operation initialise(actionRegistry : ActionRegistry) : Void is do
		activated := false
		self.actionRegistry := actionRegistry
	end
	
	
		
	/**
	 * This method is called when an action managed by a link of the instrument is aborted.
	 * This method can be used to provide users with information about the result of the action.
	 * @param link The link of the instrument that managed the aborted action.
	 * @param action The aborted action.
	 */
	operation onActionAborted(link : Link, action : Action) : Void is do
		// Should be overridden.
	end
	
	
	/**
	 * This method is called when an action managed by a link of the instrument is done.
	 * This method can be used to provide users with information about the result of the action.
	 * @param link The link of the instrument that managed the done action.
	 * @param action The done action.
	 */
	operation onActionDone(link : Link, action : Action) : Void is do
		// Should be overridden.
	end
	
	
	
	/**
	 * Binds the interaction of the links of the instrument to a Eventable object that produces
	 * events used by the interactions.
	 * @param eventable The eventable object that gathers event used by the interactions.
	 */
	operation addEventable(eventable : Eventable) : Void is do
		links.each{link | link.addEventable(eventable) }
	end
	
	
	
	/**
	* Adds and configures the given link to the instrument.
	*/
	operation addLink(link : Link, execute : Boolean) : Void is do
		link.initialise(self, false)
		link.execute := execute
		links.add(link)
	end
	
	
	
	/**
	 * Initialises the links of the instrument.
	 */
	operation initialiseLinks() is abstract
	
	
	/**
	 * Activates or desactivates the instrument.
	 */
	operation setActivated(activated : Boolean) : Void is do
		self.activated := activated
		
		links.each{link | link.setActivated(activated) }
		interimFeedback()
	end
	
	
	/**
	 * Reinitialises the interim feedback of the instrument.
	 * Must be overridden.
	 */
	operation interimFeedback() : Void is do
		// Nothing to do
	end
}
