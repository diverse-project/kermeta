/* $Id:$ 
 * Creation : February 24, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : Arnaud Blouin
 */

package kermeta::ki::malai::dispatcher;


require kermeta

using kermeta::standard


/**
	Defines an abstract dispatcher. A dispatcher says processes to run when possible.
*/
abstract class AbstractDispatcher
{
	/** Defines if the distpacher is dispatching */
	attribute running : Boolean
	
	
	/** Initialises the dispatcher. */
	operation initialise() : Void is do
		/* A Java DispatcherWrapper is associated, using setUserData, to the kermeta AbstractDispatcher. */
		extern org::kermeta::ki::malai::dispatcherWrapper::DispatcherWrapperExtern.initialise(self)
	end
	

	/** Waits for an event to said processes to run. */
	operation waitForEvent() : Void is do
		/* The associated Java DispatcherWrapper is put in wait until a process launch a notify on the DispatcherWrapper. */
		extern org::kermeta::ki::malai::dispatcherWrapper::DispatcherWrapperExtern.waitForEvent(self)
	end
	
	
	/** Launches the dispatcher. */
	operation run() : Void is abstract
}



/**
	Defines a process that a dispatcher can launch.
*/
abstract class Dispatchable
{
	/** The corresponding dispatcher. */
	reference dispatcher : AbstractDispatcher
	
	/** Defines if the process waits for the dispatcher to execute a job. */
	operation isWaiting() : Boolean is abstract
	
	/** launches the process to execute its job. */
	operation run() : Void is abstract
}


/**
	Defines a dispatcher that contains only a single process.
*/
class SingleDispatcher inherits AbstractDispatcher 
{
	/** The process managed by the dispatcher. */
	reference process : Dispatchable
	

	
	method run() : Void is do
		from running := true
		until not running
		loop
			do
				waitForEvent // Waiting for a process to execute.
				// At this step, a process notify the disptacher.
				from true
				until not process.isWaiting // The process is executed until it has no more job to do.
				loop process.run()
				end
			// If an exception occurs, the dispatcher stopped.
			rescue(ex : kermeta::exceptions::Exception) running := false end
		end

		extern org::kermeta::ki::malai::kermetaMap::Source2TargetMapExtern.cleanMap(self)
	end
}


/**
	Defines a dispatcher that manages several processes.
*/
class ListDispatcher inherits AbstractDispatcher
{
	/** The processes managed by the dispatcher. */
	reference processes : Dispatchable[0..*]
	
	
	method run() : Void is do
		from running := true
		until not running
		loop
			do
				waitForEvent // Waiting for a process to execute.
				// At this step, a process notify the disptacher.
				from var stop : Boolean init false
				until stop // All processes are executed until they have no more job to do.
				loop
					stop := true
					processes.each{c| 
						if(c.isWaiting) then 
							c.run()
							stop := false // If at least one process has a job to do, we continue the loop.
						end
					}
				end
			// If an exception occurs, the dispatcher stopped.
			rescue(ex : kermeta::exceptions::Exception) running := false end
		end
		
		extern org::kermeta::ki::malai::kermetaMap::Source2TargetMapExtern.cleanMap(self)
	end
}
