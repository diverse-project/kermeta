/*
 * Creation : April 9, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
package kermeta::ki::visual;

require kermeta
require "platform:/resource/org.kermeta.ki.malai/kermeta/action/Action.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/operation/ClassFlattener.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/ModelExtension.kmt"


using kermeta::ki::malai::action
using kermeta::ki::malai::undo
using kermeta::language::structure



class Flat inherits Action, Undoable
{
	attribute flatteningOperation : ClassFlattener
	
	reference metamodel : ModelingUnit
	
	reference classToFlat : ClassDefinition
	
	
	
	method doActionBody() : Void is do
		flatteningOperation 			:= ClassFlattener.new
		flatteningOperation.metamodel 	:= metamodel
		
		flatteningOperation.flat(classToFlat)
		
		extern org::kermeta::ki::visual::view::MetamodelView.update(metamodel)
		
		done()
	end
	
	
	method hadEffect() : Boolean is do
		result := isDone
	end
	
	
	method canDo() : Boolean is do
		result := not metamodel.isVoid and not classToFlat.isVoid
	end
	
	
	method cancelledBy(action : Class) : Boolean is do
		result := false
	end
	
	
	method isRegisterable() : Boolean is do
		result := true
	end
	
	
	method undo() : Void is do
		flatteningOperation.removedClasses.each{clazz |
			var obj : Object init clazz.container()
			
			if(obj.isInstanceOf(Package)) then
				obj.asType(Package).ownedTypeDefinition.add(clazz)
				extern org::kermeta::ki::visual::view::MetamodelView.onEntityAdded(metamodel, clazz, clazz.isAspect, -1)
			end
		}
	
		flatteningOperation.removedProperties.each{prop |
			prop.owningClass.ownedAttribute.add(prop.prop)
			prop.prop.owningClass := prop.owningClass  
			extern org::kermeta::ki::visual::view::MetamodelView.onLinkAdded(metamodel, prop.prop, prop.prop.isComposite, 
									prop.prop.owningClass, prop.owningClass, 
									prop.prop.name, prop.prop.getCardinalityString, if(not prop.prop.opposite.isVoid) then prop.prop.opposite.name end, 
									if(not prop.prop.opposite.isVoid) then prop.prop.opposite.getCardinalityString end  , -1)
		}
		
		flatteningOperation.addedOperations.each{op |
			classToFlat.moveOperationTo(op.op, op.owningClass)
		}
	
		flatteningOperation.addedProperties.each{prop |
			classToFlat.movePropertyTo(prop.prop, prop.owningClass, metamodel)
		}
		
		flatteningOperation.removedInheritances.each{in |
			if(in.sourceType.isVoid) then
				var clazz : Class init Class.new
				clazz.typeDefinition := in.target
				in.sourceType := clazz
			end
			
			in.source.superType.add(in.sourceType)
			extern org::kermeta::ki::visual::view::MetamodelView.onInheritanceAdded(metamodel, in.source, in.target, -1)
		}
		
		flatteningOperation.addedInheritances.each{in |
			in.source.superType.each{st |
				if(st.isInstanceOf(ParameterizedType)) then
					if(in.target==st.asType(ParameterizedType).typeDefinition) then
						in.source.superType.remove(st)
					end
				end
			}
			extern org::kermeta::ki::visual::view::MetamodelView.onInheritanceRemoved(metamodel, in.source, in.target)
		}
		
		extern org::kermeta::ki::visual::view::MetamodelView.update(metamodel)
	end
	
	
	
	
	method redo() : Void is do
		doActionBody
	end
}
