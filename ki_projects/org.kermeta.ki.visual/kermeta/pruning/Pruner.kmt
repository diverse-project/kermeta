/*
 * Creation : March 17, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin 
 */
package kermeta::ki::visual;


require "platform:/resource/org.kermeta.ki.visual/kermeta/ModelExtension.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/instrument/Instrument.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/instrument/library/PressLink.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/event/EventManager.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/pruning/Prune.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/interaction/library/Press.kmt"

using kermeta::language::structure
using kermeta::standard
using kermeta::ki::malai::interaction::event
using kermeta::ki::malai::instrument
using kermeta::ki::malai::interaction


class Pruner inherits Instrument
{
	reference metamodel : ModelingUnit
	
	method initialiseLinks(eventManager : EventManager) : Void is do
		addLink(Press2Prune.new, metamodel, void, eventManager, false)
		addLink(Press2Reinit.new, metamodel, void, eventManager, false)
	end
}




class Press2Reinit inherits PressLink
{
	method updateAction() : Void is do
	end
	
	
	
	method isConditionRespected() : Boolean is do
		result := interaction.asType(Press).target.isVoid
	end
	
	
	method createAction() : Void is do
		var as : ActionReinitView init ActionReinitView.new
		var pruner : Pruner init instrument.asType(Pruner)
		
		as.initialise(instrument.actionRegistry)
		as.metamodel := pruner.metamodel
		action       := as
	end
}






class Press2Prune inherits PressLink
{
	method updateAction() : Void is do
		if(not action.isVoid) then
			var press : Press init interaction.asType(Press)
			var as    : ActionPrune init action.asType(ActionPrune)
			
			if(press.target.isInstanceOf(ClassDefinition)) then
				as.selection := press.target.asType(ClassDefinition)
			end
		end
	end
	
	
	
	method isConditionRespected() : Boolean is do
		result := interaction.asType(Press).target.isInstanceOf(ClassDefinition)
	end
	
	
	method createAction() : Void is do
		var as : ActionPrune init ActionPrune.new
		var pruner : Pruner init instrument.asType(Pruner)
		
		as.initialise(instrument.actionRegistry)
		as.metamodel := pruner.metamodel
		action       := as
	end
}
