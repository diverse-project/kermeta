/* $Id:$ 
 * Creation : March 16, 2009
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            sagarsen
 */
package kermeta::language::structure;


require kermeta

using kermeta::standard
using kermeta::utils
using kermeta::persistence
using kermeta::io
using kermeta::language::structure
using kermeta::persistence


class StaticAnalyzerOfModelTransformation
{
	reference kermetaMetamodel: ModelingUnit[1..1]
	reference kermetaModelTransformation: ModelingUnit[1..1]
	reference requiredClasses: String[0..*]
	
	operation initialize(metamodelURI: String, modeltransfoURI:String):Void is do
		//Obtain input domain kermeta metamodel and model of model transformation
		if not metamodelURI.isVoid and not modeltransfoURI.isVoid then
			
			self.loadMetamodel(metamodelURI)
			self.loadModelTransformation(modeltransfoURI)
		end
		//Clear set of required classes in model transformation
		self.requiredClasses.clear
	end
	
	operation analyze(): Void is do
		//Analyze the input metamodel and check if a class is used as a 
		self.kermetaModelTransformation.packages.each
					{ p | 
					p.asType(TypeDefinitionContainer).ownedTypeDefinition.each
						{ 
							object | 
							
							if object.isInstanceOf(ClassDefinition) then
								object.asType(ClassDefinition).ownedOperation.each 
								{
								 op | 	if not op.ownedParameter.isVoid then 
								 			op.ownedParameter.each { tp |
								 			if tp.type.isInstanceOf(Class) and not tp.type.isVoid then
								 				stdio.writeln(tp.type.asType(Class).classDefinition.name)
								 			
								 			end
								 			}
								 		end
								 		if not op.body.isVoid then
								 			stdio.writeln(op.body.staticType.toString)
								 			
								 			/*
								 			if op.body.staticType.isInstanceOf(Class) then
								 				if self.isClassInMetamodel(op.body.staticType.asType(Class).classDefinition) then
								 					stdio.writeln(op.body.staticType.asType(Class).classDefinition.name)
								 				end
								 			end
								 			*/
								 		end
								 }
								 
							end
						}
					}
	
	end
	
	operation isClassInMetamodel(c: ClassDefinition):Boolean is do
		var isExisting:Boolean init false
  		self.kermetaMetamodel.packages.each
					{ p | 
					p.asType(TypeDefinitionContainer).ownedTypeDefinition.each
						{ 
							object | 
							if object.isInstanceOf(ClassDefinition) then
								if object.asType(ClassDefinition)==c then
									isExisting:=true
								end
								
							end
							
							
						}
					}
		result:=isExisting
	
	end
	
	operation isPropertyInMetamodel(pIN: Property):Boolean is do
		var isExisting:Boolean init false
		self.kermetaMetamodel.packages.each
					{ p | 
					p.asType(TypeDefinitionContainer).ownedTypeDefinition.each
						{ 
							object | 
							
							if object.isInstanceOf(ClassDefinition) then
								object.asType(ClassDefinition).ownedAttribute.each 
								{
								 prop | 	
								 			if pIN == prop then 
								 				isExisting:=true
								 			end
								 }
								 
							end
						}
					}
		result:=isExisting
	end
	
	
	/*Load Input Kermeta meta-model*/
	operation loadMetamodel(uri:String): Void is do
		var repository : EMFRepository init EMFRepository.new
		var resource : Resource init repository.createResource(uri,"http://www.kermeta.org/kermeta/1_2_0//kermeta")
		stdio.write("---Loading Input Kermeta meta-model..")
		resource.load
		self.kermetaMetamodel ?= resource.one
		stdio.writeln("OK")
	end
	
	/*Load Input Kermeta model transformation*/
	operation loadModelTransformation(uri:String): Void is do
		var repository : EMFRepository init EMFRepository.new
		var resource : Resource init repository.createResource(uri,"http://www.kermeta.org/kermeta/1_2_0//kermeta")
		stdio.write("---Loading Input Kermeta model transformation..")
		resource.load
		self.kermetaModelTransformation ?= resource.one
		stdio.writeln("OK")
	end
	
}