/*
 * Creation : March 11, 2010
 * Licence  : EPL 
 * Copyright: INRIA Rennes, Triskell
 * Authors  : Arnaud Blouin
 */
@mainClass "kermeta::ki::visual::Visual"
@mainOperation "main"

package kermeta::ki::visual;

require "platform:/resource/org.kermeta.ki.visual/kermeta/ModelExtension.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/instrument/Pruner.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/instrument/Hand.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/instrument/Hierarcher.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/VisitableKermeta.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/instrument/InstrumentsSelector.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/instrument/InstrumentsCustomiser.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/instrument/ElementsDisplayer.kmt"
require "platform:/resource/org.kermeta.ki.visual/kermeta/action/Prune.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/instrument/UndoRedoManager.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/instrument/Scroller.kmt"
require "platform:/resource/org.kermeta.ki.malai/kermeta/instrument/Zoomer.kmt"

using kermeta
using kermeta::ki::malai::undo
using kermeta::ki::malai::widget
using kermeta::ki::malai::action
using kermeta::standard
using kermeta::ki::malai::interaction::event
using kermeta::ki::malai::instrument
using kermeta::persistence
using kermeta::language::structure
using kermeta::language::behavior
using kermeta::ki::malai::dispatcher
using kermeta::ki::malai::picking


class Visual
{
	operation main() : Void is do
		var aui			   : MetamodelCanvas init MetamodelCanvas.new
		var eventManager   : EventManager    init EventManager.new
		var dispatcher     : ListDispatcher  init ListDispatcher.new
		
		dispatcher.initialise
		eventManager.initialise(dispatcher)
		dispatcher.processes.add(eventManager)
		
		aui.initialise(eventManager)
		extern org::kermeta::ki::visual::MetamodelVizuFrame.organise(aui)
		aui.setVisible(true)
		aui.refreshView
		
		dispatcher.run
	end
}




class MetamodelCanvas inherits ActionHandler, UndoHandler {
	attribute metamodel : ModelingUnit
	
	attribute eltDisplayer : ElementsDisplayer
	
	attribute pruner : Pruner
	
	attribute hand : Hand
	
	attribute hierarcher : Hierarcher
	
	attribute flattener : Flattener
	
	attribute undoManager : UndoRedoManager
	
	attribute undoCollector : UndoCollector
	
	attribute selector : InstrumentsSelector
	
	attribute customiser : InstrumentsCustomiser
	
	attribute zoomer : Zoomer
	
	attribute scroller : Scroller
	
	attribute actionRegistry : ActionRegistry
	
	attribute eventManager : EventManager
	
	attribute toolbar : Panel
	
	attribute viewPanel : Panel
	


	
	operation initialise(eventManager : EventManager) : Void is do
//		loadMetamodel("/examples/example2.km")
//		loadMetamodel("/examples/example1.km")
		loadMetamodel("/examples/Ecore.km")
//		loadMetamodel("/examples/UML.km")

		self.eventManager := eventManager
		undoCollector     := UndoCollector.new 
		actionRegistry    := ActionRegistry.new
		
		undoCollector.initialise
		undoCollector.handlers.add(self)
		actionRegistry.initialise(undoCollector)
		actionRegistry.handlers.add(self)

		eltDisplayer	 := ElementsDisplayer.new
		hand			 := Hand.new
		hierarcher		 := Hierarcher.new
		zoomer			 := Zoomer.new
		pruner      	 := Pruner.new
		flattener      	 := Flattener.new
		undoManager 	 := UndoRedoManager.new
		selector         := InstrumentsSelector.new
		customiser		 := InstrumentsCustomiser.new
		scroller         := Scroller.new
		
		eltDisplayer.initialise(actionRegistry)
		hand.initialise(actionRegistry)
		hierarcher.initialise(actionRegistry)
		zoomer.initialise(actionRegistry)
		flattener.initialise(actionRegistry)
		scroller.initialise(actionRegistry)
		customiser.pruner := pruner
		customiser.initialise(actionRegistry)
		pruner.initialise(actionRegistry)
		pruner.initialiseWidgets(eventManager)
		undoManager.initialise(actionRegistry)
		undoManager.initialiseWidgets(eventManager)
		
		pruner.metamodel := metamodel
		pruner.initialiseLinks(eventManager)
		flattener.metamodel := metamodel
		flattener.initialiseLinks(eventManager)
		hand.picker := metamodel
		hand.initialiseLinks(eventManager)
		hierarcher.metamodel := metamodel
		hierarcher.initialiseLinks(eventManager)
		
		eltDisplayer.metamodel := metamodel
		eltDisplayer.initialise(actionRegistry)
		eltDisplayer.initialiseWidgets(eventManager)
		selector.initialise(actionRegistry)
		selector.initialiseInstruments(pruner, flattener, hierarcher, hand, eventManager)

		initialiseUI
		extern org::kermeta::ki::visual::MetamodelVizuFrame.initialise(self, metamodel, toolbar, viewPanel, eventManager)

		var model2view : Metamodel2ViewVisitor init Metamodel2ViewVisitor.new
		model2view.modelingUnit := metamodel
		metamodel.accept(model2view)
		
		eltDisplayer.picker := toolbar
		eltDisplayer.initialiseLinks(eventManager)
		eltDisplayer.interimFeedback
		eltDisplayer.setActivated(true)
		zoomer.zoomable  := metamodel
		zoomer.metamodel := metamodel
		zoomer.initialiseLinks(eventManager)
		zoomer.setActivated(true)
		scroller.panel  := viewPanel
		scroller.picker := metamodel
		scroller.initialiseLinks(eventManager)
		scroller.setActivated(true)
		customiser.picker := toolbar
		customiser.initialiseLinks(eventManager)
		customiser.setActivated(true)	
		selector.picker := toolbar
		selector.initialiseLinks(eventManager)
		selector.setActivated(true)
		pruner.metamodel := metamodel
		undoManager.undoCollector := undoCollector		
		undoManager.picker := toolbar
		undoCollector.handlers.add(undoManager)
		undoManager.initialiseLinks(eventManager)
		undoManager.setActivated(true)
		
		//TOREMOVE
/*		var action : PruneHierarchy init PruneHierarchy.new
		action.metamodel := metamodel
		action.actionRegistry := actionRegistry
		action.selection.add(model2view.clazz)
		action.viewPolicy := PrunerViewPolicy.hide
		action.doIt()
		extern org::kermeta::ki::visual::MetamodelVizuFrame.organise(self)
		extern org::kermeta::ki::visual::view::MetamodelView.update(metamodel)*/
/* 		var action2 : Flat init Flat.new
		action2.metamodel := metamodel
		action2.actionRegistry := actionRegistry
		action2.classToFlat := model2view.clazz
		action2.doIt()
		*/
/*		var action : ActionPrune init ActionPrune.new
		action.metamodel := metamodel
		action.actionRegistry := actionRegistry
		action.selection.add(model2view.clazz)
		action.selection.add(model2view.op)
		action.selection.add(model2view.prop)
		action.selection.add(model2view.asso)
		action.selection.add(model2view.pkg)
		action.selection.add(model2view.param)
		action.viewPolicy := PrunerViewPolicy.hide
		action.doIt() 
		extern org::kermeta::ki::visual::MetamodelVizuFrame.organise(self)
		extern org::kermeta::ki::visual::view::MetamodelView.update(metamodel)*/
	end
	
	
	
	method updateUndo() : Void is do
		refreshView
	end
	
	
	
	operation initialiseUI() : Void is do
		toolbar    := Panel.new
		viewPanel  := Panel.new
		
		toolbar.initialise(eventManager)
		
		extern org::kermeta::ki::visual::MetamodelVizuFrame.initialiseToolbar(toolbar, undoManager.undoButton, 
					undoManager.redoButton, selector.prunerButton, selector.flattenerButton, selector.hierarcherButton,
					selector.handButton, pruner.grayedButton, pruner.hideButton, pruner.radiusSpinner, pruner.cardCheckBox,
					eltDisplayer.opButton, eltDisplayer.attrButton)
					
		toolbar.components.add(undoManager.undoButton)
		toolbar.components.add(undoManager.redoButton)
		toolbar.components.add(pruner.hideButton)
		toolbar.components.add(pruner.grayedButton)
		toolbar.components.add(pruner.radiusSpinner)
		toolbar.components.add(pruner.cardCheckBox)
		toolbar.components.add(selector.prunerButton)
		toolbar.components.add(selector.hierarcherButton)
		toolbar.components.add(selector.flattenerButton)
		toolbar.components.add(selector.handButton)
		toolbar.components.add(eltDisplayer.attrButton)
		toolbar.components.add(eltDisplayer.opButton)
	end



	operation loadMetamodel(muURI: String) : Void is do
		var rep : EMFRepository init EMFRepository.new
		var res : EMFResource
		res ?= rep.getResource(muURI)
		metamodel ?= res.one
	end

	
	
	operation setVisible(visible : Boolean) : Void is do
		extern org::kermeta::ki::visual::MetamodelVizuFrame.setVisible(self, visible)
	end
	
	
	operation refreshView() : Void is do
		extern org::kermeta::ki::visual::MetamodelVizuFrame.refreshView(self)
	end
	
	
	
	method onActionAdded(action : Action) : Void is do
		refreshView
	end
	
	method onActionAborted(action : Action) : Void is do
		refreshView
	end 
	
	method onActionCancelled(action : Action) : Void is do
		refreshView
	end 
	
	method onActionExecuted(action : Action) : Void is do
		refreshView
	end 
}



class Metamodel2ViewVisitor inherits KermetaVisitor {
/* 	reference clazz : ClassDefinition//TO REMOVE
	reference op    : ClassDefinition//TO REMOVE
	reference prop    : ClassDefinition//TO REMOVE
	reference asso    : ClassDefinition//TO REMOVE
	reference pkg    : ClassDefinition//TO REMOVE
	reference param    : ClassDefinition//TO REMOVE */
	
	attribute firstPass : Boolean
	
	reference modelingUnit : ModelingUnit

	reference classes : ClassDefinition[0..*]
	
	reference links : Property[0..*]
	

	method visitModelingUnit(mu: ModelingUnit): Void is do
		firstPass := true
		mu.packages.each{p | p.accept(self) }
		firstPass := false
		mu.packages.each{p | p.accept(self) }
	end
	
	
	method visitPackage(p: Package) : Void is do
		p.nestedPackage.each{p | p.accept(self)}
		p.ownedTypeDefinition.each{td | td.accept(self)}
	end
	
	
	method visitOperation(o: Operation) : Void is do
		var typeName : String init if(o.type.isInstanceOf(NamedElement)) then o.type.asType(NamedElement).name else "" end
		var paramTypeName 	: String

		extern org::kermeta::ki::visual::view::EntityView.onOperationAdded(o.owningClass, o, o.name, typeName, o.isAbstract)
		
		o.ownedParameter.each{param |
			paramTypeName := if(param.type.isInstanceOf(NamedElement)) then param.type.asType(NamedElement).name else void end
			
			if(not paramTypeName.isVoid) then
				extern org::kermeta::ki::visual::view::OperationView.onParameterAdded(o, param.name, paramTypeName)
			end
		}
	end


	
	method visitProperty(p: Property): Void is do
		if(p.type.isInstanceOf(Class)) then
			var cd : ClassDefinition init p.type.asType(Class).classDefinition

			if(cd.isKermetaPrimitiveType) then
				extern org::kermeta::ki::visual::view::EntityView.onAttributeAdded(p.owningClass, p, p.name, cd.name)
			else	
				if(classes.contains(cd)) then
					var oppositeName : String init ""
					var oppositeCompo : Boolean init false
					var oppositeCardString : String init ""
					
					if(not p.opposite.isVoid) then 
						oppositeName  := p.opposite.name 
						oppositeCompo := p.opposite.isComposite
						oppositeCardString := p.opposite.getCardinalityString
					end
					extern org::kermeta::ki::visual::view::MetamodelView.onRelationAdded(modelingUnit, p, p.isComposite or oppositeCompo, p.owningClass, cd, 
												p.name, p.getCardinalityString, oppositeName, oppositeCardString, -1, oppositeCompo)
				end
			end
			
			links.add(p)
		else
			if(p.type.isInstanceOf(PrimitiveType)) then
				var pt : PrimitiveType init p.type.asType(PrimitiveType)
				
				extern org::kermeta::ki::visual::view::EntityView.onAttributeAdded(p.owningClass, p, p.name, pt.name)
			else
				if(p.type.isInstanceOf(Enumeration)) then
					var enum : Enumeration init p.type.asType(Enumeration)
					extern org::kermeta::ki::visual::view::EntityView.onAttributeAdded(p.owningClass, p, p.name, enum.name)
				end
			end
		end
	end
	
	
	
	method visitClassDefinition(c: ClassDefinition) : Void is do
/*		if(c.name=="Class") then clazz := c end
		if(c.name=="Package") then pkg := c end
		if(c.name=="Operation") then op := c end
		if(c.name=="Property") then prop := c end
		if(c.name=="Association") then asso := c end
		if(c.name=="Parameter") then param := c end*/
	
		if(firstPass) then
			classes.add(c)
			extern org::kermeta::ki::visual::view::MetamodelView.onEntityAdded(modelingUnit, c, c.isAspect, -1, c.name)
			c.entity2ViewMapping
		else
			c.ownedAttribute.each{p | p.accept(self)}
			c.ownedOperation.each{o | o.accept(self)}
			
			c.superType.each{t |
				if(t.isInstanceOf(Class)) then
					var cd : ClassDefinition init t.asType(Class).classDefinition
					
					if(classes.contains(cd)) then
						extern org::kermeta::ki::visual::view::MetamodelView.onInheritanceAdded(modelingUnit, c, cd, -1)
					end
				end
			}
		end
	end
}
