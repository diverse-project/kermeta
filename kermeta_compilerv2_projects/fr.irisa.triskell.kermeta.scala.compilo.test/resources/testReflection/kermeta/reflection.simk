<?xml version="1.0" encoding="ASCII"?>
<simk:SIMKModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:simk="http://www.kermeta.org/simk">
  <sMContexts sMMethods="//@sMMethods.0" finalPackageQName="ecore.runner">
    <sMClass name="EClass__getEStructuralFeature__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.1" finalPackageQName="ecore.runner">
    <sMClass name="EClass__getFeatureCount__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.2" finalPackageQName="ecore.runner">
    <sMClass name="EClass__testSetReflection__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.3" finalPackageQName="ecore.runner">
    <sMClass name="EClass__testGetReflection__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.4" finalPackageQName="ecore.runner">
    <sMClass name="EClassifier__getClassifierID__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.5" finalPackageQName="ecore.runner">
    <sMClass name="EEnum__op_getEEnumLiteral__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.6" finalPackageQName="ecore.runner">
    <sMClass name="EEnum__getEEnumLiteralByLiteral__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.7" finalPackageQName="ecore.runner">
    <sMClass name="EModelElement__getEAnnotation__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.8" finalPackageQName="ecore.runner">
    <sMClass name="EObject__eContainer__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.9" finalPackageQName="ecore.runner">
    <sMClass name="EObject__eCrossReferences__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.10" finalPackageQName="ecore.runner">
    <sMClass name="EObject__eContainingFeature__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.11" finalPackageQName="ecore.runner">
    <sMClass name="EObject__eResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.12" finalPackageQName="ecore.runner">
    <sMClass name="EObject__eContainmentFeature__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.13" finalPackageQName="ecore.runner">
    <sMClass name="EObject__eContents__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.14" finalPackageQName="ecore.runner">
    <sMClass name="EObject__eIsProxy__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.15" finalPackageQName="ecore.runner">
    <sMClass name="EObject__eClass__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.16" finalPackageQName="ecore.runner">
    <sMClass name="EObject__eAllContents__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.17" finalPackageQName="ecore.runner">
    <sMClass name="EPackage__getEClassifier__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.18" finalPackageQName="ecore.runner">
    <sMClass name="EStructuralFeature__getFeatureID__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.19" finalPackageQName="ecore.runner">
    <sMClass name="EStructuralFeature__getContainerClass__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.20" finalPackageQName="ecore.runner">
    <sMClass name="Main__main__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.21" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__writeln__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.22" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__errorln__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.23" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__error__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.24" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__write__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.25" finalPackageQName="kermeta.io.runner">
    <sMClass name="StdIO__read__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.26" finalPackageQName="kermeta.io.runner">
    <sMClass name="FileIO__writeTextFile__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.27" finalPackageQName="kermeta.io.runner">
    <sMClass name="FileIO__readTextFile__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.28" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Stack__peek__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.29" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Stack__pop__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.30" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.31" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__keyIterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.32" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__keys__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.33" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__values__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.34" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__valueIterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.35" finalPackageQName="kermeta.utils.runner">
    <sMClass name="Hashtable__size__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.36" finalPackageQName="kermeta.utils.runner">
    <sMClass name="StringBuffer__append__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.37" finalPackageQName="kermeta.utils.runner">
    <sMClass name="StringBuffer__length__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.38" finalPackageQName="kermeta.utils.runner">
    <sMClass name="StringBuffer__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.39" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__iterator__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.40" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__size__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.41" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__empty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.42" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__isEmpty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.43" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.44" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.45" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.46" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.47" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.48" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__one__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.49" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__sum__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.50" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__any__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.51" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Collection__isNotEmpty__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.52" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.53" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__flatten__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.54" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.55" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.56" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Set__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.57" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__asSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.58" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__asSequence__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.59" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__flatten__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.60" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__asOrderedSet__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.61" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Bag__asBag__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.62" finalPackageQName="kermeta.standard.runner">
    <sMClass name="OrderedCollection__last__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.63" finalPackageQName="kermeta.standard.runner">
    <sMClass name="OrderedCollection__first__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.64" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Iterator__hasNext__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.65" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Iterator__next__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.66" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Iterator__isOff__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.67" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Void__isVoid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.68" finalPackageQName="kermeta.standard.runner">
    <sMClass name="Void__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.69 //@sMMethods.70 //@sMMethods.71 //@sMMethods.72 //@sMMethods.73 //@sMMethods.74 //@sMMethods.75 //@sMMethods.76 //@sMMethods.77 //@sMMethods.78 //@sMMethods.79 //@sMMethods.80 //@sMMethods.81 //@sMMethods.82 //@sMMethods.83 //@sMMethods.84 //@sMMethods.85 //@sMMethods.86 //@sMMethods.87 //@sMMethods.88 //@sMMethods.89 //@sMMethods.90 //@sMMethods.91 //@sMMethods.92 //@sMMethods.93 //@sMMethods.94" finalPackageQName="kermeta.standard.helper">
    <sMClass name="BooleanWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.95 //@sMMethods.96 //@sMMethods.97 //@sMMethods.98 //@sMMethods.99 //@sMMethods.100 //@sMMethods.101 //@sMMethods.102 //@sMMethods.103 //@sMMethods.104 //@sMMethods.105 //@sMMethods.106 //@sMMethods.107 //@sMMethods.108 //@sMMethods.109 //@sMMethods.110 //@sMMethods.111 //@sMMethods.112 //@sMMethods.113 //@sMMethods.114 //@sMMethods.115 //@sMMethods.116 //@sMMethods.117 //@sMMethods.118 //@sMMethods.119 //@sMMethods.120 //@sMMethods.121 //@sMMethods.122 //@sMMethods.123 //@sMMethods.124 //@sMMethods.125 //@sMMethods.126" finalPackageQName="kermeta.standard.helper">
    <sMClass name="IntegerWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.127 //@sMMethods.128 //@sMMethods.129 //@sMMethods.130 //@sMMethods.131 //@sMMethods.132 //@sMMethods.133 //@sMMethods.134 //@sMMethods.135 //@sMMethods.136 //@sMMethods.137 //@sMMethods.138 //@sMMethods.139 //@sMMethods.140 //@sMMethods.141 //@sMMethods.142 //@sMMethods.143 //@sMMethods.144 //@sMMethods.145 //@sMMethods.146 //@sMMethods.147 //@sMMethods.148 //@sMMethods.149 //@sMMethods.150 //@sMMethods.151 //@sMMethods.152 //@sMMethods.153 //@sMMethods.154 //@sMMethods.155 //@sMMethods.156 //@sMMethods.157" finalPackageQName="kermeta.standard.helper">
    <sMClass name="RealWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.158 //@sMMethods.159 //@sMMethods.160 //@sMMethods.161 //@sMMethods.162 //@sMMethods.163 //@sMMethods.164 //@sMMethods.165 //@sMMethods.166 //@sMMethods.167 //@sMMethods.168 //@sMMethods.169 //@sMMethods.170 //@sMMethods.171 //@sMMethods.172 //@sMMethods.173 //@sMMethods.174 //@sMMethods.175 //@sMMethods.176 //@sMMethods.177 //@sMMethods.178 //@sMMethods.179 //@sMMethods.180 //@sMMethods.181 //@sMMethods.182" finalPackageQName="kermeta.standard.helper">
    <sMClass name="CharacterWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.183 //@sMMethods.184 //@sMMethods.185 //@sMMethods.186 //@sMMethods.187 //@sMMethods.188 //@sMMethods.189 //@sMMethods.190 //@sMMethods.191 //@sMMethods.192 //@sMMethods.193 //@sMMethods.194 //@sMMethods.195 //@sMMethods.196 //@sMMethods.197 //@sMMethods.198 //@sMMethods.199 //@sMMethods.200 //@sMMethods.201 //@sMMethods.202 //@sMMethods.203 //@sMMethods.204 //@sMMethods.205 //@sMMethods.206 //@sMMethods.207 //@sMMethods.208 //@sMMethods.209 //@sMMethods.210 //@sMMethods.211 //@sMMethods.212 //@sMMethods.213 //@sMMethods.214 //@sMMethods.215 //@sMMethods.216 //@sMMethods.217 //@sMMethods.218 //@sMMethods.219 //@sMMethods.220 //@sMMethods.221" finalPackageQName="kermeta.standard.helper">
    <sMClass name="StringWrapper" usages="Wrapper"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.222" finalPackageQName="kermeta.standard.runner">
    <sMClass name="UnknownJavaObject__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.223" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__load__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.224" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__normalizedUri__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.225" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__save__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.226" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__saveWithNewURI__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.227" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__findDanglingModelElements__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.228" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Resource__instances__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.229" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFResource__save__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.230" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFResource__saveWithNewURI__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.231" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFResource__saveAndValidateWithEMF__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.232" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFResource__load__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.233" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Repository__createResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.234" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Repository__normalizeUri__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.235" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Repository__findDanglingModelElements__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.236" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="Repository__getResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.237" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="DanglingDiagnostic__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.238" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFRepository__createResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.239" finalPackageQName="kermeta.persistence.runner">
    <sMClass name="EMFRepository__registerEcoreFile__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.240" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="AbstractFallible__distil__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.241" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="AbstractFallible__fail__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.242" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="AbstractFallible__assertEqual__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.243" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="AbstractFallible__assertSimilar__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.244" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Assert__fail__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.245" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Assert__assertEqual__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.246" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__number__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.247" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__getLogKermeta__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.248" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__mustStop__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.249" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__fail__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.250" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Fallible__assertEqual__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.251" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Log__newAttempt__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.252" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Failure__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.253" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Error__makeTearDown__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.254" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Error__makeSetUp__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.255" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Error__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.256" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Test__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.257" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="Test__initLog__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.258" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestSuite__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.259" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__raiseIfHasFailures__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.260" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__setUp__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.261" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__getLogEMF_renameAs__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.262" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__setTestMethodName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.263" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__getTestMethodName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.264" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.265" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__tearDown__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.266" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestCase__run__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.267" finalPackageQName="kermeta.kunit.runner">
    <sMClass name="TestRunner__printTestResult__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.268" finalPackageQName="kermeta.language.runner">
    <sMClass name="ReflectiveCollection__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.269" finalPackageQName="kermeta.language.runner">
    <sMClass name="ReflectiveSequence__clear__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.270" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__isVoid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.271" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__container__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.272" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__getMetaClass__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.273" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__oid__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.274" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.275" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__isFrozen__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.276" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__hashcode__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.277" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__checkInvariants__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.278" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__freeze__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.279" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__containingResource__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.280" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Object__checkAllInvariants__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.281" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="ModelType___new__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.282" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Class___new__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.283" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="Class__toString__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.284" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="ClassDefinition__allSuperTypes__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.285" finalPackageQName="kermeta.language.structure.runner">
    <sMClass name="NamedElement__qualifiedName__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.286" finalPackageQName="kermeta.language.structure.helper">
    <sMClass name="FunctionTypeInvariant" usages="Invariant"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.287" finalPackageQName="kermeta.interpreter.runner">
    <sMClass name="DynamicExpression__initializeDefaults__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.288" finalPackageQName="kermeta.interpreter.runner">
    <sMClass name="DynamicExpression__parse__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.289" finalPackageQName="EcoreUtil.runner">
    <sMClass name="EcoreUtil__loadModel__Runner" usages="Runner"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.290 //@sMMethods.291" finalPackageQName="kermeta.standard.helper">
    <sMClass name="OrderedCollectionSuper" usages="Super"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.292 //@sMMethods.294" finalPackageQName="kermeta.standard.helper">
    <sMClass name="SetSuper" usages="Super"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.293" finalPackageQName="kermeta.standard.helper">
    <sMClass name="CollectionSuper" usages="Super"/>
  </sMContexts>
  <sMContexts sMMethods="//@sMMethods.295 //@sMMethods.296 //@sMMethods.297" finalPackageQName="kermeta.language.helper">
    <sMClass name="ReflectiveCollectionSuper" usages="Super"/>
  </sMContexts>
  <sMMethods name="main" sMContext="//@sMContexts.0" body="&#xA;ecore.EClass anExec = (ecore.EClass) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEClass());&#xA;anExec.getEStructuralFeature( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.1" body="&#xA;ecore.EClass anExec = (ecore.EClass) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEClass());&#xA;anExec.getFeatureCount();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.2" body="&#xA;ecore.EClass anExec = (ecore.EClass) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEClass());&#xA;anExec.testSetReflection();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.3" body="&#xA;ecore.EClass anExec = (ecore.EClass) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEClass());&#xA;anExec.testGetReflection();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.4" body="&#xA;ecore.EClassifier anExec = (ecore.EClassifier) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEClassifier());&#xA;anExec.getClassifierID();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.5" body="&#xA;ecore.EEnum anExec = (ecore.EEnum) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEEnum());&#xA;anExec.op_getEEnumLiteral( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.6" body="&#xA;ecore.EEnum anExec = (ecore.EEnum) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEEnum());&#xA;anExec.getEEnumLiteralByLiteral( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.7" body="&#xA;ecore.EModelElement anExec = (ecore.EModelElement) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEModelElement());&#xA;anExec.getEAnnotation( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.8" body="&#xA;ecore.EObject anExec = (ecore.EObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEObject());&#xA;anExec.eContainer();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.9" body="&#xA;ecore.EObject anExec = (ecore.EObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEObject());&#xA;anExec.eCrossReferences();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.10" body="&#xA;ecore.EObject anExec = (ecore.EObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEObject());&#xA;anExec.eContainingFeature();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.11" body="&#xA;ecore.EObject anExec = (ecore.EObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEObject());&#xA;anExec.eResource();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.12" body="&#xA;ecore.EObject anExec = (ecore.EObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEObject());&#xA;anExec.eContainmentFeature();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.13" body="&#xA;ecore.EObject anExec = (ecore.EObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEObject());&#xA;anExec.eContents();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.14" body="&#xA;ecore.EObject anExec = (ecore.EObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEObject());&#xA;anExec.eIsProxy();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.15" body="&#xA;ecore.EObject anExec = (ecore.EObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEObject());&#xA;anExec.eClass();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.16" body="&#xA;ecore.EObject anExec = (ecore.EObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEObject());&#xA;anExec.eAllContents();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.17" body="&#xA;ecore.EPackage anExec = (ecore.EPackage) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEPackage());&#xA;anExec.getEClassifier( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.18" body="&#xA;ecore.EStructuralFeature anExec = (ecore.EStructuralFeature) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEStructuralFeature());&#xA;anExec.getFeatureID();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.19" body="&#xA;ecore.EStructuralFeature anExec = (ecore.EStructuralFeature) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getEStructuralFeature());&#xA;anExec.getContainerClass();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.20" body="&#xA;ecore.Main anExec = (ecore.Main) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(ecore.EcorePackage.eINSTANCE.getMain());&#xA;anExec.main();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.21" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.writeln( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.22" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.errorln( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.23" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.error( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.24" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.write( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.25" body="&#xA;kermeta.io.StdIO anExec = (kermeta.io.StdIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getStdIO());&#xA;anExec.read( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.26" body="&#xA;kermeta.io.FileIO anExec = (kermeta.io.FileIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getFileIO());&#xA;anExec.writeTextFile( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.27" body="&#xA;kermeta.io.FileIO anExec = (kermeta.io.FileIO) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.io.IoPackage.eINSTANCE.getFileIO());&#xA;anExec.readTextFile( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.28" body="&#xA;kermeta.utils.Stack anExec = (kermeta.utils.Stack) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStack());&#xA;anExec.peek();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.29" body="&#xA;kermeta.utils.Stack anExec = (kermeta.utils.Stack) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStack());&#xA;anExec.pop();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.30" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.31" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.keyIterator();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.32" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.keys();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.33" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.values();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.34" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.valueIterator();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.35" body="&#xA;kermeta.utils.Hashtable anExec = (kermeta.utils.Hashtable) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getHashtable());&#xA;anExec.size();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.36" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStringBuffer());&#xA;anExec.append( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.37" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStringBuffer());&#xA;anExec.length();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.38" body="&#xA;kermeta.utils.StringBuffer anExec = (kermeta.utils.StringBuffer) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.utils.UtilsPackage.eINSTANCE.getStringBuffer());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.39" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.iterator();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.40" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.size();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.41" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.empty();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.42" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.isEmpty();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.43" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.44" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.45" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.46" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.47" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.48" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.one();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.49" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.sum();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.50" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.any();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.51" body="&#xA;kermeta.standard.Collection anExec = (kermeta.standard.Collection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getCollection());&#xA;anExec.isNotEmpty();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.52" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.53" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.flatten();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.54" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.55" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.56" body="&#xA;kermeta.standard.Set anExec = (kermeta.standard.Set) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getSet());&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.57" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.asSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.58" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.asSequence();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.59" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.flatten();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.60" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.asOrderedSet();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.61" body="&#xA;kermeta.standard.Bag anExec = (kermeta.standard.Bag) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getBag());&#xA;anExec.asBag();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.62" body="&#xA;kermeta.standard.OrderedCollection anExec = (kermeta.standard.OrderedCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getOrderedCollection());&#xA;anExec.last();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.63" body="&#xA;kermeta.standard.OrderedCollection anExec = (kermeta.standard.OrderedCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getOrderedCollection());&#xA;anExec.first();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.64" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getIterator());&#xA;anExec.hasNext();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.65" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getIterator());&#xA;anExec.next();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.66" body="&#xA;kermeta.standard.Iterator anExec = (kermeta.standard.Iterator) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getIterator());&#xA;anExec.isOff();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.67" body="&#xA;kermeta.standard.Void anExec = (kermeta.standard.Void) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getVoid());&#xA;anExec.isVoid();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.68" body="&#xA;kermeta.standard.Void anExec = (kermeta.standard.Void) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getVoid());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="not" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.not(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="and" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.and(self, other), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="or" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.or(self, other), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="xor" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.and(self, kermeta.standard.helper.BooleanWrapper.not(other)), kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(self), other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_99 = false;&#xA;&#x9;idIfCond_99 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Boolean&quot;));&#xA;&#xA;&#x9;if( idIfCond_99 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.BooleanUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="implies" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.not(self), other);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="nand" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Boolean expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(kermeta.standard.helper.BooleanWrapper.and(self, other));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="other" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_100 = false;&#xA;&#x9;idIfCond_100 = self;&#xA;&#xA;&#x9;if( idIfCond_100 ) {&#xA;&#xA;&#x9;result = &quot;true&quot;;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = &quot;false&quot;;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_101 = false;&#xA;&#x9;idIfCond_101 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_101 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_102 = false;&#xA;&#x9;idIfCond_102 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_102 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_103 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft19 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_104 = false;&#xA;&#x9;idIfCond_104 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_104 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp19 = null;&#xA;&#xA;&#x9;result_ft19 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft19 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_103 = result_ft19;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_103 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_105 = false;&#xA;&#x9;idIfCond_105 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_105 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft20 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_106 = false;&#xA;&#x9;while( !idLoopCond_106 ) {&#xA;&#x9;idLoopCond_106 = it_ft20.isOff();&#xA;&#x9;if ( idLoopCond_106 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp20 = it_ft20.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft21 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft21 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft21 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp20.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_108 = false;&#xA;&#x9;while( !idLoopCond_108 ) {&#xA;&#x9;idLoopCond_108 = kermeta.standard.helper.BooleanWrapper.or(it_ft21.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft21, false));&#xA;&#x9;if ( idLoopCond_108 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft21 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp21 = it_ft21.next();&#xA;&#xA;&#x9;result_lambda_ft21 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp21.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft21 = kermeta.standard.helper.BooleanWrapper.or(test_ft21, result_lambda_ft21);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft21 = test_ft21;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_107 = false;&#xA;&#x9;idIfCond_107 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft21), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp20.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_107 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp20);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_109 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft22 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_110 = false;&#xA;&#x9;idIfCond_110 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_110 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp22 = null;&#xA;&#xA;&#x9;result_ft22 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft22 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_109 = result_ft22;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_109 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_111 = false;&#xA;&#x9;idIfCond_111 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp20.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp20.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_111 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp20.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_112 = false;&#xA;&#x9;idIfCond_112 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp20.getLower());&#xA;&#xA;&#x9;if( idIfCond_112 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp20.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_113 = false;&#xA;&#x9;idIfCond_113 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp20.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_113 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp20.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.69" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_114 = false;&#xA;&#x9;idIfCond_114 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_114 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft23 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_115 = false;&#xA;&#x9;while( !idLoopCond_115 ) {&#xA;&#x9;idLoopCond_115 = it_ft23.isOff();&#xA;&#x9;if ( idLoopCond_115 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp23 = it_ft23.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_116 = false;&#xA;&#x9;idIfCond_116 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp23.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp23.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_116 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_117 = false;&#xA;&#x9;idIfCond_117 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp23)));&#xA;&#xA;&#x9;if( idIfCond_117 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_118 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft24 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft24 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft24 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp23)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_119 = false;&#xA;&#x9;while( !idLoopCond_119 ) {&#xA;&#x9;idLoopCond_119 = kermeta.standard.helper.BooleanWrapper.or(it_ft24.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft24, false));&#xA;&#x9;if ( idLoopCond_119 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft24 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp24 = it_ft24.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_120 = false;&#xA;&#x9;idIfCond_120 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp24, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_120 ) {&#xA;&#xA;&#x9;result_lambda_ft24 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp24, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft24 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft24 = kermeta.standard.helper.BooleanWrapper.or(test_ft24, result_lambda_ft24);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft24 = test_ft24;&#xA;&#xA;//CEC&#xA;idIfCond_118 = result_ft24;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_118 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp23), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft25 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_121 = false;&#xA;&#x9;while( !idLoopCond_121 ) {&#xA;&#x9;idLoopCond_121 = it_ft25.isOff();&#xA;&#x9;if ( idLoopCond_121 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp25 = it_ft25.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp25);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp23));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Boolean"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="toReal" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toReal(self), &quot;java.lang.Double&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_122 = false;&#xA;&#x9;idIfCond_122 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_122 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_123 = false;&#xA;&#x9;idIfCond_123 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_123 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLower" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_124 = false;&#xA;&#x9;idIfCond_124 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_124 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_125 = false;&#xA;&#x9;idIfCond_125 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_125 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLower(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLower(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="plus" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_126 = false;&#xA;&#x9;idIfCond_126 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_126 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.plus(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="mult" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_127 = false;&#xA;&#x9;idIfCond_127 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_127 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.times(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="minus" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_128 = false;&#xA;&#x9;idIfCond_128 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_128 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.minus(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="mod" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_129 = false;&#xA;&#x9;idIfCond_129 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_129 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getDivisionByZero())) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_130 = false;&#xA;&#x9;idIfCond_130 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_130 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.mod(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="div" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_131 = false;&#xA;&#x9;idIfCond_131 = kermeta.standard.helper.IntegerWrapper.equals(other, 0);&#xA;&#xA;&#x9;if( idIfCond_131 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getDivisionByZero())) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_132 = false;&#xA;&#x9;idIfCond_132 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_132 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.div(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="compareTo" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_133 = false;&#xA;&#x9;idIfCond_133 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_133 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_134 = false;&#xA;&#x9;idIfCond_134 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_134 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getNotComparableException())) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.compareTo(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isGreater" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_135 = false;&#xA;&#x9;idIfCond_135 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_135 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_136 = false;&#xA;&#x9;idIfCond_136 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_136 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreater(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreater(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreaterOrEqual" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_137 = false;&#xA;&#x9;idIfCond_137 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_137 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_138 = false;&#xA;&#x9;idIfCond_138 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_138 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isGreaterOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isGreaterOrEqual(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="uminus" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.minus(0, self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.toString(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="isLowerOrEqual" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Integer expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_139 = false;&#xA;&#x9;idIfCond_139 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_139 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_140 = false;&#xA;&#x9;idIfCond_140 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_140 ) {&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.basetypes.RealUtil.isLowerOrEqual(kermeta.standard.helper.IntegerWrapper.toReal(self), other);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.IntegerUtil.isLowerOrEqual(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="other" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_141 = false;&#xA;&#x9;idIfCond_141 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_141 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_142 = false;&#xA;&#x9;idIfCond_142 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_142 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_143 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft26 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_144 = false;&#xA;&#x9;idIfCond_144 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_144 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp26 = null;&#xA;&#xA;&#x9;result_ft26 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft26 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_143 = result_ft26;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_143 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_145 = false;&#xA;&#x9;idIfCond_145 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_145 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft27 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_146 = false;&#xA;&#x9;while( !idLoopCond_146 ) {&#xA;&#x9;idLoopCond_146 = it_ft27.isOff();&#xA;&#x9;if ( idLoopCond_146 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp27 = it_ft27.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft28 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft28 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft28 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp27.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_148 = false;&#xA;&#x9;while( !idLoopCond_148 ) {&#xA;&#x9;idLoopCond_148 = kermeta.standard.helper.BooleanWrapper.or(it_ft28.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft28, false));&#xA;&#x9;if ( idLoopCond_148 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft28 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp28 = it_ft28.next();&#xA;&#xA;&#x9;result_lambda_ft28 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp28.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft28 = kermeta.standard.helper.BooleanWrapper.or(test_ft28, result_lambda_ft28);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft28 = test_ft28;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_147 = false;&#xA;&#x9;idIfCond_147 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft28), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp27.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_147 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp27);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_149 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft29 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_150 = false;&#xA;&#x9;idIfCond_150 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_150 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp29 = null;&#xA;&#xA;&#x9;result_ft29 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft29 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_149 = result_ft29;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_149 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_151 = false;&#xA;&#x9;idIfCond_151 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp27.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp27.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_151 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp27.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_152 = false;&#xA;&#x9;idIfCond_152 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp27.getLower());&#xA;&#xA;&#x9;if( idIfCond_152 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp27.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_153 = false;&#xA;&#x9;idIfCond_153 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp27.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_153 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp27.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.70" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_154 = false;&#xA;&#x9;idIfCond_154 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_154 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft30 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_155 = false;&#xA;&#x9;while( !idLoopCond_155 ) {&#xA;&#x9;idLoopCond_155 = it_ft30.isOff();&#xA;&#x9;if ( idLoopCond_155 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp30 = it_ft30.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_156 = false;&#xA;&#x9;idIfCond_156 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp30.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp30.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_156 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_157 = false;&#xA;&#x9;idIfCond_157 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp30)));&#xA;&#xA;&#x9;if( idIfCond_157 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_158 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft31 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft31 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft31 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp30)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_159 = false;&#xA;&#x9;while( !idLoopCond_159 ) {&#xA;&#x9;idLoopCond_159 = kermeta.standard.helper.BooleanWrapper.or(it_ft31.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft31, false));&#xA;&#x9;if ( idLoopCond_159 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft31 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp31 = it_ft31.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_160 = false;&#xA;&#x9;idIfCond_160 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp31, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_160 ) {&#xA;&#xA;&#x9;result_lambda_ft31 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp31, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft31 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft31 = kermeta.standard.helper.BooleanWrapper.or(test_ft31, result_lambda_ft31);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft31 = test_ft31;&#xA;&#xA;//CEC&#xA;idIfCond_158 = result_ft31;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_158 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp30), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft32 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_161 = false;&#xA;&#x9;while( !idLoopCond_161 ) {&#xA;&#x9;idLoopCond_161 = it_ft32.isOff();&#xA;&#x9;if ( idLoopCond_161 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp32 = it_ft32.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp32);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp30));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Integer"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_162 = false;&#xA;&#x9;idIfCond_162 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_162 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_163 = false;&#xA;&#x9;idIfCond_163 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_163 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.equals(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="plus" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_164 = false;&#xA;&#x9;idIfCond_164 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_164 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.plus(self, other), &quot;java.lang.Double&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="mult" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_165 = false;&#xA;&#x9;idIfCond_165 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_165 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.times(self, other), &quot;java.lang.Double&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="minus" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_166 = false;&#xA;&#x9;idIfCond_166 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_166 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.minus(self, other), &quot;java.lang.Double&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="uminus" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.minus(kermeta.standard.helper.IntegerWrapper.toReal(0), self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="toInteger" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.toInteger(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="div" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_167 = false;&#xA;&#x9;idIfCond_167 = kermeta.standard.helper.RealWrapper.equals(other, kermeta.standard.helper.IntegerWrapper.toReal(0));&#xA;&#xA;&#x9;if( idIfCond_167 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.DivisionByZero) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getDivisionByZero())) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_168 = false;&#xA;&#x9;idIfCond_168 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_168 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.VoidOperandError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getVoidOperandError())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.div(self, other), &quot;java.lang.Double&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="compareTo" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_169 = false;&#xA;&#x9;idIfCond_169 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Double&quot;));&#xA;&#xA;&#x9;if( idIfCond_169 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_170 = false;&#xA;&#x9;idIfCond_170 = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;));&#xA;&#xA;&#x9;if( idIfCond_170 ) {&#xA;&#xA;&#x9;result = kermeta.standard.helper.RealWrapper.compareTo(self, kermeta.standard.helper.IntegerWrapper.toReal(((java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(other, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Integer&quot;)))));&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.standard.NotComparableException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getNotComparableException())) );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.compareTo(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.RealUtil.toString(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="isGreater" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreaterOrEqual" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLowerOrEqual" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLower" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Real expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="other" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_171 = false;&#xA;&#x9;idIfCond_171 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_171 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_172 = false;&#xA;&#x9;idIfCond_172 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_172 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_173 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft33 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_174 = false;&#xA;&#x9;idIfCond_174 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_174 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp33 = null;&#xA;&#xA;&#x9;result_ft33 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft33 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_173 = result_ft33;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_173 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_175 = false;&#xA;&#x9;idIfCond_175 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_175 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft34 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_176 = false;&#xA;&#x9;while( !idLoopCond_176 ) {&#xA;&#x9;idLoopCond_176 = it_ft34.isOff();&#xA;&#x9;if ( idLoopCond_176 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp34 = it_ft34.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft35 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft35 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft35 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp34.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_178 = false;&#xA;&#x9;while( !idLoopCond_178 ) {&#xA;&#x9;idLoopCond_178 = kermeta.standard.helper.BooleanWrapper.or(it_ft35.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft35, false));&#xA;&#x9;if ( idLoopCond_178 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft35 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp35 = it_ft35.next();&#xA;&#xA;&#x9;result_lambda_ft35 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp35.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft35 = kermeta.standard.helper.BooleanWrapper.or(test_ft35, result_lambda_ft35);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft35 = test_ft35;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_177 = false;&#xA;&#x9;idIfCond_177 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft35), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp34.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_177 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp34);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_179 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft36 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_180 = false;&#xA;&#x9;idIfCond_180 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_180 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp36 = null;&#xA;&#xA;&#x9;result_ft36 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft36 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_179 = result_ft36;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_179 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_181 = false;&#xA;&#x9;idIfCond_181 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp34.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp34.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_181 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp34.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_182 = false;&#xA;&#x9;idIfCond_182 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp34.getLower());&#xA;&#xA;&#x9;if( idIfCond_182 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp34.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_183 = false;&#xA;&#x9;idIfCond_183 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp34.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_183 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp34.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.71" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_184 = false;&#xA;&#x9;idIfCond_184 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_184 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft37 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_185 = false;&#xA;&#x9;while( !idLoopCond_185 ) {&#xA;&#x9;idLoopCond_185 = it_ft37.isOff();&#xA;&#x9;if ( idLoopCond_185 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp37 = it_ft37.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_186 = false;&#xA;&#x9;idIfCond_186 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp37.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp37.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_186 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_187 = false;&#xA;&#x9;idIfCond_187 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp37)));&#xA;&#xA;&#x9;if( idIfCond_187 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_188 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft38 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft38 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft38 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp37)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_189 = false;&#xA;&#x9;while( !idLoopCond_189 ) {&#xA;&#x9;idLoopCond_189 = kermeta.standard.helper.BooleanWrapper.or(it_ft38.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft38, false));&#xA;&#x9;if ( idLoopCond_189 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft38 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp38 = it_ft38.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_190 = false;&#xA;&#x9;idIfCond_190 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp38, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_190 ) {&#xA;&#xA;&#x9;result_lambda_ft38 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp38, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft38 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft38 = kermeta.standard.helper.BooleanWrapper.or(test_ft38, result_lambda_ft38);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft38 = test_ft38;&#xA;&#xA;//CEC&#xA;idIfCond_188 = result_ft38;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_188 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp37), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft39 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_191 = false;&#xA;&#x9;while( !idLoopCond_191 ) {&#xA;&#x9;idLoopCond_191 = it_ft39.isOff();&#xA;&#x9;if ( idLoopCond_191 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp39 = it_ft39.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp39);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp37));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Double"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_192 = false;&#xA;&#x9;idIfCond_192 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.Character&quot;));&#xA;&#xA;&#x9;if( idIfCond_192 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="compareTo" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_193 = false;&#xA;&#x9;idIfCond_193 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_193 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getCallOnVoidTarget())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.compareTo(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.CharacterUtil.toString(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_194 = false;&#xA;&#x9;idIfCond_194 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_194 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_195 = false;&#xA;&#x9;idIfCond_195 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_195 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_196 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft40 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_197 = false;&#xA;&#x9;idIfCond_197 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_197 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp40 = null;&#xA;&#xA;&#x9;result_ft40 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft40 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_196 = result_ft40;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_196 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_198 = false;&#xA;&#x9;idIfCond_198 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_198 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft41 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_199 = false;&#xA;&#x9;while( !idLoopCond_199 ) {&#xA;&#x9;idLoopCond_199 = it_ft41.isOff();&#xA;&#x9;if ( idLoopCond_199 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp41 = it_ft41.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft42 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft42 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft42 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp41.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_201 = false;&#xA;&#x9;while( !idLoopCond_201 ) {&#xA;&#x9;idLoopCond_201 = kermeta.standard.helper.BooleanWrapper.or(it_ft42.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft42, false));&#xA;&#x9;if ( idLoopCond_201 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft42 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp42 = it_ft42.next();&#xA;&#xA;&#x9;result_lambda_ft42 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp42.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft42 = kermeta.standard.helper.BooleanWrapper.or(test_ft42, result_lambda_ft42);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft42 = test_ft42;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_200 = false;&#xA;&#x9;idIfCond_200 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft42), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp41.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_200 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp41);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_202 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft43 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_203 = false;&#xA;&#x9;idIfCond_203 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_203 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp43 = null;&#xA;&#xA;&#x9;result_ft43 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft43 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_202 = result_ft43;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_202 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_204 = false;&#xA;&#x9;idIfCond_204 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp41.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp41.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_204 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp41.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_205 = false;&#xA;&#x9;idIfCond_205 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp41.getLower());&#xA;&#xA;&#x9;if( idIfCond_205 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp41.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_206 = false;&#xA;&#x9;idIfCond_206 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp41.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_206 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp41.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_207 = false;&#xA;&#x9;idIfCond_207 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_207 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft44 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_208 = false;&#xA;&#x9;while( !idLoopCond_208 ) {&#xA;&#x9;idLoopCond_208 = it_ft44.isOff();&#xA;&#x9;if ( idLoopCond_208 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp44 = it_ft44.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_209 = false;&#xA;&#x9;idIfCond_209 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp44.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp44.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_209 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_210 = false;&#xA;&#x9;idIfCond_210 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp44)));&#xA;&#xA;&#x9;if( idIfCond_210 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_211 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft45 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft45 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft45 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp44)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_212 = false;&#xA;&#x9;while( !idLoopCond_212 ) {&#xA;&#x9;idLoopCond_212 = kermeta.standard.helper.BooleanWrapper.or(it_ft45.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft45, false));&#xA;&#x9;if ( idLoopCond_212 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft45 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp45 = it_ft45.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_213 = false;&#xA;&#x9;idIfCond_213 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp45, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_213 ) {&#xA;&#xA;&#x9;result_lambda_ft45 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp45, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft45 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft45 = kermeta.standard.helper.BooleanWrapper.or(test_ft45, result_lambda_ft45);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft45 = test_ft45;&#xA;&#xA;//CEC&#xA;idIfCond_211 = result_ft45;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_211 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp44), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft46 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_214 = false;&#xA;&#x9;while( !idLoopCond_214 ) {&#xA;&#x9;idLoopCond_214 = it_ft46.isOff();&#xA;&#x9;if ( idLoopCond_214 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp46 = it_ft46.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp46);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp44));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isGreater" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreaterOrEqual" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLowerOrEqual" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLower" sMContext="//@sMContexts.72" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the Character expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.Character"/>
    <sMParameters name="other" type="java.lang.Character"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="toString" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.toString((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = self;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="plus" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_215 = false;&#xA;&#x9;idIfCond_215 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_215 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, kermeta.standard.helper.StringWrapper.toString(other)), &quot;java.lang.String&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.plus(self, other), &quot;java.lang.String&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="append" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_216 = false;&#xA;&#x9;idIfCond_216 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_216 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getCallOnVoidTarget())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.StringUtil.append(self, other);&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="equals" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || other == null ) {&#xA;return self == other;&#xA;}&#xA;&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.equals((kermeta.language.structure.Object) ((java.lang.Object) self), other);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_217 = false;&#xA;&#x9;idIfCond_217 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(other), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;java.lang.String&quot;));&#xA;&#xA;&#x9;if( idIfCond_217 ) {&#xA;&#xA;&#x9;result = false;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.equals(self, other), &quot;java.lang.Boolean&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="toReal" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Double result = null;&#xA;&#xA;&#x9;result = (java.lang.Double) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toReal(self), &quot;java.lang.Double&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_218 = false;&#xA;&#x9;idIfCond_218 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(result);&#xA;&#xA;&#x9;if( idIfCond_218 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringFormatException())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Double"/>
  </sMMethods>
  <sMMethods name="toBoolean" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toBoolean(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_219 = false;&#xA;&#x9;idIfCond_219 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(result);&#xA;&#xA;&#x9;if( idIfCond_219 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringFormatException())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="compareTo" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_220 = false;&#xA;&#x9;idIfCond_220 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(other);&#xA;&#xA;&#x9;if( idIfCond_220 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.CallOnVoidTarget) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getCallOnVoidTarget())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.compareTo(self, other), &quot;java.lang.Integer&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="contains" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.contains(self, str1), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="indexOf" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.indexOf(self, str), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="size" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.size(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="elementAt" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Character result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_221 = false;&#xA;&#x9;idIfCond_221 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, kermeta.standard.helper.IntegerWrapper.minus(kermeta.standard.helper.StringWrapper.size(self), 1)));&#xA;&#xA;&#x9;if( idIfCond_221 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringIndexOutOfBound())) );&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result = (java.lang.Character) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.elementAt(self, index), &quot;java.lang.Character&quot;);&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMReturn type="java.lang.Character"/>
  </sMMethods>
  <sMMethods name="replace" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.replace(self, str1, str2), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="str1" type="java.lang.String"/>
    <sMParameters name="str2" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="toUpperCase" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toUpperCase(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="toInteger" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toInteger(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_222 = false;&#xA;&#x9;idIfCond_222 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(result);&#xA;&#xA;&#x9;if( idIfCond_222 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringFormatException) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringFormatException())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="toLowerCase" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.toLowerCase(self), &quot;java.lang.String&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="substring" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.String result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_223 = false;&#xA;&#x9;idIfCond_223 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(startIndex, 0), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(startIndex, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(endIndex, kermeta.standard.helper.StringWrapper.size(self))), kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(endIndex, startIndex));&#xA;&#xA;&#x9;if( idIfCond_223 ) {&#xA;&#xA;&#x9;result = (java.lang.String) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.substring(self, startIndex, endIndex), &quot;java.lang.String&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.StringIndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getStringIndexOutOfBound())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="startIndex" type="java.lang.Integer"/>
    <sMParameters name="endIndex" type="java.lang.Integer"/>
    <sMReturn type="java.lang.String"/>
  </sMMethods>
  <sMMethods name="split" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.standard.Sequence&lt;java.lang.String> result = null;&#xA;&#xA;&#x9;result = (kermeta.standard.Sequence&lt;java.lang.String>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.basetypes.StringUtil.split(self, delimiter), &quot;kermeta.standard.Sequence&lt;java.lang.String>&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="delimiter" type="java.lang.String"/>
    <sMReturn type="kermeta.standard.Sequence&lt;java.lang.String>"/>
  </sMMethods>
  <sMMethods name="isVoid" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = false;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isInstanceOf" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOf(self, type.getClass().getName()), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="type" type="kermeta.language.structure.Type"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="container" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.container((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.container(self);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="asType" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.asType((kermeta.language.structure.Object) ((java.lang.Object) self), type);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_224 = false;&#xA;&#x9;idIfCond_224 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(self, type);&#xA;&#xA;&#x9;if( idIfCond_224 ) {&#xA;&#xA;&#x9;result = self;&#xA;}&#xA; else {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.TypeCastError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getTypeCastError())) );&#xA;&#xA;}&#xA;&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="kermeta.language.structure.Object"/>
    <sMParameters name="type" type="kermeta.language.structure.Class"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="getMetaClass" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Class result = null;&#xA;&#xA;&#x9;result = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClass( self ), &quot;kermeta.language.structure.Class&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.language.structure.Class"/>
  </sMMethods>
  <sMMethods name="isNotEqual" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqual((kermeta.language.structure.Object) ((java.lang.Object) self), element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(self, element));&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="oid" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.oid((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getOID(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="isKindOf" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOf((kermeta.language.structure.Object) ((java.lang.Object) self), cl);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ClassUtil.equalsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self), cl);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="cl" type="kermeta.language.structure.Class"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isSet" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isSet(self, property), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="get" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ObjectUtil.get((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.language.structure.Object result = null;&#xA;&#xA;&#x9;result = org.kermeta.compil.runtime.helper.language.ObjectUtil.get(self, property);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="kermeta.language.structure.Object"/>
  </sMMethods>
  <sMMethods name="set" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.set((kermeta.language.structure.Object) ((java.lang.Object) self), property, element);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_225 = false;&#xA;&#x9;idIfCond_225 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(element, property.getType());&#xA;&#xA;&#x9;if( idIfCond_225 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, element);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.language.structure.EnumerationLiteral v = null;&#xA;&#xA;&#x9;v = (kermeta.language.structure.EnumerationLiteral) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.language.structure.EnumerationLiteral&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_226 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft47 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_227 = false;&#xA;&#x9;idIfCond_227 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(v, null);&#xA;&#xA;&#x9;if( idIfCond_227 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object e_lbdExp47 = null;&#xA;&#xA;&#x9;result_ft47 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(property.getType(), v.getEnumeration());&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft47 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_226 = result_ft47;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_226 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.set(self, property, v);&#xA;}&#xA; else {&#xA;&#xA;&#x9;kermeta.exceptions.IncompatibleTypeError e = ((kermeta.exceptions.IncompatibleTypeError) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIncompatibleTypeError()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;IncompatibleTypeError : Cannot set property &quot;, property.getName()), &quot; of object &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)), &quot; to &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(element)), &quot;.&quot;));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMParameters name="element" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isFrozen" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = (java.lang.Boolean) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.isFrozen(self), &quot;java.lang.Boolean&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="hashcode" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Integer result = null;&#xA;&#xA;&#x9;result = (java.lang.Integer) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.hashcode(self), &quot;java.lang.Integer&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="java.lang.Integer"/>
  </sMMethods>
  <sMMethods name="checkInvariants" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getterClassDefinition();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_228 = false;&#xA;&#x9;idIfCond_228 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(cd));&#xA;&#xA;&#x9;if( idIfCond_228 ) {&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft48 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_229 = false;&#xA;&#x9;while( !idLoopCond_229 ) {&#xA;&#x9;idLoopCond_229 = it_ft48.isOff();&#xA;&#x9;if ( idLoopCond_229 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property p_lbdExp48 = it_ft48.next();&#xA;&#xA;&#x9;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft49 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft49 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Tag> it_ft49 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Tag>convertAsOrderedSet(p_lbdExp48.getTag()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_231 = false;&#xA;&#x9;while( !idLoopCond_231 ) {&#xA;&#x9;idLoopCond_231 = kermeta.standard.helper.BooleanWrapper.or(it_ft49.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft49, false));&#xA;&#x9;if ( idLoopCond_231 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft49 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Tag t_lbdExp49 = it_ft49.next();&#xA;&#xA;&#x9;result_lambda_ft49 = kermeta.standard.helper.StringWrapper.equals(t_lbdExp49.getName(), &quot;ecore.isTransient&quot;);&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft49 = kermeta.standard.helper.BooleanWrapper.or(test_ft49, result_lambda_ft49);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft49 = test_ft49;&#xA;//EIft:exists&#xA;java.lang.Boolean idIfCond_230 = false;&#xA;&#x9;idIfCond_230 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.BooleanWrapper.not(result_ft49), kermeta.standard.helper.BooleanWrapper.not(p_lbdExp48.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_230 ) {&#xA;&#xA;&#x9;kermeta.language.structure.Object v = org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, p_lbdExp48);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_232 = false;&#xA;//BIft:andThen&#xA;&#xA;java.lang.Boolean result_ft50 = null;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_233 = false;&#xA;&#x9;idIfCond_233 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_233 ) {&#xA;&#xA;&#x9;//BIle:right&#xA;/*This variable should be never used*/ kermeta.language.structure.Object f_lbdExp50 = null;&#xA;&#xA;&#x9;result_ft50 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;));&#xA;//EIle:right&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_ft50 = false;&#xA;}&#xA;&#xA;&#xA;//CEC&#xA;idIfCond_232 = result_ft50;&#xA;//EIft:andThen&#xA;&#xA;&#xA;&#x9;if( idIfCond_232 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> c = ((kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(v, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;)));&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_234 = false;&#xA;&#x9;idIfCond_234 = kermeta.standard.helper.BooleanWrapper.and(org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(p_lbdExp48.getUpper(), org.kermeta.compil.runtime.helper.language.ObjectUtil.convertAsObject(kermeta.standard.helper.IntegerWrapper.uminus(1))), kermeta.standard.helper.IntegerWrapper.isGreater(c.size(), p_lbdExp48.getUpper()));&#xA;&#xA;&#x9;if( idIfCond_234 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp48.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_235 = false;&#xA;&#x9;idIfCond_235 = kermeta.standard.helper.IntegerWrapper.isLower(c.size(), p_lbdExp48.getLower());&#xA;&#xA;&#x9;if( idIfCond_235 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp48.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_236 = false;&#xA;&#x9;idIfCond_236 = kermeta.standard.helper.BooleanWrapper.and(kermeta.standard.helper.IntegerWrapper.equals(p_lbdExp48.getLower(), 1), org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(v));&#xA;&#xA;&#x9;if( idIfCond_236 ) {&#xA;&#xA;&#x9;kermeta.exceptions.ConstraintViolatedInv e = ((kermeta.exceptions.ConstraintViolatedInv) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getConstraintViolatedInv()));&#xA;&#xA;&#x9;e.setMessage(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(kermeta.standard.helper.StringWrapper.plus(&quot;Inv lower bound of &quot;, cd.getName()), &quot;.&quot;), p_lbdExp48.getName()), &quot; violated on &quot;), org.kermeta.compil.runtime.helper.language.ObjectUtil.toStringSwitcher(self)));&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( e );&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariants(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="unset" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset((kermeta.language.structure.Object) ((java.lang.Object) self), property);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.unset(self, property);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="property" type="kermeta.language.structure.Property"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="freeze" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.freeze(self);&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="containingResource" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;return (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.containingResource((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;kermeta.persistence.Resource result = null;&#xA;&#xA;&#x9;result = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getContainingResource(self), &quot;kermeta.persistence.Resource&quot;);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="kermeta.persistence.Resource"/>
  </sMMethods>
  <sMMethods name="checkAllInvariants" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null || ((java.lang.Object) self) instanceof kermeta.language.structure.Object ) {&#xA;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariants((kermeta.language.structure.Object) ((java.lang.Object) self));&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_237 = false;&#xA;&#x9;idIfCond_237 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(self, null);&#xA;&#xA;&#x9;if( idIfCond_237 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkInvariantsSwitcher(self);&#xA;&#xA;&#x9;kermeta.language.structure.ClassDefinition cd = null;&#xA;&#xA;&#x9;cd = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(self).getTypeDefinition(), &quot;kermeta.language.structure.ClassDefinition&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Property> it_ft51 = org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.&lt;kermeta.language.structure.Property>convertAsSet(cd.getterAllAttribute()).iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_238 = false;&#xA;&#x9;while( !idLoopCond_238 ) {&#xA;&#x9;idLoopCond_238 = it_ft51.isOff();&#xA;&#x9;if ( idLoopCond_238 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Property prop_lbdExp51 = it_ft51.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_239 = false;&#xA;&#x9;idIfCond_239 = kermeta.standard.helper.BooleanWrapper.and(prop_lbdExp51.getIsComposite(), kermeta.standard.helper.BooleanWrapper.not(prop_lbdExp51.getIsDerived()));&#xA;&#xA;&#x9;if( idIfCond_239 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_240 = false;&#xA;&#x9;idIfCond_240 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp51)));&#xA;&#xA;&#x9;if( idIfCond_240 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_241 = false;&#xA;//BIft:exists&#xA;&#xA;java.lang.Boolean result_ft52 = null;&#xA;&#xA;&#x9;java.lang.Boolean test_ft52 = false;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Type> it_ft52 = ((kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getMetaClassSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp51)).getTypeDefinition(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ClassDefinition&quot;))).allSuperTypes().iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_242 = false;&#xA;&#x9;while( !idLoopCond_242 ) {&#xA;&#x9;idLoopCond_242 = kermeta.standard.helper.BooleanWrapper.or(it_ft52.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(test_ft52, false));&#xA;&#x9;if ( idLoopCond_242 ) {&#xA;&#x9;} else {&#xA;&#xA;java.lang.Boolean result_lambda_ft52 = null;&#xA;//BIle:func&#xA;kermeta.language.structure.Type t_lbdExp52 = it_ft52.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_243 = false;&#xA;&#x9;idIfCond_243 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isInstanceOfSwitcher(t_lbdExp52, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;));&#xA;&#xA;&#x9;if( idIfCond_243 ) {&#xA;&#xA;&#x9;result_lambda_ft52 = kermeta.standard.helper.StringWrapper.equals(((kermeta.language.structure.ParameterizedType) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeSwitcher(t_lbdExp52, org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ParameterizedType&quot;))).getTypeDefinition().qualifiedName(), &quot;kermeta::standard::Collection&quot;);&#xA;}&#xA; else {&#xA;&#xA;&#x9;result_lambda_ft52 = false;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;&#x9;test_ft52 = kermeta.standard.helper.BooleanWrapper.or(test_ft52, result_lambda_ft52);&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#x9;result_ft52 = test_ft52;&#xA;&#xA;//CEC&#xA;idIfCond_241 = result_ft52;&#xA;//EIft:exists&#xA;&#xA;&#xA;&#x9;if( idIfCond_241 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;kermeta.language.structure.Object> subObjInstances = null;&#xA;&#xA;&#x9;subObjInstances = (kermeta.standard.Collection&lt;kermeta.language.structure.Object>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp51), &quot;kermeta.standard.Collection&lt;kermeta.language.structure.Object>&quot;);&#xA;&#xA;&#x9;//BIft:each&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;kermeta.language.structure.Object> it_ft53 = subObjInstances.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_244 = false;&#xA;&#x9;while( !idLoopCond_244 ) {&#xA;&#x9;idLoopCond_244 = it_ft53.isOff();&#xA;&#x9;if ( idLoopCond_244 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;//BIle:func&#xA;kermeta.language.structure.Object aSubObjInstances_lbdExp53 = it_ft53.next();&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(aSubObjInstances_lbdExp53);&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA; else {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ObjectUtil.checkAllInvariantsSwitcher(org.kermeta.compil.runtime.helper.language.ObjectUtil.getSwitcher(self, prop_lbdExp51));&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;//EIle:func&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;//EIft:each&#xA;&#xA;}&#xA;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="isGreater" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreater(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isGreaterOrEqual" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isGreaterOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLowerOrEqual" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLowerOrEqual(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="isLower" sMContext="//@sMContexts.73" body="//Protection of the following code&#xA;if( self == null ) {&#xA;kermeta.exceptions.CallOnVoidTarget exp = kermeta.exceptions.ExceptionsFactory.eINSTANCE.createCallOnVoidTarget();&#xA;exp.setMessage(&quot;Initialize the String expression&quot;);&#xA;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError(exp);&#xA;}&#xA;//End of the protection&#xA;&#xA;&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;result = kermeta.standard.helper.IntegerWrapper.isLower(self.compareTo(other), 0);&#xA;&#xA;return result;&#xA;" usages="Wrapper">
    <sMParameters name="self" type="java.lang.String"/>
    <sMParameters name="other" type="java.lang.String"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="main" sMContext="//@sMContexts.74" body="&#xA;kermeta.standard.UnknownJavaObject anExec = (kermeta.standard.UnknownJavaObject) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.standard.StandardPackage.eINSTANCE.getUnknownJavaObject());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.75" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.load();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.76" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.normalizedUri();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.77" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.save();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.78" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.saveWithNewURI( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.79" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.findDanglingModelElements();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.80" body="&#xA;kermeta.persistence.Resource anExec = (kermeta.persistence.Resource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getResource());&#xA;anExec.instances();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.81" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFResource());&#xA;anExec.save();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.82" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFResource());&#xA;anExec.saveWithNewURI( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.83" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFResource());&#xA;anExec.saveAndValidateWithEMF();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.84" body="&#xA;kermeta.persistence.EMFResource anExec = (kermeta.persistence.EMFResource) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFResource());&#xA;anExec.load();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.85" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getRepository());&#xA;anExec.createResource( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.86" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getRepository());&#xA;anExec.normalizeUri( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.87" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getRepository());&#xA;anExec.findDanglingModelElements();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.88" body="&#xA;kermeta.persistence.Repository anExec = (kermeta.persistence.Repository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getRepository());&#xA;anExec.getResource( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.89" body="&#xA;kermeta.persistence.DanglingDiagnostic anExec = (kermeta.persistence.DanglingDiagnostic) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getDanglingDiagnostic());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.90" body="&#xA;kermeta.persistence.EMFRepository anExec = (kermeta.persistence.EMFRepository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFRepository());&#xA;anExec.createResource( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.91" body="&#xA;kermeta.persistence.EMFRepository anExec = (kermeta.persistence.EMFRepository) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.persistence.PersistencePackage.eINSTANCE.getEMFRepository());&#xA;anExec.registerEcoreFile( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.92" body="&#xA;kermeta.kunit.AbstractFallible anExec = (kermeta.kunit.AbstractFallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAbstractFallible());&#xA;anExec.distil( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.93" body="&#xA;kermeta.kunit.AbstractFallible anExec = (kermeta.kunit.AbstractFallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAbstractFallible());&#xA;anExec.fail( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.94" body="&#xA;kermeta.kunit.AbstractFallible anExec = (kermeta.kunit.AbstractFallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAbstractFallible());&#xA;anExec.assertEqual( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.95" body="&#xA;kermeta.kunit.AbstractFallible anExec = (kermeta.kunit.AbstractFallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAbstractFallible());&#xA;anExec.assertSimilar( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.96" body="&#xA;kermeta.kunit.Assert anExec = (kermeta.kunit.Assert) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAssert());&#xA;anExec.fail( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.97" body="&#xA;kermeta.kunit.Assert anExec = (kermeta.kunit.Assert) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getAssert());&#xA;anExec.assertEqual( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.98" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.number();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.99" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.getLogKermeta();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.100" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.mustStop();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.101" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.fail( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.102" body="&#xA;kermeta.kunit.Fallible anExec = (kermeta.kunit.Fallible) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFallible());&#xA;anExec.assertEqual( args[0],  args[1]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.103" body="&#xA;kermeta.kunit.Log anExec = (kermeta.kunit.Log) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getLog());&#xA;anExec.newAttempt();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.104" body="&#xA;kermeta.kunit.Failure anExec = (kermeta.kunit.Failure) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getFailure());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.105" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getError());&#xA;anExec.makeTearDown();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.106" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getError());&#xA;anExec.makeSetUp();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.107" body="&#xA;kermeta.kunit.Error anExec = (kermeta.kunit.Error) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getError());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.108" body="&#xA;kermeta.kunit.Test anExec = (kermeta.kunit.Test) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTest());&#xA;anExec.run();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.109" body="&#xA;kermeta.kunit.Test anExec = (kermeta.kunit.Test) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTest());&#xA;anExec.initLog();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.110" body="&#xA;kermeta.kunit.TestSuite anExec = (kermeta.kunit.TestSuite) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestSuite());&#xA;anExec.run();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.111" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.raiseIfHasFailures();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.112" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.setUp();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.113" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.getLogEMF_renameAs();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.114" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.setTestMethodName( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.115" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.getTestMethodName();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.116" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.117" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.tearDown();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.118" body="&#xA;kermeta.kunit.TestCase anExec = (kermeta.kunit.TestCase) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestCase());&#xA;anExec.run();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.119" body="&#xA;kermeta.kunit.TestRunner anExec = (kermeta.kunit.TestRunner) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.kunit.KunitPackage.eINSTANCE.getTestRunner());&#xA;anExec.printTestResult();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.120" body="&#xA;kermeta.language.ReflectiveCollection anExec = (kermeta.language.ReflectiveCollection) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.LanguagePackage.eINSTANCE.getReflectiveCollection());&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.121" body="&#xA;kermeta.language.ReflectiveSequence anExec = (kermeta.language.ReflectiveSequence) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.LanguagePackage.eINSTANCE.getReflectiveSequence());&#xA;anExec.clear();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.122" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.isVoid();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.123" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.container();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.124" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.getMetaClass();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.125" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.oid();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.126" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.127" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.isFrozen();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.128" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.hashcode();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.129" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.checkInvariants();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.130" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.freeze();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.131" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.containingResource();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.132" body="&#xA;kermeta.language.structure.Object anExec = (kermeta.language.structure.Object) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getObject());&#xA;anExec.checkAllInvariants();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.133" body="&#xA;kermeta.language.structure.ModelType anExec = (kermeta.language.structure.ModelType) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getModelType());&#xA;anExec._new();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.134" body="&#xA;kermeta.language.structure.Class anExec = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getClass_());&#xA;anExec._new();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.135" body="&#xA;kermeta.language.structure.Class anExec = (kermeta.language.structure.Class) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getClass_());&#xA;anExec.toString();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.136" body="&#xA;kermeta.language.structure.ClassDefinition anExec = (kermeta.language.structure.ClassDefinition) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getClassDefinition());&#xA;anExec.allSuperTypes();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.137" body="&#xA;kermeta.language.structure.NamedElement anExec = (kermeta.language.structure.NamedElement) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.language.structure.StructurePackage.eINSTANCE.getNamedElement());&#xA;anExec.qualifiedName();&#xA;" usages="Runner"/>
  <sMMethods name="checkInvariant_439012707__resultType" sMContext="//@sMContexts.138" body="java.lang.Boolean result = false;&#xA;&#xA;&#x9;result = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isKindOfSwitcher(self.getRight(), org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.language.structure.ProductType&quot;)));&#xA;return result;" usages="Invariant">
    <sMParameters name="self" type="kermeta.language.structure.FunctionType"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="main" sMContext="//@sMContexts.139" body="&#xA;kermeta.interpreter.DynamicExpression anExec = (kermeta.interpreter.DynamicExpression) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.interpreter.InterpreterPackage.eINSTANCE.getDynamicExpression());&#xA;anExec.initializeDefaults();&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.140" body="&#xA;kermeta.interpreter.DynamicExpression anExec = (kermeta.interpreter.DynamicExpression) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.interpreter.InterpreterPackage.eINSTANCE.getDynamicExpression());&#xA;anExec.parse( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="main" sMContext="//@sMContexts.141" body="&#xA;EcoreUtil.EcoreUtil anExec = (EcoreUtil.EcoreUtil) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(EcoreUtil.EcoreUtilPackage.eINSTANCE.getEcoreUtil());&#xA;anExec.loadModel( args[0]);&#xA;" usages="Runner"/>
  <sMMethods name="super_addAt" sMContext="//@sMContexts.142" typeParameters="G" body="&#xA;&#x9;java.lang.Boolean idIfCond_374 = false;&#xA;&#x9;idIfCond_374 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.IntegerWrapper.isLower(index, 0), kermeta.standard.helper.IntegerWrapper.isGreater(index, self.size()));&#xA;&#xA;&#x9;if( idIfCond_374 ) {&#xA;&#xA;&#x9;&#xA;if (true)&#xA;&#x9;throw new org.kermeta.compil.runtime.helper.error.KRuntimeError( ((kermeta.exceptions.IndexOutOfBound) org.kermeta.compil.runtime.helper.language.ClassUtil.newObject(kermeta.exceptions.ExceptionsPackage.eINSTANCE.getIndexOutOfBound())) );&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.OrderedCollectionUtil.addAt(self, index, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.OrderedCollection"/>
    <sMParameters name="index" type="java.lang.Integer"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_equals" sMContext="//@sMContexts.142" typeParameters="G" body="&#xA;java.lang.Boolean result = null;&#xA;&#xA;&#x9;java.lang.Boolean isEqual = false;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_375 = false;&#xA;&#x9;idIfCond_375 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.isVoidSwitcher(element));&#xA;&#xA;&#x9;if( idIfCond_375 ) {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_376 = false;&#xA;&#x9;idIfCond_376 = org.kermeta.compil.runtime.helper.language.TypeUtil.isInstanceSwitcher(org.kermeta.compil.runtime.ExecutionContext.getInstance().getMetaClass(&quot;kermeta.standard.OrderedCollection&lt;G>&quot;), element);&#xA;&#xA;&#x9;if( idIfCond_376 ) {&#xA;&#xA;&#x9;kermeta.standard.Collection&lt;G> collection = null;&#xA;&#xA;&#x9;collection = (kermeta.standard.Collection&lt;G>) org.kermeta.compil.runtime.helper.language.ObjectUtil.asTypeOrVoid(element, &quot;kermeta.standard.Collection&lt;G>&quot;);&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_377 = false;&#xA;&#x9;idIfCond_377 = kermeta.standard.helper.IntegerWrapper.equals(self.size(), collection.size());&#xA;&#xA;&#x9;if( idIfCond_377 ) {&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> selfIterator = self.iterator();&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> collectionIterator = collection.iterator();&#xA;&#xA;&#x9;java.lang.Boolean difference = false;&#xA;&#xA;&#x9;&#xA;&#x9;kermeta.standard.helper.IntegerWrapper.equals(1, 1);&#xA;&#x9;java.lang.Boolean idLoopCond_378 = false;&#xA;&#x9;while( !idLoopCond_378 ) {&#xA;&#x9;idLoopCond_378 = kermeta.standard.helper.BooleanWrapper.or(kermeta.standard.helper.BooleanWrapper.or(selfIterator.isOff(), collectionIterator.isOff()), difference);&#xA;&#x9;if ( idLoopCond_378 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_379 = false;&#xA;&#x9;idIfCond_379 = kermeta.standard.helper.BooleanWrapper.not(org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(selfIterator.next(), collectionIterator.next()));&#xA;&#xA;&#x9;if( idIfCond_379 ) {&#xA;&#xA;&#x9;difference = true;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;&#xA;&#x9;isEqual = kermeta.standard.helper.BooleanWrapper.not(difference);&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;&#x9;result = isEqual;&#xA;&#xA;return result;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.OrderedCollection"/>
    <sMParameters name="element" type="kermeta.language.structure.Object"/>
    <sMReturn type="java.lang.Boolean"/>
  </sMMethods>
  <sMMethods name="super_remove" sMContext="//@sMContexts.143" typeParameters="G" body="&#xA;&#x9;G elem = null;&#xA;//BIft:detect&#xA;&#xA;G result_ft95 = null;&#xA;&#xA;&#x9;G elem_ft95 = null;&#xA;&#xA;&#x9;result_ft95 = null;&#xA;&#xA;&#x9;&#xA;{&#xA;&#xA;&#x9;kermeta.standard.Iterator&lt;G> it_ft95 = self.iterator();&#xA;&#x9;java.lang.Boolean idLoopCond_380 = false;&#xA;&#x9;while( !idLoopCond_380 ) {&#xA;&#x9;idLoopCond_380 = kermeta.standard.helper.BooleanWrapper.or(it_ft95.isOff(), org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(result_ft95, null));&#xA;&#x9;if ( idLoopCond_380 ) {&#xA;&#x9;} else {&#xA;&#xA;&#x9;elem_ft95 = it_ft95.next();&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_381 = false;&#xA;//BIle:detector&#xA;G e_lbdExp95 = elem_ft95;&#xA;&#xA;&#x9;idIfCond_381 = org.kermeta.compil.runtime.helper.language.ObjectUtil.equalsSwitcher(e_lbdExp95, element);&#xA;//EIle:detector&#xA;&#xA;&#xA;&#x9;if( idIfCond_381 ) {&#xA;&#xA;&#x9;result_ft95 = elem_ft95;&#xA;}&#xA;&#xA;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;//CE&#xA;elem = result_ft95;&#xA;//EIft:detect&#xA;;&#xA;&#xA;&#x9;java.lang.Boolean idIfCond_382 = false;&#xA;&#x9;idIfCond_382 = org.kermeta.compil.runtime.helper.language.ObjectUtil.isNotEqualSwitcher(elem, null);&#xA;&#xA;&#x9;if( idIfCond_382 ) {&#xA;&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.remove(self, elem);&#xA;}&#xA;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Set"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_add" sMContext="//@sMContexts.144" typeParameters="G" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.basetypes.CollectionUtil.add(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Collection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_add" sMContext="//@sMContexts.143" typeParameters="G" body="&#xA;&#x9;java.lang.Boolean idIfCond_383 = false;&#xA;&#x9;idIfCond_383 = kermeta.standard.helper.BooleanWrapper.not(self.contains(element));&#xA;&#xA;&#x9;if( idIfCond_383 ) {&#xA;&#xA;&#x9;kermeta.standard.helper.CollectionSuper.super_add(self, element);&#xA;}&#xA;&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.standard.Set"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_clear" sMContext="//@sMContexts.145" typeParameters="G" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.clear(self);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_remove" sMContext="//@sMContexts.145" typeParameters="G" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.remove(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
  <sMMethods name="super_add" sMContext="//@sMContexts.145" typeParameters="G" body="&#xA;&#x9;org.kermeta.compil.runtime.helper.language.ReflectiveCollectionUtil.add(self, element);&#xA;" usages="Super">
    <sMParameters name="self" type="kermeta.language.ReflectiveCollection"/>
    <sMParameters name="element" type="G"/>
    <sMReturn type="void"/>
  </sMMethods>
</simk:SIMKModel>
