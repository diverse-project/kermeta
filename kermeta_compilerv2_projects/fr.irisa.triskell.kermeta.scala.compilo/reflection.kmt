/* $Id:$ 
 * Creation : October 21, 2009
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            mclavreu
 */
@mainClass "ecore::Main"
@mainOperation "main"


package ecore;


require kermeta
require "http://www.eclipse.org/emf/2002/Ecore"
require "helpers/EcoreUtil.kmt"
using ecore
using kermeta::persistence
using kermeta::standard
using kermeta::language::structure
using EcoreUtil
using kermeta::language
class Main
{
	operation main() : Void is do 
		var p : EPackage init EcoreUtil.new.loadModel("../metamodel/metamodel.ecore")
		var c : EClass
		c ?= p.eClassifiers.select{c|c.isKindOf(EClass)}.one
		stdio.writeln(c.name)
		c.testGetReflection()
		c.testSetReflection()
		EcoreUtil.new.saveModel(p,"../metamodel/metamodel_modified.ecore")
		stdio.writeln(c.name)
	end
	
	
}
aspect class EClass {
	operation testGetReflection() is do
		self.getMetaClass.classDefinition.allAttribute.select{p|not p.isDerived()}.each{p|
			//if self.get(p).isKindOf(ReflectiveSequence<EObject>) then
				//stdio.writeln("get on "+p.name+" : "+self.get(p).asType(ReflectiveSequence<EObject>).first.toString)
			//else
				stdio.writeln("get on "+p.name+" : "+self.get(p).toString)
			//end
		}
	end
	
	operation testSetReflection() is do
		self.getMetaClass.classDefinition.allAttribute.select{p|not p.isDerived()}.select{p|p.name.equals("name")}.each{p|
			stdio.writeln("set on "+p.name)
			self.~set(p,"Classe")
		}
	end
}