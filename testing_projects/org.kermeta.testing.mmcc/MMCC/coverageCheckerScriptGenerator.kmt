package mmcc;
require kermeta
require "kermeta"
using kermeta::standard
using kermeta::utils
using kermeta::standard
class CoverageCheckerScriptGenerator{
operation generate(fragmentsModelName : String, sourceMMName : String, path : String,classesQualifiedNames:Sequence<String>):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("/*THIS CLASS IS GENERATED BY BuildModelFragments.kmt*/ \n\n\npackage mmcc; \n\nrequire kermeta \nrequire \"")
_res.append(sourceMMName)
_res.append("\"\nrequire \"platform:/resource/org.kermeta.testing.mmcc/MMCC/CheckInputModels.kmt\" \nusing kermeta::persistence \nusing kermeta::standard \nusing kermeta::language\nusing kermeta::language::structure\n\n\nclass ModelsCoverageChecker{ \n\n\toperation checkModelsCoverage(models : OrderedSet<String>) : Void is do \n\t\tvar modelsToCheck : OrderedSet<EMFResource> init OrderedSet<EMFResource>.new\n\t\tvar repository : EMFRepository init EMFRepository.new \n\t\tmodels.each{model | \n\t\t\tvar resource : EMFResource    resource ?= repository.createResource(model, \"")
_res.append(sourceMMName)
_res.append("\") \n\t\t\tresource.load \n\t\t\tmodelsToCheck.add(resource) \n\t\t} \n\n\t\tvar mmClasses : Class[*] init OrderedSet<Class>.new \n")
classesQualifiedNames.each{ qn | 
_res.append("\t \tmmClasses.add(")
_res.append(qn.toString)
_res.append(")\n")
}
_res.append("\n\t\tvar c: CheckInputModels init CheckInputModels.new \n\t\tc.checkInputModels(repository,modelsToCheck, \"")
_res.append(fragmentsModelName)
_res.append("\",\"")
_res.append(sourceMMName)
_res.append("\", mmClasses) \n\tend \n} \n")
result := _res.toString
end
}
