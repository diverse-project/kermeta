/* 	$Id: TestModelsCoverageChecker.kmt,v 1.1 2007-09-14 13:08:06 ffleurey Exp $
 *	Creation date: January 9, 2007
 * 	Authors: Benoit Baudry
 *
 *	This class aims at testing CheckInputModels. However, it calls first ModelsCoverageChecker  
 *	because this is the driver class that is generated by BuildModelFragments to run CheckInputModels.
 *
 * 	The two test cases here are two configurations to launch the the coverage checker. 
 *	Each configuration is specific to a generated ModelsCoverageChecker.kmt
 *
 *	To build a new configuration it is necessary
 *		- first to generate a new partition model and a ModelsCoverageChecker for a particular source metamodel
 *		- then write a new test case as the ones present here that builds a list of model names that are 
 *		instances of the source metamodel and call checkModelsCoverage of the ModelsCoverageChecker with this list of names
 */
@mainClass "mmcc::Main"
@mainOperation "main" 


package mmcc;


require kermeta
require "http://www.eclipse.org/emf/2002/Ecore" 
require "platform:/resource/org.kermeta.testing.mmcc/tmp/ModelsCoverageChecker.kmt"

using kermeta::standard
using kermeta::persistence
using ecore
class Main
{
	reference mcc : ModelsCoverageChecker 
	attribute testDataDir : String

	operation main() : Void is do 
		testDataDir := "platform:/resource/org.kermeta.testing.mmcc/TestData/"
		testwStatechart()
		//testwSimpleuml_mm
		
//		testwSimpleMMIntFeature	
//		testwClassModel
	end
	
	/* Tests the generated ModelsCoverageChecker with the instances of statechart
		 Pre condition: the ModelsCoverageChecker must have been generated with statechart as the input metamodel
		To satisfy the AllPart criterion add Statechart4.xmi
		To satisfy the AllRanges criterion add Statechart5.xmi and Statechart6.xmi
	*/
	operation testwStatechart() is do
		mcc := ModelsCoverageChecker.new
		var models : OrderedSet<String>
		models := OrderedSet<String>.new
		models.add(testDataDir+"Statechart.xmi")
		models.add(testDataDir+"Statechart1.xmi")
		models.add(testDataDir+"Statechart2.xmi")
		models.add(testDataDir+"Statechart3.xmi")
		models.add(testDataDir+"Statechart4.xmi")
		//models.add(testDataDir+"Statechart5.xmi")
		//models.add(testDataDir+"Statechart6.xmi")
		mcc.checkModelsCoverage(models)		
	end
	
	// Tests the generated ModelsCoverageChecker with the instances of SimpleMMIntFeature
	// Pre condition: the ModelsCoverageChecker must have been generated with SimpleMMIntFeature as the input metamodel
	operation testwSimpleMMIntFeature() is do
		mcc := ModelsCoverageChecker.new
		var models : OrderedSet<String>
		models := OrderedSet<String>.new
		models.add(testDataDir+"oneClassA.xmi")
		models.add(testDataDir+"oneClassA3.xmi")
		models.add(testDataDir+"oneClassA0.xmi")
		mcc.checkModelsCoverage(models)		
	end

	operation testwClassModel() is do
		mcc := ModelsCoverageChecker.new
		var models : OrderedSet<String>
		models := OrderedSet<String>.new
		models.add(testDataDir+"classModel.xmi")
		mcc.checkModelsCoverage(models)
	end
	
	/* Tests the generated ModelsCoverageChecker with the instances of statechart
		 Pre condition: the ModelsCoverageChecker must have been generated with simpleuml_mm as the input metamodel
	*/
	operation testwSimpleuml_mm() is do
		mcc := ModelsCoverageChecker.new
		var models : OrderedSet<String>
		models := OrderedSet<String>.new
		models.add(testDataDir+"ClassModel1.simpleuml_mm")
		models.add(testDataDir+"ClassModel2.simpleuml_mm")
		models.add(testDataDir+"ClassModel3.simpleuml_mm")
		models.add(testDataDir+"ClassModel4.simpleuml_mm")
		models.add(testDataDir+"ClassModel5.simpleuml_mm")
		models.add(testDataDir+"ClassModel6.simpleuml_mm")
		models.add(testDataDir+"ClassModel7.simpleuml_mm")
		models.add(testDataDir+"ClassModel8.simpleuml_mm")
		models.add(testDataDir+"ClassModel9.simpleuml_mm")
		models.add(testDataDir+"ClassModel10.simpleuml_mm")
		models.add(testDataDir+"ClassModel11.simpleuml_mm")
		models.add(testDataDir+"ClassModel12.simpleuml_mm")
		models.add(testDataDir+"ClassModel13.simpleuml_mm")
		models.add(testDataDir+"ClassModel14.simpleuml_mm")
		models.add(testDataDir+"ClassModel15.simpleuml_mm")
		models.add(testDataDir+"ClassModel16.simpleuml_mm")
		
		mcc.checkModelsCoverage(models)		
	end
}